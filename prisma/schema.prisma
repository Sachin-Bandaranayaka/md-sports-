generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                 @id @default(autoincrement())
  name                  String
  email                 String              @unique
  password              String
  roleId                Int
  phone                 String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  isActive              Boolean             @default(true)
  shopId                Int?
  roleName              String?
  permissions           String[]            @default([])
  inventoryTransferFrom InventoryTransfer[] @relation("FromUser")
  inventoryTransferTo   InventoryTransfer[] @relation("ToUser")
  notifications         Notification[]
  refreshTokens         RefreshToken[]      @relation("UserRefreshTokens")
  role                  Role                @relation(fields: [roleId], references: [id])
  shop                  Shop?               @relation(fields: [shopId], references: [id])
  confirmedReceipts     Receipt[]
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRevoked Boolean  @default(false)
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
}

model Shop {
  id             Int                 @id @default(autoincrement())
  name           String
  location       String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  contact_person String?
  phone          String?
  email          String?
  is_active      Boolean?            @default(true)
  opening_time   DateTime?           @db.Time(6)
  closing_time   DateTime?           @db.Time(6)
  manager_id     Int?
  opening_date   DateTime?           @db.Date
  status         String?             @default("open")
  address_line1  String?
  address_line2  String?
  city           String?
  state          String?
  postal_code    String?
  country        String?             @default("Malaysia")
  latitude       Decimal?            @db.Decimal
  longitude      Decimal?            @db.Decimal
  tax_rate       Decimal?            @default(0) @db.Decimal
  inventoryItems InventoryItem[]
  transfersFrom  InventoryTransfer[] @relation("FromShop")
  transfersTo    InventoryTransfer[] @relation("ToShop")
  products       Product[]
  users          User[]
  invoices       Invoice[]
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?
  price               Float
  weightedAverageCost Float?                @map("weightedaveragecost")
  sku                 String?               @unique
  barcode             String?
  categoryId          Int?
  shopId              Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  inventoryItems      InventoryItem[]
  invoiceItems        InvoiceItem[]
  category            Category?             @relation(fields: [categoryId], references: [id])
  shop                Shop?                 @relation(fields: [shopId], references: [id])
  purchaseItems       PurchaseInvoiceItem[]
  quotationItems      QuotationItem[]
  transferItems       TransferItem[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  parentId      Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  products      Product[]
}

model InventoryItem {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int
  shopId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model InventoryTransfer {
  id            Int            @id @default(autoincrement())
  fromShopId    Int
  toShopId      Int
  fromUserId    Int
  toUserId      Int
  status        String
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fromShop      Shop           @relation("FromShop", fields: [fromShopId], references: [id])
  fromUser      User           @relation("FromUser", fields: [fromUserId], references: [id])
  toShop        Shop           @relation("ToShop", fields: [toShopId], references: [id])
  toUser        User           @relation("ToUser", fields: [toUserId], references: [id])
  transferItems TransferItem[]
}

model TransferItem {
  id         Int               @id @default(autoincrement())
  transferId Int
  productId  Int
  quantity   Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  product    Product           @relation(fields: [productId], references: [id])
  transfer   InventoryTransfer @relation(fields: [transferId], references: [id])
}

model Customer {
  id                 Int         @id @default(autoincrement())
  name               String
  email              String?
  phone              String?
  address            String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  city               String?
  postalCode         String?
  contactPerson      String?
  contactPersonPhone String?
  customerType       String?
  creditLimit        Float?
  creditPeriod       Int?
  taxId              String?
  notes              String?
  status             String?
  invoices           Invoice[]
  payments           Payment[]
  quotations         Quotation[]

  @@index([name])
}

model Supplier {
  id               Int               @id @default(autoincrement())
  name             String
  email            String?
  phone            String?
  address          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contactPerson    String?
  city             String?
  notes            String?
  status           String            @default("active")
  purchaseInvoices PurchaseInvoice[]
}

model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  customerId    Int
  total         Float
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod String?       @default("Cash")
  invoiceDate   DateTime?     @db.Date
  dueDate       DateTime?     @db.Date
  notes         String?
  shopId        Int?
  customer      Customer      @relation(fields: [customerId], references: [id])
  shop          Shop?         @relation(fields: [shopId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]

  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@index([customerId])
  @@index([shopId])
  @@index([status, createdAt])
  @@index([paymentMethod, createdAt])
  @@index([status, paymentMethod, createdAt])
  @@index([updatedAt, status])
}

model InvoiceItem {
  id        Int      @id @default(autoincrement())
  invoiceId Int
  productId Int
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id              Int      @id @default(autoincrement())
  invoiceId       Int
  customerId      Int
  amount          Float
  paymentMethod   String
  referenceNumber String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customer        Customer @relation(fields: [customerId], references: [id])
  invoice         Invoice  @relation(fields: [invoiceId], references: [id])
  receipt         Receipt?
}

model Receipt {
  id                Int      @id @default(autoincrement())
  paymentId         Int      @unique
  receiptNumber     String   @unique
  receiptDate       DateTime @db.Date
  bankName          String?
  accountNumber     String?
  chequeNumber      String?
  transactionId     String?
  notes             String?
  confirmedBy       Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  payment           Payment  @relation(fields: [paymentId], references: [id])
  confirmedByUser   User?    @relation(fields: [confirmedBy], references: [id])
}

model Quotation {
  id              Int             @id @default(autoincrement())
  quotationNumber String          @unique
  customerId      Int
  total           Float
  status          String
  validUntil      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  customer        Customer        @relation(fields: [customerId], references: [id])
  items           QuotationItem[]
}

model QuotationItem {
  id          Int       @id @default(autoincrement())
  quotationId Int
  productId   Int
  quantity    Int
  price       Float
  total       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model PurchaseInvoice {
  id            Int                   @id @default(autoincrement())
  invoiceNumber String                @unique
  supplierId    Int
  total         Float
  status        String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  distributions Json?
  date          DateTime?             @db.Date
  dueDate       DateTime?             @db.Date
  supplier      Supplier              @relation(fields: [supplierId], references: [id])
  items         PurchaseInvoiceItem[]
}

model PurchaseInvoiceItem {
  id                Int             @id @default(autoincrement())
  purchaseInvoiceId Int
  productId         Int
  quantity          Int
  price             Float
  total             Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id])
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  entity    String
  entityId  Int?
  details   Json?
  createdAt DateTime @default(now())
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(255)
  value       String
  description String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Account {
  id             Int           @id @default(autoincrement())
  name           String
  type           String
  balance        Decimal       @default(0) @db.Decimal(15, 2)
  description    String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  transactions   Transaction[] @relation("AccountTransactions")
  toTransactions Transaction[] @relation("ToAccountTransactions")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  date        DateTime @db.Date
  description String
  accountId   Int
  toAccountId Int?
  type        String
  amount      Decimal  @db.Decimal(15, 2)
  reference   String?
  category    String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
  account     Account  @relation("AccountTransactions", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  toAccount   Account? @relation("ToAccountTransactions", fields: [toAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([accountId], map: "transaction_accountId_idx")
  @@index([date], map: "transaction_date_idx")
  @@index([toAccountId], map: "transaction_toAccountId_idx")
  @@index([type], map: "transaction_type_idx")
}
