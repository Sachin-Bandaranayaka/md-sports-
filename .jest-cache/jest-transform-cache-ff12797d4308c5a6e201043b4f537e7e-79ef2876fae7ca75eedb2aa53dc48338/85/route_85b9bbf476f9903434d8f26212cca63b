c112ca668072214ddcd5fb7436d4632d
"use strict";

/* istanbul ignore next */
function cov_2om3stkek8() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/chatbot/route.ts";
  var hash = "b17f36261fc252058a934f66034522a1d1519030";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/chatbot/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "8": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 81
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 79
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "12": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "13": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "14": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 84
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 20
        }
      },
      "17": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 55
        }
      },
      "18": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "19": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 48
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "21": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 74
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "23": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 90
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "27": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 97
        }
      },
      "28": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "30": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 108
        }
      },
      "31": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 117
        }
      },
      "32": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "33": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 108
        }
      },
      "35": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 111
        }
      },
      "36": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 89
        }
      },
      "37": {
        start: {
          line: 86,
          column: 31
        },
        end: {
          line: 90,
          column: 10
        }
      },
      "38": {
        start: {
          line: 91,
          column: 39
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "39": {
        start: {
          line: 92,
          column: 32
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "40": {
        start: {
          line: 96,
          column: 30
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "41": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 91
        }
      },
      "42": {
        start: {
          line: 101,
          column: 25
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "43": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 83
        }
      },
      "44": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 70
        }
      },
      "45": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 80
        }
      },
      "46": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "47": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "48": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "getBusinessContext",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "isChatbotEnabled",
        decl: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 31
          }
        },
        loc: {
          start: {
            line: 34,
            column: 34
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 34
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 19
          }
        },
        loc: {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 47
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 36
          }
        }, {
          start: {
            line: 27,
            column: 40
          },
          end: {
            line: 27,
            column: 80
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 32
          },
          end: {
            line: 41,
            column: 63
          }
        }, {
          start: {
            line: 41,
            column: 66
          },
          end: {
            line: 41,
            column: 70
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 21
          }
        }, {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 49
          }
        }, {
          start: {
            line: 60,
            column: 53
          },
          end: {
            line: 60,
            column: 74
          }
        }],
        line: 60
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 19
          }
        }, {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 43
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 45
          }
        }, {
          start: {
            line: 111,
            column: 49
          },
          end: {
            line: 111,
            column: 84
          }
        }],
        line: 111
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/chatbot/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport OpenAI from 'openai';\nimport { prisma } from '@/lib/prisma';\n\n// Get business context from settings\nasync function getBusinessContext() {\n    try {\n        const contextSetting = await prisma.systemSettings.findUnique({\n            where: { key: 'ai_business_context' }\n        });\n        return contextSetting?.value || 'You are an AI assistant for MS Sports.'; // Simplified default\n    } catch (error) {\n        console.error('[Chatbot API] Error fetching business context:', error);\n        return 'You are an AI assistant for MS Sports.'; // Fallback default\n    }\n}\n\n// Check if chatbot is enabled\nasync function isChatbotEnabled() {\n    try {\n        const enabledSetting = await prisma.systemSettings.findUnique({\n            where: { key: 'ai_chatbot_enabled' }\n        });\n        return enabledSetting ? enabledSetting.value === 'true' : true;\n    } catch (error) {\n        console.error('[Chatbot API] Error checking if chatbot is enabled:', error);\n        return true;\n    }\n}\n\nexport async function POST(req: NextRequest) {\n    console.log('[Chatbot API] Received POST request');\n    try {\n        const enabled = await isChatbotEnabled();\n        if (!enabled) {\n            console.log('[Chatbot API] Chatbot is disabled in settings.');\n            return NextResponse.json(\n                { error: 'AI chatbot is currently disabled. Please enable it in the AI Assistant settings.' },\n                { status: 403 }\n            );\n        }\n\n        const { messages } = await req.json();\n        if (!messages || !Array.isArray(messages) || messages.length === 0) {\n            console.log('[Chatbot API] Invalid messages format or empty messages array.');\n            return NextResponse.json(\n                { error: 'Messages are required, must be a non-empty array.' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch API Key directly within the POST handler for each request\n        console.log('[Chatbot API] Fetching Deepseek API key from database for this request...');\n        const apiKeySetting = await prisma.systemSettings.findUnique({\n            where: { key: 'deepseek_api_key' }\n        });\n\n        if (!apiKeySetting) {\n            console.error('[Chatbot API] Deepseek API key setting not found in database for this request.');\n            throw new Error('Deepseek API key setting not found. Please configure it in the AI Assistant settings.');\n        }\n        const apiKey = apiKeySetting.value;\n        if (!apiKey || apiKey.trim() === '') {\n            console.error('[Chatbot API] Deepseek API key is empty in database settings for this request.');\n            throw new Error('Deepseek API key is empty. Please set a valid key in the AI Assistant settings.');\n        }\n        console.log(`[Chatbot API] API key for this request. Length: ${apiKey.length}.`);\n\n        // Instantiate OpenAI client for this specific request\n        const deepseekClient = new OpenAI({\n            apiKey,\n            baseURL: 'https://api.deepseek.com',\n            dangerouslyAllowBrowser: false,\n        });\n\n        const businessContextContent = await getBusinessContext();\n        const businessContext = { role: 'system', content: businessContextContent };\n        const finalMessages = [businessContext, ...messages];\n\n        console.log(`[Chatbot API] Sending ${finalMessages.length} messages to Deepseek.`);\n\n        const response = await deepseekClient.chat.completions.create({\n            model: 'deepseek-chat',\n            messages: finalMessages,\n            temperature: 0.7,\n            max_tokens: 500,\n        });\n\n        console.log('[Chatbot API] Successfully received response from Deepseek.');\n        return NextResponse.json(response.choices[0].message);\n\n    } catch (error: any) {\n        console.error('[Chatbot API] Error processing request:', error.message);\n        if (error.message.includes('API key') || error.message.includes('configure')) {\n            return NextResponse.json({ error: error.message }, { status: 403 });\n        }\n        return NextResponse.json(\n            { error: `Failed to process chatbot request: ${error.message}` },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["POST", "getBusinessContext", "contextSetting", "prisma", "systemSettings", "findUnique", "where", "key", "value", "error", "console", "isChatbotEnabled", "enabledSetting", "req", "log", "enabled", "NextResponse", "json", "status", "messages", "Array", "isArray", "length", "apiKeySetting", "Error", "apiKey", "trim", "deepseekClient", "OpenAI", "baseURL", "dangerouslyAllowBrowser", "businessContextContent", "businessContext", "role", "content", "finalMessages", "response", "chat", "completions", "create", "model", "temperature", "max_tokens", "choices", "message", "includes"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b17f36261fc252058a934f66034522a1d1519030"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2om3stkek8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2om3stkek8();
cov_2om3stkek8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2om3stkek8().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2om3stkek8().f[0]++;
    cov_2om3stkek8().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2om3stkek8().s[3]++, require("next/server"));
const _openai =
/* istanbul ignore next */
(/*#__PURE__*/cov_2om3stkek8().s[4]++, _interop_require_default(require("openai")));
const _prisma =
/* istanbul ignore next */
(cov_2om3stkek8().s[5]++, require("../../../lib/prisma"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2om3stkek8().f[1]++;
  cov_2om3stkek8().s[6]++;
  return /* istanbul ignore next */(cov_2om3stkek8().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2om3stkek8().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2om3stkek8().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2om3stkek8().b[0][1]++, {
    default: obj
  });
}
// Get business context from settings
async function getBusinessContext() {
  /* istanbul ignore next */
  cov_2om3stkek8().f[2]++;
  cov_2om3stkek8().s[7]++;
  try {
    const contextSetting =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[8]++, await _prisma.prisma.systemSettings.findUnique({
      where: {
        key: "ai_business_context"
      }
    }));
    /* istanbul ignore next */
    cov_2om3stkek8().s[9]++;
    return /* istanbul ignore next */(cov_2om3stkek8().b[2][0]++, contextSetting?.value) ||
    /* istanbul ignore next */
    (cov_2om3stkek8().b[2][1]++, "You are an AI assistant for MS Sports."); // Simplified default
  } catch (error) {
    /* istanbul ignore next */
    cov_2om3stkek8().s[10]++;
    console.error("[Chatbot API] Error fetching business context:", error);
    /* istanbul ignore next */
    cov_2om3stkek8().s[11]++;
    return "You are an AI assistant for MS Sports."; // Fallback default
  }
}
// Check if chatbot is enabled
async function isChatbotEnabled() {
  /* istanbul ignore next */
  cov_2om3stkek8().f[3]++;
  cov_2om3stkek8().s[12]++;
  try {
    const enabledSetting =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[13]++, await _prisma.prisma.systemSettings.findUnique({
      where: {
        key: "ai_chatbot_enabled"
      }
    }));
    /* istanbul ignore next */
    cov_2om3stkek8().s[14]++;
    return enabledSetting ?
    /* istanbul ignore next */
    (cov_2om3stkek8().b[3][0]++, enabledSetting.value === "true") :
    /* istanbul ignore next */
    (cov_2om3stkek8().b[3][1]++, true);
  } catch (error) {
    /* istanbul ignore next */
    cov_2om3stkek8().s[15]++;
    console.error("[Chatbot API] Error checking if chatbot is enabled:", error);
    /* istanbul ignore next */
    cov_2om3stkek8().s[16]++;
    return true;
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_2om3stkek8().f[4]++;
  cov_2om3stkek8().s[17]++;
  console.log("[Chatbot API] Received POST request");
  /* istanbul ignore next */
  cov_2om3stkek8().s[18]++;
  try {
    const enabled =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[19]++, await isChatbotEnabled());
    /* istanbul ignore next */
    cov_2om3stkek8().s[20]++;
    if (!enabled) {
      /* istanbul ignore next */
      cov_2om3stkek8().b[4][0]++;
      cov_2om3stkek8().s[21]++;
      console.log("[Chatbot API] Chatbot is disabled in settings.");
      /* istanbul ignore next */
      cov_2om3stkek8().s[22]++;
      return _server.NextResponse.json({
        error: "AI chatbot is currently disabled. Please enable it in the AI Assistant settings."
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2om3stkek8().b[4][1]++;
    }
    const {
      messages
    } =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[23]++, await req.json());
    /* istanbul ignore next */
    cov_2om3stkek8().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2om3stkek8().b[6][0]++, !messages) ||
    /* istanbul ignore next */
    (cov_2om3stkek8().b[6][1]++, !Array.isArray(messages)) ||
    /* istanbul ignore next */
    (cov_2om3stkek8().b[6][2]++, messages.length === 0)) {
      /* istanbul ignore next */
      cov_2om3stkek8().b[5][0]++;
      cov_2om3stkek8().s[25]++;
      console.log("[Chatbot API] Invalid messages format or empty messages array.");
      /* istanbul ignore next */
      cov_2om3stkek8().s[26]++;
      return _server.NextResponse.json({
        error: "Messages are required, must be a non-empty array."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2om3stkek8().b[5][1]++;
    }
    // Fetch API Key directly within the POST handler for each request
    cov_2om3stkek8().s[27]++;
    console.log("[Chatbot API] Fetching Deepseek API key from database for this request...");
    const apiKeySetting =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[28]++, await _prisma.prisma.systemSettings.findUnique({
      where: {
        key: "deepseek_api_key"
      }
    }));
    /* istanbul ignore next */
    cov_2om3stkek8().s[29]++;
    if (!apiKeySetting) {
      /* istanbul ignore next */
      cov_2om3stkek8().b[7][0]++;
      cov_2om3stkek8().s[30]++;
      console.error("[Chatbot API] Deepseek API key setting not found in database for this request.");
      /* istanbul ignore next */
      cov_2om3stkek8().s[31]++;
      throw new Error("Deepseek API key setting not found. Please configure it in the AI Assistant settings.");
    } else
    /* istanbul ignore next */
    {
      cov_2om3stkek8().b[7][1]++;
    }
    const apiKey =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[32]++, apiKeySetting.value);
    /* istanbul ignore next */
    cov_2om3stkek8().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_2om3stkek8().b[9][0]++, !apiKey) ||
    /* istanbul ignore next */
    (cov_2om3stkek8().b[9][1]++, apiKey.trim() === "")) {
      /* istanbul ignore next */
      cov_2om3stkek8().b[8][0]++;
      cov_2om3stkek8().s[34]++;
      console.error("[Chatbot API] Deepseek API key is empty in database settings for this request.");
      /* istanbul ignore next */
      cov_2om3stkek8().s[35]++;
      throw new Error("Deepseek API key is empty. Please set a valid key in the AI Assistant settings.");
    } else
    /* istanbul ignore next */
    {
      cov_2om3stkek8().b[8][1]++;
    }
    cov_2om3stkek8().s[36]++;
    console.log(`[Chatbot API] API key for this request. Length: ${apiKey.length}.`);
    // Instantiate OpenAI client for this specific request
    const deepseekClient =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[37]++, new _openai.default({
      apiKey,
      baseURL: "https://api.deepseek.com",
      dangerouslyAllowBrowser: false
    }));
    const businessContextContent =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[38]++, await getBusinessContext());
    const businessContext =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[39]++, {
      role: "system",
      content: businessContextContent
    });
    const finalMessages =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[40]++, [businessContext, ...messages]);
    /* istanbul ignore next */
    cov_2om3stkek8().s[41]++;
    console.log(`[Chatbot API] Sending ${finalMessages.length} messages to Deepseek.`);
    const response =
    /* istanbul ignore next */
    (cov_2om3stkek8().s[42]++, await deepseekClient.chat.completions.create({
      model: "deepseek-chat",
      messages: finalMessages,
      temperature: 0.7,
      max_tokens: 500
    }));
    /* istanbul ignore next */
    cov_2om3stkek8().s[43]++;
    console.log("[Chatbot API] Successfully received response from Deepseek.");
    /* istanbul ignore next */
    cov_2om3stkek8().s[44]++;
    return _server.NextResponse.json(response.choices[0].message);
  } catch (error) {
    /* istanbul ignore next */
    cov_2om3stkek8().s[45]++;
    console.error("[Chatbot API] Error processing request:", error.message);
    /* istanbul ignore next */
    cov_2om3stkek8().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_2om3stkek8().b[11][0]++, error.message.includes("API key")) ||
    /* istanbul ignore next */
    (cov_2om3stkek8().b[11][1]++, error.message.includes("configure"))) {
      /* istanbul ignore next */
      cov_2om3stkek8().b[10][0]++;
      cov_2om3stkek8().s[47]++;
      return _server.NextResponse.json({
        error: error.message
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2om3stkek8().b[10][1]++;
    }
    cov_2om3stkek8().s[48]++;
    return _server.NextResponse.json({
      error: `Failed to process chatbot request: ${error.message}`
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,