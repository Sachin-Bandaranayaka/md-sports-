f304c1a6c7ebbe3324a188226b7bd5b1
"use strict";

/* istanbul ignore next */
function cov_29cerbptvx() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts";
  var hash = "8eee461f4ae3ca59e232e9a8c68422ad3ef9994d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "11": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 64
        }
      },
      "13": {
        start: {
          line: 32,
          column: 43
        },
        end: {
          line: 32,
          column: 114
        }
      },
      "14": {
        start: {
          line: 33,
          column: 37
        },
        end: {
          line: 33,
          column: 97
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "17": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 67
        }
      },
      "18": {
        start: {
          line: 44,
          column: 35
        },
        end: {
          line: 44,
          column: 93
        }
      },
      "19": {
        start: {
          line: 45,
          column: 37
        },
        end: {
          line: 45,
          column: 97
        }
      },
      "20": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 114
        }
      },
      "21": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 69
        }
      },
      "22": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 47
        }
      },
      "23": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 66,
          column: 18
        }
      },
      "28": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 66
        }
      },
      "29": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 101
        }
      },
      "30": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "32": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "33": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "34": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "35": {
        start: {
          line: 94,
          column: 22
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "36": {
        start: {
          line: 139,
          column: 35
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "37": {
        start: {
          line: 140,
          column: 46
        },
        end: {
          line: 140,
          column: 50
        }
      },
      "38": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "39": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "40": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "41": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "42": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 70
        }
      },
      "43": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 79
        }
      },
      "44": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "45": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "46": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "47": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "48": {
        start: {
          line: 174,
          column: 21
        },
        end: {
          line: 174,
          column: 41
        }
      },
      "49": {
        start: {
          line: 175,
          column: 24
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "50": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "51": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 53
        }
      },
      "52": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 139,
            column: 45
          },
          end: {
            line: 139,
            column: 46
          }
        },
        loc: {
          start: {
            line: 139,
            column: 53
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 139
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 172,
            column: 15
          },
          end: {
            line: 172,
            column: 19
          }
        },
        loc: {
          start: {
            line: 172,
            column: 29
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 172
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 47
          }
        }, {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 80
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 52
          }
        }, {
          start: {
            line: 46,
            column: 56
          },
          end: {
            line: 46,
            column: 82
          }
        }, {
          start: {
            line: 46,
            column: 86
          },
          end: {
            line: 46,
            column: 114
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 70,
            column: 13
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 24
          }
        }, {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 38
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 20
          }
        }, {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 34
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "11": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 31
          }
        }, {
          start: {
            line: 146,
            column: 35
          },
          end: {
            line: 146,
            column: 66
          }
        }],
        line: 146
      },
      "12": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { validateTokenPermission, getShopIdFromToken } from '@/lib/auth';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const url = new URL(req.url);\n    const simple = url.searchParams.get('simple') === 'true';\n\n    // Validate token and permissions - check for shop distribution view or shop manage\n    const shopDistributionPermission = await validateTokenPermission(req, 'shop:distribution:view');\n    const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n    \n    if (!shopDistributionPermission.isValid && !shopManagePermission.isValid) {\n      return NextResponse.json(\n        { success: false, message: 'Permission denied: shop:distribution:view or shop:manage required' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's shop context for filtering\n    const userShopId = await getShopIdFromToken(req);\n    const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n    const userManagePermission = await validateTokenPermission(req, 'user:manage');\n    \n    const isAdmin = shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n    \n    // Development mode - allow all access\n    const token = req.headers.get('authorization')?.split(' ')[1];\n    const isDevMode = token === 'dev-token';\n\n    // Debug logging\n    console.log('Shops API Debug:', {\n        isAdmin,\n        userShopId,\n        isDevMode,\n        shopManagePermission: shopManagePermission.isValid,\n        adminAllPermission: adminAllPermission.isValid,\n        userManagePermission: userManagePermission.isValid\n    });\n\n    if (simple) {\n      // Return simplified shop data for dropdowns\n      let whereClause = {};\n      \n      // If user is not admin, filter by their assigned shop\n       if (!isAdmin && userShopId) {\n         whereClause = {\n           id: userShopId\n         };\n         console.log('Applying shop filter:', whereClause);\n       } else {\n         console.log('No shop filter applied - isAdmin:', isAdmin, 'userShopId:', userShopId);\n       }\n      \n      const shops = await prisma.shop.findMany({\n        where: whereClause,\n        select: {\n          id: true,\n          name: true,\n        },\n        orderBy: {\n          name: 'asc',\n        },\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: shops,\n      });\n    }\n\n        // Fetch shops from the database with proper numeric IDs\n        let whereClause = {};\n        \n        // If user is not admin, filter by their assigned shop\n         if (!isAdmin && userShopId) {\n             whereClause = {\n                 id: userShopId\n             };\n         }\n        \n        const shops = await prisma.shop.findMany({\n            where: whereClause,\n            orderBy: {\n                name: 'asc'\n            },\n            select: {\n                id: true,\n                name: true,\n                location: true,\n                contact_person: true,\n                phone: true,\n                email: true,\n                is_active: true,\n                opening_time: true,\n                closing_time: true,\n                manager_id: true,\n                opening_date: true,\n                status: true,\n                address_line1: true,\n                address_line2: true,\n                city: true,\n                state: true,\n                postal_code: true,\n                country: true,\n                latitude: true,\n                longitude: true,\n                tax_rate: true,\n                createdAt: true,\n                updatedAt: true,\n                manager: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                _count: {\n                    select: {\n                        InventoryItem: true\n                    }\n                }\n            }\n        });\n\n        // Transform the data to include total_inventory count\n        const shopsWithInventory = shops.map(shop => {\n            const { _count, ...restOfShop } = shop;\n            return {\n                ...restOfShop,\n                total_inventory: _count.InventoryItem\n            };\n        });\n\n        if (!shopsWithInventory || shopsWithInventory.length === 0) {\n            return NextResponse.json({ success: true, data: [] });\n        }\n\n        return NextResponse.json({ success: true, data: shopsWithInventory });\n\n    } catch (error) {\n        console.error('[API/SHOPS_GET] Error fetching shops:', error);\n        // It's good practice to avoid sending detailed internal error messages to the client.\n        let errorMessage = 'An unexpected error occurred while fetching shops.';\n        if (error instanceof Error) {\n            errorMessage = error.message;\n            // You could log error.message for server-side debugging\n        }\n        return NextResponse.json({ success: false, message: errorMessage }, { status: 500 });\n    }\n}\n\n// POST: Create a new shop\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        const newShop = await prisma.shop.create({\n            data: {\n                name: body.name,\n                location: body.location,\n                is_active: body.is_active,\n                status: body.status,\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: newShop\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating shop:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create shop' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "req", "url", "URL", "simple", "searchParams", "get", "shopDistributionPermission", "validateTokenPermission", "shopManagePermission", "isValid", "NextResponse", "json", "success", "message", "status", "userShopId", "getShopIdFromToken", "adminAllPermission", "userManagePermission", "isAdmin", "token", "headers", "split", "isDevMode", "console", "log", "whereClause", "id", "shops", "prisma", "shop", "findMany", "where", "select", "name", "orderBy", "data", "location", "contact_person", "phone", "email", "is_active", "opening_time", "closing_time", "manager_id", "opening_date", "address_line1", "address_line2", "city", "state", "postal_code", "country", "latitude", "longitude", "tax_rate", "createdAt", "updatedAt", "manager", "_count", "InventoryItem", "shopsWithInventory", "map", "restOfShop", "total_inventory", "length", "error", "errorMessage", "Error", "request", "body", "newShop", "create"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8eee461f4ae3ca59e232e9a8c68422ad3ef9994d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29cerbptvx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29cerbptvx();
cov_29cerbptvx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[0]++;
  cov_29cerbptvx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_29cerbptvx().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_29cerbptvx().f[1]++;
    cov_29cerbptvx().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_29cerbptvx().f[2]++;
    cov_29cerbptvx().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_29cerbptvx().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_29cerbptvx().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_29cerbptvx().s[8]++, require("../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[3]++;
  cov_29cerbptvx().s[9]++;
  return /* istanbul ignore next */(cov_29cerbptvx().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_29cerbptvx().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_29cerbptvx().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_29cerbptvx().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[4]++;
  cov_29cerbptvx().s[10]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[11]++, new URL(req.url));
    const simple =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[12]++, url.searchParams.get("simple") === "true");
    // Validate token and permissions - check for shop distribution view or shop manage
    const shopDistributionPermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[13]++, await (0, _auth.validateTokenPermission)(req, "shop:distribution:view"));
    const shopManagePermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[14]++, await (0, _auth.validateTokenPermission)(req, "shop:manage"));
    /* istanbul ignore next */
    cov_29cerbptvx().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[3][0]++, !shopDistributionPermission.isValid) &&
    /* istanbul ignore next */
    (cov_29cerbptvx().b[3][1]++, !shopManagePermission.isValid)) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[2][0]++;
      cov_29cerbptvx().s[16]++;
      return _server.NextResponse.json({
        success: false,
        message: "Permission denied: shop:distribution:view or shop:manage required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[2][1]++;
    }
    // Get user's shop context for filtering
    const userShopId =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[17]++, await (0, _auth.getShopIdFromToken)(req));
    const adminAllPermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[18]++, await (0, _auth.validateTokenPermission)(req, "admin:all"));
    const userManagePermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[19]++, await (0, _auth.validateTokenPermission)(req, "user:manage"));
    const isAdmin =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[20]++,
    /* istanbul ignore next */
    (cov_29cerbptvx().b[4][0]++, shopManagePermission.isValid) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[4][1]++, adminAllPermission.isValid) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[4][2]++, userManagePermission.isValid));
    // Development mode - allow all access
    const token =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[21]++, req.headers.get("authorization")?.split(" ")[1]);
    const isDevMode =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[22]++, token === "dev-token");
    // Debug logging
    /* istanbul ignore next */
    cov_29cerbptvx().s[23]++;
    console.log("Shops API Debug:", {
      isAdmin,
      userShopId,
      isDevMode,
      shopManagePermission: shopManagePermission.isValid,
      adminAllPermission: adminAllPermission.isValid,
      userManagePermission: userManagePermission.isValid
    });
    /* istanbul ignore next */
    cov_29cerbptvx().s[24]++;
    if (simple) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[5][0]++;
      // Return simplified shop data for dropdowns
      let whereClause =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[25]++, {});
      // If user is not admin, filter by their assigned shop
      /* istanbul ignore next */
      cov_29cerbptvx().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_29cerbptvx().b[7][0]++, !isAdmin) &&
      /* istanbul ignore next */
      (cov_29cerbptvx().b[7][1]++, userShopId)) {
        /* istanbul ignore next */
        cov_29cerbptvx().b[6][0]++;
        cov_29cerbptvx().s[27]++;
        whereClause = {
          id: userShopId
        };
        /* istanbul ignore next */
        cov_29cerbptvx().s[28]++;
        console.log("Applying shop filter:", whereClause);
      } else {
        /* istanbul ignore next */
        cov_29cerbptvx().b[6][1]++;
        cov_29cerbptvx().s[29]++;
        console.log("No shop filter applied - isAdmin:", isAdmin, "userShopId:", userShopId);
      }
      const shops =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[30]++, await _prisma.default.shop.findMany({
        where: whereClause,
        select: {
          id: true,
          name: true
        },
        orderBy: {
          name: "asc"
        }
      }));
      /* istanbul ignore next */
      cov_29cerbptvx().s[31]++;
      return _server.NextResponse.json({
        success: true,
        data: shops
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[5][1]++;
    }
    // Fetch shops from the database with proper numeric IDs
    let whereClause =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[32]++, {});
    // If user is not admin, filter by their assigned shop
    /* istanbul ignore next */
    cov_29cerbptvx().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[9][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_29cerbptvx().b[9][1]++, userShopId)) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[8][0]++;
      cov_29cerbptvx().s[34]++;
      whereClause = {
        id: userShopId
      };
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[8][1]++;
    }
    const shops =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[35]++, await _prisma.default.shop.findMany({
      where: whereClause,
      orderBy: {
        name: "asc"
      },
      select: {
        id: true,
        name: true,
        location: true,
        contact_person: true,
        phone: true,
        email: true,
        is_active: true,
        opening_time: true,
        closing_time: true,
        manager_id: true,
        opening_date: true,
        status: true,
        address_line1: true,
        address_line2: true,
        city: true,
        state: true,
        postal_code: true,
        country: true,
        latitude: true,
        longitude: true,
        tax_rate: true,
        createdAt: true,
        updatedAt: true,
        manager: {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        },
        _count: {
          select: {
            InventoryItem: true
          }
        }
      }
    }));
    // Transform the data to include total_inventory count
    const shopsWithInventory =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[36]++, shops.map(shop => {
      /* istanbul ignore next */
      cov_29cerbptvx().f[5]++;
      const {
        _count,
        ...restOfShop
      } =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[37]++, shop);
      /* istanbul ignore next */
      cov_29cerbptvx().s[38]++;
      return {
        ...restOfShop,
        total_inventory: _count.InventoryItem
      };
    }));
    /* istanbul ignore next */
    cov_29cerbptvx().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[11][0]++, !shopsWithInventory) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[11][1]++, shopsWithInventory.length === 0)) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[10][0]++;
      cov_29cerbptvx().s[40]++;
      return _server.NextResponse.json({
        success: true,
        data: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[10][1]++;
    }
    cov_29cerbptvx().s[41]++;
    return _server.NextResponse.json({
      success: true,
      data: shopsWithInventory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[42]++;
    console.error("[API/SHOPS_GET] Error fetching shops:", error);
    // It's good practice to avoid sending detailed internal error messages to the client.
    let errorMessage =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[43]++, "An unexpected error occurred while fetching shops.");
    /* istanbul ignore next */
    cov_29cerbptvx().s[44]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[12][0]++;
      cov_29cerbptvx().s[45]++;
      errorMessage = error.message;
      // You could log error.message for server-side debugging
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[12][1]++;
    }
    cov_29cerbptvx().s[46]++;
    return _server.NextResponse.json({
      success: false,
      message: errorMessage
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[6]++;
  cov_29cerbptvx().s[47]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[48]++, await request.json());
    const newShop =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[49]++, await _prisma.default.shop.create({
      data: {
        name: body.name,
        location: body.location,
        is_active: body.is_active,
        status: body.status
      }
    }));
    /* istanbul ignore next */
    cov_29cerbptvx().s[50]++;
    return _server.NextResponse.json({
      success: true,
      data: newShop
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[51]++;
    console.error("Error creating shop:", error);
    /* istanbul ignore next */
    cov_29cerbptvx().s[52]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create shop"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,