616ac4465a0f56431735c3d8e8764f56
"use strict";

/* istanbul ignore next */
function cov_vzq0avkdi() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/summary/route.ts";
  var hash = "70745c66d0ea5d6470a518b82773789715151328";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/summary/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "12": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "13": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "14": {
        start: {
          line: 31,
          column: 26
        },
        end: {
          line: 31,
          column: 158
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "16": {
        start: {
          line: 37,
          column: 31
        },
        end: {
          line: 37,
          column: 52
        }
      },
      "17": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 42
        }
      },
      "18": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 66,
          column: 46
        }
      },
      "19": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "21": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "23": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "24": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 64
        }
      },
      "25": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 43
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "28": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 45
        }
      },
      "29": {
        start: {
          line: 68,
          column: 17
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "30": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "31": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 25
        }
      },
      "32": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "33": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 45
        }
      },
      "34": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "35": {
        start: {
          line: 93,
          column: 28
        },
        end: {
          line: 93,
          column: 45
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 46
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 37
        }
      },
      "38": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 47
        }
      },
      "39": {
        start: {
          line: 99,
          column: 29
        },
        end: {
          line: 107,
          column: 65
        }
      },
      "40": {
        start: {
          line: 99,
          column: 62
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "41": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 50
        }
      },
      "42": {
        start: {
          line: 109,
          column: 21
        },
        end: {
          line: 109,
          column: 22
        }
      },
      "43": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "44": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 69
        }
      },
      "45": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 42
        }
      },
      "46": {
        start: {
          line: 115,
          column: 35
        },
        end: {
          line: 122,
          column: 51
        }
      },
      "47": {
        start: {
          line: 115,
          column: 68
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "48": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 45
        }
      },
      "49": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 49
        }
      },
      "50": {
        start: {
          line: 126,
          column: 38
        },
        end: {
          line: 148,
          column: 50
        }
      },
      "51": {
        start: {
          line: 126,
          column: 71
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "52": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 149,
          column: 52
        }
      },
      "53": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 39
        }
      },
      "54": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 158,
          column: 49
        }
      },
      "55": {
        start: {
          line: 152,
          column: 65
        },
        end: {
          line: 158,
          column: 10
        }
      },
      "56": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 159,
          column: 42
        }
      },
      "57": {
        start: {
          line: 161,
          column: 27
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "58": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 50
        }
      },
      "59": {
        start: {
          line: 163,
          column: 26
        },
        end: {
          line: 163,
          column: 160
        }
      },
      "60": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "61": {
        start: {
          line: 169,
          column: 27
        },
        end: {
          line: 169,
          column: 47
        }
      },
      "62": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "63": {
        start: {
          line: 171,
          column: 26
        },
        end: {
          line: 171,
          column: 46
        }
      },
      "64": {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 44
        }
      },
      "65": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 174,
          column: 41
        }
      },
      "66": {
        start: {
          line: 175,
          column: 30
        },
        end: {
          line: 192,
          column: 42
        }
      },
      "67": {
        start: {
          line: 175,
          column: 63
        },
        end: {
          line: 188,
          column: 10
        }
      },
      "68": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 193,
          column: 44
        }
      },
      "69": {
        start: {
          line: 194,
          column: 24
        },
        end: {
          line: 194,
          column: 44
        }
      },
      "70": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "71": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 235,
          column: 6
        }
      },
      "72": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 343,
          column: 2
        }
      },
      "73": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 342,
          column: 5
        }
      },
      "74": {
        start: {
          line: 240,
          column: 27
        },
        end: {
          line: 240,
          column: 94
        }
      },
      "75": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "76": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "77": {
        start: {
          line: 249,
          column: 33
        },
        end: {
          line: 249,
          column: 53
        }
      },
      "78": {
        start: {
          line: 250,
          column: 23
        },
        end: {
          line: 250,
          column: 49
        }
      },
      "79": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "80": {
        start: {
          line: 253,
          column: 33
        },
        end: {
          line: 253,
          column: 49
        }
      },
      "81": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "82": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 42
        }
      },
      "83": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 67
        }
      },
      "84": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "85": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "86": {
        start: {
          line: 268,
          column: 21
        },
        end: {
          line: 277,
          column: 10
        }
      },
      "87": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "88": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 283,
          column: 15
        }
      },
      "89": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 286,
          column: 146
        }
      },
      "90": {
        start: {
          line: 288,
          column: 28
        },
        end: {
          line: 288,
          column: 54
        }
      },
      "91": {
        start: {
          line: 289,
          column: 25
        },
        end: {
          line: 289,
          column: 134
        }
      },
      "92": {
        start: {
          line: 290,
          column: 27
        },
        end: {
          line: 290,
          column: 66
        }
      },
      "93": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "94": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 60
        }
      },
      "95": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 300,
          column: 15
        }
      },
      "96": {
        start: {
          line: 303,
          column: 29
        },
        end: {
          line: 303,
          column: 52
        }
      },
      "97": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "98": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 48
        }
      },
      "99": {
        start: {
          line: 314,
          column: 30
        },
        end: {
          line: 314,
          column: 144
        }
      },
      "100": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 51
        }
      },
      "101": {
        start: {
          line: 317,
          column: 29
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "102": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 66
        }
      },
      "103": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 69
        }
      },
      "104": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 55
        }
      },
      "105": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 71
        }
      },
      "106": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 23
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 31
          }
        },
        loc: {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "fetchSummaryData",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 31
          }
        },
        loc: {
          start: {
            line: 27,
            column: 80
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 29,
            column: 28
          }
        },
        loc: {
          start: {
            line: 29,
            column: 50
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 58
          },
          end: {
            line: 40,
            column: 59
          }
        },
        loc: {
          start: {
            line: 40,
            column: 62
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 40
      },
      "7": {
        name: "fetchSummaryDataFiltered",
        decl: {
          start: {
            line: 85,
            column: 15
          },
          end: {
            line: 85,
            column: 39
          }
        },
        loc: {
          start: {
            line: 85,
            column: 68
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 58
          },
          end: {
            line: 99,
            column: 59
          }
        },
        loc: {
          start: {
            line: 99,
            column: 62
          },
          end: {
            line: 103,
            column: 9
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 115,
            column: 64
          },
          end: {
            line: 115,
            column: 65
          }
        },
        loc: {
          start: {
            line: 115,
            column: 68
          },
          end: {
            line: 122,
            column: 10
          }
        },
        line: 115
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 126,
            column: 67
          },
          end: {
            line: 126,
            column: 68
          }
        },
        loc: {
          start: {
            line: 126,
            column: 71
          },
          end: {
            line: 144,
            column: 10
          }
        },
        line: 126
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 152,
            column: 61
          },
          end: {
            line: 152,
            column: 62
          }
        },
        loc: {
          start: {
            line: 152,
            column: 65
          },
          end: {
            line: 158,
            column: 10
          }
        },
        line: 152
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 161,
            column: 27
          },
          end: {
            line: 161,
            column: 28
          }
        },
        loc: {
          start: {
            line: 161,
            column: 50
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 161
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 175,
            column: 59
          },
          end: {
            line: 175,
            column: 60
          }
        },
        loc: {
          start: {
            line: 175,
            column: 63
          },
          end: {
            line: 188,
            column: 10
          }
        },
        line: 175
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 237,
            column: 61
          },
          end: {
            line: 237,
            column: 62
          }
        },
        loc: {
          start: {
            line: 237,
            column: 87
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 47
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 26
          },
          end: {
            line: 31,
            column: 158
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 31,
            column: 98
          }
        }, {
          start: {
            line: 31,
            column: 101
          },
          end: {
            line: 31,
            column: 158
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 44
          },
          end: {
            line: 31,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 62
          },
          end: {
            line: 31,
            column: 65
          }
        }, {
          start: {
            line: 31,
            column: 68
          },
          end: {
            line: 31,
            column: 70
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 104
          },
          end: {
            line: 31,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 122
          },
          end: {
            line: 31,
            column: 125
          }
        }, {
          start: {
            line: 31,
            column: 128
          },
          end: {
            line: 31,
            column: 130
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 110,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 110,
            column: 24
          }
        }, {
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 110,
            column: 47
          }
        }, {
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 99
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 120,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 118,
            column: 53
          }
        }, {
          start: {
            line: 118,
            column: 57
          },
          end: {
            line: 120,
            column: 17
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 134,
            column: 53
          }
        }, {
          start: {
            line: 134,
            column: 57
          },
          end: {
            line: 136,
            column: 17
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 19
          },
          end: {
            line: 139,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 28
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: 139,
            column: 20
          },
          end: {
            line: 139,
            column: 22
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 161,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 161,
            column: 43
          },
          end: {
            line: 161,
            column: 47
          }
        }],
        line: 161
      },
      "14": {
        loc: {
          start: {
            line: 163,
            column: 26
          },
          end: {
            line: 163,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 41
          },
          end: {
            line: 163,
            column: 99
          }
        }, {
          start: {
            line: 163,
            column: 102
          },
          end: {
            line: 163,
            column: 160
          }
        }],
        line: 163
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 44
          },
          end: {
            line: 163,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 63
          },
          end: {
            line: 163,
            column: 66
          }
        }, {
          start: {
            line: 163,
            column: 69
          },
          end: {
            line: 163,
            column: 71
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 163,
            column: 105
          },
          end: {
            line: 163,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 124
          },
          end: {
            line: 163,
            column: 127
          }
        }, {
          start: {
            line: 163,
            column: 130
          },
          end: {
            line: 163,
            column: 132
          }
        }],
        line: 163
      },
      "17": {
        loc: {
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 180,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 53
          }
        }, {
          start: {
            line: 178,
            column: 57
          },
          end: {
            line: 180,
            column: 17
          }
        }],
        line: 178
      },
      "18": {
        loc: {
          start: {
            line: 181,
            column: 19
          },
          end: {
            line: 183,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 183,
            column: 17
          }
        }, {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 22
          }
        }],
        line: 181
      },
      "19": {
        loc: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 61
          }
        }, {
          start: {
            line: 205,
            column: 65
          },
          end: {
            line: 205,
            column: 66
          }
        }],
        line: 205
      },
      "20": {
        loc: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 63
          }
        }, {
          start: {
            line: 219,
            column: 67
          },
          end: {
            line: 219,
            column: 68
          }
        }],
        line: 219
      },
      "21": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "22": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "23": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "24": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 34
          }
        }, {
          start: {
            line: 254,
            column: 38
          },
          end: {
            line: 254,
            column: 57
          }
        }],
        line: 254
      },
      "25": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 286,
            column: 24
          },
          end: {
            line: 286,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 24
          },
          end: {
            line: 286,
            column: 49
          }
        }, {
          start: {
            line: 286,
            column: 53
          },
          end: {
            line: 286,
            column: 84
          }
        }, {
          start: {
            line: 286,
            column: 88
          },
          end: {
            line: 286,
            column: 104
          }
        }, {
          start: {
            line: 286,
            column: 108
          },
          end: {
            line: 286,
            column: 146
          }
        }],
        line: 286
      },
      "28": {
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 288,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 38
          },
          end: {
            line: 288,
            column: 45
          }
        }, {
          start: {
            line: 288,
            column: 48
          },
          end: {
            line: 288,
            column: 54
          }
        }],
        line: 288
      },
      "29": {
        loc: {
          start: {
            line: 289,
            column: 46
          },
          end: {
            line: 289,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 289,
            column: 67
          },
          end: {
            line: 289,
            column: 81
          }
        }, {
          start: {
            line: 289,
            column: 84
          },
          end: {
            line: 289,
            column: 89
          }
        }],
        line: 289
      },
      "30": {
        loc: {
          start: {
            line: 289,
            column: 93
          },
          end: {
            line: 289,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 93
          },
          end: {
            line: 289,
            column: 103
          }
        }, {
          start: {
            line: 289,
            column: 107
          },
          end: {
            line: 289,
            column: 112
          }
        }],
        line: 289
      },
      "31": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "32": {
        loc: {
          start: {
            line: 303,
            column: 29
          },
          end: {
            line: 303,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 39
          },
          end: {
            line: 303,
            column: 43
          }
        }, {
          start: {
            line: 303,
            column: 46
          },
          end: {
            line: 303,
            column: 52
          }
        }],
        line: 303
      },
      "33": {
        loc: {
          start: {
            line: 314,
            column: 53
          },
          end: {
            line: 314,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 74
          },
          end: {
            line: 314,
            column: 88
          }
        }, {
          start: {
            line: 314,
            column: 91
          },
          end: {
            line: 314,
            column: 95
          }
        }],
        line: 314
      },
      "34": {
        loc: {
          start: {
            line: 334,
            column: 19
          },
          end: {
            line: 334,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 44
          },
          end: {
            line: 334,
            column: 57
          }
        }, {
          start: {
            line: 334,
            column: 60
          },
          end: {
            line: 334,
            column: 73
          }
        }],
        line: 334
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/summary/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Extracted function to fetch dashboard summary data\nexport async function fetchSummaryData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    // Generate trend data for transfers\n    const getRandomTrend = (isPercentage = true) => {\n        const randomValue = Math.random() * 10 - 5;\n        const formatted = isPercentage\n            ? `${randomValue > 0 ? '+' : ''}${randomValue.toFixed(1)}%`\n            : `${randomValue > 0 ? '+' : ''}${Math.round(randomValue)}`;\n        return {\n            trend: formatted,\n            trendUp: randomValue >= 0\n        };\n    };\n    const transfersTrendData = getRandomTrend(false);\n\n    // Count pending transfers with shop filtering and optional date filtering\n    console.time('countPendingTransfers');\n    const pendingTransfers = await safeQuery(\n        () => {\n            const where: any = { status: 'pending' };\n            if (shopId) {\n                where.OR = [\n                    { fromShopId: shopId },\n                    { toShopId: shopId }\n                ];\n            }\n            // Add date filtering if periodDays is provided\n            if (periodDays) {\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() - periodDays);\n                startDate.setHours(0, 0, 0, 0);\n                where.createdAt = { gte: startDate };\n            }\n            return prisma.inventoryTransfer.count({ where });\n        },\n        0,\n        'Failed to count pending transfers'\n    );\n    console.timeEnd('countPendingTransfers');\n\n\n\n\n\n    const data = [\n        { title: 'Pending Transfers', value: `${pendingTransfers}`, icon: 'Truck', trend: transfersTrendData.trend, trendUp: transfersTrendData.trendUp },\n    ];\n\n    return {\n        success: true,\n        data,\n        debug: {\n            pendingTransfersCount: pendingTransfers\n        }\n    };\n}\n\n// GET: Fetch dashboard summary statistics\n// Filtered version of fetchSummaryData with date range support\nexport async function fetchSummaryDataFiltered(startDate?: string | null, endDate?: string | null, userId?: string | null) {\n    // Build date filter for queries\n    const dateFilter: any = {};\n    if (startDate) {\n        dateFilter.gte = new Date(startDate);\n    }\n    if (endDate) {\n        // Set end date to end of day\n        const endDateTime = new Date(endDate);\n        endDateTime.setHours(23, 59, 59, 999);\n        dateFilter.lte = endDateTime;\n    }\n\n    // 1. Calculate Total Inventory Value using shop-specific cost (inventory doesn't need date filtering)\n    console.time('calculateInventoryValueRaw');\n    const totalValueResult = await safeQuery<Array<{ totalinventoryvalue: bigint | number | null }>>(\n        () => prisma.$queryRaw`\n                SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as \"totalinventoryvalue\"\n                FROM \"InventoryItem\" i\n                WHERE i.quantity > 0 AND i.shopspecificcost IS NOT NULL AND i.shopspecificcost > 0;\n        `,\n        [{ totalinventoryvalue: 0 }],\n        'Failed to calculate total inventory value via raw query'\n    );\n    console.timeEnd('calculateInventoryValueRaw');\n\n    let totalValue: number = 0;\n    if (totalValueResult && totalValueResult[0] && totalValueResult[0].totalinventoryvalue !== null) {\n        totalValue = Number(totalValueResult[0].totalinventoryvalue);\n    }\n\n    // 2. Count Pending Transfers with date filter\n    console.time('countPendingTransfers');\n    const pendingTransfersResult = await safeQuery(\n        () => prisma.inventoryTransfer.count({\n            where: {\n                status: 'pending',\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter })\n            }\n        }),\n        0,\n        'Failed to count pending transfers'\n    );\n    console.timeEnd('countPendingTransfers');\n\n    // 3. Calculate Outstanding Invoices with date filter\n    console.time('calculateOutstandingInvoices');\n    const outstandingInvoicesResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                status: { in: ['pending', 'overdue'] },\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { total: true }\n        }),\n        { _sum: { total: 0 } },\n        'Failed to calculate outstanding invoices'\n    );\n    console.timeEnd('calculateOutstandingInvoices');\n\n    // 4. Count Low Stock Items (same as original - doesn't need date filtering)\n    console.time('countLowStockItems');\n    const lowStockItemsResult = await safeQuery(\n        () => prisma.inventoryItem.count({\n            where: {\n                quantity: { lte: 10 }\n            }\n        }),\n        0,\n        'Failed to count low stock items'\n    );\n    console.timeEnd('countLowStockItems');\n\n    // Generate random trends\n    const getRandomTrend = (isPercentage = true) => {\n        const randomValue = Math.random() * 10 - 5;\n        const formatted = isPercentage\n            ? `${randomValue >= 0 ? '+' : ''}${randomValue.toFixed(1)}%`\n            : `${randomValue >= 0 ? '+' : ''}${Math.floor(randomValue)}`;\n        return {\n            trend: formatted,\n            trendUp: randomValue >= 0\n        };\n    };\n\n    const inventoryTrend = getRandomTrend(true);\n    const transfersTrend = getRandomTrend(false);\n    const invoicesTrend = getRandomTrend(true);\n    const stockTrend = getRandomTrend(false);\n\n    // 5. Calculate Total Profit with date filter (including all invoices, not just paid ones)\n    console.time('calculateTotalProfit');\n    const totalProfitResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                // Removed status filter to include all invoices (paid and unpaid)\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { totalProfit: true }\n        }),\n        { _sum: { totalProfit: 0 } },\n        'Failed to calculate total profit'\n    );\n    console.timeEnd('calculateTotalProfit');\n\n    const profitTrend = getRandomTrend(true);\n\n    const summaryData = [\n        {\n            title: 'Total Inventory Value',\n            value: `Rs. ${totalValue.toLocaleString()}`,\n            icon: 'Package',\n            trend: inventoryTrend.trend,\n            trendUp: inventoryTrend.trendUp\n        },\n        {\n            title: 'Total Profit',\n            value: `Rs. ${(totalProfitResult._sum.totalProfit || 0).toLocaleString()}`,\n            icon: 'TrendingUp',\n            trend: profitTrend.trend,\n            trendUp: profitTrend.trendUp\n        },\n        {\n            title: 'Pending Transfers',\n            value: pendingTransfersResult.toString(),\n            icon: 'Truck',\n            trend: transfersTrend.trend,\n            trendUp: transfersTrend.trendUp\n        },\n        {\n            title: 'Outstanding Invoices',\n            value: `Rs. ${(outstandingInvoicesResult._sum.total || 0).toLocaleString()}`,\n            icon: 'CreditCard',\n            trend: invoicesTrend.trend,\n            trendUp: invoicesTrend.trendUp\n        },\n        {\n            title: 'Low Stock Items',\n            value: lowStockItemsResult.toString(),\n            icon: 'AlertTriangle',\n            trend: stockTrend.trend,\n            trendUp: stockTrend.trendUp\n        }\n    ];\n\n    return {\n        success: true,\n        data: summaryData\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract period parameter from URL\n        const { searchParams } = new URL(request.url);\n        const period = searchParams.get('period');\n        let periodDays: number | undefined;\n        \n        if (period) {\n            const parsedPeriod = parseInt(period);\n            if (parsedPeriod === 7 || parsedPeriod === 30) {\n                periodDays = parsedPeriod;\n            }\n        }\n\n        // Get user ID from token for cache key\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                roleName: true,\n                permissions: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       (user.permissions && user.permissions.includes('admin:all'));\n\n        // Check cache first with shop context, period, and user context\n        const userContext = isAdmin ? 'admin' : userId;\n        const cacheKey = `dashboard:summary:${context.isFiltered ? context.shopId : 'all'}:${periodDays || 'all'}:user:${userContext}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Summary data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        // Determine if user-specific filtering is needed\n        const filterUserId = isAdmin ? null : userId;\n\n        // Fetch summary data with user filtering\n\n        console.log('\uD83D\uDD04 Fetching fresh summary data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            periodDays,\n            userId: userId,\n            userRole: user.roleName,\n            filterUserId: filterUserId\n        });\n        console.time('fetchSummaryDataOverall');\n        const summaryResult = await fetchSummaryData(\n            context.isFiltered ? context.shopId : null, \n            periodDays, \n            undefined, \n            undefined, \n            filterUserId\n        );\n        console.timeEnd('fetchSummaryDataOverall');\n\n        // Add metadata to response\n        const responseData = {\n            ...summaryResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 1 minute (summary data changes frequently)\n        await cacheService.set(cacheKey, responseData, 60);\n        console.log('\uD83D\uDCBE Summary data cached for 1 minute');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching dashboard summary data:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching dashboard summary data',\n            error: error instanceof Error ? error.message : String(error),\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],
      names: ["GET", "fetchSummaryData", "fetchSummaryDataFiltered", "shopId", "periodDays", "startDate", "endDate", "userId", "getRandomTrend", "isPercentage", "randomValue", "Math", "random", "formatted", "toFixed", "round", "trend", "trendUp", "transfersTrendData", "console", "time", "pendingTransfers", "safeQuery", "where", "status", "OR", "fromShopId", "toShopId", "Date", "setDate", "getDate", "setHours", "createdAt", "gte", "prisma", "inventoryTransfer", "count", "timeEnd", "data", "title", "value", "icon", "success", "debug", "pendingTransfersCount", "dateFilter", "endDateTime", "lte", "totalValueResult", "$queryRaw", "totalinventoryvalue", "totalValue", "Number", "pendingTransfersResult", "Object", "keys", "length", "outstandingInvoicesResult", "invoice", "aggregate", "in", "createdBy", "_sum", "total", "lowStockItemsResult", "inventoryItem", "quantity", "floor", "inventoryTrend", "transfersTrend", "invoicesTrend", "stockTrend", "totalProfitResult", "totalProfit", "profitTrend", "summaryData", "toLocaleString", "toString", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "searchParams", "URL", "url", "period", "get", "parsedPeriod", "parseInt", "getUserIdFromToken", "user", "findUnique", "id", "select", "roleName", "permissions", "isAdmin", "includes", "userContext", "cacheKey", "isFiltered", "cachedData", "cacheService", "log", "meta", "shopFiltered", "fromCache", "filterUserId", "userRole", "summaryResult", "undefined", "responseData", "set", "Error", "String"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "70745c66d0ea5d6470a518b82773789715151328"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vzq0avkdi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vzq0avkdi();
cov_vzq0avkdi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vzq0avkdi().f[0]++;
  cov_vzq0avkdi().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vzq0avkdi().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_vzq0avkdi().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[1]++;
    cov_vzq0avkdi().s[4]++;
    return GET;
  },
  fetchSummaryData: function () {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[2]++;
    cov_vzq0avkdi().s[5]++;
    return fetchSummaryData;
  },
  fetchSummaryDataFiltered: function () {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[3]++;
    cov_vzq0avkdi().s[6]++;
    return fetchSummaryDataFiltered;
  }
});
const _server =
/* istanbul ignore next */
(cov_vzq0avkdi().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_vzq0avkdi().s[8]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_vzq0avkdi().s[9]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_vzq0avkdi().s[10]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_vzq0avkdi().s[11]++, require("../../../../lib/auth"));
async function fetchSummaryData(shopId, periodDays, startDate, endDate, userId) {
  /* istanbul ignore next */
  cov_vzq0avkdi().f[4]++;
  cov_vzq0avkdi().s[12]++;
  // Generate trend data for transfers
  const getRandomTrend = (isPercentage =
  /* istanbul ignore next */
  (cov_vzq0avkdi().b[0][0]++, true)) => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[5]++;
    const randomValue =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[13]++, Math.random() * 10 - 5);
    const formatted =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[14]++, isPercentage ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[1][0]++, `${randomValue > 0 ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[2][0]++, "+") :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[2][1]++, "")}${randomValue.toFixed(1)}%`) :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[1][1]++, `${randomValue > 0 ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[3][0]++, "+") :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[3][1]++, "")}${Math.round(randomValue)}`));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[15]++;
    return {
      trend: formatted,
      trendUp: randomValue >= 0
    };
  };
  const transfersTrendData =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[16]++, getRandomTrend(false));
  // Count pending transfers with shop filtering and optional date filtering
  /* istanbul ignore next */
  cov_vzq0avkdi().s[17]++;
  console.time("countPendingTransfers");
  const pendingTransfers =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[18]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[6]++;
    const where =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[19]++, {
      status: "pending"
    });
    /* istanbul ignore next */
    cov_vzq0avkdi().s[20]++;
    if (shopId) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[4][0]++;
      cov_vzq0avkdi().s[21]++;
      where.OR = [{
        fromShopId: shopId
      }, {
        toShopId: shopId
      }];
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[4][1]++;
    }
    // Add date filtering if periodDays is provided
    cov_vzq0avkdi().s[22]++;
    if (periodDays) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[5][0]++;
      const startDate =
      /* istanbul ignore next */
      (cov_vzq0avkdi().s[23]++, new Date());
      /* istanbul ignore next */
      cov_vzq0avkdi().s[24]++;
      startDate.setDate(startDate.getDate() - periodDays);
      /* istanbul ignore next */
      cov_vzq0avkdi().s[25]++;
      startDate.setHours(0, 0, 0, 0);
      /* istanbul ignore next */
      cov_vzq0avkdi().s[26]++;
      where.createdAt = {
        gte: startDate
      };
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[5][1]++;
    }
    cov_vzq0avkdi().s[27]++;
    return _prisma.prisma.inventoryTransfer.count({
      where
    });
  }, 0, "Failed to count pending transfers"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[28]++;
  console.timeEnd("countPendingTransfers");
  const data =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[29]++, [{
    title: "Pending Transfers",
    value: `${pendingTransfers}`,
    icon: "Truck",
    trend: transfersTrendData.trend,
    trendUp: transfersTrendData.trendUp
  }]);
  /* istanbul ignore next */
  cov_vzq0avkdi().s[30]++;
  return {
    success: true,
    data,
    debug: {
      pendingTransfersCount: pendingTransfers
    }
  };
}
async function fetchSummaryDataFiltered(startDate, endDate, userId) {
  /* istanbul ignore next */
  cov_vzq0avkdi().f[7]++;
  // Build date filter for queries
  const dateFilter =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[31]++, {});
  /* istanbul ignore next */
  cov_vzq0avkdi().s[32]++;
  if (startDate) {
    /* istanbul ignore next */
    cov_vzq0avkdi().b[6][0]++;
    cov_vzq0avkdi().s[33]++;
    dateFilter.gte = new Date(startDate);
  } else
  /* istanbul ignore next */
  {
    cov_vzq0avkdi().b[6][1]++;
  }
  cov_vzq0avkdi().s[34]++;
  if (endDate) {
    /* istanbul ignore next */
    cov_vzq0avkdi().b[7][0]++;
    // Set end date to end of day
    const endDateTime =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[35]++, new Date(endDate));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[36]++;
    endDateTime.setHours(23, 59, 59, 999);
    /* istanbul ignore next */
    cov_vzq0avkdi().s[37]++;
    dateFilter.lte = endDateTime;
  } else
  /* istanbul ignore next */
  {
    cov_vzq0avkdi().b[7][1]++;
  }
  // 1. Calculate Total Inventory Value using shop-specific cost (inventory doesn't need date filtering)
  cov_vzq0avkdi().s[38]++;
  console.time("calculateInventoryValueRaw");
  const totalValueResult =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[39]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[8]++;
    cov_vzq0avkdi().s[40]++;
    return _prisma.prisma.$queryRaw`
                SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as "totalinventoryvalue"
                FROM "InventoryItem" i
                WHERE i.quantity > 0 AND i.shopspecificcost IS NOT NULL AND i.shopspecificcost > 0;
        `;
  }, [{
    totalinventoryvalue: 0
  }], "Failed to calculate total inventory value via raw query"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[41]++;
  console.timeEnd("calculateInventoryValueRaw");
  let totalValue =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[42]++, 0);
  /* istanbul ignore next */
  cov_vzq0avkdi().s[43]++;
  if (
  /* istanbul ignore next */
  (cov_vzq0avkdi().b[9][0]++, totalValueResult) &&
  /* istanbul ignore next */
  (cov_vzq0avkdi().b[9][1]++, totalValueResult[0]) &&
  /* istanbul ignore next */
  (cov_vzq0avkdi().b[9][2]++, totalValueResult[0].totalinventoryvalue !== null)) {
    /* istanbul ignore next */
    cov_vzq0avkdi().b[8][0]++;
    cov_vzq0avkdi().s[44]++;
    totalValue = Number(totalValueResult[0].totalinventoryvalue);
  } else
  /* istanbul ignore next */
  {
    cov_vzq0avkdi().b[8][1]++;
  }
  // 2. Count Pending Transfers with date filter
  cov_vzq0avkdi().s[45]++;
  console.time("countPendingTransfers");
  const pendingTransfersResult =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[46]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[9]++;
    cov_vzq0avkdi().s[47]++;
    return _prisma.prisma.inventoryTransfer.count({
      where: {
        status: "pending",
        ...(
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[10][0]++, Object.keys(dateFilter).length > 0) &&
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[10][1]++, {
          createdAt: dateFilter
        }))
      }
    });
  }, 0, "Failed to count pending transfers"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[48]++;
  console.timeEnd("countPendingTransfers");
  // 3. Calculate Outstanding Invoices with date filter
  /* istanbul ignore next */
  cov_vzq0avkdi().s[49]++;
  console.time("calculateOutstandingInvoices");
  const outstandingInvoicesResult =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[50]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[10]++;
    cov_vzq0avkdi().s[51]++;
    return _prisma.prisma.invoice.aggregate({
      where: {
        status: {
          in: ["pending", "overdue"]
        },
        ...(
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[11][0]++, Object.keys(dateFilter).length > 0) &&
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[11][1]++, {
          createdAt: dateFilter
        })),
        ...(userId ?
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[12][0]++, {
          createdBy: userId
        }) :
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[12][1]++, {}))
      },
      _sum: {
        total: true
      }
    });
  }, {
    _sum: {
      total: 0
    }
  }, "Failed to calculate outstanding invoices"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[52]++;
  console.timeEnd("calculateOutstandingInvoices");
  // 4. Count Low Stock Items (same as original - doesn't need date filtering)
  /* istanbul ignore next */
  cov_vzq0avkdi().s[53]++;
  console.time("countLowStockItems");
  const lowStockItemsResult =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[54]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[11]++;
    cov_vzq0avkdi().s[55]++;
    return _prisma.prisma.inventoryItem.count({
      where: {
        quantity: {
          lte: 10
        }
      }
    });
  }, 0, "Failed to count low stock items"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[56]++;
  console.timeEnd("countLowStockItems");
  // Generate random trends
  /* istanbul ignore next */
  cov_vzq0avkdi().s[57]++;
  const getRandomTrend = (isPercentage =
  /* istanbul ignore next */
  (cov_vzq0avkdi().b[13][0]++, true)) => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[12]++;
    const randomValue =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[58]++, Math.random() * 10 - 5);
    const formatted =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[59]++, isPercentage ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[14][0]++, `${randomValue >= 0 ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[15][0]++, "+") :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[15][1]++, "")}${randomValue.toFixed(1)}%`) :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[14][1]++, `${randomValue >= 0 ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[16][0]++, "+") :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[16][1]++, "")}${Math.floor(randomValue)}`));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[60]++;
    return {
      trend: formatted,
      trendUp: randomValue >= 0
    };
  };
  const inventoryTrend =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[61]++, getRandomTrend(true));
  const transfersTrend =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[62]++, getRandomTrend(false));
  const invoicesTrend =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[63]++, getRandomTrend(true));
  const stockTrend =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[64]++, getRandomTrend(false));
  // 5. Calculate Total Profit with date filter (including all invoices, not just paid ones)
  /* istanbul ignore next */
  cov_vzq0avkdi().s[65]++;
  console.time("calculateTotalProfit");
  const totalProfitResult =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[66]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_vzq0avkdi().f[13]++;
    cov_vzq0avkdi().s[67]++;
    return _prisma.prisma.invoice.aggregate({
      where: {
        // Removed status filter to include all invoices (paid and unpaid)
        ...(
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[17][0]++, Object.keys(dateFilter).length > 0) &&
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[17][1]++, {
          createdAt: dateFilter
        })),
        ...(userId ?
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[18][0]++, {
          createdBy: userId
        }) :
        /* istanbul ignore next */
        (cov_vzq0avkdi().b[18][1]++, {}))
      },
      _sum: {
        totalProfit: true
      }
    });
  }, {
    _sum: {
      totalProfit: 0
    }
  }, "Failed to calculate total profit"));
  /* istanbul ignore next */
  cov_vzq0avkdi().s[68]++;
  console.timeEnd("calculateTotalProfit");
  const profitTrend =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[69]++, getRandomTrend(true));
  const summaryData =
  /* istanbul ignore next */
  (cov_vzq0avkdi().s[70]++, [{
    title: "Total Inventory Value",
    value: `Rs. ${totalValue.toLocaleString()}`,
    icon: "Package",
    trend: inventoryTrend.trend,
    trendUp: inventoryTrend.trendUp
  }, {
    title: "Total Profit",
    value: `Rs. ${(
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[19][0]++, totalProfitResult._sum.totalProfit) ||
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[19][1]++, 0)).toLocaleString()}`,
    icon: "TrendingUp",
    trend: profitTrend.trend,
    trendUp: profitTrend.trendUp
  }, {
    title: "Pending Transfers",
    value: pendingTransfersResult.toString(),
    icon: "Truck",
    trend: transfersTrend.trend,
    trendUp: transfersTrend.trendUp
  }, {
    title: "Outstanding Invoices",
    value: `Rs. ${(
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[20][0]++, outstandingInvoicesResult._sum.total) ||
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[20][1]++, 0)).toLocaleString()}`,
    icon: "CreditCard",
    trend: invoicesTrend.trend,
    trendUp: invoicesTrend.trendUp
  }, {
    title: "Low Stock Items",
    value: lowStockItemsResult.toString(),
    icon: "AlertTriangle",
    trend: stockTrend.trend,
    trendUp: stockTrend.trendUp
  }]);
  /* istanbul ignore next */
  cov_vzq0avkdi().s[71]++;
  return {
    success: true,
    data: summaryData
  };
}
const GET =
/* istanbul ignore next */
(cov_vzq0avkdi().s[72]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_vzq0avkdi().f[14]++;
  cov_vzq0avkdi().s[73]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[74]++, await (0, _auth.validateTokenPermission)(request, "view_dashboard"));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[75]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[21][0]++;
      cov_vzq0avkdi().s[76]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[21][1]++;
    }
    // Extract period parameter from URL
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[77]++, new URL(request.url));
    const period =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[78]++, searchParams.get("period"));
    let periodDays;
    /* istanbul ignore next */
    cov_vzq0avkdi().s[79]++;
    if (period) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[22][0]++;
      const parsedPeriod =
      /* istanbul ignore next */
      (cov_vzq0avkdi().s[80]++, parseInt(period));
      /* istanbul ignore next */
      cov_vzq0avkdi().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_vzq0avkdi().b[24][0]++, parsedPeriod === 7) ||
      /* istanbul ignore next */
      (cov_vzq0avkdi().b[24][1]++, parsedPeriod === 30)) {
        /* istanbul ignore next */
        cov_vzq0avkdi().b[23][0]++;
        cov_vzq0avkdi().s[82]++;
        periodDays = parsedPeriod;
      } else
      /* istanbul ignore next */
      {
        cov_vzq0avkdi().b[23][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[22][1]++;
    }
    // Get user ID from token for cache key
    const userId =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[83]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[84]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[25][0]++;
      cov_vzq0avkdi().s[85]++;
      return _server.NextResponse.json({
        error: "User ID not found in token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[25][1]++;
    }
    // Fetch user details to check role and permissions
    const user =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[86]++, await _prisma.prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        roleName: true,
        permissions: true
      }
    }));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[87]++;
    if (!user) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[26][0]++;
      cov_vzq0avkdi().s[88]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[26][1]++;
    }
    // Check if user is admin or has admin permissions
    const isAdmin =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[89]++,
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[27][0]++, user.roleName === "Admin") ||
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[27][1]++, user.roleName === "Super Admin") ||
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[27][2]++, user.permissions) &&
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[27][3]++, user.permissions.includes("admin:all")));
    // Check cache first with shop context, period, and user context
    const userContext =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[90]++, isAdmin ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[28][0]++, "admin") :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[28][1]++, userId));
    const cacheKey =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[91]++, `dashboard:summary:${context.isFiltered ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[29][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[29][1]++, "all")}:${
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[30][0]++, periodDays) ||
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[30][1]++, "all")}:user:${userContext}`);
    const cachedData =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[92]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[93]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_vzq0avkdi().b[31][0]++;
      cov_vzq0avkdi().s[94]++;
      console.log("✅ Summary data served from cache");
      /* istanbul ignore next */
      cov_vzq0avkdi().s[95]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_vzq0avkdi().b[31][1]++;
    }
    // Determine if user-specific filtering is needed
    const filterUserId =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[96]++, isAdmin ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[32][0]++, null) :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[32][1]++, userId));
    // Fetch summary data with user filtering
    /* istanbul ignore next */
    cov_vzq0avkdi().s[97]++;
    console.log("\uD83D\uDD04 Fetching fresh summary data with shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered,
      periodDays,
      userId: userId,
      userRole: user.roleName,
      filterUserId: filterUserId
    });
    /* istanbul ignore next */
    cov_vzq0avkdi().s[98]++;
    console.time("fetchSummaryDataOverall");
    const summaryResult =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[99]++, await fetchSummaryData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[33][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_vzq0avkdi().b[33][1]++, null), periodDays, undefined, undefined, filterUserId));
    /* istanbul ignore next */
    cov_vzq0avkdi().s[100]++;
    console.timeEnd("fetchSummaryDataOverall");
    // Add metadata to response
    const responseData =
    /* istanbul ignore next */
    (cov_vzq0avkdi().s[101]++, {
      ...summaryResult,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache for 1 minute (summary data changes frequently)
    /* istanbul ignore next */
    cov_vzq0avkdi().s[102]++;
    await _cache.cacheService.set(cacheKey, responseData, 60);
    /* istanbul ignore next */
    cov_vzq0avkdi().s[103]++;
    console.log("\uD83D\uDCBE Summary data cached for 1 minute");
    /* istanbul ignore next */
    cov_vzq0avkdi().s[104]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_vzq0avkdi().s[105]++;
    console.error("Error fetching dashboard summary data:", error);
    /* istanbul ignore next */
    cov_vzq0avkdi().s[106]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching dashboard summary data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_vzq0avkdi().b[34][0]++, error.message) :
      /* istanbul ignore next */
      (cov_vzq0avkdi().b[34][1]++, String(error)),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,