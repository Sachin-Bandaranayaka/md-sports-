7cdcc107b612b061b267116c09e05d18
// Fixed Purchase Invoices Integration Test Suite
// This file contains the corrected version of purchaseInvoices.test.ts
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _client = require("@prisma/client");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
const _purchaseInvoiceService = require("../../src/services/purchaseInvoiceService");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Create a proper test database instance
const testPrisma = new _client.PrismaClient({
    datasources: {
        db: {
            url: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL
        }
    }
});
// Mock the prisma import to use our test instance
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: testPrisma
    }));
describe("Purchase Invoices Integration Tests", ()=>{
    let purchaseInvoiceService;
    // Test data
    let testSupplier;
    let testProduct;
    let testUser;
    let testCategory;
    beforeAll(async ()=>{
        // Initialize service
        purchaseInvoiceService = new _purchaseInvoiceService.PurchaseInvoiceService();
        // Connect to test database
        try {
            await _prisma.default.$connect();
            console.log("Connected to test database");
        } catch (error) {
            console.error("Failed to connect to test database:", error);
            throw error;
        }
    });
    beforeEach(async ()=>{
        // Clean up database before each test
        try {
            // Delete in correct order to respect foreign key constraints
            await _prisma.default.purchaseInvoiceItem.deleteMany({});
            await _prisma.default.purchaseInvoice.deleteMany({});
            await _prisma.default.inventoryItem.deleteMany({});
            await _prisma.default.product.deleteMany({});
            await _prisma.default.category.deleteMany({});
            await _prisma.default.supplier.deleteMany({});
            await _prisma.default.user.deleteMany({});
            console.log("Database cleaned up successfully");
        } catch (error) {
            console.warn("Cleanup warning:", error.message);
        // Continue with test setup even if cleanup fails
        }
        // Create test data
        try {
            // Create test category
            testCategory = await _prisma.default.category.create({
                data: {
                    name: "Test Category",
                    description: "Category for testing"
                }
            });
            // Create test user
            testUser = await _prisma.default.user.create({
                data: {
                    email: "test@example.com",
                    password: "hashed-password",
                    role: "ADMIN",
                    isActive: true
                }
            });
            // Create test supplier
            testSupplier = await _prisma.default.supplier.create({
                data: {
                    name: "Test Supplier",
                    email: "supplier@example.com",
                    phone: "1234567890",
                    address: "123 Test Street",
                    isActive: true
                }
            });
            // Create test product
            testProduct = await _prisma.default.product.create({
                data: {
                    name: "Test Product",
                    sku: "TEST-001",
                    price: 99.99,
                    cost: 50.00,
                    categoryId: testCategory.id,
                    status: _client.ProductStatus.ACTIVE,
                    description: "Test product for purchase invoice testing"
                }
            });
            console.log("Test data created successfully");
        } catch (error) {
            console.error("Failed to create test data:", error);
            throw error;
        }
    });
    afterEach(async ()=>{
        // Clean up after each test
        try {
            await _prisma.default.purchaseInvoiceItem.deleteMany({});
            await _prisma.default.purchaseInvoice.deleteMany({});
            await _prisma.default.inventoryItem.deleteMany({});
            await _prisma.default.product.deleteMany({});
            await _prisma.default.category.deleteMany({});
            await _prisma.default.supplier.deleteMany({});
            await _prisma.default.user.deleteMany({});
        } catch (error) {
            console.warn("Cleanup error:", error.message);
        }
    });
    afterAll(async ()=>{
        // Final cleanup and disconnect
        try {
            await _prisma.default.purchaseInvoiceItem.deleteMany({});
            await _prisma.default.purchaseInvoice.deleteMany({});
            await _prisma.default.inventoryItem.deleteMany({});
            await _prisma.default.product.deleteMany({});
            await _prisma.default.category.deleteMany({});
            await _prisma.default.supplier.deleteMany({});
            await _prisma.default.user.deleteMany({});
        } catch (error) {
            console.warn("Final cleanup error:", error.message);
        } finally{
            await _prisma.default.$disconnect();
            console.log("Disconnected from test database");
        }
    });
    describe("Purchase Invoice Creation", ()=>{
        it("should create a purchase invoice successfully", async ()=>{
            // Arrange
            const invoiceData = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-001",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                subtotal: 500.00,
                taxAmount: 50.00,
                totalAmount: 550.00,
                notes: "Test purchase invoice",
                createdBy: testUser.id
            };
            // Act
            const result = await purchaseInvoiceService.createPurchaseInvoice(invoiceData);
            // Assert
            expect(result).toBeDefined();
            expect(result.id).toBeDefined();
            expect(result.invoiceNumber).toBe("PI-001");
            expect(result.supplierId).toBe(testSupplier.id);
            expect(result.status).toBe(_client.PurchaseInvoiceStatus.PENDING);
            expect(result.totalAmount).toBe(550.00);
            // Verify in database
            const dbInvoice = await _prisma.default.purchaseInvoice.findUnique({
                where: {
                    id: result.id
                }
            });
            expect(dbInvoice).toBeDefined();
            expect(dbInvoice?.invoiceNumber).toBe("PI-001");
        });
        it("should create purchase invoice with items", async ()=>{
            // Arrange
            const invoiceData = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-002",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                createdBy: testUser.id,
                items: [
                    {
                        productId: testProduct.id,
                        quantity: 10,
                        unitCost: 50.00,
                        totalCost: 500.00
                    }
                ]
            };
            // Act
            const result = await purchaseInvoiceService.createPurchaseInvoiceWithItems(invoiceData);
            // Assert
            expect(result).toBeDefined();
            expect(result.id).toBeDefined();
            // Verify items were created
            const invoiceItems = await _prisma.default.purchaseInvoiceItem.findMany({
                where: {
                    purchaseInvoiceId: result.id
                }
            });
            expect(invoiceItems).toHaveLength(1);
            expect(invoiceItems[0].productId).toBe(testProduct.id);
            expect(invoiceItems[0].quantity).toBe(10);
            expect(invoiceItems[0].unitCost).toBe(50.00);
        });
        it("should validate required fields", async ()=>{
            // Arrange
            const invalidData = {
                // Missing required fields
                invoiceNumber: "PI-003"
            };
            // Act & Assert
            await expect(purchaseInvoiceService.createPurchaseInvoice(invalidData)).rejects.toThrow();
        });
        it("should prevent duplicate invoice numbers", async ()=>{
            // Arrange
            const invoiceData1 = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-DUPLICATE",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                subtotal: 100.00,
                totalAmount: 100.00,
                createdBy: testUser.id
            };
            const invoiceData2 = {
                ...invoiceData1
            };
            // Act
            await purchaseInvoiceService.createPurchaseInvoice(invoiceData1);
            // Assert
            await expect(purchaseInvoiceService.createPurchaseInvoice(invoiceData2)).rejects.toThrow(/unique constraint/i);
        });
    });
    describe("Purchase Invoice Retrieval", ()=>{
        let testInvoice;
        beforeEach(async ()=>{
            // Create a test invoice for retrieval tests
            testInvoice = await _prisma.default.purchaseInvoice.create({
                data: {
                    supplierId: testSupplier.id,
                    invoiceNumber: "PI-RETRIEVE-001",
                    invoiceDate: new Date(),
                    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    subtotal: 200.00,
                    taxAmount: 20.00,
                    totalAmount: 220.00,
                    createdBy: testUser.id
                }
            });
        });
        it("should retrieve purchase invoice by ID", async ()=>{
            // Act
            const result = await purchaseInvoiceService.getPurchaseInvoiceById(testInvoice.id);
            // Assert
            expect(result).toBeDefined();
            expect(result?.id).toBe(testInvoice.id);
            expect(result?.invoiceNumber).toBe("PI-RETRIEVE-001");
            expect(result?.totalAmount).toBe(220.00);
        });
        it("should retrieve purchase invoice with supplier details", async ()=>{
            // Act
            const result = await purchaseInvoiceService.getPurchaseInvoiceWithDetails(testInvoice.id);
            // Assert
            expect(result).toBeDefined();
            expect(result?.supplier).toBeDefined();
            expect(result?.supplier.name).toBe("Test Supplier");
        });
        it("should return null for non-existent invoice", async ()=>{
            // Act
            const result = await purchaseInvoiceService.getPurchaseInvoiceById(99999);
            // Assert
            expect(result).toBeNull();
        });
        it("should retrieve all purchase invoices with pagination", async ()=>{
            // Arrange - Create additional invoices
            await _prisma.default.purchaseInvoice.createMany({
                data: [
                    {
                        supplierId: testSupplier.id,
                        invoiceNumber: "PI-PAGE-001",
                        invoiceDate: new Date(),
                        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                        status: _client.PurchaseInvoiceStatus.PENDING,
                        subtotal: 100.00,
                        totalAmount: 100.00,
                        createdBy: testUser.id
                    },
                    {
                        supplierId: testSupplier.id,
                        invoiceNumber: "PI-PAGE-002",
                        invoiceDate: new Date(),
                        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                        status: _client.PurchaseInvoiceStatus.PENDING,
                        subtotal: 150.00,
                        totalAmount: 150.00,
                        createdBy: testUser.id
                    }
                ]
            });
            // Act
            const result = await purchaseInvoiceService.getPurchaseInvoices({
                page: 1,
                limit: 2
            });
            // Assert
            expect(result.invoices).toHaveLength(2);
            expect(result.total).toBeGreaterThanOrEqual(3);
            expect(result.page).toBe(1);
            expect(result.limit).toBe(2);
        });
    });
    describe("Purchase Invoice Updates", ()=>{
        let testInvoice;
        beforeEach(async ()=>{
            testInvoice = await _prisma.default.purchaseInvoice.create({
                data: {
                    supplierId: testSupplier.id,
                    invoiceNumber: "PI-UPDATE-001",
                    invoiceDate: new Date(),
                    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    subtotal: 300.00,
                    totalAmount: 300.00,
                    createdBy: testUser.id
                }
            });
        });
        it("should update purchase invoice status", async ()=>{
            // Act
            const result = await purchaseInvoiceService.updatePurchaseInvoiceStatus(testInvoice.id, _client.PurchaseInvoiceStatus.APPROVED);
            // Assert
            expect(result.status).toBe(_client.PurchaseInvoiceStatus.APPROVED);
            // Verify in database
            const dbInvoice = await _prisma.default.purchaseInvoice.findUnique({
                where: {
                    id: testInvoice.id
                }
            });
            expect(dbInvoice?.status).toBe(_client.PurchaseInvoiceStatus.APPROVED);
        });
        it("should update purchase invoice details", async ()=>{
            // Arrange
            const updateData = {
                notes: "Updated notes",
                subtotal: 350.00,
                taxAmount: 35.00,
                totalAmount: 385.00
            };
            // Act
            const result = await purchaseInvoiceService.updatePurchaseInvoice(testInvoice.id, updateData);
            // Assert
            expect(result.notes).toBe("Updated notes");
            expect(result.totalAmount).toBe(385.00);
        });
        it("should prevent updating approved invoices", async ()=>{
            // Arrange - First approve the invoice
            await purchaseInvoiceService.updatePurchaseInvoiceStatus(testInvoice.id, _client.PurchaseInvoiceStatus.APPROVED);
            // Act & Assert
            await expect(purchaseInvoiceService.updatePurchaseInvoice(testInvoice.id, {
                notes: "Should not be allowed"
            })).rejects.toThrow(/cannot be modified/i);
        });
    });
    describe("Purchase Invoice Deletion", ()=>{
        let testInvoice;
        beforeEach(async ()=>{
            testInvoice = await _prisma.default.purchaseInvoice.create({
                data: {
                    supplierId: testSupplier.id,
                    invoiceNumber: "PI-DELETE-001",
                    invoiceDate: new Date(),
                    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    subtotal: 100.00,
                    totalAmount: 100.00,
                    createdBy: testUser.id
                }
            });
        });
        it("should soft delete purchase invoice", async ()=>{
            // Act
            const result = await purchaseInvoiceService.deletePurchaseInvoice(testInvoice.id);
            // Assert
            expect(result).toBe(true);
            // Verify soft deletion
            const dbInvoice = await _prisma.default.purchaseInvoice.findUnique({
                where: {
                    id: testInvoice.id
                }
            });
            expect(dbInvoice?.isDeleted).toBe(true);
        });
        it("should prevent deletion of approved invoices", async ()=>{
            // Arrange
            await purchaseInvoiceService.updatePurchaseInvoiceStatus(testInvoice.id, _client.PurchaseInvoiceStatus.APPROVED);
            // Act & Assert
            await expect(purchaseInvoiceService.deletePurchaseInvoice(testInvoice.id)).rejects.toThrow(/cannot be deleted/i);
        });
    });
    describe("Purchase Invoice Search and Filtering", ()=>{
        beforeEach(async ()=>{
            // Create multiple test invoices with different statuses and dates
            await _prisma.default.purchaseInvoice.createMany({
                data: [
                    {
                        supplierId: testSupplier.id,
                        invoiceNumber: "PI-SEARCH-001",
                        invoiceDate: new Date("2024-01-01"),
                        dueDate: new Date("2024-01-31"),
                        status: _client.PurchaseInvoiceStatus.PENDING,
                        subtotal: 100.00,
                        totalAmount: 100.00,
                        createdBy: testUser.id
                    },
                    {
                        supplierId: testSupplier.id,
                        invoiceNumber: "PI-SEARCH-002",
                        invoiceDate: new Date("2024-02-01"),
                        dueDate: new Date("2024-02-28"),
                        status: _client.PurchaseInvoiceStatus.APPROVED,
                        subtotal: 200.00,
                        totalAmount: 200.00,
                        createdBy: testUser.id
                    },
                    {
                        supplierId: testSupplier.id,
                        invoiceNumber: "PI-SEARCH-003",
                        invoiceDate: new Date("2024-03-01"),
                        dueDate: new Date("2024-03-31"),
                        status: _client.PurchaseInvoiceStatus.PAID,
                        subtotal: 300.00,
                        totalAmount: 300.00,
                        createdBy: testUser.id
                    }
                ]
            });
        });
        it("should search invoices by invoice number", async ()=>{
            // Act
            const result = await purchaseInvoiceService.searchPurchaseInvoices({
                invoiceNumber: "PI-SEARCH-002"
            });
            // Assert
            expect(result).toHaveLength(1);
            expect(result[0].invoiceNumber).toBe("PI-SEARCH-002");
        });
        it("should filter invoices by status", async ()=>{
            // Act
            const result = await purchaseInvoiceService.searchPurchaseInvoices({
                status: _client.PurchaseInvoiceStatus.APPROVED
            });
            // Assert
            expect(result).toHaveLength(1);
            expect(result[0].status).toBe(_client.PurchaseInvoiceStatus.APPROVED);
        });
        it("should filter invoices by date range", async ()=>{
            // Act
            const result = await purchaseInvoiceService.searchPurchaseInvoices({
                dateFrom: new Date("2024-02-01"),
                dateTo: new Date("2024-03-31")
            });
            // Assert
            expect(result).toHaveLength(2);
            expect(result.every((invoice)=>invoice.invoiceDate >= new Date("2024-02-01") && invoice.invoiceDate <= new Date("2024-03-31"))).toBe(true);
        });
        it("should filter invoices by supplier", async ()=>{
            // Act
            const result = await purchaseInvoiceService.searchPurchaseInvoices({
                supplierId: testSupplier.id
            });
            // Assert
            expect(result.length).toBeGreaterThanOrEqual(3);
            expect(result.every((invoice)=>invoice.supplierId === testSupplier.id)).toBe(true);
        });
    });
    describe("Purchase Invoice Business Logic", ()=>{
        it("should calculate totals correctly", async ()=>{
            // Arrange
            const invoiceData = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-CALC-001",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                createdBy: testUser.id,
                items: [
                    {
                        productId: testProduct.id,
                        quantity: 5,
                        unitCost: 20.00,
                        totalCost: 100.00
                    },
                    {
                        productId: testProduct.id,
                        quantity: 3,
                        unitCost: 30.00,
                        totalCost: 90.00
                    }
                ],
                taxRate: 0.10 // 10% tax
            };
            // Act
            const result = await purchaseInvoiceService.createPurchaseInvoiceWithCalculations(invoiceData);
            // Assert
            expect(result.subtotal).toBe(190.00); // 100 + 90
            expect(result.taxAmount).toBe(19.00); // 190 * 0.10
            expect(result.totalAmount).toBe(209.00); // 190 + 19
        });
        it("should update inventory when invoice is approved", async ()=>{
            // Arrange
            const invoice = await _prisma.default.purchaseInvoice.create({
                data: {
                    supplierId: testSupplier.id,
                    invoiceNumber: "PI-INVENTORY-001",
                    invoiceDate: new Date(),
                    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    subtotal: 500.00,
                    totalAmount: 500.00,
                    createdBy: testUser.id
                }
            });
            await _prisma.default.purchaseInvoiceItem.create({
                data: {
                    purchaseInvoiceId: invoice.id,
                    productId: testProduct.id,
                    quantity: 10,
                    unitCost: 50.00,
                    totalCost: 500.00
                }
            });
            // Act
            await purchaseInvoiceService.approvePurchaseInvoice(invoice.id);
            // Assert
            const inventoryItems = await _prisma.default.inventoryItem.findMany({
                where: {
                    productId: testProduct.id
                }
            });
            expect(inventoryItems).toHaveLength(1);
            expect(inventoryItems[0].quantity).toBe(10);
            expect(inventoryItems[0].unitCost).toBe(50.00);
        });
    });
    describe("Error Handling and Edge Cases", ()=>{
        it("should handle concurrent invoice creation", async ()=>{
            // Arrange
            const invoiceData = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-CONCURRENT-001",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                subtotal: 100.00,
                totalAmount: 100.00,
                createdBy: testUser.id
            };
            // Act - Create multiple invoices concurrently
            const promises = Array(3).fill(null).map((_, index)=>purchaseInvoiceService.createPurchaseInvoice({
                    ...invoiceData,
                    invoiceNumber: `PI-CONCURRENT-${index + 1}`
                }));
            const results = await Promise.allSettled(promises);
            // Assert
            const successful = results.filter((r)=>r.status === "fulfilled");
            expect(successful).toHaveLength(3);
        });
        it("should handle invalid product references", async ()=>{
            // Arrange
            const invoiceData = {
                supplierId: testSupplier.id,
                invoiceNumber: "PI-INVALID-001",
                invoiceDate: new Date(),
                dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                status: _client.PurchaseInvoiceStatus.PENDING,
                createdBy: testUser.id,
                items: [
                    {
                        productId: 99999,
                        quantity: 1,
                        unitCost: 10.00,
                        totalCost: 10.00
                    }
                ]
            };
            // Act & Assert
            await expect(purchaseInvoiceService.createPurchaseInvoiceWithItems(invoiceData)).rejects.toThrow();
        });
        it("should handle database transaction failures", async ()=>{
            // This test would require more sophisticated mocking to simulate transaction failures
            // For now, we'll test that the service handles basic validation errors
            // Arrange
            const invalidData = {
                // Missing required supplierId
                invoiceNumber: "PI-INVALID-002",
                invoiceDate: new Date(),
                status: _client.PurchaseInvoiceStatus.PENDING
            };
            // Act & Assert
            await expect(purchaseInvoiceService.createPurchaseInvoice(invalidData)).rejects.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvaW50ZWdyYXRpb24vcHVyY2hhc2VJbnZvaWNlcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpeGVkIFB1cmNoYXNlIEludm9pY2VzIEludGVncmF0aW9uIFRlc3QgU3VpdGVcbi8vIFRoaXMgZmlsZSBjb250YWlucyB0aGUgY29ycmVjdGVkIHZlcnNpb24gb2YgcHVyY2hhc2VJbnZvaWNlcy50ZXN0LnRzXG5cbmltcG9ydCB7IGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCB7IGNyZWF0ZU1vY2tzIH0gZnJvbSAnbm9kZS1tb2Nrcy1odHRwJztcbmltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuXG4vLyBDcmVhdGUgYSBwcm9wZXIgdGVzdCBkYXRhYmFzZSBpbnN0YW5jZVxuY29uc3QgdGVzdFByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoe1xuICBkYXRhc291cmNlczoge1xuICAgIGRiOiB7XG4gICAgICB1cmw6IHByb2Nlc3MuZW52LlRFU1RfREFUQUJBU0VfVVJMIHx8IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTFxuICAgIH1cbiAgfVxufSk7XG5cbi8vIE1vY2sgdGhlIHByaXNtYSBpbXBvcnQgdG8gdXNlIG91ciB0ZXN0IGluc3RhbmNlXG5qZXN0Lm1vY2soJ0AvbGliL3ByaXNtYScsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IHRlc3RQcmlzbWEsXG59KSk7XG5cbi8vIEltcG9ydCBhZnRlciBtb2NraW5nXG5pbXBvcnQgcHJpc21hIGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyBQdXJjaGFzZUludm9pY2VTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9wdXJjaGFzZUludm9pY2VTZXJ2aWNlJztcbmltcG9ydCB7IFByb2R1Y3RTdGF0dXMsIFB1cmNoYXNlSW52b2ljZVN0YXR1cyB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcblxuZGVzY3JpYmUoJ1B1cmNoYXNlIEludm9pY2VzIEludGVncmF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZTogUHVyY2hhc2VJbnZvaWNlU2VydmljZTtcbiAgXG4gIC8vIFRlc3QgZGF0YVxuICBsZXQgdGVzdFN1cHBsaWVyOiBhbnk7XG4gIGxldCB0ZXN0UHJvZHVjdDogYW55O1xuICBsZXQgdGVzdFVzZXI6IGFueTtcbiAgbGV0IHRlc3RDYXRlZ29yeTogYW55O1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgLy8gSW5pdGlhbGl6ZSBzZXJ2aWNlXG4gICAgcHVyY2hhc2VJbnZvaWNlU2VydmljZSA9IG5ldyBQdXJjaGFzZUludm9pY2VTZXJ2aWNlKCk7XG4gICAgXG4gICAgLy8gQ29ubmVjdCB0byB0ZXN0IGRhdGFiYXNlXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByaXNtYS4kY29ubmVjdCgpO1xuICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byB0ZXN0IGRhdGFiYXNlJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHRlc3QgZGF0YWJhc2U6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBDbGVhbiB1cCBkYXRhYmFzZSBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgdHJ5IHtcbiAgICAgIC8vIERlbGV0ZSBpbiBjb3JyZWN0IG9yZGVyIHRvIHJlc3BlY3QgZm9yZWlnbiBrZXkgY29uc3RyYWludHNcbiAgICAgIGF3YWl0IHByaXNtYS5wdXJjaGFzZUludm9pY2VJdGVtLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZS5kZWxldGVNYW55KHt9KTtcbiAgICAgIGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgYXdhaXQgcHJpc21hLnByb2R1Y3QuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEuY2F0ZWdvcnkuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEuc3VwcGxpZXIuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEudXNlci5kZWxldGVNYW55KHt9KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGNsZWFuZWQgdXAgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2xlYW51cCB3YXJuaW5nOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgLy8gQ29udGludWUgd2l0aCB0ZXN0IHNldHVwIGV2ZW4gaWYgY2xlYW51cCBmYWlsc1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0ZXN0IGRhdGFcbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIHRlc3QgY2F0ZWdvcnlcbiAgICAgIHRlc3RDYXRlZ29yeSA9IGF3YWl0IHByaXNtYS5jYXRlZ29yeS5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbmFtZTogJ1Rlc3QgQ2F0ZWdvcnknLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ2F0ZWdvcnkgZm9yIHRlc3RpbmcnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgdGVzdCB1c2VyXG4gICAgICB0ZXN0VXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAnaGFzaGVkLXBhc3N3b3JkJyxcbiAgICAgICAgICByb2xlOiAnQURNSU4nLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgdGVzdCBzdXBwbGllclxuICAgICAgdGVzdFN1cHBsaWVyID0gYXdhaXQgcHJpc21hLnN1cHBsaWVyLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBuYW1lOiAnVGVzdCBTdXBwbGllcicsXG4gICAgICAgICAgZW1haWw6ICdzdXBwbGllckBleGFtcGxlLmNvbScsXG4gICAgICAgICAgcGhvbmU6ICcxMjM0NTY3ODkwJyxcbiAgICAgICAgICBhZGRyZXNzOiAnMTIzIFRlc3QgU3RyZWV0JyxcbiAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQ3JlYXRlIHRlc3QgcHJvZHVjdFxuICAgICAgdGVzdFByb2R1Y3QgPSBhd2FpdCBwcmlzbWEucHJvZHVjdC5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbmFtZTogJ1Rlc3QgUHJvZHVjdCcsXG4gICAgICAgICAgc2t1OiAnVEVTVC0wMDEnLFxuICAgICAgICAgIHByaWNlOiA5OS45OSxcbiAgICAgICAgICBjb3N0OiA1MC4wMCxcbiAgICAgICAgICBjYXRlZ29yeUlkOiB0ZXN0Q2F0ZWdvcnkuaWQsXG4gICAgICAgICAgc3RhdHVzOiBQcm9kdWN0U3RhdHVzLkFDVElWRSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgcHJvZHVjdCBmb3IgcHVyY2hhc2UgaW52b2ljZSB0ZXN0aW5nJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coJ1Rlc3QgZGF0YSBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHRlc3QgZGF0YTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgZWFjaCB0ZXN0XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByaXNtYS5wdXJjaGFzZUludm9pY2VJdGVtLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZS5kZWxldGVNYW55KHt9KTtcbiAgICAgIGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgYXdhaXQgcHJpc21hLnByb2R1Y3QuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEuY2F0ZWdvcnkuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEuc3VwcGxpZXIuZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEudXNlci5kZWxldGVNYW55KHt9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdDbGVhbnVwIGVycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZpbmFsIGNsZWFudXAgYW5kIGRpc2Nvbm5lY3RcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZUl0ZW0uZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZGVsZXRlTWFueSh7fSk7XG4gICAgICBhd2FpdCBwcmlzbWEucHJvZHVjdC5kZWxldGVNYW55KHt9KTtcbiAgICAgIGF3YWl0IHByaXNtYS5jYXRlZ29yeS5kZWxldGVNYW55KHt9KTtcbiAgICAgIGF3YWl0IHByaXNtYS5zdXBwbGllci5kZWxldGVNYW55KHt9KTtcbiAgICAgIGF3YWl0IHByaXNtYS51c2VyLmRlbGV0ZU1hbnkoe30pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0ZpbmFsIGNsZWFudXAgZXJyb3I6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IHByaXNtYS4kZGlzY29ubmVjdCgpO1xuICAgICAgY29uc29sZS5sb2coJ0Rpc2Nvbm5lY3RlZCBmcm9tIHRlc3QgZGF0YWJhc2UnKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQdXJjaGFzZSBJbnZvaWNlIENyZWF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgcHVyY2hhc2UgaW52b2ljZSBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBpbnZvaWNlRGF0YSA9IHtcbiAgICAgICAgc3VwcGxpZXJJZDogdGVzdFN1cHBsaWVyLmlkLFxuICAgICAgICBpbnZvaWNlTnVtYmVyOiAnUEktMDAxJyxcbiAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyAzMCBkYXlzIGZyb20gbm93XG4gICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgIHN1YnRvdGFsOiA1MDAuMDAsXG4gICAgICAgIHRheEFtb3VudDogNTAuMDAsXG4gICAgICAgIHRvdGFsQW1vdW50OiA1NTAuMDAsXG4gICAgICAgIG5vdGVzOiAnVGVzdCBwdXJjaGFzZSBpbnZvaWNlJyxcbiAgICAgICAgY3JlYXRlZEJ5OiB0ZXN0VXNlci5pZFxuICAgICAgfTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmNyZWF0ZVB1cmNoYXNlSW52b2ljZShpbnZvaWNlRGF0YSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0Lmludm9pY2VOdW1iZXIpLnRvQmUoJ1BJLTAwMScpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdXBwbGllcklkKS50b0JlKHRlc3RTdXBwbGllci5pZCk7XG4gICAgICBleHBlY3QocmVzdWx0LnN0YXR1cykudG9CZShQdXJjaGFzZUludm9pY2VTdGF0dXMuUEVORElORyk7XG4gICAgICBleHBlY3QocmVzdWx0LnRvdGFsQW1vdW50KS50b0JlKDU1MC4wMCk7XG5cbiAgICAgIC8vIFZlcmlmeSBpbiBkYXRhYmFzZVxuICAgICAgY29uc3QgZGJJbnZvaWNlID0gYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZS5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHJlc3VsdC5pZCB9XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChkYkludm9pY2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZGJJbnZvaWNlPy5pbnZvaWNlTnVtYmVyKS50b0JlKCdQSS0wMDEnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIHB1cmNoYXNlIGludm9pY2Ugd2l0aCBpdGVtcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGludm9pY2VEYXRhID0ge1xuICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgIGludm9pY2VOdW1iZXI6ICdQSS0wMDInLFxuICAgICAgICBpbnZvaWNlRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWQsXG4gICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5pZCxcbiAgICAgICAgICAgIHF1YW50aXR5OiAxMCxcbiAgICAgICAgICAgIHVuaXRDb3N0OiA1MC4wMCxcbiAgICAgICAgICAgIHRvdGFsQ29zdDogNTAwLjAwXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHB1cmNoYXNlSW52b2ljZVNlcnZpY2UuY3JlYXRlUHVyY2hhc2VJbnZvaWNlV2l0aEl0ZW1zKGludm9pY2VEYXRhKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5pZCkudG9CZURlZmluZWQoKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGl0ZW1zIHdlcmUgY3JlYXRlZFxuICAgICAgY29uc3QgaW52b2ljZUl0ZW1zID0gYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZUl0ZW0uZmluZE1hbnkoe1xuICAgICAgICB3aGVyZTogeyBwdXJjaGFzZUludm9pY2VJZDogcmVzdWx0LmlkIH1cbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGludm9pY2VJdGVtcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KGludm9pY2VJdGVtc1swXS5wcm9kdWN0SWQpLnRvQmUodGVzdFByb2R1Y3QuaWQpO1xuICAgICAgZXhwZWN0KGludm9pY2VJdGVtc1swXS5xdWFudGl0eSkudG9CZSgxMCk7XG4gICAgICBleHBlY3QoaW52b2ljZUl0ZW1zWzBdLnVuaXRDb3N0KS50b0JlKDUwLjAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgaW52YWxpZERhdGEgPSB7XG4gICAgICAgIC8vIE1pc3NpbmcgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgIGludm9pY2VOdW1iZXI6ICdQSS0wMDMnXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5jcmVhdGVQdXJjaGFzZUludm9pY2UoaW52YWxpZERhdGEgYXMgYW55KVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJldmVudCBkdXBsaWNhdGUgaW52b2ljZSBudW1iZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgaW52b2ljZURhdGExID0ge1xuICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgIGludm9pY2VOdW1iZXI6ICdQSS1EVVBMSUNBVEUnLFxuICAgICAgICBpbnZvaWNlRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgIHN1YnRvdGFsOiAxMDAuMDAsXG4gICAgICAgIHRvdGFsQW1vdW50OiAxMDAuMDAsXG4gICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWRcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGludm9pY2VEYXRhMiA9IHsgLi4uaW52b2ljZURhdGExIH07XG5cbiAgICAgIC8vIEFjdFxuICAgICAgYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5jcmVhdGVQdXJjaGFzZUludm9pY2UoaW52b2ljZURhdGExKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHB1cmNoYXNlSW52b2ljZVNlcnZpY2UuY3JlYXRlUHVyY2hhc2VJbnZvaWNlKGludm9pY2VEYXRhMilcbiAgICAgICkucmVqZWN0cy50b1Rocm93KC91bmlxdWUgY29uc3RyYWludC9pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1B1cmNoYXNlIEludm9pY2UgUmV0cmlldmFsJywgKCkgPT4ge1xuICAgIGxldCB0ZXN0SW52b2ljZTogYW55O1xuXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgYSB0ZXN0IGludm9pY2UgZm9yIHJldHJpZXZhbCB0ZXN0c1xuICAgICAgdGVzdEludm9pY2UgPSBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLVJFVFJJRVZFLTAwMScsXG4gICAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICAgICAgc3RhdHVzOiBQdXJjaGFzZUludm9pY2VTdGF0dXMuUEVORElORyxcbiAgICAgICAgICBzdWJ0b3RhbDogMjAwLjAwLFxuICAgICAgICAgIHRheEFtb3VudDogMjAuMDAsXG4gICAgICAgICAgdG90YWxBbW91bnQ6IDIyMC4wMCxcbiAgICAgICAgICBjcmVhdGVkQnk6IHRlc3RVc2VyLmlkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSBwdXJjaGFzZSBpbnZvaWNlIGJ5IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmdldFB1cmNoYXNlSW52b2ljZUJ5SWQodGVzdEludm9pY2UuaWQpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0Py5pZCkudG9CZSh0ZXN0SW52b2ljZS5pZCk7XG4gICAgICBleHBlY3QocmVzdWx0Py5pbnZvaWNlTnVtYmVyKS50b0JlKCdQSS1SRVRSSUVWRS0wMDEnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQ/LnRvdGFsQW1vdW50KS50b0JlKDIyMC4wMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHJpZXZlIHB1cmNoYXNlIGludm9pY2Ugd2l0aCBzdXBwbGllciBkZXRhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmdldFB1cmNoYXNlSW52b2ljZVdpdGhEZXRhaWxzKHRlc3RJbnZvaWNlLmlkKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdD8uc3VwcGxpZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0Py5zdXBwbGllci5uYW1lKS50b0JlKCdUZXN0IFN1cHBsaWVyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBudWxsIGZvciBub24tZXhpc3RlbnQgaW52b2ljZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5nZXRQdXJjaGFzZUludm9pY2VCeUlkKDk5OTk5KTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSBhbGwgcHVyY2hhc2UgaW52b2ljZXMgd2l0aCBwYWdpbmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZSAtIENyZWF0ZSBhZGRpdGlvbmFsIGludm9pY2VzXG4gICAgICBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmNyZWF0ZU1hbnkoe1xuICAgICAgICBkYXRhOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VwcGxpZXJJZDogdGVzdFN1cHBsaWVyLmlkLFxuICAgICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLVBBR0UtMDAxJyxcbiAgICAgICAgICAgIGludm9pY2VEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5QRU5ESU5HLFxuICAgICAgICAgICAgc3VidG90YWw6IDEwMC4wMCxcbiAgICAgICAgICAgIHRvdGFsQW1vdW50OiAxMDAuMDAsXG4gICAgICAgICAgICBjcmVhdGVkQnk6IHRlc3RVc2VyLmlkXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgICBpbnZvaWNlTnVtYmVyOiAnUEktUEFHRS0wMDInLFxuICAgICAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICBkdWVEYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKSxcbiAgICAgICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgICAgICBzdWJ0b3RhbDogMTUwLjAwLFxuICAgICAgICAgICAgdG90YWxBbW91bnQ6IDE1MC4wMCxcbiAgICAgICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWRcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHB1cmNoYXNlSW52b2ljZVNlcnZpY2UuZ2V0UHVyY2hhc2VJbnZvaWNlcyh7XG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxpbWl0OiAyXG4gICAgICB9KTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0Lmludm9pY2VzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocmVzdWx0LnRvdGFsKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wYWdlKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5saW1pdCkudG9CZSgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1B1cmNoYXNlIEludm9pY2UgVXBkYXRlcycsICgpID0+IHtcbiAgICBsZXQgdGVzdEludm9pY2U6IGFueTtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgdGVzdEludm9pY2UgPSBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLVVQREFURS0wMDEnLFxuICAgICAgICAgIGludm9pY2VEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLFxuICAgICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgICAgc3VidG90YWw6IDMwMC4wMCxcbiAgICAgICAgICB0b3RhbEFtb3VudDogMzAwLjAwLFxuICAgICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSBwdXJjaGFzZSBpbnZvaWNlIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS51cGRhdGVQdXJjaGFzZUludm9pY2VTdGF0dXMoXG4gICAgICAgIHRlc3RJbnZvaWNlLmlkLFxuICAgICAgICBQdXJjaGFzZUludm9pY2VTdGF0dXMuQVBQUk9WRURcbiAgICAgICk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdGF0dXMpLnRvQmUoUHVyY2hhc2VJbnZvaWNlU3RhdHVzLkFQUFJPVkVEKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGluIGRhdGFiYXNlXG4gICAgICBjb25zdCBkYkludm9pY2UgPSBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogdGVzdEludm9pY2UuaWQgfVxuICAgICAgfSk7XG4gICAgICBleHBlY3QoZGJJbnZvaWNlPy5zdGF0dXMpLnRvQmUoUHVyY2hhc2VJbnZvaWNlU3RhdHVzLkFQUFJPVkVEKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHB1cmNoYXNlIGludm9pY2UgZGV0YWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAgICAgIG5vdGVzOiAnVXBkYXRlZCBub3RlcycsXG4gICAgICAgIHN1YnRvdGFsOiAzNTAuMDAsXG4gICAgICAgIHRheEFtb3VudDogMzUuMDAsXG4gICAgICAgIHRvdGFsQW1vdW50OiAzODUuMDBcbiAgICAgIH07XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS51cGRhdGVQdXJjaGFzZUludm9pY2UoXG4gICAgICAgIHRlc3RJbnZvaWNlLmlkLFxuICAgICAgICB1cGRhdGVEYXRhXG4gICAgICApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQubm90ZXMpLnRvQmUoJ1VwZGF0ZWQgbm90ZXMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudG90YWxBbW91bnQpLnRvQmUoMzg1LjAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJldmVudCB1cGRhdGluZyBhcHByb3ZlZCBpbnZvaWNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2UgLSBGaXJzdCBhcHByb3ZlIHRoZSBpbnZvaWNlXG4gICAgICBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLnVwZGF0ZVB1cmNoYXNlSW52b2ljZVN0YXR1cyhcbiAgICAgICAgdGVzdEludm9pY2UuaWQsXG4gICAgICAgIFB1cmNoYXNlSW52b2ljZVN0YXR1cy5BUFBST1ZFRFxuICAgICAgKTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHB1cmNoYXNlSW52b2ljZVNlcnZpY2UudXBkYXRlUHVyY2hhc2VJbnZvaWNlKHRlc3RJbnZvaWNlLmlkLCB7XG4gICAgICAgICAgbm90ZXM6ICdTaG91bGQgbm90IGJlIGFsbG93ZWQnXG4gICAgICAgIH0pXG4gICAgICApLnJlamVjdHMudG9UaHJvdygvY2Fubm90IGJlIG1vZGlmaWVkL2kpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUHVyY2hhc2UgSW52b2ljZSBEZWxldGlvbicsICgpID0+IHtcbiAgICBsZXQgdGVzdEludm9pY2U6IGFueTtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgdGVzdEludm9pY2UgPSBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLURFTEVURS0wMDEnLFxuICAgICAgICAgIGludm9pY2VEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLFxuICAgICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgICAgc3VidG90YWw6IDEwMC4wMCxcbiAgICAgICAgICB0b3RhbEFtb3VudDogMTAwLjAwLFxuICAgICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNvZnQgZGVsZXRlIHB1cmNoYXNlIGludm9pY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHB1cmNoYXNlSW52b2ljZVNlcnZpY2UuZGVsZXRlUHVyY2hhc2VJbnZvaWNlKHRlc3RJbnZvaWNlLmlkKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgc29mdCBkZWxldGlvblxuICAgICAgY29uc3QgZGJJbnZvaWNlID0gYXdhaXQgcHJpc21hLnB1cmNoYXNlSW52b2ljZS5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHRlc3RJbnZvaWNlLmlkIH1cbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGRiSW52b2ljZT8uaXNEZWxldGVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcmV2ZW50IGRlbGV0aW9uIG9mIGFwcHJvdmVkIGludm9pY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS51cGRhdGVQdXJjaGFzZUludm9pY2VTdGF0dXMoXG4gICAgICAgIHRlc3RJbnZvaWNlLmlkLFxuICAgICAgICBQdXJjaGFzZUludm9pY2VTdGF0dXMuQVBQUk9WRURcbiAgICAgICk7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmRlbGV0ZVB1cmNoYXNlSW52b2ljZSh0ZXN0SW52b2ljZS5pZClcbiAgICAgICkucmVqZWN0cy50b1Rocm93KC9jYW5ub3QgYmUgZGVsZXRlZC9pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1B1cmNoYXNlIEludm9pY2UgU2VhcmNoIGFuZCBGaWx0ZXJpbmcnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgbXVsdGlwbGUgdGVzdCBpbnZvaWNlcyB3aXRoIGRpZmZlcmVudCBzdGF0dXNlcyBhbmQgZGF0ZXNcbiAgICAgIGF3YWl0IHByaXNtYS5wdXJjaGFzZUludm9pY2UuY3JlYXRlTWFueSh7XG4gICAgICAgIGRhdGE6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgICBpbnZvaWNlTnVtYmVyOiAnUEktU0VBUkNILTAwMScsXG4gICAgICAgICAgICBpbnZvaWNlRGF0ZTogbmV3IERhdGUoJzIwMjQtMDEtMDEnKSxcbiAgICAgICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKCcyMDI0LTAxLTMxJyksXG4gICAgICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5QRU5ESU5HLFxuICAgICAgICAgICAgc3VidG90YWw6IDEwMC4wMCxcbiAgICAgICAgICAgIHRvdGFsQW1vdW50OiAxMDAuMDAsXG4gICAgICAgICAgICBjcmVhdGVkQnk6IHRlc3RVc2VyLmlkXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgICBpbnZvaWNlTnVtYmVyOiAnUEktU0VBUkNILTAwMicsXG4gICAgICAgICAgICBpbnZvaWNlRGF0ZTogbmV3IERhdGUoJzIwMjQtMDItMDEnKSxcbiAgICAgICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKCcyMDI0LTAyLTI4JyksXG4gICAgICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5BUFBST1ZFRCxcbiAgICAgICAgICAgIHN1YnRvdGFsOiAyMDAuMDAsXG4gICAgICAgICAgICB0b3RhbEFtb3VudDogMjAwLjAwLFxuICAgICAgICAgICAgY3JlYXRlZEJ5OiB0ZXN0VXNlci5pZFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VwcGxpZXJJZDogdGVzdFN1cHBsaWVyLmlkLFxuICAgICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLVNFQVJDSC0wMDMnLFxuICAgICAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCcyMDI0LTAzLTAxJyksXG4gICAgICAgICAgICBkdWVEYXRlOiBuZXcgRGF0ZSgnMjAyNC0wMy0zMScpLFxuICAgICAgICAgICAgc3RhdHVzOiBQdXJjaGFzZUludm9pY2VTdGF0dXMuUEFJRCxcbiAgICAgICAgICAgIHN1YnRvdGFsOiAzMDAuMDAsXG4gICAgICAgICAgICB0b3RhbEFtb3VudDogMzAwLjAwLFxuICAgICAgICAgICAgY3JlYXRlZEJ5OiB0ZXN0VXNlci5pZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbnZvaWNlcyBieSBpbnZvaWNlIG51bWJlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5zZWFyY2hQdXJjaGFzZUludm9pY2VzKHtcbiAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLVNFQVJDSC0wMDInXG4gICAgICB9KTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLmludm9pY2VOdW1iZXIpLnRvQmUoJ1BJLVNFQVJDSC0wMDInKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmlsdGVyIGludm9pY2VzIGJ5IHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5zZWFyY2hQdXJjaGFzZUludm9pY2VzKHtcbiAgICAgICAgc3RhdHVzOiBQdXJjaGFzZUludm9pY2VTdGF0dXMuQVBQUk9WRURcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uc3RhdHVzKS50b0JlKFB1cmNoYXNlSW52b2ljZVN0YXR1cy5BUFBST1ZFRCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZpbHRlciBpbnZvaWNlcyBieSBkYXRlIHJhbmdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLnNlYXJjaFB1cmNoYXNlSW52b2ljZXMoe1xuICAgICAgICBkYXRlRnJvbTogbmV3IERhdGUoJzIwMjQtMDItMDEnKSxcbiAgICAgICAgZGF0ZVRvOiBuZXcgRGF0ZSgnMjAyNC0wMy0zMScpXG4gICAgICB9KTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocmVzdWx0LmV2ZXJ5KGludm9pY2UgPT4gXG4gICAgICAgIGludm9pY2UuaW52b2ljZURhdGUgPj0gbmV3IERhdGUoJzIwMjQtMDItMDEnKSAmJlxuICAgICAgICBpbnZvaWNlLmludm9pY2VEYXRlIDw9IG5ldyBEYXRlKCcyMDI0LTAzLTMxJylcbiAgICAgICkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZpbHRlciBpbnZvaWNlcyBieSBzdXBwbGllcicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5zZWFyY2hQdXJjaGFzZUludm9pY2VzKHtcbiAgICAgICAgc3VwcGxpZXJJZDogdGVzdFN1cHBsaWVyLmlkXG4gICAgICB9KTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXZlcnkoaW52b2ljZSA9PiBpbnZvaWNlLnN1cHBsaWVySWQgPT09IHRlc3RTdXBwbGllci5pZCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQdXJjaGFzZSBJbnZvaWNlIEJ1c2luZXNzIExvZ2ljJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHRvdGFscyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBpbnZvaWNlRGF0YSA9IHtcbiAgICAgICAgc3VwcGxpZXJJZDogdGVzdFN1cHBsaWVyLmlkLFxuICAgICAgICBpbnZvaWNlTnVtYmVyOiAnUEktQ0FMQy0wMDEnLFxuICAgICAgICBpbnZvaWNlRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWQsXG4gICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5pZCxcbiAgICAgICAgICAgIHF1YW50aXR5OiA1LFxuICAgICAgICAgICAgdW5pdENvc3Q6IDIwLjAwLFxuICAgICAgICAgICAgdG90YWxDb3N0OiAxMDAuMDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuaWQsXG4gICAgICAgICAgICBxdWFudGl0eTogMyxcbiAgICAgICAgICAgIHVuaXRDb3N0OiAzMC4wMCxcbiAgICAgICAgICAgIHRvdGFsQ29zdDogOTAuMDBcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHRheFJhdGU6IDAuMTAgLy8gMTAlIHRheFxuICAgICAgfTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmNyZWF0ZVB1cmNoYXNlSW52b2ljZVdpdGhDYWxjdWxhdGlvbnMoaW52b2ljZURhdGEpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VidG90YWwpLnRvQmUoMTkwLjAwKTsgLy8gMTAwICsgOTBcbiAgICAgIGV4cGVjdChyZXN1bHQudGF4QW1vdW50KS50b0JlKDE5LjAwKTsgLy8gMTkwICogMC4xMFxuICAgICAgZXhwZWN0KHJlc3VsdC50b3RhbEFtb3VudCkudG9CZSgyMDkuMDApOyAvLyAxOTAgKyAxOVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgaW52ZW50b3J5IHdoZW4gaW52b2ljZSBpcyBhcHByb3ZlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGludm9pY2UgPSBhd2FpdCBwcmlzbWEucHVyY2hhc2VJbnZvaWNlLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzdXBwbGllcklkOiB0ZXN0U3VwcGxpZXIuaWQsXG4gICAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLUlOVkVOVE9SWS0wMDEnLFxuICAgICAgICAgIGludm9pY2VEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLFxuICAgICAgICAgIHN0YXR1czogUHVyY2hhc2VJbnZvaWNlU3RhdHVzLlBFTkRJTkcsXG4gICAgICAgICAgc3VidG90YWw6IDUwMC4wMCxcbiAgICAgICAgICB0b3RhbEFtb3VudDogNTAwLjAwLFxuICAgICAgICAgIGNyZWF0ZWRCeTogdGVzdFVzZXIuaWRcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHByaXNtYS5wdXJjaGFzZUludm9pY2VJdGVtLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBwdXJjaGFzZUludm9pY2VJZDogaW52b2ljZS5pZCxcbiAgICAgICAgICBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0LmlkLFxuICAgICAgICAgIHF1YW50aXR5OiAxMCxcbiAgICAgICAgICB1bml0Q29zdDogNTAuMDAsXG4gICAgICAgICAgdG90YWxDb3N0OiA1MDAuMDBcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgYXdhaXQgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5hcHByb3ZlUHVyY2hhc2VJbnZvaWNlKGludm9pY2UuaWQpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGNvbnN0IGludmVudG9yeUl0ZW1zID0gYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZmluZE1hbnkoe1xuICAgICAgICB3aGVyZTogeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0LmlkIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBleHBlY3QoaW52ZW50b3J5SXRlbXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChpbnZlbnRvcnlJdGVtc1swXS5xdWFudGl0eSkudG9CZSgxMCk7XG4gICAgICBleHBlY3QoaW52ZW50b3J5SXRlbXNbMF0udW5pdENvc3QpLnRvQmUoNTAuMDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcgYW5kIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29uY3VycmVudCBpbnZvaWNlIGNyZWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgaW52b2ljZURhdGEgPSB7XG4gICAgICAgIHN1cHBsaWVySWQ6IHRlc3RTdXBwbGllci5pZCxcbiAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLUNPTkNVUlJFTlQtMDAxJyxcbiAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLFxuICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5QRU5ESU5HLFxuICAgICAgICBzdWJ0b3RhbDogMTAwLjAwLFxuICAgICAgICB0b3RhbEFtb3VudDogMTAwLjAwLFxuICAgICAgICBjcmVhdGVkQnk6IHRlc3RVc2VyLmlkXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3QgLSBDcmVhdGUgbXVsdGlwbGUgaW52b2ljZXMgY29uY3VycmVudGx5XG4gICAgICBjb25zdCBwcm9taXNlcyA9IEFycmF5KDMpLmZpbGwobnVsbCkubWFwKChfLCBpbmRleCkgPT4gXG4gICAgICAgIHB1cmNoYXNlSW52b2ljZVNlcnZpY2UuY3JlYXRlUHVyY2hhc2VJbnZvaWNlKHtcbiAgICAgICAgICAuLi5pbnZvaWNlRGF0YSxcbiAgICAgICAgICBpbnZvaWNlTnVtYmVyOiBgUEktQ09OQ1VSUkVOVC0ke2luZGV4ICsgMX1gXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBjb25zdCBzdWNjZXNzZnVsID0gcmVzdWx0cy5maWx0ZXIociA9PiByLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcpO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3NmdWwpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgcHJvZHVjdCByZWZlcmVuY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgaW52b2ljZURhdGEgPSB7XG4gICAgICAgIHN1cHBsaWVySWQ6IHRlc3RTdXBwbGllci5pZCxcbiAgICAgICAgaW52b2ljZU51bWJlcjogJ1BJLUlOVkFMSUQtMDAxJyxcbiAgICAgICAgaW52b2ljZURhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIGR1ZURhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLFxuICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5QRU5ESU5HLFxuICAgICAgICBjcmVhdGVkQnk6IHRlc3RVc2VyLmlkLFxuICAgICAgICBpdGVtczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb2R1Y3RJZDogOTk5OTksIC8vIE5vbi1leGlzdGVudCBwcm9kdWN0XG4gICAgICAgICAgICBxdWFudGl0eTogMSxcbiAgICAgICAgICAgIHVuaXRDb3N0OiAxMC4wMCxcbiAgICAgICAgICAgIHRvdGFsQ29zdDogMTAuMDBcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBwdXJjaGFzZUludm9pY2VTZXJ2aWNlLmNyZWF0ZVB1cmNoYXNlSW52b2ljZVdpdGhJdGVtcyhpbnZvaWNlRGF0YSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkYXRhYmFzZSB0cmFuc2FjdGlvbiBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRoaXMgdGVzdCB3b3VsZCByZXF1aXJlIG1vcmUgc29waGlzdGljYXRlZCBtb2NraW5nIHRvIHNpbXVsYXRlIHRyYW5zYWN0aW9uIGZhaWx1cmVzXG4gICAgICAvLyBGb3Igbm93LCB3ZSdsbCB0ZXN0IHRoYXQgdGhlIHNlcnZpY2UgaGFuZGxlcyBiYXNpYyB2YWxpZGF0aW9uIGVycm9yc1xuICAgICAgXG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBpbnZhbGlkRGF0YSA9IHtcbiAgICAgICAgLy8gTWlzc2luZyByZXF1aXJlZCBzdXBwbGllcklkXG4gICAgICAgIGludm9pY2VOdW1iZXI6ICdQSS1JTlZBTElELTAwMicsXG4gICAgICAgIGludm9pY2VEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICBzdGF0dXM6IFB1cmNoYXNlSW52b2ljZVN0YXR1cy5QRU5ESU5HXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgcHVyY2hhc2VJbnZvaWNlU2VydmljZS5jcmVhdGVQdXJjaGFzZUludm9pY2UoaW52YWxpZERhdGEgYXMgYW55KVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsidGVzdFByaXNtYSIsIlByaXNtYUNsaWVudCIsImRhdGFzb3VyY2VzIiwiZGIiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiVEVTVF9EQVRBQkFTRV9VUkwiLCJEQVRBQkFTRV9VUkwiLCJqZXN0IiwibW9jayIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJwdXJjaGFzZUludm9pY2VTZXJ2aWNlIiwidGVzdFN1cHBsaWVyIiwidGVzdFByb2R1Y3QiLCJ0ZXN0VXNlciIsInRlc3RDYXRlZ29yeSIsImJlZm9yZUFsbCIsIlB1cmNoYXNlSW52b2ljZVNlcnZpY2UiLCJwcmlzbWEiLCIkY29ubmVjdCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImJlZm9yZUVhY2giLCJwdXJjaGFzZUludm9pY2VJdGVtIiwiZGVsZXRlTWFueSIsInB1cmNoYXNlSW52b2ljZSIsImludmVudG9yeUl0ZW0iLCJwcm9kdWN0IiwiY2F0ZWdvcnkiLCJzdXBwbGllciIsInVzZXIiLCJ3YXJuIiwibWVzc2FnZSIsImNyZWF0ZSIsImRhdGEiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJlbWFpbCIsInBhc3N3b3JkIiwicm9sZSIsImlzQWN0aXZlIiwicGhvbmUiLCJhZGRyZXNzIiwic2t1IiwicHJpY2UiLCJjb3N0IiwiY2F0ZWdvcnlJZCIsImlkIiwic3RhdHVzIiwiUHJvZHVjdFN0YXR1cyIsIkFDVElWRSIsImFmdGVyRWFjaCIsImFmdGVyQWxsIiwiJGRpc2Nvbm5lY3QiLCJpdCIsImludm9pY2VEYXRhIiwic3VwcGxpZXJJZCIsImludm9pY2VOdW1iZXIiLCJpbnZvaWNlRGF0ZSIsIkRhdGUiLCJkdWVEYXRlIiwibm93IiwiUHVyY2hhc2VJbnZvaWNlU3RhdHVzIiwiUEVORElORyIsInN1YnRvdGFsIiwidGF4QW1vdW50IiwidG90YWxBbW91bnQiLCJub3RlcyIsImNyZWF0ZWRCeSIsInJlc3VsdCIsImNyZWF0ZVB1cmNoYXNlSW52b2ljZSIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwidG9CZSIsImRiSW52b2ljZSIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsIml0ZW1zIiwicHJvZHVjdElkIiwicXVhbnRpdHkiLCJ1bml0Q29zdCIsInRvdGFsQ29zdCIsImNyZWF0ZVB1cmNoYXNlSW52b2ljZVdpdGhJdGVtcyIsImludm9pY2VJdGVtcyIsImZpbmRNYW55IiwicHVyY2hhc2VJbnZvaWNlSWQiLCJ0b0hhdmVMZW5ndGgiLCJpbnZhbGlkRGF0YSIsInJlamVjdHMiLCJ0b1Rocm93IiwiaW52b2ljZURhdGExIiwiaW52b2ljZURhdGEyIiwidGVzdEludm9pY2UiLCJnZXRQdXJjaGFzZUludm9pY2VCeUlkIiwiZ2V0UHVyY2hhc2VJbnZvaWNlV2l0aERldGFpbHMiLCJ0b0JlTnVsbCIsImNyZWF0ZU1hbnkiLCJnZXRQdXJjaGFzZUludm9pY2VzIiwicGFnZSIsImxpbWl0IiwiaW52b2ljZXMiLCJ0b3RhbCIsInRvQmVHcmVhdGVyVGhhbk9yRXF1YWwiLCJ1cGRhdGVQdXJjaGFzZUludm9pY2VTdGF0dXMiLCJBUFBST1ZFRCIsInVwZGF0ZURhdGEiLCJ1cGRhdGVQdXJjaGFzZUludm9pY2UiLCJkZWxldGVQdXJjaGFzZUludm9pY2UiLCJpc0RlbGV0ZWQiLCJQQUlEIiwic2VhcmNoUHVyY2hhc2VJbnZvaWNlcyIsImRhdGVGcm9tIiwiZGF0ZVRvIiwiZXZlcnkiLCJpbnZvaWNlIiwibGVuZ3RoIiwidGF4UmF0ZSIsImNyZWF0ZVB1cmNoYXNlSW52b2ljZVdpdGhDYWxjdWxhdGlvbnMiLCJhcHByb3ZlUHVyY2hhc2VJbnZvaWNlIiwiaW52ZW50b3J5SXRlbXMiLCJwcm9taXNlcyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJpbmRleCIsInJlc3VsdHMiLCJQcm9taXNlIiwiYWxsU2V0dGxlZCIsInN1Y2Nlc3NmdWwiLCJmaWx0ZXIiLCJyIl0sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFDakQsdUVBQXVFOzs7Ozt5QkFFbEQ7d0JBQ1E7K0RBb0JWO3dDQUNvQjs7Ozs7O0FBakJ2Qyx5Q0FBeUM7QUFDekMsTUFBTUEsYUFBYSxJQUFJQyxvQkFBWSxDQUFDO0lBQ2xDQyxhQUFhO1FBQ1hDLElBQUk7WUFDRkMsS0FBS0MsUUFBUUMsR0FBRyxDQUFDQyxpQkFBaUIsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxZQUFZO1FBQ2hFO0lBQ0Y7QUFDRjtBQUVBLGtEQUFrRDtBQUNsREMsYUFBSSxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCLElBQU8sQ0FBQTtRQUMvQkMsWUFBWTtRQUNaQyxTQUFTWjtJQUNYLENB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