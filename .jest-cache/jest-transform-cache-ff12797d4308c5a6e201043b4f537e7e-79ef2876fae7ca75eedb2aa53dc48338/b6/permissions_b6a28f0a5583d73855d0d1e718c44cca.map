{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/lib/utils/permissions.ts"],"sourcesContent":["/**\n * Centralized permission checking utilities\n */\n\n/**\n * Check if user has admin permissions or specific permission\n * @param permissions - Array of user permissions\n * @param requiredPermission - The specific permission required\n * @returns boolean indicating if user has permission\n */\nexport function hasPermission(permissions: string[], requiredPermission: string): boolean {\n    return permissions.includes('*') || \n           permissions.includes('admin:all') || \n           permissions.includes('ALL') || \n           permissions.includes(requiredPermission);\n}\n\n/**\n * Check if user has any of the specified permissions or admin permissions\n * @param permissions - Array of user permissions\n * @param requiredPermissions - Array of permissions, user needs at least one\n * @returns boolean indicating if user has any of the required permissions\n */\nexport function hasAnyPermission(permissions: string[], requiredPermissions: string[]): boolean {\n    return permissions.includes('*') || \n           permissions.includes('admin:all') || \n           permissions.includes('ALL') || \n           requiredPermissions.some(permission => permissions.includes(permission));\n}\n\n/**\n * Check if user has all of the specified permissions or admin permissions\n * @param permissions - Array of user permissions\n * @param requiredPermissions - Array of permissions, user needs all of them\n * @returns boolean indicating if user has all required permissions\n */\nexport function hasAllPermissions(permissions: string[], requiredPermissions: string[]): boolean {\n    return permissions.includes('*') || \n           permissions.includes('admin:all') || \n           permissions.includes('ALL') || \n           requiredPermissions.every(permission => permissions.includes(permission));\n}\n\n/**\n * Check if user is an admin (has admin:all, *, or specific admin permissions)\n * @param permissions - Array of user permissions\n * @returns boolean indicating if user is an admin\n */\nexport function isAdmin(permissions: string[]): boolean {\n    return permissions.includes('*') || \n           permissions.includes('admin:all') || \n           permissions.includes('ALL') || \n           permissions.includes('shop:manage') || \n           permissions.includes('user:manage');\n}"],"names":["hasAllPermissions","hasAnyPermission","hasPermission","isAdmin","permissions","requiredPermission","includes","requiredPermissions","some","permission","every"],"mappings":"AAAA;;CAEC,GAED;;;;;CAKC;;;;;;;;;;;IA2BeA,iBAAiB;eAAjBA;;IAbAC,gBAAgB;eAAhBA;;IAbAC,aAAa;eAAbA;;IAsCAC,OAAO;eAAPA;;;AAtCT,SAASD,cAAcE,WAAqB,EAAEC,kBAA0B;IAC3E,OAAOD,YAAYE,QAAQ,CAAC,QACrBF,YAAYE,QAAQ,CAAC,gBACrBF,YAAYE,QAAQ,CAAC,UACrBF,YAAYE,QAAQ,CAACD;AAChC;AAQO,SAASJ,iBAAiBG,WAAqB,EAAEG,mBAA6B;IACjF,OAAOH,YAAYE,QAAQ,CAAC,QACrBF,YAAYE,QAAQ,CAAC,gBACrBF,YAAYE,QAAQ,CAAC,UACrBC,oBAAoBC,IAAI,CAACC,CAAAA,aAAcL,YAAYE,QAAQ,CAACG;AACvE;AAQO,SAAST,kBAAkBI,WAAqB,EAAEG,mBAA6B;IAClF,OAAOH,YAAYE,QAAQ,CAAC,QACrBF,YAAYE,QAAQ,CAAC,gBACrBF,YAAYE,QAAQ,CAAC,UACrBC,oBAAoBG,KAAK,CAACD,CAAAA,aAAcL,YAAYE,QAAQ,CAACG;AACxE;AAOO,SAASN,QAAQC,WAAqB;IACzC,OAAOA,YAAYE,QAAQ,CAAC,QACrBF,YAAYE,QAAQ,CAAC,gBACrBF,YAAYE,QAAQ,CAAC,UACrBF,YAAYE,QAAQ,CAAC,kBACrBF,YAAYE,QAAQ,CAAC;AAChC"}