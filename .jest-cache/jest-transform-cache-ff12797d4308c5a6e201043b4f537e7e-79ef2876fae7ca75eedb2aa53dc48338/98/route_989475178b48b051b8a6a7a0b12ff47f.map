{"version":3,"names":["DELETE","cov_7f8epg9vf","f","s","GET","PUT","request","params","authResult","_auth","validateTokenPermission","isValid","b","_server","NextResponse","json","error","message","status","userId","getUserIdFromToken","user","_prisma","prisma","findUnique","where","id","select","shopId","role","name","resolvedParams","isNaN","Number","invoiceId","whereClause","invoice","include","customer","shop","location","contact_person","phone","email","address_line1","address_line2","city","state","postal_code","country","items","product","payments","receipt","isNot","console","success","Error","String","hasSalesEdit","hasInvoiceManage","existingInvoice","customerId","invoiceNumber","requestData","log","sendSms","invoiceData","parseInt","toString","customerType","creditLimit","totalAmount","reduce","sum","item","price","parseFloat","customPrice","quantity","outstandingInvoices","aggregate","in","not","_sum","total","currentBalance","newTotalBalance","toLocaleString","details","invoiceAmount","exceedAmount","isOnlyStatusUpdate","Object","keys","length","undefined","includes","updatedInvoice","update","data","invalidationPromises","_cache","cacheService","invalidateInvoices","invalidatePattern","Promise","all","Array","isArray","updateData","$transaction","tx","oldItemsMap","Map","newItemsMap","existingQuantity","get","productId","set","allProductIds","Set","from","oldQuantity","newQuantity","quantityChange","affectedShopId","availableInventory","inventoryItem","findMany","totalAvailable","updateMany","gte","decrement","increment","Math","abs","invoiceItem","deleteMany","newCalculatedTotalInvoiceAmount","newTotalInvoiceProfit","productIdsForNewItems","map","inventoryItems","shopSpecificCost","productCostMap","missingProductIds","filter","has","fallbackProducts","weightedAverageCost","forEach","p","costPrice","itemSellingTotal","totalItemCost","itemProfit","create","profit","newProfitMargin","subtotal","discountAmount","discountType","discountValue","netTotal","paymentMethod","invoiceDate","Date","dueDate","notes","totalProfit","profitMargin","finalUpdatedInvoice","txError","timeout","_smsService","smsService","init","isConfigured","sendInvoiceNotification","then","result","warn","catch","smsError","hasSalesDelete","deleteInvoice","resolve","_interop_require_wildcard","require","deletedInvoiceResult","allSettled","err","stack"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { cacheService } from '@/lib/cache';\nimport { AuditService } from '@/services/auditService';\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'sales:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Get user details to check role and shop access\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                shopId: true,\n                role: {\n                    select: { name: true }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(resolvedParams.id);\n\n        // Build where clause with shop filtering\n        let whereClause: any = { id: invoiceId };\n        \n        // For shop staff, restrict to their assigned shop only\n        if (user.role?.name === 'Shop Staff' && user.shopId) {\n            whereClause.shopId = user.shopId;\n        }\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: whereClause,\n            include: {\n                customer: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true,\n                        location: true,\n                        contact_person: true,\n                        phone: true,\n                        email: true,\n                        address_line1: true,\n                        address_line2: true,\n                        city: true,\n                        state: true,\n                        postal_code: true,\n                        country: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: {\n                    where: {\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    include: {\n                        receipt: true\n                    }\n                }\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error fetching invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const hasSalesEdit = await validateTokenPermission(request, 'sales:edit');\n        const hasInvoiceManage = await validateTokenPermission(request, 'invoice:manage');\n        if (!hasSalesEdit.isValid && !hasInvoiceManage.isValid) {\n            return NextResponse.json({ \n                error: \"Permission denied. Requires 'sales:edit' or 'invoice:manage'.\" \n            }, { status: 403 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Get user details to check role and shop access\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                shopId: true,\n                role: {\n                    select: { name: true }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(resolvedParams.id);\n        \n        // First, check if the invoice exists and user has access to it\n        let whereClause: any = { id: invoiceId };\n        if (user.role?.name === 'Shop Staff' && user.shopId) {\n            whereClause.shopId = user.shopId;\n        }\n        \n        const existingInvoice = await prisma.invoice.findUnique({\n            where: whereClause,\n            select: { id: true, shopId: true, customerId: true, invoiceNumber: true }\n        });\n        \n        if (!existingInvoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found or access denied' },\n                { status: 404 }\n            );\n        }\n        const requestData = await request.json();\n        console.log('Invoice update request data:', { invoiceId, ...requestData });\n        const { sendSms, ...invoiceData } = requestData;\n\n        // Credit limit validation for wholesale customers\n        if (invoiceData.customerId) {\n            const customer = await prisma.customer.findUnique({\n                where: { id: parseInt(invoiceData.customerId.toString()) },\n                select: { \n                    customerType: true, \n                    creditLimit: true,\n                    name: true\n                }\n            });\n\n            if (customer && customer.customerType === 'wholesale' && customer.creditLimit) {\n                // Calculate total invoice amount from the updated items\n                const totalAmount = invoiceData.items?.reduce((sum: number, item: any) => {\n                    const price = parseFloat(item.customPrice) || parseFloat(item.price) || 0;\n                    const quantity = parseInt(item.quantity, 10) || 0;\n                    return sum + (price * quantity);\n                }, 0) || 0;\n\n                // Get customer's current outstanding balance (excluding the current invoice being updated)\n                const outstandingInvoices = await prisma.invoice.aggregate({\n                    where: {\n                        customerId: parseInt(invoiceData.customerId.toString()),\n                        status: { in: ['pending', 'overdue'] },\n                        id: { not: invoiceId } // Exclude the current invoice being updated\n                    },\n                    _sum: { total: true }\n                });\n\n                const currentBalance = outstandingInvoices._sum.total || 0;\n                const newTotalBalance = currentBalance + totalAmount;\n\n                if (newTotalBalance > customer.creditLimit) {\n                    return NextResponse.json(\n                        {\n                            success: false,\n                            message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Updated invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,\n                            error: 'Credit limit exceeded',\n                            details: {\n                                currentBalance,\n                                invoiceAmount: totalAmount,\n                                creditLimit: customer.creditLimit,\n                                exceedAmount: newTotalBalance - customer.creditLimit\n                            }\n                        },\n                        { status: 400 }\n                    );\n                }\n            }\n        }\n\n        // Check if this is only a status update to \"Paid\"\n        // More specific check: make sure it only has the status field and it's being changed to 'Paid'\n        const isOnlyStatusUpdate =\n            Object.keys(invoiceData).length === 1 &&\n            invoiceData.status !== undefined &&\n            ['Paid', 'Pending'].includes(invoiceData.status);\n\n        // If it's only updating status, handle it without affecting inventory\n        if (isOnlyStatusUpdate) {\n            console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);\n            const updatedInvoice = await prisma.invoice.update({\n                where: { id: invoiceId },\n                data: { status: invoiceData.status },\n                include: {\n                    customer: true,\n                    shop: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    },\n                    payments: true\n                }\n            });\n\n            // Invalidate caches\n            const shopId = updatedInvoice.shopId;\n            const invalidationPromises = [\n                cacheService.invalidateInvoices(),\n                cacheService.invalidatePattern(`invoices:*:shop:${shopId || 'all'}`),\n                cacheService.invalidatePattern('invoices:all:*'),\n                cacheService.invalidatePattern('dashboard:*'),\n                cacheService.invalidatePattern(`dashboard:optimized:shop:${shopId || 'all'}`),\n                cacheService.invalidatePattern('dashboard:summary'),\n                cacheService.invalidatePattern('dashboard:sales'),\n                cacheService.invalidatePattern('dashboard:shops'),\n            ];\n            await Promise.all(invalidationPromises);\n\n            return NextResponse.json(updatedInvoice);\n        }\n\n        // Ensure invoiceData.items is an array, default to empty if not provided or not an array\n        if (!Array.isArray(invoiceData.items)) {\n            console.log('invoiceData.items was not an array, defaulting to [] for update.');\n            invoiceData.items = [];\n        }\n\n        // Inventory update events are now handled in the service layer if needed\n\n        // Prepare update data outside transaction scope\n        let updateData: any = {};\n\n        // Update invoice with transaction to handle items\n        const updatedInvoice = await prisma.$transaction(\n            async (tx) => {\n                try {\n                    const existingInvoice = await tx.invoice.findUnique({\n                        where: { id: invoiceId },\n                        include: {\n                            items: true // Keep for inventory adjustment if needed, though items will be replaced\n                        }\n                    });\n\n                    if (!existingInvoice) {\n                        throw new Error('Invoice not found');\n                    }\n\n                    // --- Inventory Adjustment Logic (existing) --- \n                    // This logic might need review if items are fully replaced, \n                    // as it compares old vs new item quantities. \n                    // For profit, we are deleting and re-creating items.\n                    const oldItemsMap = new Map();\n                    const newItemsMap = new Map();\n\n                    for (const item of existingInvoice.items) {\n                        const existingQuantity = oldItemsMap.get(item.productId) || 0;\n                        oldItemsMap.set(item.productId, existingQuantity + item.quantity);\n                    }\n\n                    for (const item of invoiceData.items) {\n                        const productId = parseInt(item.productId.toString());\n                        const existingQuantity = newItemsMap.get(productId) || 0;\n                        newItemsMap.set(productId, existingQuantity + item.quantity);\n                    }\n\n                    const allProductIds = new Set([\n                        ...Array.from(oldItemsMap.keys()),\n                        ...Array.from(newItemsMap.keys())\n                    ]);\n\n                    console.log('Invoice update - Inventory changes (based on diff):');\n                    for (const productId of Array.from(allProductIds)) {\n                        const oldQuantity = oldItemsMap.get(productId) || 0;\n                        const newQuantity = newItemsMap.get(productId) || 0;\n                        const quantityChange = newQuantity - oldQuantity;\n                        console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);\n                        if (quantityChange !== 0) {\n                            // Ensure affectedShopId is a string if invoiceData.shopId is a string\n                            const affectedShopId: string | undefined = invoiceData.shopId ? String(invoiceData.shopId) : undefined;\n\n                            if (quantityChange > 0) { // Deduct (more items sold or added)\n                                if (affectedShopId) {\n                                    const availableInventory = await tx.inventoryItem.findMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId }\n                                    });\n                                    const totalAvailable = availableInventory.reduce((sum, item) => sum + item.quantity, 0);\n                                    if (totalAvailable < quantityChange) {\n                                        throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);\n                                    }\n                                    // This should ideally be a more robust way to pick which inventory item to decrement\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId, quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                }\n                            } else { // Add back (fewer items sold or items removed)\n                                if (affectedShopId) {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()) },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    // --- End Inventory Adjustment Logic ---\n\n                    // Delete old invoice items before adding new ones for profit recalc\n                    await tx.invoiceItem.deleteMany({ where: { invoiceId: invoiceId } });\n\n                    let newCalculatedTotalInvoiceAmount = 0;\n                    let newTotalInvoiceProfit = 0;\n\n                    if (invoiceData.items && Array.isArray(invoiceData.items) && invoiceData.items.length > 0) {\n                        const productIdsForNewItems = invoiceData.items.map((item: any) => parseInt(item.productId.toString()));\n                        \n                        // Get shop-specific costs for profit calculation instead of global weighted average\n                        const inventoryItems = await tx.inventoryItem.findMany({\n                            where: { \n                                productId: { in: productIdsForNewItems },\n                                shopId: invoiceData.shopId\n                            },\n                            select: { productId: true, shopSpecificCost: true }\n                        });\n\n                        // Create a map of productId to shop-specific cost\n                        const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                        \n                        // For products not found in inventory, fallback to global weighted average\n                        const missingProductIds = productIdsForNewItems.filter((id: number) => !productCostMap.has(id));\n                        if (missingProductIds.length > 0) {\n                            const fallbackProducts = await tx.product.findMany({\n                                where: { id: { in: missingProductIds } },\n                                select: { id: true, weightedAverageCost: true }\n                            });\n                            fallbackProducts.forEach(p => {\n                                productCostMap.set(p.id, p.weightedAverageCost || 0);\n                            });\n                        }\n\n                        for (const item of invoiceData.items) {\n                            const productId = parseInt(item.productId.toString());\n                            const costPrice = productCostMap.get(productId) || 0;\n                            const itemSellingTotal = item.quantity * item.price;\n                            const totalItemCost = costPrice * item.quantity;\n                            const itemProfit = itemSellingTotal - totalItemCost;\n\n                            await tx.invoiceItem.create({\n                                data: {\n                                    invoiceId: invoiceId,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                }\n                            });\n                            newCalculatedTotalInvoiceAmount += itemSellingTotal;\n                            newTotalInvoiceProfit += itemProfit;\n                        }\n                    }\n\n                    const newProfitMargin = newCalculatedTotalInvoiceAmount > 0 ? (newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount) * 100 : 0;\n\n                    // Apply discount if provided\n                    let subtotal = newCalculatedTotalInvoiceAmount;\n                    let discountAmount = 0;\n                    if (invoiceData.discountType && invoiceData.discountValue > 0) {\n                        discountAmount = invoiceData.discountType === 'percent'\n                            ? (subtotal * invoiceData.discountValue) / 100\n                            : invoiceData.discountValue;\n                    }\n                    let netTotal = subtotal - discountAmount;\n\n                    updateData = {\n                        status: invoiceData.status,\n                        paymentMethod: invoiceData.paymentMethod,\n                        invoiceDate: invoiceData.invoiceDate ? new Date(invoiceData.invoiceDate) : undefined,\n                        dueDate: invoiceData.dueDate ? new Date(invoiceData.dueDate) : undefined,\n                        notes: invoiceData.notes,\n                        shopId: invoiceData.shopId ? invoiceData.shopId.toString() : null, // Ensure shopId is string or null\n                        total: netTotal, // Updated total\n                        discountType: invoiceData.discountType,\n                        discountValue: invoiceData.discountValue,\n                        totalProfit: newTotalInvoiceProfit,   // Updated profit\n                        profitMargin: newProfitMargin         // Updated profit margin\n                    };\n\n                    if (invoiceData.customerId) {\n                        updateData.customerId = parseInt(invoiceData.customerId.toString());\n                    } else {\n                        // If customerId is explicitly null or undefined, disconnect it if your schema allows\n                        // updateData.customer = { disconnect: true }; \n                        // Or ensure it's set to null if the field is optional and you want to clear it.\n                        // For now, we assume if not provided, it's not changed or handled by frontend state.\n                    }\n\n                    console.log('Updating invoice details with profit:', { invoiceId, updateData });\n\n                    const finalUpdatedInvoice = await tx.invoice.update({\n                        where: { id: invoiceId },\n                        data: updateData,\n                        include: {\n                            customer: true,\n                            shop: true,\n                            items: {\n                                include: {\n                                    product: true\n                                }\n                            },\n                            payments: true\n                        }\n                    });\n\n                    // Handle cash payment method\n                    // Removed automatic payment creation/update for cash invoices\n                    // Users will manually record payments when they actually receive them\n\n                    return finalUpdatedInvoice;\n                } catch (txError) {\n                    console.error('Transaction error:', txError);\n                    throw txError;\n                }\n            },\n            { timeout: 30000 }\n        );\n\n        // Real-time updates now handled by polling system\n        // if (inventoryUpdatesForEvent.length > 0) { // This line is removed\n        //     console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);\n        // }\n\n        // Send SMS notification if requested\n        if (sendSms && updatedInvoice) {\n            try {\n                await smsService.init();\n                if (smsService.isConfigured()) {\n                    // Send SMS notification asynchronously\n                    smsService.sendInvoiceNotification(updatedInvoice.id)\n                        .then((result: any) => {\n                            if (result.status >= 200 && result.status < 300) {\n                                console.log('SMS update notification sent successfully');\n                            } else {\n                                console.warn('Failed to send SMS update notification:', result.message);\n                            }\n                        })\n                        .catch((error: any) => {\n                            console.error('Error sending SMS update notification:', error);\n                        });\n                }\n            } catch (smsError) {\n                // Log SMS error but don't fail the request\n                console.error('SMS update notification error:', smsError);\n            }\n        }\n\n        // Invalidate related caches after successful update\n        const shopId = updatedInvoice.shopId;\n        const invalidationPromises = [\n            cacheService.invalidateInvoices(),\n            cacheService.invalidatePattern(`invoices:*:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            cacheService.invalidatePattern('inventory:*'),\n            cacheService.invalidatePattern(`inventory:*:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:*'),\n            cacheService.invalidatePattern(`dashboard:optimized:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary'),\n            cacheService.invalidatePattern('dashboard:sales'),\n            cacheService.invalidatePattern('dashboard:shops'),\n        ];\n        await Promise.all(invalidationPromises);\n\n        // TODO: Add audit logging for invoice updates\n        // Note: Audit logging temporarily disabled due to type conflicts\n\n        return NextResponse.json({\n            success: true,\n            message: 'Invoice updated successfully',\n            data: updatedInvoice\n        });\n    } catch (error) {\n        console.error('Error updating invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const hasSalesDelete = await validateTokenPermission(request, 'sales:delete');\n        const hasInvoiceManage = await validateTokenPermission(request, 'invoice:manage');\n\n        if (!hasSalesDelete.isValid && !hasInvoiceManage.isValid) {\n            return NextResponse.json({ \n                error: \"Permission denied. Requires 'sales:delete' or 'invoice:manage'.\" \n            }, { status: 403 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json({ error: 'Invalid invoice ID' }, { status: 400 });\n        }\n        const invoiceId = Number(resolvedParams.id);\n\n        // Get userId\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Inventory update events are now handled in the service layer if needed\n\n        // Delegate deletion logic to the service layer to keep this handler lean\n        const { deleteInvoice } = await import('@/services/invoiceService');\n        const deletedInvoiceResult = await deleteInvoice(invoiceId, Number(userId));\n        \n        // Real-time updates now handled by polling system\n        console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);\n\n        // Smart cache invalidation - only invalidate what's necessary\n        const invalidationPromises = [\n            // Invalidate invoice-specific caches\n            cacheService.invalidatePattern(`invoices:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            \n            // Invalidate inventory caches for affected shop\n            cacheService.invalidatePattern(`inventory:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('inventory:all:*'),\n            \n            // Use optimized dashboard cache invalidation\n            cacheService.invalidatePattern(`dashboard:optimized:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:optimized:*:all'),\n            \n            // Invalidate legacy dashboard caches\n            cacheService.invalidatePattern(`dashboard:summary:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary:*:all')\n        ];\n\n        await Promise.allSettled(invalidationPromises);\n        \n        // Trigger materialized view refresh in background\n        // Instead of issuing an internal HTTP request (which doubles latency and\n        // consumes another lambda invocation), we rely on the cacheService\n        // invalidation performed above. The optimized dashboard route will\n        // regenerate fresh data on the next request.\n        \n        return NextResponse.json({\n            success: true,\n            message: `Invoice ${deletedInvoiceResult?.invoiceNumber || invoiceId} deleted successfully`,\n            data: { id: deletedInvoiceResult?.id }\n        });\n\n    } catch (error) {\n        console.error('Error deleting invoice:', error);\n        const err = error as Error;\n\n        // Check for foreign key constraint violation with receipts\n        if (err.message && err.message.includes('Receipt_paymentId_fkey')) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete invoice with associated receipts. Please delete the receipts first.',\n                    error: err.message\n                },\n                { status: 400 }\n            );\n        }\n\n        return NextResponse.json(\n            { success: false, message: err.message || 'Error deleting invoice', error: err.stack },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}