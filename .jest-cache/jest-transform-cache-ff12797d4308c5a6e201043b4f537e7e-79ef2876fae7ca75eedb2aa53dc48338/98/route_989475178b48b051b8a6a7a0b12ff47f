17165c1f9710b6fc417708f6325b0f29
"use strict";

/* istanbul ignore next */
function cov_7f8epg9vf() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts";
  var hash = "04efb6f5b02071887df8f5641bedb07bf0a1bcc6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "13": {
        start: {
          line: 28,
          column: 39
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "14": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "15": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "16": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 20
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 66
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 19
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "23": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "24": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "25": {
        start: {
          line: 48,
          column: 17
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "26": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 88
        }
      },
      "27": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "28": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "29": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 95
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "31": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "32": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 39
        }
      },
      "33": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "34": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "35": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "36": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 18
        }
      },
      "37": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "38": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 90
        }
      },
      "39": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "40": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "41": {
        start: {
          line: 80,
          column: 23
        },
        end: {
          line: 80,
          column: 67
        }
      },
      "42": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "43": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "44": {
        start: {
          line: 89,
          column: 21
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "45": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "46": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "47": {
        start: {
          line: 110,
          column: 31
        },
        end: {
          line: 110,
          column: 43
        }
      },
      "48": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "50": {
        start: {
          line: 118,
          column: 26
        },
        end: {
          line: 118,
          column: 51
        }
      },
      "51": {
        start: {
          line: 120,
          column: 26
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "52": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 45
        }
      },
      "54": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "55": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "56": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "57": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 50
        }
      },
      "58": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "59": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "60": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 667,
          column: 5
        }
      },
      "61": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 92
        }
      },
      "62": {
        start: {
          line: 188,
          column: 33
        },
        end: {
          line: 188,
          column: 100
        }
      },
      "63": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "64": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "65": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 67
        }
      },
      "66": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "67": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "68": {
        start: {
          line: 206,
          column: 21
        },
        end: {
          line: 219,
          column: 10
        }
      },
      "69": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "70": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "71": {
        start: {
          line: 227,
          column: 31
        },
        end: {
          line: 227,
          column: 43
        }
      },
      "72": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "73": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "74": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 51
        }
      },
      "75": {
        start: {
          line: 237,
          column: 26
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "76": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "77": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 45
        }
      },
      "78": {
        start: {
          line: 243,
          column: 32
        },
        end: {
          line: 251,
          column: 10
        }
      },
      "79": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "80": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 257,
          column: 15
        }
      },
      "81": {
        start: {
          line: 259,
          column: 28
        },
        end: {
          line: 259,
          column: 48
        }
      },
      "82": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "83": {
        start: {
          line: 264,
          column: 44
        },
        end: {
          line: 264,
          column: 55
        }
      },
      "84": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "85": {
        start: {
          line: 267,
          column: 29
        },
        end: {
          line: 276,
          column: 14
        }
      },
      "86": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 319,
          column: 13
        }
      },
      "87": {
        start: {
          line: 279,
          column: 36
        },
        end: {
          line: 283,
          column: 26
        }
      },
      "88": {
        start: {
          line: 280,
          column: 34
        },
        end: {
          line: 280,
          column: 93
        }
      },
      "89": {
        start: {
          line: 281,
          column: 37
        },
        end: {
          line: 281,
          column: 69
        }
      },
      "90": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 50
        }
      },
      "91": {
        start: {
          line: 285,
          column: 44
        },
        end: {
          line: 301,
          column: 18
        }
      },
      "92": {
        start: {
          line: 302,
          column: 39
        },
        end: {
          line: 302,
          column: 74
        }
      },
      "93": {
        start: {
          line: 303,
          column: 40
        },
        end: {
          line: 303,
          column: 68
        }
      },
      "94": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 318,
          column: 17
        }
      },
      "95": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 317,
          column: 23
        }
      },
      "96": {
        start: {
          line: 323,
          column: 35
        },
        end: {
          line: 326,
          column: 38
        }
      },
      "97": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "98": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 107
        }
      },
      "99": {
        start: {
          line: 330,
          column: 35
        },
        end: {
          line: 347,
          column: 14
        }
      },
      "100": {
        start: {
          line: 349,
          column: 27
        },
        end: {
          line: 349,
          column: 48
        }
      },
      "101": {
        start: {
          line: 350,
          column: 41
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "102": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 52
        }
      },
      "103": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 61
        }
      },
      "104": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "105": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 92
        }
      },
      "106": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 35
        }
      },
      "107": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 370,
          column: 27
        }
      },
      "108": {
        start: {
          line: 372,
          column: 31
        },
        end: {
          line: 610,
          column: 10
        }
      },
      "109": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 607,
          column: 13
        }
      },
      "110": {
        start: {
          line: 374,
          column: 40
        },
        end: {
          line: 381,
          column: 18
        }
      },
      "111": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 384,
          column: 17
        }
      },
      "112": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 57
        }
      },
      "113": {
        start: {
          line: 389,
          column: 36
        },
        end: {
          line: 389,
          column: 45
        }
      },
      "114": {
        start: {
          line: 390,
          column: 36
        },
        end: {
          line: 390,
          column: 45
        }
      },
      "115": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "116": {
        start: {
          line: 392,
          column: 45
        },
        end: {
          line: 392,
          column: 81
        }
      },
      "117": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 86
        }
      },
      "118": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 399,
          column: 17
        }
      },
      "119": {
        start: {
          line: 396,
          column: 38
        },
        end: {
          line: 396,
          column: 73
        }
      },
      "120": {
        start: {
          line: 397,
          column: 45
        },
        end: {
          line: 397,
          column: 76
        }
      },
      "121": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 398,
          column: 81
        }
      },
      "122": {
        start: {
          line: 400,
          column: 38
        },
        end: {
          line: 403,
          column: 18
        }
      },
      "123": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 83
        }
      },
      "124": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 482,
          column: 17
        }
      },
      "125": {
        start: {
          line: 406,
          column: 40
        },
        end: {
          line: 406,
          column: 71
        }
      },
      "126": {
        start: {
          line: 407,
          column: 40
        },
        end: {
          line: 407,
          column: 71
        }
      },
      "127": {
        start: {
          line: 408,
          column: 43
        },
        end: {
          line: 408,
          column: 68
        }
      },
      "128": {
        start: {
          line: 409,
          column: 20
        },
        end: {
          line: 409,
          column: 125
        }
      },
      "129": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 481,
          column: 21
        }
      },
      "130": {
        start: {
          line: 412,
          column: 47
        },
        end: {
          line: 412,
          column: 106
        }
      },
      "131": {
        start: {
          line: 413,
          column: 24
        },
        end: {
          line: 480,
          column: 25
        }
      },
      "132": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 454,
          column: 29
        }
      },
      "133": {
        start: {
          line: 415,
          column: 59
        },
        end: {
          line: 420,
          column: 34
        }
      },
      "134": {
        start: {
          line: 421,
          column: 55
        },
        end: {
          line: 421,
          column: 117
        }
      },
      "135": {
        start: {
          line: 421,
          column: 94
        },
        end: {
          line: 421,
          column: 113
        }
      },
      "136": {
        start: {
          line: 422,
          column: 32
        },
        end: {
          line: 424,
          column: 33
        }
      },
      "137": {
        start: {
          line: 423,
          column: 36
        },
        end: {
          line: 423,
          column: 200
        }
      },
      "138": {
        start: {
          line: 426,
          column: 32
        },
        end: {
          line: 439,
          column: 35
        }
      },
      "139": {
        start: {
          line: 441,
          column: 32
        },
        end: {
          line: 453,
          column: 35
        }
      },
      "140": {
        start: {
          line: 456,
          column: 28
        },
        end: {
          line: 479,
          column: 29
        }
      },
      "141": {
        start: {
          line: 457,
          column: 32
        },
        end: {
          line: 467,
          column: 35
        }
      },
      "142": {
        start: {
          line: 469,
          column: 32
        },
        end: {
          line: 478,
          column: 35
        }
      },
      "143": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 489,
          column: 19
        }
      },
      "144": {
        start: {
          line: 490,
          column: 54
        },
        end: {
          line: 490,
          column: 55
        }
      },
      "145": {
        start: {
          line: 491,
          column: 44
        },
        end: {
          line: 491,
          column: 45
        }
      },
      "146": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 550,
          column: 17
        }
      },
      "147": {
        start: {
          line: 493,
          column: 50
        },
        end: {
          line: 493,
          column: 116
        }
      },
      "148": {
        start: {
          line: 493,
          column: 80
        },
        end: {
          line: 493,
          column: 115
        }
      },
      "149": {
        start: {
          line: 495,
          column: 43
        },
        end: {
          line: 506,
          column: 22
        }
      },
      "150": {
        start: {
          line: 508,
          column: 43
        },
        end: {
          line: 511,
          column: 27
        }
      },
      "151": {
        start: {
          line: 508,
          column: 78
        },
        end: {
          line: 511,
          column: 25
        }
      },
      "152": {
        start: {
          line: 513,
          column: 46
        },
        end: {
          line: 513,
          column: 105
        }
      },
      "153": {
        start: {
          line: 513,
          column: 81
        },
        end: {
          line: 513,
          column: 104
        }
      },
      "154": {
        start: {
          line: 514,
          column: 20
        },
        end: {
          line: 529,
          column: 21
        }
      },
      "155": {
        start: {
          line: 515,
          column: 49
        },
        end: {
          line: 525,
          column: 26
        }
      },
      "156": {
        start: {
          line: 526,
          column: 24
        },
        end: {
          line: 528,
          column: 27
        }
      },
      "157": {
        start: {
          line: 527,
          column: 28
        },
        end: {
          line: 527,
          column: 81
        }
      },
      "158": {
        start: {
          line: 530,
          column: 20
        },
        end: {
          line: 549,
          column: 21
        }
      },
      "159": {
        start: {
          line: 531,
          column: 42
        },
        end: {
          line: 531,
          column: 77
        }
      },
      "160": {
        start: {
          line: 532,
          column: 42
        },
        end: {
          line: 532,
          column: 76
        }
      },
      "161": {
        start: {
          line: 533,
          column: 49
        },
        end: {
          line: 533,
          column: 75
        }
      },
      "162": {
        start: {
          line: 534,
          column: 46
        },
        end: {
          line: 534,
          column: 71
        }
      },
      "163": {
        start: {
          line: 535,
          column: 43
        },
        end: {
          line: 535,
          column: 75
        }
      },
      "164": {
        start: {
          line: 536,
          column: 24
        },
        end: {
          line: 546,
          column: 27
        }
      },
      "165": {
        start: {
          line: 547,
          column: 24
        },
        end: {
          line: 547,
          column: 76
        }
      },
      "166": {
        start: {
          line: 548,
          column: 24
        },
        end: {
          line: 548,
          column: 60
        }
      },
      "167": {
        start: {
          line: 551,
          column: 40
        },
        end: {
          line: 551,
          column: 143
        }
      },
      "168": {
        start: {
          line: 553,
          column: 31
        },
        end: {
          line: 553,
          column: 62
        }
      },
      "169": {
        start: {
          line: 554,
          column: 37
        },
        end: {
          line: 554,
          column: 38
        }
      },
      "170": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 557,
          column: 17
        }
      },
      "171": {
        start: {
          line: 556,
          column: 20
        },
        end: {
          line: 556,
          column: 149
        }
      },
      "172": {
        start: {
          line: 558,
          column: 31
        },
        end: {
          line: 558,
          column: 56
        }
      },
      "173": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 571,
          column: 18
        }
      },
      "174": {
        start: {
          line: 572,
          column: 16
        },
        end: {
          line: 579,
          column: 17
        }
      },
      "175": {
        start: {
          line: 573,
          column: 20
        },
        end: {
          line: 573,
          column: 88
        }
      },
      "176": {
        start: {
          line: 580,
          column: 16
        },
        end: {
          line: 583,
          column: 19
        }
      },
      "177": {
        start: {
          line: 584,
          column: 44
        },
        end: {
          line: 599,
          column: 18
        }
      },
      "178": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 603,
          column: 43
        }
      },
      "179": {
        start: {
          line: 605,
          column: 16
        },
        end: {
          line: 605,
          column: 61
        }
      },
      "180": {
        start: {
          line: 606,
          column: 16
        },
        end: {
          line: 606,
          column: 30
        }
      },
      "181": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 635,
          column: 9
        }
      },
      "182": {
        start: {
          line: 617,
          column: 12
        },
        end: {
          line: 634,
          column: 13
        }
      },
      "183": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 618,
          column: 52
        }
      },
      "184": {
        start: {
          line: 619,
          column: 16
        },
        end: {
          line: 630,
          column: 17
        }
      },
      "185": {
        start: {
          line: 621,
          column: 20
        },
        end: {
          line: 629,
          column: 23
        }
      },
      "186": {
        start: {
          line: 622,
          column: 24
        },
        end: {
          line: 626,
          column: 25
        }
      },
      "187": {
        start: {
          line: 623,
          column: 28
        },
        end: {
          line: 623,
          column: 85
        }
      },
      "188": {
        start: {
          line: 625,
          column: 28
        },
        end: {
          line: 625,
          column: 100
        }
      },
      "189": {
        start: {
          line: 628,
          column: 24
        },
        end: {
          line: 628,
          column: 87
        }
      },
      "190": {
        start: {
          line: 633,
          column: 16
        },
        end: {
          line: 633,
          column: 74
        }
      },
      "191": {
        start: {
          line: 637,
          column: 23
        },
        end: {
          line: 637,
          column: 44
        }
      },
      "192": {
        start: {
          line: 638,
          column: 37
        },
        end: {
          line: 649,
          column: 9
        }
      },
      "193": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 650,
          column: 48
        }
      },
      "194": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 657,
          column: 11
        }
      },
      "195": {
        start: {
          line: 659,
          column: 8
        },
        end: {
          line: 659,
          column: 56
        }
      },
      "196": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 666,
          column: 11
        }
      },
      "197": {
        start: {
          line: 670,
          column: 4
        },
        end: {
          line: 753,
          column: 5
        }
      },
      "198": {
        start: {
          line: 672,
          column: 31
        },
        end: {
          line: 672,
          column: 96
        }
      },
      "199": {
        start: {
          line: 673,
          column: 33
        },
        end: {
          line: 673,
          column: 100
        }
      },
      "200": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 680,
          column: 9
        }
      },
      "201": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 679,
          column: 15
        }
      },
      "202": {
        start: {
          line: 681,
          column: 31
        },
        end: {
          line: 681,
          column: 43
        }
      },
      "203": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 688,
          column: 9
        }
      },
      "204": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 687,
          column: 15
        }
      },
      "205": {
        start: {
          line: 689,
          column: 26
        },
        end: {
          line: 689,
          column: 51
        }
      },
      "206": {
        start: {
          line: 691,
          column: 23
        },
        end: {
          line: 691,
          column: 67
        }
      },
      "207": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 698,
          column: 9
        }
      },
      "208": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 697,
          column: 15
        }
      },
      "209": {
        start: {
          line: 701,
          column: 34
        },
        end: {
          line: 701,
          column: 155
        }
      },
      "210": {
        start: {
          line: 701,
          column: 81
        },
        end: {
          line: 701,
          column: 154
        }
      },
      "211": {
        start: {
          line: 702,
          column: 37
        },
        end: {
          line: 702,
          column: 83
        }
      },
      "212": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 79
        }
      },
      "213": {
        start: {
          line: 706,
          column: 37
        },
        end: {
          line: 719,
          column: 9
        }
      },
      "214": {
        start: {
          line: 720,
          column: 8
        },
        end: {
          line: 720,
          column: 55
        }
      },
      "215": {
        start: {
          line: 726,
          column: 8
        },
        end: {
          line: 732,
          column: 11
        }
      },
      "216": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 734,
          column: 56
        }
      },
      "217": {
        start: {
          line: 735,
          column: 20
        },
        end: {
          line: 735,
          column: 25
        }
      },
      "218": {
        start: {
          line: 737,
          column: 8
        },
        end: {
          line: 745,
          column: 9
        }
      },
      "219": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 744,
          column: 15
        }
      },
      "220": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 752,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 47
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 31,
            column: 40
          }
        },
        loc: {
          start: {
            line: 31,
            column: 61
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "6": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 34
          }
        },
        loc: {
          start: {
            line: 35,
            column: 53
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 35
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 40
          },
          end: {
            line: 183,
            column: 1
          }
        },
        line: 68
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 184,
            column: 15
          },
          end: {
            line: 184,
            column: 18
          }
        },
        loc: {
          start: {
            line: 184,
            column: 40
          },
          end: {
            line: 668,
            column: 1
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 279,
            column: 62
          },
          end: {
            line: 279,
            column: 63
          }
        },
        loc: {
          start: {
            line: 279,
            column: 75
          },
          end: {
            line: 283,
            column: 17
          }
        },
        line: 279
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 372,
            column: 65
          },
          end: {
            line: 372,
            column: 66
          }
        },
        loc: {
          start: {
            line: 372,
            column: 77
          },
          end: {
            line: 608,
            column: 9
          }
        },
        line: 372
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 421,
            column: 81
          },
          end: {
            line: 421,
            column: 82
          }
        },
        loc: {
          start: {
            line: 421,
            column: 94
          },
          end: {
            line: 421,
            column: 113
          }
        },
        line: 421
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 493,
            column: 72
          },
          end: {
            line: 493,
            column: 73
          }
        },
        loc: {
          start: {
            line: 493,
            column: 80
          },
          end: {
            line: 493,
            column: 115
          }
        },
        line: 493
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 508,
            column: 70
          },
          end: {
            line: 508,
            column: 71
          }
        },
        loc: {
          start: {
            line: 508,
            column: 78
          },
          end: {
            line: 511,
            column: 25
          }
        },
        line: 508
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 513,
            column: 75
          },
          end: {
            line: 513,
            column: 76
          }
        },
        loc: {
          start: {
            line: 513,
            column: 81
          },
          end: {
            line: 513,
            column: 104
          }
        },
        line: 513
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 526,
            column: 49
          },
          end: {
            line: 526,
            column: 50
          }
        },
        loc: {
          start: {
            line: 526,
            column: 54
          },
          end: {
            line: 528,
            column: 25
          }
        },
        line: 526
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 621,
            column: 91
          },
          end: {
            line: 621,
            column: 92
          }
        },
        loc: {
          start: {
            line: 621,
            column: 101
          },
          end: {
            line: 627,
            column: 21
          }
        },
        line: 621
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 627,
            column: 29
          },
          end: {
            line: 627,
            column: 30
          }
        },
        loc: {
          start: {
            line: 627,
            column: 38
          },
          end: {
            line: 629,
            column: 21
          }
        },
        line: 627
      },
      "18": {
        name: "DELETE",
        decl: {
          start: {
            line: 669,
            column: 15
          },
          end: {
            line: 669,
            column: 21
          }
        },
        loc: {
          start: {
            line: 669,
            column: 43
          },
          end: {
            line: 754,
            column: 1
          }
        },
        line: 669
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 701,
            column: 63
          },
          end: {
            line: 701,
            column: 64
          }
        },
        loc: {
          start: {
            line: 701,
            column: 81
          },
          end: {
            line: 701,
            column: 154
          }
        },
        line: 701
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 32,
            column: 45
          }
        }, {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 32,
            column: 65
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 20
          }
        }, {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 36,
            column: 27
          }
        }, {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 45
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 20
          }
        }, {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 39,
            column: 47
          }
        }, {
          start: {
            line: 39,
            column: 51
          },
          end: {
            line: 39,
            column: 76
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: 45,
            column: 17
          },
          end: {
            line: 45,
            column: 31
          }
        }],
        line: 45
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 53
          }
        }, {
          start: {
            line: 51,
            column: 57
          },
          end: {
            line: 51,
            column: 88
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "10": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 29
          }
        }, {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 53,
            column: 79
          }
        }],
        line: 53
      },
      "11": {
        loc: {
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 54,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 47
          },
          end: {
            line: 54,
            column: 88
          }
        }, {
          start: {
            line: 54,
            column: 91
          },
          end: {
            line: 54,
            column: 95
          }
        }],
        line: 54
      },
      "12": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 59,
            column: 13
          }
        }],
        line: 55
      },
      "13": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 20
          }
        }, {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 55,
            column: 33
          }
        }, {
          start: {
            line: 55,
            column: 37
          },
          end: {
            line: 55,
            column: 45
          }
        }],
        line: 55
      },
      "14": {
        loc: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "15": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "16": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "17": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "18": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "19": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 31
          }
        }, {
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 111,
            column: 67
          }
        }],
        line: 111
      },
      "20": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "21": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 44
          }
        }, {
          start: {
            line: 124,
            column: 48
          },
          end: {
            line: 124,
            column: 59
          }
        }],
        line: 124
      },
      "22": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "23": {
        loc: {
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 178,
            column: 44
          },
          end: {
            line: 178,
            column: 57
          }
        }, {
          start: {
            line: 178,
            column: 60
          },
          end: {
            line: 178,
            column: 73
          }
        }],
        line: 178
      },
      "24": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "25": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 189,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 189,
            column: 33
          }
        }, {
          start: {
            line: 189,
            column: 37
          },
          end: {
            line: 189,
            column: 62
          }
        }],
        line: 189
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "28": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "29": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 31
          }
        }, {
          start: {
            line: 228,
            column: 35
          },
          end: {
            line: 228,
            column: 67
          }
        }],
        line: 228
      },
      "30": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "31": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 44
          }
        }, {
          start: {
            line: 240,
            column: 48
          },
          end: {
            line: 240,
            column: 59
          }
        }],
        line: 240
      },
      "32": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "33": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "34": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "35": {
        loc: {
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 277,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 277,
            column: 24
          }
        }, {
          start: {
            line: 277,
            column: 28
          },
          end: {
            line: 277,
            column: 65
          }
        }, {
          start: {
            line: 277,
            column: 69
          },
          end: {
            line: 277,
            column: 89
          }
        }],
        line: 277
      },
      "36": {
        loc: {
          start: {
            line: 279,
            column: 36
          },
          end: {
            line: 283,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 36
          },
          end: {
            line: 283,
            column: 21
          }
        }, {
          start: {
            line: 283,
            column: 25
          },
          end: {
            line: 283,
            column: 26
          }
        }],
        line: 279
      },
      "37": {
        loc: {
          start: {
            line: 280,
            column: 34
          },
          end: {
            line: 280,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 34
          },
          end: {
            line: 280,
            column: 62
          }
        }, {
          start: {
            line: 280,
            column: 66
          },
          end: {
            line: 280,
            column: 88
          }
        }, {
          start: {
            line: 280,
            column: 92
          },
          end: {
            line: 280,
            column: 93
          }
        }],
        line: 280
      },
      "38": {
        loc: {
          start: {
            line: 281,
            column: 37
          },
          end: {
            line: 281,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 37
          },
          end: {
            line: 281,
            column: 64
          }
        }, {
          start: {
            line: 281,
            column: 68
          },
          end: {
            line: 281,
            column: 69
          }
        }],
        line: 281
      },
      "39": {
        loc: {
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 302,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 302,
            column: 69
          }
        }, {
          start: {
            line: 302,
            column: 73
          },
          end: {
            line: 302,
            column: 74
          }
        }],
        line: 302
      },
      "40": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "41": {
        loc: {
          start: {
            line: 323,
            column: 35
          },
          end: {
            line: 326,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 35
          },
          end: {
            line: 323,
            column: 72
          }
        }, {
          start: {
            line: 323,
            column: 76
          },
          end: {
            line: 323,
            column: 108
          }
        }, {
          start: {
            line: 323,
            column: 112
          },
          end: {
            line: 326,
            column: 38
          }
        }],
        line: 323
      },
      "42": {
        loc: {
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "43": {
        loc: {
          start: {
            line: 352,
            column: 73
          },
          end: {
            line: 352,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 73
          },
          end: {
            line: 352,
            column: 79
          }
        }, {
          start: {
            line: 352,
            column: 83
          },
          end: {
            line: 352,
            column: 88
          }
        }],
        line: 352
      },
      "44": {
        loc: {
          start: {
            line: 355,
            column: 82
          },
          end: {
            line: 355,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 82
          },
          end: {
            line: 355,
            column: 88
          }
        }, {
          start: {
            line: 355,
            column: 92
          },
          end: {
            line: 355,
            column: 97
          }
        }],
        line: 355
      },
      "45": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "46": {
        loc: {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "47": {
        loc: {
          start: {
            line: 392,
            column: 45
          },
          end: {
            line: 392,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 45
          },
          end: {
            line: 392,
            column: 76
          }
        }, {
          start: {
            line: 392,
            column: 80
          },
          end: {
            line: 392,
            column: 81
          }
        }],
        line: 392
      },
      "48": {
        loc: {
          start: {
            line: 397,
            column: 45
          },
          end: {
            line: 397,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 45
          },
          end: {
            line: 397,
            column: 71
          }
        }, {
          start: {
            line: 397,
            column: 75
          },
          end: {
            line: 397,
            column: 76
          }
        }],
        line: 397
      },
      "49": {
        loc: {
          start: {
            line: 406,
            column: 40
          },
          end: {
            line: 406,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 40
          },
          end: {
            line: 406,
            column: 66
          }
        }, {
          start: {
            line: 406,
            column: 70
          },
          end: {
            line: 406,
            column: 71
          }
        }],
        line: 406
      },
      "50": {
        loc: {
          start: {
            line: 407,
            column: 40
          },
          end: {
            line: 407,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 40
          },
          end: {
            line: 407,
            column: 66
          }
        }, {
          start: {
            line: 407,
            column: 70
          },
          end: {
            line: 407,
            column: 71
          }
        }],
        line: 407
      },
      "51": {
        loc: {
          start: {
            line: 410,
            column: 20
          },
          end: {
            line: 481,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 20
          },
          end: {
            line: 481,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "52": {
        loc: {
          start: {
            line: 412,
            column: 47
          },
          end: {
            line: 412,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 412,
            column: 68
          },
          end: {
            line: 412,
            column: 94
          }
        }, {
          start: {
            line: 412,
            column: 97
          },
          end: {
            line: 412,
            column: 106
          }
        }],
        line: 412
      },
      "53": {
        loc: {
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 480,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 480,
            column: 25
          }
        }, {
          start: {
            line: 455,
            column: 31
          },
          end: {
            line: 480,
            column: 25
          }
        }],
        line: 413
      },
      "54": {
        loc: {
          start: {
            line: 414,
            column: 28
          },
          end: {
            line: 454,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 28
          },
          end: {
            line: 454,
            column: 29
          }
        }, {
          start: {
            line: 440,
            column: 35
          },
          end: {
            line: 454,
            column: 29
          }
        }],
        line: 414
      },
      "55": {
        loc: {
          start: {
            line: 422,
            column: 32
          },
          end: {
            line: 424,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 32
          },
          end: {
            line: 424,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "56": {
        loc: {
          start: {
            line: 456,
            column: 28
          },
          end: {
            line: 479,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 28
          },
          end: {
            line: 479,
            column: 29
          }
        }, {
          start: {
            line: 468,
            column: 35
          },
          end: {
            line: 479,
            column: 29
          }
        }],
        line: 456
      },
      "57": {
        loc: {
          start: {
            line: 492,
            column: 16
          },
          end: {
            line: 550,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 492,
            column: 16
          },
          end: {
            line: 550,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 492
      },
      "58": {
        loc: {
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 37
          }
        }, {
          start: {
            line: 492,
            column: 41
          },
          end: {
            line: 492,
            column: 73
          }
        }, {
          start: {
            line: 492,
            column: 77
          },
          end: {
            line: 492,
            column: 105
          }
        }],
        line: 492
      },
      "59": {
        loc: {
          start: {
            line: 510,
            column: 28
          },
          end: {
            line: 510,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 28
          },
          end: {
            line: 510,
            column: 49
          }
        }, {
          start: {
            line: 510,
            column: 53
          },
          end: {
            line: 510,
            column: 54
          }
        }],
        line: 510
      },
      "60": {
        loc: {
          start: {
            line: 514,
            column: 20
          },
          end: {
            line: 529,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 20
          },
          end: {
            line: 529,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "61": {
        loc: {
          start: {
            line: 527,
            column: 53
          },
          end: {
            line: 527,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 53
          },
          end: {
            line: 527,
            column: 74
          }
        }, {
          start: {
            line: 527,
            column: 78
          },
          end: {
            line: 527,
            column: 79
          }
        }],
        line: 527
      },
      "62": {
        loc: {
          start: {
            line: 532,
            column: 42
          },
          end: {
            line: 532,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 42
          },
          end: {
            line: 532,
            column: 71
          }
        }, {
          start: {
            line: 532,
            column: 75
          },
          end: {
            line: 532,
            column: 76
          }
        }],
        line: 532
      },
      "63": {
        loc: {
          start: {
            line: 551,
            column: 40
          },
          end: {
            line: 551,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 551,
            column: 78
          },
          end: {
            line: 551,
            column: 139
          }
        }, {
          start: {
            line: 551,
            column: 142
          },
          end: {
            line: 551,
            column: 143
          }
        }],
        line: 551
      },
      "64": {
        loc: {
          start: {
            line: 555,
            column: 16
          },
          end: {
            line: 557,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 16
          },
          end: {
            line: 557,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "65": {
        loc: {
          start: {
            line: 555,
            column: 20
          },
          end: {
            line: 555,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 555,
            column: 20
          },
          end: {
            line: 555,
            column: 44
          }
        }, {
          start: {
            line: 555,
            column: 48
          },
          end: {
            line: 555,
            column: 77
          }
        }],
        line: 555
      },
      "66": {
        loc: {
          start: {
            line: 556,
            column: 37
          },
          end: {
            line: 556,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 556,
            column: 78
          },
          end: {
            line: 556,
            column: 120
          }
        }, {
          start: {
            line: 556,
            column: 123
          },
          end: {
            line: 556,
            column: 148
          }
        }],
        line: 556
      },
      "67": {
        loc: {
          start: {
            line: 562,
            column: 33
          },
          end: {
            line: 562,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 562,
            column: 59
          },
          end: {
            line: 562,
            column: 92
          }
        }, {
          start: {
            line: 562,
            column: 95
          },
          end: {
            line: 562,
            column: 104
          }
        }],
        line: 562
      },
      "68": {
        loc: {
          start: {
            line: 563,
            column: 29
          },
          end: {
            line: 563,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 563,
            column: 51
          },
          end: {
            line: 563,
            column: 80
          }
        }, {
          start: {
            line: 563,
            column: 83
          },
          end: {
            line: 563,
            column: 92
          }
        }],
        line: 563
      },
      "69": {
        loc: {
          start: {
            line: 565,
            column: 28
          },
          end: {
            line: 565,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 565,
            column: 49
          },
          end: {
            line: 565,
            column: 78
          }
        }, {
          start: {
            line: 565,
            column: 81
          },
          end: {
            line: 565,
            column: 85
          }
        }],
        line: 565
      },
      "70": {
        loc: {
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 579,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 579,
            column: 17
          }
        }, {
          start: {
            line: 574,
            column: 23
          },
          end: {
            line: 579,
            column: 17
          }
        }],
        line: 572
      },
      "71": {
        loc: {
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 635,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 635,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 616
      },
      "72": {
        loc: {
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 616,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 616,
            column: 19
          }
        }, {
          start: {
            line: 616,
            column: 23
          },
          end: {
            line: 616,
            column: 37
          }
        }],
        line: 616
      },
      "73": {
        loc: {
          start: {
            line: 619,
            column: 16
          },
          end: {
            line: 630,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 619,
            column: 16
          },
          end: {
            line: 630,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 619
      },
      "74": {
        loc: {
          start: {
            line: 622,
            column: 24
          },
          end: {
            line: 626,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 24
          },
          end: {
            line: 626,
            column: 25
          }
        }, {
          start: {
            line: 624,
            column: 31
          },
          end: {
            line: 626,
            column: 25
          }
        }],
        line: 622
      },
      "75": {
        loc: {
          start: {
            line: 622,
            column: 28
          },
          end: {
            line: 622,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 622,
            column: 28
          },
          end: {
            line: 622,
            column: 48
          }
        }, {
          start: {
            line: 622,
            column: 52
          },
          end: {
            line: 622,
            column: 71
          }
        }],
        line: 622
      },
      "76": {
        loc: {
          start: {
            line: 640,
            column: 69
          },
          end: {
            line: 640,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 640,
            column: 69
          },
          end: {
            line: 640,
            column: 75
          }
        }, {
          start: {
            line: 640,
            column: 79
          },
          end: {
            line: 640,
            column: 84
          }
        }],
        line: 640
      },
      "77": {
        loc: {
          start: {
            line: 643,
            column: 70
          },
          end: {
            line: 643,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 643,
            column: 70
          },
          end: {
            line: 643,
            column: 76
          }
        }, {
          start: {
            line: 643,
            column: 80
          },
          end: {
            line: 643,
            column: 85
          }
        }],
        line: 643
      },
      "78": {
        loc: {
          start: {
            line: 645,
            column: 78
          },
          end: {
            line: 645,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 645,
            column: 78
          },
          end: {
            line: 645,
            column: 84
          }
        }, {
          start: {
            line: 645,
            column: 88
          },
          end: {
            line: 645,
            column: 93
          }
        }],
        line: 645
      },
      "79": {
        loc: {
          start: {
            line: 663,
            column: 19
          },
          end: {
            line: 663,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 663,
            column: 44
          },
          end: {
            line: 663,
            column: 57
          }
        }, {
          start: {
            line: 663,
            column: 60
          },
          end: {
            line: 663,
            column: 73
          }
        }],
        line: 663
      },
      "80": {
        loc: {
          start: {
            line: 674,
            column: 8
          },
          end: {
            line: 680,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 674,
            column: 8
          },
          end: {
            line: 680,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 674
      },
      "81": {
        loc: {
          start: {
            line: 674,
            column: 12
          },
          end: {
            line: 674,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 674,
            column: 12
          },
          end: {
            line: 674,
            column: 35
          }
        }, {
          start: {
            line: 674,
            column: 39
          },
          end: {
            line: 674,
            column: 64
          }
        }],
        line: 674
      },
      "82": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 688,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 688,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "83": {
        loc: {
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 682,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 682,
            column: 31
          }
        }, {
          start: {
            line: 682,
            column: 35
          },
          end: {
            line: 682,
            column: 67
          }
        }],
        line: 682
      },
      "84": {
        loc: {
          start: {
            line: 692,
            column: 8
          },
          end: {
            line: 698,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 8
          },
          end: {
            line: 698,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "85": {
        loc: {
          start: {
            line: 708,
            column: 69
          },
          end: {
            line: 708,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 708,
            column: 69
          },
          end: {
            line: 708,
            column: 97
          }
        }, {
          start: {
            line: 708,
            column: 101
          },
          end: {
            line: 708,
            column: 106
          }
        }],
        line: 708
      },
      "86": {
        loc: {
          start: {
            line: 711,
            column: 70
          },
          end: {
            line: 711,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 711,
            column: 70
          },
          end: {
            line: 711,
            column: 98
          }
        }, {
          start: {
            line: 711,
            column: 102
          },
          end: {
            line: 711,
            column: 107
          }
        }],
        line: 711
      },
      "87": {
        loc: {
          start: {
            line: 714,
            column: 80
          },
          end: {
            line: 714,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 714,
            column: 80
          },
          end: {
            line: 714,
            column: 108
          }
        }, {
          start: {
            line: 714,
            column: 112
          },
          end: {
            line: 714,
            column: 117
          }
        }],
        line: 714
      },
      "88": {
        loc: {
          start: {
            line: 717,
            column: 78
          },
          end: {
            line: 717,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 717,
            column: 78
          },
          end: {
            line: 717,
            column: 106
          }
        }, {
          start: {
            line: 717,
            column: 110
          },
          end: {
            line: 717,
            column: 115
          }
        }],
        line: 717
      },
      "89": {
        loc: {
          start: {
            line: 728,
            column: 32
          },
          end: {
            line: 728,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 32
          },
          end: {
            line: 728,
            column: 67
          }
        }, {
          start: {
            line: 728,
            column: 71
          },
          end: {
            line: 728,
            column: 80
          }
        }],
        line: 728
      },
      "90": {
        loc: {
          start: {
            line: 737,
            column: 8
          },
          end: {
            line: 745,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 737,
            column: 8
          },
          end: {
            line: 745,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 737
      },
      "91": {
        loc: {
          start: {
            line: 737,
            column: 12
          },
          end: {
            line: 737,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 737,
            column: 12
          },
          end: {
            line: 737,
            column: 23
          }
        }, {
          start: {
            line: 737,
            column: 27
          },
          end: {
            line: 737,
            column: 73
          }
        }],
        line: 737
      },
      "92": {
        loc: {
          start: {
            line: 748,
            column: 21
          },
          end: {
            line: 748,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 748,
            column: 21
          },
          end: {
            line: 748,
            column: 32
          }
        }, {
          start: {
            line: 748,
            column: 36
          },
          end: {
            line: 748,
            column: 60
          }
        }],
        line: 748
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { cacheService } from '@/lib/cache';\nimport { AuditService } from '@/services/auditService';\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'sales:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Get user details to check role and shop access\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                shopId: true,\n                role: {\n                    select: { name: true }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(resolvedParams.id);\n\n        // Build where clause with shop filtering\n        let whereClause: any = { id: invoiceId };\n        \n        // For shop staff, restrict to their assigned shop only\n        if (user.role?.name === 'Shop Staff' && user.shopId) {\n            whereClause.shopId = user.shopId;\n        }\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: whereClause,\n            include: {\n                customer: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true,\n                        location: true,\n                        contact_person: true,\n                        phone: true,\n                        email: true,\n                        address_line1: true,\n                        address_line2: true,\n                        city: true,\n                        state: true,\n                        postal_code: true,\n                        country: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: {\n                    where: {\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    include: {\n                        receipt: true\n                    }\n                }\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error fetching invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const hasSalesEdit = await validateTokenPermission(request, 'sales:edit');\n        const hasInvoiceManage = await validateTokenPermission(request, 'invoice:manage');\n        if (!hasSalesEdit.isValid && !hasInvoiceManage.isValid) {\n            return NextResponse.json({ \n                error: \"Permission denied. Requires 'sales:edit' or 'invoice:manage'.\" \n            }, { status: 403 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Get user details to check role and shop access\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                shopId: true,\n                role: {\n                    select: { name: true }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(resolvedParams.id);\n        \n        // First, check if the invoice exists and user has access to it\n        let whereClause: any = { id: invoiceId };\n        if (user.role?.name === 'Shop Staff' && user.shopId) {\n            whereClause.shopId = user.shopId;\n        }\n        \n        const existingInvoice = await prisma.invoice.findUnique({\n            where: whereClause,\n            select: { id: true, shopId: true, customerId: true, invoiceNumber: true }\n        });\n        \n        if (!existingInvoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found or access denied' },\n                { status: 404 }\n            );\n        }\n        const requestData = await request.json();\n        console.log('Invoice update request data:', { invoiceId, ...requestData });\n        const { sendSms, ...invoiceData } = requestData;\n\n        // Credit limit validation for wholesale customers\n        if (invoiceData.customerId) {\n            const customer = await prisma.customer.findUnique({\n                where: { id: parseInt(invoiceData.customerId.toString()) },\n                select: { \n                    customerType: true, \n                    creditLimit: true,\n                    name: true\n                }\n            });\n\n            if (customer && customer.customerType === 'wholesale' && customer.creditLimit) {\n                // Calculate total invoice amount from the updated items\n                const totalAmount = invoiceData.items?.reduce((sum: number, item: any) => {\n                    const price = parseFloat(item.customPrice) || parseFloat(item.price) || 0;\n                    const quantity = parseInt(item.quantity, 10) || 0;\n                    return sum + (price * quantity);\n                }, 0) || 0;\n\n                // Get customer's current outstanding balance (excluding the current invoice being updated)\n                const outstandingInvoices = await prisma.invoice.aggregate({\n                    where: {\n                        customerId: parseInt(invoiceData.customerId.toString()),\n                        status: { in: ['pending', 'overdue'] },\n                        id: { not: invoiceId } // Exclude the current invoice being updated\n                    },\n                    _sum: { total: true }\n                });\n\n                const currentBalance = outstandingInvoices._sum.total || 0;\n                const newTotalBalance = currentBalance + totalAmount;\n\n                if (newTotalBalance > customer.creditLimit) {\n                    return NextResponse.json(\n                        {\n                            success: false,\n                            message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Updated invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,\n                            error: 'Credit limit exceeded',\n                            details: {\n                                currentBalance,\n                                invoiceAmount: totalAmount,\n                                creditLimit: customer.creditLimit,\n                                exceedAmount: newTotalBalance - customer.creditLimit\n                            }\n                        },\n                        { status: 400 }\n                    );\n                }\n            }\n        }\n\n        // Check if this is only a status update to \"Paid\"\n        // More specific check: make sure it only has the status field and it's being changed to 'Paid'\n        const isOnlyStatusUpdate =\n            Object.keys(invoiceData).length === 1 &&\n            invoiceData.status !== undefined &&\n            ['Paid', 'Pending'].includes(invoiceData.status);\n\n        // If it's only updating status, handle it without affecting inventory\n        if (isOnlyStatusUpdate) {\n            console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);\n            const updatedInvoice = await prisma.invoice.update({\n                where: { id: invoiceId },\n                data: { status: invoiceData.status },\n                include: {\n                    customer: true,\n                    shop: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    },\n                    payments: true\n                }\n            });\n\n            // Invalidate caches\n            const shopId = updatedInvoice.shopId;\n            const invalidationPromises = [\n                cacheService.invalidateInvoices(),\n                cacheService.invalidatePattern(`invoices:*:shop:${shopId || 'all'}`),\n                cacheService.invalidatePattern('invoices:all:*'),\n                cacheService.invalidatePattern('dashboard:*'),\n                cacheService.invalidatePattern(`dashboard:optimized:shop:${shopId || 'all'}`),\n                cacheService.invalidatePattern('dashboard:summary'),\n                cacheService.invalidatePattern('dashboard:sales'),\n                cacheService.invalidatePattern('dashboard:shops'),\n            ];\n            await Promise.all(invalidationPromises);\n\n            return NextResponse.json(updatedInvoice);\n        }\n\n        // Ensure invoiceData.items is an array, default to empty if not provided or not an array\n        if (!Array.isArray(invoiceData.items)) {\n            console.log('invoiceData.items was not an array, defaulting to [] for update.');\n            invoiceData.items = [];\n        }\n\n        // Inventory update events are now handled in the service layer if needed\n\n        // Prepare update data outside transaction scope\n        let updateData: any = {};\n\n        // Update invoice with transaction to handle items\n        const updatedInvoice = await prisma.$transaction(\n            async (tx) => {\n                try {\n                    const existingInvoice = await tx.invoice.findUnique({\n                        where: { id: invoiceId },\n                        include: {\n                            items: true // Keep for inventory adjustment if needed, though items will be replaced\n                        }\n                    });\n\n                    if (!existingInvoice) {\n                        throw new Error('Invoice not found');\n                    }\n\n                    // --- Inventory Adjustment Logic (existing) --- \n                    // This logic might need review if items are fully replaced, \n                    // as it compares old vs new item quantities. \n                    // For profit, we are deleting and re-creating items.\n                    const oldItemsMap = new Map();\n                    const newItemsMap = new Map();\n\n                    for (const item of existingInvoice.items) {\n                        const existingQuantity = oldItemsMap.get(item.productId) || 0;\n                        oldItemsMap.set(item.productId, existingQuantity + item.quantity);\n                    }\n\n                    for (const item of invoiceData.items) {\n                        const productId = parseInt(item.productId.toString());\n                        const existingQuantity = newItemsMap.get(productId) || 0;\n                        newItemsMap.set(productId, existingQuantity + item.quantity);\n                    }\n\n                    const allProductIds = new Set([\n                        ...Array.from(oldItemsMap.keys()),\n                        ...Array.from(newItemsMap.keys())\n                    ]);\n\n                    console.log('Invoice update - Inventory changes (based on diff):');\n                    for (const productId of Array.from(allProductIds)) {\n                        const oldQuantity = oldItemsMap.get(productId) || 0;\n                        const newQuantity = newItemsMap.get(productId) || 0;\n                        const quantityChange = newQuantity - oldQuantity;\n                        console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);\n                        if (quantityChange !== 0) {\n                            // Ensure affectedShopId is a string if invoiceData.shopId is a string\n                            const affectedShopId: string | undefined = invoiceData.shopId ? String(invoiceData.shopId) : undefined;\n\n                            if (quantityChange > 0) { // Deduct (more items sold or added)\n                                if (affectedShopId) {\n                                    const availableInventory = await tx.inventoryItem.findMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId }\n                                    });\n                                    const totalAvailable = availableInventory.reduce((sum, item) => sum + item.quantity, 0);\n                                    if (totalAvailable < quantityChange) {\n                                        throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);\n                                    }\n                                    // This should ideally be a more robust way to pick which inventory item to decrement\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId, quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                }\n                            } else { // Add back (fewer items sold or items removed)\n                                if (affectedShopId) {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()) },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    // --- End Inventory Adjustment Logic ---\n\n                    // Delete old invoice items before adding new ones for profit recalc\n                    await tx.invoiceItem.deleteMany({ where: { invoiceId: invoiceId } });\n\n                    let newCalculatedTotalInvoiceAmount = 0;\n                    let newTotalInvoiceProfit = 0;\n\n                    if (invoiceData.items && Array.isArray(invoiceData.items) && invoiceData.items.length > 0) {\n                        const productIdsForNewItems = invoiceData.items.map((item: any) => parseInt(item.productId.toString()));\n                        \n                        // Get shop-specific costs for profit calculation instead of global weighted average\n                        const inventoryItems = await tx.inventoryItem.findMany({\n                            where: { \n                                productId: { in: productIdsForNewItems },\n                                shopId: invoiceData.shopId\n                            },\n                            select: { productId: true, shopSpecificCost: true }\n                        });\n\n                        // Create a map of productId to shop-specific cost\n                        const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                        \n                        // For products not found in inventory, fallback to global weighted average\n                        const missingProductIds = productIdsForNewItems.filter((id: number) => !productCostMap.has(id));\n                        if (missingProductIds.length > 0) {\n                            const fallbackProducts = await tx.product.findMany({\n                                where: { id: { in: missingProductIds } },\n                                select: { id: true, weightedAverageCost: true }\n                            });\n                            fallbackProducts.forEach(p => {\n                                productCostMap.set(p.id, p.weightedAverageCost || 0);\n                            });\n                        }\n\n                        for (const item of invoiceData.items) {\n                            const productId = parseInt(item.productId.toString());\n                            const costPrice = productCostMap.get(productId) || 0;\n                            const itemSellingTotal = item.quantity * item.price;\n                            const totalItemCost = costPrice * item.quantity;\n                            const itemProfit = itemSellingTotal - totalItemCost;\n\n                            await tx.invoiceItem.create({\n                                data: {\n                                    invoiceId: invoiceId,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                }\n                            });\n                            newCalculatedTotalInvoiceAmount += itemSellingTotal;\n                            newTotalInvoiceProfit += itemProfit;\n                        }\n                    }\n\n                    const newProfitMargin = newCalculatedTotalInvoiceAmount > 0 ? (newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount) * 100 : 0;\n\n                    // Apply discount if provided\n                    let subtotal = newCalculatedTotalInvoiceAmount;\n                    let discountAmount = 0;\n                    if (invoiceData.discountType && invoiceData.discountValue > 0) {\n                        discountAmount = invoiceData.discountType === 'percent'\n                            ? (subtotal * invoiceData.discountValue) / 100\n                            : invoiceData.discountValue;\n                    }\n                    let netTotal = subtotal - discountAmount;\n\n                    updateData = {\n                        status: invoiceData.status,\n                        paymentMethod: invoiceData.paymentMethod,\n                        invoiceDate: invoiceData.invoiceDate ? new Date(invoiceData.invoiceDate) : undefined,\n                        dueDate: invoiceData.dueDate ? new Date(invoiceData.dueDate) : undefined,\n                        notes: invoiceData.notes,\n                        shopId: invoiceData.shopId ? invoiceData.shopId.toString() : null, // Ensure shopId is string or null\n                        total: netTotal, // Updated total\n                        discountType: invoiceData.discountType,\n                        discountValue: invoiceData.discountValue,\n                        totalProfit: newTotalInvoiceProfit,   // Updated profit\n                        profitMargin: newProfitMargin         // Updated profit margin\n                    };\n\n                    if (invoiceData.customerId) {\n                        updateData.customerId = parseInt(invoiceData.customerId.toString());\n                    } else {\n                        // If customerId is explicitly null or undefined, disconnect it if your schema allows\n                        // updateData.customer = { disconnect: true }; \n                        // Or ensure it's set to null if the field is optional and you want to clear it.\n                        // For now, we assume if not provided, it's not changed or handled by frontend state.\n                    }\n\n                    console.log('Updating invoice details with profit:', { invoiceId, updateData });\n\n                    const finalUpdatedInvoice = await tx.invoice.update({\n                        where: { id: invoiceId },\n                        data: updateData,\n                        include: {\n                            customer: true,\n                            shop: true,\n                            items: {\n                                include: {\n                                    product: true\n                                }\n                            },\n                            payments: true\n                        }\n                    });\n\n                    // Handle cash payment method\n                    // Removed automatic payment creation/update for cash invoices\n                    // Users will manually record payments when they actually receive them\n\n                    return finalUpdatedInvoice;\n                } catch (txError) {\n                    console.error('Transaction error:', txError);\n                    throw txError;\n                }\n            },\n            { timeout: 30000 }\n        );\n\n        // Real-time updates now handled by polling system\n        // if (inventoryUpdatesForEvent.length > 0) { // This line is removed\n        //     console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);\n        // }\n\n        // Send SMS notification if requested\n        if (sendSms && updatedInvoice) {\n            try {\n                await smsService.init();\n                if (smsService.isConfigured()) {\n                    // Send SMS notification asynchronously\n                    smsService.sendInvoiceNotification(updatedInvoice.id)\n                        .then((result: any) => {\n                            if (result.status >= 200 && result.status < 300) {\n                                console.log('SMS update notification sent successfully');\n                            } else {\n                                console.warn('Failed to send SMS update notification:', result.message);\n                            }\n                        })\n                        .catch((error: any) => {\n                            console.error('Error sending SMS update notification:', error);\n                        });\n                }\n            } catch (smsError) {\n                // Log SMS error but don't fail the request\n                console.error('SMS update notification error:', smsError);\n            }\n        }\n\n        // Invalidate related caches after successful update\n        const shopId = updatedInvoice.shopId;\n        const invalidationPromises = [\n            cacheService.invalidateInvoices(),\n            cacheService.invalidatePattern(`invoices:*:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            cacheService.invalidatePattern('inventory:*'),\n            cacheService.invalidatePattern(`inventory:*:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:*'),\n            cacheService.invalidatePattern(`dashboard:optimized:shop:${shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary'),\n            cacheService.invalidatePattern('dashboard:sales'),\n            cacheService.invalidatePattern('dashboard:shops'),\n        ];\n        await Promise.all(invalidationPromises);\n\n        // TODO: Add audit logging for invoice updates\n        // Note: Audit logging temporarily disabled due to type conflicts\n\n        return NextResponse.json({\n            success: true,\n            message: 'Invoice updated successfully',\n            data: updatedInvoice\n        });\n    } catch (error) {\n        console.error('Error updating invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Validate token and permissions\n        const hasSalesDelete = await validateTokenPermission(request, 'sales:delete');\n        const hasInvoiceManage = await validateTokenPermission(request, 'invoice:manage');\n\n        if (!hasSalesDelete.isValid && !hasInvoiceManage.isValid) {\n            return NextResponse.json({ \n                error: \"Permission denied. Requires 'sales:delete' or 'invoice:manage'.\" \n            }, { status: 403 });\n        }\n\n        const resolvedParams = await params;\n        if (!resolvedParams?.id || isNaN(Number(resolvedParams.id))) {\n            return NextResponse.json({ error: 'Invalid invoice ID' }, { status: 400 });\n        }\n        const invoiceId = Number(resolvedParams.id);\n\n        // Get userId\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User not found' }, { status: 401 });\n        }\n\n        // Inventory update events are now handled in the service layer if needed\n\n        // Delegate deletion logic to the service layer to keep this handler lean\n        const { deleteInvoice } = await import('@/services/invoiceService');\n        const deletedInvoiceResult = await deleteInvoice(invoiceId, Number(userId));\n        \n        // Real-time updates now handled by polling system\n        console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);\n\n        // Smart cache invalidation - only invalidate what's necessary\n        const invalidationPromises = [\n            // Invalidate invoice-specific caches\n            cacheService.invalidatePattern(`invoices:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            \n            // Invalidate inventory caches for affected shop\n            cacheService.invalidatePattern(`inventory:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('inventory:all:*'),\n            \n            // Use optimized dashboard cache invalidation\n            cacheService.invalidatePattern(`dashboard:optimized:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:optimized:*:all'),\n            \n            // Invalidate legacy dashboard caches\n            cacheService.invalidatePattern(`dashboard:summary:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary:*:all')\n        ];\n\n        await Promise.allSettled(invalidationPromises);\n        \n        // Trigger materialized view refresh in background\n        // Instead of issuing an internal HTTP request (which doubles latency and\n        // consumes another lambda invocation), we rely on the cacheService\n        // invalidation performed above. The optimized dashboard route will\n        // regenerate fresh data on the next request.\n        \n        return NextResponse.json({\n            success: true,\n            message: `Invoice ${deletedInvoiceResult?.invoiceNumber || invoiceId} deleted successfully`,\n            data: { id: deletedInvoiceResult?.id }\n        });\n\n    } catch (error) {\n        console.error('Error deleting invoice:', error);\n        const err = error as Error;\n\n        // Check for foreign key constraint violation with receipts\n        if (err.message && err.message.includes('Receipt_paymentId_fkey')) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete invoice with associated receipts. Please delete the receipts first.',\n                    error: err.message\n                },\n                { status: 400 }\n            );\n        }\n\n        return NextResponse.json(\n            { success: false, message: err.message || 'Error deleting invoice', error: err.stack },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "userId", "getUserIdFromToken", "user", "prisma", "findUnique", "where", "id", "select", "shopId", "role", "name", "resolvedParams", "isNaN", "Number", "invoiceId", "whereClause", "invoice", "include", "customer", "shop", "location", "contact_person", "phone", "email", "address_line1", "address_line2", "city", "state", "postal_code", "country", "items", "product", "payments", "receipt", "isNot", "console", "success", "Error", "String", "hasSalesEdit", "hasInvoiceManage", "existingInvoice", "customerId", "invoiceNumber", "requestData", "log", "sendSms", "invoiceData", "parseInt", "toString", "customerType", "creditLimit", "totalAmount", "reduce", "sum", "item", "price", "parseFloat", "customPrice", "quantity", "outstandingInvoices", "aggregate", "in", "not", "_sum", "total", "currentBalance", "newTotalBalance", "toLocaleString", "details", "invoiceAmount", "exceedAmount", "isOnlyStatusUpdate", "Object", "keys", "length", "undefined", "includes", "updatedInvoice", "update", "data", "invalidationPromises", "cacheService", "invalidateInvoices", "invalidatePattern", "Promise", "all", "Array", "isArray", "updateData", "$transaction", "tx", "oldItemsMap", "Map", "newItemsMap", "existingQuantity", "get", "productId", "set", "allProductIds", "Set", "from", "oldQuantity", "newQuantity", "quantityChange", "affectedShopId", "availableInventory", "inventoryItem", "findMany", "totalAvailable", "updateMany", "gte", "decrement", "increment", "Math", "abs", "invoiceItem", "deleteMany", "newCalculatedTotalInvoiceAmount", "newTotalInvoiceProfit", "productIdsForNewItems", "map", "inventoryItems", "shopSpecificCost", "productCostMap", "missingProductIds", "filter", "has", "fallbackProducts", "weightedAverageCost", "forEach", "p", "costPrice", "itemSellingTotal", "totalItemCost", "itemProfit", "create", "profit", "newProfitMargin", "subtotal", "discountAmount", "discountType", "discountValue", "netTotal", "paymentMethod", "invoiceDate", "Date", "dueDate", "notes", "totalProfit", "profitMargin", "finalUpdatedInvoice", "txError", "timeout", "smsService", "init", "isConfigured", "sendInvoiceNotification", "then", "result", "warn", "catch", "smsError", "hasSalesDelete", "deleteInvoice", "deletedInvoiceResult", "allSettled", "err", "stack"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04efb6f5b02071887df8f5641bedb07bf0a1bcc6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7f8epg9vf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7f8epg9vf();
cov_7f8epg9vf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[0]++;
  cov_7f8epg9vf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_7f8epg9vf().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[1]++;
    cov_7f8epg9vf().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[2]++;
    cov_7f8epg9vf().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[3]++;
    cov_7f8epg9vf().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_7f8epg9vf().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_7f8epg9vf().s[8]++, require("../../../../lib/prisma"));
const _smsService =
/* istanbul ignore next */
(cov_7f8epg9vf().s[9]++, require("../../../../services/smsService"));
const _auth =
/* istanbul ignore next */
(cov_7f8epg9vf().s[10]++, require("../../../../lib/auth"));
const _cache =
/* istanbul ignore next */
(cov_7f8epg9vf().s[11]++, require("../../../../lib/cache"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[4]++;
  cov_7f8epg9vf().s[12]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_7f8epg9vf().b[0][0]++;
    cov_7f8epg9vf().s[13]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_7f8epg9vf().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_7f8epg9vf().s[14]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_7f8epg9vf().s[15]++, new WeakMap());
  /* istanbul ignore next */
  cov_7f8epg9vf().s[16]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[5]++;
    cov_7f8epg9vf().s[17]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[6]++;
  cov_7f8epg9vf().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_7f8epg9vf().b[2][0]++;
    cov_7f8epg9vf().s[19]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_7f8epg9vf().b[2][1]++;
  }
  cov_7f8epg9vf().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_7f8epg9vf().b[4][0]++;
    cov_7f8epg9vf().s[21]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_7f8epg9vf().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_7f8epg9vf().s[22]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_7f8epg9vf().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_7f8epg9vf().b[6][0]++;
    cov_7f8epg9vf().s[24]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_7f8epg9vf().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_7f8epg9vf().s[25]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_7f8epg9vf().s[26]++,
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_7f8epg9vf().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_7f8epg9vf().s[27]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[29]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[11][1]++, null));
      /* istanbul ignore next */
      cov_7f8epg9vf().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_7f8epg9vf().b[12][0]++;
        cov_7f8epg9vf().s[31]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_7f8epg9vf().b[12][1]++;
        cov_7f8epg9vf().s[32]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_7f8epg9vf().s[33]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_7f8epg9vf().s[34]++;
  if (cache) {
    /* istanbul ignore next */
    cov_7f8epg9vf().b[14][0]++;
    cov_7f8epg9vf().s[35]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_7f8epg9vf().b[14][1]++;
  }
  cov_7f8epg9vf().s[36]++;
  return newObj;
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[7]++;
  cov_7f8epg9vf().s[37]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[38]++, await (0, _auth.validateTokenPermission)(request, "sales:view"));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[39]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[15][0]++;
      cov_7f8epg9vf().s[40]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[15][1]++;
    }
    // Get user ID from token
    const userId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[41]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[42]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[16][0]++;
      cov_7f8epg9vf().s[43]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[16][1]++;
    }
    // Get user details to check role and shop access
    const user =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[44]++, await _prisma.prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        shopId: true,
        role: {
          select: {
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[45]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[17][0]++;
      cov_7f8epg9vf().s[46]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[17][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[47]++, await params);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[19][0]++, !resolvedParams?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[19][1]++, isNaN(Number(resolvedParams.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[18][0]++;
      cov_7f8epg9vf().s[49]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[18][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[50]++, Number(resolvedParams.id));
    // Build where clause with shop filtering
    let whereClause =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[51]++, {
      id: invoiceId
    });
    // For shop staff, restrict to their assigned shop only
    /* istanbul ignore next */
    cov_7f8epg9vf().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[21][0]++, user.role?.name === "Shop Staff") &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[21][1]++, user.shopId)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[20][0]++;
      cov_7f8epg9vf().s[53]++;
      whereClause.shopId = user.shopId;
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[20][1]++;
    }
    // Fetch invoice with all related data
    const invoice =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[54]++, await _prisma.prisma.invoice.findUnique({
      where: whereClause,
      include: {
        customer: true,
        shop: {
          select: {
            id: true,
            name: true,
            location: true,
            contact_person: true,
            phone: true,
            email: true,
            address_line1: true,
            address_line2: true,
            city: true,
            state: true,
            postal_code: true,
            country: true
          }
        },
        items: {
          include: {
            product: true
          }
        },
        payments: {
          where: {
            receipt: {
              isNot: null
            }
          },
          include: {
            receipt: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[55]++;
    if (!invoice) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[22][0]++;
      cov_7f8epg9vf().s[56]++;
      return _server.NextResponse.json({
        error: "Invoice not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[22][1]++;
    }
    cov_7f8epg9vf().s[57]++;
    return _server.NextResponse.json(invoice);
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[58]++;
    console.error("Error fetching invoice:", error);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[59]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching invoice",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[23][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[8]++;
  cov_7f8epg9vf().s[60]++;
  try {
    // Validate token and permissions
    const hasSalesEdit =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[61]++, await (0, _auth.validateTokenPermission)(request, "sales:edit"));
    const hasInvoiceManage =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[62]++, await (0, _auth.validateTokenPermission)(request, "invoice:manage"));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[25][0]++, !hasSalesEdit.isValid) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[25][1]++, !hasInvoiceManage.isValid)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[24][0]++;
      cov_7f8epg9vf().s[64]++;
      return _server.NextResponse.json({
        error: "Permission denied. Requires 'sales:edit' or 'invoice:manage'."
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[24][1]++;
    }
    // Get user ID from token
    const userId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[65]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[66]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[26][0]++;
      cov_7f8epg9vf().s[67]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[26][1]++;
    }
    // Get user details to check role and shop access
    const user =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[68]++, await _prisma.prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        shopId: true,
        role: {
          select: {
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[69]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[27][0]++;
      cov_7f8epg9vf().s[70]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[27][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[71]++, await params);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[29][0]++, !resolvedParams?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[29][1]++, isNaN(Number(resolvedParams.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[28][0]++;
      cov_7f8epg9vf().s[73]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[28][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[74]++, Number(resolvedParams.id));
    // First, check if the invoice exists and user has access to it
    let whereClause =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[75]++, {
      id: invoiceId
    });
    /* istanbul ignore next */
    cov_7f8epg9vf().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[31][0]++, user.role?.name === "Shop Staff") &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[31][1]++, user.shopId)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[30][0]++;
      cov_7f8epg9vf().s[77]++;
      whereClause.shopId = user.shopId;
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[30][1]++;
    }
    const existingInvoice =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[78]++, await _prisma.prisma.invoice.findUnique({
      where: whereClause,
      select: {
        id: true,
        shopId: true,
        customerId: true,
        invoiceNumber: true
      }
    }));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[79]++;
    if (!existingInvoice) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[32][0]++;
      cov_7f8epg9vf().s[80]++;
      return _server.NextResponse.json({
        error: "Invoice not found or access denied"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[32][1]++;
    }
    const requestData =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[81]++, await request.json());
    /* istanbul ignore next */
    cov_7f8epg9vf().s[82]++;
    console.log("Invoice update request data:", {
      invoiceId,
      ...requestData
    });
    const {
      sendSms,
      ...invoiceData
    } =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[83]++, requestData);
    // Credit limit validation for wholesale customers
    /* istanbul ignore next */
    cov_7f8epg9vf().s[84]++;
    if (invoiceData.customerId) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[33][0]++;
      const customer =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[85]++, await _prisma.prisma.customer.findUnique({
        where: {
          id: parseInt(invoiceData.customerId.toString())
        },
        select: {
          customerType: true,
          creditLimit: true,
          name: true
        }
      }));
      /* istanbul ignore next */
      cov_7f8epg9vf().s[86]++;
      if (
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[35][0]++, customer) &&
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[35][1]++, customer.customerType === "wholesale") &&
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[35][2]++, customer.creditLimit)) {
        /* istanbul ignore next */
        cov_7f8epg9vf().b[34][0]++;
        // Calculate total invoice amount from the updated items
        const totalAmount =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[87]++,
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[36][0]++, invoiceData.items?.reduce((sum, item) => {
          /* istanbul ignore next */
          cov_7f8epg9vf().f[9]++;
          const price =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[88]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[37][0]++, parseFloat(item.customPrice)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[37][1]++, parseFloat(item.price)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[37][2]++, 0));
          const quantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[89]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[38][0]++, parseInt(item.quantity, 10)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[38][1]++, 0));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[90]++;
          return sum + price * quantity;
        }, 0)) ||
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[36][1]++, 0));
        // Get customer's current outstanding balance (excluding the current invoice being updated)
        const outstandingInvoices =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[91]++, await _prisma.prisma.invoice.aggregate({
          where: {
            customerId: parseInt(invoiceData.customerId.toString()),
            status: {
              in: ["pending", "overdue"]
            },
            id: {
              not: invoiceId
            } // Exclude the current invoice being updated
          },
          _sum: {
            total: true
          }
        }));
        const currentBalance =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[92]++,
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[39][0]++, outstandingInvoices._sum.total) ||
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[39][1]++, 0));
        const newTotalBalance =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[93]++, currentBalance + totalAmount);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[94]++;
        if (newTotalBalance > customer.creditLimit) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[40][0]++;
          cov_7f8epg9vf().s[95]++;
          return _server.NextResponse.json({
            success: false,
            message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Updated invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,
            error: "Credit limit exceeded",
            details: {
              currentBalance,
              invoiceAmount: totalAmount,
              creditLimit: customer.creditLimit,
              exceedAmount: newTotalBalance - customer.creditLimit
            }
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[40][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_7f8epg9vf().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[33][1]++;
    }
    // Check if this is only a status update to "Paid"
    // More specific check: make sure it only has the status field and it's being changed to 'Paid'
    const isOnlyStatusUpdate =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[96]++,
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[41][0]++, Object.keys(invoiceData).length === 1) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[41][1]++, invoiceData.status !== undefined) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[41][2]++, ["Paid", "Pending"].includes(invoiceData.status)));
    // If it's only updating status, handle it without affecting inventory
    /* istanbul ignore next */
    cov_7f8epg9vf().s[97]++;
    if (isOnlyStatusUpdate) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[42][0]++;
      cov_7f8epg9vf().s[98]++;
      console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);
      const updatedInvoice =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[99]++, await _prisma.prisma.invoice.update({
        where: {
          id: invoiceId
        },
        data: {
          status: invoiceData.status
        },
        include: {
          customer: true,
          shop: true,
          items: {
            include: {
              product: true
            }
          },
          payments: true
        }
      }));
      // Invalidate caches
      const shopId =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[100]++, updatedInvoice.shopId);
      const invalidationPromises =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[101]++, [_cache.cacheService.invalidateInvoices(), _cache.cacheService.invalidatePattern(`invoices:*:shop:${
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[43][0]++, shopId) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[43][1]++, "all")}`), _cache.cacheService.invalidatePattern("invoices:all:*"), _cache.cacheService.invalidatePattern("dashboard:*"), _cache.cacheService.invalidatePattern(`dashboard:optimized:shop:${
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[44][0]++, shopId) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[44][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:summary"), _cache.cacheService.invalidatePattern("dashboard:sales"), _cache.cacheService.invalidatePattern("dashboard:shops")]);
      /* istanbul ignore next */
      cov_7f8epg9vf().s[102]++;
      await Promise.all(invalidationPromises);
      /* istanbul ignore next */
      cov_7f8epg9vf().s[103]++;
      return _server.NextResponse.json(updatedInvoice);
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[42][1]++;
    }
    // Ensure invoiceData.items is an array, default to empty if not provided or not an array
    cov_7f8epg9vf().s[104]++;
    if (!Array.isArray(invoiceData.items)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[45][0]++;
      cov_7f8epg9vf().s[105]++;
      console.log("invoiceData.items was not an array, defaulting to [] for update.");
      /* istanbul ignore next */
      cov_7f8epg9vf().s[106]++;
      invoiceData.items = [];
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[45][1]++;
    }
    // Inventory update events are now handled in the service layer if needed
    // Prepare update data outside transaction scope
    let updateData =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[107]++, {});
    // Update invoice with transaction to handle items
    const updatedInvoice =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[108]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7f8epg9vf().f[10]++;
      cov_7f8epg9vf().s[109]++;
      try {
        const existingInvoice =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[110]++, await tx.invoice.findUnique({
          where: {
            id: invoiceId
          },
          include: {
            items: true // Keep for inventory adjustment if needed, though items will be replaced
          }
        }));
        /* istanbul ignore next */
        cov_7f8epg9vf().s[111]++;
        if (!existingInvoice) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[46][0]++;
          cov_7f8epg9vf().s[112]++;
          throw new Error("Invoice not found");
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[46][1]++;
        }
        // --- Inventory Adjustment Logic (existing) --- 
        // This logic might need review if items are fully replaced, 
        // as it compares old vs new item quantities. 
        // For profit, we are deleting and re-creating items.
        const oldItemsMap =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[113]++, new Map());
        const newItemsMap =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[114]++, new Map());
        /* istanbul ignore next */
        cov_7f8epg9vf().s[115]++;
        for (const item of existingInvoice.items) {
          const existingQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[116]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[47][0]++, oldItemsMap.get(item.productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[47][1]++, 0));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[117]++;
          oldItemsMap.set(item.productId, existingQuantity + item.quantity);
        }
        /* istanbul ignore next */
        cov_7f8epg9vf().s[118]++;
        for (const item of invoiceData.items) {
          const productId =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[119]++, parseInt(item.productId.toString()));
          const existingQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[120]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[48][0]++, newItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[48][1]++, 0));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[121]++;
          newItemsMap.set(productId, existingQuantity + item.quantity);
        }
        const allProductIds =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[122]++, new Set([...Array.from(oldItemsMap.keys()), ...Array.from(newItemsMap.keys())]));
        /* istanbul ignore next */
        cov_7f8epg9vf().s[123]++;
        console.log("Invoice update - Inventory changes (based on diff):");
        /* istanbul ignore next */
        cov_7f8epg9vf().s[124]++;
        for (const productId of Array.from(allProductIds)) {
          const oldQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[125]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[49][0]++, oldItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[49][1]++, 0));
          const newQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[126]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[50][0]++, newItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[50][1]++, 0));
          const quantityChange =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[127]++, newQuantity - oldQuantity);
          /* istanbul ignore next */
          cov_7f8epg9vf().s[128]++;
          console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);
          /* istanbul ignore next */
          cov_7f8epg9vf().s[129]++;
          if (quantityChange !== 0) {
            /* istanbul ignore next */
            cov_7f8epg9vf().b[51][0]++;
            // Ensure affectedShopId is a string if invoiceData.shopId is a string
            const affectedShopId =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[130]++, invoiceData.shopId ?
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[52][0]++, String(invoiceData.shopId)) :
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[52][1]++, undefined));
            /* istanbul ignore next */
            cov_7f8epg9vf().s[131]++;
            if (quantityChange > 0) {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[53][0]++;
              cov_7f8epg9vf().s[132]++;
              if (affectedShopId) {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[54][0]++;
                const availableInventory =
                /* istanbul ignore next */
                (cov_7f8epg9vf().s[133]++, await tx.inventoryItem.findMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId
                  }
                }));
                const totalAvailable =
                /* istanbul ignore next */
                (cov_7f8epg9vf().s[134]++, availableInventory.reduce((sum, item) => {
                  /* istanbul ignore next */
                  cov_7f8epg9vf().f[11]++;
                  cov_7f8epg9vf().s[135]++;
                  return sum + item.quantity;
                }, 0));
                /* istanbul ignore next */
                cov_7f8epg9vf().s[136]++;
                if (totalAvailable < quantityChange) {
                  /* istanbul ignore next */
                  cov_7f8epg9vf().b[55][0]++;
                  cov_7f8epg9vf().s[137]++;
                  throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);
                } else
                /* istanbul ignore next */
                {
                  cov_7f8epg9vf().b[55][1]++;
                }
                // This should ideally be a more robust way to pick which inventory item to decrement
                cov_7f8epg9vf().s[138]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId,
                    quantity: {
                      gte: quantityChange
                    }
                  },
                  data: {
                    quantity: {
                      decrement: quantityChange
                    }
                  }
                });
              } else {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[54][1]++;
                cov_7f8epg9vf().s[139]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    quantity: {
                      gte: quantityChange
                    }
                  },
                  data: {
                    quantity: {
                      decrement: quantityChange
                    }
                  }
                });
              }
            } else {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[53][1]++;
              cov_7f8epg9vf().s[140]++;
              if (affectedShopId) {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[56][0]++;
                cov_7f8epg9vf().s[141]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId
                  },
                  data: {
                    quantity: {
                      increment: Math.abs(quantityChange)
                    }
                  }
                });
              } else {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[56][1]++;
                cov_7f8epg9vf().s[142]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString())
                  },
                  data: {
                    quantity: {
                      increment: Math.abs(quantityChange)
                    }
                  }
                });
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_7f8epg9vf().b[51][1]++;
          }
        }
        // --- End Inventory Adjustment Logic ---
        // Delete old invoice items before adding new ones for profit recalc
        /* istanbul ignore next */
        cov_7f8epg9vf().s[143]++;
        await tx.invoiceItem.deleteMany({
          where: {
            invoiceId: invoiceId
          }
        });
        let newCalculatedTotalInvoiceAmount =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[144]++, 0);
        let newTotalInvoiceProfit =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[145]++, 0);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[146]++;
        if (
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[58][0]++, invoiceData.items) &&
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[58][1]++, Array.isArray(invoiceData.items)) &&
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[58][2]++, invoiceData.items.length > 0)) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[57][0]++;
          const productIdsForNewItems =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[147]++, invoiceData.items.map(item => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[12]++;
            cov_7f8epg9vf().s[148]++;
            return parseInt(item.productId.toString());
          }));
          // Get shop-specific costs for profit calculation instead of global weighted average
          const inventoryItems =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[149]++, await tx.inventoryItem.findMany({
            where: {
              productId: {
                in: productIdsForNewItems
              },
              shopId: invoiceData.shopId
            },
            select: {
              productId: true,
              shopSpecificCost: true
            }
          }));
          // Create a map of productId to shop-specific cost
          const productCostMap =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[150]++, new Map(inventoryItems.map(item => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[13]++;
            cov_7f8epg9vf().s[151]++;
            return [item.productId,
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[59][0]++, item.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[59][1]++, 0)];
          })));
          // For products not found in inventory, fallback to global weighted average
          const missingProductIds =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[152]++, productIdsForNewItems.filter(id => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[14]++;
            cov_7f8epg9vf().s[153]++;
            return !productCostMap.has(id);
          }));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[154]++;
          if (missingProductIds.length > 0) {
            /* istanbul ignore next */
            cov_7f8epg9vf().b[60][0]++;
            const fallbackProducts =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[155]++, await tx.product.findMany({
              where: {
                id: {
                  in: missingProductIds
                }
              },
              select: {
                id: true,
                weightedAverageCost: true
              }
            }));
            /* istanbul ignore next */
            cov_7f8epg9vf().s[156]++;
            fallbackProducts.forEach(p => {
              /* istanbul ignore next */
              cov_7f8epg9vf().f[15]++;
              cov_7f8epg9vf().s[157]++;
              productCostMap.set(p.id,
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[61][0]++, p.weightedAverageCost) ||
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[61][1]++, 0));
            });
          } else
          /* istanbul ignore next */
          {
            cov_7f8epg9vf().b[60][1]++;
          }
          cov_7f8epg9vf().s[158]++;
          for (const item of invoiceData.items) {
            const productId =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[159]++, parseInt(item.productId.toString()));
            const costPrice =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[160]++,
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[62][0]++, productCostMap.get(productId)) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[62][1]++, 0));
            const itemSellingTotal =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[161]++, item.quantity * item.price);
            const totalItemCost =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[162]++, costPrice * item.quantity);
            const itemProfit =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[163]++, itemSellingTotal - totalItemCost);
            /* istanbul ignore next */
            cov_7f8epg9vf().s[164]++;
            await tx.invoiceItem.create({
              data: {
                invoiceId: invoiceId,
                productId: productId,
                quantity: item.quantity,
                price: item.price,
                total: itemSellingTotal,
                costPrice: costPrice,
                profit: itemProfit
              }
            });
            /* istanbul ignore next */
            cov_7f8epg9vf().s[165]++;
            newCalculatedTotalInvoiceAmount += itemSellingTotal;
            /* istanbul ignore next */
            cov_7f8epg9vf().s[166]++;
            newTotalInvoiceProfit += itemProfit;
          }
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[57][1]++;
        }
        const newProfitMargin =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[167]++, newCalculatedTotalInvoiceAmount > 0 ?
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[63][0]++, newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount * 100) :
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[63][1]++, 0));
        // Apply discount if provided
        let subtotal =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[168]++, newCalculatedTotalInvoiceAmount);
        let discountAmount =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[169]++, 0);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[170]++;
        if (
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[65][0]++, invoiceData.discountType) &&
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[65][1]++, invoiceData.discountValue > 0)) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[64][0]++;
          cov_7f8epg9vf().s[171]++;
          discountAmount = invoiceData.discountType === "percent" ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[66][0]++, subtotal * invoiceData.discountValue / 100) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[66][1]++, invoiceData.discountValue);
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[64][1]++;
        }
        let netTotal =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[172]++, subtotal - discountAmount);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[173]++;
        updateData = {
          status: invoiceData.status,
          paymentMethod: invoiceData.paymentMethod,
          invoiceDate: invoiceData.invoiceDate ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[67][0]++, new Date(invoiceData.invoiceDate)) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[67][1]++, undefined),
          dueDate: invoiceData.dueDate ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[68][0]++, new Date(invoiceData.dueDate)) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[68][1]++, undefined),
          notes: invoiceData.notes,
          shopId: invoiceData.shopId ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[69][0]++, invoiceData.shopId.toString()) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[69][1]++, null),
          total: netTotal,
          discountType: invoiceData.discountType,
          discountValue: invoiceData.discountValue,
          totalProfit: newTotalInvoiceProfit,
          profitMargin: newProfitMargin // Updated profit margin
        };
        /* istanbul ignore next */
        cov_7f8epg9vf().s[174]++;
        if (invoiceData.customerId) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[70][0]++;
          cov_7f8epg9vf().s[175]++;
          updateData.customerId = parseInt(invoiceData.customerId.toString());
        } else {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[70][1]++;
        } // If customerId is explicitly null or undefined, disconnect it if your schema allows
        // updateData.customer = { disconnect: true }; 
        // Or ensure it's set to null if the field is optional and you want to clear it.
        // For now, we assume if not provided, it's not changed or handled by frontend state.
        /* istanbul ignore next */
        cov_7f8epg9vf().s[176]++;
        console.log("Updating invoice details with profit:", {
          invoiceId,
          updateData
        });
        const finalUpdatedInvoice =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[177]++, await tx.invoice.update({
          where: {
            id: invoiceId
          },
          data: updateData,
          include: {
            customer: true,
            shop: true,
            items: {
              include: {
                product: true
              }
            },
            payments: true
          }
        }));
        // Handle cash payment method
        // Removed automatic payment creation/update for cash invoices
        // Users will manually record payments when they actually receive them
        /* istanbul ignore next */
        cov_7f8epg9vf().s[178]++;
        return finalUpdatedInvoice;
      } catch (txError) {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[179]++;
        console.error("Transaction error:", txError);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[180]++;
        throw txError;
      }
    }, {
      timeout: 30000
    }));
    // Real-time updates now handled by polling system
    // if (inventoryUpdatesForEvent.length > 0) { // This line is removed
    //     console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);
    // }
    // Send SMS notification if requested
    /* istanbul ignore next */
    cov_7f8epg9vf().s[181]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[72][0]++, sendSms) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[72][1]++, updatedInvoice)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[71][0]++;
      cov_7f8epg9vf().s[182]++;
      try {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[183]++;
        await _smsService.smsService.init();
        /* istanbul ignore next */
        cov_7f8epg9vf().s[184]++;
        if (_smsService.smsService.isConfigured()) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[73][0]++;
          cov_7f8epg9vf().s[185]++;
          // Send SMS notification asynchronously
          _smsService.smsService.sendInvoiceNotification(updatedInvoice.id).then(result => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[16]++;
            cov_7f8epg9vf().s[186]++;
            if (
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[75][0]++, result.status >= 200) &&
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[75][1]++, result.status < 300)) {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[74][0]++;
              cov_7f8epg9vf().s[187]++;
              console.log("SMS update notification sent successfully");
            } else {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[74][1]++;
              cov_7f8epg9vf().s[188]++;
              console.warn("Failed to send SMS update notification:", result.message);
            }
          }).catch(error => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[17]++;
            cov_7f8epg9vf().s[189]++;
            console.error("Error sending SMS update notification:", error);
          });
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[73][1]++;
        }
      } catch (smsError) {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[190]++;
        // Log SMS error but don't fail the request
        console.error("SMS update notification error:", smsError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[71][1]++;
    }
    // Invalidate related caches after successful update
    const shopId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[191]++, updatedInvoice.shopId);
    const invalidationPromises =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[192]++, [_cache.cacheService.invalidateInvoices(), _cache.cacheService.invalidatePattern(`invoices:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[76][0]++, shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[76][1]++, "all")}`), _cache.cacheService.invalidatePattern("invoices:all:*"), _cache.cacheService.invalidatePattern("inventory:*"), _cache.cacheService.invalidatePattern(`inventory:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[77][0]++, shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[77][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:*"), _cache.cacheService.invalidatePattern(`dashboard:optimized:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[78][0]++, shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[78][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:summary"), _cache.cacheService.invalidatePattern("dashboard:sales"), _cache.cacheService.invalidatePattern("dashboard:shops")]);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[193]++;
    await Promise.all(invalidationPromises);
    // TODO: Add audit logging for invoice updates
    // Note: Audit logging temporarily disabled due to type conflicts
    /* istanbul ignore next */
    cov_7f8epg9vf().s[194]++;
    return _server.NextResponse.json({
      success: true,
      message: "Invoice updated successfully",
      data: updatedInvoice
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[195]++;
    console.error("Error updating invoice:", error);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[196]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating invoice",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[79][0]++, error.message) :
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[79][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[18]++;
  cov_7f8epg9vf().s[197]++;
  try {
    // Validate token and permissions
    const hasSalesDelete =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[198]++, await (0, _auth.validateTokenPermission)(request, "sales:delete"));
    const hasInvoiceManage =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[199]++, await (0, _auth.validateTokenPermission)(request, "invoice:manage"));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[200]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[81][0]++, !hasSalesDelete.isValid) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[81][1]++, !hasInvoiceManage.isValid)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[80][0]++;
      cov_7f8epg9vf().s[201]++;
      return _server.NextResponse.json({
        error: "Permission denied. Requires 'sales:delete' or 'invoice:manage'."
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[80][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[202]++, await params);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[203]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[83][0]++, !resolvedParams?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[83][1]++, isNaN(Number(resolvedParams.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[82][0]++;
      cov_7f8epg9vf().s[204]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[82][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[205]++, Number(resolvedParams.id));
    // Get userId
    const userId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[206]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[207]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[84][0]++;
      cov_7f8epg9vf().s[208]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[84][1]++;
    }
    // Inventory update events are now handled in the service layer if needed
    // Delegate deletion logic to the service layer to keep this handler lean
    const {
      deleteInvoice
    } =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[209]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_7f8epg9vf().f[19]++;
      cov_7f8epg9vf().s[210]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../services/invoiceService"));
    }));
    const deletedInvoiceResult =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[211]++, await deleteInvoice(invoiceId, Number(userId)));
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_7f8epg9vf().s[212]++;
    console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);
    // Smart cache invalidation - only invalidate what's necessary
    const invalidationPromises =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[213]++, [
    // Invalidate invoice-specific caches
    _cache.cacheService.invalidatePattern(`invoices:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[85][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[85][1]++, "all")}`), _cache.cacheService.invalidatePattern("invoices:all:*"),
    // Invalidate inventory caches for affected shop
    _cache.cacheService.invalidatePattern(`inventory:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[86][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[86][1]++, "all")}`), _cache.cacheService.invalidatePattern("inventory:all:*"),
    // Use optimized dashboard cache invalidation
    _cache.cacheService.invalidatePattern(`dashboard:optimized:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[87][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[87][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:optimized:*:all"),
    // Invalidate legacy dashboard caches
    _cache.cacheService.invalidatePattern(`dashboard:summary:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[88][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[88][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:summary:*:all")]);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[214]++;
    await Promise.allSettled(invalidationPromises);
    // Trigger materialized view refresh in background
    // Instead of issuing an internal HTTP request (which doubles latency and
    // consumes another lambda invocation), we rely on the cacheService
    // invalidation performed above. The optimized dashboard route will
    // regenerate fresh data on the next request.
    /* istanbul ignore next */
    cov_7f8epg9vf().s[215]++;
    return _server.NextResponse.json({
      success: true,
      message: `Invoice ${
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[89][0]++, deletedInvoiceResult?.invoiceNumber) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[89][1]++, invoiceId)} deleted successfully`,
      data: {
        id: deletedInvoiceResult?.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[216]++;
    console.error("Error deleting invoice:", error);
    const err =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[217]++, error);
    // Check for foreign key constraint violation with receipts
    /* istanbul ignore next */
    cov_7f8epg9vf().s[218]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[91][0]++, err.message) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[91][1]++, err.message.includes("Receipt_paymentId_fkey"))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[90][0]++;
      cov_7f8epg9vf().s[219]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete invoice with associated receipts. Please delete the receipts first.",
        error: err.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[90][1]++;
    }
    cov_7f8epg9vf().s[220]++;
    return _server.NextResponse.json({
      success: false,
      message:
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[92][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[92][1]++, "Error deleting invoice"),
      error: err.stack
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,