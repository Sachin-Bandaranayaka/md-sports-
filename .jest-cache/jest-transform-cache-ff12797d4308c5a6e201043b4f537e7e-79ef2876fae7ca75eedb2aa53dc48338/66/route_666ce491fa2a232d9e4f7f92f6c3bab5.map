{"version":3,"names":["cov_2aulkl4kta","actualCoverage","s","POST","JWT_SECRET","b","process","env","JWT_ACCESS_TOKEN_EXPIRES_IN","COOKIE_SECURE","NODE_ENV","req","f","console","log","body","json","email","password","_server","NextResponse","success","message","status","time","authResult","_authService","authenticateUser","timeEnd","token","accessToken","user","permissions","substring","refreshToken","_refreshTokenService","generateRefreshToken","id","error","response","cookies","set","name","value","httpOnly","secure","sameSite","maxAge","parseTimeStringToSeconds","path","username"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { generateRefreshToken } from '@/services/refreshTokenService';\nimport { authenticateUser, parseTimeStringToSeconds } from '@/services/authService';\n\n// JWT configuration - use environment variables\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    console.log('[LoginRoute] POST /api/auth/login hit!');\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        console.log('Login attempt for email:', email);\n\n        // Validate request body\n        if (!email || !password) {\n            console.log('Missing email or password');\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Use optimized authentication service\n        console.time('total authentication time');\n        const authResult = await authenticateUser(email, password);\n        console.timeEnd('total authentication time');\n\n        if (!authResult.success) {\n            console.log('Authentication failed:', authResult.message);\n            return NextResponse.json(\n                { success: false, message: authResult.message },\n                { status: 401 }\n            );\n        }\n\n        const { token: accessToken, user } = authResult;\n        console.log('User permissions:', user?.permissions);\n\n        console.log('[LoginRoute] COOKIE_SECURE value:', COOKIE_SECURE);\n        console.log('[LoginRoute] AccessToken value before setting cookie:', accessToken ? accessToken.substring(0, 20) + '...' : 'EMPTY/NULL');\n\n        // Generate refresh token - with fallback if it fails\n        let refreshToken = null;\n        try {\n            refreshToken = user ? await generateRefreshToken(user.id) : null;\n            console.log('Successfully generated refresh token');\n        } catch (error) {\n            console.error('Failed to generate refresh token, continuing with login without refresh token:', error);\n            // We'll continue with login even if refresh token generation fails\n        }\n\n        // Create response object with cookies\n        const response = NextResponse.json({\n            success: true,\n            accessToken,\n            refreshToken,\n            user\n        });\n\n        // Set HTTP-only cookies for tokens (more secure approach)\n        response.cookies.set({\n            name: 'accessToken',\n            value: accessToken || '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // Only set refresh token cookie if we have one\n        if (refreshToken) {\n            response.cookies.set({\n                name: 'refreshToken',\n                value: refreshToken,\n                httpOnly: true,\n                secure: COOKIE_SECURE,\n                sameSite: 'strict',\n                maxAge: 60 * 60 * 24 * 30, // 30 days in seconds\n                path: '/'\n            });\n        }\n\n        console.log('Login successful for user:', user?.username);\n        return response;\n    } catch (error) {\n        console.error('Login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Authentication failed' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}