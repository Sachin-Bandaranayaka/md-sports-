{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Database connection and configuration tests\n\nimport { jest } from '@jest/globals';\n\n// Create mock Prisma operations\nconst createMockPrismaOperations = () => ({\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  upsert: jest.fn(),\n  deleteMany: jest.fn(),\n  updateMany: jest.fn(),\n});\n\n// Create comprehensive mock Prisma client\nconst mockPrisma = {\n  user: createMockPrismaOperations(),\n  product: createMockPrismaOperations(),\n  customer: createMockPrismaOperations(),\n  invoice: createMockPrismaOperations(),\n  inventoryItem: createMockPrismaOperations(),\n  category: createMockPrismaOperations(),\n  supplier: createMockPrismaOperations(),\n  purchaseInvoice: createMockPrismaOperations(),\n  purchaseInvoiceItem: createMockPrismaOperations(),\n  salesInvoice: createMockPrismaOperations(),\n  salesInvoiceItem: createMockPrismaOperations(),\n  order: createMockPrismaOperations(),\n  review: createMockPrismaOperations(),\n  cart: createMockPrismaOperations(),\n  cartItem: createMockPrismaOperations(),\n  payment: createMockPrismaOperations(),\n  shipping: createMockPrismaOperations(),\n  address: createMockPrismaOperations(),\n  wishlist: createMockPrismaOperations(),\n  wishlistItem: createMockPrismaOperations(),\n  notification: createMockPrismaOperations(),\n  auditLog: createMockPrismaOperations(),\n  session: createMockPrismaOperations(),\n  account: createMockPrismaOperations(),\n  verificationToken: createMockPrismaOperations(),\n  $connect: jest.fn().mockResolvedValue(undefined),\n  $disconnect: jest.fn().mockResolvedValue(undefined),\n  $transaction: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n  $on: jest.fn(),\n  $use: jest.fn(),\n};\n\n// Mock the Prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\n// Also mock the db module to return the same mock\njest.mock('@/lib/db', () => ({\n  __esModule: true,\n  db: mockPrisma,\n  prisma: mockPrisma,\n  default: mockPrisma,\n}));\n\n// Mock environment variables\nconst originalEnv = process.env;\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\n// Import after mocking\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('exports', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrisma);\n    });\n\n    it('should export prisma client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have product methods', () => {\n      expect(db.product).toBeDefined();\n      expect(db.product.findMany).toBeDefined();\n      expect(db.product.findUnique).toBeDefined();\n      expect(db.product.create).toBeDefined();\n      expect(db.product.update).toBeDefined();\n      expect(db.product.delete).toBeDefined();\n    });\n\n    it('should have transaction methods', () => {\n      expect(db.$transaction).toBeDefined();\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n      expect(prisma).toBe(db);\n    });\n\n    it('should be importable as default export', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrisma);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow connection', async () => {\n      await expect(db.$connect()).resolves.toBeUndefined();\n      expect(mockPrisma.$connect).toHaveBeenCalled();\n    });\n\n    it('should allow disconnection', async () => {\n      await expect(db.$disconnect()).resolves.toBeUndefined();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n\n    it('should allow product queries', async () => {\n      const mockProduct = { id: 'product1', name: 'Test Product' };\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct);\n\n      const result = await db.product.findUnique({ where: { id: 'product1' } });\n      \n      expect(result).toEqual(mockProduct);\n      expect(mockPrisma.product.findUnique).toHaveBeenCalledWith({ where: { id: 'product1' } });\n    });\n\n    it('should allow user operations', async () => {\n      const mockUser = { id: 'user1', email: 'test@example.com' };\n      mockPrisma.user.create.mockResolvedValue(mockUser);\n\n      const result = await db.user.create({ data: { email: 'test@example.com' } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.create).toHaveBeenCalledWith({ data: { email: 'test@example.com' } });\n    });\n\n    it('should support transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n  });\n\n  describe('error handling', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('should handle connection errors', async () => {\n      mockPrisma.$connect.mockRejectedValue(new Error('Database connection failed'));\n      \n      await expect(db.$connect()).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle query errors', async () => {\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Query failed'));\n      \n      await expect(db.user.findUnique({ where: { id: 'invalid' } })).rejects.toThrow('Query failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      mockPrisma.$transaction.mockRejectedValue(new Error('Transaction failed'));\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["createMockPrismaOperations","findMany","jest","fn","findUnique","findFirst","create","update","delete","count","aggregate","upsert","deleteMany","updateMany","mockPrisma","user","product","customer","invoice","inventoryItem","category","supplier","purchaseInvoice","purchaseInvoiceItem","salesInvoice","salesInvoiceItem","order","review","cart","cartItem","payment","shipping","address","wishlist","wishlistItem","notification","auditLog","session","account","verificationToken","$connect","mockResolvedValue","undefined","$disconnect","$transaction","$executeRaw","$queryRaw","$on","$use","mock","__esModule","default","db","prisma","originalEnv","process","env","beforeAll","DATABASE_URL","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","it","expect","toBeDefined","toBe","defaultExport","resolves","toBeUndefined","toHaveBeenCalled","mockProduct","id","name","result","where","toEqual","toHaveBeenCalledWith","mockUser","email","data","mockResult","success","transactionFn","mockRejectedValue","Error","rejects","toThrow"],"mappings":"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"}