cf8809f9ede24a0be0579c0641a591ad
"use strict";

/* istanbul ignore next */
function cov_3v9t3pht5() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/summary/route.ts";
  var hash = "152bd6e439997ce19f3fc4f944dbc37772481ced";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/summary/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "6": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 47
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 59
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 25
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 241,
          column: 7
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "13": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 27,
          column: 19
        }
      },
      "14": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "16": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "17": {
        start: {
          line: 37,
          column: 37
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "18": {
        start: {
          line: 38,
          column: 25
        },
        end: {
          line: 38,
          column: 66
        }
      },
      "19": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 39,
          column: 56
        }
      },
      "20": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 41,
          column: 116
        }
      },
      "21": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "22": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "23": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 59
        }
      },
      "24": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 53
        }
      },
      "25": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "26": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 70
        }
      },
      "27": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "28": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 58,
          column: 70
        }
      },
      "29": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "30": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 119
        }
      },
      "31": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "32": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 63
        }
      },
      "33": {
        start: {
          line: 65,
          column: 36
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "34": {
        start: {
          line: 68,
          column: 32
        },
        end: {
          line: 68,
          column: 34
        }
      },
      "35": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 30
        }
      },
      "36": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "37": {
        start: {
          line: 72,
          column: 36
        },
        end: {
          line: 72,
          column: 76
        }
      },
      "38": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "39": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "40": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 106
        }
      },
      "41": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 36
        }
      },
      "42": {
        start: {
          line: 84,
          column: 43
        },
        end: {
          line: 84,
          column: 45
        }
      },
      "43": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 95,
          column: 23
        }
      },
      "44": {
        start: {
          line: 86,
          column: 24
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "45": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 91,
          column: 18
        }
      },
      "46": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 92,
          column: 84
        }
      },
      "47": {
        start: {
          line: 93,
          column: 28
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "48": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 98,
          column: 21
        }
      },
      "49": {
        start: {
          line: 97,
          column: 24
        },
        end: {
          line: 97,
          column: 82
        }
      },
      "50": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "51": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 64
        }
      },
      "52": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 43
        }
      },
      "53": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "54": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "55": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 69
        }
      },
      "56": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 51
        }
      },
      "57": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 29
        }
      },
      "58": {
        start: {
          line: 113,
          column: 32
        },
        end: {
          line: 113,
          column: 61
        }
      },
      "59": {
        start: {
          line: 115,
          column: 49
        },
        end: {
          line: 200,
          column: 14
        }
      },
      "60": {
        start: {
          line: 118,
          column: 41
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "61": {
        start: {
          line: 148,
          column: 42
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "62": {
        start: {
          line: 151,
          column: 41
        },
        end: {
          line: 151,
          column: 51
        }
      },
      "63": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "64": {
        start: {
          line: 154,
          column: 24
        },
        end: {
          line: 154,
          column: 79
        }
      },
      "65": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 155,
          column: 53
        }
      },
      "66": {
        start: {
          line: 156,
          column: 24
        },
        end: {
          line: 156,
          column: 41
        }
      },
      "67": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 59
        }
      },
      "68": {
        start: {
          line: 160,
          column: 20
        },
        end: {
          line: 163,
          column: 21
        }
      },
      "69": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 161,
          column: 100
        }
      },
      "70": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 60
        }
      },
      "71": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 94
        }
      },
      "72": {
        start: {
          line: 168,
          column: 37
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "73": {
        start: {
          line: 191,
          column: 38
        },
        end: {
          line: 193,
          column: 21
        }
      },
      "74": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "75": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "76": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 49
        }
      },
      "77": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 86
        }
      },
      "78": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "79": {
        start: {
          line: 203,
          column: 34
        },
        end: {
          line: 213,
          column: 19
        }
      },
      "80": {
        start: {
          line: 203,
          column: 61
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "81": {
        start: {
          line: 214,
          column: 33
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "82": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 101
        }
      },
      "83": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 68
        }
      },
      "84": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 52
        }
      },
      "85": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 115
        }
      },
      "86": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 28
        }
      },
      "87": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 70
        }
      },
      "88": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 242,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 67
          },
          end: {
            line: 19,
            column: 68
          }
        },
        loc: {
          start: {
            line: 19,
            column: 77
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 85,
            column: 40
          },
          end: {
            line: 85,
            column: 41
          }
        },
        loc: {
          start: {
            line: 85,
            column: 48
          },
          end: {
            line: 95,
            column: 21
          }
        },
        line: 85
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 116,
            column: 71
          },
          end: {
            line: 116,
            column: 72
          }
        },
        loc: {
          start: {
            line: 116,
            column: 81
          },
          end: {
            line: 165,
            column: 17
          }
        },
        line: 116
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 166,
            column: 72
          },
          end: {
            line: 166,
            column: 73
          }
        },
        loc: {
          start: {
            line: 166,
            column: 82
          },
          end: {
            line: 199,
            column: 17
          }
        },
        line: 166
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 203,
            column: 52
          },
          end: {
            line: 203,
            column: 53
          }
        },
        loc: {
          start: {
            line: 203,
            column: 61
          },
          end: {
            line: 213,
            column: 17
          }
        },
        line: 203
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 58
          }
        }, {
          start: {
            line: 38,
            column: 62
          },
          end: {
            line: 38,
            column: 65
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 70
          },
          end: {
            line: 41,
            column: 71
          }
        }, {
          start: {
            line: 41,
            column: 74
          },
          end: {
            line: 41,
            column: 116
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 44
          }
        }, {
          start: {
            line: 41,
            column: 48
          },
          end: {
            line: 41,
            column: 67
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 92
          },
          end: {
            line: 41,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 92
          },
          end: {
            line: 41,
            column: 102
          }
        }, {
          start: {
            line: 41,
            column: 106
          },
          end: {
            line: 41,
            column: 110
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 27
          },
          end: {
            line: 42,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 27
          },
          end: {
            line: 42,
            column: 53
          }
        }, {
          start: {
            line: 42,
            column: 57
          },
          end: {
            line: 42,
            column: 59
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 57
          }
        }, {
          start: {
            line: 43,
            column: 61
          },
          end: {
            line: 43,
            column: 63
          }
        }],
        line: 43
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 53
          }
        }, {
          start: {
            line: 44,
            column: 57
          },
          end: {
            line: 44,
            column: 59
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "10": {
        loc: {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 41
          },
          end: {
            line: 63,
            column: 42
          }
        }, {
          start: {
            line: 63,
            column: 45
          },
          end: {
            line: 63,
            column: 63
          }
        }],
        line: 63
      },
      "11": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "12": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        }, {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 99,
            column: 17
          }
        }],
        line: 73
      },
      "13": {
        loc: {
          start: {
            line: 86,
            column: 24
          },
          end: {
            line: 94,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 24
          },
          end: {
            line: 94,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "14": {
        loc: {
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "15": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "16": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "17": {
        loc: {
          start: {
            line: 153,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "18": {
        loc: {
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 20
          },
          end: {
            line: 197,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 201,
            column: 35
          },
          end: {
            line: 201,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 35
          },
          end: {
            line: 201,
            column: 56
          }
        }, {
          start: {
            line: 201,
            column: 60
          },
          end: {
            line: 201,
            column: 63
          }
        }],
        line: 201
      },
      "21": {
        loc: {
          start: {
            line: 207,
            column: 30
          },
          end: {
            line: 207,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 30
          },
          end: {
            line: 207,
            column: 43
          }
        }, {
          start: {
            line: 207,
            column: 47
          },
          end: {
            line: 207,
            column: 62
          }
        }],
        line: 207
      },
      "22": {
        loc: {
          start: {
            line: 209,
            column: 44
          },
          end: {
            line: 209,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 44
          },
          end: {
            line: 209,
            column: 60
          }
        }, {
          start: {
            line: 209,
            column: 64
          },
          end: {
            line: 209,
            column: 67
          }
        }],
        line: 209
      },
      "23": {
        loc: {
          start: {
            line: 210,
            column: 52
          },
          end: {
            line: 210,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 52
          },
          end: {
            line: 210,
            column: 74
          }
        }, {
          start: {
            line: 210,
            column: 78
          },
          end: {
            line: 210,
            column: 81
          }
        }],
        line: 210
      },
      "24": {
        loc: {
          start: {
            line: 212,
            column: 40
          },
          end: {
            line: 212,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 40
          },
          end: {
            line: 212,
            column: 55
          }
        }, {
          start: {
            line: 212,
            column: 59
          },
          end: {
            line: 212,
            column: 62
          }
        }],
        line: 212
      },
      "25": {
        loc: {
          start: {
            line: 218,
            column: 26
          },
          end: {
            line: 218,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 218,
            column: 40
          },
          end: {
            line: 218,
            column: 41
          }
        }, {
          start: {
            line: 218,
            column: 44
          },
          end: {
            line: 218,
            column: 48
          }
        }],
        line: 218
      },
      "26": {
        loc: {
          start: {
            line: 221,
            column: 32
          },
          end: {
            line: 221,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 46
          },
          end: {
            line: 221,
            column: 47
          }
        }, {
          start: {
            line: 221,
            column: 50
          },
          end: {
            line: 221,
            column: 74
          }
        }],
        line: 221
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/summary/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken } from '@/lib/auth';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\nimport { measureAsync } from '@/lib/performance';\n\n// Cache for 10 seconds\nconst CACHE_DURATION = 10;\n\nexport async function GET(request: NextRequest) {\n  return measureAsync('inventory-summary-api', async () => {\n    try {\n      const token = request.headers.get('authorization')?.replace('Bearer ', '');\n      if (!token) {\n        return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n      }\n\n      const decoded = await verifyToken(token);\n      if (!decoded) {\n        return NextResponse.json({ error: 'Invalid token: signature verification failed' }, { status: 401 });\n      }\n\n      const { searchParams } = new URL(request.url);\n      const page = parseInt(searchParams.get('page') || '1');\n      const limitParam = searchParams.get('limit');\n      // Handle \"Show All\" case - if limit is 0 or null, show all items\n      const limit = limitParam === '0' || limitParam === null ? 0 : Math.min(parseInt(limitParam || '10'), 50); // Cap at 50, unless showing all\n      const search = searchParams.get('search') || '';\n      const category = searchParams.get('category') || '';\n      const status = searchParams.get('status') || '';\n      const shopId = searchParams.get('shopId');\n\n      // Generate cache key\n      const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.INVENTORY_SUMMARY, {\n        page,\n        limit,\n        search,\n        category,\n        status,\n        shopId\n      });\n\n      // Try to get from cache first\n      const cachedData = await cacheService.get(cacheKey);\n      if (cachedData) {\n        const response = NextResponse.json(cachedData);\n        response.headers.set('X-Cache', 'HIT');\n        response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n        return response;\n      }\n\n      const offset = limit === 0 ? 0 : (page - 1) * limit;\n\n      // Build dynamic WHERE conditions\n      const whereConditions: string[] = ['1=1']; // Always true base condition\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      // Enhanced search filter - supports multiple words in any order\n      if (search) {\n        const searchWords = search.toLowerCase().trim().split(/\\s+/);\n        \n        if (searchWords.length === 1) {\n          // Single word search - search across name, SKU, and category\n          whereConditions.push(`(\n            LOWER(p.name) ILIKE $${paramIndex} OR \n            LOWER(p.sku) ILIKE $${paramIndex + 1} OR \n            LOWER(c.name) ILIKE $${paramIndex + 2}\n          )`);\n          queryParams.push(`%${searchWords[0]}%`, `%${searchWords[0]}%`, `%${searchWords[0]}%`);\n          paramIndex += 3;\n        } else {\n          // Multi-word search - each word must appear somewhere in the searchable fields\n          const wordConditions: string[] = [];\n          \n          searchWords.forEach(word => {\n            if (word.length > 0) {\n              wordConditions.push(`(\n                LOWER(p.name) ILIKE $${paramIndex} OR \n                LOWER(p.sku) ILIKE $${paramIndex + 1} OR \n                LOWER(c.name) ILIKE $${paramIndex + 2}\n              )`);\n              queryParams.push(`%${word}%`, `%${word}%`, `%${word}%`);\n              paramIndex += 3;\n            }\n          });\n          \n          if (wordConditions.length > 0) {\n            whereConditions.push(`(${wordConditions.join(' AND ')})`);\n          }\n        }\n      }\n\n      // Category filter\n      if (category) {\n        whereConditions.push(`c.name = $${paramIndex}`);\n        queryParams.push(category);\n        paramIndex++;\n      }\n\n      // Shop filter\n      if (shopId) {\n        whereConditions.push(`ii.\"shopId\" = $${paramIndex}`);\n        queryParams.push(parseInt(shopId));\n        paramIndex++;\n      }\n\n      const whereClause = whereConditions.join(' AND ');\n\n      // Execute queries in parallel\n      const [inventoryData, countResult] = await Promise.all([\n        measureAsync('inventory-main-query', async () => {\n          // Main query with aggregation and status calculation\n          let inventoryQuery = `\n            WITH inventory_summary AS (\n              SELECT \n                p.id,\n                p.name,\n                p.sku,\n                p.price as \"retailPrice\",\n                p.weightedaveragecost as \"costPrice\",\n                c.name as category,\n                COALESCE(SUM(ii.quantity), 0) as total_quantity,\n                COALESCE(p.weightedaveragecost, 0) as weighted_avg_cost,\n                COUNT(DISTINCT ii.\"shopId\") as shop_count,\n                COALESCE(p.min_stock_level, 10) as min_stock_level\n              FROM \"Product\" p\n              LEFT JOIN \"Category\" c ON p.\"categoryId\" = c.id\n              LEFT JOIN \"InventoryItem\" ii ON p.id = ii.\"productId\"\n              WHERE ${whereClause}\n              GROUP BY p.id, p.name, p.sku, p.price, p.weightedaveragecost, c.name, p.min_stock_level\n            ),\n            status_calculation AS (\n              SELECT *,\n                CASE \n                  WHEN total_quantity = 0 THEN 'Out of Stock'\n                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'\n                  ELSE 'In Stock'\n                END as status\n              FROM inventory_summary\n            )\n            SELECT * FROM status_calculation\n          `;\n\n          let mainQueryParams = [...queryParams];\n          let mainParamIndex = paramIndex;\n\n          // Add status filter if specified\n          if (status) {\n            inventoryQuery += ` WHERE status = $${mainParamIndex}`;\n            mainQueryParams.push(status);\n            mainParamIndex++;\n          }\n\n          // Add ordering and pagination\n          inventoryQuery += ` ORDER BY name ASC`;\n          if (limit > 0) {\n            inventoryQuery += ` LIMIT $${mainParamIndex} OFFSET $${mainParamIndex + 1}`;\n            mainQueryParams.push(limit, offset);\n          }\n\n          return prisma.$queryRawUnsafe(inventoryQuery, ...mainQueryParams);\n        }),\n\n        measureAsync('inventory-count-query', async () => {\n          // Count query for pagination\n          let countQuery = `\n            WITH inventory_summary AS (\n              SELECT \n                p.id,\n                COALESCE(SUM(ii.quantity), 0) as total_quantity,\n                COALESCE(p.min_stock_level, 10) as min_stock_level\n              FROM \"Product\" p\n              LEFT JOIN \"Category\" c ON p.\"categoryId\" = c.id\n              LEFT JOIN \"InventoryItem\" ii ON p.id = ii.\"productId\"\n              WHERE ${whereClause}\n              GROUP BY p.id, p.min_stock_level\n            ),\n            status_calculation AS (\n              SELECT *,\n                CASE \n                  WHEN total_quantity = 0 THEN 'Out of Stock'\n                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'\n                  ELSE 'In Stock'\n                END as status\n              FROM inventory_summary\n            )\n            SELECT COUNT(*) as total FROM status_calculation\n          `;\n\n          let countParams = [...queryParams];\n          if (status) {\n            countQuery += ` WHERE status = $${paramIndex}`;\n            countParams.push(status);\n          }\n\n          return prisma.$queryRawUnsafe(countQuery, ...countParams) as Promise<any[]>;\n        })\n      ]);\n\n      const total = parseInt(countResult[0]?.total || '0');\n\n      // Format the response\n      const formattedData = (inventoryData as any[]).map(item => ({\n        id: item.id,\n        name: item.name,\n        sku: item.sku,\n        category: item.category || 'Uncategorized',\n        stock: parseInt(item.total_quantity),\n        retailPrice: parseFloat(item.retailPrice || '0'),\n        weightedAverageCost: parseFloat(item.weighted_avg_cost || '0'),\n        status: item.status,\n        shopCount: parseInt(item.shop_count || '0')\n      }));\n\n      const responseData = {\n        success: true,\n        data: formattedData,\n        pagination: {\n          page: limit === 0 ? 1 : page,\n          limit,\n          total,\n          totalPages: limit === 0 ? 1 : Math.ceil(total / limit)\n        }\n      };\n\n      // Cache the response\n      await cacheService.set(cacheKey, responseData, CACHE_CONFIG.TTL.INVENTORY);\n\n      const response = NextResponse.json(responseData);\n      response.headers.set('X-Cache', 'MISS');\n      response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n\n      return response;\n\n    } catch (error) {\n      console.error('Error fetching inventory summary:', error);\n      return NextResponse.json(\n        { success: false, error: 'Failed to fetch inventory summary' },\n        { status: 500 }\n      );\n    }\n  }, { endpoint: 'inventory-summary' });\n}"],
      names: ["GET", "CACHE_DURATION", "request", "measureAsync", "token", "headers", "get", "replace", "NextResponse", "json", "error", "status", "decoded", "verifyToken", "searchParams", "URL", "url", "page", "parseInt", "limitParam", "limit", "Math", "min", "search", "category", "shopId", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "INVENTORY_SUMMARY", "cachedData", "response", "set", "offset", "whereConditions", "queryParams", "paramIndex", "searchWords", "toLowerCase", "trim", "split", "length", "push", "wordConditions", "forEach", "word", "join", "whereClause", "inventoryData", "countResult", "Promise", "all", "inventoryQuery", "mainQueryParams", "mainParamIndex", "prisma", "$queryRawUnsafe", "countQuery", "countParams", "total", "formattedData", "map", "item", "id", "name", "sku", "stock", "total_quantity", "retailPrice", "parseFloat", "weightedAverageCost", "weighted_avg_cost", "shopCount", "shop_count", "responseData", "success", "data", "pagination", "totalPages", "ceil", "TTL", "INVENTORY", "console", "endpoint"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "152bd6e439997ce19f3fc4f944dbc37772481ced"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3v9t3pht5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3v9t3pht5();
cov_3v9t3pht5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_3v9t3pht5().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_3v9t3pht5().f[0]++;
    cov_3v9t3pht5().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_3v9t3pht5().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_3v9t3pht5().s[4]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_3v9t3pht5().s[5]++, require("../../../../lib/auth"));
const _cache =
/* istanbul ignore next */
(cov_3v9t3pht5().s[6]++, require("../../../../lib/cache"));
const _performance =
/* istanbul ignore next */
(cov_3v9t3pht5().s[7]++, require("../../../../lib/performance"));
// Cache for 10 seconds
const CACHE_DURATION =
/* istanbul ignore next */
(cov_3v9t3pht5().s[8]++, 10);
async function GET(request) {
  /* istanbul ignore next */
  cov_3v9t3pht5().f[1]++;
  cov_3v9t3pht5().s[9]++;
  return (0, _performance.measureAsync)("inventory-summary-api", async () => {
    /* istanbul ignore next */
    cov_3v9t3pht5().f[2]++;
    cov_3v9t3pht5().s[10]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[11]++, request.headers.get("authorization")?.replace("Bearer ", ""));
      /* istanbul ignore next */
      cov_3v9t3pht5().s[12]++;
      if (!token) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[0][0]++;
        cov_3v9t3pht5().s[13]++;
        return _server.NextResponse.json({
          error: "No token provided"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[0][1]++;
      }
      const decoded =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[14]++, await (0, _auth.verifyToken)(token));
      /* istanbul ignore next */
      cov_3v9t3pht5().s[15]++;
      if (!decoded) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[1][0]++;
        cov_3v9t3pht5().s[16]++;
        return _server.NextResponse.json({
          error: "Invalid token: signature verification failed"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[1][1]++;
      }
      const {
        searchParams
      } =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[17]++, new URL(request.url));
      const page =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[18]++, parseInt(
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[2][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[2][1]++, "1")));
      const limitParam =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[19]++, searchParams.get("limit"));
      // Handle "Show All" case - if limit is 0 or null, show all items
      const limit =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[20]++,
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[4][0]++, limitParam === "0") ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[4][1]++, limitParam === null) ?
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[3][0]++, 0) :
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[3][1]++, Math.min(parseInt(
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[5][0]++, limitParam) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[5][1]++, "10")), 50))); // Cap at 50, unless showing all
      const search =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[21]++,
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[6][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[6][1]++, ""));
      const category =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[22]++,
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[7][0]++, searchParams.get("category")) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[7][1]++, ""));
      const status =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[23]++,
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[8][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[8][1]++, ""));
      const shopId =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[24]++, searchParams.get("shopId"));
      // Generate cache key
      const cacheKey =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[25]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.INVENTORY_SUMMARY, {
        page,
        limit,
        search,
        category,
        status,
        shopId
      }));
      // Try to get from cache first
      const cachedData =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[26]++, await _cache.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_3v9t3pht5().s[27]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[9][0]++;
        const response =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[28]++, _server.NextResponse.json(cachedData));
        /* istanbul ignore next */
        cov_3v9t3pht5().s[29]++;
        response.headers.set("X-Cache", "HIT");
        /* istanbul ignore next */
        cov_3v9t3pht5().s[30]++;
        response.headers.set("Cache-Control", `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);
        /* istanbul ignore next */
        cov_3v9t3pht5().s[31]++;
        return response;
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[9][1]++;
      }
      const offset =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[32]++, limit === 0 ?
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[10][0]++, 0) :
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[10][1]++, (page - 1) * limit));
      // Build dynamic WHERE conditions
      const whereConditions =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[33]++, ["1=1"]); // Always true base condition
      const queryParams =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[34]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[35]++, 1);
      // Enhanced search filter - supports multiple words in any order
      /* istanbul ignore next */
      cov_3v9t3pht5().s[36]++;
      if (search) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[11][0]++;
        const searchWords =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[37]++, search.toLowerCase().trim().split(/\s+/));
        /* istanbul ignore next */
        cov_3v9t3pht5().s[38]++;
        if (searchWords.length === 1) {
          /* istanbul ignore next */
          cov_3v9t3pht5().b[12][0]++;
          cov_3v9t3pht5().s[39]++;
          // Single word search - search across name, SKU, and category
          whereConditions.push(`(
            LOWER(p.name) ILIKE $${paramIndex} OR 
            LOWER(p.sku) ILIKE $${paramIndex + 1} OR 
            LOWER(c.name) ILIKE $${paramIndex + 2}
          )`);
          /* istanbul ignore next */
          cov_3v9t3pht5().s[40]++;
          queryParams.push(`%${searchWords[0]}%`, `%${searchWords[0]}%`, `%${searchWords[0]}%`);
          /* istanbul ignore next */
          cov_3v9t3pht5().s[41]++;
          paramIndex += 3;
        } else {
          /* istanbul ignore next */
          cov_3v9t3pht5().b[12][1]++;
          // Multi-word search - each word must appear somewhere in the searchable fields
          const wordConditions =
          /* istanbul ignore next */
          (cov_3v9t3pht5().s[42]++, []);
          /* istanbul ignore next */
          cov_3v9t3pht5().s[43]++;
          searchWords.forEach(word => {
            /* istanbul ignore next */
            cov_3v9t3pht5().f[3]++;
            cov_3v9t3pht5().s[44]++;
            if (word.length > 0) {
              /* istanbul ignore next */
              cov_3v9t3pht5().b[13][0]++;
              cov_3v9t3pht5().s[45]++;
              wordConditions.push(`(
                LOWER(p.name) ILIKE $${paramIndex} OR 
                LOWER(p.sku) ILIKE $${paramIndex + 1} OR 
                LOWER(c.name) ILIKE $${paramIndex + 2}
              )`);
              /* istanbul ignore next */
              cov_3v9t3pht5().s[46]++;
              queryParams.push(`%${word}%`, `%${word}%`, `%${word}%`);
              /* istanbul ignore next */
              cov_3v9t3pht5().s[47]++;
              paramIndex += 3;
            } else
            /* istanbul ignore next */
            {
              cov_3v9t3pht5().b[13][1]++;
            }
          });
          /* istanbul ignore next */
          cov_3v9t3pht5().s[48]++;
          if (wordConditions.length > 0) {
            /* istanbul ignore next */
            cov_3v9t3pht5().b[14][0]++;
            cov_3v9t3pht5().s[49]++;
            whereConditions.push(`(${wordConditions.join(" AND ")})`);
          } else
          /* istanbul ignore next */
          {
            cov_3v9t3pht5().b[14][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[11][1]++;
      }
      // Category filter
      cov_3v9t3pht5().s[50]++;
      if (category) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[15][0]++;
        cov_3v9t3pht5().s[51]++;
        whereConditions.push(`c.name = $${paramIndex}`);
        /* istanbul ignore next */
        cov_3v9t3pht5().s[52]++;
        queryParams.push(category);
        /* istanbul ignore next */
        cov_3v9t3pht5().s[53]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[15][1]++;
      }
      // Shop filter
      cov_3v9t3pht5().s[54]++;
      if (shopId) {
        /* istanbul ignore next */
        cov_3v9t3pht5().b[16][0]++;
        cov_3v9t3pht5().s[55]++;
        whereConditions.push(`ii."shopId" = $${paramIndex}`);
        /* istanbul ignore next */
        cov_3v9t3pht5().s[56]++;
        queryParams.push(parseInt(shopId));
        /* istanbul ignore next */
        cov_3v9t3pht5().s[57]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_3v9t3pht5().b[16][1]++;
      }
      const whereClause =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[58]++, whereConditions.join(" AND "));
      // Execute queries in parallel
      const [inventoryData, countResult] =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[59]++, await Promise.all([(0, _performance.measureAsync)("inventory-main-query", async () => {
        /* istanbul ignore next */
        cov_3v9t3pht5().f[4]++;
        // Main query with aggregation and status calculation
        let inventoryQuery =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[60]++, `
            WITH inventory_summary AS (
              SELECT 
                p.id,
                p.name,
                p.sku,
                p.price as "retailPrice",
                p.weightedaveragecost as "costPrice",
                c.name as category,
                COALESCE(SUM(ii.quantity), 0) as total_quantity,
                COALESCE(p.weightedaveragecost, 0) as weighted_avg_cost,
                COUNT(DISTINCT ii."shopId") as shop_count,
                COALESCE(p.min_stock_level, 10) as min_stock_level
              FROM "Product" p
              LEFT JOIN "Category" c ON p."categoryId" = c.id
              LEFT JOIN "InventoryItem" ii ON p.id = ii."productId"
              WHERE ${whereClause}
              GROUP BY p.id, p.name, p.sku, p.price, p.weightedaveragecost, c.name, p.min_stock_level
            ),
            status_calculation AS (
              SELECT *,
                CASE 
                  WHEN total_quantity = 0 THEN 'Out of Stock'
                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'
                  ELSE 'In Stock'
                END as status
              FROM inventory_summary
            )
            SELECT * FROM status_calculation
          `);
        let mainQueryParams =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[61]++, [...queryParams]);
        let mainParamIndex =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[62]++, paramIndex);
        // Add status filter if specified
        /* istanbul ignore next */
        cov_3v9t3pht5().s[63]++;
        if (status) {
          /* istanbul ignore next */
          cov_3v9t3pht5().b[17][0]++;
          cov_3v9t3pht5().s[64]++;
          inventoryQuery += ` WHERE status = $${mainParamIndex}`;
          /* istanbul ignore next */
          cov_3v9t3pht5().s[65]++;
          mainQueryParams.push(status);
          /* istanbul ignore next */
          cov_3v9t3pht5().s[66]++;
          mainParamIndex++;
        } else
        /* istanbul ignore next */
        {
          cov_3v9t3pht5().b[17][1]++;
        }
        // Add ordering and pagination
        cov_3v9t3pht5().s[67]++;
        inventoryQuery += ` ORDER BY name ASC`;
        /* istanbul ignore next */
        cov_3v9t3pht5().s[68]++;
        if (limit > 0) {
          /* istanbul ignore next */
          cov_3v9t3pht5().b[18][0]++;
          cov_3v9t3pht5().s[69]++;
          inventoryQuery += ` LIMIT $${mainParamIndex} OFFSET $${mainParamIndex + 1}`;
          /* istanbul ignore next */
          cov_3v9t3pht5().s[70]++;
          mainQueryParams.push(limit, offset);
        } else
        /* istanbul ignore next */
        {
          cov_3v9t3pht5().b[18][1]++;
        }
        cov_3v9t3pht5().s[71]++;
        return _prisma.prisma.$queryRawUnsafe(inventoryQuery, ...mainQueryParams);
      }), (0, _performance.measureAsync)("inventory-count-query", async () => {
        /* istanbul ignore next */
        cov_3v9t3pht5().f[5]++;
        // Count query for pagination
        let countQuery =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[72]++, `
            WITH inventory_summary AS (
              SELECT 
                p.id,
                COALESCE(SUM(ii.quantity), 0) as total_quantity,
                COALESCE(p.min_stock_level, 10) as min_stock_level
              FROM "Product" p
              LEFT JOIN "Category" c ON p."categoryId" = c.id
              LEFT JOIN "InventoryItem" ii ON p.id = ii."productId"
              WHERE ${whereClause}
              GROUP BY p.id, p.min_stock_level
            ),
            status_calculation AS (
              SELECT *,
                CASE 
                  WHEN total_quantity = 0 THEN 'Out of Stock'
                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'
                  ELSE 'In Stock'
                END as status
              FROM inventory_summary
            )
            SELECT COUNT(*) as total FROM status_calculation
          `);
        let countParams =
        /* istanbul ignore next */
        (cov_3v9t3pht5().s[73]++, [...queryParams]);
        /* istanbul ignore next */
        cov_3v9t3pht5().s[74]++;
        if (status) {
          /* istanbul ignore next */
          cov_3v9t3pht5().b[19][0]++;
          cov_3v9t3pht5().s[75]++;
          countQuery += ` WHERE status = $${paramIndex}`;
          /* istanbul ignore next */
          cov_3v9t3pht5().s[76]++;
          countParams.push(status);
        } else
        /* istanbul ignore next */
        {
          cov_3v9t3pht5().b[19][1]++;
        }
        cov_3v9t3pht5().s[77]++;
        return _prisma.prisma.$queryRawUnsafe(countQuery, ...countParams);
      })]));
      const total =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[78]++, parseInt(
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[20][0]++, countResult[0]?.total) ||
      /* istanbul ignore next */
      (cov_3v9t3pht5().b[20][1]++, "0")));
      // Format the response
      const formattedData =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[79]++, inventoryData.map(item => {
        /* istanbul ignore next */
        cov_3v9t3pht5().f[6]++;
        cov_3v9t3pht5().s[80]++;
        return {
          id: item.id,
          name: item.name,
          sku: item.sku,
          category:
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[21][0]++, item.category) ||
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[21][1]++, "Uncategorized"),
          stock: parseInt(item.total_quantity),
          retailPrice: parseFloat(
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[22][0]++, item.retailPrice) ||
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[22][1]++, "0")),
          weightedAverageCost: parseFloat(
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[23][0]++, item.weighted_avg_cost) ||
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[23][1]++, "0")),
          status: item.status,
          shopCount: parseInt(
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[24][0]++, item.shop_count) ||
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[24][1]++, "0"))
        };
      }));
      const responseData =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[81]++, {
        success: true,
        data: formattedData,
        pagination: {
          page: limit === 0 ?
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[25][0]++, 1) :
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[25][1]++, page),
          limit,
          total,
          totalPages: limit === 0 ?
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[26][0]++, 1) :
          /* istanbul ignore next */
          (cov_3v9t3pht5().b[26][1]++, Math.ceil(total / limit))
        }
      });
      // Cache the response
      /* istanbul ignore next */
      cov_3v9t3pht5().s[82]++;
      await _cache.cacheService.set(cacheKey, responseData, _cache.CACHE_CONFIG.TTL.INVENTORY);
      const response =
      /* istanbul ignore next */
      (cov_3v9t3pht5().s[83]++, _server.NextResponse.json(responseData));
      /* istanbul ignore next */
      cov_3v9t3pht5().s[84]++;
      response.headers.set("X-Cache", "MISS");
      /* istanbul ignore next */
      cov_3v9t3pht5().s[85]++;
      response.headers.set("Cache-Control", `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);
      /* istanbul ignore next */
      cov_3v9t3pht5().s[86]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_3v9t3pht5().s[87]++;
      console.error("Error fetching inventory summary:", error);
      /* istanbul ignore next */
      cov_3v9t3pht5().s[88]++;
      return _server.NextResponse.json({
        success: false,
        error: "Failed to fetch inventory summary"
      }, {
        status: 500
      });
    }
  }, {
    endpoint: "inventory-summary"
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,