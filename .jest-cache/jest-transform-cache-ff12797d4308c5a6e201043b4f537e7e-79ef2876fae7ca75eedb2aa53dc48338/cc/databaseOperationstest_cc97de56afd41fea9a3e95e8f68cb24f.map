{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/databaseOperations.test.ts"],"sourcesContent":["// Fixed Unit tests for database operations\n// This file tests various database operations and utilities\n\nimport { jest } from '@jest/globals';\n\n// Create a comprehensive mock for all Prisma models\nconst createMockModel = () => ({\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  upsert: jest.fn(),\n  deleteMany: jest.fn(),\n  updateMany: jest.fn(),\n});\n\n// Mock Prisma Client BEFORE importing\nconst mockPrisma = {\n  user: createMockModel(),\n  product: createMockModel(),\n  customer: createMockModel(),\n  invoice: createMockModel(),\n  inventoryItem: createMockModel(),\n  category: createMockModel(),\n  supplier: createMockModel(),\n  purchaseInvoice: createMockModel(),\n  purchaseInvoiceItem: createMockModel(),\n  salesInvoice: createMockModel(),\n  salesInvoiceItem: createMockModel(),\n  $transaction: jest.fn(),\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n};\n\n// Mock the Prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\n// Import after mocking\nimport prisma from '@/lib/prisma';\nimport { DatabaseOperations } from '@/lib/database/operations';\nimport { DatabaseError, ValidationError } from '@/lib/errors';\n\ndescribe('Database Operations - Prisma Models', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('User Model Operations', () => {\n    const mockUser = {\n      id: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      password: 'hashedpassword',\n      firstName: 'Test',\n      lastName: 'User',\n      isActive: true,\n      roleId: 1,\n      shopId: 'shop1',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active users', async () => {\n        const mockUsers = [mockUser, { ...mockUser, id: 2, username: 'testuser2' }];\n        mockPrisma.user.findMany.mockResolvedValue(mockUsers as any);\n\n        const result = await prisma.user.findMany({\n          where: { isActive: true },\n        });\n\n        expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n          where: { isActive: true },\n        });\n        expect(result).toEqual(mockUsers);\n        expect(result).toHaveLength(2);\n      });\n\n      it('should fetch users with role and shop relations', async () => {\n        const mockUsersWithRelations = [{\n          ...mockUser,\n          role: { id: 1, name: 'admin', permissions: [] },\n          shop: { id: 'shop1', name: 'Main Shop' },\n        }];\n        mockPrisma.user.findMany.mockResolvedValue(mockUsersWithRelations as any);\n\n        const result = await prisma.user.findMany({\n          include: {\n            role: { include: { permissions: true } },\n            shop: true,\n          },\n        });\n\n        expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n          include: {\n            role: { include: { permissions: true } },\n            shop: true,\n          },\n        });\n        expect(result[0]).toHaveProperty('role');\n        expect(result[0]).toHaveProperty('shop');\n      });\n    });\n\n    describe('findUnique', () => {\n      it('should find user by id', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.findUnique({\n          where: { id: 1 },\n        });\n\n        expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n          where: { id: 1 },\n        });\n        expect(result).toEqual(mockUser);\n      });\n\n      it('should find user by email', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.findUnique({\n          where: { email: 'test@example.com' },\n        });\n\n        expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n          where: { email: 'test@example.com' },\n        });\n        expect(result).toEqual(mockUser);\n      });\n\n      it('should return null for non-existent user', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(null);\n\n        const result = await prisma.user.findUnique({\n          where: { id: 999 },\n        });\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new user', async () => {\n        const newUserData = {\n          username: 'newuser',\n          email: 'new@example.com',\n          password: 'hashedpassword',\n          firstName: 'New',\n          lastName: 'User',\n          roleId: 2,\n        };\n        const createdUser = { ...mockUser, ...newUserData, id: 3 };\n        mockPrisma.user.create.mockResolvedValue(createdUser as any);\n\n        const result = await prisma.user.create({\n          data: newUserData,\n        });\n\n        expect(mockPrisma.user.create).toHaveBeenCalledWith({\n          data: newUserData,\n        });\n        expect(result).toEqual(createdUser);\n      });\n    });\n\n    describe('update', () => {\n      it('should update user data', async () => {\n        const updateData = { firstName: 'Updated', lastName: 'Name' };\n        const updatedUser = { ...mockUser, ...updateData };\n        mockPrisma.user.update.mockResolvedValue(updatedUser as any);\n\n        const result = await prisma.user.update({\n          where: { id: 1 },\n          data: updateData,\n        });\n\n        expect(mockPrisma.user.update).toHaveBeenCalledWith({\n          where: { id: 1 },\n          data: updateData,\n        });\n        expect(result).toEqual(updatedUser);\n      });\n    });\n\n    describe('delete', () => {\n      it('should delete a user', async () => {\n        mockPrisma.user.delete.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.delete({\n          where: { id: 1 },\n        });\n\n        expect(mockPrisma.user.delete).toHaveBeenCalledWith({\n          where: { id: 1 },\n        });\n        expect(result).toEqual(mockUser);\n      });\n    });\n  });\n\n  describe('Product Model Operations', () => {\n    const mockProduct = {\n      id: 1,\n      name: 'Test Product',\n      description: 'Test Description',\n      price: 99.99,\n      costPrice: 50.00,\n      sku: 'TEST-001',\n      barcode: '1234567890',\n      categoryId: 1,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active products', async () => {\n        const mockProducts = [mockProduct, { ...mockProduct, id: 2, name: 'Product 2' }];\n        mockPrisma.product.findMany.mockResolvedValue(mockProducts as any);\n\n        const result = await prisma.product.findMany({\n          where: { isActive: true },\n        });\n\n        expect(mockPrisma.product.findMany).toHaveBeenCalledWith({\n          where: { isActive: true },\n        });\n        expect(result).toEqual(mockProducts);\n      });\n\n      it('should fetch products with category and inventory', async () => {\n        const mockProductsWithRelations = [{\n          ...mockProduct,\n          category: { id: 1, name: 'Electronics' },\n          inventoryItems: [{ id: 1, quantity: 100, shopId: 'shop1' }],\n        }];\n        mockPrisma.product.findMany.mockResolvedValue(mockProductsWithRelations as any);\n\n        const result = await prisma.product.findMany({\n          include: {\n            category: true,\n            inventoryItems: true,\n          },\n        });\n\n        expect(result[0]).toHaveProperty('category');\n        expect(result[0]).toHaveProperty('inventoryItems');\n      });\n    });\n\n    describe('findUnique', () => {\n      it('should find product by id', async () => {\n        mockPrisma.product.findUnique.mockResolvedValue(mockProduct as any);\n\n        const result = await prisma.product.findUnique({\n          where: { id: 1 },\n        });\n\n        expect(result).toEqual(mockProduct);\n      });\n\n      it('should find product by SKU', async () => {\n        mockPrisma.product.findUnique.mockResolvedValue(mockProduct as any);\n\n        const result = await prisma.product.findUnique({\n          where: { sku: 'TEST-001' },\n        });\n\n        expect(result).toEqual(mockProduct);\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new product', async () => {\n        const newProductData = {\n          name: 'New Product',\n          price: 149.99,\n          costPrice: 75.00,\n          sku: 'NEW-001',\n          categoryId: 1,\n        };\n        const createdProduct = { ...mockProduct, ...newProductData, id: 3 };\n        mockPrisma.product.create.mockResolvedValue(createdProduct as any);\n\n        const result = await prisma.product.create({\n          data: newProductData,\n        });\n\n        expect(result).toEqual(createdProduct);\n      });\n    });\n  });\n\n  describe('Customer Model Operations', () => {\n    const mockCustomer = {\n      id: 1,\n      name: 'Test Customer',\n      email: 'customer@example.com',\n      phone: '+1234567890',\n      address: '123 Test St',\n      city: 'Test City',\n      status: 'active',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active customers', async () => {\n        const mockCustomers = [mockCustomer, { ...mockCustomer, id: 2, name: 'Customer 2' }];\n        mockPrisma.customer.findMany.mockResolvedValue(mockCustomers as any);\n\n        const result = await prisma.customer.findMany({\n          where: { status: 'active' },\n        });\n\n        expect(result).toEqual(mockCustomers);\n      });\n\n      it('should fetch customers with invoices', async () => {\n        const mockCustomersWithInvoices = [{\n          ...mockCustomer,\n          invoices: [{ id: 1, total: 100.00, status: 'paid' }],\n        }];\n        mockPrisma.customer.findMany.mockResolvedValue(mockCustomersWithInvoices as any);\n\n        const result = await prisma.customer.findMany({\n          include: { invoices: true },\n        });\n\n        expect(result[0]).toHaveProperty('invoices');\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new customer', async () => {\n        const newCustomerData = {\n          name: 'New Customer',\n          email: 'new@customer.com',\n          phone: '+9876543210',\n        };\n        const createdCustomer = { ...mockCustomer, ...newCustomerData, id: 3 };\n        mockPrisma.customer.create.mockResolvedValue(createdCustomer as any);\n\n        const result = await prisma.customer.create({\n          data: newCustomerData,\n        });\n\n        expect(result).toEqual(createdCustomer);\n      });\n    });\n  });\n\n  describe('Invoice Model Operations', () => {\n    const mockInvoice = {\n      id: 1,\n      invoiceNumber: 'INV-001',\n      customerId: 1,\n      total: 199.99,\n      status: 'pending',\n      paymentMethod: 'Cash',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch invoices with filters', async () => {\n        const mockInvoices = [mockInvoice, { ...mockInvoice, id: 2, invoiceNumber: 'INV-002' }];\n        mockPrisma.invoice.findMany.mockResolvedValue(mockInvoices as any);\n\n        const result = await prisma.invoice.findMany({\n          where: {\n            status: 'pending',\n            createdAt: {\n              gte: new Date('2024-01-01'),\n            },\n          },\n          orderBy: { createdAt: 'desc' },\n        });\n\n        expect(mockPrisma.invoice.findMany).toHaveBeenCalledWith({\n          where: {\n            status: 'pending',\n            createdAt: {\n              gte: new Date('2024-01-01'),\n            },\n          },\n          orderBy: { createdAt: 'desc' },\n        });\n        expect(result).toEqual(mockInvoices);\n      });\n\n      it('should fetch invoices with customer and items', async () => {\n        const mockInvoicesWithRelations = [{\n          ...mockInvoice,\n          customer: { id: 1, name: 'Test Customer' },\n          items: [{ id: 1, productId: 1, quantity: 2, price: 99.99 }],\n        }];\n        mockPrisma.invoice.findMany.mockResolvedValue(mockInvoicesWithRelations as any);\n\n        const result = await prisma.invoice.findMany({\n          include: {\n            customer: true,\n            items: { include: { product: true } },\n          },\n        });\n\n        expect(result[0]).toHaveProperty('customer');\n        expect(result[0]).toHaveProperty('items');\n      });\n    });\n\n    describe('create', () => {\n      it('should create invoice with items', async () => {\n        const invoiceData = {\n          invoiceNumber: 'INV-003',\n          customerId: 1,\n          total: 299.99,\n          status: 'pending',\n          items: {\n            create: [\n              { productId: 1, quantity: 2, price: 99.99, total: 199.98 },\n              { productId: 2, quantity: 1, price: 100.01, total: 100.01 },\n            ],\n          },\n        };\n        const createdInvoice = { ...mockInvoice, ...invoiceData, id: 3 };\n        mockPrisma.invoice.create.mockResolvedValue(createdInvoice as any);\n\n        const result = await prisma.invoice.create({\n          data: invoiceData,\n          include: { items: true },\n        });\n\n        expect(mockPrisma.invoice.create).toHaveBeenCalledWith({\n          data: invoiceData,\n          include: { items: true },\n        });\n        expect(result).toEqual(createdInvoice);\n      });\n    });\n  });\n\n  describe('Inventory Model Operations', () => {\n    const mockInventoryItem = {\n      id: 1,\n      productId: 1,\n      shopId: 'shop1',\n      quantity: 100,\n      minStockLevel: 10,\n      maxStockLevel: 500,\n      reorderPoint: 20,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch inventory items by shop', async () => {\n        const mockInventoryItems = [mockInventoryItem, { ...mockInventoryItem, id: 2, productId: 2 }];\n        mockPrisma.inventoryItem.findMany.mockResolvedValue(mockInventoryItems as any);\n\n        const result = await prisma.inventoryItem.findMany({\n          where: { shopId: 'shop1' },\n          include: { product: true },\n        });\n\n        expect(mockPrisma.inventoryItem.findMany).toHaveBeenCalledWith({\n          where: { shopId: 'shop1' },\n          include: { product: true },\n        });\n        expect(result).toEqual(mockInventoryItems);\n      });\n\n      it('should fetch low stock items', async () => {\n        const lowStockItems = [{ ...mockInventoryItem, quantity: 5 }];\n        mockPrisma.inventoryItem.findMany.mockResolvedValue(lowStockItems as any);\n\n        const result = await prisma.inventoryItem.findMany({\n          where: {\n            quantity: { lte: mockInventoryItem.minStockLevel },\n          },\n        });\n\n        expect(result).toEqual(lowStockItems);\n      });\n    });\n\n    describe('update', () => {\n      it('should update inventory quantity', async () => {\n        const updatedItem = { ...mockInventoryItem, quantity: 150 };\n        mockPrisma.inventoryItem.update.mockResolvedValue(updatedItem as any);\n\n        const result = await prisma.inventoryItem.update({\n          where: {\n            productId_shopId: {\n              productId: 1,\n              shopId: 'shop1',\n            },\n          },\n          data: { quantity: 150 },\n        });\n\n        expect(result).toEqual(updatedItem);\n      });\n    });\n  });\n\n  describe('Transaction Operations', () => {\n    describe('$transaction', () => {\n      it('should execute multiple operations in a transaction', async () => {\n        const mockResults = [mockUser, mockProduct];\n        mockPrisma.$transaction.mockResolvedValue(mockResults as any);\n\n        const result = await prisma.$transaction([\n          prisma.user.create({ data: { username: 'test', email: 'test@test.com' } }),\n          prisma.product.create({ data: { name: 'Test Product', price: 99.99 } }),\n        ]);\n\n        expect(mockPrisma.$transaction).toHaveBeenCalled();\n        expect(result).toEqual(mockResults);\n      });\n\n      it('should handle transaction rollback on error', async () => {\n        const error = new Error('Transaction failed');\n        mockPrisma.$transaction.mockRejectedValue(error);\n\n        await expect(\n          prisma.$transaction([\n            prisma.user.create({ data: { username: 'test', email: 'test@test.com' } }),\n            prisma.product.create({ data: { name: 'Test Product', price: 99.99 } }),\n          ])\n        ).rejects.toThrow('Transaction failed');\n      });\n    });\n  });\n\n  describe('Connection Management', () => {\n    describe('$connect', () => {\n      it('should connect to database', async () => {\n        mockPrisma.$connect.mockResolvedValue(undefined);\n\n        await prisma.$connect();\n\n        expect(mockPrisma.$connect).toHaveBeenCalled();\n      });\n    });\n\n    describe('$disconnect', () => {\n      it('should disconnect from database', async () => {\n        mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n        await prisma.$disconnect();\n\n        expect(mockPrisma.$disconnect).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      const connectionError = new Error('Database connection failed');\n      mockPrisma.user.findMany.mockRejectedValue(connectionError);\n\n      await expect(prisma.user.findMany()).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle unique constraint violations', async () => {\n      const uniqueError = new Error('Unique constraint failed');\n      mockPrisma.user.create.mockRejectedValue(uniqueError);\n\n      await expect(\n        prisma.user.create({\n          data: { username: 'existing', email: 'existing@test.com' },\n        })\n      ).rejects.toThrow('Unique constraint failed');\n    });\n\n    it('should handle foreign key constraint violations', async () => {\n      const fkError = new Error('Foreign key constraint failed');\n      mockPrisma.product.create.mockRejectedValue(fkError);\n\n      await expect(\n        prisma.product.create({\n          data: { name: 'Test', price: 99.99, categoryId: 999 },\n        })\n      ).rejects.toThrow('Foreign key constraint failed');\n    });\n  });\n});"],"names":["createMockModel","findMany","jest","fn","findUnique","findFirst","create","update","delete","count","aggregate","upsert","deleteMany","updateMany","mockPrisma","user","product","customer","invoice","inventoryItem","category","supplier","purchaseInvoice","purchaseInvoiceItem","salesInvoice","salesInvoiceItem","$transaction","$connect","$disconnect","$executeRaw","$queryRaw","mock","__esModule","default","describe","beforeEach","clearAllMocks","mockUser","id","username","email","password","firstName","lastName","isActive","roleId","shopId","createdAt","Date","updatedAt","it","mockUsers","mockResolvedValue","result","prisma","where","expect","toHaveBeenCalledWith","toEqual","toHaveLength","mockUsersWithRelations","role","name","permissions","shop","include","toHaveProperty","toBeNull","newUserData","createdUser","data","updateData","updatedUser","mockProduct","description","price","costPrice","sku","barcode","categoryId","mockProducts","mockProductsWithRelations","inventoryItems","quantity","newProductData","createdProduct","mockCustomer","phone","address","city","status","mockCustomers","mockCustomersWithInvoices","invoices","total","newCustomerData","createdCustomer","mockInvoice","invoiceNumber","customerId","paymentMethod","mockInvoices","gte","orderBy","mockInvoicesWithRelations","items","productId","invoiceData","createdInvoice","mockInventoryItem","minStockLevel","maxStockLevel","reorderPoint","mockInventoryItems","lowStockItems","lte","updatedItem","productId_shopId","mockResults","toHaveBeenCalled","error","Error","mockRejectedValue","rejects","toThrow","undefined","connectionError","uniqueError","fkError"],"mappings":"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"}