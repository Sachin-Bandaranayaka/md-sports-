{"version":3,"names":["cov_3v9t3pht5","actualCoverage","s","GET","CACHE_DURATION","request","f","_performance","measureAsync","token","headers","get","replace","b","_server","NextResponse","json","error","status","decoded","_auth","verifyToken","searchParams","URL","url","page","parseInt","limitParam","limit","Math","min","search","category","shopId","cacheKey","_cache","cacheService","generateKey","CACHE_CONFIG","KEYS","INVENTORY_SUMMARY","cachedData","response","set","offset","whereConditions","queryParams","paramIndex","searchWords","toLowerCase","trim","split","length","push","wordConditions","forEach","word","join","whereClause","inventoryData","countResult","Promise","all","inventoryQuery","mainQueryParams","mainParamIndex","_prisma","prisma","$queryRawUnsafe","countQuery","countParams","total","formattedData","map","item","id","name","sku","stock","total_quantity","retailPrice","parseFloat","weightedAverageCost","weighted_avg_cost","shopCount","shop_count","responseData","success","data","pagination","totalPages","ceil","TTL","INVENTORY","console","endpoint"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/summary/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken } from '@/lib/auth';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\nimport { measureAsync } from '@/lib/performance';\n\n// Cache for 10 seconds\nconst CACHE_DURATION = 10;\n\nexport async function GET(request: NextRequest) {\n  return measureAsync('inventory-summary-api', async () => {\n    try {\n      const token = request.headers.get('authorization')?.replace('Bearer ', '');\n      if (!token) {\n        return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n      }\n\n      const decoded = await verifyToken(token);\n      if (!decoded) {\n        return NextResponse.json({ error: 'Invalid token: signature verification failed' }, { status: 401 });\n      }\n\n      const { searchParams } = new URL(request.url);\n      const page = parseInt(searchParams.get('page') || '1');\n      const limitParam = searchParams.get('limit');\n      // Handle \"Show All\" case - if limit is 0 or null, show all items\n      const limit = limitParam === '0' || limitParam === null ? 0 : Math.min(parseInt(limitParam || '10'), 50); // Cap at 50, unless showing all\n      const search = searchParams.get('search') || '';\n      const category = searchParams.get('category') || '';\n      const status = searchParams.get('status') || '';\n      const shopId = searchParams.get('shopId');\n\n      // Generate cache key\n      const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.INVENTORY_SUMMARY, {\n        page,\n        limit,\n        search,\n        category,\n        status,\n        shopId\n      });\n\n      // Try to get from cache first\n      const cachedData = await cacheService.get(cacheKey);\n      if (cachedData) {\n        const response = NextResponse.json(cachedData);\n        response.headers.set('X-Cache', 'HIT');\n        response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n        return response;\n      }\n\n      const offset = limit === 0 ? 0 : (page - 1) * limit;\n\n      // Build dynamic WHERE conditions\n      const whereConditions: string[] = ['1=1']; // Always true base condition\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      // Enhanced search filter - supports multiple words in any order\n      if (search) {\n        const searchWords = search.toLowerCase().trim().split(/\\s+/);\n        \n        if (searchWords.length === 1) {\n          // Single word search - search across name, SKU, and category\n          whereConditions.push(`(\n            LOWER(p.name) ILIKE $${paramIndex} OR \n            LOWER(p.sku) ILIKE $${paramIndex + 1} OR \n            LOWER(c.name) ILIKE $${paramIndex + 2}\n          )`);\n          queryParams.push(`%${searchWords[0]}%`, `%${searchWords[0]}%`, `%${searchWords[0]}%`);\n          paramIndex += 3;\n        } else {\n          // Multi-word search - each word must appear somewhere in the searchable fields\n          const wordConditions: string[] = [];\n          \n          searchWords.forEach(word => {\n            if (word.length > 0) {\n              wordConditions.push(`(\n                LOWER(p.name) ILIKE $${paramIndex} OR \n                LOWER(p.sku) ILIKE $${paramIndex + 1} OR \n                LOWER(c.name) ILIKE $${paramIndex + 2}\n              )`);\n              queryParams.push(`%${word}%`, `%${word}%`, `%${word}%`);\n              paramIndex += 3;\n            }\n          });\n          \n          if (wordConditions.length > 0) {\n            whereConditions.push(`(${wordConditions.join(' AND ')})`);\n          }\n        }\n      }\n\n      // Category filter\n      if (category) {\n        whereConditions.push(`c.name = $${paramIndex}`);\n        queryParams.push(category);\n        paramIndex++;\n      }\n\n      // Shop filter\n      if (shopId) {\n        whereConditions.push(`ii.\"shopId\" = $${paramIndex}`);\n        queryParams.push(parseInt(shopId));\n        paramIndex++;\n      }\n\n      const whereClause = whereConditions.join(' AND ');\n\n      // Execute queries in parallel\n      const [inventoryData, countResult] = await Promise.all([\n        measureAsync('inventory-main-query', async () => {\n          // Main query with aggregation and status calculation\n          let inventoryQuery = `\n            WITH inventory_summary AS (\n              SELECT \n                p.id,\n                p.name,\n                p.sku,\n                p.price as \"retailPrice\",\n                p.weightedaveragecost as \"costPrice\",\n                c.name as category,\n                COALESCE(SUM(ii.quantity), 0) as total_quantity,\n                COALESCE(p.weightedaveragecost, 0) as weighted_avg_cost,\n                COUNT(DISTINCT ii.\"shopId\") as shop_count,\n                COALESCE(p.min_stock_level, 10) as min_stock_level\n              FROM \"Product\" p\n              LEFT JOIN \"Category\" c ON p.\"categoryId\" = c.id\n              LEFT JOIN \"InventoryItem\" ii ON p.id = ii.\"productId\"\n              WHERE ${whereClause}\n              GROUP BY p.id, p.name, p.sku, p.price, p.weightedaveragecost, c.name, p.min_stock_level\n            ),\n            status_calculation AS (\n              SELECT *,\n                CASE \n                  WHEN total_quantity = 0 THEN 'Out of Stock'\n                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'\n                  ELSE 'In Stock'\n                END as status\n              FROM inventory_summary\n            )\n            SELECT * FROM status_calculation\n          `;\n\n          let mainQueryParams = [...queryParams];\n          let mainParamIndex = paramIndex;\n\n          // Add status filter if specified\n          if (status) {\n            inventoryQuery += ` WHERE status = $${mainParamIndex}`;\n            mainQueryParams.push(status);\n            mainParamIndex++;\n          }\n\n          // Add ordering and pagination\n          inventoryQuery += ` ORDER BY name ASC`;\n          if (limit > 0) {\n            inventoryQuery += ` LIMIT $${mainParamIndex} OFFSET $${mainParamIndex + 1}`;\n            mainQueryParams.push(limit, offset);\n          }\n\n          return prisma.$queryRawUnsafe(inventoryQuery, ...mainQueryParams);\n        }),\n\n        measureAsync('inventory-count-query', async () => {\n          // Count query for pagination\n          let countQuery = `\n            WITH inventory_summary AS (\n              SELECT \n                p.id,\n                COALESCE(SUM(ii.quantity), 0) as total_quantity,\n                COALESCE(p.min_stock_level, 10) as min_stock_level\n              FROM \"Product\" p\n              LEFT JOIN \"Category\" c ON p.\"categoryId\" = c.id\n              LEFT JOIN \"InventoryItem\" ii ON p.id = ii.\"productId\"\n              WHERE ${whereClause}\n              GROUP BY p.id, p.min_stock_level\n            ),\n            status_calculation AS (\n              SELECT *,\n                CASE \n                  WHEN total_quantity = 0 THEN 'Out of Stock'\n                  WHEN total_quantity <= min_stock_level THEN 'Low Stock'\n                  ELSE 'In Stock'\n                END as status\n              FROM inventory_summary\n            )\n            SELECT COUNT(*) as total FROM status_calculation\n          `;\n\n          let countParams = [...queryParams];\n          if (status) {\n            countQuery += ` WHERE status = $${paramIndex}`;\n            countParams.push(status);\n          }\n\n          return prisma.$queryRawUnsafe(countQuery, ...countParams) as Promise<any[]>;\n        })\n      ]);\n\n      const total = parseInt(countResult[0]?.total || '0');\n\n      // Format the response\n      const formattedData = (inventoryData as any[]).map(item => ({\n        id: item.id,\n        name: item.name,\n        sku: item.sku,\n        category: item.category || 'Uncategorized',\n        stock: parseInt(item.total_quantity),\n        retailPrice: parseFloat(item.retailPrice || '0'),\n        weightedAverageCost: parseFloat(item.weighted_avg_cost || '0'),\n        status: item.status,\n        shopCount: parseInt(item.shop_count || '0')\n      }));\n\n      const responseData = {\n        success: true,\n        data: formattedData,\n        pagination: {\n          page: limit === 0 ? 1 : page,\n          limit,\n          total,\n          totalPages: limit === 0 ? 1 : Math.ceil(total / limit)\n        }\n      };\n\n      // Cache the response\n      await cacheService.set(cacheKey, responseData, CACHE_CONFIG.TTL.INVENTORY);\n\n      const response = NextResponse.json(responseData);\n      response.headers.set('X-Cache', 'MISS');\n      response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n\n      return response;\n\n    } catch (error) {\n      console.error('Error fetching inventory summary:', error);\n      return NextResponse.json(\n        { success: false, error: 'Failed to fetch inventory summary' },\n        { status: 500 }\n      );\n    }\n  }, { endpoint: 'inventory-summary' });\n}"],"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","ignoreList":[]}