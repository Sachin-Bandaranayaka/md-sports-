245317d026f1a2627b5d92810b6f2c7d
"use strict";

/* istanbul ignore next */
function cov_2bhih41kwf() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts";
  var hash = "0d9fd7e2a8180d2f6458dd6506c41a51083f635b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "13": {
        start: {
          line: 35,
          column: 19
        },
        end: {
          line: 35,
          column: 41
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "16": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "17": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 57,
          column: 19
        }
      },
      "18": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "19": {
        start: {
          line: 65,
          column: 25
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "20": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "21": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 57
        }
      },
      "22": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "23": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "24": {
        start: {
          line: 95,
          column: 73
        },
        end: {
          line: 95,
          column: 93
        }
      },
      "25": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "26": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "27": {
        start: {
          line: 106,
          column: 27
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "28": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "29": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "30": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "31": {
        start: {
          line: 123,
          column: 34
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "32": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "33": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 134,
          column: 19
        }
      },
      "34": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "35": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "36": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "37": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "38": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 56
        }
      },
      "39": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "40": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "41": {
        start: {
          line: 181,
          column: 77
        },
        end: {
          line: 181,
          column: 97
        }
      },
      "42": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "43": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "44": {
        start: {
          line: 192,
          column: 27
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "45": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "46": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "47": {
        start: {
          line: 208,
          column: 32
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "48": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "49": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "50": {
        start: {
          line: 222,
          column: 27
        },
        end: {
          line: 222,
          column: 84
        }
      },
      "51": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "52": {
        start: {
          line: 225,
          column: 34
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "53": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "54": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 236,
          column: 19
        }
      },
      "55": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "56": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "57": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "58": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 254,
          column: 19
        }
      },
      "59": {
        start: {
          line: 258,
          column: 31
        },
        end: {
          line: 274,
          column: 10
        }
      },
      "60": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      },
      "61": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 56
        }
      },
      "62": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "63": {
        start: {
          line: 292,
          column: 4
        },
        end: {
          line: 358,
          column: 5
        }
      },
      "64": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 293,
          column: 53
        }
      },
      "65": {
        start: {
          line: 294,
          column: 19
        },
        end: {
          line: 294,
          column: 41
        }
      },
      "66": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "67": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 301,
          column: 15
        }
      },
      "68": {
        start: {
          line: 304,
          column: 32
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "69": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "70": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "71": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "72": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "73": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "74": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 337,
          column: 15
        }
      },
      "75": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 344,
          column: 11
        }
      },
      "76": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "77": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 56
        }
      },
      "78": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 18
          }
        },
        loc: {
          start: {
            line: 32,
            column: 28
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 32
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 93,
            column: 19
          }
        },
        loc: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 93
      },
      "8": {
        name: "PATCH",
        decl: {
          start: {
            line: 179,
            column: 15
          },
          end: {
            line: 179,
            column: 20
          }
        },
        loc: {
          start: {
            line: 179,
            column: 30
          },
          end: {
            line: 290,
            column: 1
          }
        },
        line: 179
      },
      "9": {
        name: "DELETE",
        decl: {
          start: {
            line: 291,
            column: 15
          },
          end: {
            line: 291,
            column: 21
          }
        },
        loc: {
          start: {
            line: 291,
            column: 31
          },
          end: {
            line: 359,
            column: 1
          }
        },
        line: 291
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 87,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 44
          },
          end: {
            line: 87,
            column: 57
          }
        }, {
          start: {
            line: 87,
            column: 60
          },
          end: {
            line: 87,
            column: 73
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "6": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: 97,
            column: 21
          },
          end: {
            line: 97,
            column: 26
          }
        }],
        line: 97
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "11": {
        loc: {
          start: {
            line: 151,
            column: 25
          },
          end: {
            line: 151,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 25
          },
          end: {
            line: 151,
            column: 32
          }
        }, {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 37
          }
        }],
        line: 151
      },
      "12": {
        loc: {
          start: {
            line: 153,
            column: 26
          },
          end: {
            line: 153,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 51
          },
          end: {
            line: 153,
            column: 59
          }
        }, {
          start: {
            line: 153,
            column: 62
          },
          end: {
            line: 153,
            column: 66
          }
        }],
        line: 153
      },
      "13": {
        loc: {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 37
          },
          end: {
            line: 154,
            column: 59
          }
        }, {
          start: {
            line: 154,
            column: 62
          },
          end: {
            line: 154,
            column: 66
          }
        }],
        line: 154
      },
      "14": {
        loc: {
          start: {
            line: 173,
            column: 19
          },
          end: {
            line: 173,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 44
          },
          end: {
            line: 173,
            column: 57
          }
        }, {
          start: {
            line: 173,
            column: 60
          },
          end: {
            line: 173,
            column: 73
          }
        }],
        line: 173
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 15
          }
        }, {
          start: {
            line: 183,
            column: 19
          },
          end: {
            line: 183,
            column: 24
          }
        }, {
          start: {
            line: 183,
            column: 28
          },
          end: {
            line: 183,
            column: 33
          }
        }],
        line: 183
      },
      "17": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "18": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "19": {
        loc: {
          start: {
            line: 222,
            column: 27
          },
          end: {
            line: 222,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 51
          },
          end: {
            line: 222,
            column: 58
          }
        }, {
          start: {
            line: 222,
            column: 61
          },
          end: {
            line: 222,
            column: 84
          }
        }],
        line: 222
      },
      "20": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "21": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "22": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "23": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "24": {
        loc: {
          start: {
            line: 267,
            column: 26
          },
          end: {
            line: 267,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 51
          },
          end: {
            line: 267,
            column: 59
          }
        }, {
          start: {
            line: 267,
            column: 62
          },
          end: {
            line: 267,
            column: 86
          }
        }],
        line: 267
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 26
          },
          end: {
            line: 268,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 37
          },
          end: {
            line: 268,
            column: 59
          }
        }, {
          start: {
            line: 268,
            column: 62
          },
          end: {
            line: 268,
            column: 66
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 285,
            column: 19
          },
          end: {
            line: 285,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 285,
            column: 44
          },
          end: {
            line: 285,
            column: 57
          }
        }, {
          start: {
            line: 285,
            column: 60
          },
          end: {
            line: 285,
            column: 73
          }
        }],
        line: 285
      },
      "27": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "28": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "29": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "30": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "31": {
        loc: {
          start: {
            line: 354,
            column: 19
          },
          end: {
            line: 354,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 44
          },
          end: {
            line: 354,
            column: 57
          }
        }, {
          start: {
            line: 354,
            column: 60
          },
          end: {
            line: 354,
            column: 73
          }
        }],
        line: 354
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET: Fetch all accounts or a single account by ID\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (id) {\n            // Fetch a single account by ID with relationships\n        const account = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                parent: true,\n                subAccounts: {\n                    orderBy: {\n                        name: 'asc'\n                    }\n                }\n            }\n        });\n\n            if (!account) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account not found'\n                }, { status: 404 });\n            }\n\n            return NextResponse.json({\n                success: true,\n                data: account\n            });\n        }\n\n        // Fetch all accounts with parent and sub-account relationships\n        const accounts = await prisma.account.findMany({\n            include: {\n                parent: true,\n                subAccounts: {\n                    orderBy: {\n                        name: 'asc'\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: accounts\n        });\n    } catch (error) {\n        console.error('Error fetching accounts:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching accounts',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new account\nexport async function POST(request: Request) {\n    try {\n        const { name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n        }\n\n        // Create the account\n        const newAccount = await prisma.account.create({\n            data: {\n                name,\n                type,\n                balance: balance || 0,\n                description,\n                isActive: isActive !== undefined ? isActive : true,\n                parentId: parentId ? parseInt(parentId, 10) : null\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account created successfully',\n            data: newAccount\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update an account\nexport async function PATCH(request: Request) {\n    try {\n        const { id, name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!id || !name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID, name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Calculate new balance if provided\n        const newBalance = balance !== undefined ? balance : existingAccount.balance;\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n\n            // Prevent circular reference\n            if (parseInt(parentId, 10) === parseInt(id, 10)) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account cannot be its own parent'\n                }, { status: 400 });\n            }\n        }\n\n        // Update the account\n        const updatedAccount = await prisma.account.update({\n            where: { id: parseInt(id, 10) },\n            data: {\n                name,\n                type,\n                balance: newBalance,\n                description,\n                isActive: isActive !== undefined ? isActive : existingAccount.isActive,\n                parentId: parentId ? parseInt(parentId, 10) : null\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account updated successfully',\n            data: updatedAccount\n        });\n    } catch (error) {\n        console.error('Error updating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete an account\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (!id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID is required'\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                subAccounts: true,\n                transactions: true\n            }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Check if account has sub-accounts\n        if (existingAccount.subAccounts.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with sub-accounts. Please delete or reassign sub-accounts first.'\n            }, { status: 400 });\n        }\n\n        // Check if account has transactions\n        if (existingAccount.transactions.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with existing transactions. Please delete or reassign transactions first.'\n            }, { status: 400 });\n        }\n\n        // Delete the account\n        await prisma.account.delete({\n            where: { id: parseInt(id, 10) }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "POST", "request", "searchParams", "URL", "url", "id", "get", "account", "prisma", "findUnique", "where", "parseInt", "include", "parent", "subAccounts", "orderBy", "name", "NextResponse", "json", "success", "message", "status", "data", "accounts", "findMany", "error", "console", "Error", "String", "type", "balance", "description", "isActive", "parentId", "validTypes", "includes", "join", "parentAccount", "newAccount", "create", "undefined", "existingAccount", "newBalance", "updatedAccount", "update", "transactions", "length", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d9fd7e2a8180d2f6458dd6506c41a51083f635b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bhih41kwf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bhih41kwf();
cov_2bhih41kwf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[0]++;
  cov_2bhih41kwf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2bhih41kwf().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[1]++;
    cov_2bhih41kwf().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[2]++;
    cov_2bhih41kwf().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[3]++;
    cov_2bhih41kwf().s[6]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[4]++;
    cov_2bhih41kwf().s[7]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2bhih41kwf().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2bhih41kwf().s[9]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[5]++;
  cov_2bhih41kwf().s[10]++;
  return /* istanbul ignore next */(cov_2bhih41kwf().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[6]++;
  cov_2bhih41kwf().s[11]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[12]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[13]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[14]++;
    if (id) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[2][0]++;
      // Fetch a single account by ID with relationships
      const account =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[15]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(id, 10)
        },
        include: {
          parent: true,
          subAccounts: {
            orderBy: {
              name: "asc"
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[16]++;
      if (!account) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[3][0]++;
        cov_2bhih41kwf().s[17]++;
        return _server.NextResponse.json({
          success: false,
          message: "Account not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[3][1]++;
      }
      cov_2bhih41kwf().s[18]++;
      return _server.NextResponse.json({
        success: true,
        data: account
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[2][1]++;
    }
    // Fetch all accounts with parent and sub-account relationships
    const accounts =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[19]++, await _prisma.default.account.findMany({
      include: {
        parent: true,
        subAccounts: {
          orderBy: {
            name: "asc"
          }
        }
      },
      orderBy: {
        name: "asc"
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[20]++;
    return _server.NextResponse.json({
      success: true,
      data: accounts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[21]++;
    console.error("Error fetching accounts:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[22]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching accounts",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[4][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[7]++;
  cov_2bhih41kwf().s[23]++;
  try {
    const {
      name,
      type,
      balance,
      description,
      isActive,
      parentId
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[24]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2bhih41kwf().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[6][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[6][1]++, !type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[5][0]++;
      cov_2bhih41kwf().s[26]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account name and type are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[5][1]++;
    }
    // Validate account type
    const validTypes =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[27]++, ["asset", "liability", "equity", "income", "expense"]);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[28]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[7][0]++;
      cov_2bhih41kwf().s[29]++;
      return _server.NextResponse.json({
        success: false,
        message: `Account type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[7][1]++;
    }
    // Validate parent account if parentId is provided
    cov_2bhih41kwf().s[30]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[8][0]++;
      const parentAccount =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[31]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(parentId, 10)
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[32]++;
      if (!parentAccount) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[9][0]++;
        cov_2bhih41kwf().s[33]++;
        return _server.NextResponse.json({
          success: false,
          message: "Parent account not found"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[9][1]++;
      }
      // Ensure parent and child have compatible types
      cov_2bhih41kwf().s[34]++;
      if (parentAccount.type !== type) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[10][0]++;
        cov_2bhih41kwf().s[35]++;
        return _server.NextResponse.json({
          success: false,
          message: "Sub-account type must match parent account type"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[8][1]++;
    }
    // Create the account
    const newAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[36]++, await _prisma.default.account.create({
      data: {
        name,
        type,
        balance:
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[11][0]++, balance) ||
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[11][1]++, 0),
        description,
        isActive: isActive !== undefined ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[12][0]++, isActive) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[12][1]++, true),
        parentId: parentId ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[13][0]++, parseInt(parentId, 10)) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[13][1]++, null)
      },
      include: {
        parent: true,
        subAccounts: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[37]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account created successfully",
      data: newAccount
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[38]++;
    console.error("Error creating account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[39]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[14][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[8]++;
  cov_2bhih41kwf().s[40]++;
  try {
    const {
      id,
      name,
      type,
      balance,
      description,
      isActive,
      parentId
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[41]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2bhih41kwf().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[16][0]++, !id) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[16][1]++, !name) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[16][2]++, !type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[15][0]++;
      cov_2bhih41kwf().s[43]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account ID, name and type are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[15][1]++;
    }
    // Validate account type
    const validTypes =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[44]++, ["asset", "liability", "equity", "income", "expense"]);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[45]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[17][0]++;
      cov_2bhih41kwf().s[46]++;
      return _server.NextResponse.json({
        success: false,
        message: `Account type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[17][1]++;
    }
    // Check if account exists
    const existingAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[47]++, await _prisma.default.account.findUnique({
      where: {
        id: parseInt(id, 10)
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[48]++;
    if (!existingAccount) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[18][0]++;
      cov_2bhih41kwf().s[49]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[18][1]++;
    }
    // Calculate new balance if provided
    const newBalance =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[50]++, balance !== undefined ?
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[19][0]++, balance) :
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[19][1]++, existingAccount.balance));
    // Validate parent account if parentId is provided
    /* istanbul ignore next */
    cov_2bhih41kwf().s[51]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[20][0]++;
      const parentAccount =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[52]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(parentId, 10)
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[53]++;
      if (!parentAccount) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[21][0]++;
        cov_2bhih41kwf().s[54]++;
        return _server.NextResponse.json({
          success: false,
          message: "Parent account not found"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[21][1]++;
      }
      // Ensure parent and child have compatible types
      cov_2bhih41kwf().s[55]++;
      if (parentAccount.type !== type) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[22][0]++;
        cov_2bhih41kwf().s[56]++;
        return _server.NextResponse.json({
          success: false,
          message: "Sub-account type must match parent account type"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[22][1]++;
      }
      // Prevent circular reference
      cov_2bhih41kwf().s[57]++;
      if (parseInt(parentId, 10) === parseInt(id, 10)) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[23][0]++;
        cov_2bhih41kwf().s[58]++;
        return _server.NextResponse.json({
          success: false,
          message: "Account cannot be its own parent"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[23][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[20][1]++;
    }
    // Update the account
    const updatedAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[59]++, await _prisma.default.account.update({
      where: {
        id: parseInt(id, 10)
      },
      data: {
        name,
        type,
        balance: newBalance,
        description,
        isActive: isActive !== undefined ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[24][0]++, isActive) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[24][1]++, existingAccount.isActive),
        parentId: parentId ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[25][0]++, parseInt(parentId, 10)) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[25][1]++, null)
      },
      include: {
        parent: true,
        subAccounts: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[60]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account updated successfully",
      data: updatedAccount
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[61]++;
    console.error("Error updating account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[62]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[26][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[9]++;
  cov_2bhih41kwf().s[63]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[64]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[65]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[66]++;
    if (!id) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[27][0]++;
      cov_2bhih41kwf().s[67]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[27][1]++;
    }
    // Check if account exists
    const existingAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[68]++, await _prisma.default.account.findUnique({
      where: {
        id: parseInt(id, 10)
      },
      include: {
        subAccounts: true,
        transactions: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[69]++;
    if (!existingAccount) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[28][0]++;
      cov_2bhih41kwf().s[70]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[28][1]++;
    }
    // Check if account has sub-accounts
    cov_2bhih41kwf().s[71]++;
    if (existingAccount.subAccounts.length > 0) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[29][0]++;
      cov_2bhih41kwf().s[72]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete account with sub-accounts. Please delete or reassign sub-accounts first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[29][1]++;
    }
    // Check if account has transactions
    cov_2bhih41kwf().s[73]++;
    if (existingAccount.transactions.length > 0) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[30][0]++;
      cov_2bhih41kwf().s[74]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete account with existing transactions. Please delete or reassign transactions first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[30][1]++;
    }
    // Delete the account
    cov_2bhih41kwf().s[75]++;
    await _prisma.default.account.delete({
      where: {
        id: parseInt(id, 10)
      }
    });
    /* istanbul ignore next */
    cov_2bhih41kwf().s[76]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[77]++;
    console.error("Error deleting account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[78]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[31][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[31][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,