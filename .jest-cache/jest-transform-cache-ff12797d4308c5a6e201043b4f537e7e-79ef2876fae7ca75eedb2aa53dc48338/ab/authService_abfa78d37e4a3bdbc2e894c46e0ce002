668daff7e61c85876139665d6fcc41a7
"use strict";

/* istanbul ignore next */
function cov_y22h5fuwr() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/authService.ts";
  var hash = "291b9fb5f40ecf910195698ecac0c8f197266bce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 27
        }
      },
      "11": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 86
        }
      },
      "12": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 78
        }
      },
      "13": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "14": {
        start: {
          line: 37,
          column: 15
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "15": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 56
        }
      },
      "16": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 6
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 51
        }
      },
      "18": {
        start: {
          line: 45,
          column: 39
        },
        end: {
          line: 45,
          column: 51
        }
      },
      "19": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 46,
          column: 41
        }
      },
      "20": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 47,
          column: 40
        }
      },
      "21": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 20
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 66
        }
      },
      "23": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "24": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "25": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "27": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 53
        }
      },
      "28": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "29": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 30
        }
      },
      "30": {
        start: {
          line: 65,
          column: 17
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "31": {
        start: {
          line: 68,
          column: 32
        },
        end: {
          line: 68,
          column: 88
        }
      },
      "32": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "33": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "34": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 71,
          column: 95
        }
      },
      "35": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "36": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "37": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "38": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 25
        }
      },
      "39": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "40": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 31
        }
      },
      "41": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 18
        }
      },
      "42": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "43": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "44": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "45": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "46": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 37
        }
      },
      "47": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "48": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 116
        }
      },
      "49": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 94
        }
      },
      "50": {
        start: {
          line: 96,
          column: 45
        },
        end: {
          line: 96,
          column: 92
        }
      },
      "51": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 25
        }
      },
      "52": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "53": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 44
        }
      },
      "54": {
        start: {
          line: 106,
          column: 19
        },
        end: {
          line: 106,
          column: 62
        }
      },
      "55": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 71
        }
      },
      "56": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "57": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "58": {
        start: {
          line: 110,
          column: 18
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "59": {
        start: {
          line: 111,
          column: 21
        },
        end: {
          line: 111,
          column: 38
        }
      },
      "60": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 46
        }
      },
      "61": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 29
        }
      },
      "62": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 29
        }
      },
      "63": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "64": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "65": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 28
        }
      },
      "66": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 33
        }
      },
      "67": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 38
        }
      },
      "68": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 68
        }
      },
      "69": {
        start: {
          line: 124,
          column: 43
        },
        end: {
          line: 124,
          column: 68
        }
      },
      "70": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 21
        }
      },
      "71": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 239,
          column: 1
        }
      },
      "72": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "73": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 50
        }
      },
      "74": {
        start: {
          line: 132,
          column: 21
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "75": {
        start: {
          line: 132,
          column: 48
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "76": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 53
        }
      },
      "77": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "78": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "79": {
        start: {
          line: 158,
          column: 32
        },
        end: {
          line: 158,
          column: 80
        }
      },
      "80": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "81": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "82": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 166,
          column: 28
        }
      },
      "83": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "84": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 65
        }
      },
      "85": {
        start: {
          line: 168,
          column: 57
        },
        end: {
          line: 168,
          column: 63
        }
      },
      "86": {
        start: {
          line: 169,
          column: 15
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "87": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "88": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 174,
          column: 18
        }
      },
      "89": {
        start: {
          line: 177,
          column: 43
        },
        end: {
          line: 177,
          column: 119
        }
      },
      "90": {
        start: {
          line: 177,
          column: 70
        },
        end: {
          line: 177,
          column: 93
        }
      },
      "91": {
        start: {
          line: 177,
          column: 108
        },
        end: {
          line: 177,
          column: 118
        }
      },
      "92": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "93": {
        start: {
          line: 179,
          column: 46
        },
        end: {
          line: 188,
          column: 27
        }
      },
      "94": {
        start: {
          line: 179,
          column: 73
        },
        end: {
          line: 188,
          column: 26
        }
      },
      "95": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 69
        }
      },
      "96": {
        start: {
          line: 189,
          column: 61
        },
        end: {
          line: 189,
          column: 67
        }
      },
      "97": {
        start: {
          line: 194,
          column: 22
        },
        end: {
          line: 201,
          column: 10
        }
      },
      "98": {
        start: {
          line: 202,
          column: 28
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "99": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 216,
          column: 10
        }
      },
      "100": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 99
        }
      },
      "101": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 231,
          column: 10
        }
      },
      "102": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 54
        }
      },
      "103": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "104": {
        start: {
          line: 240,
          column: 22
        },
        end: {
          line: 244,
          column: 1
        }
      },
      "105": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 243,
          column: 7
        }
      },
      "106": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 278,
          column: 1
        }
      },
      "107": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "108": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 48
        }
      },
      "109": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "110": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "111": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "112": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 257,
          column: 14
        }
      },
      "113": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 259,
          column: 72
        }
      },
      "114": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "115": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 36
        }
      },
      "116": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 103
        }
      },
      "117": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 23
        }
      },
      "118": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "119": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 81
        }
      },
      "120": {
        start: {
          line: 271,
          column: 15
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "121": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 79
        }
      },
      "122": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 70
        }
      },
      "123": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 20
        }
      },
      "124": {
        start: {
          line: 279,
          column: 22
        },
        end: {
          line: 324,
          column: 1
        }
      },
      "125": {
        start: {
          line: 282,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "126": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "127": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 24
        }
      },
      "128": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 290,
          column: 6
        }
      },
      "129": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 322,
          column: 5
        }
      },
      "130": {
        start: {
          line: 292,
          column: 34
        },
        end: {
          line: 292,
          column: 84
        }
      },
      "131": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "132": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 82
        }
      },
      "133": {
        start: {
          line: 297,
          column: 21
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "134": {
        start: {
          line: 297,
          column: 48
        },
        end: {
          line: 313,
          column: 14
        }
      },
      "135": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "136": {
        start: {
          line: 315,
          column: 32
        },
        end: {
          line: 315,
          column: 70
        }
      },
      "137": {
        start: {
          line: 315,
          column: 63
        },
        end: {
          line: 315,
          column: 69
        }
      },
      "138": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 118
        }
      },
      "139": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 76
        }
      },
      "140": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 60
        }
      },
      "141": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 323,
          column: 17
        }
      },
      "142": {
        start: {
          line: 325,
          column: 34
        },
        end: {
          line: 383,
          column: 1
        }
      },
      "143": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 326,
          column: 72
        }
      },
      "144": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 330,
          column: 5
        }
      },
      "145": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 85
        }
      },
      "146": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 20
        }
      },
      "147": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 334,
          column: 5
        }
      },
      "148": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 67
        }
      },
      "149": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 20
        }
      },
      "150": {
        start: {
          line: 335,
          column: 19
        },
        end: {
          line: 335,
          column: 30
        }
      },
      "151": {
        start: {
          line: 336,
          column: 21
        },
        end: {
          line: 338,
          column: 6
        }
      },
      "152": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 382,
          column: 5
        }
      },
      "153": {
        start: {
          line: 341,
          column: 27
        },
        end: {
          line: 341,
          column: 66
        }
      },
      "154": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "155": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 56
        }
      },
      "156": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 30
        }
      },
      "157": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 56
        }
      },
      "158": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 55
        }
      },
      "159": {
        start: {
          line: 348,
          column: 21
        },
        end: {
          line: 364,
          column: 15
        }
      },
      "160": {
        start: {
          line: 348,
          column: 48
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "161": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 58
        }
      },
      "162": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "163": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 60
        }
      },
      "164": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 24
        }
      },
      "165": {
        start: {
          line: 370,
          column: 36
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "166": {
        start: {
          line: 373,
          column: 56
        },
        end: {
          line: 373,
          column: 62
        }
      },
      "167": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 107
        }
      },
      "168": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 66
        }
      },
      "169": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 35
        }
      },
      "170": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 73
        }
      },
      "171": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 20
        }
      },
      "172": {
        start: {
          line: 384,
          column: 25
        },
        end: {
          line: 387,
          column: 1
        }
      },
      "173": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 385,
          column: 44
        }
      },
      "174": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 386,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 23
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 20
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 32
          }
        },
        loc: {
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 20
          }
        },
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 31
          }
        },
        loc: {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 17
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 33
          }
        },
        loc: {
          start: {
            line: 39,
            column: 39
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 39
      },
      "9": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 33
          }
        },
        loc: {
          start: {
            line: 44,
            column: 47
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 44
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 48,
            column: 40
          }
        },
        loc: {
          start: {
            line: 48,
            column: 61
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "11": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 34
          }
        },
        loc: {
          start: {
            line: 52,
            column: 53
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 52
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 30
          }
        },
        loc: {
          start: {
            line: 87,
            column: 64
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 87
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 96,
            column: 35
          }
        },
        loc: {
          start: {
            line: 96,
            column: 45
          },
          end: {
            line: 96,
            column: 92
          }
        },
        line: 96
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 109,
            column: 33
          },
          end: {
            line: 109,
            column: 34
          }
        },
        loc: {
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 109
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 128,
            column: 26
          }
        },
        loc: {
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 128
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 132,
            column: 44
          },
          end: {
            line: 132,
            column: 45
          }
        },
        loc: {
          start: {
            line: 132,
            column: 48
          },
          end: {
            line: 148,
            column: 14
          }
        },
        line: 132
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 168,
            column: 52
          },
          end: {
            line: 168,
            column: 53
          }
        },
        loc: {
          start: {
            line: 168,
            column: 57
          },
          end: {
            line: 168,
            column: 63
          }
        },
        line: 168
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 177,
            column: 64
          },
          end: {
            line: 177,
            column: 65
          }
        },
        loc: {
          start: {
            line: 177,
            column: 70
          },
          end: {
            line: 177,
            column: 93
          }
        },
        line: 177
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 177,
            column: 102
          },
          end: {
            line: 177,
            column: 103
          }
        },
        loc: {
          start: {
            line: 177,
            column: 108
          },
          end: {
            line: 177,
            column: 118
          }
        },
        line: 177
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 179,
            column: 69
          },
          end: {
            line: 179,
            column: 70
          }
        },
        loc: {
          start: {
            line: 179,
            column: 73
          },
          end: {
            line: 188,
            column: 26
          }
        },
        line: 179
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 189,
            column: 56
          },
          end: {
            line: 189,
            column: 57
          }
        },
        loc: {
          start: {
            line: 189,
            column: 61
          },
          end: {
            line: 189,
            column: 67
          }
        },
        line: 189
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 240,
            column: 22
          },
          end: {
            line: 240,
            column: 23
          }
        },
        loc: {
          start: {
            line: 240,
            column: 33
          },
          end: {
            line: 244,
            column: 1
          }
        },
        line: 240
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 245,
            column: 20
          },
          end: {
            line: 245,
            column: 21
          }
        },
        loc: {
          start: {
            line: 245,
            column: 35
          },
          end: {
            line: 278,
            column: 1
          }
        },
        line: 245
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 279,
            column: 22
          },
          end: {
            line: 279,
            column: 23
          }
        },
        loc: {
          start: {
            line: 279,
            column: 56
          },
          end: {
            line: 324,
            column: 1
          }
        },
        line: 279
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 297,
            column: 44
          },
          end: {
            line: 297,
            column: 45
          }
        },
        loc: {
          start: {
            line: 297,
            column: 48
          },
          end: {
            line: 313,
            column: 14
          }
        },
        line: 297
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 315,
            column: 58
          },
          end: {
            line: 315,
            column: 59
          }
        },
        loc: {
          start: {
            line: 315,
            column: 63
          },
          end: {
            line: 315,
            column: 69
          }
        },
        line: 315
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 325,
            column: 34
          },
          end: {
            line: 325,
            column: 35
          }
        },
        loc: {
          start: {
            line: 325,
            column: 51
          },
          end: {
            line: 383,
            column: 1
          }
        },
        line: 325
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 348,
            column: 44
          },
          end: {
            line: 348,
            column: 45
          }
        },
        loc: {
          start: {
            line: 348,
            column: 48
          },
          end: {
            line: 364,
            column: 14
          }
        },
        line: 348
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 373,
            column: 51
          },
          end: {
            line: 373,
            column: 52
          }
        },
        loc: {
          start: {
            line: 373,
            column: 56
          },
          end: {
            line: 373,
            column: 62
          }
        },
        line: 373
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 384,
            column: 25
          },
          end: {
            line: 384,
            column: 26
          }
        },
        loc: {
          start: {
            line: 384,
            column: 40
          },
          end: {
            line: 387,
            column: 1
          }
        },
        line: 384
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 11
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 35
          },
          end: {
            line: 40,
            column: 38
          }
        }, {
          start: {
            line: 40,
            column: 41
          },
          end: {
            line: 42,
            column: 5
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 11
          },
          end: {
            line: 40,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 11
          },
          end: {
            line: 40,
            column: 14
          }
        }, {
          start: {
            line: 40,
            column: 18
          },
          end: {
            line: 40,
            column: 32
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 49,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 49,
            column: 45
          }
        }, {
          start: {
            line: 49,
            column: 48
          },
          end: {
            line: 49,
            column: 65
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 20
          }
        }, {
          start: {
            line: 53,
            column: 24
          },
          end: {
            line: 53,
            column: 27
          }
        }, {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 53,
            column: 45
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 20
          }
        }, {
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 56,
            column: 47
          }
        }, {
          start: {
            line: 56,
            column: 51
          },
          end: {
            line: 56,
            column: 76
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 62,
            column: 31
          }
        }],
        line: 62
      },
      "10": {
        loc: {
          start: {
            line: 68,
            column: 32
          },
          end: {
            line: 68,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 32
          },
          end: {
            line: 68,
            column: 53
          }
        }, {
          start: {
            line: 68,
            column: 57
          },
          end: {
            line: 68,
            column: 88
          }
        }],
        line: 68
      },
      "11": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "12": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 29
          }
        }, {
          start: {
            line: 70,
            column: 33
          },
          end: {
            line: 70,
            column: 79
          }
        }],
        line: 70
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 71,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 47
          },
          end: {
            line: 71,
            column: 88
          }
        }, {
          start: {
            line: 71,
            column: 91
          },
          end: {
            line: 71,
            column: 95
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 76,
            column: 13
          }
        }],
        line: 72
      },
      "15": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 20
          }
        }, {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 72,
            column: 33
          }
        }, {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 45
          }
        }],
        line: 72
      },
      "16": {
        loc: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "17": {
        loc: {
          start: {
            line: 87,
            column: 47
          },
          end: {
            line: 87,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 60
          },
          end: {
            line: 87,
            column: 61
          }
        }],
        line: 87
      },
      "18": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "19": {
        loc: {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 39
          }
        }, {
          start: {
            line: 93,
            column: 43
          },
          end: {
            line: 93,
            column: 63
          }
        }],
        line: 93
      },
      "20": {
        loc: {
          start: {
            line: 106,
            column: 19
          },
          end: {
            line: 106,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 19
          },
          end: {
            line: 106,
            column: 41
          }
        }, {
          start: {
            line: 106,
            column: 45
          },
          end: {
            line: 106,
            column: 62
          }
        }],
        line: 106
      },
      "21": {
        loc: {
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 108,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 108,
            column: 62
          }
        }, {
          start: {
            line: 108,
            column: 66
          },
          end: {
            line: 108,
            column: 71
          }
        }],
        line: 108
      },
      "22": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "23": {
        loc: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "24": {
        loc: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 116,
            column: 23
          }
        }, {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 118,
            column: 28
          }
        }, {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 120,
            column: 33
          }
        }, {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 122,
            column: 38
          }
        }, {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 21
          }
        }],
        line: 114
      },
      "25": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "26": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "27": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "28": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 192,
            column: 9
          }
        }],
        line: 167
      },
      "29": {
        loc: {
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "30": {
        loc: {
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 169,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 169,
            column: 35
          }
        }, {
          start: {
            line: 169,
            column: 39
          },
          end: {
            line: 169,
            column: 70
          }
        }],
        line: 169
      },
      "31": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: 175,
            column: 19
          },
          end: {
            line: 191,
            column: 13
          }
        }],
        line: 171
      },
      "32": {
        loc: {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "33": {
        loc: {
          start: {
            line: 208,
            column: 22
          },
          end: {
            line: 208,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 22
          },
          end: {
            line: 208,
            column: 37
          }
        }, {
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 208,
            column: 54
          }
        }, {
          start: {
            line: 208,
            column: 58
          },
          end: {
            line: 208,
            column: 62
          }
        }],
        line: 208
      },
      "34": {
        loc: {
          start: {
            line: 227,
            column: 26
          },
          end: {
            line: 227,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 26
          },
          end: {
            line: 227,
            column: 41
          }
        }, {
          start: {
            line: 227,
            column: 45
          },
          end: {
            line: 227,
            column: 58
          }
        }, {
          start: {
            line: 227,
            column: 62
          },
          end: {
            line: 227,
            column: 66
          }
        }],
        line: 227
      },
      "35": {
        loc: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "36": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 247,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 247,
            column: 14
          }
        }, {
          start: {
            line: 247,
            column: 18
          },
          end: {
            line: 247,
            column: 37
          }
        }],
        line: 247
      },
      "37": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "38": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "39": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: 271,
            column: 15
          },
          end: {
            line: 275,
            column: 9
          }
        }],
        line: 269
      },
      "40": {
        loc: {
          start: {
            line: 271,
            column: 15
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 15
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: 273,
            column: 15
          },
          end: {
            line: 275,
            column: 9
          }
        }],
        line: 271
      },
      "41": {
        loc: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "42": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "43": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "44": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "45": {
        loc: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "46": {
        loc: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "47": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "48": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],
      sourcesContent: ["import * as jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\nimport prisma from '../lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '../lib/cache';\nimport { hasPermission as checkPermission } from '../lib/utils/permissions';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index with retry logic\n        const user = await executeWithRetry(() => \n            prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            })\n        ) as any;\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from role (handle case where user has no role)\n        let permissions: string[] = [];\n        if (user.role?.permissions) {\n            permissions = user.role.permissions.map(p => p.name);\n        } else if (user.permissions && Array.isArray(user.permissions)) {\n            // Handle special case for \"ALL\" permissions\n            if (user.permissions.includes('ALL')) {\n                permissions = ['ALL'];\n            } else {\n                // Convert permission IDs to names, filtering out invalid values\n                const validPermissionIds = user.permissions\n                    .map(id => parseInt(id.toString()))\n                    .filter(id => !isNaN(id));\n                \n                if (validPermissionIds.length > 0) {\n                    const permissionRecords = await executeWithRetry(() =>\n                        prisma.permission.findMany({\n                            where: {\n                                id: {\n                                    in: validPermissionIds\n                                }\n                            },\n                            select: { name: true }\n                        })\n                    );\n                    permissions = (permissionRecords as any[]).map((p: any) => p.name);\n                }\n            }\n        }\n\n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            shopId: user.shopId,\n            permissions\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            shopId: user.shopId,\n            permissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET as string, { expiresIn: JWT_EXPIRES_IN as any });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    // Validate token input\n    if (!token || token.trim() === '') {\n        throw new Error('jwt must be provided');\n    }\n\n    try {\n        // Verify token first\n        const decoded = jwt.verify(token, JWT_SECRET) as unknown as TokenPayload;\n\n        // Only generate cache key for valid tokens (ensure token is long enough for substring)\n        if (token.length >= 20) {\n            const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n            \n            // Check cache first for token validation result\n            const cachedResult = await cacheService.get(tokenKey);\n            if (cachedResult) {\n                return cachedResult as TokenPayload;\n            }\n\n            // Cache the valid token payload (shorter TTL for security)\n            await cacheService.set(tokenKey, decoded, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n        }\n\n        return decoded;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Use the imported permission checking utility\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: { id: String(tokenPayload.sub), isActive: true },\n                include: {\n                    role: {\n                        include: {\n                            permissions: { select: { name: true } }\n                        }\n                    }\n                }\n            })\n        ) as any;\n\n        if (user) {\n            const permissions = user.role.permissions.map((p: any) => p.name);\n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        return null;\n    }\n\n    const userId = payload.sub;\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            })\n        ) as any;\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role.name,\n            permissions: user.role.permissions.map((p: any) => p.name)\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],
      names: ["authenticateUser", "generateToken", "getUserFromDecodedPayload", "getUserFromToken", "hasPermission", "parseTimeStringToSeconds", "verifyToken", "executeWithRetry", "operation", "maxRetries", "attempt", "error", "code", "console", "log", "Promise", "resolve", "setTimeout", "Math", "pow", "Error", "JWT_SECRET", "process", "env", "JWT_EXPIRES_IN", "JWT_ACCESS_TOKEN_EXPIRES_IN", "timeStr", "lastChar", "slice", "num", "parseInt", "isNaN", "email", "password", "time", "user", "prisma", "findFirst", "where", "isActive", "include", "role", "permissions", "select", "name", "timeEnd", "success", "message", "isPasswordValid", "bcrypt", "compare", "map", "p", "Array", "isArray", "includes", "validPermissionIds", "id", "toString", "filter", "length", "permissionRecords", "permission", "findMany", "in", "token", "sub", "username", "roleId", "shopId", "userSession", "fullName", "roleName", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "USER_SESSION", "userId", "set", "TTL", "payload", "jwt", "sign", "expiresIn", "trim", "decoded", "verify", "tokenKey", "TOKEN_VALIDATION", "substring", "cachedResult", "get", "TokenExpiredError", "expiredAt", "JsonWebTokenError", "tokenPayload", "checkPermission", "permissionsCacheKey", "USER_PERMISSIONS", "cachedPermissions", "String", "cachedUser", "userWithPermissions"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "291b9fb5f40ecf910195698ecac0c8f197266bce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_y22h5fuwr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_y22h5fuwr();
cov_y22h5fuwr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[0]++;
  cov_y22h5fuwr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_y22h5fuwr().s[3]++;
_export(exports, {
  authenticateUser: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[1]++;
    cov_y22h5fuwr().s[4]++;
    return authenticateUser;
  },
  generateToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[2]++;
    cov_y22h5fuwr().s[5]++;
    return generateToken;
  },
  getUserFromDecodedPayload: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[3]++;
    cov_y22h5fuwr().s[6]++;
    return getUserFromDecodedPayload;
  },
  getUserFromToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[4]++;
    cov_y22h5fuwr().s[7]++;
    return getUserFromToken;
  },
  hasPermission: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[5]++;
    cov_y22h5fuwr().s[8]++;
    return hasPermission;
  },
  parseTimeStringToSeconds: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[6]++;
    cov_y22h5fuwr().s[9]++;
    return parseTimeStringToSeconds;
  },
  verifyToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[7]++;
    cov_y22h5fuwr().s[10]++;
    return verifyToken;
  }
});
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[11]++, _interop_require_wildcard(require("jsonwebtoken")));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[12]++, _interop_require_wildcard(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[13]++, _interop_require_default(require("../lib/prisma")));
const _cache =
/* istanbul ignore next */
(cov_y22h5fuwr().s[14]++, require("../lib/cache"));
const _permissions =
/* istanbul ignore next */
(cov_y22h5fuwr().s[15]++, require("../lib/utils/permissions"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[8]++;
  cov_y22h5fuwr().s[16]++;
  return /* istanbul ignore next */(cov_y22h5fuwr().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[0][1]++, {
    default: obj
  });
}
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[9]++;
  cov_y22h5fuwr().s[17]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[2][0]++;
    cov_y22h5fuwr().s[18]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[2][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[19]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[20]++, new WeakMap());
  /* istanbul ignore next */
  cov_y22h5fuwr().s[21]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[10]++;
    cov_y22h5fuwr().s[22]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[3][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[3][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[11]++;
  cov_y22h5fuwr().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][1]++, obj) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[4][0]++;
    cov_y22h5fuwr().s[24]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[4][1]++;
  }
  cov_y22h5fuwr().s[25]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[6][0]++;
    cov_y22h5fuwr().s[26]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[6][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[27]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[28]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[9][0]++, cache) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[9][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[8][0]++;
    cov_y22h5fuwr().s[29]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[8][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[30]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[31]++,
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[10][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[10][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[32]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[12][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[12][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[11][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[34]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][1]++, null));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[35]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][0]++, desc) && (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[14][0]++;
        cov_y22h5fuwr().s[36]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[14][1]++;
        cov_y22h5fuwr().s[37]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[11][1]++;
    }
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[38]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_y22h5fuwr().s[39]++;
  if (cache) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[16][0]++;
    cov_y22h5fuwr().s[40]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[16][1]++;
  }
  cov_y22h5fuwr().s[41]++;
  return newObj;
}
/**
 * Helper function to execute Prisma queries with retry logic for prepared statement conflicts
 */
/* istanbul ignore next */
cov_y22h5fuwr().s[42]++;
const executeWithRetry = async (operation, maxRetries =
/* istanbul ignore next */
(cov_y22h5fuwr().b[17][0]++, 3)) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[12]++;
  cov_y22h5fuwr().s[43]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[44]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[45]++;
    try {
      /* istanbul ignore next */
      cov_y22h5fuwr().s[46]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_y22h5fuwr().s[47]++;
      // Check if this is a prepared statement conflict error
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[19][0]++, error?.code === "42P05") &&
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[19][1]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[18][0]++;
        cov_y22h5fuwr().s[48]++;
        console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);
        // Exponential backoff: wait longer between retries
        /* istanbul ignore next */
        cov_y22h5fuwr().s[49]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_y22h5fuwr().f[13]++;
          cov_y22h5fuwr().s[50]++;
          return setTimeout(resolve, Math.pow(2, attempt) * 100);
        });
        /* istanbul ignore next */
        cov_y22h5fuwr().s[51]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[18][1]++;
      }
      // If it's not a retryable error or we've exhausted retries, throw the error
      cov_y22h5fuwr().s[52]++;
      throw error;
    }
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[53]++;
  throw new Error("Max retries exceeded");
};
// Secret key for JWT - should be moved to environment variables in production
const JWT_SECRET =
/* istanbul ignore next */
(cov_y22h5fuwr().s[54]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[20][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[20][1]++, "your-secret-key"));
// Changed token expiration to 12h (from 24h) for better security
const JWT_EXPIRES_IN =
/* istanbul ignore next */
(cov_y22h5fuwr().s[55]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[21][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[21][1]++, "12h"));
/* istanbul ignore next */
cov_y22h5fuwr().s[56]++;
const parseTimeStringToSeconds = timeStr => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[14]++;
  cov_y22h5fuwr().s[57]++;
  if (!timeStr) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[22][0]++;
    cov_y22h5fuwr().s[58]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[22][1]++;
  }
  const lastChar =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[59]++, timeStr.slice(-1));
  const num =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[60]++, parseInt(timeStr.slice(0, -1)));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[61]++;
  if (isNaN(num)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[23][0]++;
    cov_y22h5fuwr().s[62]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[23][1]++;
  }
  cov_y22h5fuwr().s[63]++;
  switch (lastChar) {
    case "s":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][0]++;
      cov_y22h5fuwr().s[64]++;
      return num;
    case "m":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][1]++;
      cov_y22h5fuwr().s[65]++;
      return num * 60;
    case "h":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][2]++;
      cov_y22h5fuwr().s[66]++;
      return num * 60 * 60;
    case "d":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][3]++;
      cov_y22h5fuwr().s[67]++;
      return num * 60 * 60 * 24;
    default:
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][4]++;
      cov_y22h5fuwr().s[68]++;
      if (!isNaN(parseInt(timeStr))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[25][0]++;
        cov_y22h5fuwr().s[69]++;
        return parseInt(timeStr);
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[25][1]++;
      }
      cov_y22h5fuwr().s[70]++;
      return 0;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[71]++;
const authenticateUser = async (email, password) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[15]++;
  cov_y22h5fuwr().s[72]++;
  try {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[73]++;
    console.time("user authentication query");
    // Optimized single query using the new composite index with retry logic
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[74]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[16]++;
      cov_y22h5fuwr().s[75]++;
      return _prisma.default.user.findFirst({
        where: {
          email: email,
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[76]++;
    console.timeEnd("user authentication query");
    // If user not found
    /* istanbul ignore next */
    cov_y22h5fuwr().s[77]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[26][0]++;
      cov_y22h5fuwr().s[78]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[26][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[79]++, await _bcryptjs.compare(password, user.password));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[80]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[27][0]++;
      cov_y22h5fuwr().s[81]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[27][1]++;
    }
    // Get permissions from role (handle case where user has no role)
    let permissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[82]++, []);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[83]++;
    if (user.role?.permissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[28][0]++;
      cov_y22h5fuwr().s[84]++;
      permissions = user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[17]++;
        cov_y22h5fuwr().s[85]++;
        return p.name;
      });
    } else {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[28][1]++;
      cov_y22h5fuwr().s[86]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[30][0]++, user.permissions) &&
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[30][1]++, Array.isArray(user.permissions))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[29][0]++;
        cov_y22h5fuwr().s[87]++;
        // Handle special case for "ALL" permissions
        if (user.permissions.includes("ALL")) {
          /* istanbul ignore next */
          cov_y22h5fuwr().b[31][0]++;
          cov_y22h5fuwr().s[88]++;
          permissions = ["ALL"];
        } else {
          /* istanbul ignore next */
          cov_y22h5fuwr().b[31][1]++;
          // Convert permission IDs to names, filtering out invalid values
          const validPermissionIds =
          /* istanbul ignore next */
          (cov_y22h5fuwr().s[89]++, user.permissions.map(id => {
            /* istanbul ignore next */
            cov_y22h5fuwr().f[18]++;
            cov_y22h5fuwr().s[90]++;
            return parseInt(id.toString());
          }).filter(id => {
            /* istanbul ignore next */
            cov_y22h5fuwr().f[19]++;
            cov_y22h5fuwr().s[91]++;
            return !isNaN(id);
          }));
          /* istanbul ignore next */
          cov_y22h5fuwr().s[92]++;
          if (validPermissionIds.length > 0) {
            /* istanbul ignore next */
            cov_y22h5fuwr().b[32][0]++;
            const permissionRecords =
            /* istanbul ignore next */
            (cov_y22h5fuwr().s[93]++, await executeWithRetry(() => {
              /* istanbul ignore next */
              cov_y22h5fuwr().f[20]++;
              cov_y22h5fuwr().s[94]++;
              return _prisma.default.permission.findMany({
                where: {
                  id: {
                    in: validPermissionIds
                  }
                },
                select: {
                  name: true
                }
              });
            }));
            /* istanbul ignore next */
            cov_y22h5fuwr().s[95]++;
            permissions = permissionRecords.map(p => {
              /* istanbul ignore next */
              cov_y22h5fuwr().f[21]++;
              cov_y22h5fuwr().s[96]++;
              return p.name;
            });
          } else
          /* istanbul ignore next */
          {
            cov_y22h5fuwr().b[32][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[29][1]++;
      }
    }
    // Generate JWT token
    const token =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[97]++, generateToken({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      shopId: user.shopId,
      permissions
    }));
    const userSession =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[98]++, {
      id: user.id,
      username: user.name,
      fullName: user.name,
      email: user.email,
      roleId: user.roleId,
      roleName:
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[33][0]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[33][1]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[33][2]++, null),
      shopId: user.shopId,
      permissions,
      role: user.role
    });
    // Cache user session for faster subsequent requests
    const cacheKey =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[99]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
      userId: user.id
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[100]++;
    await _cache.cacheService.set(cacheKey, userSession, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[101]++;
    return {
      success: true,
      token,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName:
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[34][0]++, user.role?.name) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[34][1]++, user.roleName) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[34][2]++, null),
        shopId: user.shopId,
        permissions
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[102]++;
    console.error("Authentication error:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[103]++;
    return {
      success: false,
      message: "Authentication failed"
    };
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[104]++;
const generateToken = payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[22]++;
  cov_y22h5fuwr().s[105]++;
  return _jsonwebtoken.sign(payload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN
  });
};
/* istanbul ignore next */
cov_y22h5fuwr().s[106]++;
const verifyToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[23]++;
  cov_y22h5fuwr().s[107]++;
  // Validate token input
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[36][0]++, !token) ||
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[36][1]++, token.trim() === "")) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[35][0]++;
    cov_y22h5fuwr().s[108]++;
    throw new Error("jwt must be provided");
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[35][1]++;
  }
  cov_y22h5fuwr().s[109]++;
  try {
    // Verify token first
    const decoded =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[110]++, _jsonwebtoken.verify(token, JWT_SECRET));
    // Only generate cache key for valid tokens (ensure token is long enough for substring)
    /* istanbul ignore next */
    cov_y22h5fuwr().s[111]++;
    if (token.length >= 20) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[37][0]++;
      const tokenKey =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[112]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.TOKEN_VALIDATION, {
        token: token.substring(0, 20)
      }));
      // Check cache first for token validation result
      const cachedResult =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[113]++, await _cache.cacheService.get(tokenKey));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[114]++;
      if (cachedResult) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[38][0]++;
        cov_y22h5fuwr().s[115]++;
        return cachedResult;
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[38][1]++;
      }
      // Cache the valid token payload (shorter TTL for security)
      cov_y22h5fuwr().s[116]++;
      await _cache.cacheService.set(tokenKey, decoded, _cache.CACHE_CONFIG.TTL.TOKEN_VALIDATION);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[37][1]++;
    }
    cov_y22h5fuwr().s[117]++;
    return decoded;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[118]++;
    // Log the error here if desired
    if (error instanceof _jsonwebtoken.TokenExpiredError) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[39][0]++;
      cov_y22h5fuwr().s[119]++;
      console.error("Token expired during verification:", error.expiredAt);
    } else {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[39][1]++;
      cov_y22h5fuwr().s[120]++;
      if (error instanceof _jsonwebtoken.JsonWebTokenError) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[40][0]++;
        cov_y22h5fuwr().s[121]++;
        console.error("Invalid token during verification:", error.message);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[40][1]++;
        cov_y22h5fuwr().s[122]++;
        console.error("Unknown token verification error:", error);
      }
    }
    /* istanbul ignore next */
    cov_y22h5fuwr().s[123]++;
    throw error; // Re-throw the error
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[124]++;
const hasPermission = async (tokenPayload, permission) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[24]++;
  cov_y22h5fuwr().s[125]++;
  // Use the imported permission checking utility
  // Quick check from token payload first
  if (tokenPayload.permissions) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[41][0]++;
    cov_y22h5fuwr().s[126]++;
    if ((0, _permissions.hasPermission)(tokenPayload.permissions, permission)) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[42][0]++;
      cov_y22h5fuwr().s[127]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[42][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[41][1]++;
  }
  // If not in token, check cached user permissions
  const permissionsCacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[128]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_PERMISSIONS, {
    userId: tokenPayload.sub
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[129]++;
  try {
    const cachedPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[130]++, await _cache.cacheService.get(permissionsCacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[131]++;
    if (cachedPermissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[43][0]++;
      cov_y22h5fuwr().s[132]++;
      return (0, _permissions.hasPermission)(cachedPermissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[43][1]++;
    }
    // Fallback to database query if not cached
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[133]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[25]++;
      cov_y22h5fuwr().s[134]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(tokenPayload.sub),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[135]++;
    if (user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[44][0]++;
      const permissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[136]++, user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[26]++;
        cov_y22h5fuwr().s[137]++;
        return p.name;
      }));
      // Cache permissions for future checks
      /* istanbul ignore next */
      cov_y22h5fuwr().s[138]++;
      await _cache.cacheService.set(permissionsCacheKey, permissions, _cache.CACHE_CONFIG.TTL.USER_PERMISSIONS);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[139]++;
      return (0, _permissions.hasPermission)(permissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[44][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[140]++;
    console.error("Error checking permissions:", error);
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[141]++;
  return false;
};
/* istanbul ignore next */
cov_y22h5fuwr().s[142]++;
const getUserFromDecodedPayload = async payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[27]++;
  cov_y22h5fuwr().s[143]++;
  console.log("getUserFromDecodedPayload received payload:", payload);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[144]++;
  if (!payload) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[45][0]++;
    cov_y22h5fuwr().s[145]++;
    console.error("Invalid token payload provided to getUserFromDecodedPayload");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[146]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[45][1]++;
  }
  cov_y22h5fuwr().s[147]++;
  if (!payload.sub) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[46][0]++;
    cov_y22h5fuwr().s[148]++;
    console.error("Token payload missing user ID (sub claim)");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[149]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[46][1]++;
  }
  const userId =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[150]++, payload.sub);
  const cacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[151]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
    userId
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[152]++;
  try {
    // Try to get user from cache first
    const cachedUser =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[153]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[154]++;
    if (cachedUser) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[47][0]++;
      cov_y22h5fuwr().s[155]++;
      console.log("User found in cache:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[156]++;
      return cachedUser;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[47][1]++;
    }
    cov_y22h5fuwr().s[157]++;
    console.log("Looking up user with ID:", userId);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[158]++;
    console.time("prisma.user.findFirst for auth"); // Start timer
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[159]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[28]++;
      cov_y22h5fuwr().s[160]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(userId),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[161]++;
    console.timeEnd("prisma.user.findFirst for auth"); // End timer
    /* istanbul ignore next */
    cov_y22h5fuwr().s[162]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[48][0]++;
      cov_y22h5fuwr().s[163]++;
      console.error("User not found for ID:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[164]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[48][1]++;
    }
    const userWithPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[165]++, {
      ...user,
      roleName: user.role.name,
      permissions: user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[29]++;
        cov_y22h5fuwr().s[166]++;
        return p.name;
      })
    });
    // Cache the user session
    /* istanbul ignore next */
    cov_y22h5fuwr().s[167]++;
    await _cache.cacheService.set(cacheKey, userWithPermissions, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[168]++;
    console.log("User found and cached:", user.id, user.name);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[169]++;
    return userWithPermissions;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[170]++;
    console.error("Error getting user from decoded payload:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[171]++;
    return null;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[172]++;
const getUserFromToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[30]++;
  const payload =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[173]++, await verifyToken(token));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[174]++;
  return getUserFromDecodedPayload(payload);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,