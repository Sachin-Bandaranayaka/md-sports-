{"version":3,"names":["GET","cov_22fgou357z","f","s","fetchTransfersData","fetchTransfersDataFiltered","startDate","endDate","shopId","dateFilter","b","gte","Date","endDateTime","setHours","lte","whereClause","Object","keys","length","createdAt","OR","fromShopId","toShopId","transfers","_prisma","safeQuery","prisma","inventoryTransfer","findMany","select","id","status","fromShop","name","toShop","transferItems","where","undefined","orderBy","take","data","map","transfer","String","padStart","source","destination","charAt","toUpperCase","slice","date","toISOString","split","items","success","periodDays","endOfDay","calculatedStartDate","setDate","getDate","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","searchParams","URL","url","startDateParam","get","endDateParam","isFiltered","now","dateRangeKey","cacheKey","console","time","cachedData","_cache","cacheService","timeEnd","log","meta","shopFiltered","fromCache","result","responseData","set","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Filtered version of fetchTransfersData with date range support\nexport async function fetchTransfersDataFiltered(startDate?: string | null, endDate?: string | null, shopId?: string | null) {\n    // Build date filter\n    const dateFilter: any = {};\n    if (startDate) {\n        dateFilter.gte = new Date(startDate);\n    }\n    if (endDate) {\n        const endDateTime = new Date(endDate);\n        endDateTime.setHours(23, 59, 59, 999);\n        dateFilter.lte = endDateTime;\n    }\n\n    // Build where clause with date and shop filtering\n    const whereClause: any = {};\n    if (Object.keys(dateFilter).length > 0) {\n        whereClause.createdAt = dateFilter;\n    }\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n\n    // Fetch inventory transfers with date and shop filtering\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true }\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 10 // Show more transfers when filtering by date\n        }),\n        [],\n        'Failed to fetch filtered transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport async function fetchTransfersData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    // Build where clause for shop and date filtering\n    const whereClause: any = {};\n    \n    // Add shop filtering\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n    \n    // Add date filtering based on provided dates\n    if (startDate && endDate) {\n        const endOfDay = new Date(endDate);\n        endOfDay.setHours(23, 59, 59, 999);\n        whereClause.createdAt = {\n            gte: startDate,\n            lte: endOfDay\n        };\n    } else if (periodDays) { // Fallback to periodDays if dates not provided\n        const calculatedStartDate = new Date();\n        calculatedStartDate.setDate(calculatedStartDate.getDate() - periodDays);\n        calculatedStartDate.setHours(0, 0, 0, 0);\n        \n        whereClause.createdAt = {\n            gte: calculatedStartDate\n        };\n    }\n\n    // Fetch recent inventory transfers using Prisma\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true } // Selecting id to count items\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 10 // Show more transfers when filtering by date\n        }),\n        [], // Empty array fallback\n        'Failed to fetch transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_transfers');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get query parameters\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n        const shopId = context.isFiltered ? context.shopId : null;\n        \n        // Determine date range\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n        // Check cache first with shop context and date range\n        const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n        const cacheKey = `dashboard:transfers:${shopId || 'all'}:${dateRangeKey}`;\n        \n        console.time('cache check');\n        const cachedData = await cacheService.get(cacheKey);\n        console.timeEnd('cache check');\n\n        if (cachedData) {\n            console.log('âœ… Transfers data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh transfers data with shop context:', {\n            shopId: shopId,\n            isFiltered: context.isFiltered,\n            startDate,\n            endDate\n        });\n\n        // Fetch transfers data with date filtering\n        const result = await fetchTransfersData(shopId, undefined, startDate, endDate);\n\n        if (!result.success) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Failed to fetch transfers data',\n                    data: [],\n                    meta: {\n                        shopFiltered: context.isFiltered,\n                        shopId: context.shopId\n                    }\n                },\n                { status: 500 }\n            );\n        }\n\n        const responseData = {\n            success: true,\n            data: result.data,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache the response for 2 minutes\n        console.time('cache set');\n        await cacheService.set(cacheKey, responseData, 120);\n        console.timeEnd('cache set');\n        console.log('ðŸ’¾ Transfers data cached for 2 minutes');\n\n        return NextResponse.json(responseData);\n\n    } catch (error) {\n        console.error('Error fetching transfers data:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to load transfers data',\n                error: error instanceof Error ? error.message : String(error),\n                data: [], // Return empty array on error\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            },\n            { status: 500 }\n        );\n    }\n});"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}