049e0e4d25423ef56d382010f072099b
"use strict";

/* istanbul ignore next */
function cov_22fgou357z() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts";
  var hash = "42a0ea8f45e61a03e5d05a67a67c0175163a09ed";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "12": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 45
        }
      },
      "15": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "16": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 45
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "19": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "20": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "22": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "23": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "24": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 80,
          column: 58
        }
      },
      "25": {
        start: {
          line: 54,
          column: 55
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "26": {
        start: {
          line: 82,
          column: 17
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "27": {
        start: {
          line: 82,
          column: 44
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "28": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 93,
          column: 6
        }
      },
      "29": {
        start: {
          line: 97,
          column: 24
        },
        end: {
          line: 97,
          column: 26
        }
      },
      "30": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "31": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "32": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "33": {
        start: {
          line: 111,
          column: 25
        },
        end: {
          line: 111,
          column: 42
        }
      },
      "34": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 43
        }
      },
      "35": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "36": {
        start: {
          line: 117,
          column: 11
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "37": {
        start: {
          line: 118,
          column: 36
        },
        end: {
          line: 118,
          column: 46
        }
      },
      "38": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 80
        }
      },
      "39": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 49
        }
      },
      "40": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 10
        }
      },
      "41": {
        start: {
          line: 126,
          column: 22
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "42": {
        start: {
          line: 126,
          column: 55
        },
        end: {
          line: 152,
          column: 10
        }
      },
      "43": {
        start: {
          line: 154,
          column: 17
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "44": {
        start: {
          line: 154,
          column: 44
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "45": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 165,
          column: 6
        }
      },
      "46": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 254,
          column: 2
        }
      },
      "47": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "48": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 94
        }
      },
      "49": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "50": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "51": {
        start: {
          line: 179,
          column: 33
        },
        end: {
          line: 179,
          column: 53
        }
      },
      "52": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 180,
          column: 60
        }
      },
      "53": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 56
        }
      },
      "54": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 182,
          column: 65
        }
      },
      "55": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 74
        }
      },
      "56": {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 185,
          column: 116
        }
      },
      "57": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 110
        }
      },
      "58": {
        start: {
          line: 188,
          column: 25
        },
        end: {
          line: 188,
          column: 81
        }
      },
      "59": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 36
        }
      },
      "60": {
        start: {
          line: 190,
          column: 27
        },
        end: {
          line: 190,
          column: 66
        }
      },
      "61": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "62": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "63": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 62
        }
      },
      "64": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "65": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "66": {
        start: {
          line: 210,
          column: 23
        },
        end: {
          line: 210,
          column: 86
        }
      },
      "67": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "68": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "69": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "70": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 34
        }
      },
      "71": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 67
        }
      },
      "72": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 37
        }
      },
      "73": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 72
        }
      },
      "74": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 55
        }
      },
      "75": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 63
        }
      },
      "76": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "fetchTransfersDataFiltered",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 41
          }
        },
        loc: {
          start: {
            line: 27,
            column: 70
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 51
          },
          end: {
            line: 54,
            column: 52
          }
        },
        loc: {
          start: {
            line: 54,
            column: 55
          },
          end: {
            line: 80,
            column: 10
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 32
          }
        },
        loc: {
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 89,
            column: 9
          }
        },
        line: 82
      },
      "7": {
        name: "fetchTransfersData",
        decl: {
          start: {
            line: 95,
            column: 15
          },
          end: {
            line: 95,
            column: 33
          }
        },
        loc: {
          start: {
            line: 95,
            column: 74
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 126,
            column: 51
          },
          end: {
            line: 126,
            column: 52
          }
        },
        loc: {
          start: {
            line: 126,
            column: 55
          },
          end: {
            line: 152,
            column: 10
          }
        },
        line: 126
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 32
          }
        },
        loc: {
          start: {
            line: 154,
            column: 44
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 154
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 167,
            column: 61
          },
          end: {
            line: 167,
            column: 62
          }
        },
        loc: {
          start: {
            line: 167,
            column: 87
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 167
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 57
          },
          end: {
            line: 75,
            column: 68
          }
        }, {
          start: {
            line: 75,
            column: 71
          },
          end: {
            line: 75,
            column: 80
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: 117,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 110,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 110,
            column: 17
          }
        }, {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 28
          }
        }],
        line: 110
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 19
          },
          end: {
            line: 147,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 57
          },
          end: {
            line: 147,
            column: 68
          }
        }, {
          start: {
            line: 147,
            column: 71
          },
          end: {
            line: 147,
            column: 80
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "11": {
        loc: {
          start: {
            line: 182,
            column: 23
          },
          end: {
            line: 182,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 44
          },
          end: {
            line: 182,
            column: 58
          }
        }, {
          start: {
            line: 182,
            column: 61
          },
          end: {
            line: 182,
            column: 65
          }
        }],
        line: 182
      },
      "12": {
        loc: {
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 184,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 39
          },
          end: {
            line: 184,
            column: 61
          }
        }, {
          start: {
            line: 184,
            column: 64
          },
          end: {
            line: 184,
            column: 74
          }
        }],
        line: 184
      },
      "13": {
        loc: {
          start: {
            line: 185,
            column: 26
          },
          end: {
            line: 185,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 67
          }
        }, {
          start: {
            line: 185,
            column: 70
          },
          end: {
            line: 185,
            column: 116
          }
        }],
        line: 185
      },
      "14": {
        loc: {
          start: {
            line: 188,
            column: 48
          },
          end: {
            line: 188,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 48
          },
          end: {
            line: 188,
            column: 54
          }
        }, {
          start: {
            line: 188,
            column: 58
          },
          end: {
            line: 188,
            column: 63
          }
        }],
        line: 188
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "17": {
        loc: {
          start: {
            line: 244,
            column: 19
          },
          end: {
            line: 244,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 44
          },
          end: {
            line: 244,
            column: 57
          }
        }, {
          start: {
            line: 244,
            column: 60
          },
          end: {
            line: 244,
            column: 73
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Filtered version of fetchTransfersData with date range support\nexport async function fetchTransfersDataFiltered(startDate?: string | null, endDate?: string | null, shopId?: string | null) {\n    // Build date filter\n    const dateFilter: any = {};\n    if (startDate) {\n        dateFilter.gte = new Date(startDate);\n    }\n    if (endDate) {\n        const endDateTime = new Date(endDate);\n        endDateTime.setHours(23, 59, 59, 999);\n        dateFilter.lte = endDateTime;\n    }\n\n    // Build where clause with date and shop filtering\n    const whereClause: any = {};\n    if (Object.keys(dateFilter).length > 0) {\n        whereClause.createdAt = dateFilter;\n    }\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n\n    // Fetch inventory transfers with date and shop filtering\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true }\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 10 // Show more transfers when filtering by date\n        }),\n        [],\n        'Failed to fetch filtered transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport async function fetchTransfersData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    // Build where clause for shop and date filtering\n    const whereClause: any = {};\n    \n    // Add shop filtering\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n    \n    // Add date filtering based on provided dates\n    if (startDate && endDate) {\n        const endOfDay = new Date(endDate);\n        endOfDay.setHours(23, 59, 59, 999);\n        whereClause.createdAt = {\n            gte: startDate,\n            lte: endOfDay\n        };\n    } else if (periodDays) { // Fallback to periodDays if dates not provided\n        const calculatedStartDate = new Date();\n        calculatedStartDate.setDate(calculatedStartDate.getDate() - periodDays);\n        calculatedStartDate.setHours(0, 0, 0, 0);\n        \n        whereClause.createdAt = {\n            gte: calculatedStartDate\n        };\n    }\n\n    // Fetch recent inventory transfers using Prisma\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true } // Selecting id to count items\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 10 // Show more transfers when filtering by date\n        }),\n        [], // Empty array fallback\n        'Failed to fetch transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_transfers');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get query parameters\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n        const shopId = context.isFiltered ? context.shopId : null;\n        \n        // Determine date range\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n        // Check cache first with shop context and date range\n        const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n        const cacheKey = `dashboard:transfers:${shopId || 'all'}:${dateRangeKey}`;\n        \n        console.time('cache check');\n        const cachedData = await cacheService.get(cacheKey);\n        console.timeEnd('cache check');\n\n        if (cachedData) {\n            console.log('\u2705 Transfers data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh transfers data with shop context:', {\n            shopId: shopId,\n            isFiltered: context.isFiltered,\n            startDate,\n            endDate\n        });\n\n        // Fetch transfers data with date filtering\n        const result = await fetchTransfersData(shopId, undefined, startDate, endDate);\n\n        if (!result.success) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Failed to fetch transfers data',\n                    data: [],\n                    meta: {\n                        shopFiltered: context.isFiltered,\n                        shopId: context.shopId\n                    }\n                },\n                { status: 500 }\n            );\n        }\n\n        const responseData = {\n            success: true,\n            data: result.data,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache the response for 2 minutes\n        console.time('cache set');\n        await cacheService.set(cacheKey, responseData, 120);\n        console.timeEnd('cache set');\n        console.log('\uD83D\uDCBE Transfers data cached for 2 minutes');\n\n        return NextResponse.json(responseData);\n\n    } catch (error) {\n        console.error('Error fetching transfers data:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to load transfers data',\n                error: error instanceof Error ? error.message : String(error),\n                data: [], // Return empty array on error\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            },\n            { status: 500 }\n        );\n    }\n});"],
      names: ["GET", "fetchTransfersData", "fetchTransfersDataFiltered", "startDate", "endDate", "shopId", "dateFilter", "gte", "Date", "endDateTime", "setHours", "lte", "whereClause", "Object", "keys", "length", "createdAt", "OR", "fromShopId", "toShopId", "transfers", "safeQuery", "prisma", "inventoryTransfer", "findMany", "select", "id", "status", "fromShop", "name", "toShop", "transferItems", "where", "undefined", "orderBy", "take", "data", "map", "transfer", "String", "padStart", "source", "destination", "charAt", "toUpperCase", "slice", "date", "toISOString", "split", "items", "success", "periodDays", "endOfDay", "calculatedStartDate", "setDate", "getDate", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "searchParams", "URL", "url", "startDateParam", "get", "endDateParam", "isFiltered", "now", "dateRangeKey", "cacheKey", "console", "time", "cachedData", "cacheService", "timeEnd", "log", "meta", "shopFiltered", "fromCache", "result", "responseData", "set", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "42a0ea8f45e61a03e5d05a67a67c0175163a09ed"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22fgou357z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22fgou357z();
cov_22fgou357z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_22fgou357z().f[0]++;
  cov_22fgou357z().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_22fgou357z().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_22fgou357z().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[1]++;
    cov_22fgou357z().s[4]++;
    return GET;
  },
  fetchTransfersData: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[2]++;
    cov_22fgou357z().s[5]++;
    return fetchTransfersData;
  },
  fetchTransfersDataFiltered: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[3]++;
    cov_22fgou357z().s[6]++;
    return fetchTransfersDataFiltered;
  }
});
const _server =
/* istanbul ignore next */
(cov_22fgou357z().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_22fgou357z().s[8]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_22fgou357z().s[9]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_22fgou357z().s[10]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_22fgou357z().s[11]++, require("../../../../lib/auth"));
async function fetchTransfersDataFiltered(startDate, endDate, shopId) {
  /* istanbul ignore next */
  cov_22fgou357z().f[4]++;
  // Build date filter
  const dateFilter =
  /* istanbul ignore next */
  (cov_22fgou357z().s[12]++, {});
  /* istanbul ignore next */
  cov_22fgou357z().s[13]++;
  if (startDate) {
    /* istanbul ignore next */
    cov_22fgou357z().b[0][0]++;
    cov_22fgou357z().s[14]++;
    dateFilter.gte = new Date(startDate);
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[0][1]++;
  }
  cov_22fgou357z().s[15]++;
  if (endDate) {
    /* istanbul ignore next */
    cov_22fgou357z().b[1][0]++;
    const endDateTime =
    /* istanbul ignore next */
    (cov_22fgou357z().s[16]++, new Date(endDate));
    /* istanbul ignore next */
    cov_22fgou357z().s[17]++;
    endDateTime.setHours(23, 59, 59, 999);
    /* istanbul ignore next */
    cov_22fgou357z().s[18]++;
    dateFilter.lte = endDateTime;
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[1][1]++;
  }
  // Build where clause with date and shop filtering
  const whereClause =
  /* istanbul ignore next */
  (cov_22fgou357z().s[19]++, {});
  /* istanbul ignore next */
  cov_22fgou357z().s[20]++;
  if (Object.keys(dateFilter).length > 0) {
    /* istanbul ignore next */
    cov_22fgou357z().b[2][0]++;
    cov_22fgou357z().s[21]++;
    whereClause.createdAt = dateFilter;
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[2][1]++;
  }
  cov_22fgou357z().s[22]++;
  if (shopId) {
    /* istanbul ignore next */
    cov_22fgou357z().b[3][0]++;
    cov_22fgou357z().s[23]++;
    whereClause.OR = [{
      fromShopId: shopId
    }, {
      toShopId: shopId
    }];
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[3][1]++;
  }
  // Fetch inventory transfers with date and shop filtering
  const transfers =
  /* istanbul ignore next */
  (cov_22fgou357z().s[24]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_22fgou357z().f[5]++;
    cov_22fgou357z().s[25]++;
    return _prisma.prisma.inventoryTransfer.findMany({
      select: {
        id: true,
        status: true,
        createdAt: true,
        fromShop: {
          select: {
            name: true
          }
        },
        toShop: {
          select: {
            name: true
          }
        },
        transferItems: {
          select: {
            id: true
          }
        }
      },
      where: Object.keys(whereClause).length > 0 ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[4][0]++, whereClause) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[4][1]++, undefined),
      orderBy: {
        createdAt: "desc"
      },
      take: 10 // Show more transfers when filtering by date
    });
  }, [], "Failed to fetch filtered transfers data"));
  // Format the data for the frontend
  const data =
  /* istanbul ignore next */
  (cov_22fgou357z().s[26]++, transfers.map(transfer => {
    /* istanbul ignore next */
    cov_22fgou357z().f[6]++;
    cov_22fgou357z().s[27]++;
    return {
      id: `TR-${String(transfer.id).padStart(3, "0")}`,
      source: transfer.fromShop.name,
      destination: transfer.toShop.name,
      status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),
      date: transfer.createdAt.toISOString().split("T")[0],
      items: transfer.transferItems.length
    };
  }));
  /* istanbul ignore next */
  cov_22fgou357z().s[28]++;
  return {
    success: true,
    data
  };
}
async function fetchTransfersData(shopId, periodDays, startDate, endDate) {
  /* istanbul ignore next */
  cov_22fgou357z().f[7]++;
  // Build where clause for shop and date filtering
  const whereClause =
  /* istanbul ignore next */
  (cov_22fgou357z().s[29]++, {});
  // Add shop filtering
  /* istanbul ignore next */
  cov_22fgou357z().s[30]++;
  if (shopId) {
    /* istanbul ignore next */
    cov_22fgou357z().b[5][0]++;
    cov_22fgou357z().s[31]++;
    whereClause.OR = [{
      fromShopId: shopId
    }, {
      toShopId: shopId
    }];
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[5][1]++;
  }
  // Add date filtering based on provided dates
  cov_22fgou357z().s[32]++;
  if (
  /* istanbul ignore next */
  (cov_22fgou357z().b[7][0]++, startDate) &&
  /* istanbul ignore next */
  (cov_22fgou357z().b[7][1]++, endDate)) {
    /* istanbul ignore next */
    cov_22fgou357z().b[6][0]++;
    const endOfDay =
    /* istanbul ignore next */
    (cov_22fgou357z().s[33]++, new Date(endDate));
    /* istanbul ignore next */
    cov_22fgou357z().s[34]++;
    endOfDay.setHours(23, 59, 59, 999);
    /* istanbul ignore next */
    cov_22fgou357z().s[35]++;
    whereClause.createdAt = {
      gte: startDate,
      lte: endOfDay
    };
  } else {
    /* istanbul ignore next */
    cov_22fgou357z().b[6][1]++;
    cov_22fgou357z().s[36]++;
    if (periodDays) {
      /* istanbul ignore next */
      cov_22fgou357z().b[8][0]++;
      const calculatedStartDate =
      /* istanbul ignore next */
      (cov_22fgou357z().s[37]++, new Date());
      /* istanbul ignore next */
      cov_22fgou357z().s[38]++;
      calculatedStartDate.setDate(calculatedStartDate.getDate() - periodDays);
      /* istanbul ignore next */
      cov_22fgou357z().s[39]++;
      calculatedStartDate.setHours(0, 0, 0, 0);
      /* istanbul ignore next */
      cov_22fgou357z().s[40]++;
      whereClause.createdAt = {
        gte: calculatedStartDate
      };
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[8][1]++;
    }
  }
  // Fetch recent inventory transfers using Prisma
  const transfers =
  /* istanbul ignore next */
  (cov_22fgou357z().s[41]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_22fgou357z().f[8]++;
    cov_22fgou357z().s[42]++;
    return _prisma.prisma.inventoryTransfer.findMany({
      select: {
        id: true,
        status: true,
        createdAt: true,
        fromShop: {
          select: {
            name: true
          }
        },
        toShop: {
          select: {
            name: true
          }
        },
        transferItems: {
          select: {
            id: true
          } // Selecting id to count items
        }
      },
      where: Object.keys(whereClause).length > 0 ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[9][0]++, whereClause) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[9][1]++, undefined),
      orderBy: {
        createdAt: "desc"
      },
      take: 10 // Show more transfers when filtering by date
    });
  }, [], "Failed to fetch transfers data"));
  // Format the data for the frontend
  const data =
  /* istanbul ignore next */
  (cov_22fgou357z().s[43]++, transfers.map(transfer => {
    /* istanbul ignore next */
    cov_22fgou357z().f[9]++;
    cov_22fgou357z().s[44]++;
    return {
      id: `TR-${String(transfer.id).padStart(3, "0")}`,
      source: transfer.fromShop.name,
      destination: transfer.toShop.name,
      status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),
      date: transfer.createdAt.toISOString().split("T")[0],
      items: transfer.transferItems.length
    };
  }));
  /* istanbul ignore next */
  cov_22fgou357z().s[45]++;
  return {
    success: true,
    data
  };
}
const GET =
/* istanbul ignore next */
(cov_22fgou357z().s[46]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_22fgou357z().f[10]++;
  cov_22fgou357z().s[47]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_22fgou357z().s[48]++, await (0, _auth.validateTokenPermission)(request, "view_transfers"));
    /* istanbul ignore next */
    cov_22fgou357z().s[49]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_22fgou357z().b[10][0]++;
      cov_22fgou357z().s[50]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[10][1]++;
    }
    // Get query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_22fgou357z().s[51]++, new URL(request.url));
    const startDateParam =
    /* istanbul ignore next */
    (cov_22fgou357z().s[52]++, searchParams.get("startDate"));
    const endDateParam =
    /* istanbul ignore next */
    (cov_22fgou357z().s[53]++, searchParams.get("endDate"));
    const shopId =
    /* istanbul ignore next */
    (cov_22fgou357z().s[54]++, context.isFiltered ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[11][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[11][1]++, null));
    // Determine date range
    const endDate =
    /* istanbul ignore next */
    (cov_22fgou357z().s[55]++, endDateParam ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[12][0]++, new Date(endDateParam)) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[12][1]++, new Date()));
    const startDate =
    /* istanbul ignore next */
    (cov_22fgou357z().s[56]++, startDateParam ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[13][0]++, new Date(startDateParam)) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[13][1]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)));
    // Check cache first with shop context and date range
    const dateRangeKey =
    /* istanbul ignore next */
    (cov_22fgou357z().s[57]++, `${startDate.toISOString().split("T")[0]}-${endDate.toISOString().split("T")[0]}`);
    const cacheKey =
    /* istanbul ignore next */
    (cov_22fgou357z().s[58]++, `dashboard:transfers:${
    /* istanbul ignore next */
    (cov_22fgou357z().b[14][0]++, shopId) ||
    /* istanbul ignore next */
    (cov_22fgou357z().b[14][1]++, "all")}:${dateRangeKey}`);
    /* istanbul ignore next */
    cov_22fgou357z().s[59]++;
    console.time("cache check");
    const cachedData =
    /* istanbul ignore next */
    (cov_22fgou357z().s[60]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_22fgou357z().s[61]++;
    console.timeEnd("cache check");
    /* istanbul ignore next */
    cov_22fgou357z().s[62]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_22fgou357z().b[15][0]++;
      cov_22fgou357z().s[63]++;
      console.log("✅ Transfers data served from cache");
      /* istanbul ignore next */
      cov_22fgou357z().s[64]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[15][1]++;
    }
    cov_22fgou357z().s[65]++;
    console.log("\uD83D\uDD04 Fetching fresh transfers data with shop context:", {
      shopId: shopId,
      isFiltered: context.isFiltered,
      startDate,
      endDate
    });
    // Fetch transfers data with date filtering
    const result =
    /* istanbul ignore next */
    (cov_22fgou357z().s[66]++, await fetchTransfersData(shopId, undefined, startDate, endDate));
    /* istanbul ignore next */
    cov_22fgou357z().s[67]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_22fgou357z().b[16][0]++;
      cov_22fgou357z().s[68]++;
      return _server.NextResponse.json({
        success: false,
        message: "Failed to fetch transfers data",
        data: [],
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId
        }
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[16][1]++;
    }
    const responseData =
    /* istanbul ignore next */
    (cov_22fgou357z().s[69]++, {
      success: true,
      data: result.data,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache the response for 2 minutes
    /* istanbul ignore next */
    cov_22fgou357z().s[70]++;
    console.time("cache set");
    /* istanbul ignore next */
    cov_22fgou357z().s[71]++;
    await _cache.cacheService.set(cacheKey, responseData, 120);
    /* istanbul ignore next */
    cov_22fgou357z().s[72]++;
    console.timeEnd("cache set");
    /* istanbul ignore next */
    cov_22fgou357z().s[73]++;
    console.log("\uD83D\uDCBE Transfers data cached for 2 minutes");
    /* istanbul ignore next */
    cov_22fgou357z().s[74]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_22fgou357z().s[75]++;
    console.error("Error fetching transfers data:", error);
    /* istanbul ignore next */
    cov_22fgou357z().s[76]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to load transfers data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[17][1]++, String(error)),
      data: [],
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,