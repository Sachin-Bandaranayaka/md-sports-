{"version":3,"names":["authenticateUser","cov_y22h5fuwr","f","s","generateToken","getUserFromDecodedPayload","getUserFromToken","hasPermission","parseTimeStringToSeconds","verifyToken","executeWithRetry","operation","maxRetries","b","attempt","error","code","console","log","Promise","resolve","setTimeout","Math","pow","Error","JWT_SECRET","process","env","JWT_EXPIRES_IN","JWT_ACCESS_TOKEN_EXPIRES_IN","timeStr","lastChar","slice","num","parseInt","isNaN","email","password","time","user","_prisma","default","findFirst","where","isActive","include","role","permissions","select","name","timeEnd","success","message","isPasswordValid","_bcryptjs","compare","map","p","Array","isArray","includes","validPermissionIds","id","toString","filter","length","permissionRecords","permission","findMany","in","token","sub","username","roleId","shopId","userSession","fullName","roleName","cacheKey","_cache","cacheService","generateKey","CACHE_CONFIG","KEYS","USER_SESSION","userId","set","TTL","payload","_jsonwebtoken","sign","expiresIn","trim","decoded","verify","tokenKey","TOKEN_VALIDATION","substring","cachedResult","get","TokenExpiredError","expiredAt","JsonWebTokenError","tokenPayload","_permissions","permissionsCacheKey","USER_PERMISSIONS","cachedPermissions","String","cachedUser","userWithPermissions"],"sources":["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],"sourcesContent":["import * as jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\nimport prisma from '../lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '../lib/cache';\nimport { hasPermission as checkPermission } from '../lib/utils/permissions';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index with retry logic\n        const user = await executeWithRetry(() => \n            prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            })\n        ) as any;\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from role (handle case where user has no role)\n        let permissions: string[] = [];\n        if (user.role?.permissions) {\n            permissions = user.role.permissions.map(p => p.name);\n        } else if (user.permissions && Array.isArray(user.permissions)) {\n            // Handle special case for \"ALL\" permissions\n            if (user.permissions.includes('ALL')) {\n                permissions = ['ALL'];\n            } else {\n                // Convert permission IDs to names, filtering out invalid values\n                const validPermissionIds = user.permissions\n                    .map(id => parseInt(id.toString()))\n                    .filter(id => !isNaN(id));\n                \n                if (validPermissionIds.length > 0) {\n                    const permissionRecords = await executeWithRetry(() =>\n                        prisma.permission.findMany({\n                            where: {\n                                id: {\n                                    in: validPermissionIds\n                                }\n                            },\n                            select: { name: true }\n                        })\n                    );\n                    permissions = (permissionRecords as any[]).map((p: any) => p.name);\n                }\n            }\n        }\n\n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            shopId: user.shopId,\n            permissions\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            shopId: user.shopId,\n            permissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET as string, { expiresIn: JWT_EXPIRES_IN as any });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    // Validate token input\n    if (!token || token.trim() === '') {\n        throw new Error('jwt must be provided');\n    }\n\n    try {\n        // Verify token first\n        const decoded = jwt.verify(token, JWT_SECRET) as unknown as TokenPayload;\n\n        // Only generate cache key for valid tokens (ensure token is long enough for substring)\n        if (token.length >= 20) {\n            const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n            \n            // Check cache first for token validation result\n            const cachedResult = await cacheService.get(tokenKey);\n            if (cachedResult) {\n                return cachedResult as TokenPayload;\n            }\n\n            // Cache the valid token payload (shorter TTL for security)\n            await cacheService.set(tokenKey, decoded, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n        }\n\n        return decoded;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Use the imported permission checking utility\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: { id: String(tokenPayload.sub), isActive: true },\n                include: {\n                    role: {\n                        include: {\n                            permissions: { select: { name: true } }\n                        }\n                    }\n                }\n            })\n        ) as any;\n\n        if (user) {\n            const permissions = user.role.permissions.map((p: any) => p.name);\n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        return null;\n    }\n\n    const userId = payload.sub;\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            })\n        ) as any;\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role.name,\n            permissions: user.role.permissions.map((p: any) => p.name)\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],"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","ignoreList":[]}