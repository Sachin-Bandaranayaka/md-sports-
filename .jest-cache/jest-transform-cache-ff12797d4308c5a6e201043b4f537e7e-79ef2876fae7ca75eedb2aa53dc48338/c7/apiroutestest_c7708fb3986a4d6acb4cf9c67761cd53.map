{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/api-routes.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';\nimport { createMocks } from 'node-mocks-http';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n// Import API handlers (adjust paths as needed)\n// These would be the actual API route handlers\ninterface MockApiHandler {\n  POST?: (req: NextRequest) => Promise<NextResponse>;\n  GET?: (req: NextRequest) => Promise<NextResponse>;\n  PUT?: (req: NextRequest) => Promise<NextResponse>;\n  DELETE?: (req: NextRequest) => Promise<NextResponse>;\n}\n\n// Mock implementations for testing\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    findMany: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  product: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  shop: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n  },\n  refreshToken: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    delete: jest.fn(),\n  },\n  $disconnect: jest.fn(),\n} as any;\n\n// Mock API handlers\nconst authHandler: MockApiHandler = {\n  POST: async (req: NextRequest) => {\n    const body = await req.json();\n    const { email, password } = body;\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      );\n    }\n\n    // Find user\n    const user = await mockPrisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    // Verify password\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    // Generate token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET || 'test-secret',\n      { expiresIn: '1h' }\n    );\n\n    return NextResponse.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n      token,\n    });\n  },\n};\n\nconst productsHandler: MockApiHandler = {\n  GET: async (req: NextRequest) => {\n    const url = new URL(req.url);\n    const shopId = url.searchParams.get('shopId');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '10');\n    const search = url.searchParams.get('search');\n\n    if (!shopId) {\n      return NextResponse.json(\n        { error: 'Shop ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build where clause\n    const where: any = { shopId };\n    if (search) {\n      where.OR = [\n        { name: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n        { sku: { contains: search, mode: 'insensitive' } },\n      ];\n    }\n\n    const products = await mockPrisma.product.findMany({\n      where,\n      skip: (page - 1) * limit,\n      take: limit,\n      orderBy: { createdAt: 'desc' },\n    });\n\n    return NextResponse.json({\n      products,\n      pagination: {\n        page,\n        limit,\n        total: products.length,\n      },\n    });\n  },\n\n  POST: async (req: NextRequest) => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    try {\n      jwt.verify(token, process.env.JWT_SECRET || 'test-secret');\n    } catch {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const body = await req.json();\n    const { name, description, price, sku, shopId } = body;\n\n    // Validation\n    if (!name || !price || !sku || !shopId) {\n      return NextResponse.json(\n        { error: 'Name, price, SKU, and shop ID are required' },\n        { status: 400 }\n      );\n    }\n\n    if (price <= 0) {\n      return NextResponse.json(\n        { error: 'Price must be greater than 0' },\n        { status: 400 }\n      );\n    }\n\n    // Check if SKU already exists\n    const existingProduct = await mockPrisma.product.findUnique({\n      where: { sku_shopId: { sku, shopId } },\n    });\n\n    if (existingProduct) {\n      return NextResponse.json(\n        { error: 'Product with this SKU already exists' },\n        { status: 409 }\n      );\n    }\n\n    const product = await mockPrisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        sku,\n        shopId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json(product, { status: 201 });\n  },\n};\n\nconst userHandler: MockApiHandler = {\n  GET: async (req: NextRequest) => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET || 'test-secret');\n    } catch {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const user = await mockPrisma.user.findUnique({\n      where: { id: decoded.userId },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        permissions: true,\n        shopId: true,\n        isActive: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({ user });\n  },\n};\n\ndescribe('API Routes Integration Tests', () => {\n  beforeAll(() => {\n    process.env.JWT_SECRET = 'test-secret';\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  afterAll(async () => {\n    await mockPrisma.$disconnect();\n  });\n\n  describe('POST /api/auth/login', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      password: '$2a$10$hashedPassword',\n      name: 'Test User',\n      shopId: 'shop-1',\n    };\n\n    it('should successfully login with valid credentials', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true as never);\n      jest.spyOn(jwt, 'sign').mockReturnValue('mock-token' as never);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data).toEqual({\n        user: {\n          id: 1,\n          email: 'test@example.com',\n          name: 'Test User',\n        },\n        token: 'mock-token',\n      });\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n      });\n    });\n\n    it('should return 400 for missing credentials', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          // password missing\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Email and password are required');\n    });\n\n    it('should return 401 for invalid credentials', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'nonexistent@example.com',\n          password: 'password123',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid credentials');\n    });\n\n    it('should return 401 for wrong password', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(false as never);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'wrongpassword',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid credentials');\n    });\n  });\n\n  describe('GET /api/products', () => {\n    const mockProducts = [\n      {\n        id: 1,\n        name: 'Product 1',\n        description: 'Description 1',\n        price: 100,\n        sku: 'SKU001',\n        shopId: 'shop-1',\n        createdAt: new Date(),\n      },\n      {\n        id: 2,\n        name: 'Product 2',\n        description: 'Description 2',\n        price: 200,\n        sku: 'SKU002',\n        shopId: 'shop-1',\n        createdAt: new Date(),\n      },\n    ];\n\n    it('should return products for valid shop ID', async () => {\n      // Arrange\n      mockPrisma.product.findMany.mockResolvedValue(mockProducts);\n\n      const request = new NextRequest(\n        'http://localhost:3000/api/products?shopId=shop-1&page=1&limit=10'\n      );\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.products).toEqual(mockProducts);\n      expect(data.pagination).toEqual({\n        page: 1,\n        limit: 10,\n        total: 2,\n      });\n    });\n\n    it('should return 400 for missing shop ID', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/products');\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Shop ID is required');\n    });\n\n    it('should handle search functionality', async () => {\n      // Arrange\n      const filteredProducts = [mockProducts[0]];\n      mockPrisma.product.findMany.mockResolvedValue(filteredProducts);\n\n      const request = new NextRequest(\n        'http://localhost:3000/api/products?shopId=shop-1&search=Product%201'\n      );\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.products).toEqual(filteredProducts);\n      expect(mockPrisma.product.findMany).toHaveBeenCalledWith({\n        where: {\n          shopId: 'shop-1',\n          OR: [\n            { name: { contains: 'Product 1', mode: 'insensitive' } },\n            { description: { contains: 'Product 1', mode: 'insensitive' } },\n            { sku: { contains: 'Product 1', mode: 'insensitive' } },\n          ],\n        },\n        skip: 0,\n        take: 10,\n        orderBy: { createdAt: 'desc' },\n      });\n    });\n  });\n\n  describe('POST /api/products', () => {\n    const validToken = 'valid-token';\n    const mockProduct = {\n      id: 1,\n      name: 'New Product',\n      description: 'New Description',\n      price: 150,\n      sku: 'SKU003',\n      shopId: 'shop-1',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    beforeEach(() => {\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 1 } as never);\n    });\n\n    it('should create product with valid data and auth', async () => {\n      // Arrange\n      mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist\n      mockPrisma.product.create.mockResolvedValue(mockProduct);\n\n      const request = new NextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'New Product',\n          description: 'New Description',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(201);\n      expect(data).toEqual(mockProduct);\n      expect(mockPrisma.product.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          name: 'New Product',\n          description: 'New Description',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n      });\n    });\n\n    it('should return 401 for missing authorization', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'New Product',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('should return 400 for invalid price', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'New Product',\n          price: -10, // Invalid price\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Price must be greater than 0');\n    });\n\n    it('should return 409 for duplicate SKU', async () => {\n      // Arrange\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct); // SKU exists\n\n      const request = new NextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'New Product',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(409);\n      expect(data.error).toBe('Product with this SKU already exists');\n    });\n  });\n\n  describe('GET /api/user', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'Test User',\n      permissions: ['inventory:read', 'sales:create'],\n      shopId: 'shop-1',\n      isActive: true,\n    };\n\n    it('should return user data for valid token', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 1 } as never);\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const request = new NextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer valid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.user).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: 1 },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          permissions: true,\n          shopId: true,\n          isActive: true,\n        },\n      });\n    });\n\n    it('should return 401 for invalid token', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer invalid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid token');\n    });\n\n    it('should return 404 for non-existent user', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 999 } as never);\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer valid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(404);\n      expect(data.error).toBe('User not found');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act & Assert\n      await expect(authHandler.POST!(request)).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle malformed JSON requests', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act & Assert\n      await expect(authHandler.POST!(request)).rejects.toThrow();\n    });\n  });\n\n  describe('Rate Limiting Simulation', () => {\n    it('should handle multiple concurrent requests', async () => {\n      // Arrange\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        password: '$2a$10$hashedPassword',\n        name: 'Test User',\n        shopId: 'shop-1',\n      };\n      \n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true as never);\n      jest.spyOn(jwt, 'sign').mockReturnValue('mock-token' as never);\n\n      const requests = Array.from({ length: 5 }, () => \n        new NextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: JSON.stringify({\n            email: 'test@example.com',\n            password: 'password123',\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n      );\n\n      // Act\n      const responses = await Promise.all(\n        requests.map(req => authHandler.POST!(req))\n      );\n\n      // Assert\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n      });\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledTimes(5);\n    });\n  });\n});"],"names":["mockPrisma","user","findUnique","jest","fn","create","findMany","update","delete","product","shop","refreshToken","$disconnect","authHandler","POST","req","body","json","email","password","NextResponse","error","status","where","isValid","bcrypt","compare","token","jwt","sign","userId","id","process","env","JWT_SECRET","expiresIn","name","productsHandler","GET","url","URL","shopId","searchParams","get","page","parseInt","limit","search","OR","contains","mode","description","sku","products","skip","take","orderBy","createdAt","pagination","total","length","authHeader","headers","startsWith","substring","verify","price","existingProduct","sku_shopId","data","Date","updatedAt","userHandler","decoded","select","permissions","isActive","describe","beforeAll","beforeEach","clearAllMocks","afterEach","resetAllMocks","afterAll","mockUser","it","mockResolvedValue","spyOn","mockReturnValue","request","NextRequest","method","JSON","stringify","response","expect","toBe","toEqual","toHaveBeenCalledWith","mockProducts","filteredProducts","validToken","mockProduct","objectContaining","mockImplementation","Error","mockRejectedValue","rejects","toThrow","requests","Array","from","responses","Promise","all","map","forEach","toHaveBeenCalledTimes"],"mappings":"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"}