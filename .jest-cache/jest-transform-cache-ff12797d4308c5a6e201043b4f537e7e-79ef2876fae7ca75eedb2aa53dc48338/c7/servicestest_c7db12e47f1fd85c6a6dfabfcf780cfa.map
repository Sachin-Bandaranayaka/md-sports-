{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/services.test.ts"],"sourcesContent":["// Mock the Product model\n// Mock Product is defined in the jest.mock call below\n\n// Mock the models\njest.mock('@/lib/models', () => ({\n  Product: {\n    findAll: jest.fn(),\n    findOne: jest.fn(),\n    findByPk: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    destroy: jest.fn(),\n    count: jest.fn(),\n  }\n}));\n\n// Mock prisma\njest.mock('@/lib/prisma', () => ({\n  prisma: {\n    refreshToken: {\n      deleteMany: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    auditLog: {\n      findMany: jest.fn(),\n      create: jest.fn(),\n    },\n  },\n}));\n\nimport { productService } from '@/services/productService';\nimport { auditService } from '@/services/auditService';\nimport * as refreshTokenService from '@/services/refreshTokenService';\nimport { prisma } from '@/lib/prisma';\nimport { Product } from '@/lib/models';\n\n// Get the mocked Product\nconst mockedProduct = Product as jest.Mocked<typeof Product>;\n\n// Get the mocked prisma instance\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\n\n\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Service Layer Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('ProductService', () => {\n    const mockProductData = {\n      id: 1,\n      name: 'Test Product',\n      description: 'Test Description',\n      price: 99.99,\n      costPrice: 50.00,\n      sku: 'TEST-001',\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('getAllProducts', () => {\n      it('should fetch all active products successfully', async () => {\n        const mockProducts = [mockProductData, { ...mockProductData, id: 2, name: 'Product 2' }];\n        mockProduct.findAll.mockResolvedValue(mockProducts);\n\n        const result = await productService.getAllProducts();\n\n        expect(mockProduct.findAll).toHaveBeenCalledWith({\n          where: { isActive: true },\n        });\n        expect(result).toEqual(mockProducts);\n        expect(result).toHaveLength(2);\n      });\n\n      it('should handle database errors gracefully', async () => {\n        const dbError = new Error('Database connection failed');\n        mockProduct.findAll.mockRejectedValue(dbError);\n\n        await expect(productService.getAllProducts()).rejects.toThrow('Database connection failed');\n        expect(consoleSpy.error).toHaveBeenCalledWith('Error fetching products:', dbError);\n      });\n\n      it('should return empty array when no products found', async () => {\n        mockProduct.findAll.mockResolvedValue([]);\n\n        const result = await productService.getAllProducts();\n\n        expect(result).toEqual([]);\n        expect(result).toHaveLength(0);\n      });\n    });\n\n    describe('getProductById', () => {\n      it('should fetch product by id successfully', async () => {\n        mockProduct.findOne.mockResolvedValue(mockProductData);\n\n        const result = await productService.getProductById(1);\n\n        expect(mockProduct.findOne).toHaveBeenCalledWith({\n          where: { id: 1, isActive: true },\n        });\n        expect(result).toEqual(mockProductData);\n      });\n\n      it('should return null for non-existent product', async () => {\n        mockProduct.findOne.mockResolvedValue(null);\n\n        const result = await productService.getProductById(999);\n\n        expect(result).toBeNull();\n      });\n\n      it('should handle database errors', async () => {\n        const dbError = new Error('Product not found');\n        mockProduct.findOne.mockRejectedValue(dbError);\n\n        await expect(productService.getProductById(1)).rejects.toThrow('Product not found');\n        expect(consoleSpy.error).toHaveBeenCalledWith('Error fetching product with ID 1:', dbError);\n      });\n    });\n\n    describe('createProduct', () => {\n      it('should create a new product successfully', async () => {\n        const newProductData = {\n          name: 'New Product',\n          description: 'New Description',\n          price: 149.99,\n          costPrice: 75.00,\n          sku: 'NEW-001',\n        };\n        const createdProduct = { ...mockProductData, ...newProductData, id: 3 };\n        mockProduct.create.mockResolvedValue(createdProduct);\n\n        const result = await productService.createProduct(newProductData);\n\n        expect(mockProduct.create).toHaveBeenCalledWith(newProductData);\n        expect(result).toEqual(createdProduct);\n      });\n\n      it('should handle validation errors', async () => {\n        const validationError = new Error('Validation failed: name is required');\n        mockProduct.create.mockRejectedValue(validationError);\n\n        await expect(productService.createProduct({})).rejects.toThrow('Validation failed: name is required');\n        expect(consoleSpy.error).toHaveBeenCalledWith('Error creating product:', validationError);\n      });\n\n      it('should handle duplicate SKU errors', async () => {\n        const duplicateError = new Error('SKU already exists');\n        mockProduct.create.mockRejectedValue(duplicateError);\n\n        const duplicateData = { name: 'Test', sku: 'EXISTING-SKU' };\n        await expect(productService.createProduct(duplicateData)).rejects.toThrow('SKU already exists');\n      });\n    });\n\n    describe('updateProduct', () => {\n      it('should update product successfully', async () => {\n        const updateData = { name: 'Updated Product', price: 199.99 };\n        const mockProductInstance = {\n          ...mockProductData,\n          update: jest.fn().mockResolvedValue({ ...mockProductData, ...updateData }),\n        };\n        mockProduct.findByPk.mockResolvedValue(mockProductInstance);\n\n        const result = await productService.updateProduct(1, updateData);\n\n        expect(mockProduct.findByPk).toHaveBeenCalledWith(1);\n        expect(mockProductInstance.update).toHaveBeenCalledWith(updateData);\n        expect(result).toEqual({ ...mockProductData, ...updateData });\n      });\n\n      it('should throw error for non-existent product', async () => {\n        mockProduct.findByPk.mockResolvedValue(null);\n\n        await expect(productService.updateProduct(999, { name: 'Updated' })).rejects.toThrow(\n          'Product with ID 999 not found'\n        );\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Error updating product with ID 999:',\n          expect.any(Error)\n        );\n      });\n\n      it('should handle database update errors', async () => {\n        const mockProductInstance = {\n          update: jest.fn().mockRejectedValue(new Error('Update failed')),\n        };\n        mockProduct.findByPk.mockResolvedValue(mockProductInstance);\n\n        await expect(productService.updateProduct(1, { name: 'Updated' })).rejects.toThrow('Update failed');\n      });\n    });\n\n    describe('deleteProduct', () => {\n      it('should soft delete product successfully', async () => {\n        const mockProductInstance = {\n          ...mockProductData,\n          update: jest.fn().mockResolvedValue({ ...mockProductData, isActive: false }),\n        };\n        mockProduct.findByPk.mockResolvedValue(mockProductInstance);\n\n        const result = await productService.deleteProduct(1);\n\n        expect(mockProduct.findByPk).toHaveBeenCalledWith(1);\n        expect(mockProductInstance.update).toHaveBeenCalledWith({ isActive: false });\n        expect(result).toEqual({ ...mockProductData, isActive: false });\n      });\n\n      it('should throw error for non-existent product', async () => {\n        mockProduct.findByPk.mockResolvedValue(null);\n\n        await expect(productService.deleteProduct(999)).rejects.toThrow(\n          'Product with ID 999 not found'\n        );\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Error deleting product with ID 999:',\n          expect.any(Error)\n        );\n      });\n    });\n  });\n\n  describe('AuditService', () => {\n    const mockAuditData = {\n      id: 1,\n      userId: 1,\n      action: 'CREATE',\n      entity: 'Product',\n      entityId: 1,\n      details: { name: 'Test Product' },\n      createdAt: new Date(),\n    };\n\n    describe('logAction', () => {\n      it('should log audit action successfully', async () => {\n        (mockPrisma.auditLog.create as jest.Mock).mockResolvedValue(mockAuditData);\n\n        await auditService.logAction({\n          userId: 1,\n          action: 'CREATE',\n          entity: 'Product',\n          entityId: 1,\n          details: { name: 'Test Product' },\n        });\n\n        expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n          data: {\n            userId: 1,\n            action: 'CREATE',\n            entity: 'Product',\n            entityId: 1,\n            details: {\n              name: 'Test Product',\n              originalData: undefined,\n              isDeleted: false,\n              deletedAt: undefined,\n              deletedBy: undefined,\n              canRecover: false,\n              recoveredAt: undefined,\n              recoveredBy: undefined,\n            },\n          },\n        });\n      });\n\n      it('should handle audit logging errors gracefully', async () => {\n        const auditError = new Error('Audit log failed');\n        (mockPrisma.auditLog.create as jest.Mock).mockRejectedValue(auditError);\n\n        // Should not throw error, just log it\n        await auditService.logAction({\n          userId: 1,\n          action: 'CREATE',\n          entity: 'Product',\n        });\n\n        expect(consoleSpy.error).toHaveBeenCalledWith('Failed to log audit entry:', auditError);\n      });\n    });\n\n    // Note: getAuditLogs and cleanupOldLogs methods don't exist in the actual auditService\n    // These tests have been removed to match the actual implementation\n  });\n\n  describe('RefreshTokenService', () => {\n    const mockRefreshToken = {\n      id: 1,\n      token: 'refresh-token-123',\n      userId: 1,\n      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      createdAt: new Date(),\n      isRevoked: false,\n    };\n\n    describe('generateRefreshToken', () => {\n      it('should generate refresh token successfully', async () => {\n        (mockPrisma.refreshToken.create as jest.Mock).mockResolvedValue(mockRefreshToken);\n\n        const result = await refreshTokenService.generateRefreshToken(1);\n\n        expect(mockPrisma.refreshToken.create).toHaveBeenCalledWith({\n          data: {\n            userId: 1,\n            token: expect.any(String),\n            expiresAt: expect.any(Date),\n          },\n        });\n        expect(result).toEqual(expect.any(String));\n      });\n\n      it('should handle creation errors', async () => {\n        const createError = new Error('Token creation failed');\n        (mockPrisma.refreshToken.create as jest.Mock).mockRejectedValue(createError);\n\n        await expect(refreshTokenService.generateRefreshToken(1)).rejects.toThrow('Token creation failed');\n      });\n    });\n\n    describe('verifyRefreshToken', () => {\n      it('should verify valid refresh token', async () => {\n        (mockPrisma.refreshToken.findUnique as jest.Mock).mockResolvedValue(mockRefreshToken);\n\n        const result = await refreshTokenService.verifyRefreshToken('refresh-token-123');\n\n        expect(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({\n          where: { token: 'refresh-token-123' },\n        });\n        expect(result).toEqual(1);\n      });\n\n      it('should return null for invalid token', async () => {\n        (mockPrisma.refreshToken.findUnique as jest.Mock).mockResolvedValue(null);\n\n        const result = await refreshTokenService.verifyRefreshToken('invalid-token');\n\n        expect(result).toBeNull();\n      });\n\n      it('should return null for expired token', async () => {\n        const expiredToken = {\n          ...mockRefreshToken,\n          expiresAt: new Date(Date.now() - 1000), // Expired\n        };\n        (mockPrisma.refreshToken.findUnique as jest.Mock).mockResolvedValue(expiredToken);\n        (mockPrisma.refreshToken.update as jest.Mock).mockResolvedValue(expiredToken);\n\n        const result = await refreshTokenService.verifyRefreshToken('expired-token');\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('revokeRefreshToken', () => {\n      it('should revoke refresh token successfully', async () => {\n        (mockPrisma.refreshToken.updateMany as jest.Mock).mockResolvedValue({ count: 1 });\n\n        const result = await refreshTokenService.revokeRefreshToken('refresh-token-123');\n\n        expect(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({\n          where: { token: 'refresh-token-123' },\n          data: { isRevoked: true },\n        });\n        expect(result).toBe(true);\n      });\n\n      it('should handle errors gracefully', async () => {\n        const revokeError = new Error('Database error');\n        (mockPrisma.refreshToken.updateMany as jest.Mock).mockRejectedValue(revokeError);\n\n        const result = await refreshTokenService.revokeRefreshToken('non-existent');\n        expect(result).toBe(false);\n      });\n    });\n\n    describe('revokeAllUserRefreshTokens', () => {\n      it('should revoke all tokens for user', async () => {\n        (mockPrisma.refreshToken.updateMany as jest.Mock).mockResolvedValue({ count: 3 });\n\n        const result = await refreshTokenService.revokeAllUserRefreshTokens(1);\n\n        expect(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({\n          where: { userId: 1 },\n          data: { isRevoked: true },\n        });\n        expect(result).toBe(true);\n      });\n    });\n\n    describe.skip('cleanupRefreshTokens', () => {\n      it('should cleanup expired tokens', async () => {\n        (mockPrisma.refreshToken.deleteMany as jest.Mock).mockResolvedValue({ count: 10 });\n\n        await refreshTokenService.cleanupRefreshTokens();\n\n        // The function uses executeWithRetry wrapper, so we check if deleteMany was called\n        expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Service Integration Tests', () => {\n    it('should handle service dependencies correctly', async () => {\n      // Test interaction between services\n      const productData = { name: 'Test Product', price: 99.99 };\n      const createdProduct = { \n        id: 5, \n        name: 'Test Product', \n        price: 99.99, \n        description: 'Test description',\n        category: 'Test Category',\n        stock: 10,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      (mockedProduct.create as jest.Mock).mockResolvedValue(createdProduct);\n      (mockPrisma.auditLog.create as jest.Mock).mockResolvedValue({\n        id: 1,\n        userId: 1,\n        action: 'CREATE',\n        entity: 'Product',\n        entityId: 5,\n        details: productData,\n        createdAt: new Date(),\n      });\n\n      // Create product\n      const product = await productService.createProduct(productData);\n      \n      // Log audit action\n      await auditService.logAction({\n        userId: 1,\n        action: 'CREATE',\n        entity: 'Product',\n        entityId: product.id,\n        details: productData,\n      });\n\n      expect(product).toEqual(createdProduct);\n      expect(mockPrisma.auditLog.create).toHaveBeenCalled();\n    });\n\n    it('should handle service error propagation', async () => {\n      const dbError = new Error('Database connection lost');\n      (mockedProduct.findAll as jest.Mock).mockRejectedValue(dbError);\n      (mockPrisma.auditLog.create as jest.Mock).mockRejectedValue(dbError);\n\n      // Both services should handle errors independently\n      await expect(productService.getAllProducts()).rejects.toThrow('Database connection lost');\n      \n      await auditService.logAction({\n        userId: 1,\n        action: 'READ',\n        entity: 'Product',\n      });\n      \n      // Audit service handles errors gracefully, so no exception should be thrown\n      expect(mockPrisma.auditLog.create).toHaveBeenCalled();\n    });\n  });\n});"],"names":["jest","mock","Product","findAll","fn","findOne","findByPk","create","update","destroy","count","prisma","refreshToken","deleteMany","findFirst","delete","auditLog","findMany","mockedProduct","mockPrisma","consoleSpy","log","spyOn","console","mockImplementation","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","mockProductData","id","name","description","price","costPrice","sku","isActive","createdAt","Date","updatedAt","it","mockProducts","mockProduct","mockResolvedValue","result","productService","getAllProducts","expect","toHaveBeenCalledWith","where","toEqual","toHaveLength","dbError","Error","mockRejectedValue","rejects","toThrow","getProductById","toBeNull","newProductData","createdProduct","createProduct","validationError","duplicateError","duplicateData","updateData","mockProductInstance","updateProduct","any","deleteProduct","mockAuditData","userId","action","entity","entityId","details","auditService","logAction","data","originalData","undefined","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","auditError","mockRefreshToken","token","expiresAt","now","isRevoked","refreshTokenService","generateRefreshToken","String","createError","findUnique","verifyRefreshToken","expiredToken","updateMany","revokeRefreshToken","toBe","revokeError","revokeAllUserRefreshTokens","skip","cleanupRefreshTokens","toHaveBeenCalled","productData","category","stock","product"],"mappings":"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"}