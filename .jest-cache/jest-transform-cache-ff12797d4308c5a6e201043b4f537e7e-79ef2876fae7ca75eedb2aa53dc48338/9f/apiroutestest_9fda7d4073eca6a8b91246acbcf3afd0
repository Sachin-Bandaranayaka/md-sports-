cef7a65ad13c7d21178d3b472a37337b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock NextResponse constructor
const NextResponse = {
    json: (data, init)=>({
            status: init?.status || 200,
            json: data
        })
};
// Helper function to create mock NextRequest
const createMockNextRequest = (url, options = {})=>{
    const { method = "GET", body, headers = {} } = options;
    return {
        method,
        url,
        headers: new Headers(headers),
        json: async ()=>body ? typeof body === "string" ? JSON.parse(body) : body : {},
        text: async ()=>body ? typeof body === "string" ? body : JSON.stringify(body) : ""
    };
};
// Mock implementations for testing
const mockPrisma = {
    user: {
        findUnique: jest.fn(),
        create: jest.fn(),
        findMany: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    },
    product: {
        findMany: jest.fn(),
        findUnique: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    },
    shop: {
        findUnique: jest.fn(),
        create: jest.fn()
    },
    refreshToken: {
        create: jest.fn(),
        findUnique: jest.fn(),
        delete: jest.fn()
    },
    $disconnect: jest.fn()
};
// Mock API handlers
const authHandler = {
    POST: async (req)=>{
        const body = await req.json();
        const { email, password } = body;
        if (!email || !password) {
            return NextResponse.json({
                error: "Email and password are required"
            }, {
                status: 400
            });
        }
        // Find user
        const user = await mockPrisma.user.findUnique({
            where: {
                email
            }
        });
        if (!user) {
            return NextResponse.json({
                error: "Invalid credentials"
            }, {
                status: 401
            });
        }
        // Verify password
        const isValid = await _bcryptjs.default.compare(password, user.password);
        if (!isValid) {
            return NextResponse.json({
                error: "Invalid credentials"
            }, {
                status: 401
            });
        }
        // Generate token
        const token = _jsonwebtoken.default.sign({
            userId: user.id,
            email: user.email
        }, process.env.JWT_SECRET || "test-secret", {
            expiresIn: "1h"
        });
        return NextResponse.json({
            user: {
                id: user.id,
                email: user.email,
                name: user.name
            },
            token
        });
    }
};
const productsHandler = {
    GET: async (req)=>{
        const url = new URL(req.url);
        const shopId = url.searchParams.get("shopId");
        const page = parseInt(url.searchParams.get("page") || "1");
        const limit = parseInt(url.searchParams.get("limit") || "10");
        const search = url.searchParams.get("search");
        if (!shopId) {
            return NextResponse.json({
                error: "Shop ID is required"
            }, {
                status: 400
            });
        }
        // Build where clause
        const where = {
            shopId
        };
        if (search) {
            where.OR = [
                {
                    name: {
                        contains: search,
                        mode: "insensitive"
                    }
                },
                {
                    description: {
                        contains: search,
                        mode: "insensitive"
                    }
                },
                {
                    sku: {
                        contains: search,
                        mode: "insensitive"
                    }
                }
            ];
        }
        const products = await mockPrisma.product.findMany({
            where,
            skip: (page - 1) * limit,
            take: limit,
            orderBy: {
                createdAt: "desc"
            }
        });
        return NextResponse.json({
            products,
            pagination: {
                page,
                limit,
                total: products.length
            }
        });
    },
    POST: async (req)=>{
        const authHeader = req.headers.get("authorization");
        if (!authHeader?.startsWith("Bearer ")) {
            return NextResponse.json({
                error: "Unauthorized"
            }, {
                status: 401
            });
        }
        const token = authHeader.substring(7);
        try {
            _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
        } catch  {
            return NextResponse.json({
                error: "Invalid token"
            }, {
                status: 401
            });
        }
        const body = await req.json();
        const { name, description, price, sku, shopId } = body;
        // Validation
        if (!name || !price || !sku || !shopId) {
            return NextResponse.json({
                error: "Name, price, SKU, and shop ID are required"
            }, {
                status: 400
            });
        }
        if (price <= 0) {
            return NextResponse.json({
                error: "Price must be greater than 0"
            }, {
                status: 400
            });
        }
        // Check if SKU already exists
        const existingProduct = await mockPrisma.product.findUnique({
            where: {
                sku_shopId: {
                    sku,
                    shopId
                }
            }
        });
        if (existingProduct) {
            return NextResponse.json({
                error: "Product with this SKU already exists"
            }, {
                status: 409
            });
        }
        const product = await mockPrisma.product.create({
            data: {
                name,
                description,
                price,
                sku,
                shopId,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });
        return NextResponse.json(product, {
            status: 201
        });
    }
};
const userHandler = {
    GET: async (req)=>{
        const authHeader = req.headers.get("authorization");
        if (!authHeader?.startsWith("Bearer ")) {
            return NextResponse.json({
                error: "Unauthorized"
            }, {
                status: 401
            });
        }
        const token = authHeader.substring(7);
        let decoded;
        try {
            decoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
        } catch  {
            return NextResponse.json({
                error: "Invalid token"
            }, {
                status: 401
            });
        }
        const user = await mockPrisma.user.findUnique({
            where: {
                id: decoded.userId
            },
            select: {
                id: true,
                email: true,
                name: true,
                permissions: true,
                shopId: true,
                isActive: true
            }
        });
        if (!user) {
            return NextResponse.json({
                error: "User not found"
            }, {
                status: 404
            });
        }
        return NextResponse.json({
            user
        });
    }
};
(0, _globals.describe)("API Routes Integration Tests", ()=>{
    (0, _globals.beforeAll)(()=>{
        process.env.JWT_SECRET = "test-secret";
    });
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.afterAll)(async ()=>{
        await mockPrisma.$disconnect();
    });
    (0, _globals.describe)("POST /api/auth/login", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            password: "$2a$10$hashedPassword",
            name: "Test User",
            shopId: "shop-1"
        };
        (0, _globals.it)("should successfully login with valid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(true);
            jest.spyOn(_jsonwebtoken.default, "sign").mockReturnValue("mock-token");
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: {
                    email: "test@example.com",
                    password: "password123"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data).toEqual({
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User"
                },
                token: "mock-token"
            });
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    email: "test@example.com"
                }
            });
        });
        (0, _globals.it)("should return 400 for missing credentials", async ()=>{
            // Arrange
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: {
                    email: "test@example.com"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Email and password are required");
        });
        (0, _globals.it)("should return 401 for invalid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: {
                    email: "nonexistent@example.com",
                    password: "password123"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid credentials");
        });
        (0, _globals.it)("should return 401 for wrong password", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(false);
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: {
                    email: "test@example.com",
                    password: "wrongpassword"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid credentials");
        });
    });
    (0, _globals.describe)("GET /api/products", ()=>{
        const mockProducts = [
            {
                id: 1,
                name: "Product 1",
                description: "Description 1",
                price: 100,
                sku: "SKU001",
                shopId: "shop-1",
                createdAt: new Date()
            },
            {
                id: 2,
                name: "Product 2",
                description: "Description 2",
                price: 200,
                sku: "SKU002",
                shopId: "shop-1",
                createdAt: new Date()
            }
        ];
        (0, _globals.it)("should return products for valid shop ID", async ()=>{
            // Arrange
            mockPrisma.product.findMany.mockResolvedValue(mockProducts);
            const request = createMockNextRequest("http://localhost:3000/api/products?shopId=shop-1&page=1&limit=10");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.products).toEqual(mockProducts);
            (0, _globals.expect)(data.pagination).toEqual({
                page: 1,
                limit: 10,
                total: 2
            });
        });
        (0, _globals.it)("should return 400 for missing shop ID", async ()=>{
            // Arrange
            const request = createMockNextRequest("http://localhost:3000/api/products");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Shop ID is required");
        });
        (0, _globals.it)("should handle search functionality", async ()=>{
            // Arrange
            const filteredProducts = [
                mockProducts[0]
            ];
            mockPrisma.product.findMany.mockResolvedValue(filteredProducts);
            const request = createMockNextRequest("http://localhost:3000/api/products?shopId=shop-1&search=Product%201");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.products).toEqual(filteredProducts);
            (0, _globals.expect)(mockPrisma.product.findMany).toHaveBeenCalledWith({
                where: {
                    shopId: "shop-1",
                    OR: [
                        {
                            name: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        },
                        {
                            description: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        },
                        {
                            sku: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        }
                    ]
                },
                skip: 0,
                take: 10,
                orderBy: {
                    createdAt: "desc"
                }
            });
        });
    });
    (0, _globals.describe)("POST /api/products", ()=>{
        const validToken = "valid-token";
        const mockProduct = {
            id: 1,
            name: "New Product",
            description: "New Description",
            price: 150,
            sku: "SKU003",
            shopId: "shop-1",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        (0, _globals.beforeEach)(()=>{
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 1
            });
        });
        (0, _globals.it)("should create product with valid data and auth", async ()=>{
            // Arrange
            mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist
            mockPrisma.product.create.mockResolvedValue(mockProduct);
            const request = createMockNextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: {
                    name: "New Product",
                    description: "New Description",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                },
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(201);
            (0, _globals.expect)(data).toEqual(mockProduct);
            (0, _globals.expect)(mockPrisma.product.create).toHaveBeenCalledWith({
                data: _globals.expect.objectContaining({
                    name: "New Product",
                    description: "New Description",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                })
            });
        });
        (0, _globals.it)("should return 401 for missing authorization", async ()=>{
            // Arrange
            const request = createMockNextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: {
                    name: "New Product",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Unauthorized");
        });
        (0, _globals.it)("should return 400 for invalid price", async ()=>{
            // Arrange
            const request = createMockNextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: {
                    name: "New Product",
                    price: -10,
                    sku: "SKU003",
                    shopId: "shop-1"
                },
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Price must be greater than 0");
        });
        (0, _globals.it)("should return 409 for duplicate SKU", async ()=>{
            // Arrange
            mockPrisma.product.findUnique.mockResolvedValue(mockProduct); // SKU exists
            const request = createMockNextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: {
                    name: "New Product",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                },
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(409);
            (0, _globals.expect)(data.error).toBe("Product with this SKU already exists");
        });
    });
    (0, _globals.describe)("GET /api/user", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            name: "Test User",
            permissions: [
                "inventory:read",
                "sales:create"
            ],
            shopId: "shop-1",
            isActive: true
        };
        (0, _globals.it)("should return user data for valid token", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 1
            });
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const request = createMockNextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer valid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.user).toEqual(mockUser);
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    id: 1
                },
                select: {
                    id: true,
                    email: true,
                    name: true,
                    permissions: true,
                    shopId: true,
                    isActive: true
                }
            });
        });
        (0, _globals.it)("should return 401 for invalid token", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockImplementation(()=>{
                throw new Error("Invalid token");
            });
            const request = createMockNextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer invalid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid token");
        });
        (0, _globals.it)("should return 404 for non-existent user", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 999
            });
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const request = createMockNextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer valid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(404);
            (0, _globals.expect)(data.error).toBe("User not found");
        });
    });
    (0, _globals.describe)("Error Handling", ()=>{
        (0, _globals.it)("should handle database connection errors", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Database connection failed"));
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: {
                    email: "test@example.com",
                    password: "password123"
                },
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act & Assert
            await (0, _globals.expect)(authHandler.POST(request)).rejects.toThrow("Database connection failed");
        });
        (0, _globals.it)("should handle malformed JSON requests", async ()=>{
            // Arrange
            const request = createMockNextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: "invalid json",
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act & Assert
            await (0, _globals.expect)(authHandler.POST(request)).rejects.toThrow();
        });
    });
    (0, _globals.describe)("Rate Limiting Simulation", ()=>{
        (0, _globals.it)("should handle multiple concurrent requests", async ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                password: "$2a$10$hashedPassword",
                name: "Test User",
                shopId: "shop-1"
            };
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(true);
            jest.spyOn(_jsonwebtoken.default, "sign").mockReturnValue("mock-token");
            const requests = Array.from({
                length: 5
            }, ()=>createMockNextRequest("http://localhost:3000/api/auth/login", {
                    method: "POST",
                    body: {
                        email: "test@example.com",
                        password: "password123"
                    },
                    headers: {
                        "Content-Type": "application/json"
                    }
                }));
            // Act
            const responses = await Promise.all(requests.map((req)=>authHandler.POST(req)));
            // Assert
            responses.forEach((response)=>{
                (0, _globals.expect)(response.status).toBe(200);
            });
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledTimes(5);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvaW50ZWdyYXRpb24vYXBpLXJvdXRlcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsLCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IGNyZWF0ZU1vY2tzIH0gZnJvbSAnbm9kZS1tb2Nrcy1odHRwJztcbmltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuXG4vLyBNb2NrIE5leHQuanMgdHlwZXMgZm9yIHRlc3RpbmdcbmludGVyZmFjZSBOZXh0UmVxdWVzdCB7XG4gIG1ldGhvZDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgaGVhZGVyczogSGVhZGVycztcbiAganNvbigpOiBQcm9taXNlPGFueT47XG4gIHRleHQoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG5pbnRlcmZhY2UgTmV4dFJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIGpzb246IGFueTtcbn1cblxuLy8gTW9jayBOZXh0UmVzcG9uc2UgY29uc3RydWN0b3JcbmNvbnN0IE5leHRSZXNwb25zZSA9IHtcbiAganNvbjogKGRhdGE6IGFueSwgaW5pdD86IHsgc3RhdHVzPzogbnVtYmVyIH0pID0+ICh7XG4gICAgc3RhdHVzOiBpbml0Py5zdGF0dXMgfHwgMjAwLFxuICAgIGpzb246IGRhdGEsXG4gIH0pLFxufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBtb2NrIE5leHRSZXF1ZXN0XG5jb25zdCBjcmVhdGVNb2NrTmV4dFJlcXVlc3QgPSAodXJsOiBzdHJpbmcsIG9wdGlvbnM6IHtcbiAgbWV0aG9kPzogc3RyaW5nO1xuICBib2R5PzogYW55O1xuICBoZWFkZXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn0gPSB7fSk6IE5leHRSZXF1ZXN0ID0+IHtcbiAgY29uc3QgeyBtZXRob2QgPSAnR0VUJywgYm9keSwgaGVhZGVycyA9IHt9IH0gPSBvcHRpb25zO1xuICByZXR1cm4ge1xuICAgIG1ldGhvZCxcbiAgICB1cmwsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnMoaGVhZGVycyksXG4gICAganNvbjogYXN5bmMgKCkgPT4gYm9keSA/ICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGJvZHkpIDogYm9keSkgOiB7fSxcbiAgICB0ZXh0OiBhc3luYyAoKSA9PiBib2R5ID8gKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyA/IGJvZHkgOiBKU09OLnN0cmluZ2lmeShib2R5KSkgOiAnJyxcbiAgfSBhcyBOZXh0UmVxdWVzdDtcbn07XG5cbi8vIEltcG9ydCBBUEkgaGFuZGxlcnMgKGFkanVzdCBwYXRocyBhcyBuZWVkZWQpXG4vLyBUaGVzZSB3b3VsZCBiZSB0aGUgYWN0dWFsIEFQSSByb3V0ZSBoYW5kbGVyc1xuaW50ZXJmYWNlIE1vY2tBcGlIYW5kbGVyIHtcbiAgUE9TVD86IChyZXE6IE5leHRSZXF1ZXN0KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT47XG4gIEdFVD86IChyZXE6IE5leHRSZXF1ZXN0KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT47XG4gIFBVVD86IChyZXE6IE5leHRSZXF1ZXN0KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT47XG4gIERFTEVURT86IChyZXE6IE5leHRSZXF1ZXN0KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT47XG59XG5cbi8vIE1vY2sgaW1wbGVtZW50YXRpb25zIGZvciB0ZXN0aW5nXG5jb25zdCBtb2NrUHJpc21hID0ge1xuICB1c2VyOiB7XG4gICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gIH0sXG4gIHByb2R1Y3Q6IHtcbiAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICBkZWxldGU6IGplc3QuZm4oKSxcbiAgfSxcbiAgc2hvcDoge1xuICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgfSxcbiAgcmVmcmVzaFRva2VuOiB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICB9LFxuICAkZGlzY29ubmVjdDogamVzdC5mbigpLFxufSBhcyBhbnk7XG5cbi8vIE1vY2sgQVBJIGhhbmRsZXJzXG5jb25zdCBhdXRoSGFuZGxlcjogTW9ja0FwaUhhbmRsZXIgPSB7XG4gIFBPU1Q6IGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCk7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IGJvZHk7XG5cbiAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnRW1haWwgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdXNlclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBlbWFpbCB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIGNyZWRlbnRpYWxzJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAxIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVmVyaWZ5IHBhc3N3b3JkXG4gICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSB0b2tlblxuICAgIGNvbnN0IHRva2VuID0gand0LnNpZ24oXG4gICAgICB7IHVzZXJJZDogdXNlci5pZCwgZW1haWw6IHVzZXIuZW1haWwgfSxcbiAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ3Rlc3Qtc2VjcmV0JyxcbiAgICAgIHsgZXhwaXJlc0luOiAnMWgnIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgaWQ6IHVzZXIuaWQsXG4gICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICB9LFxuICAgICAgdG9rZW4sXG4gICAgfSk7XG4gIH0sXG59O1xuXG5jb25zdCBwcm9kdWN0c0hhbmRsZXI6IE1vY2tBcGlIYW5kbGVyID0ge1xuICBHRVQ6IGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICBjb25zdCBzaG9wSWQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnc2hvcElkJyk7XG4gICAgY29uc3QgcGFnZSA9IHBhcnNlSW50KHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJykgfHwgJzEnKTtcbiAgICBjb25zdCBsaW1pdCA9IHBhcnNlSW50KHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICcxMCcpO1xuICAgIGNvbnN0IHNlYXJjaCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzZWFyY2gnKTtcblxuICAgIGlmICghc2hvcElkKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdTaG9wIElEIGlzIHJlcXVpcmVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgd2hlcmUgY2xhdXNlXG4gICAgY29uc3Qgd2hlcmU6IGFueSA9IHsgc2hvcElkIH07XG4gICAgaWYgKHNlYXJjaCkge1xuICAgICAgd2hlcmUuT1IgPSBbXG4gICAgICAgIHsgbmFtZTogeyBjb250YWluczogc2VhcmNoLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgeyBkZXNjcmlwdGlvbjogeyBjb250YWluczogc2VhcmNoLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgeyBza3U6IHsgY29udGFpbnM6IHNlYXJjaCwgbW9kZTogJ2luc2Vuc2l0aXZlJyB9IH0sXG4gICAgICBdO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2R1Y3RzID0gYXdhaXQgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRNYW55KHtcbiAgICAgIHdoZXJlLFxuICAgICAgc2tpcDogKHBhZ2UgLSAxKSAqIGxpbWl0LFxuICAgICAgdGFrZTogbGltaXQsXG4gICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgcHJvZHVjdHMsXG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIHBhZ2UsXG4gICAgICAgIGxpbWl0LFxuICAgICAgICB0b3RhbDogcHJvZHVjdHMubGVuZ3RoLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcblxuICBQT1NUOiBhc3luYyAocmVxOiBOZXh0UmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXEuaGVhZGVycy5nZXQoJ2F1dGhvcml6YXRpb24nKTtcbiAgICBpZiAoIWF1dGhIZWFkZXI/LnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAxIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW4gPSBhdXRoSGVhZGVyLnN1YnN0cmluZyg3KTtcbiAgICB0cnkge1xuICAgICAgand0LnZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAndGVzdC1zZWNyZXQnKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0ludmFsaWQgdG9rZW4nIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxLmpzb24oKTtcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCBwcmljZSwgc2t1LCBzaG9wSWQgfSA9IGJvZHk7XG5cbiAgICAvLyBWYWxpZGF0aW9uXG4gICAgaWYgKCFuYW1lIHx8ICFwcmljZSB8fCAhc2t1IHx8ICFzaG9wSWQpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ05hbWUsIHByaWNlLCBTS1UsIGFuZCBzaG9wIElEIGFyZSByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChwcmljZSA8PSAwKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdQcmljZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgU0tVIGFscmVhZHkgZXhpc3RzXG4gICAgY29uc3QgZXhpc3RpbmdQcm9kdWN0ID0gYXdhaXQgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgc2t1X3Nob3BJZDogeyBza3UsIHNob3BJZCB9IH0sXG4gICAgfSk7XG5cbiAgICBpZiAoZXhpc3RpbmdQcm9kdWN0KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdQcm9kdWN0IHdpdGggdGhpcyBTS1UgYWxyZWFkeSBleGlzdHMnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDkgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgbW9ja1ByaXNtYS5wcm9kdWN0LmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBwcmljZSxcbiAgICAgICAgc2t1LFxuICAgICAgICBzaG9wSWQsXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihwcm9kdWN0LCB7IHN0YXR1czogMjAxIH0pO1xuICB9LFxufTtcblxuY29uc3QgdXNlckhhbmRsZXI6IE1vY2tBcGlIYW5kbGVyID0ge1xuICBHRVQ6IGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcS5oZWFkZXJzLmdldCgnYXV0aG9yaXphdGlvbicpO1xuICAgIGlmICghYXV0aEhlYWRlcj8uc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGF1dGhIZWFkZXIuc3Vic3RyaW5nKDcpO1xuICAgIGxldCBkZWNvZGVkOiBhbnk7XG4gICAgdHJ5IHtcbiAgICAgIGRlY29kZWQgPSBqd3QudmVyaWZ5KHRva2VuLCBwcm9jZXNzLmVudi5KV1RfU0VDUkVUIHx8ICd0ZXN0LXNlY3JldCcpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnSW52YWxpZCB0b2tlbicgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBpZDogZGVjb2RlZC51c2VySWQgfSxcbiAgICAgIHNlbGVjdDoge1xuICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIHBlcm1pc3Npb25zOiB0cnVlLFxuICAgICAgICBzaG9wSWQ6IHRydWUsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnVXNlciBub3QgZm91bmQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyB1c2VyIH0pO1xuICB9LFxufTtcblxuZGVzY3JpYmUoJ0FQSSBSb3V0ZXMgSW50ZWdyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldCc7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgbW9ja1ByaXNtYS4kZGlzY29ubmVjdCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2F1dGgvbG9naW4nLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICBpZDogMSxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJyQyYSQxMCRoYXNoZWRQYXNzd29yZCcsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgfTtcblxuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IGxvZ2luIHdpdGggdmFsaWQgY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG4gICAgICBqZXN0LnNweU9uKGJjcnlwdCwgJ2NvbXBhcmUnKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlIGFzIG5ldmVyKTtcbiAgICAgIGplc3Quc3B5T24oand0LCAnc2lnbicpLm1vY2tSZXR1cm5WYWx1ZSgnbW9jay10b2tlbicgYXMgbmV2ZXIpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY3JlYXRlTW9ja05leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGgvbG9naW4nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGhIYW5kbGVyLlBPU1QhKHJlcXVlc3QpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QoZGF0YSkudG9FcXVhbCh7XG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBpZDogMSxcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICB9LFxuICAgICAgICB0b2tlbjogJ21vY2stdG9rZW4nLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgd2hlcmU6IHsgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiA0MDAgZm9yIG1pc3NpbmcgY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY3JlYXRlTW9ja05leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGgvbG9naW4nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICAvLyBwYXNzd29yZCBtaXNzaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoSGFuZGxlci5QT1NUIShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ0VtYWlsIGFuZCBwYXNzd29yZCBhcmUgcmVxdWlyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwMSBmb3IgaW52YWxpZCBjcmVkZW50aWFscycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tQcmlzbWEudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY3JlYXRlTW9ja05leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGgvbG9naW4nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgZW1haWw6ICdub25leGlzdGVudEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoSGFuZGxlci5QT1NUIShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwMSBmb3Igd3JvbmcgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG4gICAgICBqZXN0LnNweU9uKGJjcnlwdCwgJ2NvbXBhcmUnKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSBhcyBuZXZlcik7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYXV0aC9sb2dpbicsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAnd3JvbmdwYXNzd29yZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoSGFuZGxlci5QT1NUIShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL3Byb2R1Y3RzJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tQcm9kdWN0cyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIG5hbWU6ICdQcm9kdWN0IDEnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaXB0aW9uIDEnLFxuICAgICAgICBwcmljZTogMTAwLFxuICAgICAgICBza3U6ICdTS1UwMDEnLFxuICAgICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogMixcbiAgICAgICAgbmFtZTogJ1Byb2R1Y3QgMicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpcHRpb24gMicsXG4gICAgICAgIHByaWNlOiAyMDAsXG4gICAgICAgIHNrdTogJ1NLVTAwMicsXG4gICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHByb2R1Y3RzIGZvciB2YWxpZCBzaG9wIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9kdWN0cyk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoXG4gICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3Byb2R1Y3RzP3Nob3BJZD1zaG9wLTEmcGFnZT0xJmxpbWl0PTEwJ1xuICAgICAgKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHByb2R1Y3RzSGFuZGxlci5HRVQhKHJlcXVlc3QpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QoZGF0YS5wcm9kdWN0cykudG9FcXVhbChtb2NrUHJvZHVjdHMpO1xuICAgICAgZXhwZWN0KGRhdGEucGFnaW5hdGlvbikudG9FcXVhbCh7XG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxpbWl0OiAxMCxcbiAgICAgICAgdG90YWw6IDIsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwMCBmb3IgbWlzc2luZyBzaG9wIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZU1vY2tOZXh0UmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wcm9kdWN0cycpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvZHVjdHNIYW5kbGVyLkdFVCEocmVxdWVzdCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNDAwKTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCdTaG9wIElEIGlzIHJlcXVpcmVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzZWFyY2ggZnVuY3Rpb25hbGl0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGZpbHRlcmVkUHJvZHVjdHMgPSBbbW9ja1Byb2R1Y3RzWzBdXTtcbiAgICAgIG1vY2tQcmlzbWEucHJvZHVjdC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShmaWx0ZXJlZFByb2R1Y3RzKTtcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZU1vY2tOZXh0UmVxdWVzdChcbiAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvcHJvZHVjdHM/c2hvcElkPXNob3AtMSZzZWFyY2g9UHJvZHVjdCUyMDEnXG4gICAgICApO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvZHVjdHNIYW5kbGVyLkdFVCEocmVxdWVzdCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChkYXRhLnByb2R1Y3RzKS50b0VxdWFsKGZpbHRlcmVkUHJvZHVjdHMpO1xuICAgICAgZXhwZWN0KG1vY2tQcmlzbWEucHJvZHVjdC5maW5kTWFueSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICAgICAgT1I6IFtcbiAgICAgICAgICAgIHsgbmFtZTogeyBjb250YWluczogJ1Byb2R1Y3QgMScsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICAgICAgeyBkZXNjcmlwdGlvbjogeyBjb250YWluczogJ1Byb2R1Y3QgMScsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICAgICAgeyBza3U6IHsgY29udGFpbnM6ICdQcm9kdWN0IDEnLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBza2lwOiAwLFxuICAgICAgICB0YWtlOiAxMCxcbiAgICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvcHJvZHVjdHMnLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsaWRUb2tlbiA9ICd2YWxpZC10b2tlbic7XG4gICAgY29uc3QgbW9ja1Byb2R1Y3QgPSB7XG4gICAgICBpZDogMSxcbiAgICAgIG5hbWU6ICdOZXcgUHJvZHVjdCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ05ldyBEZXNjcmlwdGlvbicsXG4gICAgICBwcmljZTogMTUwLFxuICAgICAgc2t1OiAnU0tVMDAzJyxcbiAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihqd3QsICd2ZXJpZnknKS5tb2NrUmV0dXJuVmFsdWUoeyB1c2VySWQ6IDEgfSBhcyBuZXZlcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBwcm9kdWN0IHdpdGggdmFsaWQgZGF0YSBhbmQgYXV0aCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tQcmlzbWEucHJvZHVjdC5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpOyAvLyBTS1UgZG9lc24ndCBleGlzdFxuICAgICAgbW9ja1ByaXNtYS5wcm9kdWN0LmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJvZHVjdCk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvcHJvZHVjdHMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgbmFtZTogJ05ldyBQcm9kdWN0JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ05ldyBEZXNjcmlwdGlvbicsXG4gICAgICAgICAgcHJpY2U6IDE1MCxcbiAgICAgICAgICBza3U6ICdTS1UwMDMnLFxuICAgICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3ZhbGlkVG9rZW59YCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvZHVjdHNIYW5kbGVyLlBPU1QhKHJlcXVlc3QpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgICBleHBlY3QoZGF0YSkudG9FcXVhbChtb2NrUHJvZHVjdCk7XG4gICAgICBleHBlY3QobW9ja1ByaXNtYS5wcm9kdWN0LmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBkYXRhOiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbmFtZTogJ05ldyBQcm9kdWN0JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ05ldyBEZXNjcmlwdGlvbicsXG4gICAgICAgICAgcHJpY2U6IDE1MCxcbiAgICAgICAgICBza3U6ICdTS1UwMDMnLFxuICAgICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiA0MDEgZm9yIG1pc3NpbmcgYXV0aG9yaXphdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvcHJvZHVjdHMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgbmFtZTogJ05ldyBQcm9kdWN0JyxcbiAgICAgICAgICBwcmljZTogMTUwLFxuICAgICAgICAgIHNrdTogJ1NLVTAwMycsXG4gICAgICAgICAgc2hvcElkOiAnc2hvcC0xJyxcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHByb2R1Y3RzSGFuZGxlci5QT1NUIShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ1VuYXV0aG9yaXplZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDAwIGZvciBpbnZhbGlkIHByaWNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZU1vY2tOZXh0UmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wcm9kdWN0cycsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICBuYW1lOiAnTmV3IFByb2R1Y3QnLFxuICAgICAgICAgIHByaWNlOiAtMTAsIC8vIEludmFsaWQgcHJpY2VcbiAgICAgICAgICBza3U6ICdTS1UwMDMnLFxuICAgICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3ZhbGlkVG9rZW59YCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvZHVjdHNIYW5kbGVyLlBPU1QhKHJlcXVlc3QpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgICBleHBlY3QoZGF0YS5lcnJvcikudG9CZSgnUHJpY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDA5IGZvciBkdXBsaWNhdGUgU0tVJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2R1Y3QpOyAvLyBTS1UgZXhpc3RzXG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvcHJvZHVjdHMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgbmFtZTogJ05ldyBQcm9kdWN0JyxcbiAgICAgICAgICBwcmljZTogMTUwLFxuICAgICAgICAgIHNrdTogJ1NLVTAwMycsXG4gICAgICAgICAgc2hvcElkOiAnc2hvcC0xJyxcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dmFsaWRUb2tlbn1gLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcm9kdWN0c0hhbmRsZXIuUE9TVCEocmVxdWVzdCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNDA5KTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCdQcm9kdWN0IHdpdGggdGhpcyBTS1UgYWxyZWFkeSBleGlzdHMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL3VzZXInLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICBpZDogMSxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIHBlcm1pc3Npb25zOiBbJ2ludmVudG9yeTpyZWFkJywgJ3NhbGVzOmNyZWF0ZSddLFxuICAgICAgc2hvcElkOiAnc2hvcC0xJyxcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiB1c2VyIGRhdGEgZm9yIHZhbGlkIHRva2VuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgamVzdC5zcHlPbihqd3QsICd2ZXJpZnknKS5tb2NrUmV0dXJuVmFsdWUoeyB1c2VySWQ6IDEgfSBhcyBuZXZlcik7XG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdXNlcicsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciB2YWxpZC10b2tlbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHVzZXJIYW5kbGVyLkdFVCEocmVxdWVzdCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChkYXRhLnVzZXIpLnRvRXF1YWwobW9ja1VzZXIpO1xuICAgICAgZXhwZWN0KG1vY2tQcmlzbWEudXNlci5maW5kVW5pcXVlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiAxIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgcGVybWlzc2lvbnM6IHRydWUsXG4gICAgICAgICAgc2hvcElkOiB0cnVlLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiA0MDEgZm9yIGludmFsaWQgdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBqZXN0LnNweU9uKGp3dCwgJ3ZlcmlmeScpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbicpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdXNlcicsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciBpbnZhbGlkLXRva2VuJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdXNlckhhbmRsZXIuR0VUIShyZXF1ZXN0KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ0ludmFsaWQgdG9rZW4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwNCBmb3Igbm9uLWV4aXN0ZW50IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBqZXN0LnNweU9uKGp3dCwgJ3ZlcmlmeScpLm1vY2tSZXR1cm5WYWx1ZSh7IHVzZXJJZDogOTk5IH0gYXMgbmV2ZXIpO1xuICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdXNlcicsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciB2YWxpZC10b2tlbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHVzZXJIYW5kbGVyLkdFVCEocmVxdWVzdCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNDA0KTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCdVc2VyIG5vdCBmb3VuZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGF0YWJhc2UgY29ubmVjdGlvbiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkJykpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY3JlYXRlTW9ja05leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2F1dGgvbG9naW4nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aEhhbmRsZXIuUE9TVCEocmVxdWVzdCkpLnJlamVjdHMudG9UaHJvdygnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCBKU09OIHJlcXVlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZU1vY2tOZXh0UmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9hdXRoL2xvZ2luJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogJ2ludmFsaWQganNvbicsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhIYW5kbGVyLlBPU1QhKHJlcXVlc3QpKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JhdGUgTGltaXRpbmcgU2ltdWxhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBjb25jdXJyZW50IHJlcXVlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJyQyYSQxMCRoYXNoZWRQYXNzd29yZCcsXG4gICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuICAgICAgamVzdC5zcHlPbihiY3J5cHQsICdjb21wYXJlJykubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSBhcyBuZXZlcik7XG4gICAgICBqZXN0LnNweU9uKGp3dCwgJ3NpZ24nKS5tb2NrUmV0dXJuVmFsdWUoJ21vY2stdG9rZW4nIGFzIG5ldmVyKTtcblxuICAgICAgY29uc3QgcmVxdWVzdHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA1IH0sICgpID0+IFxuICAgICAgICBjcmVhdGVNb2NrTmV4dFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYXV0aC9sb2dpbicsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICByZXF1ZXN0cy5tYXAocmVxID0+IGF1dGhIYW5kbGVyLlBPU1QhKHJlcSkpXG4gICAgICApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIHJlc3BvbnNlcy5mb3JFYWNoKHJlc3BvbnNlID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyg1KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJpbml0Iiwic3RhdHVzIiwiY3JlYXRlTW9ja05leHRSZXF1ZXN0IiwidXJsIiwib3B0aW9ucyIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiSGVhZGVycyIsIkpTT04iLCJwYXJzZSIsInRleHQiLCJzdHJpbmdpZnkiLCJtb2NrUHJpc21hIiwidXNlciIsImZpbmRVbmlxdWUiLCJqZXN0IiwiZm4iLCJjcmVhdGUiLCJmaW5kTWFueSIsInVwZGF0ZSIsImRlbGV0ZSIsInByb2R1Y3QiLCJzaG9wIiwicmVmcmVzaFRva2VuIiwiJGRpc2Nvbm5lY3QiLCJhdXRoSGFuZGxlciIsIlBPU1QiLCJyZXEiLCJlbWFpbCIsInBhc3N3b3JkIiwiZXJyb3IiLCJ3aGVyZSIsImlzVmFsaWQiLCJiY3J5cHQiLCJjb21wYXJlIiwidG9rZW4iLCJqd3QiLCJzaWduIiwidXNlcklkIiwiaWQiLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsImV4cGlyZXNJbiIsIm5hbWUiLCJwcm9kdWN0c0hhbmRsZXIiLCJHRVQiLCJVUkwiLCJzaG9wSWQiLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJwYWdlIiwicGFyc2VJbnQiLCJsaW1pdCIsInNlYXJjaCIsIk9SIiwiY29udGFpbnMiLCJtb2RlIiwiZGVzY3JpcHRpb24iLCJza3UiLCJwcm9kdWN0cyIsInNraXAiLCJ0YWtlIiwib3JkZXJCeSIsImNyZWF0ZWRBdCIsInBhZ2luYXRpb24iLCJ0b3RhbCIsImxlbmd0aCIsImF1dGhIZWFkZXIiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwidmVyaWZ5IiwicHJpY2UiLCJleGlzdGluZ1Byb2R1Y3QiLCJza3Vfc2hvcElkIiwiRGF0ZSIsInVwZGF0ZWRBdCIsInVzZXJIYW5kbGVyIiwiZGVjb2RlZCIsInNlbGVjdCIsInBlcm1pc3Npb25zIiwiaXNBY3RpdmUiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiYWZ0ZXJFYWNoIiwicmVzZXRBbGxNb2NrcyIsImFmdGVyQWxsIiwibW9ja1VzZXIiLCJpdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwic3B5T24iLCJtb2NrUmV0dXJuVmFsdWUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJleHBlY3QiLCJ0b0JlIiwidG9FcXVhbCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibW9ja1Byb2R1Y3RzIiwiZmlsdGVyZWRQcm9kdWN0cyIsInZhbGlkVG9rZW4iLCJtb2NrUHJvZHVjdCIsIm9iamVjdENvbnRhaW5pbmciLCJtb2NrSW1wbGVtZW50YXRpb24iLCJFcnJvciIsIm1vY2tSZWplY3RlZFZhbHVlIiwicmVqZWN0cyIsInRvVGhyb3ciLCJyZXF1ZXN0cyIsIkFycmF5IiwiZnJvbSIsInJlc3BvbnNlcyIsIlByb21pc2UiLCJhbGwi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