{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/lib/cache.ts"],"sourcesContent":["/**\n * Redis-based caching service for improved performance\n * Falls back to in-memory cache in development\n */\n\nimport { Redis } from 'ioredis';\n\n// Cache configuration\nconst CACHE_CONFIG = {\n    // Default TTL in seconds\n    DEFAULT_TTL: 300, // 5 minutes\n\n    // Cache keys\n    KEYS: {\n        INVENTORY_SUMMARY: 'inventory:summary',\n        INVOICES: 'invoices:list',\n        INVOICE_STATS: 'invoices:stats',\n        CATEGORIES: 'categories:list',\n        SHOPS: 'shops:list',\n        CUSTOMERS: 'customers:list',\n        PRODUCTS: 'products:list',\n        // Authentication cache keys\n        USER_SESSION: 'auth:user:session',\n        USER_PERMISSIONS: 'auth:user:permissions',\n        ROLE_PERMISSIONS: 'auth:role:permissions',\n        TOKEN_VALIDATION: 'auth:token:validation',\n    },\n\n    // TTL for different data types\n    TTL: {\n        INVENTORY: 60, // 1 minute\n        INVOICES: 120, // 2 minutes\n        STATS: 300, // 5 minutes\n        REFERENCE_DATA: 3600, // 1 hour (categories, shops, etc.)\n        // Authentication TTLs\n        USER_SESSION: 900, // 15 minutes\n        USER_PERMISSIONS: 1800, // 30 minutes\n        ROLE_PERMISSIONS: 3600, // 1 hour\n        TOKEN_VALIDATION: 300, // 5 minutes\n    }\n};\n\n// In-memory cache fallback for development\nclass MemoryCache {\n    private cache = new Map<string, { data: any; expires: number }>();\n    private cleanupInterval: NodeJS.Timeout;\n\n    constructor() {\n        // Clean up expired entries every 5 minutes\n        this.cleanupInterval = setInterval(() => {\n            this.cleanup();\n        }, 5 * 60 * 1000);\n    }\n\n    async get(key: string): Promise<any> {\n        const entry = this.cache.get(key);\n        if (!entry) return null;\n\n        if (Date.now() > entry.expires) {\n            this.cache.delete(key);\n            return null;\n        }\n\n        return entry.data;\n    }\n\n    async set(key: string, value: any, ttlSeconds: number = CACHE_CONFIG.DEFAULT_TTL): Promise<void> {\n        const expires = Date.now() + (ttlSeconds * 1000);\n        this.cache.set(key, { data: value, expires });\n    }\n\n    async del(key: string): Promise<void> {\n        this.cache.delete(key);\n    }\n\n    async invalidatePattern(pattern: string): Promise<void> {\n        const regex = new RegExp(pattern.replace('*', '.*'));\n        for (const key of this.cache.keys()) {\n            if (regex.test(key)) {\n                this.cache.delete(key);\n            }\n        }\n    }\n\n    private cleanup(): void {\n        const now = Date.now();\n        for (const [key, entry] of this.cache.entries()) {\n            if (now > entry.expires) {\n                this.cache.delete(key);\n            }\n        }\n    }\n\n    destroy(): void {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n        }\n        this.cache.clear();\n    }\n}\n\n// Redis cache implementation\nclass RedisCache {\n    private redis: Redis;\n    private isConnected = false;\n\n    constructor() {\n        const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n\n        this.redis = new Redis(redisUrl, {\n            retryDelayOnFailover: 100,\n            maxRetriesPerRequest: 3,\n            lazyConnect: true,\n        });\n\n        this.redis.on('connect', () => {\n            console.log('‚úÖ Redis connected');\n            this.isConnected = true;\n        });\n\n        this.redis.on('error', (error) => {\n            console.error('‚ùå Redis connection error:', error);\n            this.isConnected = false;\n        });\n    }\n\n    async get(key: string): Promise<any> {\n        if (!this.isConnected) return null;\n\n        try {\n            const value = await this.redis.get(key);\n            return value ? JSON.parse(value) : null;\n        } catch (error) {\n            console.error('Redis get error:', error);\n            return null;\n        }\n    }\n\n    async set(key: string, value: any, ttlSeconds: number = CACHE_CONFIG.DEFAULT_TTL): Promise<void> {\n        if (!this.isConnected) return;\n\n        try {\n            await this.redis.setex(key, ttlSeconds, JSON.stringify(value));\n        } catch (error) {\n            console.error('Redis set error:', error);\n        }\n    }\n\n    async del(key: string): Promise<void> {\n        if (!this.isConnected) return;\n\n        try {\n            await this.redis.del(key);\n        } catch (error) {\n            console.error('Redis del error:', error);\n        }\n    }\n\n    async invalidatePattern(pattern: string): Promise<void> {\n        if (!this.isConnected) return;\n\n        try {\n            const keys = await this.redis.keys(pattern);\n            if (keys.length > 0) {\n                await this.redis.del(...keys);\n            }\n        } catch (error) {\n            console.error('Redis invalidatePattern error:', error);\n        }\n    }\n\n    disconnect(): void {\n        this.redis.disconnect();\n    }\n}\n\n// Cache service interface\ninterface CacheService {\n    get(key: string): Promise<any>;\n    set(key: string, value: any, ttlSeconds?: number): Promise<void>;\n    del(key: string): Promise<void>;\n    invalidatePattern(pattern: string): Promise<void>;\n    destroy?(): void;\n}\n\n// Cache service implementation\nclass CacheManager implements CacheService {\n    private cache: CacheService;\n    private useRedis: boolean;\n\n    constructor() {\n        this.useRedis = process.env.NODE_ENV === 'production' && !!process.env.REDIS_URL;\n\n        if (this.useRedis) {\n            console.log('üöÄ Using Redis cache');\n            this.cache = new RedisCache();\n        } else {\n            console.log('üíæ Using in-memory cache');\n            this.cache = new MemoryCache();\n        }\n    }\n\n    async get(key: string): Promise<any> {\n        return this.cache.get(key);\n    }\n\n    async set(key: string, value: any, ttlSeconds?: number): Promise<void> {\n        return this.cache.set(key, value, ttlSeconds);\n    }\n\n    async del(key: string): Promise<void> {\n        return this.cache.del(key);\n    }\n\n    async invalidatePattern(pattern: string): Promise<void> {\n        return this.cache.invalidatePattern(pattern);\n    }\n\n    // Helper methods for common cache operations\n    async getOrSet<T>(\n        key: string,\n        fetcher: () => Promise<T>,\n        ttlSeconds?: number\n    ): Promise<T> {\n        // Try to get from cache first\n        const cached = await this.get(key);\n        if (cached !== null) {\n            return cached;\n        }\n\n        // Fetch fresh data\n        const data = await fetcher();\n\n        // Store in cache\n        await this.set(key, data, ttlSeconds);\n\n        return data;\n    }\n\n    // Generate cache key with parameters\n    generateKey(prefix: string, params: Record<string, any> = {}): string {\n        const sortedParams = Object.keys(params)\n            .sort()\n            .map(key => `${key}:${params[key]}`)\n            .join('|');\n\n        return sortedParams ? `${prefix}:${sortedParams}` : prefix;\n    }\n\n    // Invalidate related cache entries\n    async invalidateInventory(): Promise<void> {\n        await Promise.all([\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVENTORY_SUMMARY}*`),\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.PRODUCTS}*`),\n        ]);\n    }\n\n    async invalidateInvoices(): Promise<void> {\n        await Promise.all([\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVOICES}*`),\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVOICE_STATS}*`),\n        ]);\n    }\n\n    async invalidateReferenceData(): Promise<void> {\n        await Promise.all([\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.CATEGORIES}*`),\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.SHOPS}*`),\n            this.invalidatePattern(`${CACHE_CONFIG.KEYS.CUSTOMERS}*`),\n        ]);\n    }\n\n    // Authentication cache invalidation methods\n    async invalidateUserSession(userId: string): Promise<void> {\n        const userSessionKey = this.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n        await this.del(userSessionKey);\n    }\n\n    async invalidateUserPermissions(userId: string): Promise<void> {\n        const userPermissionsKey = this.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId });\n        await this.del(userPermissionsKey);\n    }\n\n    async invalidateRolePermissions(roleId: number): Promise<void> {\n        const rolePermissionsKey = this.generateKey(CACHE_CONFIG.KEYS.ROLE_PERMISSIONS, { roleId });\n        await this.del(rolePermissionsKey);\n        // Also invalidate all user permissions for users with this role\n        await this.invalidatePattern(`${CACHE_CONFIG.KEYS.USER_PERMISSIONS}*`);\n    }\n\n    async invalidateTokenValidation(token: string): Promise<void> {\n        const tokenKey = this.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n        await this.del(tokenKey);\n    }\n\n    async invalidateAllUserAuth(userId: string): Promise<void> {\n        await Promise.all([\n            this.invalidateUserSession(userId),\n            this.invalidateUserPermissions(userId),\n        ]);\n    }\n\n    destroy(): void {\n        if (this.cache && typeof (this.cache as any).destroy === 'function') {\n            (this.cache as any).destroy();\n        }\n        if (this.cache && typeof (this.cache as any).disconnect === 'function') {\n            (this.cache as any).disconnect();\n        }\n    }\n}\n\n// Export singleton instance\nconst cache = new CacheManager();\nexport { cache };\n\n// Export as cacheService for backward compatibility\nexport { cache as cacheService };\n\n// Export types and constants\nexport { CACHE_CONFIG };\nexport type { CacheService };\n\n// Cleanup on process exit\nprocess.on('SIGINT', () => {\n    cache.destroy();\n});\n\nprocess.on('SIGTERM', () => {\n    cache.destroy();\n});\n\n// Export cleanup function for tests\nexport const cleanupCache = () => {\n    cache.destroy();\n};"],"names":["CACHE_CONFIG","cache","cacheService","cleanupCache","DEFAULT_TTL","KEYS","INVENTORY_SUMMARY","INVOICES","INVOICE_STATS","CATEGORIES","SHOPS","CUSTOMERS","PRODUCTS","USER_SESSION","USER_PERMISSIONS","ROLE_PERMISSIONS","TOKEN_VALIDATION","TTL","INVENTORY","STATS","REFERENCE_DATA","MemoryCache","constructor","Map","cleanupInterval","setInterval","cleanup","get","key","entry","Date","now","expires","delete","data","set","value","ttlSeconds","del","invalidatePattern","pattern","regex","RegExp","replace","keys","test","entries","destroy","clearInterval","clear","RedisCache","isConnected","redisUrl","process","env","REDIS_URL","redis","Redis","retryDelayOnFailover","maxRetriesPerRequest","lazyConnect","on","console","log","error","JSON","parse","setex","stringify","length","disconnect","CacheManager","useRedis","NODE_ENV","getOrSet","fetcher","cached","generateKey","prefix","params","sortedParams","Object","sort","map","join","invalidateInventory","Promise","all","invalidateInvoices","invalidateReferenceData","invalidateUserSession","userId","userSessionKey","invalidateUserPermissions","userPermissionsKey","invalidateRolePermissions","roleId","rolePermissionsKey","invalidateTokenValidation","token","tokenKey","substring","invalidateAllUserAuth"],"mappings":"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"}