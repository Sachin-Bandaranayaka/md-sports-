3ab0894099320b6f716243da7e2d088f
"use strict";

/* istanbul ignore next */
function cov_2ng7jnwm2g() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts";
  var hash = "630045da9269c0c672b0076494814e2de993086d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "10": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 52
        }
      },
      "11": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "12": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 29,
          column: 92
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 30,
          column: 81
        }
      },
      "14": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 31,
          column: 48
        }
      },
      "15": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "16": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 60,
          column: 1
        }
      },
      "17": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 62,
          column: 87
        }
      },
      "18": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 90
        }
      },
      "19": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 98
        }
      },
      "20": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 45
        }
      },
      "22": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "23": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "24": {
        start: {
          line: 76,
          column: 15
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "25": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "26": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 43
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "28": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "29": {
        start: {
          line: 88,
          column: 25
        },
        end: {
          line: 88,
          column: 108
        }
      },
      "30": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 90,
          column: 78
        }
      },
      "31": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "32": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "33": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "34": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 142,
          column: 59
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 141,
          column: 81
        }
      },
      "36": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 116,
          column: 18
        }
      },
      "37": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 119,
          column: 17
        }
      },
      "38": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 32
        }
      },
      "39": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 140,
          column: 18
        }
      },
      "40": {
        start: {
          line: 131,
          column: 67
        },
        end: {
          line: 139,
          column: 25
        }
      },
      "41": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "42": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 46
        }
      },
      "43": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "44": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 74
        }
      },
      "45": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 46
        }
      },
      "46": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "47": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 63
        }
      },
      "48": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 44
        }
      },
      "49": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "50": {
        start: {
          line: 171,
          column: 22
        },
        end: {
          line: 171,
          column: 89
        }
      },
      "51": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 173,
          column: 95
        }
      },
      "52": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "53": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 45
        }
      },
      "54": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 31
        }
      },
      "55": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 39
        }
      },
      "56": {
        start: {
          line: 179,
          column: 15
        },
        end: {
          line: 179,
          column: 42
        }
      },
      "57": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 188,
          column: 5
        }
      },
      "58": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 43
        }
      },
      "59": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "60": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 413,
          column: 5
        }
      },
      "61": {
        start: {
          line: 190,
          column: 22
        },
        end: {
          line: 190,
          column: 38
        }
      },
      "62": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 32
        }
      },
      "63": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "64": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 51
        }
      },
      "65": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "66": {
        start: {
          line: 204,
          column: 23
        },
        end: {
          line: 383,
          column: 48
        }
      },
      "67": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 382,
          column: 14
        }
      },
      "68": {
        start: {
          line: 207,
          column: 43
        },
        end: {
          line: 207,
          column: 52
        }
      },
      "69": {
        start: {
          line: 209,
          column: 33
        },
        end: {
          line: 220,
          column: 18
        }
      },
      "70": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 223,
          column: 17
        }
      },
      "71": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 58
        }
      },
      "72": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 226,
          column: 17
        }
      },
      "73": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 97
        }
      },
      "74": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 368,
          column: 17
        }
      },
      "75": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 254,
          column: 21
        }
      },
      "76": {
        start: {
          line: 231,
          column: 48
        },
        end: {
          line: 236,
          column: 26
        }
      },
      "77": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 239,
          column: 25
        }
      },
      "78": {
        start: {
          line: 238,
          column: 28
        },
        end: {
          line: 238,
          column: 118
        }
      },
      "79": {
        start: {
          line: 241,
          column: 52
        },
        end: {
          line: 241,
          column: 89
        }
      },
      "80": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 251,
          column: 27
        }
      },
      "81": {
        start: {
          line: 253,
          column: 24
        },
        end: {
          line: 253,
          column: 63
        }
      },
      "82": {
        start: {
          line: 256,
          column: 45
        },
        end: {
          line: 256,
          column: 47
        }
      },
      "83": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 301,
          column: 21
        }
      },
      "84": {
        start: {
          line: 259,
          column: 48
        },
        end: {
          line: 264,
          column: 26
        }
      },
      "85": {
        start: {
          line: 265,
          column: 52
        },
        end: {
          line: 265,
          column: 90
        }
      },
      "86": {
        start: {
          line: 267,
          column: 46
        },
        end: {
          line: 272,
          column: 26
        }
      },
      "87": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 300,
          column: 25
        }
      },
      "88": {
        start: {
          line: 275,
          column: 28
        },
        end: {
          line: 282,
          column: 31
        }
      },
      "89": {
        start: {
          line: 285,
          column: 56
        },
        end: {
          line: 285,
          column: 78
        }
      },
      "90": {
        start: {
          line: 286,
          column: 52
        },
        end: {
          line: 286,
          column: 87
        }
      },
      "91": {
        start: {
          line: 287,
          column: 53
        },
        end: {
          line: 287,
          column: 66
        }
      },
      "92": {
        start: {
          line: 288,
          column: 54
        },
        end: {
          line: 288,
          column: 91
        }
      },
      "93": {
        start: {
          line: 289,
          column: 55
        },
        end: {
          line: 289,
          column: 93
        }
      },
      "94": {
        start: {
          line: 290,
          column: 53
        },
        end: {
          line: 290,
          column: 91
        }
      },
      "95": {
        start: {
          line: 291,
          column: 54
        },
        end: {
          line: 291,
          column: 55
        }
      },
      "96": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 294,
          column: 29
        }
      },
      "97": {
        start: {
          line: 293,
          column: 32
        },
        end: {
          line: 293,
          column: 114
        }
      },
      "98": {
        start: {
          line: 295,
          column: 28
        },
        end: {
          line: 299,
          column: 31
        }
      },
      "99": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 317,
          column: 21
        }
      },
      "100": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 316,
          column: 33
        }
      },
      "101": {
        start: {
          line: 304,
          column: 73
        },
        end: {
          line: 316,
          column: 30
        }
      },
      "102": {
        start: {
          line: 319,
          column: 39
        },
        end: {
          line: 340,
          column: 23
        }
      },
      "103": {
        start: {
          line: 320,
          column: 58
        },
        end: {
          line: 327,
          column: 26
        }
      },
      "104": {
        start: {
          line: 328,
          column: 24
        },
        end: {
          line: 338,
          column: 25
        }
      },
      "105": {
        start: {
          line: 329,
          column: 50
        },
        end: {
          line: 329,
          column: 117
        }
      },
      "106": {
        start: {
          line: 329,
          column: 95
        },
        end: {
          line: 329,
          column: 113
        }
      },
      "107": {
        start: {
          line: 330,
          column: 47
        },
        end: {
          line: 332,
          column: 33
        }
      },
      "108": {
        start: {
          line: 331,
          column: 32
        },
        end: {
          line: 331,
          column: 88
        }
      },
      "109": {
        start: {
          line: 333,
          column: 46
        },
        end: {
          line: 333,
          column: 96
        }
      },
      "110": {
        start: {
          line: 334,
          column: 28
        },
        end: {
          line: 337,
          column: 30
        }
      },
      "111": {
        start: {
          line: 339,
          column: 24
        },
        end: {
          line: 339,
          column: 36
        }
      },
      "112": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 349,
          column: 29
        }
      },
      "113": {
        start: {
          line: 342,
          column: 66
        },
        end: {
          line: 342,
          column: 81
        }
      },
      "114": {
        start: {
          line: 342,
          column: 97
        },
        end: {
          line: 349,
          column: 26
        }
      },
      "115": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 366,
          column: 21
        }
      },
      "116": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 365,
          column: 27
        }
      },
      "117": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "118": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "119": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 50
        }
      },
      "120": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 391,
          column: 15
        }
      },
      "121": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "122": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 28
        }
      },
      "123": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "124": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 84
        }
      },
      "125": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 45
        }
      },
      "126": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 412,
          column: 11
        }
      },
      "127": {
        start: {
          line: 416,
          column: 22
        },
        end: {
          line: 416,
          column: 87
        }
      },
      "128": {
        start: {
          line: 418,
          column: 18
        },
        end: {
          line: 418,
          column: 46
        }
      },
      "129": {
        start: {
          line: 419,
          column: 20
        },
        end: {
          line: 419,
          column: 70
        }
      },
      "130": {
        start: {
          line: 420,
          column: 21
        },
        end: {
          line: 420,
          column: 44
        }
      },
      "131": {
        start: {
          line: 422,
          column: 29
        },
        end: {
          line: 422,
          column: 96
        }
      },
      "132": {
        start: {
          line: 423,
          column: 4
        },
        end: {
          line: 431,
          column: 5
        }
      },
      "133": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 45
        }
      },
      "134": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 430,
          column: 11
        }
      },
      "135": {
        start: {
          line: 432,
          column: 27
        },
        end: {
          line: 432,
          column: 39
        }
      },
      "136": {
        start: {
          line: 433,
          column: 15
        },
        end: {
          line: 433,
          column: 42
        }
      },
      "137": {
        start: {
          line: 434,
          column: 4
        },
        end: {
          line: 442,
          column: 5
        }
      },
      "138": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 43
        }
      },
      "139": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 441,
          column: 11
        }
      },
      "140": {
        start: {
          line: 443,
          column: 4
        },
        end: {
          line: 604,
          column: 5
        }
      },
      "141": {
        start: {
          line: 444,
          column: 22
        },
        end: {
          line: 444,
          column: 38
        }
      },
      "142": {
        start: {
          line: 445,
          column: 59
        },
        end: {
          line: 445,
          column: 64
        }
      },
      "143": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "144": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 50
        }
      },
      "145": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 454,
          column: 15
        }
      },
      "146": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "147": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 46
        }
      },
      "148": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 463,
          column: 15
        }
      },
      "149": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "150": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 45
        }
      },
      "151": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 472,
          column: 15
        }
      },
      "152": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 485,
          column: 9
        }
      },
      "153": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 484,
          column: 13
        }
      },
      "154": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 477,
          column: 53
        }
      },
      "155": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 483,
          column: 19
        }
      },
      "156": {
        start: {
          line: 486,
          column: 23
        },
        end: {
          line: 572,
          column: 45
        }
      },
      "157": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 571,
          column: 14
        }
      },
      "158": {
        start: {
          line: 489,
          column: 41
        },
        end: {
          line: 493,
          column: 18
        }
      },
      "159": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 496,
          column: 17
        }
      },
      "160": {
        start: {
          line: 495,
          column: 20
        },
        end: {
          line: 495,
          column: 58
        }
      },
      "161": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 499,
          column: 17
        }
      },
      "162": {
        start: {
          line: 498,
          column: 20
        },
        end: {
          line: 498,
          column: 76
        }
      },
      "163": {
        start: {
          line: 501,
          column: 35
        },
        end: {
          line: 505,
          column: 18
        }
      },
      "164": {
        start: {
          line: 506,
          column: 40
        },
        end: {
          line: 510,
          column: 18
        }
      },
      "165": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 513,
          column: 17
        }
      },
      "166": {
        start: {
          line: 512,
          column: 20
        },
        end: {
          line: 512,
          column: 62
        }
      },
      "167": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 540,
          column: 17
        }
      },
      "168": {
        start: {
          line: 516,
          column: 38
        },
        end: {
          line: 521,
          column: 22
        }
      },
      "169": {
        start: {
          line: 522,
          column: 20
        },
        end: {
          line: 530,
          column: 21
        }
      },
      "170": {
        start: {
          line: 523,
          column: 40
        },
        end: {
          line: 527,
          column: 26
        }
      },
      "171": {
        start: {
          line: 528,
          column: 44
        },
        end: {
          line: 528,
          column: 99
        }
      },
      "172": {
        start: {
          line: 529,
          column: 24
        },
        end: {
          line: 529,
          column: 93
        }
      },
      "173": {
        start: {
          line: 531,
          column: 20
        },
        end: {
          line: 539,
          column: 21
        }
      },
      "174": {
        start: {
          line: 532,
          column: 40
        },
        end: {
          line: 536,
          column: 26
        }
      },
      "175": {
        start: {
          line: 537,
          column: 44
        },
        end: {
          line: 537,
          column: 99
        }
      },
      "176": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 146
        }
      },
      "177": {
        start: {
          line: 542,
          column: 40
        },
        end: {
          line: 551,
          column: 18
        }
      },
      "178": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 557,
          column: 19
        }
      },
      "179": {
        start: {
          line: 559,
          column: 42
        },
        end: {
          line: 563,
          column: 23
        }
      },
      "180": {
        start: {
          line: 559,
          column: 61
        },
        end: {
          line: 563,
          column: 21
        }
      },
      "181": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 566,
          column: 19
        }
      },
      "182": {
        start: {
          line: 567,
          column: 16
        },
        end: {
          line: 567,
          column: 39
        }
      },
      "183": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 581,
          column: 9
        }
      },
      "184": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 50
        }
      },
      "185": {
        start: {
          line: 575,
          column: 12
        },
        end: {
          line: 580,
          column: 15
        }
      },
      "186": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 586,
          column: 11
        }
      },
      "187": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 587,
          column: 28
        }
      },
      "188": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 594,
          column: 11
        }
      },
      "189": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 596,
          column: 63
        }
      },
      "190": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 45
        }
      },
      "191": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 603,
          column: 11
        }
      },
      "192": {
        start: {
          line: 607,
          column: 22
        },
        end: {
          line: 607,
          column: 87
        }
      },
      "193": {
        start: {
          line: 609,
          column: 18
        },
        end: {
          line: 609,
          column: 46
        }
      },
      "194": {
        start: {
          line: 610,
          column: 20
        },
        end: {
          line: 610,
          column: 70
        }
      },
      "195": {
        start: {
          line: 611,
          column: 21
        },
        end: {
          line: 611,
          column: 44
        }
      },
      "196": {
        start: {
          line: 613,
          column: 29
        },
        end: {
          line: 613,
          column: 96
        }
      },
      "197": {
        start: {
          line: 614,
          column: 4
        },
        end: {
          line: 622,
          column: 5
        }
      },
      "198": {
        start: {
          line: 615,
          column: 8
        },
        end: {
          line: 615,
          column: 45
        }
      },
      "199": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 621,
          column: 11
        }
      },
      "200": {
        start: {
          line: 623,
          column: 27
        },
        end: {
          line: 623,
          column: 39
        }
      },
      "201": {
        start: {
          line: 624,
          column: 15
        },
        end: {
          line: 624,
          column: 42
        }
      },
      "202": {
        start: {
          line: 625,
          column: 4
        },
        end: {
          line: 633,
          column: 5
        }
      },
      "203": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 626,
          column: 43
        }
      },
      "204": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 632,
          column: 11
        }
      },
      "205": {
        start: {
          line: 634,
          column: 4
        },
        end: {
          line: 712,
          column: 5
        }
      },
      "206": {
        start: {
          line: 635,
          column: 23
        },
        end: {
          line: 683,
          column: 45
        }
      },
      "207": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 682,
          column: 14
        }
      },
      "208": {
        start: {
          line: 638,
          column: 33
        },
        end: {
          line: 642,
          column: 18
        }
      },
      "209": {
        start: {
          line: 643,
          column: 16
        },
        end: {
          line: 645,
          column: 17
        }
      },
      "210": {
        start: {
          line: 644,
          column: 20
        },
        end: {
          line: 644,
          column: 58
        }
      },
      "211": {
        start: {
          line: 646,
          column: 16
        },
        end: {
          line: 648,
          column: 17
        }
      },
      "212": {
        start: {
          line: 647,
          column: 20
        },
        end: {
          line: 647,
          column: 77
        }
      },
      "213": {
        start: {
          line: 650,
          column: 30
        },
        end: {
          line: 654,
          column: 18
        }
      },
      "214": {
        start: {
          line: 655,
          column: 16
        },
        end: {
          line: 667,
          column: 17
        }
      },
      "215": {
        start: {
          line: 656,
          column: 20
        },
        end: {
          line: 666,
          column: 23
        }
      },
      "216": {
        start: {
          line: 669,
          column: 16
        },
        end: {
          line: 673,
          column: 19
        }
      },
      "217": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 678,
          column: 19
        }
      },
      "218": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 692,
          column: 9
        }
      },
      "219": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 685,
          column: 50
        }
      },
      "220": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 691,
          column: 15
        }
      },
      "221": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 697,
          column: 11
        }
      },
      "222": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 698,
          column: 28
        }
      },
      "223": {
        start: {
          line: 699,
          column: 8
        },
        end: {
          line: 702,
          column: 11
        }
      },
      "224": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 63
        }
      },
      "225": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 705,
          column: 45
        }
      },
      "226": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 711,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 10
          }
        },
        loc: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "getDefaultTransfer",
        decl: {
          start: {
            line: 33,
            column: 9
          },
          end: {
            line: 33,
            column: 27
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 33
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 61,
            column: 15
          },
          end: {
            line: 61,
            column: 18
          }
        },
        loc: {
          start: {
            line: 61,
            column: 36
          },
          end: {
            line: 169,
            column: 1
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 99,
            column: 77
          },
          end: {
            line: 99,
            column: 78
          }
        },
        loc: {
          start: {
            line: 99,
            column: 87
          },
          end: {
            line: 142,
            column: 9
          }
        },
        line: 99
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 49
          }
        },
        loc: {
          start: {
            line: 100,
            column: 58
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 100
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 131,
            column: 58
          },
          end: {
            line: 131,
            column: 59
          }
        },
        loc: {
          start: {
            line: 131,
            column: 67
          },
          end: {
            line: 139,
            column: 25
          }
        },
        line: 131
      },
      "10": {
        name: "PATCH",
        decl: {
          start: {
            line: 170,
            column: 15
          },
          end: {
            line: 170,
            column: 20
          }
        },
        loc: {
          start: {
            line: 170,
            column: 38
          },
          end: {
            line: 414,
            column: 1
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 204,
            column: 52
          },
          end: {
            line: 204,
            column: 53
          }
        },
        loc: {
          start: {
            line: 204,
            column: 62
          },
          end: {
            line: 383,
            column: 9
          }
        },
        line: 204
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 205,
            column: 53
          },
          end: {
            line: 205,
            column: 54
          }
        },
        loc: {
          start: {
            line: 205,
            column: 65
          },
          end: {
            line: 379,
            column: 13
          }
        },
        line: 205
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 304,
            column: 63
          },
          end: {
            line: 304,
            column: 64
          }
        },
        loc: {
          start: {
            line: 304,
            column: 73
          },
          end: {
            line: 316,
            column: 30
          }
        },
        line: 304
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 319,
            column: 92
          },
          end: {
            line: 319,
            column: 93
          }
        },
        loc: {
          start: {
            line: 319,
            column: 111
          },
          end: {
            line: 340,
            column: 21
          }
        },
        line: 319
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 329,
            column: 83
          },
          end: {
            line: 329,
            column: 84
          }
        },
        loc: {
          start: {
            line: 329,
            column: 95
          },
          end: {
            line: 329,
            column: 113
          }
        },
        line: 329
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 330,
            column: 80
          },
          end: {
            line: 330,
            column: 81
          }
        },
        loc: {
          start: {
            line: 330,
            column: 92
          },
          end: {
            line: 332,
            column: 29
          }
        },
        line: 330
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 342,
            column: 56
          },
          end: {
            line: 342,
            column: 57
          }
        },
        loc: {
          start: {
            line: 342,
            column: 66
          },
          end: {
            line: 342,
            column: 81
          }
        },
        line: 342
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 342,
            column: 87
          },
          end: {
            line: 342,
            column: 88
          }
        },
        loc: {
          start: {
            line: 342,
            column: 97
          },
          end: {
            line: 349,
            column: 26
          }
        },
        line: 342
      },
      "19": {
        name: "PUT",
        decl: {
          start: {
            line: 415,
            column: 15
          },
          end: {
            line: 415,
            column: 18
          }
        },
        loc: {
          start: {
            line: 415,
            column: 36
          },
          end: {
            line: 605,
            column: 1
          }
        },
        line: 415
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 486,
            column: 52
          },
          end: {
            line: 486,
            column: 53
          }
        },
        loc: {
          start: {
            line: 486,
            column: 62
          },
          end: {
            line: 572,
            column: 9
          }
        },
        line: 486
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 487,
            column: 53
          },
          end: {
            line: 487,
            column: 54
          }
        },
        loc: {
          start: {
            line: 487,
            column: 65
          },
          end: {
            line: 568,
            column: 13
          }
        },
        line: 487
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 559,
            column: 52
          },
          end: {
            line: 559,
            column: 53
          }
        },
        loc: {
          start: {
            line: 559,
            column: 61
          },
          end: {
            line: 563,
            column: 21
          }
        },
        line: 559
      },
      "23": {
        name: "DELETE",
        decl: {
          start: {
            line: 606,
            column: 15
          },
          end: {
            line: 606,
            column: 21
          }
        },
        loc: {
          start: {
            line: 606,
            column: 39
          },
          end: {
            line: 713,
            column: 1
          }
        },
        line: 606
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 635,
            column: 52
          },
          end: {
            line: 635,
            column: 53
          }
        },
        loc: {
          start: {
            line: 635,
            column: 62
          },
          end: {
            line: 683,
            column: 9
          }
        },
        line: 635
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 636,
            column: 53
          },
          end: {
            line: 636,
            column: 54
          }
        },
        loc: {
          start: {
            line: 636,
            column: 65
          },
          end: {
            line: 679,
            column: 13
          }
        },
        line: 636
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 31
          }
        }, {
          start: {
            line: 66,
            column: 35
          },
          end: {
            line: 66,
            column: 62
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "4": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 119,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 119,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 135,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 135,
            column: 49
          }
        }, {
          start: {
            line: 135,
            column: 53
          },
          end: {
            line: 135,
            column: 55
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "7": {
        loc: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "8": {
        loc: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "9": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "10": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 192,
            column: 19
          }
        }, {
          start: {
            line: 192,
            column: 23
          },
          end: {
            line: 195,
            column: 26
          }
        }],
        line: 192
      },
      "11": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "12": {
        loc: {
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 226,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 226,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "13": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        }, {
          start: {
            line: 350,
            column: 23
          },
          end: {
            line: 368,
            column: 17
          }
        }],
        line: 227
      },
      "14": {
        loc: {
          start: {
            line: 237,
            column: 24
          },
          end: {
            line: 239,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 24
          },
          end: {
            line: 239,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 44
          }
        }, {
          start: {
            line: 237,
            column: 48
          },
          end: {
            line: 237,
            column: 88
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 241,
            column: 52
          },
          end: {
            line: 241,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 52
          },
          end: {
            line: 241,
            column: 84
          }
        }, {
          start: {
            line: 241,
            column: 88
          },
          end: {
            line: 241,
            column: 89
          }
        }],
        line: 241
      },
      "17": {
        loc: {
          start: {
            line: 265,
            column: 52
          },
          end: {
            line: 265,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 52
          },
          end: {
            line: 265,
            column: 85
          }
        }, {
          start: {
            line: 265,
            column: 89
          },
          end: {
            line: 265,
            column: 90
          }
        }],
        line: 265
      },
      "18": {
        loc: {
          start: {
            line: 273,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        }, {
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 300,
            column: 25
          }
        }],
        line: 273
      },
      "19": {
        loc: {
          start: {
            line: 286,
            column: 52
          },
          end: {
            line: 286,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 52
          },
          end: {
            line: 286,
            column: 82
          }
        }, {
          start: {
            line: 286,
            column: 86
          },
          end: {
            line: 286,
            column: 87
          }
        }],
        line: 286
      },
      "20": {
        loc: {
          start: {
            line: 292,
            column: 28
          },
          end: {
            line: 294,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 28
          },
          end: {
            line: 294,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "21": {
        loc: {
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 317,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 317,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "22": {
        loc: {
          start: {
            line: 328,
            column: 24
          },
          end: {
            line: 338,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 24
          },
          end: {
            line: 338,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "23": {
        loc: {
          start: {
            line: 331,
            column: 61
          },
          end: {
            line: 331,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 61
          },
          end: {
            line: 331,
            column: 81
          }
        }, {
          start: {
            line: 331,
            column: 85
          },
          end: {
            line: 331,
            column: 86
          }
        }],
        line: 331
      },
      "24": {
        loc: {
          start: {
            line: 333,
            column: 46
          },
          end: {
            line: 333,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 66
          },
          end: {
            line: 333,
            column: 92
          }
        }, {
          start: {
            line: 333,
            column: 95
          },
          end: {
            line: 333,
            column: 96
          }
        }],
        line: 333
      },
      "25": {
        loc: {
          start: {
            line: 375,
            column: 32
          },
          end: {
            line: 375,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 56
          },
          end: {
            line: 375,
            column: 67
          }
        }, {
          start: {
            line: 375,
            column: 70
          },
          end: {
            line: 375,
            column: 81
          }
        }],
        line: 375
      },
      "26": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "27": {
        loc: {
          start: {
            line: 405,
            column: 31
          },
          end: {
            line: 405,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 31
          },
          end: {
            line: 405,
            column: 43
          }
        }, {
          start: {
            line: 405,
            column: 47
          },
          end: {
            line: 405,
            column: 57
          }
        }],
        line: 405
      },
      "28": {
        loc: {
          start: {
            line: 409,
            column: 19
          },
          end: {
            line: 409,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 409,
            column: 44
          },
          end: {
            line: 409,
            column: 57
          }
        }, {
          start: {
            line: 409,
            column: 60
          },
          end: {
            line: 409,
            column: 87
          }
        }],
        line: 409
      },
      "29": {
        loc: {
          start: {
            line: 419,
            column: 20
          },
          end: {
            line: 419,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 28
          },
          end: {
            line: 419,
            column: 63
          }
        }, {
          start: {
            line: 419,
            column: 66
          },
          end: {
            line: 419,
            column: 70
          }
        }],
        line: 419
      },
      "30": {
        loc: {
          start: {
            line: 420,
            column: 21
          },
          end: {
            line: 420,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 21
          },
          end: {
            line: 420,
            column: 38
          }
        }, {
          start: {
            line: 420,
            column: 42
          },
          end: {
            line: 420,
            column: 44
          }
        }],
        line: 420
      },
      "31": {
        loc: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "32": {
        loc: {
          start: {
            line: 427,
            column: 21
          },
          end: {
            line: 427,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 21
          },
          end: {
            line: 427,
            column: 45
          }
        }, {
          start: {
            line: 427,
            column: 49
          },
          end: {
            line: 427,
            column: 68
          }
        }],
        line: 427
      },
      "33": {
        loc: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "34": {
        loc: {
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "35": {
        loc: {
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 447,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 447,
            column: 32
          }
        }, {
          start: {
            line: 447,
            column: 36
          },
          end: {
            line: 447,
            column: 61
          }
        }, {
          start: {
            line: 447,
            column: 65
          },
          end: {
            line: 447,
            column: 71
          }
        }, {
          start: {
            line: 447,
            column: 75
          },
          end: {
            line: 447,
            column: 96
          }
        }],
        line: 447
      },
      "36": {
        loc: {
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "37": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "38": {
        loc: {
          start: {
            line: 476,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "39": {
        loc: {
          start: {
            line: 476,
            column: 16
          },
          end: {
            line: 476,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 16
          },
          end: {
            line: 476,
            column: 31
          }
        }, {
          start: {
            line: 476,
            column: 35
          },
          end: {
            line: 476,
            column: 49
          }
        }, {
          start: {
            line: 476,
            column: 53
          },
          end: {
            line: 476,
            column: 71
          }
        }],
        line: 476
      },
      "40": {
        loc: {
          start: {
            line: 494,
            column: 16
          },
          end: {
            line: 496,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 16
          },
          end: {
            line: 496,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "41": {
        loc: {
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 499,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 499,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "42": {
        loc: {
          start: {
            line: 511,
            column: 16
          },
          end: {
            line: 513,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 511,
            column: 16
          },
          end: {
            line: 513,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 511
      },
      "43": {
        loc: {
          start: {
            line: 511,
            column: 20
          },
          end: {
            line: 511,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 511,
            column: 20
          },
          end: {
            line: 511,
            column: 31
          }
        }, {
          start: {
            line: 511,
            column: 35
          },
          end: {
            line: 511,
            column: 51
          }
        }],
        line: 511
      },
      "44": {
        loc: {
          start: {
            line: 522,
            column: 20
          },
          end: {
            line: 530,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 20
          },
          end: {
            line: 530,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "45": {
        loc: {
          start: {
            line: 528,
            column: 44
          },
          end: {
            line: 528,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 528,
            column: 54
          },
          end: {
            line: 528,
            column: 66
          }
        }, {
          start: {
            line: 528,
            column: 69
          },
          end: {
            line: 528,
            column: 99
          }
        }],
        line: 528
      },
      "46": {
        loc: {
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 539,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 539,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "47": {
        loc: {
          start: {
            line: 537,
            column: 44
          },
          end: {
            line: 537,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 537,
            column: 54
          },
          end: {
            line: 537,
            column: 66
          }
        }, {
          start: {
            line: 537,
            column: 69
          },
          end: {
            line: 537,
            column: 99
          }
        }],
        line: 537
      },
      "48": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 581,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 581,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "49": {
        loc: {
          start: {
            line: 600,
            column: 19
          },
          end: {
            line: 600,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 600,
            column: 44
          },
          end: {
            line: 600,
            column: 57
          }
        }, {
          start: {
            line: 600,
            column: 60
          },
          end: {
            line: 600,
            column: 87
          }
        }],
        line: 600
      },
      "50": {
        loc: {
          start: {
            line: 610,
            column: 20
          },
          end: {
            line: 610,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 610,
            column: 28
          },
          end: {
            line: 610,
            column: 63
          }
        }, {
          start: {
            line: 610,
            column: 66
          },
          end: {
            line: 610,
            column: 70
          }
        }],
        line: 610
      },
      "51": {
        loc: {
          start: {
            line: 611,
            column: 21
          },
          end: {
            line: 611,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 611,
            column: 21
          },
          end: {
            line: 611,
            column: 38
          }
        }, {
          start: {
            line: 611,
            column: 42
          },
          end: {
            line: 611,
            column: 44
          }
        }],
        line: 611
      },
      "52": {
        loc: {
          start: {
            line: 614,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 614,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 614
      },
      "53": {
        loc: {
          start: {
            line: 618,
            column: 21
          },
          end: {
            line: 618,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 618,
            column: 21
          },
          end: {
            line: 618,
            column: 45
          }
        }, {
          start: {
            line: 618,
            column: 49
          },
          end: {
            line: 618,
            column: 68
          }
        }],
        line: 618
      },
      "54": {
        loc: {
          start: {
            line: 625,
            column: 4
          },
          end: {
            line: 633,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 625,
            column: 4
          },
          end: {
            line: 633,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 625
      },
      "55": {
        loc: {
          start: {
            line: 643,
            column: 16
          },
          end: {
            line: 645,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 643,
            column: 16
          },
          end: {
            line: 645,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 643
      },
      "56": {
        loc: {
          start: {
            line: 646,
            column: 16
          },
          end: {
            line: 648,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 646,
            column: 16
          },
          end: {
            line: 648,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 646
      },
      "57": {
        loc: {
          start: {
            line: 684,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 684,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 684
      },
      "58": {
        loc: {
          start: {
            line: 708,
            column: 19
          },
          end: {
            line: 708,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 708,
            column: 44
          },
          end: {
            line: 708,
            column: 57
          }
        }, {
          start: {
            line: 708,
            column: 60
          },
          end: {
            line: 708,
            column: 87
          }
        }],
        line: 708
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { transferCacheService, TRANSFER_CACHE_CONFIG } from '@/lib/transferCache';\nimport { trackTransferOperation } from '@/lib/transferPerformanceMonitor';\nimport { deduplicateRequest } from '@/lib/request-deduplication';\nimport { validateTokenPermission, extractToken, verifyToken } from '@/lib/auth';\n\n// Default fallback data for a transfer\nfunction getDefaultTransfer(id: number) {\n    return {\n        id,\n        status: 'pending',\n        created_at: new Date().toISOString(),\n        completed_at: null,\n        source_shop_id: 0,\n        destination_shop_id: 0,\n        source_shop_name: 'Unknown Shop',\n        destination_shop_name: 'Unknown Shop',\n        initiated_by: 'Unknown User',\n        items: []\n    };\n}\n\n// Default fallback data for transfers list\nconst defaultTransfersData = [\n    {\n        id: 1,\n        status: 'pending',\n        created_at: new Date().toISOString(),\n        completed_at: null,\n        source_shop_name: 'Main Store',\n        destination_shop_name: 'Branch Store',\n        initiated_by: 'System',\n        item_count: 0,\n        total_items: 0\n    }\n];\n\n// GET: Fetch a specific inventory transfer by ID\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const operation = trackTransferOperation('detail');\n\n    // Check for inventory:view or inventory:transfer permission\n    const viewPermission = await validateTokenPermission(req, 'inventory:view');\n    const transferPermission = await validateTokenPermission(req, 'inventory:transfer');\n\n    if (!viewPermission.isValid && !transferPermission.isValid) {\n        operation.end(false, 'unauthorized');\n        return NextResponse.json({\n            success: false,\n            message: 'Permission denied'\n        }, { status: 403 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        // Generate cache key\n        const cacheKey = `${TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_DETAIL}:${resolvedParams.id}`;\n\n        // Try to get from cache first\n        const cached = await transferCacheService.get(cacheKey);\n        if (cached) {\n            operation.end(true, undefined, true);\n            return NextResponse.json({\n                success: true,\n                data: cached\n            });\n        }\n\n        // Use request deduplication\n        const transfer = await deduplicateRequest(\n            async () => {\n                return await safeQuery(\n                    async () => {\n                        // Get transfer details with related data\n                        const transferData = await prisma.inventoryTransfer.findUnique({\n                            where: { id },\n                            include: {\n                                fromShop: true,\n                                toShop: true,\n                                fromUser: true,\n                                transferItems: {\n                                    include: {\n                                        product: true\n                                    }\n                                }\n                            }\n                        });\n\n                        if (!transferData) {\n                            return null;\n                        }\n\n                        // Format the transfer data to match the expected format\n                        return {\n                            id: transferData.id,\n                            status: transferData.status,\n                            created_at: transferData.createdAt.toISOString(),\n                            completed_at: null, // This field isn't in the Prisma schema\n                            source_shop_id: transferData.fromShopId,\n                            destination_shop_id: transferData.toShopId,\n                            source_shop_name: transferData.fromShop.name,\n                            destination_shop_name: transferData.toShop.name,\n                            initiated_by: transferData.fromUser.name,\n                            items: transferData.transferItems.map(item => ({\n                                id: item.id,\n                                product_id: item.productId,\n                                product_name: item.product.name,\n                                sku: item.product.sku || '',\n                                quantity: item.quantity,\n                                notes: null, // This field isn't in the Prisma schema\n                                price: item.product.price.toString()\n                            }))\n                        };\n                    },\n                    getDefaultTransfer(id),\n                    `Failed to fetch transfer with ID ${id}`\n                );\n            },\n            `/api/inventory/transfers/${resolvedParams.id}`\n        );\n\n        if (!transfer) {\n            operation.end(false, 'not_found');\n            return NextResponse.json({\n                success: false,\n                error: 'Transfer not found'\n            }, { status: 404 });\n        }\n\n        // Cache the result\n        await transferCacheService.set(cacheKey, transfer);\n\n        operation.end(true, undefined, false);\n        return NextResponse.json({\n            success: true,\n            data: transfer\n        });\n    } catch (error) {\n        console.error(`Error fetching transfer ${id}:`, error);\n        operation.end(false, 'fetch_error');\n        return NextResponse.json({\n            success: false,\n            error: 'Failed to fetch transfer'\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update a transfer (complete, cancel)\nexport async function PATCH(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const operation = trackTransferOperation('complete');\n\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const body = await req.json();\n        const { action } = body;\n\n        if (!action || !['complete', 'cancel'].includes(action)) {\n            operation.end(false, 'invalid_action');\n            return NextResponse.json({\n                success: false,\n                error: 'Invalid action. Must be \"complete\" or \"cancel\"'\n            }, { status: 400 });\n        }\n\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Declare affectedProductIds before using it\n                        const affectedProductIds = new Set<number>();\n\n                        // Get transfer with items\n                        const transfer = await tx.inventoryTransfer.findUnique({\n                            where: { id },\n                            include: {\n                                transferItems: {\n                                    include: {\n                                        product: true\n                                    }\n                                }\n                            }\n                        });\n\n                        if (!transfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (transfer.status !== 'pending') {\n                            throw new Error(`Cannot ${action} a transfer that is not in pending status`);\n                        }\n\n                        if (action === 'complete') {\n\n                            // Process each transfer item for completion\n                            for (const item of transfer.transferItems) {\n                                // Check source inventory\n                                const sourceInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.fromShopId,\n                                        productId: item.productId\n                                    }\n                                });\n\n                                if (!sourceInventory || sourceInventory.quantity < item.quantity) {\n                                    throw new Error(`Insufficient inventory for product ID ${item.productId} in source shop`);\n                                }\n\n                                // Get the shop-specific cost from source inventory\n                                const transferCostPerUnit = sourceInventory.shopSpecificCost || 0;\n\n                                // Update source inventory (decrease quantity)\n                                await tx.inventoryItem.update({\n                                    where: { id: sourceInventory.id },\n                                    data: {\n                                        quantity: sourceInventory.quantity - item.quantity,\n                                        updatedAt: new Date()\n                                    }\n                                });\n\n                                // Collect items for batch processing\n                                affectedProductIds.add(item.productId);\n                            }\n\n                            // Batch process inventory updates\n                            const inventoryUpdates: Array<{\n                                productId: number;\n                                quantity: number;\n                                cost: number;\n                            }> = [];\n\n                            for (const item of transfer.transferItems) {\n                                // Get the shop-specific cost from source inventory\n                                const sourceInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.fromShopId,\n                                        productId: item.productId\n                                    }\n                                });\n                                const transferCostPerUnit = sourceInventory?.shopSpecificCost || 0;\n\n                                // Check if destination already has this product\n                                const destInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.toShopId,\n                                        productId: item.productId\n                                    }\n                                });\n\n                                if (!destInventory) {\n                                    // Create new inventory item at destination\n                                    await tx.inventoryItem.create({\n                                        data: {\n                                            shopId: transfer.toShopId,\n                                            productId: item.productId,\n                                            quantity: item.quantity,\n                                            shopSpecificCost: transferCostPerUnit\n                                        }\n                                    });\n                                } else {\n                                    // Calculate new WAC for destination shop using weighted average\n                                    const currentDestQuantity = destInventory.quantity;\n                                    const currentDestCost = destInventory.shopSpecificCost || 0;\n                                    const transferQuantity = item.quantity;\n\n                                    const currentTotalValue = currentDestQuantity * currentDestCost;\n                                    const transferTotalValue = transferQuantity * transferCostPerUnit;\n                                    const newTotalQuantity = currentDestQuantity + transferQuantity;\n\n                                    let newShopSpecificCost = 0;\n                                    if (newTotalQuantity > 0) {\n                                        newShopSpecificCost = (currentTotalValue + transferTotalValue) / newTotalQuantity;\n                                    }\n\n                                    inventoryUpdates.push({\n                                        productId: item.productId,\n                                        quantity: item.quantity,\n                                        cost: newShopSpecificCost\n                                    });\n                                }\n                            }\n\n                            // Batch update existing inventory items\n                            if (inventoryUpdates.length > 0) {\n                                await Promise.all(\n                                    inventoryUpdates.map(update =>\n                                        tx.inventoryItem.updateMany({\n                                            where: {\n                                                shopId: transfer.toShopId,\n                                                productId: update.productId\n                                            },\n                                            data: {\n                                                quantity: { increment: update.quantity },\n                                                shopSpecificCost: update.cost,\n                                                updatedAt: new Date()\n                                            }\n                                        })\n                                    )\n                                );\n                            }\n\n                            // Batch recalculate global weighted average costs\n                            const wacUpdates = await Promise.all(\n                                Array.from(affectedProductIds).map(async (productId) => {\n                                    const allInventoryAfterTransfer = await tx.inventoryItem.findMany({\n                                        where: {\n                                            productId,\n                                            quantity: { gt: 0 } // Only consider inventories with stock\n                                        }\n                                    });\n\n                                    if (allInventoryAfterTransfer.length > 0) {\n                                        const totalQuantity = allInventoryAfterTransfer.reduce((sum, inv) => sum + inv.quantity, 0);\n                                        const totalValue = allInventoryAfterTransfer.reduce((sum, inv) => {\n                                            return sum + (inv.quantity * (inv.shopSpecificCost || 0));\n                                        }, 0);\n\n                                        const globalWAC = totalQuantity > 0 ? totalValue / totalQuantity : 0;\n                                        return { productId, globalWAC };\n                                    }\n                                    return null;\n                                })\n                            );\n\n                            // Update global WAC for all affected products\n                            await Promise.all(\n                                wacUpdates\n                                    .filter(update => update !== null)\n                                    .map(update =>\n                                        tx.product.update({\n                                            where: { id: update!.productId },\n                                            data: { weightedAverageCost: update!.globalWAC }\n                                        })\n                                    )\n                            );\n                        } else {\n                            // action === 'cancel'\n                            // Return reserved inventory in source shop\n                            for (const item of transfer.transferItems) {\n                                await tx.inventoryItem.updateMany({\n                                    where: {\n                                        productId: item.productId,\n                                        shopId: transfer.fromShopId,\n                                    },\n                                    data: {\n                                        quantity: { increment: item.quantity },\n                                        updatedAt: new Date(),\n                                    },\n                                });\n                            }\n                            // No further updates required for destination inventory or WAC\n                        }\n\n                        // Update transfer status\n                        return await tx.inventoryTransfer.update({\n                            where: { id },\n                            data: {\n                                status: action === 'complete' ? 'completed' : 'cancelled',\n                                updatedAt: new Date()\n                            }\n                        });\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            `Failed to ${action} transfer`\n        );\n\n        if (!result) {\n            operation.end(false, 'update_failed');\n            return NextResponse.json({\n                success: false,\n                error: `Failed to ${action} transfer`\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: `Transfer ${action}d successfully`,\n            data: result\n        });\n    } catch (error) {\n        console.error(`Error ${body?.action || 'updating'} transfer ${id}:`, error);\n        operation.end(false, 'update_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : `Failed to update transfer`\n        }, { status: 500 });\n    }\n}\n\n// PUT: Update a transfer (only if pending)\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const operation = trackTransferOperation('update');\n\n    // Token and user role check\n    const token = extractToken(req);\n    const payload = token ? await verifyToken(token) : null;\n    const userRole = payload?.roleName as string ?? '';\n\n    // Check for inventory:transfer permission\n    const permissionResult = await validateTokenPermission(req, 'inventory:transfer');\n    if (!permissionResult.isValid) {\n        operation.end(false, 'unauthorized');\n        return NextResponse.json({\n            success: false,\n            message: permissionResult.message || 'Permission denied'\n        }, { status: 403 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const body = await req.json();\n        const { sourceShopId, destinationShopId, items } = body;\n\n        // Validate input\n        if (sourceShopId == null || destinationShopId == null || !items || !Array.isArray(items)) {\n            operation.end(false, 'invalid_input');\n            return NextResponse.json({\n                success: false,\n                error: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        if (sourceShopId === destinationShopId) {\n            operation.end(false, 'same_shop');\n            return NextResponse.json({\n                success: false,\n                error: 'Source and destination shops cannot be the same'\n            }, { status: 400 });\n        }\n\n        if (items.length === 0) {\n            operation.end(false, 'no_items');\n            return NextResponse.json({\n                success: false,\n                error: 'At least one item is required'\n            }, { status: 400 });\n        }\n\n        // Validate items\n        for (const item of items) {\n            if (!item.productId || !item.quantity || item.quantity <= 0) {\n                operation.end(false, 'invalid_item');\n                return NextResponse.json({\n                    success: false,\n                    error: 'Invalid item data'\n                }, { status: 400 });\n            }\n        }\n\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Check if transfer exists and is pending\n                        const existingTransfer = await tx.inventoryTransfer.findUnique({\n                            where: { id }\n                        });\n\n                        if (!existingTransfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (existingTransfer.status !== 'pending') {\n                            throw new Error('Only pending transfers can be edited');\n                        }\n\n                        // Verify shops exist\n                        const sourceShop = await tx.shop.findUnique({ where: { id: sourceShopId } });\n                        const destinationShop = await tx.shop.findUnique({ where: { id: destinationShopId } });\n\n                        if (!sourceShop || !destinationShop) {\n                            throw new Error('Invalid shop selection');\n                        }\n\n                        // Verify products exist and have sufficient stock\n                        for (const item of items) {\n                            const inventory = await tx.inventoryItem.findFirst({\n                                where: {\n                                    productId: item.productId,\n                                    shopId: sourceShopId\n                                }\n                            });\n\n                            if (!inventory) {\n                                const product = await tx.product.findUnique({ where: { id: item.productId } });\n                                const productName = product ? product.name : `Product ID ${item.productId}`;\n                                throw new Error(`Product \"${productName}\" not found in source shop`);\n                            }\n\n                            if (inventory.quantity < item.quantity) {\n                                const product = await tx.product.findUnique({ where: { id: item.productId } });\n                                const productName = product ? product.name : `Product ID ${item.productId}`;\n                                throw new Error(`Insufficient stock for \"${productName}\". Available: ${inventory.quantity}, Requested: ${item.quantity}`);\n                            }\n                        }\n\n                        // Update transfer\n                        const updatedTransfer = await tx.inventoryTransfer.update({\n                            where: { id },\n                            data: {\n                                fromShopId: sourceShopId,\n                                toShopId: destinationShopId,\n                                updatedAt: new Date()\n                            }\n                        });\n\n                        // Delete existing transfer items\n                        await tx.transferItem.deleteMany({\n                            where: { transferId: id }\n                        });\n\n                        // Insert new transfer items\n                        const transferItemsData = items.map((item: any) => ({\n                            transferId: id,\n                            productId: item.productId,\n                            quantity: item.quantity\n                        }));\n\n                        await tx.transferItem.createMany({\n                            data: transferItemsData\n                        });\n\n                        return updatedTransfer;\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            'Failed to update transfer'\n        );\n\n        if (!result) {\n            operation.end(false, 'update_failed');\n            return NextResponse.json({\n                success: false,\n                error: 'Failed to update transfer'\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Transfer updated successfully',\n            data: { id }\n        });\n    } catch (error) {\n        console.error(`Error updating transfer ${id}:`, error);\n        operation.end(false, 'update_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to update transfer'\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete a transfer (only if pending)\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const operation = trackTransferOperation('cancel');\n\n    // Token and user role check\n    const token = extractToken(req);\n    const payload = token ? await verifyToken(token) : null;\n    const userRole = payload?.roleName as string ?? '';\n\n    // Check for inventory:transfer permission\n    const permissionResult = await validateTokenPermission(req, 'inventory:transfer');\n    if (!permissionResult.isValid) {\n        operation.end(false, 'unauthorized');\n        return NextResponse.json({\n            success: false,\n            message: permissionResult.message || 'Permission denied'\n        }, { status: 403 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Get transfer to check status\n                        const transfer = await tx.inventoryTransfer.findUnique({\n                            where: { id }\n                        });\n\n                        if (!transfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (transfer.status !== 'pending') {\n                            throw new Error('Only pending transfers can be deleted');\n                        }\n\n                        // Return reserved inventory to source shop before deletion\n                        const items = await tx.transferItem.findMany({ where: { transferId: id } });\n                        for (const item of items) {\n                            await tx.inventoryItem.updateMany({\n                                where: {\n                                    productId: item.productId,\n                                    shopId: transfer.fromShopId\n                                },\n                                data: { quantity: { increment: item.quantity } }\n                            });\n                        }\n\n                        // Delete transfer items and the transfer itself\n                        await tx.transferItem.deleteMany({ where: { transferId: id } });\n\n                        return await tx.inventoryTransfer.delete({ where: { id } });\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            'Failed to delete transfer'\n        );\n\n        if (!result) {\n            operation.end(false, 'delete_failed');\n            return NextResponse.json({\n                success: false,\n                error: 'Failed to delete transfer'\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Transfer deleted successfully'\n        });\n    } catch (error) {\n        console.error(`Error deleting transfer ${id}:`, error);\n        operation.end(false, 'delete_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to delete transfer'\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "PUT", "getDefaultTransfer", "id", "status", "created_at", "Date", "toISOString", "completed_at", "source_shop_id", "destination_shop_id", "source_shop_name", "destination_shop_name", "initiated_by", "items", "defaultTransfersData", "item_count", "total_items", "req", "params", "operation", "trackTransferOperation", "viewPermission", "validateTokenPermission", "transferPermission", "isValid", "end", "NextResponse", "json", "success", "message", "resolvedParams", "parseInt", "isNaN", "error", "cacheKey", "TRANSFER_CACHE_CONFIG", "KEYS", "TRANSFER_DETAIL", "cached", "transferCacheService", "get", "undefined", "data", "transfer", "deduplicateRequest", "safeQuery", "transferData", "prisma", "inventoryTransfer", "findUnique", "where", "include", "fromShop", "toShop", "fromUser", "transferItems", "product", "createdAt", "fromShopId", "toShopId", "name", "map", "item", "product_id", "productId", "product_name", "sku", "quantity", "notes", "price", "toString", "set", "console", "permissionError", "requirePermission", "body", "action", "includes", "result", "$transaction", "tx", "affectedProductIds", "Set", "Error", "sourceInventory", "inventoryItem", "findFirst", "shopId", "transferCostPerUnit", "shopSpecificCost", "update", "updatedAt", "add", "inventoryUpdates", "destInventory", "create", "currentDestQuantity", "currentDestCost", "transferQuantity", "currentTotalValue", "transferTotalValue", "newTotalQuantity", "newShopSpecificCost", "push", "cost", "length", "Promise", "all", "updateMany", "increment", "wacUpdates", "Array", "from", "allInventoryAfterTransfer", "findMany", "gt", "totalQuantity", "reduce", "sum", "inv", "totalValue", "globalWAC", "filter", "weightedAverageCost", "timeout", "invalidateTransferCache", "token", "extractToken", "payload", "verifyToken", "userRole", "roleName", "permissionResult", "sourceShopId", "destinationShopId", "isArray", "existingTransfer", "sourceShop", "shop", "destinationShop", "inventory", "productName", "updatedTransfer", "transferItem", "deleteMany", "transferId", "transferItemsData", "createMany", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "630045da9269c0c672b0076494814e2de993086d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ng7jnwm2g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ng7jnwm2g();
cov_2ng7jnwm2g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[0]++;
  cov_2ng7jnwm2g().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2ng7jnwm2g().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[1]++;
    cov_2ng7jnwm2g().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[2]++;
    cov_2ng7jnwm2g().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[3]++;
    cov_2ng7jnwm2g().s[6]++;
    return PATCH;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[4]++;
    cov_2ng7jnwm2g().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[8]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[9]++, require("../../../../../lib/utils/middleware"));
const _prisma =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[10]++, require("../../../../../lib/prisma"));
const _transferCache =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[11]++, require("../../../../../lib/transferCache"));
const _transferPerformanceMonitor =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[12]++, require("../../../../../lib/transferPerformanceMonitor"));
const _requestdeduplication =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[13]++, require("../../../../../lib/request-deduplication"));
const _auth =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[14]++, require("../../../../../lib/auth"));
// Default fallback data for a transfer
function getDefaultTransfer(id) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[5]++;
  cov_2ng7jnwm2g().s[15]++;
  return {
    id,
    status: "pending",
    created_at: new Date().toISOString(),
    completed_at: null,
    source_shop_id: 0,
    destination_shop_id: 0,
    source_shop_name: "Unknown Shop",
    destination_shop_name: "Unknown Shop",
    initiated_by: "Unknown User",
    items: []
  };
}
// Default fallback data for transfers list
const defaultTransfersData =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[16]++, [{
  id: 1,
  status: "pending",
  created_at: new Date().toISOString(),
  completed_at: null,
  source_shop_name: "Main Store",
  destination_shop_name: "Branch Store",
  initiated_by: "System",
  item_count: 0,
  total_items: 0
}]);
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[6]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[17]++, (0, _transferPerformanceMonitor.trackTransferOperation)("detail"));
  // Check for inventory:view or inventory:transfer permission
  const viewPermission =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[18]++, await (0, _auth.validateTokenPermission)(req, "inventory:view"));
  const transferPermission =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[19]++, await (0, _auth.validateTokenPermission)(req, "inventory:transfer"));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[1][0]++, !viewPermission.isValid) &&
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[1][1]++, !transferPermission.isValid)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[0][0]++;
    cov_2ng7jnwm2g().s[21]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[22]++;
    return _server.NextResponse.json({
      success: false,
      message: "Permission denied"
    }, {
      status: 403
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[0][1]++;
  }
  const resolvedParams =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[23]++, await params);
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[24]++, parseInt(resolvedParams.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[25]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[2][0]++;
    cov_2ng7jnwm2g().s[26]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[27]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[2][1]++;
  }
  cov_2ng7jnwm2g().s[28]++;
  try {
    // Generate cache key
    const cacheKey =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[29]++, `${_transferCache.TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_DETAIL}:${resolvedParams.id}`);
    // Try to get from cache first
    const cached =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[30]++, await _transferCache.transferCacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[31]++;
    if (cached) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[3][0]++;
      cov_2ng7jnwm2g().s[32]++;
      operation.end(true, undefined, true);
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[33]++;
      return _server.NextResponse.json({
        success: true,
        data: cached
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[3][1]++;
    }
    // Use request deduplication
    const transfer =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[34]++, await (0, _requestdeduplication.deduplicateRequest)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[7]++;
      cov_2ng7jnwm2g().s[35]++;
      return await (0, _prisma.safeQuery)(async () => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[8]++;
        // Get transfer details with related data
        const transferData =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[36]++, await _prisma.prisma.inventoryTransfer.findUnique({
          where: {
            id
          },
          include: {
            fromShop: true,
            toShop: true,
            fromUser: true,
            transferItems: {
              include: {
                product: true
              }
            }
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[37]++;
        if (!transferData) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[4][0]++;
          cov_2ng7jnwm2g().s[38]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[4][1]++;
        }
        // Format the transfer data to match the expected format
        cov_2ng7jnwm2g().s[39]++;
        return {
          id: transferData.id,
          status: transferData.status,
          created_at: transferData.createdAt.toISOString(),
          completed_at: null,
          source_shop_id: transferData.fromShopId,
          destination_shop_id: transferData.toShopId,
          source_shop_name: transferData.fromShop.name,
          destination_shop_name: transferData.toShop.name,
          initiated_by: transferData.fromUser.name,
          items: transferData.transferItems.map(item => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[9]++;
            cov_2ng7jnwm2g().s[40]++;
            return {
              id: item.id,
              product_id: item.productId,
              product_name: item.product.name,
              sku:
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[5][0]++, item.product.sku) ||
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[5][1]++, ""),
              quantity: item.quantity,
              notes: null,
              price: item.product.price.toString()
            };
          })
        };
      }, getDefaultTransfer(id), `Failed to fetch transfer with ID ${id}`);
    }, `/api/inventory/transfers/${resolvedParams.id}`));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[41]++;
    if (!transfer) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[6][0]++;
      cov_2ng7jnwm2g().s[42]++;
      operation.end(false, "not_found");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[43]++;
      return _server.NextResponse.json({
        success: false,
        error: "Transfer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[6][1]++;
    }
    // Cache the result
    cov_2ng7jnwm2g().s[44]++;
    await _transferCache.transferCacheService.set(cacheKey, transfer);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[45]++;
    operation.end(true, undefined, false);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[46]++;
    return _server.NextResponse.json({
      success: true,
      data: transfer
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[47]++;
    console.error(`Error fetching transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[48]++;
    operation.end(false, "fetch_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[49]++;
    return _server.NextResponse.json({
      success: false,
      error: "Failed to fetch transfer"
    }, {
      status: 500
    });
  }
}
async function PATCH(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[10]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[50]++, (0, _transferPerformanceMonitor.trackTransferOperation)("complete"));
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[51]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[52]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[7][0]++;
    cov_2ng7jnwm2g().s[53]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[54]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[7][1]++;
  }
  const resolvedParams =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[55]++, await params);
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[56]++, parseInt(resolvedParams.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[57]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[8][0]++;
    cov_2ng7jnwm2g().s[58]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[59]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[8][1]++;
  }
  cov_2ng7jnwm2g().s[60]++;
  try {
    const body1 =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[61]++, await req.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[62]++, body1);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[10][0]++, !action) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[10][1]++, !["complete", "cancel"].includes(action))) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[9][0]++;
      cov_2ng7jnwm2g().s[64]++;
      operation.end(false, "invalid_action");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[65]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Invalid action. Must be "complete" or "cancel"'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[9][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[66]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[11]++;
      cov_2ng7jnwm2g().s[67]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[12]++;
        // Declare affectedProductIds before using it
        const affectedProductIds =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[68]++, new Set());
        // Get transfer with items
        const transfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[69]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          },
          include: {
            transferItems: {
              include: {
                product: true
              }
            }
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[70]++;
        if (!transfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[11][0]++;
          cov_2ng7jnwm2g().s[71]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[11][1]++;
        }
        cov_2ng7jnwm2g().s[72]++;
        if (transfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[12][0]++;
          cov_2ng7jnwm2g().s[73]++;
          throw new Error(`Cannot ${action} a transfer that is not in pending status`);
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[12][1]++;
        }
        cov_2ng7jnwm2g().s[74]++;
        if (action === "complete") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[13][0]++;
          cov_2ng7jnwm2g().s[75]++;
          // Process each transfer item for completion
          for (const item of transfer.transferItems) {
            // Check source inventory
            const sourceInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[76]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.fromShopId,
                productId: item.productId
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[77]++;
            if (
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[15][0]++, !sourceInventory) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[15][1]++, sourceInventory.quantity < item.quantity)) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[14][0]++;
              cov_2ng7jnwm2g().s[78]++;
              throw new Error(`Insufficient inventory for product ID ${item.productId} in source shop`);
            } else
            /* istanbul ignore next */
            {
              cov_2ng7jnwm2g().b[14][1]++;
            }
            // Get the shop-specific cost from source inventory
            const transferCostPerUnit =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[79]++,
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[16][0]++, sourceInventory.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[16][1]++, 0));
            // Update source inventory (decrease quantity)
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[80]++;
            await tx.inventoryItem.update({
              where: {
                id: sourceInventory.id
              },
              data: {
                quantity: sourceInventory.quantity - item.quantity,
                updatedAt: new Date()
              }
            });
            // Collect items for batch processing
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[81]++;
            affectedProductIds.add(item.productId);
          }
          // Batch process inventory updates
          const inventoryUpdates =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[82]++, []);
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[83]++;
          for (const item of transfer.transferItems) {
            // Get the shop-specific cost from source inventory
            const sourceInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[84]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.fromShopId,
                productId: item.productId
              }
            }));
            const transferCostPerUnit =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[85]++,
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[17][0]++, sourceInventory?.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[17][1]++, 0));
            // Check if destination already has this product
            const destInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[86]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.toShopId,
                productId: item.productId
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[87]++;
            if (!destInventory) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[18][0]++;
              cov_2ng7jnwm2g().s[88]++;
              // Create new inventory item at destination
              await tx.inventoryItem.create({
                data: {
                  shopId: transfer.toShopId,
                  productId: item.productId,
                  quantity: item.quantity,
                  shopSpecificCost: transferCostPerUnit
                }
              });
            } else {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[18][1]++;
              // Calculate new WAC for destination shop using weighted average
              const currentDestQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[89]++, destInventory.quantity);
              const currentDestCost =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[90]++,
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[19][0]++, destInventory.shopSpecificCost) ||
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[19][1]++, 0));
              const transferQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[91]++, item.quantity);
              const currentTotalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[92]++, currentDestQuantity * currentDestCost);
              const transferTotalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[93]++, transferQuantity * transferCostPerUnit);
              const newTotalQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[94]++, currentDestQuantity + transferQuantity);
              let newShopSpecificCost =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[95]++, 0);
              /* istanbul ignore next */
              cov_2ng7jnwm2g().s[96]++;
              if (newTotalQuantity > 0) {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().b[20][0]++;
                cov_2ng7jnwm2g().s[97]++;
                newShopSpecificCost = (currentTotalValue + transferTotalValue) / newTotalQuantity;
              } else
              /* istanbul ignore next */
              {
                cov_2ng7jnwm2g().b[20][1]++;
              }
              cov_2ng7jnwm2g().s[98]++;
              inventoryUpdates.push({
                productId: item.productId,
                quantity: item.quantity,
                cost: newShopSpecificCost
              });
            }
          }
          // Batch update existing inventory items
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[99]++;
          if (inventoryUpdates.length > 0) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[21][0]++;
            cov_2ng7jnwm2g().s[100]++;
            await Promise.all(inventoryUpdates.map(update => {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().f[13]++;
              cov_2ng7jnwm2g().s[101]++;
              return tx.inventoryItem.updateMany({
                where: {
                  shopId: transfer.toShopId,
                  productId: update.productId
                },
                data: {
                  quantity: {
                    increment: update.quantity
                  },
                  shopSpecificCost: update.cost,
                  updatedAt: new Date()
                }
              });
            }));
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[21][1]++;
          }
          // Batch recalculate global weighted average costs
          const wacUpdates =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[102]++, await Promise.all(Array.from(affectedProductIds).map(async productId => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[14]++;
            const allInventoryAfterTransfer =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[103]++, await tx.inventoryItem.findMany({
              where: {
                productId,
                quantity: {
                  gt: 0
                } // Only consider inventories with stock
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[104]++;
            if (allInventoryAfterTransfer.length > 0) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[22][0]++;
              const totalQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[105]++, allInventoryAfterTransfer.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().f[15]++;
                cov_2ng7jnwm2g().s[106]++;
                return sum + inv.quantity;
              }, 0));
              const totalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[107]++, allInventoryAfterTransfer.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().f[16]++;
                cov_2ng7jnwm2g().s[108]++;
                return sum + inv.quantity * (
                /* istanbul ignore next */
                (cov_2ng7jnwm2g().b[23][0]++, inv.shopSpecificCost) ||
                /* istanbul ignore next */
                (cov_2ng7jnwm2g().b[23][1]++, 0));
              }, 0));
              const globalWAC =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[109]++, totalQuantity > 0 ?
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[24][0]++, totalValue / totalQuantity) :
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[24][1]++, 0));
              /* istanbul ignore next */
              cov_2ng7jnwm2g().s[110]++;
              return {
                productId,
                globalWAC
              };
            } else
            /* istanbul ignore next */
            {
              cov_2ng7jnwm2g().b[22][1]++;
            }
            cov_2ng7jnwm2g().s[111]++;
            return null;
          })));
          // Update global WAC for all affected products
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[112]++;
          await Promise.all(wacUpdates.filter(update => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[17]++;
            cov_2ng7jnwm2g().s[113]++;
            return update !== null;
          }).map(update => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[18]++;
            cov_2ng7jnwm2g().s[114]++;
            return tx.product.update({
              where: {
                id: update.productId
              },
              data: {
                weightedAverageCost: update.globalWAC
              }
            });
          }));
        } else {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[13][1]++;
          cov_2ng7jnwm2g().s[115]++;
          // action === 'cancel'
          // Return reserved inventory in source shop
          for (const item of transfer.transferItems) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[116]++;
            await tx.inventoryItem.updateMany({
              where: {
                productId: item.productId,
                shopId: transfer.fromShopId
              },
              data: {
                quantity: {
                  increment: item.quantity
                },
                updatedAt: new Date()
              }
            });
          }
          // No further updates required for destination inventory or WAC
        }
        // Update transfer status
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[117]++;
        return await tx.inventoryTransfer.update({
          where: {
            id
          },
          data: {
            status: action === "complete" ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[25][0]++, "completed") :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[25][1]++, "cancelled"),
            updatedAt: new Date()
          }
        });
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, `Failed to ${action} transfer`));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[118]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[26][0]++;
      cov_2ng7jnwm2g().s[119]++;
      operation.end(false, "update_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[120]++;
      return _server.NextResponse.json({
        success: false,
        error: `Failed to ${action} transfer`
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[26][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[121]++;
    await _transferCache.transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[122]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[123]++;
    return _server.NextResponse.json({
      success: true,
      message: `Transfer ${action}d successfully`,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[124]++;
    console.error(`Error ${
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[27][0]++, body?.action) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[27][1]++, "updating")} transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[125]++;
    operation.end(false, "update_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[126]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[28][1]++, `Failed to update transfer`)
    }, {
      status: 500
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[19]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[127]++, (0, _transferPerformanceMonitor.trackTransferOperation)("update"));
  // Token and user role check
  const token =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[128]++, (0, _auth.extractToken)(req));
  const payload =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[129]++, token ?
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[29][0]++, await (0, _auth.verifyToken)(token)) :
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[29][1]++, null));
  const userRole =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[130]++,
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[30][0]++, payload?.roleName) ??
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[30][1]++, ""));
  // Check for inventory:transfer permission
  const permissionResult =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[131]++, await (0, _auth.validateTokenPermission)(req, "inventory:transfer"));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[132]++;
  if (!permissionResult.isValid) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[31][0]++;
    cov_2ng7jnwm2g().s[133]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[134]++;
    return _server.NextResponse.json({
      success: false,
      message:
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[32][0]++, permissionResult.message) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[32][1]++, "Permission denied")
    }, {
      status: 403
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[31][1]++;
  }
  const resolvedParams =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[135]++, await params);
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[136]++, parseInt(resolvedParams.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[137]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[33][0]++;
    cov_2ng7jnwm2g().s[138]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[139]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[33][1]++;
  }
  cov_2ng7jnwm2g().s[140]++;
  try {
    const body1 =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[141]++, await req.json());
    const {
      sourceShopId,
      destinationShopId,
      items
    } =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[142]++, body1);
    // Validate input
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[35][0]++, sourceShopId == null) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[35][1]++, destinationShopId == null) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[35][2]++, !items) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[35][3]++, !Array.isArray(items))) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[34][0]++;
      cov_2ng7jnwm2g().s[144]++;
      operation.end(false, "invalid_input");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[145]++;
      return _server.NextResponse.json({
        success: false,
        error: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[34][1]++;
    }
    cov_2ng7jnwm2g().s[146]++;
    if (sourceShopId === destinationShopId) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[36][0]++;
      cov_2ng7jnwm2g().s[147]++;
      operation.end(false, "same_shop");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[148]++;
      return _server.NextResponse.json({
        success: false,
        error: "Source and destination shops cannot be the same"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[36][1]++;
    }
    cov_2ng7jnwm2g().s[149]++;
    if (items.length === 0) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[37][0]++;
      cov_2ng7jnwm2g().s[150]++;
      operation.end(false, "no_items");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[151]++;
      return _server.NextResponse.json({
        success: false,
        error: "At least one item is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[37][1]++;
    }
    // Validate items
    cov_2ng7jnwm2g().s[152]++;
    for (const item of items) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[153]++;
      if (
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[39][0]++, !item.productId) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[39][1]++, !item.quantity) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[39][2]++, item.quantity <= 0)) {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().b[38][0]++;
        cov_2ng7jnwm2g().s[154]++;
        operation.end(false, "invalid_item");
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[155]++;
        return _server.NextResponse.json({
          success: false,
          error: "Invalid item data"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ng7jnwm2g().b[38][1]++;
      }
    }
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[156]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[20]++;
      cov_2ng7jnwm2g().s[157]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[21]++;
        // Check if transfer exists and is pending
        const existingTransfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[158]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[159]++;
        if (!existingTransfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[40][0]++;
          cov_2ng7jnwm2g().s[160]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[40][1]++;
        }
        cov_2ng7jnwm2g().s[161]++;
        if (existingTransfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[41][0]++;
          cov_2ng7jnwm2g().s[162]++;
          throw new Error("Only pending transfers can be edited");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[41][1]++;
        }
        // Verify shops exist
        const sourceShop =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[163]++, await tx.shop.findUnique({
          where: {
            id: sourceShopId
          }
        }));
        const destinationShop =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[164]++, await tx.shop.findUnique({
          where: {
            id: destinationShopId
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[165]++;
        if (
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().b[43][0]++, !sourceShop) ||
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().b[43][1]++, !destinationShop)) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[42][0]++;
          cov_2ng7jnwm2g().s[166]++;
          throw new Error("Invalid shop selection");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[42][1]++;
        }
        // Verify products exist and have sufficient stock
        cov_2ng7jnwm2g().s[167]++;
        for (const item of items) {
          const inventory =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[168]++, await tx.inventoryItem.findFirst({
            where: {
              productId: item.productId,
              shopId: sourceShopId
            }
          }));
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[169]++;
          if (!inventory) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[44][0]++;
            const product =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[170]++, await tx.product.findUnique({
              where: {
                id: item.productId
              }
            }));
            const productName =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[171]++, product ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[45][0]++, product.name) :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[45][1]++, `Product ID ${item.productId}`));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[172]++;
            throw new Error(`Product "${productName}" not found in source shop`);
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[44][1]++;
          }
          cov_2ng7jnwm2g().s[173]++;
          if (inventory.quantity < item.quantity) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[46][0]++;
            const product =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[174]++, await tx.product.findUnique({
              where: {
                id: item.productId
              }
            }));
            const productName =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[175]++, product ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[47][0]++, product.name) :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[47][1]++, `Product ID ${item.productId}`));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[176]++;
            throw new Error(`Insufficient stock for "${productName}". Available: ${inventory.quantity}, Requested: ${item.quantity}`);
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[46][1]++;
          }
        }
        // Update transfer
        const updatedTransfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[177]++, await tx.inventoryTransfer.update({
          where: {
            id
          },
          data: {
            fromShopId: sourceShopId,
            toShopId: destinationShopId,
            updatedAt: new Date()
          }
        }));
        // Delete existing transfer items
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[178]++;
        await tx.transferItem.deleteMany({
          where: {
            transferId: id
          }
        });
        // Insert new transfer items
        const transferItemsData =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[179]++, items.map(item => {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().f[22]++;
          cov_2ng7jnwm2g().s[180]++;
          return {
            transferId: id,
            productId: item.productId,
            quantity: item.quantity
          };
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[181]++;
        await tx.transferItem.createMany({
          data: transferItemsData
        });
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[182]++;
        return updatedTransfer;
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, "Failed to update transfer"));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[183]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[48][0]++;
      cov_2ng7jnwm2g().s[184]++;
      operation.end(false, "update_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[185]++;
      return _server.NextResponse.json({
        success: false,
        error: "Failed to update transfer"
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[48][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[186]++;
    await _transferCache.transferCacheService.invalidateTransferCache(id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[187]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[188]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transfer updated successfully",
      data: {
        id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[189]++;
    console.error(`Error updating transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[190]++;
    operation.end(false, "update_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[191]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[49][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[49][1]++, "Failed to update transfer")
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[23]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[192]++, (0, _transferPerformanceMonitor.trackTransferOperation)("cancel"));
  // Token and user role check
  const token =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[193]++, (0, _auth.extractToken)(req));
  const payload =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[194]++, token ?
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[50][0]++, await (0, _auth.verifyToken)(token)) :
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[50][1]++, null));
  const userRole =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[195]++,
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[51][0]++, payload?.roleName) ??
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().b[51][1]++, ""));
  // Check for inventory:transfer permission
  const permissionResult =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[196]++, await (0, _auth.validateTokenPermission)(req, "inventory:transfer"));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[197]++;
  if (!permissionResult.isValid) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[52][0]++;
    cov_2ng7jnwm2g().s[198]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[199]++;
    return _server.NextResponse.json({
      success: false,
      message:
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[53][0]++, permissionResult.message) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[53][1]++, "Permission denied")
    }, {
      status: 403
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[52][1]++;
  }
  const resolvedParams =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[200]++, await params);
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[201]++, parseInt(resolvedParams.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[202]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[54][0]++;
    cov_2ng7jnwm2g().s[203]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[204]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[54][1]++;
  }
  cov_2ng7jnwm2g().s[205]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[206]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[24]++;
      cov_2ng7jnwm2g().s[207]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[25]++;
        // Get transfer to check status
        const transfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[208]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[209]++;
        if (!transfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[55][0]++;
          cov_2ng7jnwm2g().s[210]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[55][1]++;
        }
        cov_2ng7jnwm2g().s[211]++;
        if (transfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[56][0]++;
          cov_2ng7jnwm2g().s[212]++;
          throw new Error("Only pending transfers can be deleted");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[56][1]++;
        }
        // Return reserved inventory to source shop before deletion
        const items =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[213]++, await tx.transferItem.findMany({
          where: {
            transferId: id
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[214]++;
        for (const item of items) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[215]++;
          await tx.inventoryItem.updateMany({
            where: {
              productId: item.productId,
              shopId: transfer.fromShopId
            },
            data: {
              quantity: {
                increment: item.quantity
              }
            }
          });
        }
        // Delete transfer items and the transfer itself
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[216]++;
        await tx.transferItem.deleteMany({
          where: {
            transferId: id
          }
        });
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[217]++;
        return await tx.inventoryTransfer.delete({
          where: {
            id
          }
        });
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, "Failed to delete transfer"));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[218]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[57][0]++;
      cov_2ng7jnwm2g().s[219]++;
      operation.end(false, "delete_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[220]++;
      return _server.NextResponse.json({
        success: false,
        error: "Failed to delete transfer"
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[57][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[221]++;
    await _transferCache.transferCacheService.invalidateTransferCache(id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[222]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[223]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transfer deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[224]++;
    console.error(`Error deleting transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[225]++;
    operation.end(false, "delete_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[226]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[58][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[58][1]++, "Failed to delete transfer")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,