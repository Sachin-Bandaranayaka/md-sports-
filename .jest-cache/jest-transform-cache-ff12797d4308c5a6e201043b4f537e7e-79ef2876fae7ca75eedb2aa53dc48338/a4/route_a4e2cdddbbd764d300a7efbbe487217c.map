{"version":3,"names":["POST","getBusinessContext","cov_2om3stkek8","f","s","contextSetting","_prisma","prisma","systemSettings","findUnique","where","key","b","value","error","console","isChatbotEnabled","enabledSetting","req","log","enabled","_server","NextResponse","json","status","messages","Array","isArray","length","apiKeySetting","Error","apiKey","trim","deepseekClient","_openai","default","baseURL","dangerouslyAllowBrowser","businessContextContent","businessContext","role","content","finalMessages","response","chat","completions","create","model","temperature","max_tokens","choices","message","includes"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/chatbot/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport OpenAI from 'openai';\nimport { prisma } from '@/lib/prisma';\n\n// Get business context from settings\nasync function getBusinessContext() {\n    try {\n        const contextSetting = await prisma.systemSettings.findUnique({\n            where: { key: 'ai_business_context' }\n        });\n        return contextSetting?.value || 'You are an AI assistant for MS Sports.'; // Simplified default\n    } catch (error) {\n        console.error('[Chatbot API] Error fetching business context:', error);\n        return 'You are an AI assistant for MS Sports.'; // Fallback default\n    }\n}\n\n// Check if chatbot is enabled\nasync function isChatbotEnabled() {\n    try {\n        const enabledSetting = await prisma.systemSettings.findUnique({\n            where: { key: 'ai_chatbot_enabled' }\n        });\n        return enabledSetting ? enabledSetting.value === 'true' : true;\n    } catch (error) {\n        console.error('[Chatbot API] Error checking if chatbot is enabled:', error);\n        return true;\n    }\n}\n\nexport async function POST(req: NextRequest) {\n    console.log('[Chatbot API] Received POST request');\n    try {\n        const enabled = await isChatbotEnabled();\n        if (!enabled) {\n            console.log('[Chatbot API] Chatbot is disabled in settings.');\n            return NextResponse.json(\n                { error: 'AI chatbot is currently disabled. Please enable it in the AI Assistant settings.' },\n                { status: 403 }\n            );\n        }\n\n        const { messages } = await req.json();\n        if (!messages || !Array.isArray(messages) || messages.length === 0) {\n            console.log('[Chatbot API] Invalid messages format or empty messages array.');\n            return NextResponse.json(\n                { error: 'Messages are required, must be a non-empty array.' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch API Key directly within the POST handler for each request\n        console.log('[Chatbot API] Fetching Deepseek API key from database for this request...');\n        const apiKeySetting = await prisma.systemSettings.findUnique({\n            where: { key: 'deepseek_api_key' }\n        });\n\n        if (!apiKeySetting) {\n            console.error('[Chatbot API] Deepseek API key setting not found in database for this request.');\n            throw new Error('Deepseek API key setting not found. Please configure it in the AI Assistant settings.');\n        }\n        const apiKey = apiKeySetting.value;\n        if (!apiKey || apiKey.trim() === '') {\n            console.error('[Chatbot API] Deepseek API key is empty in database settings for this request.');\n            throw new Error('Deepseek API key is empty. Please set a valid key in the AI Assistant settings.');\n        }\n        console.log(`[Chatbot API] API key for this request. Length: ${apiKey.length}.`);\n\n        // Instantiate OpenAI client for this specific request\n        const deepseekClient = new OpenAI({\n            apiKey,\n            baseURL: 'https://api.deepseek.com',\n            dangerouslyAllowBrowser: false,\n        });\n\n        const businessContextContent = await getBusinessContext();\n        const businessContext = { role: 'system', content: businessContextContent };\n        const finalMessages = [businessContext, ...messages];\n\n        console.log(`[Chatbot API] Sending ${finalMessages.length} messages to Deepseek.`);\n\n        const response = await deepseekClient.chat.completions.create({\n            model: 'deepseek-chat',\n            messages: finalMessages,\n            temperature: 0.7,\n            max_tokens: 500,\n        });\n\n        console.log('[Chatbot API] Successfully received response from Deepseek.');\n        return NextResponse.json(response.choices[0].message);\n\n    } catch (error: any) {\n        console.error('[Chatbot API] Error processing request:', error.message);\n        if (error.message.includes('API key') || error.message.includes('configure')) {\n            return NextResponse.json({ error: error.message }, { status: 403 });\n        }\n        return NextResponse.json(\n            { error: `Failed to process chatbot request: ${error.message}` },\n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}