{"version":3,"names":["GET","cov_11b6nqn25m","f","s","POST","defaultProductsData","id","name","sku","description","price","weightedAverageCost","category_name","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","searchParams","URL","url","categoryId","get","search","includeInactive","includeInventory","page","parseInt","b","limit","actualLimit","console","log","shopId","isFiltered","isAdmin","userShopId","skip","where","OR","contains","mode","barcode","products","_prisma","prisma","product","findMany","inventoryItems","some","include","category","select","shop","location","orderBy","take","length","_server","NextResponse","json","success","data","meta","shopFiltered","totalItems","error","message","Error","String","status","authResult","_auth","validateTokenPermission","isValid","productData","basePrice","newWeightedAverageCost","safeQuery","create","retailPrice","minStockLevel","authHeader","headers","userId","startsWith","token","slice","decoded","verifyToken","toString","sub","err","warn","_auditService","auditService","logAction","action","entity","entityId","details","_cache1","cacheService","invalidateInventory","_cache","revalidateTag","revalidatePath"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport { PrismaClient } from '@prisma/client';\nimport { getShopId } from '@/lib/utils/middleware';\nimport { cacheService } from '@/lib/cache';\nimport { auditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\nimport { safeQuery, prisma } from '@/lib/prisma';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n\n// Default fallback data for products\nconst defaultProductsData = [\n    { id: 1, name: 'Cricket Bat', sku: 'CB001', description: 'Professional cricket bat', price: 15000, weightedAverageCost: 12000, category_name: 'Cricket' },\n    { id: 2, name: 'Cricket Ball', sku: 'CB002', description: 'Match quality cricket ball', price: 2500, weightedAverageCost: 1800, category_name: 'Cricket' },\n    { id: 3, name: 'Football', sku: 'FB001', description: 'Size 5 football', price: 5000, weightedAverageCost: 3500, category_name: 'Football' },\n    { id: 4, name: 'Basketball', sku: 'BB001', description: 'Indoor basketball', price: 6000, weightedAverageCost: 4200, category_name: 'Basketball' },\n    { id: 5, name: 'Tennis Racket', sku: 'TR001', description: 'Professional tennis racket', price: 12000, weightedAverageCost: 8400, category_name: 'Tennis' }\n];\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const { searchParams } = new URL(request.url);\n        const categoryId = searchParams.get('categoryId');\n        const search = searchParams.get('search');\n        const includeInactive = searchParams.get('includeInactive') === 'true';\n        const includeInventory = searchParams.get('include') === 'inventory';\n        const page = parseInt(searchParams.get('page') || '1');\n        const limit = parseInt(searchParams.get('limit') || '50');\n        // For very high limits (like \"Show All\"), use a reasonable maximum\n        const actualLimit = limit > 1000 ? 10000 : limit;\n\n        console.log('Products API - Shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            isAdmin: context.isAdmin,\n            userShopId: context.userShopId\n        });\n\n        const skip = (page - 1) * limit;\n\n        // Build where clause\n        const where: any = {};\n\n        if (categoryId) {\n            where.categoryId = parseInt(categoryId);\n        }\n\n        if (search) {\n            where.OR = [\n                {\n                    name: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    sku: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    barcode: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                }\n            ];\n        }\n\n        // Apply shop-based filtering for inventory\n        let products;\n        if (context.isFiltered && context.shopId && !includeInventory) {\n            console.log(`Filtering products by shopId: ${context.shopId}`);\n            products = await prisma.product.findMany({\n                where: {\n                    ...where,\n                    inventoryItems: {\n                        some: {\n                            shopId: context.shopId\n                        }\n                    }\n                },\n                include: {\n                    category: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    },\n                    inventoryItems: {\n                        where: {\n                            shopId: context.shopId\n                        },\n                        include: {\n                            shop: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    location: true\n                                }\n                            }\n                        }\n                    }\n                },\n                orderBy: {\n                    name: 'asc'\n                },\n                skip,\n                take: actualLimit\n            });\n        } else {\n            console.log('Fetching all products (admin or no shop filter or include inventory)');\n            products = await prisma.product.findMany({\n                where,\n                include: {\n                    category: {\n                        select: {\n                            id: true,\n                            name: true\n                        }\n                    },\n                    inventoryItems: includeInventory ? {\n                        include: {\n                            shop: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    location: true\n                                }\n                            }\n                        }\n                    } : false\n                },\n                orderBy: {\n                    name: 'asc'\n                },\n                skip,\n                take: actualLimit\n            });\n        }\n\n        console.log(`Found ${products.length} products`);\n\n        return NextResponse.json({\n            success: true,\n            data: products,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                totalItems: products.length\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching products',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});\n\nexport async function POST(request: NextRequest) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'inventory:manage');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const productData = await request.json();\n        console.log('Received productData:', productData);\n        console.log('productData.basePrice type:', typeof productData.basePrice);\n        console.log('productData.basePrice value:', productData.basePrice);\n\n        const newWeightedAverageCost = productData.basePrice || 0;\n        console.log('Calculated newWeightedAverageCost:', newWeightedAverageCost);\n\n        const product = await safeQuery(\n            async () => {\n                return await prisma.product.create({\n                    data: {\n                        name: productData.name,\n                        sku: productData.sku,\n                        barcode: productData.barcode || null,\n                        description: productData.description || null,\n                        weightedAverageCost: newWeightedAverageCost,\n                        price: productData.retailPrice || 0,\n                        categoryId: productData.categoryId ? parseInt(productData.categoryId) : null,\n                        minStockLevel: productData.minStockLevel ? parseInt(productData.minStockLevel) : 10,\n                    }\n                });\n            },\n            null,\n            'Failed to create product'\n        );\n\n        if (!product) {\n            throw new Error('Product creation failed');\n        }\n\n        console.log('Product created successfully with WAC:', product.weightedAverageCost);\n\n        // Determine userId from token for audit logging\n        const authHeader = request.headers.get('authorization');\n        let userId: string | undefined;\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n            const token = authHeader.slice(7);\n            try {\n                const decoded: any = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId.toString();\n                } else if (decoded && decoded.sub) {\n                    userId = decoded.sub.toString();\n                }\n            } catch (err) {\n                console.warn('Invalid token for audit logging on product create');\n            }\n        }\n\n        // Log CREATE action\n        await auditService.logAction({\n            action: 'CREATE',\n            entity: 'Product',\n            entityId: product.id,\n            userId,\n            details: {\n                name: product.name,\n                sku: product.sku,\n                barcode: product.barcode,\n                description: product.description,\n                price: product.price,\n                categoryId: product.categoryId,\n                minStockLevel: product.minStockLevel,\n            },\n        });\n\n        // Invalidate inventory cache\n        await cacheService.invalidateInventory();\n\n        // Revalidate Next.js cached pages\n        revalidateTag('products');\n        revalidateTag('inventory');\n        revalidatePath('/inventory');\n        revalidatePath('/products');\n\n        // Emit WebSocket event for real-time updates using utility function\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product created successfully',\n            data: product\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating product:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],"mappingssBaA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EAgJSI,IAAI,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;kCAtKoB;;;kCACI;;;kCAGjB;;;kCACA;;;mCACD;;;mCAEM;;;mCACA;AAIlC;AACA,MAAMC,mBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAsB,CACxB;EAAEG,EAAA,EAAI;EAAGC,IAAA,EAAM;EAAeC,GAAA,EAAK;EAASC,WAAA,EAAa;EAA4BC,KAAA,EAAO;EAAOC,mBAAA,EAAqB;EAAOC,aAAA,EAAe;AAAU,GACxJ;EAAEN,EAAA,EAAI;EAAGC,IAAA,EAAM;EAAgBC,GAAA,EAAK;EAASC,WAAA,EAAa;EAA8BC,KAAA,EAAO;EAAMC,mBAAA,EAAqB;EAAMC,aAAA,EAAe;AAAU,GACzJ;EAAEN,EAAA,EAAI;EAAGC,IAAA,EAAM;EAAYC,GAAA,EAAK;EAASC,WAAA,EAAa;EAAmBC,KAAA,EAAO;EAAMC,mBAAA,EAAqB;EAAMC,aAAA,EAAe;AAAW,GAC3I;EAAEN,EAAA,EAAI;EAAGC,IAAA,EAAM;EAAcC,GAAA,EAAK;EAASC,WAAA,EAAa;EAAqBC,KAAA,EAAO;EAAMC,mBAAA,EAAqB;EAAMC,aAAA,EAAe;AAAa,GACjJ;EAAEN,EAAA,EAAI;EAAGC,IAAA,EAAM;EAAiBC,GAAA,EAAK;EAASC,WAAA,EAAa;EAA8BC,KAAA,EAAO;EAAOC,mBAAA,EAAqB;EAAMC,aAAA,EAAe;AAAS,EAC7J;AAEM,MAAMZ,GAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAMU,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAAhB,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7E,IAAI;IACA,MAAM;MAAEe;IAAY,CAAE;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAG,IAAIgB,GAAA,CAAIH,OAAA,CAAQI,GAAG;IAC5C,MAAMC,UAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAae,YAAA,CAAaI,GAAG,CAAC;IACpC,MAAMC,MAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAASe,YAAA,CAAaI,GAAG,CAAC;IAChC,MAAME,eAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAkBe,YAAA,CAAaI,GAAG,CAAC,uBAAuB;IAChE,MAAMG,gBAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAmBe,YAAA,CAAaI,GAAG,CAAC,eAAe;IACzD,MAAMI,IAAA;IAAA;IAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAOwB,QAAA;IAAS;IAAA,CAAA1B,cAAA,GAAA2B,CAAA,UAAAV,YAAA,CAAaI,GAAG,CAAC;IAAA;IAAA,CAAArB,cAAA,GAAA2B,CAAA,UAAW;IAClD,MAAMC,KAAA;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAQwB,QAAA;IAAS;IAAA,CAAA1B,cAAA,GAAA2B,CAAA,UAAAV,YAAA,CAAaI,GAAG,CAAC;IAAA;IAAA,CAAArB,cAAA,GAAA2B,CAAA,UAAY;IACpD;IACA,MAAME,WAAA;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAc0B,KAAA,GAAQ;IAAA;IAAA,CAAA5B,cAAA,GAAA2B,CAAA,UAAO;IAAA;IAAA,CAAA3B,cAAA,GAAA2B,CAAA,UAAQC,KAAA;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IAE3C4B,OAAA,CAAQC,GAAG,CAAC,gCAAgC;MACxCC,MAAA,EAAQhB,OAAA,CAAQgB,MAAM;MACtBC,UAAA,EAAYjB,OAAA,CAAQiB,UAAU;MAC9BC,OAAA,EAASlB,OAAA,CAAQkB,OAAO;MACxBC,UAAA,EAAYnB,OAAA,CAAQmB;IACxB;IAEA,MAAMC,IAAA;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA,QAAO,CAACuB,IAAA,GAAO,KAAKG,KAAA;IAE1B;IACA,MAAMS,KAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAa,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEpB,IAAIkB,UAAA,EAAY;MAAA;MAAApB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACZmC,KAAA,CAAMjB,UAAU,GAAGM,QAAA,CAASN,UAAA;IAChC;IAAA;IAAA;MAAApB,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAEA,IAAIoB,MAAA,EAAQ;MAAA;MAAAtB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACRmC,KAAA,CAAMC,EAAE,GAAG,CACP;QACIhC,IAAA,EAAM;UACFiC,QAAA,EAAUjB,MAAA;UACVkB,IAAA,EAAM;QACV;MACJ,GACA;QACIjC,GAAA,EAAK;UACDgC,QAAA,EAAUjB,MAAA;UACVkB,IAAA,EAAM;QACV;MACJ,GACA;QACIC,OAAA,EAAS;UACLF,QAAA,EAAUjB,MAAA;UACVkB,IAAA,EAAM;QACV;MACJ,EACH;IACL;IAAA;IAAA;MAAAxC,cAAA,GAAA2B,CAAA;IAAA;IAEA;IACA,IAAIe,QAAA;IAAA;IAAA1C,cAAA,GAAAE,CAAA;IACJ;IAAI;IAAA,CAAAF,cAAA,GAAA2B,CAAA,UAAAX,OAAA,CAAQiB,UAAU;IAAA;IAAA,CAAAjC,cAAA,GAAA2B,CAAA,UAAIX,OAAA,CAAQgB,MAAM;IAAA;IAAA,CAAAhC,cAAA,GAAA2B,CAAA,UAAI,CAACH,gBAAA,GAAkB;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAC3D4B,OAAA,CAAQC,GAAG,CAAC,iCAAiCf,OAAA,CAAQgB,MAAM,EAAE;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MAC7DwC,QAAA,GAAW,MAAMC,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;QACrCT,KAAA,EAAO;UACH,GAAGA,KAAK;UACRU,cAAA,EAAgB;YACZC,IAAA,EAAM;cACFhB,MAAA,EAAQhB,OAAA,CAAQgB;YACpB;UACJ;QACJ;QACAiB,OAAA,EAAS;UACLC,QAAA,EAAU;YACNC,MAAA,EAAQ;cACJ9C,EAAA,EAAI;cACJC,IAAA,EAAM;YACV;UACJ;UACAyC,cAAA,EAAgB;YACZV,KAAA,EAAO;cACHL,MAAA,EAAQhB,OAAA,CAAQgB;YACpB;YACAiB,OAAA,EAAS;cACLG,IAAA,EAAM;gBACFD,MAAA,EAAQ;kBACJ9C,EAAA,EAAI;kBACJC,IAAA,EAAM;kBACN+C,QAAA,EAAU;gBACd;cACJ;YACJ;UACJ;QACJ;QACAC,OAAA,EAAS;UACLhD,IAAA,EAAM;QACV;QACA8B,IAAA;QACAmB,IAAA,EAAM1B;MACV;IACJ,OAAO;MAAA;MAAA7B,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACH4B,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAA/B,cAAA,GAAAE,CAAA;MACZwC,QAAA,GAAW,MAAMC,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;QACrCT,KAAA;QACAY,OAAA,EAAS;UACLC,QAAA,EAAU;YACNC,MAAA,EAAQ;cACJ9C,EAAA,EAAI;cACJC,IAAA,EAAM;YACV;UACJ;UACAyC,cAAA,EAAgBvB,gBAAA;UAAA;UAAA,CAAAxB,cAAA,GAAA2B,CAAA,UAAmB;YAC/BsB,OAAA,EAAS;cACLG,IAAA,EAAM;gBACFD,MAAA,EAAQ;kBACJ9C,EAAA,EAAI;kBACJC,IAAA,EAAM;kBACN+C,QAAA,EAAU;gBACd;cACJ;YACJ;UACJ;UAAA;UAAA,CAAArD,cAAA,GAAA2B,CAAA,UAAI;QACR;QACA2B,OAAA,EAAS;UACLhD,IAAA,EAAM;QACV;QACA8B,IAAA;QACAmB,IAAA,EAAM1B;MACV;IACJ;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAEA4B,OAAA,CAAQC,GAAG,CAAC,SAASW,QAAA,CAASc,MAAM,WAAW;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAE/C,OAAOuD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,IAAA,EAAMnB,QAAA;MACNoB,IAAA,EAAM;QACFC,YAAA,EAAc/C,OAAA,CAAQiB,UAAU;QAChCD,MAAA,EAAQhB,OAAA,CAAQgB,MAAM;QACtBgC,UAAA,EAAYtB,QAAA,CAASc;MACzB;IACJ;EACJ,EAAE,OAAOS,KAAA,EAAO;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IACZ4B,OAAA,CAAQmC,KAAK,CAAC,4BAA4BA,KAAA;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IAC1C,OAAOuD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTM,OAAA,EAAS;MACTD,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAAnE,cAAA,GAAA2B,CAAA,UAAQsC,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAAlE,cAAA,GAAA2B,CAAA,UAAGyC,MAAA,CAAOH,KAAA;IAC3D,GAAG;MAAEI,MAAA,EAAQ;IAAI;EACrB;AACJ;AAEO,eAAelE,KAAKY,OAAoB;EAAA;EAAAf,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC3C,IAAI;IACA;IACA,MAAMoE,UAAA;IAAA;IAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAqE,KAAA,CAAAC,uBAAuB,EAACzD,OAAA,EAAS;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACoE,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAzE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACrB,OAAOuD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEM,KAAA,EAAOK,UAAA,CAAWJ;MAAQ,GAAG;QAAEG,MAAA,EAAQ;MAAI;IAC1E;IAAA;IAAA;MAAArE,cAAA,GAAA2B,CAAA;IAAA;IAEA,MAAM+C,WAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAc,MAAMa,OAAA,CAAQ4C,IAAI;IAAA;IAAA3D,cAAA,GAAAE,CAAA;IACtC4B,OAAA,CAAQC,GAAG,CAAC,yBAAyB2C,WAAA;IAAA;IAAA1E,cAAA,GAAAE,CAAA;IACrC4B,OAAA,CAAQC,GAAG,CAAC,+BAA+B,OAAO2C,WAAA,CAAYC,SAAS;IAAA;IAAA3E,cAAA,GAAAE,CAAA;IACvE4B,OAAA,CAAQC,GAAG,CAAC,gCAAgC2C,WAAA,CAAYC,SAAS;IAEjE,MAAMC,sBAAA;IAAA;IAAA,CAAA5E,cAAA,GAAAE,CAAA;IAAyB;IAAA,CAAAF,cAAA,GAAA2B,CAAA,WAAA+C,WAAA,CAAYC,SAAS;IAAA;IAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAAI;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACxD4B,OAAA,CAAQC,GAAG,CAAC,sCAAsC6C,sBAAA;IAElD,MAAM/B,OAAA;IAAA;IAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAyC,OAAA,CAAAkC,SAAS,EAC3B;MAAA;MAAA7E,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACI,OAAO,MAAMyC,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACiC,MAAM,CAAC;QAC/BjB,IAAA,EAAM;UACFvD,IAAA,EAAMoE,WAAA,CAAYpE,IAAI;UACtBC,GAAA,EAAKmE,WAAA,CAAYnE,GAAG;UACpBkC,OAAA;UAAS;UAAA,CAAAzC,cAAA,GAAA2B,CAAA,WAAA+C,WAAA,CAAYjC,OAAO;UAAA;UAAA,CAAAzC,cAAA,GAAA2B,CAAA,WAAI;UAChCnB,WAAA;UAAa;UAAA,CAAAR,cAAA,GAAA2B,CAAA,WAAA+C,WAAA,CAAYlE,WAAW;UAAA;UAAA,CAAAR,cAAA,GAAA2B,CAAA,WAAI;UACxCjB,mBAAA,EAAqBkE,sBAAA;UACrBnE,KAAA;UAAO;UAAA,CAAAT,cAAA,GAAA2B,CAAA,WAAA+C,WAAA,CAAYK,WAAW;UAAA;UAAA,CAAA/E,cAAA,GAAA2B,CAAA,WAAI;UAClCP,UAAA,EAAYsD,WAAA,CAAYtD,UAAU;UAAA;UAAA,CAAApB,cAAA,GAAA2B,CAAA,WAAGD,QAAA,CAASgD,WAAA,CAAYtD,UAAU;UAAA;UAAA,CAAApB,cAAA,GAAA2B,CAAA,WAAI;UACxEqD,aAAA,EAAeN,WAAA,CAAYM,aAAa;UAAA;UAAA,CAAAhF,cAAA,GAAA2B,CAAA,WAAGD,QAAA,CAASgD,WAAA,CAAYM,aAAa;UAAA;UAAA,CAAAhF,cAAA,GAAA2B,CAAA,WAAI;QACrF;MACJ;IACJ,GACA,MACA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAGJ,IAAI,CAAC2C,OAAA,EAAS;MAAA;MAAA7C,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACV,MAAM,IAAIiE,KAAA,CAAM;IACpB;IAAA;IAAA;MAAAnE,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAEA4B,OAAA,CAAQC,GAAG,CAAC,0CAA0Cc,OAAA,CAAQnC,mBAAmB;IAEjF;IACA,MAAMuE,UAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAaa,OAAA,CAAQmE,OAAO,CAAC7D,GAAG,CAAC;IACvC,IAAI8D,MAAA;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IACJ;IAAI;IAAA,CAAAF,cAAA,GAAA2B,CAAA,WAAAsD,UAAA;IAAA;IAAA,CAAAjF,cAAA,GAAA2B,CAAA,WAAcsD,UAAA,CAAWG,UAAU,CAAC,aAAY;MAAA;MAAApF,cAAA,GAAA2B,CAAA;MAChD,MAAM0D,KAAA;MAAA;MAAA,CAAArF,cAAA,GAAAE,CAAA,QAAQ+E,UAAA,CAAWK,KAAK,CAAC;MAAA;MAAAtF,cAAA,GAAAE,CAAA;MAC/B,IAAI;QACA,MAAMqF,OAAA;QAAA;QAAA,CAAAvF,cAAA,GAAAE,CAAA,QAAe,MAAM,IAAAqE,KAAA,CAAAiB,WAAW,EAACH,KAAA;QAAA;QAAArF,cAAA,GAAAE,CAAA;QACvC;QAAI;QAAA,CAAAF,cAAA,GAAA2B,CAAA,WAAA4D,OAAA;QAAA;QAAA,CAAAvF,cAAA,GAAA2B,CAAA,WAAW4D,OAAA,CAAQJ,MAAM,GAAE;UAAA;UAAAnF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UAC3BiF,MAAA,GAASI,OAAA,CAAQJ,MAAM,CAACM,QAAQ;QACpC,OAAO;UAAA;UAAAzF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UAAA;UAAI;UAAA,CAAAF,cAAA,GAAA2B,CAAA,WAAA4D,OAAA;UAAA;UAAA,CAAAvF,cAAA,GAAA2B,CAAA,WAAW4D,OAAA,CAAQG,GAAG,GAAE;YAAA;YAAA1F,cAAA,GAAA2B,CAAA;YAAA3B,cAAA,GAAAE,CAAA;YAC/BiF,MAAA,GAASI,OAAA,CAAQG,GAAG,CAACD,QAAQ;UACjC;UAAA;UAAA;YAAAzF,cAAA,GAAA2B,CAAA;UAAA;QAAA;MACJ,EAAE,OAAOgE,GAAA,EAAK;QAAA;QAAA3F,cAAA,GAAAE,CAAA;QACV4B,OAAA,CAAQ8D,IAAI,CAAC;MACjB;IACJ;IAAA;IAAA;MAAA5F,cAAA,GAAA2B,CAAA;IAAA;IAEA;IAAA3B,cAAA,GAAAE,CAAA;IACA,MAAM2F,aAAA,CAAAC,YAAY,CAACC,SAAS,CAAC;MACzBC,MAAA,EAAQ;MACRC,MAAA,EAAQ;MACRC,QAAA,EAAUrD,OAAA,CAAQxC,EAAE;MACpB8E,MAAA;MACAgB,OAAA,EAAS;QACL7F,IAAA,EAAMuC,OAAA,CAAQvC,IAAI;QAClBC,GAAA,EAAKsC,OAAA,CAAQtC,GAAG;QAChBkC,OAAA,EAASI,OAAA,CAAQJ,OAAO;QACxBjC,WAAA,EAAaqC,OAAA,CAAQrC,WAAW;QAChCC,KAAA,EAAOoC,OAAA,CAAQpC,KAAK;QACpBW,UAAA,EAAYyB,OAAA,CAAQzB,UAAU;QAC9B4D,aAAA,EAAenC,OAAA,CAAQmC;MAC3B;IACJ;IAEA;IAAA;IAAAhF,cAAA,GAAAE,CAAA;IACA,MAAMkG,OAAA,CAAAC,YAAY,CAACC,mBAAmB;IAEtC;IAAA;IAAAtG,cAAA,GAAAE,CAAA;IACA,IAAAqG,MAAA,CAAAC,aAAa,EAAC;IAAA;IAAAxG,cAAA,GAAAE,CAAA;IACd,IAAAqG,MAAA,CAAAC,aAAa,EAAC;IAAA;IAAAxG,cAAA,GAAAE,CAAA;IACd,IAAAqG,MAAA,CAAAE,cAAc,EAAC;IAAA;IAAAzG,cAAA,GAAAE,CAAA;IACf,IAAAqG,MAAA,CAAAE,cAAc,EAAC;IAEf;IACA;IAAA;IAAAzG,cAAA,GAAAE,CAAA;IAEA,OAAOuD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTM,OAAA,EAAS;MACTL,IAAA,EAAMhB;IACV,GAAG;MAAEwB,MAAA,EAAQ;IAAI;EACrB,EAAE,OAAOJ,KAAA,EAAO;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IACZ4B,OAAA,CAAQmC,KAAK,CAAC,2BAA2BA,KAAA;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IACzC,OAAOuD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTM,OAAA,EAAS;MACTD,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAAnE,cAAA,GAAA2B,CAAA,WAAQsC,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAGyC,MAAA,CAAOH,KAAA;IAC3D,GAAG;MAAEI,MAAA,EAAQ;IAAI;EACrB;AACJ","ignoreList":[]}