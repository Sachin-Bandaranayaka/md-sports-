754619f630714cc6567a5ec8a3f42eeb
"use strict";

/* istanbul ignore next */
function cov_1r5w1pdyzc() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/payments/expenses/route.ts";
  var hash = "567f4a929a3b54c544191e7637c6911e7be3965a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/payments/expenses/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "11": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 48
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "14": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "15": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "16": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "17": {
        start: {
          line: 50,
          column: 30
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "20": {
        start: {
          line: 61,
          column: 46
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "23": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "24": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "25": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 130,
          column: 10
        }
      },
      "26": {
        start: {
          line: 94,
          column: 39
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "27": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "28": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 128,
          column: 15
        }
      },
      "29": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 38
        }
      },
      "30": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "31": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 65
        }
      },
      "32": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "33": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "34": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "35": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 58
        }
      },
      "36": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 65
        }
      },
      "37": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "38": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "39": {
        start: {
          line: 179,
          column: 33
        },
        end: {
          line: 179,
          column: 53
        }
      },
      "40": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 180,
          column: 52
        }
      },
      "41": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "42": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "43": {
        start: {
          line: 189,
          column: 19
        },
        end: {
          line: 189,
          column: 42
        }
      },
      "44": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "45": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "46": {
        start: {
          line: 199,
          column: 28
        },
        end: {
          line: 207,
          column: 10
        }
      },
      "47": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "48": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "49": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "50": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "51": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "52": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "53": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "54": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 249,
          column: 19
        }
      },
      "55": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 256,
          column: 15
        }
      },
      "56": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "57": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 64
        }
      },
      "58": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "59": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 468,
          column: 5
        }
      },
      "60": {
        start: {
          line: 277,
          column: 33
        },
        end: {
          line: 277,
          column: 53
        }
      },
      "61": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 278,
          column: 52
        }
      },
      "62": {
        start: {
          line: 279,
          column: 27
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "63": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "64": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "65": {
        start: {
          line: 288,
          column: 19
        },
        end: {
          line: 288,
          column: 42
        }
      },
      "66": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "67": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "68": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "69": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "70": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "71": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "72": {
        start: {
          line: 316,
          column: 36
        },
        end: {
          line: 324,
          column: 10
        }
      },
      "73": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "74": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 331,
          column: 15
        }
      },
      "75": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "76": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 339,
          column: 15
        }
      },
      "77": {
        start: {
          line: 342,
          column: 36
        },
        end: {
          line: 342,
          column: 73
        }
      },
      "78": {
        start: {
          line: 343,
          column: 33
        },
        end: {
          line: 343,
          column: 67
        }
      },
      "79": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "80": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "81": {
        start: {
          line: 353,
          column: 52
        },
        end: {
          line: 366,
          column: 10
        }
      },
      "82": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "83": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 373,
          column: 15
        }
      },
      "84": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "85": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 381,
          column: 15
        }
      },
      "86": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 451,
          column: 10
        }
      },
      "87": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 396,
          column: 15
        }
      },
      "88": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "89": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 408,
          column: 19
        }
      },
      "90": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 421,
          column: 15
        }
      },
      "91": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 432,
          column: 15
        }
      },
      "92": {
        start: {
          line: 434,
          column: 39
        },
        end: {
          line: 449,
          column: 14
        }
      },
      "93": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 38
        }
      },
      "94": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 458,
          column: 11
        }
      },
      "95": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 64
        }
      },
      "96": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 467,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 19
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 92,
            column: 57
          },
          end: {
            line: 92,
            column: 58
          }
        },
        loc: {
          start: {
            line: 92,
            column: 69
          },
          end: {
            line: 130,
            column: 9
          }
        },
        line: 92
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 18
          }
        },
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 149
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 177,
            column: 15
          },
          end: {
            line: 177,
            column: 21
          }
        },
        loc: {
          start: {
            line: 177,
            column: 31
          },
          end: {
            line: 274,
            column: 1
          }
        },
        line: 177
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 225,
            column: 42
          },
          end: {
            line: 225,
            column: 43
          }
        },
        loc: {
          start: {
            line: 225,
            column: 54
          },
          end: {
            line: 257,
            column: 9
          }
        },
        line: 225
      },
      "10": {
        name: "PATCH",
        decl: {
          start: {
            line: 275,
            column: 15
          },
          end: {
            line: 275,
            column: 20
          }
        },
        loc: {
          start: {
            line: 275,
            column: 30
          },
          end: {
            line: 469,
            column: 1
          }
        },
        line: 275
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 384,
            column: 57
          },
          end: {
            line: 384,
            column: 58
          }
        },
        loc: {
          start: {
            line: 384,
            column: 69
          },
          end: {
            line: 451,
            column: 9
          }
        },
        line: 384
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 31
          }
        }, {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 61
          }
        }, {
          start: {
            line: 31,
            column: 65
          },
          end: {
            line: 31,
            column: 94
          }
        }, {
          start: {
            line: 31,
            column: 98
          },
          end: {
            line: 31,
            column: 124
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 35
          }
        }, {
          start: {
            line: 52,
            column: 39
          },
          end: {
            line: 52,
            column: 59
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 97,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 97,
            column: 56
          }
        }, {
          start: {
            line: 97,
            column: 60
          },
          end: {
            line: 97,
            column: 102
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 31
          },
          end: {
            line: 102,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 31
          },
          end: {
            line: 102,
            column: 58
          }
        }, {
          start: {
            line: 102,
            column: 62
          },
          end: {
            line: 102,
            column: 66
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 19
          },
          end: {
            line: 143,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 44
          },
          end: {
            line: 143,
            column: 57
          }
        }, {
          start: {
            line: 143,
            column: 60
          },
          end: {
            line: 143,
            column: 73
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 44
          },
          end: {
            line: 171,
            column: 57
          }
        }, {
          start: {
            line: 171,
            column: 60
          },
          end: {
            line: 171,
            column: 73
          }
        }],
        line: 171
      },
      "11": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "12": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "13": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "14": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "15": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 42
          }
        }, {
          start: {
            line: 216,
            column: 46
          },
          end: {
            line: 216,
            column: 88
          }
        }],
        line: 216
      },
      "16": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "17": {
        loc: {
          start: {
            line: 269,
            column: 19
          },
          end: {
            line: 269,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 44
          },
          end: {
            line: 269,
            column: 57
          }
        }, {
          start: {
            line: 269,
            column: 60
          },
          end: {
            line: 269,
            column: 73
          }
        }],
        line: 269
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "19": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "20": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "21": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 30
          }
        }, {
          start: {
            line: 298,
            column: 34
          },
          end: {
            line: 298,
            column: 62
          }
        }, {
          start: {
            line: 298,
            column: 66
          },
          end: {
            line: 298,
            column: 91
          }
        }],
        line: 298
      },
      "22": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "23": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "24": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "25": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 50
          }
        }, {
          start: {
            line: 333,
            column: 54
          },
          end: {
            line: 333,
            column: 104
          }
        }],
        line: 333
      },
      "26": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "27": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 38
          }
        }, {
          start: {
            line: 344,
            column: 42
          },
          end: {
            line: 344,
            column: 65
          }
        }],
        line: 344
      },
      "28": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "29": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "30": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "31": {
        loc: {
          start: {
            line: 440,
            column: 33
          },
          end: {
            line: 440,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 440,
            column: 33
          },
          end: {
            line: 440,
            column: 55
          }
        }, {
          start: {
            line: 440,
            column: 59
          },
          end: {
            line: 440,
            column: 90
          }
        }],
        line: 440
      },
      "32": {
        loc: {
          start: {
            line: 443,
            column: 31
          },
          end: {
            line: 443,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 31
          },
          end: {
            line: 443,
            column: 57
          }
        }, {
          start: {
            line: 443,
            column: 61
          },
          end: {
            line: 443,
            column: 90
          }
        }],
        line: 443
      },
      "33": {
        loc: {
          start: {
            line: 464,
            column: 19
          },
          end: {
            line: 464,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 464,
            column: 44
          },
          end: {
            line: 464,
            column: 57
          }
        }, {
          start: {
            line: 464,
            column: 60
          },
          end: {
            line: 464,
            column: 73
          }
        }],
        line: 464
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/payments/expenses/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: Request) {\n    try {\n        const paymentData = await request.json();\n\n        // Validate payment data for expense payments\n        if (!paymentData.amount || !paymentData.paymentMethod || !paymentData.expenseAccountId || !paymentData.fromAccountId) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required payment information. Amount, payment method, expense account, and source account are required.'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate the amount is positive\n        if (paymentData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Payment amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Convert string IDs to integers\n        const expenseAccountId = parseInt(paymentData.expenseAccountId);\n        const fromAccountId = parseInt(paymentData.fromAccountId);\n\n        // Validate that IDs are valid integers\n        if (isNaN(expenseAccountId) || isNaN(fromAccountId)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid account IDs provided'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate that both accounts exist and are active\n        const [expenseAccount, fromAccount] = await Promise.all([\n            prisma.account.findUnique({\n                where: { id: expenseAccountId, isActive: true }\n            }),\n            prisma.account.findUnique({\n                where: { id: fromAccountId, isActive: true }\n            })\n        ]);\n\n        if (!expenseAccount) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Expense account not found or inactive'\n                },\n                { status: 400 }\n            );\n        }\n\n        if (!fromAccount) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Source account not found or inactive'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Create the expense payment transaction\n        const result = await prisma.$transaction(async (tx) => {\n            // Create the expense transaction (debit to expense account)\n            const expenseTransaction = await tx.transaction.create({\n                data: {\n                    date: new Date(),\n                    description: paymentData.description || `Expense payment - ${expenseAccount.name}`,\n                    accountId: expenseAccountId,\n                    toAccountId: fromAccountId,\n                    type: 'expense',\n                    amount: paymentData.amount,\n                    reference: paymentData.referenceNumber || null,\n                    category: 'expense_payment'\n                }\n            });\n\n            // Update account balances\n            // Increase expense account balance (debit)\n            await tx.account.update({\n                where: { id: expenseAccountId },\n                data: {\n                    balance: {\n                        increment: paymentData.amount\n                    }\n                }\n            });\n\n            // Decrease source account balance (credit)\n            await tx.account.update({\n                where: { id: fromAccountId },\n                data: {\n                    balance: {\n                        decrement: paymentData.amount\n                    }\n                }\n            });\n\n            return expenseTransaction;\n        });\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Expense payment recorded successfully',\n                data: result\n            },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error recording expense payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error recording expense payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function GET() {\n    try {\n        // Fetch all expense transactions\n        const expensePayments = await prisma.transaction.findMany({\n            where: {\n                type: 'expense',\n                category: 'expense_payment'\n            },\n            include: {\n                account: true,\n                toAccount: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(expensePayments);\n    } catch (error) {\n        console.error('Error fetching expense payments:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching expense payments',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const transactionId = searchParams.get('id');\n\n        if (!transactionId) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Transaction ID is required'\n                },\n                { status: 400 }\n            );\n        }\n\n        const id = parseInt(transactionId);\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid transaction ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Find the transaction to delete\n        const transaction = await prisma.transaction.findUnique({\n            where: { id },\n            include: {\n                account: true,\n                toAccount: true\n            }\n        });\n\n        if (!transaction) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Transaction not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        if (transaction.type !== 'expense' || transaction.category !== 'expense_payment') {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid transaction type for expense payment deletion'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Reverse the transaction within a database transaction\n        await prisma.$transaction(async (tx) => {\n            // Reverse the account balance changes\n            // Decrease expense account balance (reverse the debit)\n            await tx.account.update({\n                where: { id: transaction.accountId },\n                data: {\n                    balance: {\n                        decrement: transaction.amount\n                    }\n                }\n            });\n\n            // Increase source account balance (reverse the credit)\n            if (transaction.toAccountId) {\n                await tx.account.update({\n                    where: { id: transaction.toAccountId },\n                    data: {\n                        balance: {\n                            increment: transaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Delete the transaction\n            await tx.transaction.delete({\n                where: { id }\n            });\n        });\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Expense payment deleted successfully'\n            },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error('Error deleting expense payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error deleting expense payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PATCH(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const transactionId = searchParams.get('id');\n        const updateData = await request.json();\n\n        if (!transactionId) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Transaction ID is required'\n                },\n                { status: 400 }\n            );\n        }\n\n        const id = parseInt(transactionId);\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid transaction ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate required fields\n        if (!updateData.amount || !updateData.expenseAccountId || !updateData.fromAccountId) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required fields: amount, expenseAccountId, and fromAccountId are required'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate amount is positive\n        if (updateData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Find the existing transaction\n        const existingTransaction = await prisma.transaction.findUnique({\n            where: { id },\n            include: {\n                account: true,\n                toAccount: true\n            }\n        });\n\n        if (!existingTransaction) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Transaction not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        if (existingTransaction.type !== 'expense' || existingTransaction.category !== 'expense_payment') {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid transaction type for expense payment update'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Convert string IDs to integers\n        const newExpenseAccountId = parseInt(updateData.expenseAccountId);\n        const newFromAccountId = parseInt(updateData.fromAccountId);\n\n        if (isNaN(newExpenseAccountId) || isNaN(newFromAccountId)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid account IDs provided'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate that new accounts exist and are active\n        const [newExpenseAccount, newFromAccount] = await Promise.all([\n            prisma.account.findUnique({\n                where: { id: newExpenseAccountId, isActive: true }\n            }),\n            prisma.account.findUnique({\n                where: { id: newFromAccountId, isActive: true }\n            })\n        ]);\n\n        if (!newExpenseAccount) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'New expense account not found or inactive'\n                },\n                { status: 400 }\n            );\n        }\n\n        if (!newFromAccount) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'New source account not found or inactive'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Update the transaction within a database transaction\n        const result = await prisma.$transaction(async (tx) => {\n            // First, reverse the original transaction's balance effects\n            // Decrease original expense account balance\n            await tx.account.update({\n                where: { id: existingTransaction.accountId },\n                data: {\n                    balance: {\n                        decrement: existingTransaction.amount\n                    }\n                }\n            });\n\n            // Increase original source account balance\n            if (existingTransaction.toAccountId) {\n                await tx.account.update({\n                    where: { id: existingTransaction.toAccountId },\n                    data: {\n                        balance: {\n                            increment: existingTransaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Now apply the new transaction's balance effects\n            // Increase new expense account balance\n            await tx.account.update({\n                where: { id: newExpenseAccountId },\n                data: {\n                    balance: {\n                        increment: updateData.amount\n                    }\n                }\n            });\n\n            // Decrease new source account balance\n            await tx.account.update({\n                where: { id: newFromAccountId },\n                data: {\n                    balance: {\n                        decrement: updateData.amount\n                    }\n                }\n            });\n\n            // Update the transaction record\n            const updatedTransaction = await tx.transaction.update({\n                where: { id },\n                data: {\n                    amount: updateData.amount,\n                    description: updateData.description || existingTransaction.description,\n                    accountId: newExpenseAccountId,\n                    toAccountId: newFromAccountId,\n                    reference: updateData.referenceNumber || existingTransaction.reference\n                },\n                include: {\n                    account: true,\n                    toAccount: true\n                }\n            });\n\n            return updatedTransaction;\n        });\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Expense payment updated successfully',\n                data: result\n            },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error('Error updating expense payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating expense payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "POST", "request", "paymentData", "json", "amount", "paymentMethod", "expenseAccountId", "fromAccountId", "NextResponse", "success", "message", "status", "parseInt", "isNaN", "expenseAccount", "fromAccount", "Promise", "all", "prisma", "account", "findUnique", "where", "id", "isActive", "result", "$transaction", "tx", "expenseTransaction", "transaction", "create", "data", "date", "Date", "description", "name", "accountId", "toAccountId", "type", "reference", "referenceNumber", "category", "update", "balance", "increment", "decrement", "error", "console", "Error", "String", "expensePayments", "findMany", "include", "toAccount", "orderBy", "createdAt", "searchParams", "URL", "url", "transactionId", "get", "delete", "updateData", "existingTransaction", "newExpenseAccountId", "newFromAccountId", "newExpenseAccount", "newFromAccount", "updatedTransaction"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "567f4a929a3b54c544191e7637c6911e7be3965a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1r5w1pdyzc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1r5w1pdyzc();
cov_1r5w1pdyzc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1r5w1pdyzc().f[0]++;
  cov_1r5w1pdyzc().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1r5w1pdyzc().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().f[1]++;
    cov_1r5w1pdyzc().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().f[2]++;
    cov_1r5w1pdyzc().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().f[3]++;
    cov_1r5w1pdyzc().s[6]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().f[4]++;
    cov_1r5w1pdyzc().s[7]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1r5w1pdyzc().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1r5w1pdyzc().s[9]++, require("../../../../lib/prisma"));
async function POST(request) {
  /* istanbul ignore next */
  cov_1r5w1pdyzc().f[5]++;
  cov_1r5w1pdyzc().s[10]++;
  try {
    const paymentData =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[11]++, await request.json());
    // Validate payment data for expense payments
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[1][0]++, !paymentData.amount) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[1][1]++, !paymentData.paymentMethod) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[1][2]++, !paymentData.expenseAccountId) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[1][3]++, !paymentData.fromAccountId)) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[0][0]++;
      cov_1r5w1pdyzc().s[13]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required payment information. Amount, payment method, expense account, and source account are required."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[0][1]++;
    }
    // Validate the amount is positive
    cov_1r5w1pdyzc().s[14]++;
    if (paymentData.amount <= 0) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[2][0]++;
      cov_1r5w1pdyzc().s[15]++;
      return _server.NextResponse.json({
        success: false,
        message: "Payment amount must be greater than zero"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[2][1]++;
    }
    // Convert string IDs to integers
    const expenseAccountId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[16]++, parseInt(paymentData.expenseAccountId));
    const fromAccountId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[17]++, parseInt(paymentData.fromAccountId));
    // Validate that IDs are valid integers
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[4][0]++, isNaN(expenseAccountId)) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[4][1]++, isNaN(fromAccountId))) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[3][0]++;
      cov_1r5w1pdyzc().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid account IDs provided"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[3][1]++;
    }
    // Validate that both accounts exist and are active
    const [expenseAccount, fromAccount] =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[20]++, await Promise.all([_prisma.prisma.account.findUnique({
      where: {
        id: expenseAccountId,
        isActive: true
      }
    }), _prisma.prisma.account.findUnique({
      where: {
        id: fromAccountId,
        isActive: true
      }
    })]));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[21]++;
    if (!expenseAccount) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[5][0]++;
      cov_1r5w1pdyzc().s[22]++;
      return _server.NextResponse.json({
        success: false,
        message: "Expense account not found or inactive"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[5][1]++;
    }
    cov_1r5w1pdyzc().s[23]++;
    if (!fromAccount) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[6][0]++;
      cov_1r5w1pdyzc().s[24]++;
      return _server.NextResponse.json({
        success: false,
        message: "Source account not found or inactive"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[6][1]++;
    }
    // Create the expense payment transaction
    const result =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[25]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().f[6]++;
      // Create the expense transaction (debit to expense account)
      const expenseTransaction =
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().s[26]++, await tx.transaction.create({
        data: {
          date: new Date(),
          description:
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[7][0]++, paymentData.description) ||
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[7][1]++, `Expense payment - ${expenseAccount.name}`),
          accountId: expenseAccountId,
          toAccountId: fromAccountId,
          type: "expense",
          amount: paymentData.amount,
          reference:
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[8][0]++, paymentData.referenceNumber) ||
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[8][1]++, null),
          category: "expense_payment"
        }
      }));
      // Update account balances
      // Increase expense account balance (debit)
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[27]++;
      await tx.account.update({
        where: {
          id: expenseAccountId
        },
        data: {
          balance: {
            increment: paymentData.amount
          }
        }
      });
      // Decrease source account balance (credit)
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[28]++;
      await tx.account.update({
        where: {
          id: fromAccountId
        },
        data: {
          balance: {
            decrement: paymentData.amount
          }
        }
      });
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[29]++;
      return expenseTransaction;
    }));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[30]++;
    return _server.NextResponse.json({
      success: true,
      message: "Expense payment recorded successfully",
      data: result
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[31]++;
    console.error("Error recording expense payment:", error);
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[32]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error recording expense payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[9][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_1r5w1pdyzc().f[7]++;
  cov_1r5w1pdyzc().s[33]++;
  try {
    // Fetch all expense transactions
    const expensePayments =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[34]++, await _prisma.prisma.transaction.findMany({
      where: {
        type: "expense",
        category: "expense_payment"
      },
      include: {
        account: true,
        toAccount: true
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[35]++;
    return _server.NextResponse.json(expensePayments);
  } catch (error) {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[36]++;
    console.error("Error fetching expense payments:", error);
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[37]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching expense payments",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[10][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1r5w1pdyzc().f[8]++;
  cov_1r5w1pdyzc().s[38]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[39]++, new URL(request.url));
    const transactionId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[40]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[41]++;
    if (!transactionId) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[11][0]++;
      cov_1r5w1pdyzc().s[42]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[11][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[43]++, parseInt(transactionId));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[44]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[12][0]++;
      cov_1r5w1pdyzc().s[45]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid transaction ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[12][1]++;
    }
    // Find the transaction to delete
    const transaction =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[46]++, await _prisma.prisma.transaction.findUnique({
      where: {
        id
      },
      include: {
        account: true,
        toAccount: true
      }
    }));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[47]++;
    if (!transaction) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[13][0]++;
      cov_1r5w1pdyzc().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[13][1]++;
    }
    cov_1r5w1pdyzc().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[15][0]++, transaction.type !== "expense") ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[15][1]++, transaction.category !== "expense_payment")) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[14][0]++;
      cov_1r5w1pdyzc().s[50]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid transaction type for expense payment deletion"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[14][1]++;
    }
    // Reverse the transaction within a database transaction
    cov_1r5w1pdyzc().s[51]++;
    await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().f[9]++;
      cov_1r5w1pdyzc().s[52]++;
      // Reverse the account balance changes
      // Decrease expense account balance (reverse the debit)
      await tx.account.update({
        where: {
          id: transaction.accountId
        },
        data: {
          balance: {
            decrement: transaction.amount
          }
        }
      });
      // Increase source account balance (reverse the credit)
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[53]++;
      if (transaction.toAccountId) {
        /* istanbul ignore next */
        cov_1r5w1pdyzc().b[16][0]++;
        cov_1r5w1pdyzc().s[54]++;
        await tx.account.update({
          where: {
            id: transaction.toAccountId
          },
          data: {
            balance: {
              increment: transaction.amount
            }
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1r5w1pdyzc().b[16][1]++;
      }
      // Delete the transaction
      cov_1r5w1pdyzc().s[55]++;
      await tx.transaction.delete({
        where: {
          id
        }
      });
    });
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[56]++;
    return _server.NextResponse.json({
      success: true,
      message: "Expense payment deleted successfully"
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[57]++;
    console.error("Error deleting expense payment:", error);
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[58]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting expense payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[17][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_1r5w1pdyzc().f[10]++;
  cov_1r5w1pdyzc().s[59]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[60]++, new URL(request.url));
    const transactionId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[61]++, searchParams.get("id"));
    const updateData =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[62]++, await request.json());
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[63]++;
    if (!transactionId) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[18][0]++;
      cov_1r5w1pdyzc().s[64]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[18][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[65]++, parseInt(transactionId));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[66]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[19][0]++;
      cov_1r5w1pdyzc().s[67]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid transaction ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[19][1]++;
    }
    // Validate required fields
    cov_1r5w1pdyzc().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[21][0]++, !updateData.amount) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[21][1]++, !updateData.expenseAccountId) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[21][2]++, !updateData.fromAccountId)) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[20][0]++;
      cov_1r5w1pdyzc().s[69]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields: amount, expenseAccountId, and fromAccountId are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[20][1]++;
    }
    // Validate amount is positive
    cov_1r5w1pdyzc().s[70]++;
    if (updateData.amount <= 0) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[22][0]++;
      cov_1r5w1pdyzc().s[71]++;
      return _server.NextResponse.json({
        success: false,
        message: "Amount must be greater than zero"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[22][1]++;
    }
    // Find the existing transaction
    const existingTransaction =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[72]++, await _prisma.prisma.transaction.findUnique({
      where: {
        id
      },
      include: {
        account: true,
        toAccount: true
      }
    }));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[73]++;
    if (!existingTransaction) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[23][0]++;
      cov_1r5w1pdyzc().s[74]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[23][1]++;
    }
    cov_1r5w1pdyzc().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[25][0]++, existingTransaction.type !== "expense") ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[25][1]++, existingTransaction.category !== "expense_payment")) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[24][0]++;
      cov_1r5w1pdyzc().s[76]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid transaction type for expense payment update"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[24][1]++;
    }
    // Convert string IDs to integers
    const newExpenseAccountId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[77]++, parseInt(updateData.expenseAccountId));
    const newFromAccountId =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[78]++, parseInt(updateData.fromAccountId));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[27][0]++, isNaN(newExpenseAccountId)) ||
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().b[27][1]++, isNaN(newFromAccountId))) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[26][0]++;
      cov_1r5w1pdyzc().s[80]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid account IDs provided"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[26][1]++;
    }
    // Validate that new accounts exist and are active
    const [newExpenseAccount, newFromAccount] =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[81]++, await Promise.all([_prisma.prisma.account.findUnique({
      where: {
        id: newExpenseAccountId,
        isActive: true
      }
    }), _prisma.prisma.account.findUnique({
      where: {
        id: newFromAccountId,
        isActive: true
      }
    })]));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[82]++;
    if (!newExpenseAccount) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[28][0]++;
      cov_1r5w1pdyzc().s[83]++;
      return _server.NextResponse.json({
        success: false,
        message: "New expense account not found or inactive"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[28][1]++;
    }
    cov_1r5w1pdyzc().s[84]++;
    if (!newFromAccount) {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().b[29][0]++;
      cov_1r5w1pdyzc().s[85]++;
      return _server.NextResponse.json({
        success: false,
        message: "New source account not found or inactive"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r5w1pdyzc().b[29][1]++;
    }
    // Update the transaction within a database transaction
    const result =
    /* istanbul ignore next */
    (cov_1r5w1pdyzc().s[86]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1r5w1pdyzc().f[11]++;
      cov_1r5w1pdyzc().s[87]++;
      // First, reverse the original transaction's balance effects
      // Decrease original expense account balance
      await tx.account.update({
        where: {
          id: existingTransaction.accountId
        },
        data: {
          balance: {
            decrement: existingTransaction.amount
          }
        }
      });
      // Increase original source account balance
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[88]++;
      if (existingTransaction.toAccountId) {
        /* istanbul ignore next */
        cov_1r5w1pdyzc().b[30][0]++;
        cov_1r5w1pdyzc().s[89]++;
        await tx.account.update({
          where: {
            id: existingTransaction.toAccountId
          },
          data: {
            balance: {
              increment: existingTransaction.amount
            }
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1r5w1pdyzc().b[30][1]++;
      }
      // Now apply the new transaction's balance effects
      // Increase new expense account balance
      cov_1r5w1pdyzc().s[90]++;
      await tx.account.update({
        where: {
          id: newExpenseAccountId
        },
        data: {
          balance: {
            increment: updateData.amount
          }
        }
      });
      // Decrease new source account balance
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[91]++;
      await tx.account.update({
        where: {
          id: newFromAccountId
        },
        data: {
          balance: {
            decrement: updateData.amount
          }
        }
      });
      // Update the transaction record
      const updatedTransaction =
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().s[92]++, await tx.transaction.update({
        where: {
          id
        },
        data: {
          amount: updateData.amount,
          description:
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[31][0]++, updateData.description) ||
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[31][1]++, existingTransaction.description),
          accountId: newExpenseAccountId,
          toAccountId: newFromAccountId,
          reference:
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[32][0]++, updateData.referenceNumber) ||
          /* istanbul ignore next */
          (cov_1r5w1pdyzc().b[32][1]++, existingTransaction.reference)
        },
        include: {
          account: true,
          toAccount: true
        }
      }));
      /* istanbul ignore next */
      cov_1r5w1pdyzc().s[93]++;
      return updatedTransaction;
    }));
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[94]++;
    return _server.NextResponse.json({
      success: true,
      message: "Expense payment updated successfully",
      data: result
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[95]++;
    console.error("Error updating expense payment:", error);
    /* istanbul ignore next */
    cov_1r5w1pdyzc().s[96]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating expense payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[33][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1r5w1pdyzc().b[33][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,