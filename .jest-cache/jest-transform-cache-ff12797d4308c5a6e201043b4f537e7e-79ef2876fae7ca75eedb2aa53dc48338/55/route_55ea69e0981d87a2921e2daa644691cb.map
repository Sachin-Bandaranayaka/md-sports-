{"version":3,"names":["DELETE","cov_1vlzy1434f","f","s","GET","PUT","getDefaultProduct","id","name","sku","description","price","weightedAverageCost","category_name","inventory","inventoryItems","category","barcode","categoryId","createdAt","Date","updatedAt","shopId","minStockLevel","req","params","paramId","parseInt","isNaN","b","_server","NextResponse","json","success","message","status","product","_prisma","safeQuery","productData","prisma","findUnique","where","include","shop","map","item","quantity","shop_id","shop_name","shop_location","location","shop_specific_cost","shopSpecificCost","data","error","console","userId","headers","get","existingProduct","dataToUpdate","undefined","basePrice","retailPrice","connect","disconnect","updatedProduct","update","changes","Object","keys","forEach","key","typedKey","old","new","length","auditLog","create","action","entity","entityId","details","auditError","_cache1","cacheService","invalidateInventory","_cache","revalidateTag","revalidatePath","Error","String","relatedRecords","purchaseInvoiceItemsCount","purchaseInvoiceItem","count","productId","push","salesInvoiceItemsCount","invoiceItem","quotationItemsCount","quotationItem","join","purchaseInvoiceItems","salesInvoiceItems","quotationItems","$transaction","tx","inventoryItem","deleteMany","delete","invalidatePattern","_client","Prisma","PrismaClientKnownRequestError","code","constraintName","meta","target","relationMessage","includes"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nimport { cacheService } from '@/lib/cache';\n\n// Default fallback for a single product\nconst getDefaultProduct = (id: number) => ({\n    id,\n    name: 'Sample Product',\n    sku: `SKU-${id}`,\n    description: 'Product description not available',\n    price: 1000,\n    weightedAverageCost: 800,\n    category_name: 'General',\n    inventory: [],\n    inventoryItems: [],\n    category: null,\n    barcode: null,\n    categoryId: null,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    shopId: null,\n    minStockLevel: null,\n});\n\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        const product = await safeQuery(\n            async () => {\n                // Get product with its category\n                const productData = await prisma.product.findUnique({\n                    where: { id },\n                    include: {\n                        category: true,\n                        inventoryItems: {\n                            include: {\n                                shop: true\n                            }\n                        }\n                    }\n                });\n\n                if (!productData) {\n                    return null;\n                }\n\n                // Format the product data\n                return {\n                    ...productData,\n                    category_name: productData.category?.name,\n                    inventory: productData.inventoryItems.map(item => ({\n                        id: item.id,\n                        quantity: item.quantity,\n                        shop_id: item.shopId,\n                        shop_name: item.shop.name,\n                        shop_location: item.shop.location,\n                        shop_specific_cost: item.shopSpecificCost || 0\n                    }))\n                };\n            },\n            getDefaultProduct(parseInt(paramId)),\n            `Failed to fetch product with ID ${paramId}`\n        );\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${paramId} not found`\n            }, { status: 404 });\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: product\n        });\n    } catch (error) {\n        console.error(`Error fetching product:`, error);\n        return NextResponse.json({\n            success: true,\n            data: getDefaultProduct(parseInt(paramId))\n        });\n    }\n}\n\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        const id = parseInt(paramId);\n        if (isNaN(id)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const productData = await req.json();\n        const userId = req.headers.get('x-user-id'); // Assuming you pass userId in headers\n\n        // Fetch existing product first to compare changes for audit log\n        const existingProduct = await prisma.product.findUnique({\n            where: { id }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json({ success: false, message: `Product with ID ${id} not found` }, { status: 404 });\n        }\n\n        // Prepare data for update, only including fields present in productData\n        const dataToUpdate: Prisma.ProductUpdateInput = {};\n        if (productData.name !== undefined) dataToUpdate.name = productData.name;\n        if (productData.sku !== undefined) dataToUpdate.sku = productData.sku;\n        if (productData.barcode !== undefined) dataToUpdate.barcode = productData.barcode || null;\n        if (productData.description !== undefined) dataToUpdate.description = productData.description || null;\n        if (productData.basePrice !== undefined) dataToUpdate.weightedAverageCost = productData.basePrice; // Assuming basePrice maps to WAC\n        if (productData.retailPrice !== undefined) dataToUpdate.price = productData.retailPrice;\n        if (productData.categoryId !== undefined) {\n            dataToUpdate.category = productData.categoryId ? { connect: { id: parseInt(productData.categoryId) } } : { disconnect: true };\n        }\n\n        const updatedProduct = await prisma.product.update({\n            where: { id },\n            data: dataToUpdate\n        });\n\n        // Audit Log Generation\n        const changes: Record<string, { old: any, new: any }> = {};\n        (Object.keys(dataToUpdate) as Array<keyof typeof dataToUpdate>).forEach(key => {\n            // Type assertion for existingProduct keys\n            const typedKey = key as keyof typeof existingProduct;\n            if (existingProduct[typedKey] !== updatedProduct[typedKey]) {\n                changes[typedKey] = {\n                    old: existingProduct[typedKey],\n                    new: updatedProduct[typedKey]\n                };\n            }\n        });\n\n        if (Object.keys(changes).length > 0) {\n            try {\n                await prisma.auditLog.create({\n                    data: {\n                        userId: userId ? parseInt(userId, 10) : null,\n                        action: 'UPDATE_PRODUCT',\n                        entity: 'Product',\n                        entityId: id,\n                        details: changes\n                    }\n                });\n            } catch (auditError) {\n                console.error('Failed to create audit log for product update:', auditError);\n                // Do not fail the main operation if audit logging fails\n            }\n        }\n\n        // Invalidate inventory cache\n        await cacheService.invalidateInventory();\n\n        // Revalidate Next.js cached pages\n        revalidateTag('products');\n        revalidateTag('inventory');\n        revalidateTag(`product-${paramId}`);\n        revalidatePath('/inventory');\n        revalidatePath('/products');\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product updated successfully',\n            data: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        try {\n            // Check if product exists first\n            const existingProduct = await prisma.product.findUnique({\n                where: { id }\n            });\n\n            if (!existingProduct) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Product with ID ${paramId} not found`\n                }, { status: 404 });\n            }\n\n            // Check for related records that prevent deletion\n            const relatedRecords = [];\n            \n            // Check if product is referenced in purchase invoices\n            const purchaseInvoiceItemsCount = await prisma.purchaseInvoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (purchaseInvoiceItemsCount > 0) {\n                relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);\n            }\n\n            // Check if product is referenced in sales invoices\n            const salesInvoiceItemsCount = await prisma.invoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (salesInvoiceItemsCount > 0) {\n                relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);\n            }\n\n            // Check if product is referenced in quotations\n            const quotationItemsCount = await prisma.quotationItem.count({\n                where: { productId: id }\n            });\n            \n            if (quotationItemsCount > 0) {\n                relatedRecords.push(`${quotationItemsCount} quotation item(s)`);\n            }\n\n            // If any related records exist, prevent deletion\n            if (relatedRecords.length > 0) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Cannot delete product \"${existingProduct.name}\" because it is referenced in: ${relatedRecords.join(', ')}. Please remove these references first.`,\n                    relatedRecords: {\n                        purchaseInvoiceItems: purchaseInvoiceItemsCount,\n                        salesInvoiceItems: salesInvoiceItemsCount,\n                        quotationItems: quotationItemsCount\n                    }\n                }, { status: 409 });\n            }\n\n            // Use a transaction to delete inventory items and then the product\n            await prisma.$transaction(async (tx) => {\n                // Delete all inventory items associated with this product\n                await tx.inventoryItem.deleteMany({\n                    where: { productId: id }\n                });\n\n                // Then, delete the product itself\n                await tx.product.delete({\n                    where: { id }\n                });\n            });\n\n            // Invalidate product cache\n            await cacheService.invalidatePattern('products:*');\n            await cacheService.invalidateInventory();\n\n            // Revalidate Next.js cached pages\n            revalidateTag('products');\n            revalidateTag('inventory');\n            revalidateTag(`product-${paramId}`);\n            revalidatePath('/inventory');\n            revalidatePath('/products');\n\n            // Real-time updates now handled by polling system\n\n            return NextResponse.json({\n                success: true,\n                message: 'Product deleted successfully'\n            });\n        } catch (error) {\n            // Handle foreign key constraint violations\n            if (error instanceof Prisma.PrismaClientKnownRequestError) {\n                if (error.code === 'P2003') {\n                    // Foreign key constraint violation\n                    const constraintName = error.meta?.target as string || '';\n\n                    // Determine which relation is causing the constraint violation\n                    let relationMessage = 'it is referenced in other records';\n\n                    if (constraintName.includes('PurchaseInvoiceItem')) {\n                        relationMessage = 'it is referenced in purchase invoice records';\n                    } else if (constraintName.includes('SalesInvoiceItem')) {\n                        relationMessage = 'it is referenced in sales invoice records';\n                    } else if (constraintName.includes('InventoryTransaction')) {\n                        relationMessage = 'it is referenced in inventory transaction records';\n                    }\n\n                    return NextResponse.json({\n                        success: false,\n                        message: `Cannot delete this product because ${relationMessage}.`,\n                        error: 'FOREIGN_KEY_CONSTRAINT'\n                    }, { status: 409 });\n                }\n            }\n\n            throw error; // Re-throw for the outer catch block\n        }\n    } catch (error) {\n        console.error(`Error deleting product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}