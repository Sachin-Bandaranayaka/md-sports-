956cab58fa1f659722fe591820c72626
"use strict";

/* istanbul ignore next */
function cov_1vlzy1434f() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts";
  var hash = "c0a3ee53d7795e6db157eebefc87ba00fe3e3843";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "9": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 49
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "12": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "13": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "14": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 34
        }
      },
      "15": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "16": {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 36
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "19": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 89,
          column: 94
        }
      },
      "20": {
        start: {
          line: 60,
          column: 32
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "21": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "22": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 28
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "24": {
        start: {
          line: 80,
          column: 67
        },
        end: {
          line: 87,
          column: 21
        }
      },
      "25": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "26": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "27": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "28": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "29": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "30": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 34
        }
      },
      "31": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 212,
          column: 5
        }
      },
      "32": {
        start: {
          line: 113,
          column: 19
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "33": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "34": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "35": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 44
        }
      },
      "36": {
        start: {
          line: 123,
          column: 23
        },
        end: {
          line: 123,
          column: 51
        }
      },
      "37": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 129,
          column: 10
        }
      },
      "38": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "39": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "40": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 139,
          column: 31
        }
      },
      "41": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 81
        }
      },
      "42": {
        start: {
          line: 140,
          column: 44
        },
        end: {
          line: 140,
          column: 81
        }
      },
      "43": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 78
        }
      },
      "44": {
        start: {
          line: 141,
          column: 43
        },
        end: {
          line: 141,
          column: 78
        }
      },
      "45": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 98
        }
      },
      "46": {
        start: {
          line: 142,
          column: 47
        },
        end: {
          line: 142,
          column: 98
        }
      },
      "47": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 110
        }
      },
      "48": {
        start: {
          line: 143,
          column: 51
        },
        end: {
          line: 143,
          column: 110
        }
      },
      "49": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 106
        }
      },
      "50": {
        start: {
          line: 144,
          column: 49
        },
        end: {
          line: 144,
          column: 106
        }
      },
      "51": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 96
        }
      },
      "52": {
        start: {
          line: 145,
          column: 51
        },
        end: {
          line: 145,
          column: 96
        }
      },
      "53": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "55": {
        start: {
          line: 155,
          column: 31
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "56": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 26
        }
      },
      "57": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "58": {
        start: {
          line: 165,
          column: 29
        },
        end: {
          line: 165,
          column: 32
        }
      },
      "59": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "60": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 170,
          column: 18
        }
      },
      "61": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "62": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "63": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 183,
          column: 19
        }
      },
      "64": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "65": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 57
        }
      },
      "66": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 46
        }
      },
      "67": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 47
        }
      },
      "68": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 56
        }
      },
      "69": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 49
        }
      },
      "70": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 48
        }
      },
      "71": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 202,
          column: 11
        }
      },
      "72": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 56
        }
      },
      "73": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "74": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 34
        }
      },
      "75": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "76": {
        start: {
          line: 218,
          column: 19
        },
        end: {
          line: 218,
          column: 36
        }
      },
      "77": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "78": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "79": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "80": {
        start: {
          line: 229,
          column: 36
        },
        end: {
          line: 233,
          column: 14
        }
      },
      "81": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "82": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 240,
          column: 19
        }
      },
      "83": {
        start: {
          line: 243,
          column: 35
        },
        end: {
          line: 243,
          column: 37
        }
      },
      "84": {
        start: {
          line: 245,
          column: 46
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "85": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "86": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 93
        }
      },
      "87": {
        start: {
          line: 254,
          column: 43
        },
        end: {
          line: 258,
          column: 14
        }
      },
      "88": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "89": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 87
        }
      },
      "90": {
        start: {
          line: 263,
          column: 40
        },
        end: {
          line: 267,
          column: 14
        }
      },
      "91": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "92": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 80
        }
      },
      "93": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "94": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "95": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 299,
          column: 15
        }
      },
      "96": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 292,
          column: 19
        }
      },
      "97": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 298,
          column: 19
        }
      },
      "98": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 71
        }
      },
      "99": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "100": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 50
        }
      },
      "101": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 51
        }
      },
      "102": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 60
        }
      },
      "103": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 53
        }
      },
      "104": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 52
        }
      },
      "105": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "106": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "107": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 336,
          column: 17
        }
      },
      "108": {
        start: {
          line: 319,
          column: 43
        },
        end: {
          line: 319,
          column: 67
        }
      },
      "109": {
        start: {
          line: 321,
          column: 42
        },
        end: {
          line: 321,
          column: 77
        }
      },
      "110": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "111": {
        start: {
          line: 323,
          column: 24
        },
        end: {
          line: 323,
          column: 89
        }
      },
      "112": {
        start: {
          line: 324,
          column: 27
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "113": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 325,
          column: 86
        }
      },
      "114": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "115": {
        start: {
          line: 327,
          column: 24
        },
        end: {
          line: 327,
          column: 94
        }
      },
      "116": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 335,
          column: 23
        }
      },
      "117": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 24
        }
      },
      "118": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 56
        }
      },
      "119": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 33
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 28
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 18
          }
        },
        loc: {
          start: {
            line: 46,
            column: 36
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 53
          },
          end: {
            line: 58,
            column: 54
          }
        },
        loc: {
          start: {
            line: 58,
            column: 63
          },
          end: {
            line: 89,
            column: 9
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 58
          },
          end: {
            line: 80,
            column: 59
          }
        },
        loc: {
          start: {
            line: 80,
            column: 67
          },
          end: {
            line: 87,
            column: 21
          }
        },
        line: 80
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 110,
            column: 15
          },
          end: {
            line: 110,
            column: 18
          }
        },
        loc: {
          start: {
            line: 110,
            column: 36
          },
          end: {
            line: 213,
            column: 1
          }
        },
        line: 110
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 43
          }
        },
        loc: {
          start: {
            line: 163,
            column: 49
          },
          end: {
            line: 172,
            column: 9
          }
        },
        line: 163
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 214,
            column: 15
          },
          end: {
            line: 214,
            column: 21
          }
        },
        loc: {
          start: {
            line: 214,
            column: 39
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 214
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 286,
            column: 46
          },
          end: {
            line: 286,
            column: 47
          }
        },
        loc: {
          start: {
            line: 286,
            column: 58
          },
          end: {
            line: 299,
            column: 13
          }
        },
        line: 286
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 65
          }
        }, {
          start: {
            line: 86,
            column: 69
          },
          end: {
            line: 86,
            column: 70
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 140,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 140,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 141,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 141,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 98
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 98
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 70
          },
          end: {
            line: 142,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 70
          },
          end: {
            line: 142,
            column: 89
          }
        }, {
          start: {
            line: 142,
            column: 93
          },
          end: {
            line: 142,
            column: 97
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 110
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 110
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 78
          },
          end: {
            line: 143,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 78
          },
          end: {
            line: 143,
            column: 101
          }
        }, {
          start: {
            line: 143,
            column: 105
          },
          end: {
            line: 143,
            column: 109
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 106
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 106
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 96
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 96
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "14": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "15": {
        loc: {
          start: {
            line: 147,
            column: 36
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 61
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 153,
            column: 13
          }
        }],
        line: 147
      },
      "16": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "17": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "18": {
        loc: {
          start: {
            line: 177,
            column: 32
          },
          end: {
            line: 177,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 41
          },
          end: {
            line: 177,
            column: 61
          }
        }, {
          start: {
            line: 177,
            column: 64
          },
          end: {
            line: 177,
            column: 68
          }
        }],
        line: 177
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 19
          },
          end: {
            line: 208,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 208,
            column: 57
          }
        }, {
          start: {
            line: 208,
            column: 60
          },
          end: {
            line: 208,
            column: 73
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "21": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "22": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "23": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "24": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "25": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "26": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "27": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "28": {
        loc: {
          start: {
            line: 319,
            column: 43
          },
          end: {
            line: 319,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 43
          },
          end: {
            line: 319,
            column: 61
          }
        }, {
          start: {
            line: 319,
            column: 65
          },
          end: {
            line: 319,
            column: 67
          }
        }],
        line: 319
      },
      "29": {
        loc: {
          start: {
            line: 322,
            column: 20
          },
          end: {
            line: 328,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 20
          },
          end: {
            line: 328,
            column: 21
          }
        }, {
          start: {
            line: 324,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        }],
        line: 322
      },
      "30": {
        loc: {
          start: {
            line: 324,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        }, {
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        }],
        line: 324
      },
      "31": {
        loc: {
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 328,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "32": {
        loc: {
          start: {
            line: 345,
            column: 19
          },
          end: {
            line: 345,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 44
          },
          end: {
            line: 345,
            column: 57
          }
        }, {
          start: {
            line: 345,
            column: 60
          },
          end: {
            line: 345,
            column: 73
          }
        }],
        line: 345
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nimport { cacheService } from '@/lib/cache';\n\n// Default fallback for a single product\nconst getDefaultProduct = (id: number) => ({\n    id,\n    name: 'Sample Product',\n    sku: `SKU-${id}`,\n    description: 'Product description not available',\n    price: 1000,\n    weightedAverageCost: 800,\n    category_name: 'General',\n    inventory: [],\n    inventoryItems: [],\n    category: null,\n    barcode: null,\n    categoryId: null,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    shopId: null,\n    minStockLevel: null,\n});\n\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        const product = await safeQuery(\n            async () => {\n                // Get product with its category\n                const productData = await prisma.product.findUnique({\n                    where: { id },\n                    include: {\n                        category: true,\n                        inventoryItems: {\n                            include: {\n                                shop: true\n                            }\n                        }\n                    }\n                });\n\n                if (!productData) {\n                    return null;\n                }\n\n                // Format the product data\n                return {\n                    ...productData,\n                    category_name: productData.category?.name,\n                    inventory: productData.inventoryItems.map(item => ({\n                        id: item.id,\n                        quantity: item.quantity,\n                        shop_id: item.shopId,\n                        shop_name: item.shop.name,\n                        shop_location: item.shop.location,\n                        shop_specific_cost: item.shopSpecificCost || 0\n                    }))\n                };\n            },\n            getDefaultProduct(parseInt(paramId)),\n            `Failed to fetch product with ID ${paramId}`\n        );\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${paramId} not found`\n            }, { status: 404 });\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: product\n        });\n    } catch (error) {\n        console.error(`Error fetching product:`, error);\n        return NextResponse.json({\n            success: true,\n            data: getDefaultProduct(parseInt(paramId))\n        });\n    }\n}\n\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        const id = parseInt(paramId);\n        if (isNaN(id)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const productData = await req.json();\n        const userId = req.headers.get('x-user-id'); // Assuming you pass userId in headers\n\n        // Fetch existing product first to compare changes for audit log\n        const existingProduct = await prisma.product.findUnique({\n            where: { id }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json({ success: false, message: `Product with ID ${id} not found` }, { status: 404 });\n        }\n\n        // Prepare data for update, only including fields present in productData\n        const dataToUpdate: Prisma.ProductUpdateInput = {};\n        if (productData.name !== undefined) dataToUpdate.name = productData.name;\n        if (productData.sku !== undefined) dataToUpdate.sku = productData.sku;\n        if (productData.barcode !== undefined) dataToUpdate.barcode = productData.barcode || null;\n        if (productData.description !== undefined) dataToUpdate.description = productData.description || null;\n        if (productData.basePrice !== undefined) dataToUpdate.weightedAverageCost = productData.basePrice; // Assuming basePrice maps to WAC\n        if (productData.retailPrice !== undefined) dataToUpdate.price = productData.retailPrice;\n        if (productData.categoryId !== undefined) {\n            dataToUpdate.category = productData.categoryId ? { connect: { id: parseInt(productData.categoryId) } } : { disconnect: true };\n        }\n\n        const updatedProduct = await prisma.product.update({\n            where: { id },\n            data: dataToUpdate\n        });\n\n        // Audit Log Generation\n        const changes: Record<string, { old: any, new: any }> = {};\n        (Object.keys(dataToUpdate) as Array<keyof typeof dataToUpdate>).forEach(key => {\n            // Type assertion for existingProduct keys\n            const typedKey = key as keyof typeof existingProduct;\n            if (existingProduct[typedKey] !== updatedProduct[typedKey]) {\n                changes[typedKey] = {\n                    old: existingProduct[typedKey],\n                    new: updatedProduct[typedKey]\n                };\n            }\n        });\n\n        if (Object.keys(changes).length > 0) {\n            try {\n                await prisma.auditLog.create({\n                    data: {\n                        userId: userId ? parseInt(userId, 10) : null,\n                        action: 'UPDATE_PRODUCT',\n                        entity: 'Product',\n                        entityId: id,\n                        details: changes\n                    }\n                });\n            } catch (auditError) {\n                console.error('Failed to create audit log for product update:', auditError);\n                // Do not fail the main operation if audit logging fails\n            }\n        }\n\n        // Invalidate inventory cache\n        await cacheService.invalidateInventory();\n\n        // Revalidate Next.js cached pages\n        revalidateTag('products');\n        revalidateTag('inventory');\n        revalidateTag(`product-${paramId}`);\n        revalidatePath('/inventory');\n        revalidatePath('/products');\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product updated successfully',\n            data: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const { id: paramId } = params;\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        try {\n            // Check if product exists first\n            const existingProduct = await prisma.product.findUnique({\n                where: { id }\n            });\n\n            if (!existingProduct) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Product with ID ${paramId} not found`\n                }, { status: 404 });\n            }\n\n            // Check for related records that prevent deletion\n            const relatedRecords = [];\n            \n            // Check if product is referenced in purchase invoices\n            const purchaseInvoiceItemsCount = await prisma.purchaseInvoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (purchaseInvoiceItemsCount > 0) {\n                relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);\n            }\n\n            // Check if product is referenced in sales invoices\n            const salesInvoiceItemsCount = await prisma.invoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (salesInvoiceItemsCount > 0) {\n                relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);\n            }\n\n            // Check if product is referenced in quotations\n            const quotationItemsCount = await prisma.quotationItem.count({\n                where: { productId: id }\n            });\n            \n            if (quotationItemsCount > 0) {\n                relatedRecords.push(`${quotationItemsCount} quotation item(s)`);\n            }\n\n            // If any related records exist, prevent deletion\n            if (relatedRecords.length > 0) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Cannot delete product \"${existingProduct.name}\" because it is referenced in: ${relatedRecords.join(', ')}. Please remove these references first.`,\n                    relatedRecords: {\n                        purchaseInvoiceItems: purchaseInvoiceItemsCount,\n                        salesInvoiceItems: salesInvoiceItemsCount,\n                        quotationItems: quotationItemsCount\n                    }\n                }, { status: 409 });\n            }\n\n            // Use a transaction to delete inventory items and then the product\n            await prisma.$transaction(async (tx) => {\n                // Delete all inventory items associated with this product\n                await tx.inventoryItem.deleteMany({\n                    where: { productId: id }\n                });\n\n                // Then, delete the product itself\n                await tx.product.delete({\n                    where: { id }\n                });\n            });\n\n            // Invalidate product cache\n            await cacheService.invalidatePattern('products:*');\n            await cacheService.invalidateInventory();\n\n            // Revalidate Next.js cached pages\n            revalidateTag('products');\n            revalidateTag('inventory');\n            revalidateTag(`product-${paramId}`);\n            revalidatePath('/inventory');\n            revalidatePath('/products');\n\n            // Real-time updates now handled by polling system\n\n            return NextResponse.json({\n                success: true,\n                message: 'Product deleted successfully'\n            });\n        } catch (error) {\n            // Handle foreign key constraint violations\n            if (error instanceof Prisma.PrismaClientKnownRequestError) {\n                if (error.code === 'P2003') {\n                    // Foreign key constraint violation\n                    const constraintName = error.meta?.target as string || '';\n\n                    // Determine which relation is causing the constraint violation\n                    let relationMessage = 'it is referenced in other records';\n\n                    if (constraintName.includes('PurchaseInvoiceItem')) {\n                        relationMessage = 'it is referenced in purchase invoice records';\n                    } else if (constraintName.includes('SalesInvoiceItem')) {\n                        relationMessage = 'it is referenced in sales invoice records';\n                    } else if (constraintName.includes('InventoryTransaction')) {\n                        relationMessage = 'it is referenced in inventory transaction records';\n                    }\n\n                    return NextResponse.json({\n                        success: false,\n                        message: `Cannot delete this product because ${relationMessage}.`,\n                        error: 'FOREIGN_KEY_CONSTRAINT'\n                    }, { status: 409 });\n                }\n            }\n\n            throw error; // Re-throw for the outer catch block\n        }\n    } catch (error) {\n        console.error(`Error deleting product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "getDefaultProduct", "id", "name", "sku", "description", "price", "weightedAverageCost", "category_name", "inventory", "inventoryItems", "category", "barcode", "categoryId", "createdAt", "Date", "updatedAt", "shopId", "minStockLevel", "req", "params", "paramId", "parseInt", "isNaN", "NextResponse", "json", "success", "message", "status", "product", "safeQuery", "productData", "prisma", "findUnique", "where", "include", "shop", "map", "item", "quantity", "shop_id", "shop_name", "shop_location", "location", "shop_specific_cost", "shopSpecificCost", "data", "error", "console", "userId", "headers", "get", "existingProduct", "dataToUpdate", "undefined", "basePrice", "retailPrice", "connect", "disconnect", "updatedProduct", "update", "changes", "Object", "keys", "forEach", "key", "typedKey", "old", "new", "length", "auditLog", "create", "action", "entity", "entityId", "details", "auditError", "cacheService", "invalidateInventory", "revalidateTag", "revalidatePath", "Error", "String", "relatedRecords", "purchaseInvoiceItemsCount", "purchaseInvoiceItem", "count", "productId", "push", "salesInvoiceItemsCount", "invoiceItem", "quotationItemsCount", "quotationItem", "join", "purchaseInvoiceItems", "salesInvoiceItems", "quotationItems", "$transaction", "tx", "inventoryItem", "deleteMany", "delete", "invalidatePattern", "Prisma", "PrismaClientKnownRequestError", "code", "constraintName", "meta", "target", "relationMessage", "includes"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c0a3ee53d7795e6db157eebefc87ba00fe3e3843"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vlzy1434f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vlzy1434f();
cov_1vlzy1434f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[0]++;
  cov_1vlzy1434f().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1vlzy1434f().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[1]++;
    cov_1vlzy1434f().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[2]++;
    cov_1vlzy1434f().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[3]++;
    cov_1vlzy1434f().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1vlzy1434f().s[7]++, require("next/server"));
const _cache =
/* istanbul ignore next */
(cov_1vlzy1434f().s[8]++, require("next/cache"));
const _prisma =
/* istanbul ignore next */
(cov_1vlzy1434f().s[9]++, require("../../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_1vlzy1434f().s[10]++, require("@prisma/client"));
const _cache1 =
/* istanbul ignore next */
(cov_1vlzy1434f().s[11]++, require("../../../../lib/cache"));
// Default fallback for a single product
/* istanbul ignore next */
cov_1vlzy1434f().s[12]++;
const getDefaultProduct = id => {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[4]++;
  cov_1vlzy1434f().s[13]++;
  return {
    id,
    name: "Sample Product",
    sku: `SKU-${id}`,
    description: "Product description not available",
    price: 1000,
    weightedAverageCost: 800,
    category_name: "General",
    inventory: [],
    inventoryItems: [],
    category: null,
    barcode: null,
    categoryId: null,
    createdAt: new Date(),
    updatedAt: new Date(),
    shopId: null,
    minStockLevel: null
  };
};
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[5]++;
  const {
    id: paramId
  } =
  /* istanbul ignore next */
  (cov_1vlzy1434f().s[14]++, params);
  /* istanbul ignore next */
  cov_1vlzy1434f().s[15]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[16]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[17]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[0][0]++;
      cov_1vlzy1434f().s[18]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[0][1]++;
    }
    const product =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[19]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_1vlzy1434f().f[6]++;
      // Get product with its category
      const productData =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[20]++, await _prisma.prisma.product.findUnique({
        where: {
          id
        },
        include: {
          category: true,
          inventoryItems: {
            include: {
              shop: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[21]++;
      if (!productData) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[1][0]++;
        cov_1vlzy1434f().s[22]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[1][1]++;
      }
      // Format the product data
      cov_1vlzy1434f().s[23]++;
      return {
        ...productData,
        category_name: productData.category?.name,
        inventory: productData.inventoryItems.map(item => {
          /* istanbul ignore next */
          cov_1vlzy1434f().f[7]++;
          cov_1vlzy1434f().s[24]++;
          return {
            id: item.id,
            quantity: item.quantity,
            shop_id: item.shopId,
            shop_name: item.shop.name,
            shop_location: item.shop.location,
            shop_specific_cost:
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[2][0]++, item.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[2][1]++, 0)
          };
        })
      };
    }, getDefaultProduct(parseInt(paramId)), `Failed to fetch product with ID ${paramId}`));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[25]++;
    if (!product) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[3][0]++;
      cov_1vlzy1434f().s[26]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${paramId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[3][1]++;
    }
    cov_1vlzy1434f().s[27]++;
    return _server.NextResponse.json({
      success: true,
      data: product
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[28]++;
    console.error(`Error fetching product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[29]++;
    return _server.NextResponse.json({
      success: true,
      data: getDefaultProduct(parseInt(paramId))
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[8]++;
  const {
    id: paramId
  } =
  /* istanbul ignore next */
  (cov_1vlzy1434f().s[30]++, params);
  /* istanbul ignore next */
  cov_1vlzy1434f().s[31]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[32]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[33]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[4][0]++;
      cov_1vlzy1434f().s[34]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[4][1]++;
    }
    const productData =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[35]++, await req.json());
    const userId =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[36]++, req.headers.get("x-user-id")); // Assuming you pass userId in headers
    // Fetch existing product first to compare changes for audit log
    const existingProduct =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[37]++, await _prisma.prisma.product.findUnique({
      where: {
        id
      }
    }));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[38]++;
    if (!existingProduct) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[5][0]++;
      cov_1vlzy1434f().s[39]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${id} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[5][1]++;
    }
    // Prepare data for update, only including fields present in productData
    const dataToUpdate =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[40]++, {});
    /* istanbul ignore next */
    cov_1vlzy1434f().s[41]++;
    if (productData.name !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[6][0]++;
      cov_1vlzy1434f().s[42]++;
      dataToUpdate.name = productData.name;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[6][1]++;
    }
    cov_1vlzy1434f().s[43]++;
    if (productData.sku !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[7][0]++;
      cov_1vlzy1434f().s[44]++;
      dataToUpdate.sku = productData.sku;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[7][1]++;
    }
    cov_1vlzy1434f().s[45]++;
    if (productData.barcode !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[8][0]++;
      cov_1vlzy1434f().s[46]++;
      dataToUpdate.barcode =
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[9][0]++, productData.barcode) ||
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[9][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[8][1]++;
    }
    cov_1vlzy1434f().s[47]++;
    if (productData.description !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[10][0]++;
      cov_1vlzy1434f().s[48]++;
      dataToUpdate.description =
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[11][0]++, productData.description) ||
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[11][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[10][1]++;
    }
    cov_1vlzy1434f().s[49]++;
    if (productData.basePrice !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[12][0]++;
      cov_1vlzy1434f().s[50]++;
      dataToUpdate.weightedAverageCost = productData.basePrice;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[12][1]++;
    } // Assuming basePrice maps to WAC
    cov_1vlzy1434f().s[51]++;
    if (productData.retailPrice !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[13][0]++;
      cov_1vlzy1434f().s[52]++;
      dataToUpdate.price = productData.retailPrice;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[13][1]++;
    }
    cov_1vlzy1434f().s[53]++;
    if (productData.categoryId !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[14][0]++;
      cov_1vlzy1434f().s[54]++;
      dataToUpdate.category = productData.categoryId ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[15][0]++, {
        connect: {
          id: parseInt(productData.categoryId)
        }
      }) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[15][1]++, {
        disconnect: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[14][1]++;
    }
    const updatedProduct =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[55]++, await _prisma.prisma.product.update({
      where: {
        id
      },
      data: dataToUpdate
    }));
    // Audit Log Generation
    const changes =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[56]++, {});
    /* istanbul ignore next */
    cov_1vlzy1434f().s[57]++;
    Object.keys(dataToUpdate).forEach(key => {
      /* istanbul ignore next */
      cov_1vlzy1434f().f[9]++;
      // Type assertion for existingProduct keys
      const typedKey =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[58]++, key);
      /* istanbul ignore next */
      cov_1vlzy1434f().s[59]++;
      if (existingProduct[typedKey] !== updatedProduct[typedKey]) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[16][0]++;
        cov_1vlzy1434f().s[60]++;
        changes[typedKey] = {
          old: existingProduct[typedKey],
          new: updatedProduct[typedKey]
        };
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[16][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1vlzy1434f().s[61]++;
    if (Object.keys(changes).length > 0) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[17][0]++;
      cov_1vlzy1434f().s[62]++;
      try {
        /* istanbul ignore next */
        cov_1vlzy1434f().s[63]++;
        await _prisma.prisma.auditLog.create({
          data: {
            userId: userId ?
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[18][0]++, parseInt(userId, 10)) :
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[18][1]++, null),
            action: "UPDATE_PRODUCT",
            entity: "Product",
            entityId: id,
            details: changes
          }
        });
      } catch (auditError) {
        /* istanbul ignore next */
        cov_1vlzy1434f().s[64]++;
        console.error("Failed to create audit log for product update:", auditError);
        // Do not fail the main operation if audit logging fails
      }
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[17][1]++;
    }
    // Invalidate inventory cache
    cov_1vlzy1434f().s[65]++;
    await _cache1.cacheService.invalidateInventory();
    // Revalidate Next.js cached pages
    /* istanbul ignore next */
    cov_1vlzy1434f().s[66]++;
    (0, _cache.revalidateTag)("products");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[67]++;
    (0, _cache.revalidateTag)("inventory");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[68]++;
    (0, _cache.revalidateTag)(`product-${paramId}`);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[69]++;
    (0, _cache.revalidatePath)("/inventory");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[70]++;
    (0, _cache.revalidatePath)("/products");
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_1vlzy1434f().s[71]++;
    return _server.NextResponse.json({
      success: true,
      message: "Product updated successfully",
      data: updatedProduct
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[72]++;
    console.error(`Error updating product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[73]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating product",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[19][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[10]++;
  const {
    id: paramId
  } =
  /* istanbul ignore next */
  (cov_1vlzy1434f().s[74]++, params);
  /* istanbul ignore next */
  cov_1vlzy1434f().s[75]++;
  try {
    // Ensure params.id is properly awaited in Next.js 14+
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[76]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[77]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[20][0]++;
      cov_1vlzy1434f().s[78]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[20][1]++;
    }
    cov_1vlzy1434f().s[79]++;
    try {
      // Check if product exists first
      const existingProduct =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[80]++, await _prisma.prisma.product.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[81]++;
      if (!existingProduct) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[21][0]++;
        cov_1vlzy1434f().s[82]++;
        return _server.NextResponse.json({
          success: false,
          message: `Product with ID ${paramId} not found`
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[21][1]++;
      }
      // Check for related records that prevent deletion
      const relatedRecords =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[83]++, []);
      // Check if product is referenced in purchase invoices
      const purchaseInvoiceItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[84]++, await _prisma.prisma.purchaseInvoiceItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[85]++;
      if (purchaseInvoiceItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[22][0]++;
        cov_1vlzy1434f().s[86]++;
        relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[22][1]++;
      }
      // Check if product is referenced in sales invoices
      const salesInvoiceItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[87]++, await _prisma.prisma.invoiceItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[88]++;
      if (salesInvoiceItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[23][0]++;
        cov_1vlzy1434f().s[89]++;
        relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[23][1]++;
      }
      // Check if product is referenced in quotations
      const quotationItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[90]++, await _prisma.prisma.quotationItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[91]++;
      if (quotationItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[24][0]++;
        cov_1vlzy1434f().s[92]++;
        relatedRecords.push(`${quotationItemsCount} quotation item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[24][1]++;
      }
      // If any related records exist, prevent deletion
      cov_1vlzy1434f().s[93]++;
      if (relatedRecords.length > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[25][0]++;
        cov_1vlzy1434f().s[94]++;
        return _server.NextResponse.json({
          success: false,
          message: `Cannot delete product "${existingProduct.name}" because it is referenced in: ${relatedRecords.join(", ")}. Please remove these references first.`,
          relatedRecords: {
            purchaseInvoiceItems: purchaseInvoiceItemsCount,
            salesInvoiceItems: salesInvoiceItemsCount,
            quotationItems: quotationItemsCount
          }
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[25][1]++;
      }
      // Use a transaction to delete inventory items and then the product
      cov_1vlzy1434f().s[95]++;
      await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_1vlzy1434f().f[11]++;
        cov_1vlzy1434f().s[96]++;
        // Delete all inventory items associated with this product
        await tx.inventoryItem.deleteMany({
          where: {
            productId: id
          }
        });
        // Then, delete the product itself
        /* istanbul ignore next */
        cov_1vlzy1434f().s[97]++;
        await tx.product.delete({
          where: {
            id
          }
        });
      });
      // Invalidate product cache
      /* istanbul ignore next */
      cov_1vlzy1434f().s[98]++;
      await _cache1.cacheService.invalidatePattern("products:*");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[99]++;
      await _cache1.cacheService.invalidateInventory();
      // Revalidate Next.js cached pages
      /* istanbul ignore next */
      cov_1vlzy1434f().s[100]++;
      (0, _cache.revalidateTag)("products");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[101]++;
      (0, _cache.revalidateTag)("inventory");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[102]++;
      (0, _cache.revalidateTag)(`product-${paramId}`);
      /* istanbul ignore next */
      cov_1vlzy1434f().s[103]++;
      (0, _cache.revalidatePath)("/inventory");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[104]++;
      (0, _cache.revalidatePath)("/products");
      // Real-time updates now handled by polling system
      /* istanbul ignore next */
      cov_1vlzy1434f().s[105]++;
      return _server.NextResponse.json({
        success: true,
        message: "Product deleted successfully"
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1vlzy1434f().s[106]++;
      // Handle foreign key constraint violations
      if (error instanceof _client.Prisma.PrismaClientKnownRequestError) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[26][0]++;
        cov_1vlzy1434f().s[107]++;
        if (error.code === "P2003") {
          /* istanbul ignore next */
          cov_1vlzy1434f().b[27][0]++;
          // Foreign key constraint violation
          const constraintName =
          /* istanbul ignore next */
          (cov_1vlzy1434f().s[108]++,
          /* istanbul ignore next */
          (cov_1vlzy1434f().b[28][0]++, error.meta?.target) ||
          /* istanbul ignore next */
          (cov_1vlzy1434f().b[28][1]++, ""));
          // Determine which relation is causing the constraint violation
          let relationMessage =
          /* istanbul ignore next */
          (cov_1vlzy1434f().s[109]++, "it is referenced in other records");
          /* istanbul ignore next */
          cov_1vlzy1434f().s[110]++;
          if (constraintName.includes("PurchaseInvoiceItem")) {
            /* istanbul ignore next */
            cov_1vlzy1434f().b[29][0]++;
            cov_1vlzy1434f().s[111]++;
            relationMessage = "it is referenced in purchase invoice records";
          } else {
            /* istanbul ignore next */
            cov_1vlzy1434f().b[29][1]++;
            cov_1vlzy1434f().s[112]++;
            if (constraintName.includes("SalesInvoiceItem")) {
              /* istanbul ignore next */
              cov_1vlzy1434f().b[30][0]++;
              cov_1vlzy1434f().s[113]++;
              relationMessage = "it is referenced in sales invoice records";
            } else {
              /* istanbul ignore next */
              cov_1vlzy1434f().b[30][1]++;
              cov_1vlzy1434f().s[114]++;
              if (constraintName.includes("InventoryTransaction")) {
                /* istanbul ignore next */
                cov_1vlzy1434f().b[31][0]++;
                cov_1vlzy1434f().s[115]++;
                relationMessage = "it is referenced in inventory transaction records";
              } else
              /* istanbul ignore next */
              {
                cov_1vlzy1434f().b[31][1]++;
              }
            }
          }
          /* istanbul ignore next */
          cov_1vlzy1434f().s[116]++;
          return _server.NextResponse.json({
            success: false,
            message: `Cannot delete this product because ${relationMessage}.`,
            error: "FOREIGN_KEY_CONSTRAINT"
          }, {
            status: 409
          });
        } else
        /* istanbul ignore next */
        {
          cov_1vlzy1434f().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[26][1]++;
      }
      cov_1vlzy1434f().s[117]++;
      throw error; // Re-throw for the outer catch block
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[118]++;
    console.error(`Error deleting product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[119]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting product",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[32][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[32][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,