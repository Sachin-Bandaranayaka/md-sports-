{"version":3,"names":["cov_xqdg755ph","actualCoverage","s","GET","request","f","searchParams","URL","url","dateParam","get","targetDate","b","Date","startOfDay","setHours","endOfDay","shops","_prisma","prisma","shop","findMany","select","id","name","location","shopSalesData","Promise","all","map","salesAggregate","invoice","aggregate","_sum","total","_count","where","shopId","createdAt","gte","lte","status","invoices","include","customer","email","phone","items","product","sku","category","orderBy","totalQuantity","reduce","itemTotal","item","quantity","shopName","totalSales","numberOfInvoices","totalQuantitySold","averageTransactionValue","overallTotals","totals","totalInvoices","_server","NextResponse","json","success","reportDate","toISOString","split","summary","date","toLocaleDateString","weekday","year","month","day","numberOfShops","length","averagePerShop","shopData","generatedAt","error","console","message"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/reports/daily-sales/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const dateParam = searchParams.get('date');\n        \n        // Use provided date or default to today\n        const targetDate = dateParam ? new Date(dateParam) : new Date();\n        \n        // Set to start and end of the day\n        const startOfDay = new Date(targetDate);\n        startOfDay.setHours(0, 0, 0, 0);\n        \n        const endOfDay = new Date(targetDate);\n        endOfDay.setHours(23, 59, 59, 999);\n\n        // Get all shops\n        const shops = await prisma.shop.findMany({\n            select: {\n                id: true,\n                name: true,\n                location: true\n            }\n        });\n\n        // Get daily sales data for each shop\n        const shopSalesData = await Promise.all(\n            shops.map(async (shop) => {\n                // Get aggregated sales data for the shop\n                const salesAggregate = await prisma.invoice.aggregate({\n                    _sum: {\n                        total: true,\n                    },\n                    _count: {\n                        id: true,\n                    },\n                    where: {\n                        shopId: shop.id,\n                        createdAt: {\n                            gte: startOfDay,\n                            lte: endOfDay,\n                        },\n                        status: 'paid',\n                    },\n                });\n\n                // Get detailed invoice data for the shop\n                const invoices = await prisma.invoice.findMany({\n                    where: {\n                        shopId: shop.id,\n                        createdAt: {\n                            gte: startOfDay,\n                            lte: endOfDay,\n                        },\n                        status: 'paid',\n                    },\n                    include: {\n                        customer: {\n                            select: {\n                                name: true,\n                                email: true,\n                                phone: true\n                            }\n                        },\n                        items: {\n                            include: {\n                                product: {\n                                    select: {\n                                        name: true,\n                                        sku: true,\n                                        category: true\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                });\n\n                // Calculate total quantity sold\n                const totalQuantity = invoices.reduce((total, invoice) => {\n                    return total + invoice.items.reduce((itemTotal, item) => itemTotal + item.quantity, 0);\n                }, 0);\n\n                return {\n                    shopId: shop.id,\n                    shopName: shop.name,\n                    location: shop.location,\n                    totalSales: salesAggregate._sum.total || 0,\n                    numberOfInvoices: salesAggregate._count.id || 0,\n                    totalQuantitySold: totalQuantity,\n                    averageTransactionValue: salesAggregate._count.id > 0 \n                        ? (salesAggregate._sum.total || 0) / salesAggregate._count.id \n                        : 0,\n                    invoices: invoices\n                };\n            })\n        );\n\n        // Calculate overall totals\n        const overallTotals = shopSalesData.reduce(\n            (totals, shop) => ({\n                totalSales: totals.totalSales + shop.totalSales,\n                totalInvoices: totals.totalInvoices + shop.numberOfInvoices,\n                totalQuantity: totals.totalQuantity + shop.totalQuantitySold\n            }),\n            { totalSales: 0, totalInvoices: 0, totalQuantity: 0 }\n        );\n\n        return NextResponse.json({\n            success: true,\n            reportDate: targetDate.toISOString().split('T')[0],\n            summary: {\n                date: targetDate.toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                }),\n                totalSales: overallTotals.totalSales,\n                totalInvoices: overallTotals.totalInvoices,\n                totalQuantitySold: overallTotals.totalQuantity,\n                numberOfShops: shops.length,\n                averagePerShop: shops.length > 0 ? overallTotals.totalSales / shops.length : 0\n            },\n            shopData: shopSalesData,\n            generatedAt: new Date().toISOString()\n        });\n\n    } catch (error) {\n        console.error('Error fetching daily sales report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch daily sales report' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}