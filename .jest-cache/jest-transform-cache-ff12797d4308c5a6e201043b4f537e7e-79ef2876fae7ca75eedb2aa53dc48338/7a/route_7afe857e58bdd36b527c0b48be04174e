a21fbf69eb847efae97918c5189f1592
"use strict";

/* istanbul ignore next */
function cov_1y6f2k2uti() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/adjust/route.ts";
  var hash = "884723f7ef445a643f713646be10d0d0ddd37df9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/adjust/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 83
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "7": {
        start: {
          line: 20,
          column: 63
        },
        end: {
          line: 20,
          column: 83
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "9": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "10": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "13": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "14": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "15": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "16": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 52
        }
      },
      "17": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "18": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 40
        }
      },
      "19": {
        start: {
          line: 62,
          column: 36
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "20": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 71,
          column: 31
        }
      },
      "21": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "22": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 57
        }
      },
      "23": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 73
        }
      },
      "24": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 61
        }
      },
      "25": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "26": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 117
        }
      },
      "27": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "28": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "29": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 118
        }
      },
      "30": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 47
        }
      },
      "31": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 111,
          column: 18
        }
      },
      "32": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 48
        }
      },
      "33": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 141
        }
      },
      "34": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 41
        }
      },
      "35": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "36": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 43
        }
      },
      "37": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 22
        }
      },
      "38": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 29
        }
      },
      "39": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 59
        }
      },
      "40": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 19
          }
        }, {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 33
          }
        }, {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 22,
            column: 67
          }
        }],
        line: 22
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 113,
            column: 13
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 122
          },
          end: {
            line: 116,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 122
          },
          end: {
            line: 116,
            column: 127
          }
        }, {
          start: {
            line: 116,
            column: 131
          },
          end: {
            line: 116,
            column: 137
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 141,
            column: 19
          },
          end: {
            line: 141,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 44
          },
          end: {
            line: 141,
            column: 57
          }
        }, {
          start: {
            line: 141,
            column: 60
          },
          end: {
            line: 141,
            column: 73
          }
        }],
        line: 141
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/adjust/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport db from '@/utils/db';\n\n// POST: Adjust inventory quantity\nexport async function POST(request: Request) {\n    try {\n        const { shopId, productId, adjustmentAmount, notes } = await request.json();\n\n        // Validate required fields\n        if (!shopId || !productId || adjustmentAmount === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Shop ID, product ID, and adjustment amount are required'\n            }, { status: 400 });\n        }\n\n        // Validate shop and product\n        const shopResult = await db.query(`\n            SELECT id FROM shops WHERE id = $1 AND is_active = true\n        `, [shopId]);\n\n        if (shopResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        const productResult = await db.query(`\n            SELECT id FROM products WHERE id = $1 AND is_active = true\n        `, [productId]);\n\n        if (productResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Begin a transaction\n        const client = await db.getClient();\n        try {\n            await client.query('BEGIN');\n\n            // Check if the inventory item exists\n            const inventoryResult = await client.query(`\n                SELECT id, quantity FROM inventory_items \n                WHERE shop_id = $1 AND product_id = $2\n                FOR UPDATE\n            `, [shopId, productId]);\n\n            let inventoryId;\n            let oldQuantity = 0;\n            let newQuantity;\n\n            if (inventoryResult.rows.length > 0) {\n                // Update existing inventory item\n                inventoryId = inventoryResult.rows[0].id;\n                oldQuantity = parseInt(inventoryResult.rows[0].quantity);\n                newQuantity = oldQuantity + adjustmentAmount;\n\n                // Check if the resulting quantity would be negative\n                if (newQuantity < 0) {\n                    throw new Error(`Cannot adjust quantity to ${newQuantity}. Current quantity is ${oldQuantity}.`);\n                }\n\n                await client.query(`\n                    UPDATE inventory_items \n                    SET \n                        quantity = $1, \n                        last_updated = CURRENT_TIMESTAMP\n                    WHERE \n                        id = $2\n                `, [newQuantity, inventoryId]);\n            } else {\n                // Create new inventory item if adjustment is positive\n                if (adjustmentAmount < 0) {\n                    throw new Error(`Cannot adjust non-existent inventory by negative amount (${adjustmentAmount}).`);\n                }\n\n                newQuantity = adjustmentAmount;\n\n                const result = await client.query(`\n                    INSERT INTO inventory_items (\n                        shop_id, \n                        product_id, \n                        quantity, \n                        reorder_level\n                    ) VALUES ($1, $2, $3, 0)\n                    RETURNING id\n                `, [shopId, productId, newQuantity]);\n\n                inventoryId = result.rows[0].id;\n            }\n\n            // Record the adjustment in an audit log (if we had one)\n            // For now, we'll just log it to console\n            console.log(`Inventory adjustment: Shop ${shopId}, Product ${productId}, Amount ${adjustmentAmount}, Notes: ${notes || 'None'}`);\n\n            await client.query('COMMIT');\n\n            return NextResponse.json({\n                success: true,\n                message: 'Inventory adjusted successfully',\n                data: {\n                    inventoryId,\n                    shopId,\n                    productId,\n                    oldQuantity,\n                    newQuantity,\n                    adjustmentAmount\n                }\n            });\n        } catch (err) {\n            await client.query('ROLLBACK');\n            throw err;\n        } finally {\n            client.release();\n        }\n    } catch (error) {\n        console.error('Error adjusting inventory:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error adjusting inventory',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["POST", "request", "shopId", "productId", "adjustmentAmount", "notes", "json", "undefined", "NextResponse", "success", "message", "status", "shopResult", "db", "query", "rows", "length", "productResult", "client", "getClient", "inventoryResult", "inventoryId", "oldQuantity", "newQuantity", "id", "parseInt", "quantity", "Error", "result", "console", "log", "data", "err", "release", "error", "String"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "884723f7ef445a643f713646be10d0d0ddd37df9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1y6f2k2uti = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1y6f2k2uti();
cov_1y6f2k2uti().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1y6f2k2uti().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1y6f2k2uti().f[0]++;
    cov_1y6f2k2uti().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1y6f2k2uti().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(/*#__PURE__*/cov_1y6f2k2uti().s[4]++, _interop_require_default(require("../../../../utils/db")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1y6f2k2uti().f[1]++;
  cov_1y6f2k2uti().s[5]++;
  return /* istanbul ignore next */(cov_1y6f2k2uti().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1y6f2k2uti().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1y6f2k2uti().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1y6f2k2uti().b[0][1]++, {
    default: obj
  });
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1y6f2k2uti().f[2]++;
  cov_1y6f2k2uti().s[6]++;
  try {
    const {
      shopId,
      productId,
      adjustmentAmount,
      notes
    } =
    /* istanbul ignore next */
    (cov_1y6f2k2uti().s[7]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_1y6f2k2uti().b[3][0]++, !shopId) ||
    /* istanbul ignore next */
    (cov_1y6f2k2uti().b[3][1]++, !productId) ||
    /* istanbul ignore next */
    (cov_1y6f2k2uti().b[3][2]++, adjustmentAmount === undefined)) {
      /* istanbul ignore next */
      cov_1y6f2k2uti().b[2][0]++;
      cov_1y6f2k2uti().s[9]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop ID, product ID, and adjustment amount are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1y6f2k2uti().b[2][1]++;
    }
    // Validate shop and product
    const shopResult =
    /* istanbul ignore next */
    (cov_1y6f2k2uti().s[10]++, await _db.default.query(`
            SELECT id FROM shops WHERE id = $1 AND is_active = true
        `, [shopId]));
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[11]++;
    if (shopResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_1y6f2k2uti().b[4][0]++;
      cov_1y6f2k2uti().s[12]++;
      return _server.NextResponse.json({
        success: false,
        message: `Shop with ID ${shopId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1y6f2k2uti().b[4][1]++;
    }
    const productResult =
    /* istanbul ignore next */
    (cov_1y6f2k2uti().s[13]++, await _db.default.query(`
            SELECT id FROM products WHERE id = $1 AND is_active = true
        `, [productId]));
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[14]++;
    if (productResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_1y6f2k2uti().b[5][0]++;
      cov_1y6f2k2uti().s[15]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${productId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1y6f2k2uti().b[5][1]++;
    }
    // Begin a transaction
    const client =
    /* istanbul ignore next */
    (cov_1y6f2k2uti().s[16]++, await _db.default.getClient());
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[17]++;
    try {
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[18]++;
      await client.query("BEGIN");
      // Check if the inventory item exists
      const inventoryResult =
      /* istanbul ignore next */
      (cov_1y6f2k2uti().s[19]++, await client.query(`
                SELECT id, quantity FROM inventory_items 
                WHERE shop_id = $1 AND product_id = $2
                FOR UPDATE
            `, [shopId, productId]));
      let inventoryId;
      let oldQuantity =
      /* istanbul ignore next */
      (cov_1y6f2k2uti().s[20]++, 0);
      let newQuantity;
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[21]++;
      if (inventoryResult.rows.length > 0) {
        /* istanbul ignore next */
        cov_1y6f2k2uti().b[6][0]++;
        cov_1y6f2k2uti().s[22]++;
        // Update existing inventory item
        inventoryId = inventoryResult.rows[0].id;
        /* istanbul ignore next */
        cov_1y6f2k2uti().s[23]++;
        oldQuantity = parseInt(inventoryResult.rows[0].quantity);
        /* istanbul ignore next */
        cov_1y6f2k2uti().s[24]++;
        newQuantity = oldQuantity + adjustmentAmount;
        // Check if the resulting quantity would be negative
        /* istanbul ignore next */
        cov_1y6f2k2uti().s[25]++;
        if (newQuantity < 0) {
          /* istanbul ignore next */
          cov_1y6f2k2uti().b[7][0]++;
          cov_1y6f2k2uti().s[26]++;
          throw new Error(`Cannot adjust quantity to ${newQuantity}. Current quantity is ${oldQuantity}.`);
        } else
        /* istanbul ignore next */
        {
          cov_1y6f2k2uti().b[7][1]++;
        }
        cov_1y6f2k2uti().s[27]++;
        await client.query(`
                    UPDATE inventory_items 
                    SET 
                        quantity = $1, 
                        last_updated = CURRENT_TIMESTAMP
                    WHERE 
                        id = $2
                `, [newQuantity, inventoryId]);
      } else {
        /* istanbul ignore next */
        cov_1y6f2k2uti().b[6][1]++;
        cov_1y6f2k2uti().s[28]++;
        // Create new inventory item if adjustment is positive
        if (adjustmentAmount < 0) {
          /* istanbul ignore next */
          cov_1y6f2k2uti().b[8][0]++;
          cov_1y6f2k2uti().s[29]++;
          throw new Error(`Cannot adjust non-existent inventory by negative amount (${adjustmentAmount}).`);
        } else
        /* istanbul ignore next */
        {
          cov_1y6f2k2uti().b[8][1]++;
        }
        cov_1y6f2k2uti().s[30]++;
        newQuantity = adjustmentAmount;
        const result =
        /* istanbul ignore next */
        (cov_1y6f2k2uti().s[31]++, await client.query(`
                    INSERT INTO inventory_items (
                        shop_id, 
                        product_id, 
                        quantity, 
                        reorder_level
                    ) VALUES ($1, $2, $3, 0)
                    RETURNING id
                `, [shopId, productId, newQuantity]));
        /* istanbul ignore next */
        cov_1y6f2k2uti().s[32]++;
        inventoryId = result.rows[0].id;
      }
      // Record the adjustment in an audit log (if we had one)
      // For now, we'll just log it to console
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[33]++;
      console.log(`Inventory adjustment: Shop ${shopId}, Product ${productId}, Amount ${adjustmentAmount}, Notes: ${
      /* istanbul ignore next */
      (cov_1y6f2k2uti().b[9][0]++, notes) ||
      /* istanbul ignore next */
      (cov_1y6f2k2uti().b[9][1]++, "None")}`);
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[34]++;
      await client.query("COMMIT");
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[35]++;
      return _server.NextResponse.json({
        success: true,
        message: "Inventory adjusted successfully",
        data: {
          inventoryId,
          shopId,
          productId,
          oldQuantity,
          newQuantity,
          adjustmentAmount
        }
      });
    } catch (err) {
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[36]++;
      await client.query("ROLLBACK");
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[37]++;
      throw err;
    } finally {
      /* istanbul ignore next */
      cov_1y6f2k2uti().s[38]++;
      client.release();
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[39]++;
    console.error("Error adjusting inventory:", error);
    /* istanbul ignore next */
    cov_1y6f2k2uti().s[40]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error adjusting inventory",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1y6f2k2uti().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1y6f2k2uti().b[10][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,