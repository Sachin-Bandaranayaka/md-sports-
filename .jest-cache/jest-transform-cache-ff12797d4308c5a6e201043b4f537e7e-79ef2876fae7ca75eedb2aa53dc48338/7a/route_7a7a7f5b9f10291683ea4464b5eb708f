56ea75a326acdcb031b225b37a95e995
"use strict";

/* istanbul ignore next */
function cov_2e7fw92rdr() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts";
  var hash = "c04f10fe4dcd03daffc07ba2fc9d43ad0bf0f5a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 89
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 91
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 36
        }
      },
      "15": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "16": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 57
        }
      },
      "17": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 52
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "22": {
        start: {
          line: 48,
          column: 25
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "24": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 57
        }
      },
      "25": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "26": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 93
        }
      },
      "27": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 31
        }
      },
      "29": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "30": {
        start: {
          line: 83,
          column: 21
        },
        end: {
          line: 83,
          column: 37
        }
      },
      "31": {
        start: {
          line: 84,
          column: 92
        },
        end: {
          line: 84,
          column: 96
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "33": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "34": {
        start: {
          line: 95,
          column: 32
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "35": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "36": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "37": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "38": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "39": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 56
        }
      },
      "40": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 76,
            column: 15
          },
          end: {
            line: 76,
            column: 19
          }
        },
        loc: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 76
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 17
          }
        }, {
          start: {
            line: 86,
            column: 21
          },
          end: {
            line: 86,
            column: 25
          }
        }, {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 49
          }
        }, {
          start: {
            line: 86,
            column: 53
          },
          end: {
            line: 86,
            column: 59
          }
        }, {
          start: {
            line: 86,
            column: 63
          },
          end: {
            line: 86,
            column: 74
          }
        }],
        line: 86
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 32
          }
        }, {
          start: {
            line: 120,
            column: 36
          },
          end: {
            line: 120,
            column: 40
          }
        }],
        line: 120
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 29
          },
          end: {
            line: 121,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 29
          },
          end: {
            line: 121,
            column: 40
          }
        }, {
          start: {
            line: 121,
            column: 44
          },
          end: {
            line: 121,
            column: 48
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: List all products\nexport async function GET(req: NextRequest) {\n    // First check for 'inventory:view' permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const url = new URL(req.url);\n        const categoryId = url.searchParams.get('categoryId');\n        const searchTerm = url.searchParams.get('search');\n\n        // Build query conditions for Prisma\n        const where: any = {};\n\n        if (categoryId) {\n            where.categoryId = parseInt(categoryId);\n        }\n\n        if (searchTerm) {\n            where.name = {\n                contains: searchTerm,\n                mode: 'insensitive'\n            };\n        }\n\n        const products = await prisma.product.findMany({\n            where,\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            products\n        });\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch products' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new product\nexport async function POST(req: NextRequest) {\n    // Check for 'inventory:manage' permission\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price, // retailPrice in request\n            weightedAverageCost, // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Validate required fields\n        if (!name || !sku || !weightedAverageCost || !price || !categoryId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Required fields are missing.'\n            }, { status: 400 });\n        }\n\n        // Check if SKU or barcode already exists\n        const existingProduct = await prisma.product.findFirst({\n            where: {\n                OR: [\n                    { sku },\n                    { barcode }\n                ]\n            }\n        });\n\n        if (existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'SKU or barcode already exists' },\n                { status: 409 }\n            );\n        }\n\n        // Create product\n        const product = await prisma.product.create({\n            data: {\n                name,\n                sku,\n                barcode: barcode || null,\n                description: description || null,\n                price,\n                weightedAverageCost,\n                categoryId\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating product:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create product' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "POST", "req", "permissionError", "requirePermission", "url", "URL", "categoryId", "searchParams", "get", "searchTerm", "where", "parseInt", "name", "contains", "mode", "products", "prisma", "product", "findMany", "include", "category", "select", "id", "orderBy", "NextResponse", "json", "success", "error", "console", "message", "status", "body", "sku", "barcode", "description", "price", "weightedAverageCost", "existingProduct", "findFirst", "OR", "create", "data"],
      mappings: ";;;;;;;;;;;IAKsBA,GAAG;eAAHA;;IAuDAC,IAAI;eAAJA;;;wBA5DoB;+DACvB;4BACe;;;;;;AAG3B,eAAeD,IAAIE,GAAgB;IACtC,8CAA8C;IAC9C,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,kBAAkBF;IAClE,IAAIC,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,MAAME,MAAM,IAAIC,IAAIJ,IAAIG,GAAG;QAC3B,MAAME,aAAaF,IAAIG,YAAY,CAACC,GAAG,CAAC;QACxC,MAAMC,aAAaL,IAAIG,YAAY,CAACC,GAAG,CAAC;QAExC,oCAAoC;QACpC,MAAME,QAAa,CAAC;QAEpB,IAAIJ,YAAY;YACZI,MAAMJ,UAAU,GAAGK,SAASL;QAChC;QAEA,IAAIG,YAAY;YACZC,MAAME,IAAI,GAAG;gBACTC,UAAUJ;gBACVK,MAAM;YACV;QACJ;QAEA,MAAMC,WAAW,MAAMC,eAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;YAC3CR;YACAS,SAAS;gBACLC,UAAU;oBACNC,QAAQ;wBACJC,IAAI;wBACJV,MAAM;oBACV;gBACJ;YACJ;YACAW,SAAS;gBACLX,MAAM;YACV;QACJ;QAEA,OAAOY,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTX;QACJ;IACJ,EAAE,OAAOY,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAA2B,GACtD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAe9B,KAAKC,GAAgB;IACvC,0CAA0C;IAC1C,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,oBAAoBF;IACpE,IAAIC,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,MAAM6B,OAAO,MAAM9B,IAAIwB,IAAI;QAC3B,MAAM,EACFb,IAAI,EACJoB,GAAG,EACHC,OAAO,EACPC,WAAW,EACXC,KAAK,EACLC,mBAAmB,EACnB9B,UAAU,EACb,GAAGyB;QAEJ,2BAA2B;QAC3B,IAAI,CAACnB,QAAQ,CAACoB,OAAO,CAACI,uBAAuB,CAACD,SAAS,CAAC7B,YAAY;YAChE,OAAOkB,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTG,SAAS;YACb,GAAG;gBAAEC,QAAQ;YAAI;QACrB;QAEA,yCAAyC;QACzC,MAAMO,kBAAkB,MAAMrB,eAAM,CAACC,OAAO,CAACqB,SAAS,CAAC;YACnD5B,OAAO;gBACH6B,IAAI;oBACA;wBAAEP;oBAAI;oBACN;wBAAEC;oBAAQ;iBACb;YACL;QACJ;QAEA,IAAII,iBAAiB;YACjB,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAgC,GAC3D;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,iBAAiB;QACjB,MAAMb,UAAU,MAAMD,eAAM,CAACC,OAAO,CAACuB,MAAM,CAAC;YACxCC,MAAM;gBACF7B;gBACAoB;gBACAC,SAASA,WAAW;gBACpBC,aAAaA,eAAe;gBAC5BC;gBACAC;gBACA9B;YACJ;QACJ;QAEA,OAAOkB,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTT;QACJ,GAAG;YAAEa,QAAQ;QAAI;IACrB,EAAE,OAAOH,OAAO;QACZC,QAAQD,KAAK,CAAC,2BAA2BA;QACzC,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAA2B,GACtD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c04f10fe4dcd03daffc07ba2fc9d43ad0bf0f5a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2e7fw92rdr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2e7fw92rdr();
cov_2e7fw92rdr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[0]++;
  cov_2e7fw92rdr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2e7fw92rdr().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2e7fw92rdr().f[1]++;
    cov_2e7fw92rdr().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2e7fw92rdr().f[2]++;
    cov_2e7fw92rdr().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2e7fw92rdr().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2e7fw92rdr().s[7]++, _interop_require_default(require("../../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_2e7fw92rdr().s[8]++, require("../../../../lib/utils/middleware"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[3]++;
  cov_2e7fw92rdr().s[9]++;
  return /* istanbul ignore next */(cov_2e7fw92rdr().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[4]++;
  // First check for 'inventory:view' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2e7fw92rdr().s[10]++, await (0, _middleware.requirePermission)("inventory:view")(req));
  /* istanbul ignore next */
  cov_2e7fw92rdr().s[11]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().b[2][0]++;
    cov_2e7fw92rdr().s[12]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2e7fw92rdr().b[2][1]++;
  }
  cov_2e7fw92rdr().s[13]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[14]++, new URL(req.url));
    const categoryId =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[15]++, url.searchParams.get("categoryId"));
    const searchTerm =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[16]++, url.searchParams.get("search"));
    // Build query conditions for Prisma
    const where =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[17]++, {});
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[18]++;
    if (categoryId) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[3][0]++;
      cov_2e7fw92rdr().s[19]++;
      where.categoryId = parseInt(categoryId);
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[3][1]++;
    }
    cov_2e7fw92rdr().s[20]++;
    if (searchTerm) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[4][0]++;
      cov_2e7fw92rdr().s[21]++;
      where.name = {
        contains: searchTerm,
        mode: "insensitive"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[4][1]++;
    }
    const products =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[22]++, await _prisma.default.product.findMany({
      where,
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: {
        name: "asc"
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[23]++;
    return _server.NextResponse.json({
      success: true,
      products
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[24]++;
    console.error("Error fetching products:", error);
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch products"
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[5]++;
  // Check for 'inventory:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2e7fw92rdr().s[26]++, await (0, _middleware.requirePermission)("inventory:manage")(req));
  /* istanbul ignore next */
  cov_2e7fw92rdr().s[27]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().b[5][0]++;
    cov_2e7fw92rdr().s[28]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2e7fw92rdr().b[5][1]++;
  }
  cov_2e7fw92rdr().s[29]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[30]++, await req.json());
    const {
      name,
      sku,
      barcode,
      description,
      price,
      weightedAverageCost,
      categoryId
    } =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[31]++, body);
    // Validate required fields
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[7][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[7][1]++, !sku) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[7][2]++, !weightedAverageCost) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[7][3]++, !price) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[7][4]++, !categoryId)) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[6][0]++;
      cov_2e7fw92rdr().s[33]++;
      return _server.NextResponse.json({
        success: false,
        message: "Required fields are missing."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[6][1]++;
    }
    // Check if SKU or barcode already exists
    const existingProduct =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[34]++, await _prisma.default.product.findFirst({
      where: {
        OR: [{
          sku
        }, {
          barcode
        }]
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[35]++;
    if (existingProduct) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[8][0]++;
      cov_2e7fw92rdr().s[36]++;
      return _server.NextResponse.json({
        success: false,
        message: "SKU or barcode already exists"
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[8][1]++;
    }
    // Create product
    const product =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[37]++, await _prisma.default.product.create({
      data: {
        name,
        sku,
        barcode:
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[9][0]++, barcode) ||
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[9][1]++, null),
        description:
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[10][0]++, description) ||
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[10][1]++, null),
        price,
        weightedAverageCost,
        categoryId
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[38]++;
    return _server.NextResponse.json({
      success: true,
      product
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[39]++;
    console.error("Error creating product:", error);
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[40]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create product"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,