{"version":3,"names":["default","cov_2dif0zy8zl","f","s","PurchasesPage","revalidate","ITEMS_PER_PAGE","fetchPurchaseInvoices","baseUrl","page","limit","search","status","supplierId","startDate","endDate","queryParams","URLSearchParams","toString","b","append","response","fetch","next","tags","ok","console","error","text","invoices","totalPages","currentPage","responseData","json","data","pagination","total","fetchSuppliers","cache","success","Array","isArray","searchParams","passedSearchParams","headersList","_headers","headers","host","get","protocol","process","env","NODE_ENV","parseInt","searchTerm","statusFilter","supplierFilter","startDateFilter","endDateFilter","invoicesData","suppliers","Promise","all","_jsxruntime","jsx","_MainLayout","_react","Suspense","fallback","className","_PurchaseListClient","initialPurchaseInvoices","initialSuppliers","initialTotalPages","initialCurrentPage"],"sources":["/Users/sachin/Documents/md-sports-/src/app/purchases/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\nimport { headers } from 'next/headers';\nimport MainLayout from '@/components/layout/MainLayout';\nimport PurchaseListClient from '@/components/purchases/PurchaseListClient';\nimport { PurchaseInvoice, Supplier } from '@/types'; // Ensure types are available\n\n// Reduce revalidation time from 60 to 10 seconds for faster updates\nexport const revalidate = 10;\n\nconst ITEMS_PER_PAGE = 10; // Define how many items per page\n\nasync function fetchPurchaseInvoices(baseUrl: string, page: number, limit: number, search?: string, status?: string, supplierId?: string, startDate?: string, endDate?: string): Promise<{ invoices: PurchaseInvoice[], totalPages: number, currentPage: number }> {\n    const queryParams = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n    });\n    if (search) queryParams.append('search', search);\n    if (status) queryParams.append('status', status);\n    if (supplierId) queryParams.append('supplierId', supplierId);\n    if (startDate) queryParams.append('startDate', startDate);\n    if (endDate) queryParams.append('endDate', endDate);\n\n    try {\n        const response = await fetch(`${baseUrl}/api/purchases?${queryParams.toString()}`, {\n            next: { \n                tags: ['purchase-invoices'],\n                revalidate: 0 // Always fetch fresh data but use tags for revalidation\n            }\n        });\n\n        if (!response.ok) {\n            console.error('Failed to fetch purchase invoices:', response.status, await response.text());\n            return { invoices: [], totalPages: 0, currentPage: page };\n        }\n        const responseData = await response.json(); // Renamed to responseData to avoid conflict\n\n        // Assuming API returns { data: PurchaseInvoice[], pagination: { total: number, page: number, limit: number, totalPages: number } }\n        const invoices = responseData.data || [];\n        const pagination = responseData.pagination || { total: 0, page: page, limit: limit, totalPages: 0 };\n\n        return {\n            invoices: invoices,\n            totalPages: pagination.totalPages,\n            currentPage: pagination.page\n        };\n\n    } catch (error) {\n        console.error('Error fetching purchase invoices:', error);\n        return { invoices: [], totalPages: 0, currentPage: page };\n    }\n}\n\nasync function fetchSuppliers(baseUrl: string): Promise<Supplier[]> {\n    try {\n        const response = await fetch(`${baseUrl}/api/suppliers`, {\n            next: { revalidate: 60, tags: ['suppliers'] }, // Cache suppliers for 1 minute with tags\n            cache: 'force-cache'\n        });\n        if (!response.ok) {\n            console.error('Failed to fetch suppliers:', response.status, await response.text());\n            return [];\n        }\n        const data = await response.json();\n        return data.success ? data.data : (Array.isArray(data) ? data : []); // API might return array directly or { success: true, data: [] }\n    } catch (error) {\n        console.error('Error fetching suppliers:', error);\n        return [];\n    }\n}\n\nexport default async function PurchasesPage({\n    searchParams: passedSearchParams\n}: {\n    searchParams: { [key: string]: string | string[] | undefined }\n}) {\n    const headersList = await headers();\n    const host = headersList.get('host') || 'localhost:3000';\n    const protocol = process.env.NODE_ENV === 'development' ? 'http' : 'https';\n    const baseUrl = `${protocol}://${host}`;\n\n    const searchParams = await passedSearchParams;\n\n    const page = parseInt(searchParams?.page as string || '1');\n    const limit = ITEMS_PER_PAGE;\n    const searchTerm = searchParams?.search as string || '';\n    const statusFilter = searchParams?.status as string || '';\n    const supplierFilter = searchParams?.supplierId as string || '';\n    const startDateFilter = searchParams?.startDate as string || '';\n    const endDateFilter = searchParams?.endDate as string || '';\n\n    // Fetch data in parallel\n    const [invoicesData, suppliers] = await Promise.all([\n        fetchPurchaseInvoices(baseUrl, page, limit, searchTerm, statusFilter, supplierFilter, startDateFilter, endDateFilter),\n        fetchSuppliers(baseUrl)\n    ]);\n\n    return (\n        <MainLayout>\n            <Suspense fallback={<div className=\"text-center p-8\">Loading purchase invoices...</div>}>\n                <PurchaseListClient\n                    initialPurchaseInvoices={invoicesData.invoices}\n                    initialSuppliers={suppliers}\n                    initialTotalPages={invoicesData.totalPages}\n                    initialCurrentPage={invoicesData.currentPage}\n                />\n            </Suspense>\n        </MainLayout>\n    );\n}"],"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","ignoreList":[]}