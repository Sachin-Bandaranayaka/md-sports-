a24eccb1ccf4af1eb81fb46df4100f37
"use strict";

/* istanbul ignore next */
function cov_f1qq8m28t() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts";
  var hash = "5e010e42fc69a7801016e1ab3ce958e687d61d2c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "10": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "11": {
        start: {
          line: 28,
          column: 14
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "12": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "13": {
        start: {
          line: 31,
          column: 19
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "16": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "17": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "18": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "19": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 50
        }
      },
      "20": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "21": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "22": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "23": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "26": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 48
        }
      },
      "27": {
        start: {
          line: 82,
          column: 32
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "28": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "29": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "30": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "31": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "32": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 56
        }
      },
      "33": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "34": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 261,
          column: 5
        }
      },
      "35": {
        start: {
          line: 133,
          column: 19
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "36": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "37": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "38": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "39": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "40": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "41": {
        start: {
          line: 158,
          column: 22
        },
        end: {
          line: 158,
          column: 82
        }
      },
      "42": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 159,
          column: 22
        }
      },
      "43": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "44": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "45": {
        start: {
          line: 162,
          column: 32
        },
        end: {
          line: 162,
          column: 67
        }
      },
      "46": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "47": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 44
        }
      },
      "48": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 87
        }
      },
      "49": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "50": {
        start: {
          line: 173,
          column: 39
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "51": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "52": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 193,
          column: 19
        }
      },
      "53": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "54": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 206,
          column: 15
        }
      },
      "55": {
        start: {
          line: 209,
          column: 34
        },
        end: {
          line: 219,
          column: 14
        }
      },
      "56": {
        start: {
          line: 220,
          column: 30
        },
        end: {
          line: 220,
          column: 60
        }
      },
      "57": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "58": {
        start: {
          line: 230,
          column: 33
        },
        end: {
          line: 230,
          column: 52
        }
      },
      "59": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 232,
          column: 37
        }
      },
      "60": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "61": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "62": {
        start: {
          line: 235,
          column: 19
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "63": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 38
        }
      },
      "64": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "65": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "66": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "67": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 56
        }
      },
      "68": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "69": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 469,
          column: 5
        }
      },
      "70": {
        start: {
          line: 265,
          column: 19
        },
        end: {
          line: 265,
          column: 38
        }
      },
      "71": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "72": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "73": {
        start: {
          line: 274,
          column: 52
        },
        end: {
          line: 274,
          column: 72
        }
      },
      "74": {
        start: {
          line: 276,
          column: 32
        },
        end: {
          line: 289,
          column: 10
        }
      },
      "75": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "76": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "77": {
        start: {
          line: 299,
          column: 22
        },
        end: {
          line: 299,
          column: 82
        }
      },
      "78": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 300,
          column: 22
        }
      },
      "79": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "80": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "81": {
        start: {
          line: 303,
          column: 32
        },
        end: {
          line: 303,
          column: 67
        }
      },
      "82": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "83": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 44
        }
      },
      "84": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 87
        }
      },
      "85": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 439,
          column: 10
        }
      },
      "86": {
        start: {
          line: 314,
          column: 35
        },
        end: {
          line: 323,
          column: 14
        }
      },
      "87": {
        start: {
          line: 325,
          column: 33
        },
        end: {
          line: 325,
          column: 56
        }
      },
      "88": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "89": {
        start: {
          line: 327,
          column: 42
        },
        end: {
          line: 327,
          column: 44
        }
      },
      "90": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 330,
          column: 17
        }
      },
      "91": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 68
        }
      },
      "92": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "93": {
        start: {
          line: 333,
          column: 39
        },
        end: {
          line: 337,
          column: 22
        }
      },
      "94": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 340,
          column: 21
        }
      },
      "95": {
        start: {
          line: 339,
          column: 24
        },
        end: {
          line: 339,
          column: 70
        }
      },
      "96": {
        start: {
          line: 341,
          column: 20
        },
        end: {
          line: 341,
          column: 81
        }
      },
      "97": {
        start: {
          line: 343,
          column: 20
        },
        end: {
          line: 391,
          column: 21
        }
      },
      "98": {
        start: {
          line: 344,
          column: 46
        },
        end: {
          line: 344,
          column: 76
        }
      },
      "99": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 357,
          column: 25
        }
      },
      "100": {
        start: {
          line: 347,
          column: 28
        },
        end: {
          line: 356,
          column: 31
        }
      },
      "101": {
        start: {
          line: 359,
          column: 24
        },
        end: {
          line: 368,
          column: 27
        }
      },
      "102": {
        start: {
          line: 370,
          column: 44
        },
        end: {
          line: 373,
          column: 25
        }
      },
      "103": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 376,
          column: 25
        }
      },
      "104": {
        start: {
          line: 375,
          column: 28
        },
        end: {
          line: 375,
          column: 86
        }
      },
      "105": {
        start: {
          line: 377,
          column: 51
        },
        end: {
          line: 379,
          column: 26
        }
      },
      "106": {
        start: {
          line: 380,
          column: 24
        },
        end: {
          line: 390,
          column: 25
        }
      },
      "107": {
        start: {
          line: 381,
          column: 28
        },
        end: {
          line: 389,
          column: 31
        }
      },
      "108": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 403,
          column: 19
        }
      },
      "109": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 434,
          column: 15
        }
      },
      "110": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 438,
          column: 14
        }
      },
      "111": {
        start: {
          line: 441,
          column: 32
        },
        end: {
          line: 455,
          column: 10
        }
      },
      "112": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 460,
          column: 11
        }
      },
      "113": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 56
        }
      },
      "114": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 468,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 10
          }
        },
        loc: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 18
          }
        },
        loc: {
          start: {
            line: 70,
            column: 40
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 70
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 131,
            column: 21
          }
        },
        loc: {
          start: {
            line: 131,
            column: 43
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 171,
            column: 42
          },
          end: {
            line: 171,
            column: 43
          }
        },
        loc: {
          start: {
            line: 171,
            column: 54
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 171
      },
      "9": {
        name: "PATCH",
        decl: {
          start: {
            line: 263,
            column: 15
          },
          end: {
            line: 263,
            column: 20
          }
        },
        loc: {
          start: {
            line: 263,
            column: 42
          },
          end: {
            line: 470,
            column: 1
          }
        },
        line: 263
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 312,
            column: 57
          },
          end: {
            line: 312,
            column: 58
          }
        },
        loc: {
          start: {
            line: 312,
            column: 69
          },
          end: {
            line: 439,
            column: 9
          }
        },
        line: 312
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 29
          },
          end: {
            line: 103,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 55
          },
          end: {
            line: 103,
            column: 88
          }
        }, {
          start: {
            line: 103,
            column: 91
          },
          end: {
            line: 103,
            column: 100
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 63
          },
          end: {
            line: 104,
            column: 83
          }
        }, {
          start: {
            line: 104,
            column: 86
          },
          end: {
            line: 104,
            column: 95
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 73
          },
          end: {
            line: 105,
            column: 98
          }
        }, {
          start: {
            line: 105,
            column: 101
          },
          end: {
            line: 105,
            column: 110
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 106,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 71
          },
          end: {
            line: 106,
            column: 95
          }
        }, {
          start: {
            line: 106,
            column: 98
          },
          end: {
            line: 106,
            column: 107
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 31
          },
          end: {
            line: 107,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 73
          },
          end: {
            line: 107,
            column: 98
          }
        }, {
          start: {
            line: 107,
            column: 101
          },
          end: {
            line: 107,
            column: 110
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 108,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 108,
            column: 57
          },
          end: {
            line: 108,
            column: 74
          }
        }, {
          start: {
            line: 108,
            column: 77
          },
          end: {
            line: 108,
            column: 86
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 69
          },
          end: {
            line: 109,
            column: 92
          }
        }, {
          start: {
            line: 109,
            column: 95
          },
          end: {
            line: 109,
            column: 104
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "14": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 20
          },
          end: {
            line: 163,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 20
          },
          end: {
            line: 163,
            column: 27
          }
        }, {
          start: {
            line: 163,
            column: 31
          },
          end: {
            line: 163,
            column: 45
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 55
          }
        }, {
          start: {
            line: 220,
            column: 59
          },
          end: {
            line: 220,
            column: 60
          }
        }],
        line: 220
      },
      "18": {
        loc: {
          start: {
            line: 230,
            column: 33
          },
          end: {
            line: 230,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 33
          },
          end: {
            line: 230,
            column: 47
          }
        }, {
          start: {
            line: 230,
            column: 51
          },
          end: {
            line: 230,
            column: 52
          }
        }],
        line: 230
      },
      "19": {
        loc: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 237,
            column: 13
          }
        }],
        line: 233
      },
      "20": {
        loc: {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "21": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "22": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "23": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "24": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "25": {
        loc: {
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 304,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 304,
            column: 27
          }
        }, {
          start: {
            line: 304,
            column: 31
          },
          end: {
            line: 304,
            column: 45
          }
        }],
        line: 304
      },
      "26": {
        loc: {
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 321,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 42
          }
        }, {
          start: {
            line: 319,
            column: 46
          },
          end: {
            line: 321,
            column: 21
          }
        }],
        line: 319
      },
      "27": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "28": {
        loc: {
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 326,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 16
          },
          end: {
            line: 326,
            column: 43
          }
        }, {
          start: {
            line: 326,
            column: 47
          },
          end: {
            line: 326,
            column: 70
          }
        }],
        line: 326
      },
      "29": {
        loc: {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 330,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 330,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "30": {
        loc: {
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "31": {
        loc: {
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 340,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 340,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "32": {
        loc: {
          start: {
            line: 343,
            column: 20
          },
          end: {
            line: 391,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 20
          },
          end: {
            line: 391,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "33": {
        loc: {
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 357,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 357,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "34": {
        loc: {
          start: {
            line: 374,
            column: 24
          },
          end: {
            line: 376,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 24
          },
          end: {
            line: 376,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "35": {
        loc: {
          start: {
            line: 380,
            column: 24
          },
          end: {
            line: 390,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 24
          },
          end: {
            line: 390,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "36": {
        loc: {
          start: {
            line: 380,
            column: 28
          },
          end: {
            line: 380,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 28
          },
          end: {
            line: 380,
            column: 46
          }
        }, {
          start: {
            line: 380,
            column: 50
          },
          end: {
            line: 380,
            column: 82
          }
        }, {
          start: {
            line: 380,
            column: 86
          },
          end: {
            line: 380,
            column: 117
          }
        }],
        line: 380
      },
      "37": {
        loc: {
          start: {
            line: 413,
            column: 31
          },
          end: {
            line: 416,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 413,
            column: 53
          },
          end: {
            line: 416,
            column: 25
          }
        }, {
          start: {
            line: 416,
            column: 28
          },
          end: {
            line: 416,
            column: 37
          }
        }],
        line: 413
      },
      "38": {
        loc: {
          start: {
            line: 417,
            column: 39
          },
          end: {
            line: 420,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 417,
            column: 69
          },
          end: {
            line: 420,
            column: 25
          }
        }, {
          start: {
            line: 420,
            column: 28
          },
          end: {
            line: 420,
            column: 37
          }
        }],
        line: 417
      },
      "39": {
        loc: {
          start: {
            line: 421,
            column: 35
          },
          end: {
            line: 430,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 421,
            column: 61
          },
          end: {
            line: 430,
            column: 25
          }
        }, {
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 430,
            column: 37
          }
        }],
        line: 421
      },
      "40": {
        loc: {
          start: {
            line: 425,
            column: 44
          },
          end: {
            line: 429,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 70
          },
          end: {
            line: 429,
            column: 37
          }
        }, {
          start: {
            line: 429,
            column: 40
          },
          end: {
            line: 429,
            column: 49
          }
        }],
        line: 425
      },
      "41": {
        loc: {
          start: {
            line: 465,
            column: 21
          },
          end: {
            line: 465,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 465,
            column: 46
          },
          end: {
            line: 465,
            column: 59
          }
        }, {
          start: {
            line: 465,
            column: 62
          },
          end: {
            line: 465,
            column: 88
          }
        }],
        line: 465
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { auditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// Get a single receipt by ID\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        if (!receipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(receipt);\n    } catch (error) {\n        console.error('Error fetching receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Update a receipt\nexport async function PUT(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receiptData = await request.json();\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Update receipt\n        const updatedReceipt = await prisma.receipt.update({\n            where: { id },\n            data: {\n                receiptDate: receiptData.receiptDate ? new Date(receiptData.receiptDate) : undefined,\n                bankName: receiptData.bankName !== undefined ? receiptData.bankName : undefined,\n                accountNumber: receiptData.accountNumber !== undefined ? receiptData.accountNumber : undefined,\n                chequeNumber: receiptData.chequeNumber !== undefined ? receiptData.chequeNumber : undefined,\n                transactionId: receiptData.transactionId !== undefined ? receiptData.transactionId : undefined,\n                notes: receiptData.notes !== undefined ? receiptData.notes : undefined,\n                confirmedBy: receiptData.confirmedBy !== undefined ? receiptData.confirmedBy : undefined\n            },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        return NextResponse.json(updatedReceipt);\n    } catch (error) {\n        console.error('Error updating receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to update receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Delete a receipt\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId = 1; // Default system user ID\n        \n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, using default user ID');\n            }\n        }\n\n        // Delete receipt and recalculate invoice status\n        await prisma.$transaction(async (tx) => {\n            // Find the related accounting transaction to reverse it\n            const relatedTransaction = await tx.transaction.findFirst({\n                where: {\n                    reference: existingReceipt.receiptNumber,\n                    type: 'income'\n                },\n                include: { account: true }\n            });\n\n            if (relatedTransaction) {\n                // Reverse the account balance\n                await tx.account.update({\n                    where: { id: relatedTransaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: relatedTransaction.amount\n                        }\n                    }\n                });\n\n                // Delete the accounting transaction\n                await tx.transaction.delete({\n                    where: { id: relatedTransaction.id }\n                });\n            }\n\n            // Delete the receipt\n            await tx.receipt.delete({\n                where: { id }\n            });\n\n            // Recalculate invoice status based on remaining payments with receipts\n            // Only count payments that have receipts (confirmed payments)\n            const totalPayments = await tx.payment.aggregate({\n                where: { \n                    invoiceId: existingReceipt.payment.invoiceId,\n                    receipt: {\n                        isNot: null\n                    }\n                },\n                _sum: { amount: true }\n            });\n\n            const totalPaid = totalPayments._sum.amount || 0;\n\n            // Get invoice total\n            const invoice = await tx.invoice.findUnique({\n                where: { id: existingReceipt.payment.invoiceId },\n                select: { total: true }\n            });\n\n            const invoiceTotal = invoice?.total || 0;\n\n            // Determine the correct status based on remaining payment amount\n            let newStatus = 'pending';\n            if (totalPaid >= invoiceTotal) {\n                newStatus = 'paid';\n            } else if (totalPaid > 0) {\n                newStatus = 'partial';\n            }\n\n            // Update invoice status based on remaining payments\n            await tx.invoice.update({\n                where: { id: existingReceipt.payment.invoiceId },\n                data: { status: newStatus }\n            });\n        });\n\n        // Log the deletion to the audit trail\n        await auditService.softDelete(\n            'Receipt',\n            id,\n            existingReceipt,\n            userId,\n            true // canRecover\n        );\n\n        return NextResponse.json({ success: true });\n    } catch (error) {\n        console.error('Error deleting receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to delete receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Update specific receipt fields (PATCH method for partial updates)\nexport async function PATCH(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const { notes, paymentMethod, accountId } = await request.json();\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { \n                payment: {\n                    include: {\n                        account: true,\n                        customer: true,\n                        invoice: true\n                    }\n                }\n            }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { success: false, message: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId = 1; // Default system user ID\n        \n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, using default user ID');\n            }\n        }\n\n        // Perform updates in a transaction\n        const result = await prisma.$transaction(async (tx) => {\n            // Update the receipt notes\n            const updatedReceipt = await tx.receipt.update({\n                where: { id },\n                data: {\n                    ...(notes !== undefined && { notes })\n                }\n            });\n\n            // Update payment method and account if provided\n            let updatedPayment = existingReceipt.payment;\n            if (paymentMethod !== undefined || accountId !== undefined) {\n                const paymentUpdateData: any = {};\n                \n                if (paymentMethod !== undefined) {\n                    paymentUpdateData.paymentMethod = paymentMethod;\n                }\n                \n                if (accountId !== undefined) {\n                    // Validate the new account exists\n                    const newAccount = await tx.account.findUnique({\n                        where: { id: parseInt(accountId.toString()) }\n                    });\n                    \n                    if (!newAccount) {\n                        throw new Error('Selected account not found');\n                    }\n                    \n                    paymentUpdateData.accountId = parseInt(accountId.toString());\n                    \n                    // If account is changing, we need to adjust balances\n                    if (existingReceipt.payment.accountId !== parseInt(accountId.toString())) {\n                        const paymentAmount = existingReceipt.payment.amount;\n                        \n                        // Remove amount from old account\n                        if (existingReceipt.payment.accountId) {\n                            await tx.account.update({\n                                where: { id: existingReceipt.payment.accountId },\n                                data: {\n                                    balance: {\n                                        decrement: paymentAmount\n                                    }\n                                }\n                            });\n                        }\n                        \n                        // Add amount to new account\n                        await tx.account.update({\n                            where: { id: parseInt(accountId.toString()) },\n                            data: {\n                                balance: {\n                                    increment: paymentAmount\n                                }\n                            }\n                        });\n                        \n                        // Update the accounting transaction\n                        const whereClause: any = {\n                            reference: existingReceipt.receiptNumber,\n                            type: 'income'\n                        };\n                        \n                        if (existingReceipt.payment.accountId !== null) {\n                            whereClause.accountId = existingReceipt.payment.accountId;\n                        }\n                        \n                        const relatedTransaction = await tx.transaction.findFirst({\n                            where: whereClause\n                        });\n                        \n                        if (relatedTransaction && existingReceipt.payment.customer && existingReceipt.payment.invoice) {\n                            await tx.transaction.update({\n                                where: { id: relatedTransaction.id },\n                                data: {\n                                    accountId: parseInt(accountId.toString()),\n                                    description: `Payment received from ${existingReceipt.payment.customer.name} - Invoice ${existingReceipt.payment.invoice.invoiceNumber} (Account Updated)`\n                                }\n                            });\n                        }\n                    }\n                }\n                \n                updatedPayment = await tx.payment.update({\n                    where: { id: existingReceipt.paymentId },\n                    data: paymentUpdateData,\n                    include: {\n                        account: true,\n                        customer: true,\n                        invoice: true\n                    }\n                });\n            }\n\n            // Log the update in audit trail\n            await auditService.logAction({\n                action: 'UPDATE',\n                entity: 'Receipt',\n                entityId: id,\n                details: {\n                    receiptNumber: existingReceipt.receiptNumber,\n                    changes: {\n                        notes: notes !== undefined ? { old: existingReceipt.notes, new: notes } : undefined,\n                        paymentMethod: paymentMethod !== undefined ? { old: existingReceipt.payment.paymentMethod, new: paymentMethod } : undefined,\n                        accountId: accountId !== undefined ? { \n                            old: existingReceipt.payment.accountId, \n                            new: parseInt(accountId.toString()),\n                            oldAccountName: existingReceipt.payment.account?.name,\n                            newAccountName: accountId !== undefined ? (await tx.account.findUnique({ where: { id: parseInt(accountId.toString()) } }))?.name : undefined\n                        } : undefined\n                    }\n                },\n                userId\n            });\n\n            return {\n                ...updatedReceipt,\n                payment: updatedPayment\n            };\n        });\n\n        // Fetch the complete updated receipt with all relations\n        const completeReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true,\n                        account: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Receipt updated successfully',\n            data: completeReceipt\n        });\n    } catch (error) {\n        console.error('Error updating receipt:', error);\n        return NextResponse.json(\n            { success: false, message: error instanceof Error ? error.message : 'Failed to update receipt' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "PUT", "request", "params", "id", "parseInt", "isNaN", "NextResponse", "json", "error", "status", "receipt", "prisma", "findUnique", "where", "include", "payment", "customer", "invoice", "confirmedByUser", "console", "receiptData", "existingReceipt", "updatedReceipt", "update", "data", "receiptDate", "Date", "undefined", "bankName", "accountNumber", "chequeNumber", "transactionId", "notes", "confirmedBy", "token", "headers", "get", "replace", "userId", "decoded", "verifyToken", "warn", "$transaction", "tx", "relatedTransaction", "transaction", "findFirst", "reference", "receiptNumber", "type", "account", "accountId", "balance", "decrement", "amount", "delete", "totalPayments", "aggregate", "invoiceId", "isNot", "_sum", "totalPaid", "select", "total", "invoiceTotal", "newStatus", "auditService", "softDelete", "success", "message", "paymentMethod", "result", "updatedPayment", "paymentUpdateData", "newAccount", "toString", "Error", "paymentAmount", "increment", "whereClause", "description", "name", "invoiceNumber", "paymentId", "logAction", "action", "entity", "entityId", "details", "changes", "old", "new", "oldAccountName", "newAccountName", "completeReceipt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5e010e42fc69a7801016e1ab3ce958e687d61d2c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f1qq8m28t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1qq8m28t();
cov_f1qq8m28t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[0]++;
  cov_f1qq8m28t().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_f1qq8m28t().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[1]++;
    cov_f1qq8m28t().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[2]++;
    cov_f1qq8m28t().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[3]++;
    cov_f1qq8m28t().s[6]++;
    return PATCH;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[4]++;
    cov_f1qq8m28t().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_f1qq8m28t().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_f1qq8m28t().s[9]++, require("../../../../lib/prisma"));
const _auditService =
/* istanbul ignore next */
(cov_f1qq8m28t().s[10]++, require("../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_f1qq8m28t().s[11]++, require("../../../../lib/auth"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[5]++;
  cov_f1qq8m28t().s[12]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[13]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[14]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[0][0]++;
      cov_f1qq8m28t().s[15]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[0][1]++;
    }
    const receipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[16]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true
          }
        },
        confirmedByUser: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[17]++;
    if (!receipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[1][0]++;
      cov_f1qq8m28t().s[18]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[1][1]++;
    }
    cov_f1qq8m28t().s[19]++;
    return _server.NextResponse.json(receipt);
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[20]++;
    console.error("Error fetching receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[21]++;
    return _server.NextResponse.json({
      error: "Failed to fetch receipt"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[6]++;
  cov_f1qq8m28t().s[22]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[23]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[24]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[2][0]++;
      cov_f1qq8m28t().s[25]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[2][1]++;
    }
    const receiptData =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[26]++, await request.json());
    // Check if receipt exists
    const existingReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[27]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[28]++;
    if (!existingReceipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[3][0]++;
      cov_f1qq8m28t().s[29]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[3][1]++;
    }
    // Update receipt
    const updatedReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[30]++, await _prisma.prisma.receipt.update({
      where: {
        id
      },
      data: {
        receiptDate: receiptData.receiptDate ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[4][0]++, new Date(receiptData.receiptDate)) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[4][1]++, undefined),
        bankName: receiptData.bankName !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[5][0]++, receiptData.bankName) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[5][1]++, undefined),
        accountNumber: receiptData.accountNumber !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[6][0]++, receiptData.accountNumber) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[6][1]++, undefined),
        chequeNumber: receiptData.chequeNumber !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[7][0]++, receiptData.chequeNumber) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[7][1]++, undefined),
        transactionId: receiptData.transactionId !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[8][0]++, receiptData.transactionId) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[8][1]++, undefined),
        notes: receiptData.notes !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[9][0]++, receiptData.notes) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[9][1]++, undefined),
        confirmedBy: receiptData.confirmedBy !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[10][0]++, receiptData.confirmedBy) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[10][1]++, undefined)
      },
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true
          }
        },
        confirmedByUser: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[31]++;
    return _server.NextResponse.json(updatedReceipt);
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[32]++;
    console.error("Error updating receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[33]++;
    return _server.NextResponse.json({
      error: "Failed to update receipt"
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[7]++;
  cov_f1qq8m28t().s[34]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[35]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[36]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[11][0]++;
      cov_f1qq8m28t().s[37]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[11][1]++;
    }
    // Check if receipt exists
    const existingReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[38]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[39]++;
    if (!existingReceipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[12][0]++;
      cov_f1qq8m28t().s[40]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[12][1]++;
    }
    // Get user ID from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[41]++, request.headers.get("Authorization")?.replace("Bearer ", ""));
    let userId =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[42]++, 1); // Default system user ID
    /* istanbul ignore next */
    cov_f1qq8m28t().s[43]++;
    if (token) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[13][0]++;
      cov_f1qq8m28t().s[44]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_f1qq8m28t().s[45]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_f1qq8m28t().s[46]++;
        if (
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[15][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[15][1]++, decoded.userId)) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[14][0]++;
          cov_f1qq8m28t().s[47]++;
          userId = decoded.userId;
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[14][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_f1qq8m28t().s[48]++;
        console.warn("Invalid token for audit logging, using default user ID");
      }
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[13][1]++;
    }
    // Delete receipt and recalculate invoice status
    cov_f1qq8m28t().s[49]++;
    await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_f1qq8m28t().f[8]++;
      // Find the related accounting transaction to reverse it
      const relatedTransaction =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[50]++, await tx.transaction.findFirst({
        where: {
          reference: existingReceipt.receiptNumber,
          type: "income"
        },
        include: {
          account: true
        }
      }));
      /* istanbul ignore next */
      cov_f1qq8m28t().s[51]++;
      if (relatedTransaction) {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[16][0]++;
        cov_f1qq8m28t().s[52]++;
        // Reverse the account balance
        await tx.account.update({
          where: {
            id: relatedTransaction.accountId
          },
          data: {
            balance: {
              decrement: relatedTransaction.amount
            }
          }
        });
        // Delete the accounting transaction
        /* istanbul ignore next */
        cov_f1qq8m28t().s[53]++;
        await tx.transaction.delete({
          where: {
            id: relatedTransaction.id
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_f1qq8m28t().b[16][1]++;
      }
      // Delete the receipt
      cov_f1qq8m28t().s[54]++;
      await tx.receipt.delete({
        where: {
          id
        }
      });
      // Recalculate invoice status based on remaining payments with receipts
      // Only count payments that have receipts (confirmed payments)
      const totalPayments =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[55]++, await tx.payment.aggregate({
        where: {
          invoiceId: existingReceipt.payment.invoiceId,
          receipt: {
            isNot: null
          }
        },
        _sum: {
          amount: true
        }
      }));
      const totalPaid =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[56]++,
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[17][0]++, totalPayments._sum.amount) ||
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[17][1]++, 0));
      // Get invoice total
      const invoice =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[57]++, await tx.invoice.findUnique({
        where: {
          id: existingReceipt.payment.invoiceId
        },
        select: {
          total: true
        }
      }));
      const invoiceTotal =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[58]++,
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[18][0]++, invoice?.total) ||
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[18][1]++, 0));
      // Determine the correct status based on remaining payment amount
      let newStatus =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[59]++, "pending");
      /* istanbul ignore next */
      cov_f1qq8m28t().s[60]++;
      if (totalPaid >= invoiceTotal) {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[19][0]++;
        cov_f1qq8m28t().s[61]++;
        newStatus = "paid";
      } else {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[19][1]++;
        cov_f1qq8m28t().s[62]++;
        if (totalPaid > 0) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[20][0]++;
          cov_f1qq8m28t().s[63]++;
          newStatus = "partial";
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[20][1]++;
        }
      }
      // Update invoice status based on remaining payments
      /* istanbul ignore next */
      cov_f1qq8m28t().s[64]++;
      await tx.invoice.update({
        where: {
          id: existingReceipt.payment.invoiceId
        },
        data: {
          status: newStatus
        }
      });
    });
    // Log the deletion to the audit trail
    /* istanbul ignore next */
    cov_f1qq8m28t().s[65]++;
    await _auditService.auditService.softDelete("Receipt", id, existingReceipt, userId, true // canRecover
    );
    /* istanbul ignore next */
    cov_f1qq8m28t().s[66]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[67]++;
    console.error("Error deleting receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[68]++;
    return _server.NextResponse.json({
      error: "Failed to delete receipt"
    }, {
      status: 500
    });
  }
}
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[9]++;
  cov_f1qq8m28t().s[69]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[70]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[71]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[21][0]++;
      cov_f1qq8m28t().s[72]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[21][1]++;
    }
    const {
      notes,
      paymentMethod,
      accountId
    } =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[73]++, await request.json());
    // Check if receipt exists
    const existingReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[74]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: {
          include: {
            account: true,
            customer: true,
            invoice: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[75]++;
    if (!existingReceipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[22][0]++;
      cov_f1qq8m28t().s[76]++;
      return _server.NextResponse.json({
        success: false,
        message: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[22][1]++;
    }
    // Get user ID from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[77]++, request.headers.get("Authorization")?.replace("Bearer ", ""));
    let userId =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[78]++, 1); // Default system user ID
    /* istanbul ignore next */
    cov_f1qq8m28t().s[79]++;
    if (token) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[23][0]++;
      cov_f1qq8m28t().s[80]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_f1qq8m28t().s[81]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_f1qq8m28t().s[82]++;
        if (
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[25][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[25][1]++, decoded.userId)) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[24][0]++;
          cov_f1qq8m28t().s[83]++;
          userId = decoded.userId;
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[24][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_f1qq8m28t().s[84]++;
        console.warn("Invalid token for audit logging, using default user ID");
      }
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[23][1]++;
    }
    // Perform updates in a transaction
    const result =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[85]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_f1qq8m28t().f[10]++;
      // Update the receipt notes
      const updatedReceipt =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[86]++, await tx.receipt.update({
        where: {
          id
        },
        data: {
          ...(
          /* istanbul ignore next */
          (cov_f1qq8m28t().b[26][0]++, notes !== undefined) &&
          /* istanbul ignore next */
          (cov_f1qq8m28t().b[26][1]++, {
            notes
          }))
        }
      }));
      // Update payment method and account if provided
      let updatedPayment =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[87]++, existingReceipt.payment);
      /* istanbul ignore next */
      cov_f1qq8m28t().s[88]++;
      if (
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[28][0]++, paymentMethod !== undefined) ||
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[28][1]++, accountId !== undefined)) {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[27][0]++;
        const paymentUpdateData =
        /* istanbul ignore next */
        (cov_f1qq8m28t().s[89]++, {});
        /* istanbul ignore next */
        cov_f1qq8m28t().s[90]++;
        if (paymentMethod !== undefined) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[29][0]++;
          cov_f1qq8m28t().s[91]++;
          paymentUpdateData.paymentMethod = paymentMethod;
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[29][1]++;
        }
        cov_f1qq8m28t().s[92]++;
        if (accountId !== undefined) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[30][0]++;
          // Validate the new account exists
          const newAccount =
          /* istanbul ignore next */
          (cov_f1qq8m28t().s[93]++, await tx.account.findUnique({
            where: {
              id: parseInt(accountId.toString())
            }
          }));
          /* istanbul ignore next */
          cov_f1qq8m28t().s[94]++;
          if (!newAccount) {
            /* istanbul ignore next */
            cov_f1qq8m28t().b[31][0]++;
            cov_f1qq8m28t().s[95]++;
            throw new Error("Selected account not found");
          } else
          /* istanbul ignore next */
          {
            cov_f1qq8m28t().b[31][1]++;
          }
          cov_f1qq8m28t().s[96]++;
          paymentUpdateData.accountId = parseInt(accountId.toString());
          // If account is changing, we need to adjust balances
          /* istanbul ignore next */
          cov_f1qq8m28t().s[97]++;
          if (existingReceipt.payment.accountId !== parseInt(accountId.toString())) {
            /* istanbul ignore next */
            cov_f1qq8m28t().b[32][0]++;
            const paymentAmount =
            /* istanbul ignore next */
            (cov_f1qq8m28t().s[98]++, existingReceipt.payment.amount);
            // Remove amount from old account
            /* istanbul ignore next */
            cov_f1qq8m28t().s[99]++;
            if (existingReceipt.payment.accountId) {
              /* istanbul ignore next */
              cov_f1qq8m28t().b[33][0]++;
              cov_f1qq8m28t().s[100]++;
              await tx.account.update({
                where: {
                  id: existingReceipt.payment.accountId
                },
                data: {
                  balance: {
                    decrement: paymentAmount
                  }
                }
              });
            } else
            /* istanbul ignore next */
            {
              cov_f1qq8m28t().b[33][1]++;
            }
            // Add amount to new account
            cov_f1qq8m28t().s[101]++;
            await tx.account.update({
              where: {
                id: parseInt(accountId.toString())
              },
              data: {
                balance: {
                  increment: paymentAmount
                }
              }
            });
            // Update the accounting transaction
            const whereClause =
            /* istanbul ignore next */
            (cov_f1qq8m28t().s[102]++, {
              reference: existingReceipt.receiptNumber,
              type: "income"
            });
            /* istanbul ignore next */
            cov_f1qq8m28t().s[103]++;
            if (existingReceipt.payment.accountId !== null) {
              /* istanbul ignore next */
              cov_f1qq8m28t().b[34][0]++;
              cov_f1qq8m28t().s[104]++;
              whereClause.accountId = existingReceipt.payment.accountId;
            } else
            /* istanbul ignore next */
            {
              cov_f1qq8m28t().b[34][1]++;
            }
            const relatedTransaction =
            /* istanbul ignore next */
            (cov_f1qq8m28t().s[105]++, await tx.transaction.findFirst({
              where: whereClause
            }));
            /* istanbul ignore next */
            cov_f1qq8m28t().s[106]++;
            if (
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[36][0]++, relatedTransaction) &&
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[36][1]++, existingReceipt.payment.customer) &&
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[36][2]++, existingReceipt.payment.invoice)) {
              /* istanbul ignore next */
              cov_f1qq8m28t().b[35][0]++;
              cov_f1qq8m28t().s[107]++;
              await tx.transaction.update({
                where: {
                  id: relatedTransaction.id
                },
                data: {
                  accountId: parseInt(accountId.toString()),
                  description: `Payment received from ${existingReceipt.payment.customer.name} - Invoice ${existingReceipt.payment.invoice.invoiceNumber} (Account Updated)`
                }
              });
            } else
            /* istanbul ignore next */
            {
              cov_f1qq8m28t().b[35][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_f1qq8m28t().b[32][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[30][1]++;
        }
        cov_f1qq8m28t().s[108]++;
        updatedPayment = await tx.payment.update({
          where: {
            id: existingReceipt.paymentId
          },
          data: paymentUpdateData,
          include: {
            account: true,
            customer: true,
            invoice: true
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_f1qq8m28t().b[27][1]++;
      }
      // Log the update in audit trail
      cov_f1qq8m28t().s[109]++;
      await _auditService.auditService.logAction({
        action: "UPDATE",
        entity: "Receipt",
        entityId: id,
        details: {
          receiptNumber: existingReceipt.receiptNumber,
          changes: {
            notes: notes !== undefined ?
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[37][0]++, {
              old: existingReceipt.notes,
              new: notes
            }) :
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[37][1]++, undefined),
            paymentMethod: paymentMethod !== undefined ?
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[38][0]++, {
              old: existingReceipt.payment.paymentMethod,
              new: paymentMethod
            }) :
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[38][1]++, undefined),
            accountId: accountId !== undefined ?
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[39][0]++, {
              old: existingReceipt.payment.accountId,
              new: parseInt(accountId.toString()),
              oldAccountName: existingReceipt.payment.account?.name,
              newAccountName: accountId !== undefined ?
              /* istanbul ignore next */
              (cov_f1qq8m28t().b[40][0]++, (await tx.account.findUnique({
                where: {
                  id: parseInt(accountId.toString())
                }
              }))?.name) :
              /* istanbul ignore next */
              (cov_f1qq8m28t().b[40][1]++, undefined)
            }) :
            /* istanbul ignore next */
            (cov_f1qq8m28t().b[39][1]++, undefined)
          }
        },
        userId
      });
      /* istanbul ignore next */
      cov_f1qq8m28t().s[110]++;
      return {
        ...updatedReceipt,
        payment: updatedPayment
      };
    }));
    // Fetch the complete updated receipt with all relations
    const completeReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[111]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true,
            account: true
          }
        },
        confirmedByUser: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[112]++;
    return _server.NextResponse.json({
      success: true,
      message: "Receipt updated successfully",
      data: completeReceipt
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[113]++;
    console.error("Error updating receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[114]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[41][0]++, error.message) :
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[41][1]++, "Failed to update receipt")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUxFVEUiLCJjb3ZfZjFxcThtMjh0IiwiZiIsInMiLCJHRVQiLCJQQVRDSCIsIlBVVCIsInJlcXVlc3QiLCJwYXJhbXMiLCJpZCIsInBhcnNlSW50IiwiaXNOYU4iLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInJlY2VpcHQiLCJfcHJpc21hIiwicHJpc21hIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaW5jbHVkZSIsInBheW1lbnQiLCJjdXN0b21lciIsImludm9pY2UiLCJjb25maXJtZWRCeVVzZXIiLCJjb25zb2xlIiwicmVjZWlwdERhdGEiLCJleGlzdGluZ1JlY2VpcHQiLCJ1cGRhdGVkUmVjZWlwdCIsInVwZGF0ZSIsImRhdGEiLCJyZWNlaXB0RGF0ZSIsIkRhdGUiLCJ1bmRlZmluZWQiLCJiYW5rTmFtZSIsImFjY291bnROdW1iZXIiLCJjaGVxdWVOdW1iZXIiLCJ0cmFuc2FjdGlvbklkIiwibm90ZXMiLCJjb25maXJtZWRCeSIsInRva2VuIiwiaGVhZGVycyIsImdldCIsInJlcGxhY2UiLCJ1c2VySWQiLCJkZWNvZGVkIiwiX2F1dGgiLCJ2ZXJpZnlUb2tlbiIsIndhcm4iLCIkdHJhbnNhY3Rpb24iLCJ0eCIsInJlbGF0ZWRUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiZmluZEZpcnN0IiwicmVmZXJlbmNlIiwicmVjZWlwdE51bWJlciIsInR5cGUiLCJhY2NvdW50IiwiYWNjb3VudElkIiwiYmFsYW5jZSIsImRlY3JlbWVudCIsImFtb3VudCIsImRlbGV0ZSIsInRvdGFsUGF5bWVudHMiLCJhZ2dyZWdhdGUiLCJpbnZvaWNlSWQiLCJpc05vdCIsIl9zdW0iLCJ0b3RhbFBhaWQiLCJzZWxlY3QiLCJ0b3RhbCIsImludm9pY2VUb3RhbCIsIm5ld1N0YXR1cyIsIl9hdWRpdFNlcnZpY2UiLCJhdWRpdFNlcnZpY2UiLCJzb2Z0RGVsZXRlIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJwYXltZW50TWV0aG9kIiwicmVzdWx0IiwidXBkYXRlZFBheW1lbnQiLCJwYXltZW50VXBkYXRlRGF0YSIsIm5ld0FjY291bnQiLCJ0b1N0cmluZyIsIkVycm9yIiwicGF5bWVudEFtb3VudCIsImluY3JlbWVudCIsIndoZXJlQ2xhdXNlIiwiZGVzY3JpcHRpb24iLCJuYW1lIiwiaW52b2ljZU51bWJlciIsInBheW1lbnRJZCIsImxvZ0FjdGlvbiIsImFjdGlvbiIsImVudGl0eSIsImVudGl0eUlkIiwiZGV0YWlscyIsImNoYW5nZXMiLCJvbGQiLCJuZXciLCJvbGRBY2NvdW50TmFtZSIsIm5ld0FjY291bnROYW1lIiwiY29tcGxldGVSZWNlaXB0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9yZWNlaXB0cy9baWRdL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyBhdWRpdFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2F1ZGl0U2VydmljZSc7XG5pbXBvcnQgeyB2ZXJpZnlUb2tlbiB9IGZyb20gJ0AvbGliL2F1dGgnO1xuXG4vLyBHZXQgYSBzaW5nbGUgcmVjZWlwdCBieSBJRFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIHsgcGFyYW1zIH06IHsgcGFyYW1zOiB7IGlkOiBzdHJpbmcgfSB9XG4pIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50KHBhcmFtcy5pZCk7XG5cbiAgICAgICAgaWYgKGlzTmFOKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIHJlY2VpcHQgSUQnIH0sXG4gICAgICAgICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHByaXNtYS5yZWNlaXB0LmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICBwYXltZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maXJtZWRCeVVzZXI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFyZWNlaXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgeyBlcnJvcjogJ1JlY2VpcHQgbm90IGZvdW5kJyB9LFxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZWNlaXB0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyByZWNlaXB0OicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCByZWNlaXB0JyB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vLyBVcGRhdGUgYSByZWNlaXB0XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUFVUKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IHsgaWQ6IHN0cmluZyB9IH1cbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQocGFyYW1zLmlkKTtcblxuICAgICAgICBpZiAoaXNOYU4oaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgeyBlcnJvcjogJ0ludmFsaWQgcmVjZWlwdCBJRCcgfSxcbiAgICAgICAgICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWNlaXB0RGF0YSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHJlY2VpcHQgZXhpc3RzXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUmVjZWlwdCA9IGF3YWl0IHByaXNtYS5yZWNlaXB0LmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHsgcGF5bWVudDogdHJ1ZSB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghZXhpc3RpbmdSZWNlaXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgeyBlcnJvcjogJ1JlY2VpcHQgbm90IGZvdW5kJyB9LFxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSByZWNlaXB0XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRSZWNlaXB0ID0gYXdhaXQgcHJpc21hLnJlY2VpcHQudXBkYXRlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgcmVjZWlwdERhdGU6IHJlY2VpcHREYXRhLnJlY2VpcHREYXRlID8gbmV3IERhdGUocmVjZWlwdERhdGEucmVjZWlwdERhdGUpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGJhbmtOYW1lOiByZWNlaXB0RGF0YS5iYW5rTmFtZSAhPT0gdW5kZWZpbmVkID8gcmVjZWlwdERhdGEuYmFua05hbWUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYWNjb3VudE51bWJlcjogcmVjZWlwdERhdGEuYWNjb3VudE51bWJlciAhPT0gdW5kZWZpbmVkID8gcmVjZWlwdERhdGEuYWNjb3VudE51bWJlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjaGVxdWVOdW1iZXI6IHJlY2VpcHREYXRhLmNoZXF1ZU51bWJlciAhPT0gdW5kZWZpbmVkID8gcmVjZWlwdERhdGEuY2hlcXVlTnVtYmVyIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWQ6IHJlY2VpcHREYXRhLnRyYW5zYWN0aW9uSWQgIT09IHVuZGVmaW5lZCA/IHJlY2VpcHREYXRhLnRyYW5zYWN0aW9uSWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbm90ZXM6IHJlY2VpcHREYXRhLm5vdGVzICE9PSB1bmRlZmluZWQgPyByZWNlaXB0RGF0YS5ub3RlcyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb25maXJtZWRCeTogcmVjZWlwdERhdGEuY29uZmlybWVkQnkgIT09IHVuZGVmaW5lZCA/IHJlY2VpcHREYXRhLmNvbmZpcm1lZEJ5IDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgIHBheW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpcm1lZEJ5VXNlcjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24odXBkYXRlZFJlY2VpcHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHJlY2VpcHQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIHVwZGF0ZSByZWNlaXB0JyB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vLyBEZWxldGUgYSByZWNlaXB0XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IHsgaWQ6IHN0cmluZyB9IH1cbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQocGFyYW1zLmlkKTtcblxuICAgICAgICBpZiAoaXNOYU4oaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgeyBlcnJvcjogJ0ludmFsaWQgcmVjZWlwdCBJRCcgfSxcbiAgICAgICAgICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiByZWNlaXB0IGV4aXN0c1xuICAgICAgICBjb25zdCBleGlzdGluZ1JlY2VpcHQgPSBhd2FpdCBwcmlzbWEucmVjZWlwdC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7IHBheW1lbnQ6IHRydWUgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWV4aXN0aW5nUmVjZWlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgIHsgZXJyb3I6ICdSZWNlaXB0IG5vdCBmb3VuZCcgfSxcbiAgICAgICAgICAgICAgICB7IHN0YXR1czogNDA0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdXNlciBJRCBmcm9tIHRva2VuIGZvciBhdWRpdCBsb2dnaW5nXG4gICAgICAgIGNvbnN0IHRva2VuID0gcmVxdWVzdC5oZWFkZXJzLmdldCgnQXV0aG9yaXphdGlvbicpPy5yZXBsYWNlKCdCZWFyZXIgJywgJycpO1xuICAgICAgICBsZXQgdXNlcklkID0gMTsgLy8gRGVmYXVsdCBzeXN0ZW0gdXNlciBJRFxuICAgICAgICBcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCB2ZXJpZnlUb2tlbih0b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKGRlY29kZWQgJiYgZGVjb2RlZC51c2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkID0gZGVjb2RlZC51c2VySWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgdG9rZW4gZm9yIGF1ZGl0IGxvZ2dpbmcsIHVzaW5nIGRlZmF1bHQgdXNlciBJRCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlIHJlY2VpcHQgYW5kIHJlY2FsY3VsYXRlIGludm9pY2Ugc3RhdHVzXG4gICAgICAgIGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSByZWxhdGVkIGFjY291bnRpbmcgdHJhbnNhY3Rpb24gdG8gcmV2ZXJzZSBpdFxuICAgICAgICAgICAgY29uc3QgcmVsYXRlZFRyYW5zYWN0aW9uID0gYXdhaXQgdHgudHJhbnNhY3Rpb24uZmluZEZpcnN0KHtcbiAgICAgICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2U6IGV4aXN0aW5nUmVjZWlwdC5yZWNlaXB0TnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5jb21lJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5jbHVkZTogeyBhY2NvdW50OiB0cnVlIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocmVsYXRlZFRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV2ZXJzZSB0aGUgYWNjb3VudCBiYWxhbmNlXG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcmVsYXRlZFRyYW5zYWN0aW9uLmFjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVtZW50OiByZWxhdGVkVHJhbnNhY3Rpb24uYW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgYWNjb3VudGluZyB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIGF3YWl0IHR4LnRyYW5zYWN0aW9uLmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiByZWxhdGVkVHJhbnNhY3Rpb24uaWQgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWxldGUgdGhlIHJlY2VpcHRcbiAgICAgICAgICAgIGF3YWl0IHR4LnJlY2VpcHQuZGVsZXRlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZCB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgaW52b2ljZSBzdGF0dXMgYmFzZWQgb24gcmVtYWluaW5nIHBheW1lbnRzIHdpdGggcmVjZWlwdHNcbiAgICAgICAgICAgIC8vIE9ubHkgY291bnQgcGF5bWVudHMgdGhhdCBoYXZlIHJlY2VpcHRzIChjb25maXJtZWQgcGF5bWVudHMpXG4gICAgICAgICAgICBjb25zdCB0b3RhbFBheW1lbnRzID0gYXdhaXQgdHgucGF5bWVudC5hZ2dyZWdhdGUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IFxuICAgICAgICAgICAgICAgICAgICBpbnZvaWNlSWQ6IGV4aXN0aW5nUmVjZWlwdC5wYXltZW50Lmludm9pY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWlwdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNOb3Q6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX3N1bTogeyBhbW91bnQ6IHRydWUgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUGFpZCA9IHRvdGFsUGF5bWVudHMuX3N1bS5hbW91bnQgfHwgMDtcblxuICAgICAgICAgICAgLy8gR2V0IGludm9pY2UgdG90YWxcbiAgICAgICAgICAgIGNvbnN0IGludm9pY2UgPSBhd2FpdCB0eC5pbnZvaWNlLmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBleGlzdGluZ1JlY2VpcHQucGF5bWVudC5pbnZvaWNlSWQgfSxcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHsgdG90YWw6IHRydWUgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGludm9pY2VUb3RhbCA9IGludm9pY2U/LnRvdGFsIHx8IDA7XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgY29ycmVjdCBzdGF0dXMgYmFzZWQgb24gcmVtYWluaW5nIHBheW1lbnQgYW1vdW50XG4gICAgICAgICAgICBsZXQgbmV3U3RhdHVzID0gJ3BlbmRpbmcnO1xuICAgICAgICAgICAgaWYgKHRvdGFsUGFpZCA+PSBpbnZvaWNlVG90YWwpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0dXMgPSAncGFpZCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsUGFpZCA+IDApIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0dXMgPSAncGFydGlhbCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBpbnZvaWNlIHN0YXR1cyBiYXNlZCBvbiByZW1haW5pbmcgcGF5bWVudHNcbiAgICAgICAgICAgIGF3YWl0IHR4Lmludm9pY2UudXBkYXRlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuaW52b2ljZUlkIH0sXG4gICAgICAgICAgICAgICAgZGF0YTogeyBzdGF0dXM6IG5ld1N0YXR1cyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTG9nIHRoZSBkZWxldGlvbiB0byB0aGUgYXVkaXQgdHJhaWxcbiAgICAgICAgYXdhaXQgYXVkaXRTZXJ2aWNlLnNvZnREZWxldGUoXG4gICAgICAgICAgICAnUmVjZWlwdCcsXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGV4aXN0aW5nUmVjZWlwdCxcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIHRydWUgLy8gY2FuUmVjb3ZlclxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgcmVjZWlwdDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZGVsZXRlIHJlY2VpcHQnIH0sXG4gICAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbi8vIFVwZGF0ZSBzcGVjaWZpYyByZWNlaXB0IGZpZWxkcyAoUEFUQ0ggbWV0aG9kIGZvciBwYXJ0aWFsIHVwZGF0ZXMpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUEFUQ0goXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICB7IHBhcmFtcyB9OiB7IHBhcmFtczogeyBpZDogc3RyaW5nIH0gfVxuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChwYXJhbXMuaWQpO1xuXG4gICAgICAgIGlmIChpc05hTihpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnSW52YWxpZCByZWNlaXB0IElEJyB9LFxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbm90ZXMsIHBheW1lbnRNZXRob2QsIGFjY291bnRJZCB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgcmVjZWlwdCBleGlzdHNcbiAgICAgICAgY29uc3QgZXhpc3RpbmdSZWNlaXB0ID0gYXdhaXQgcHJpc21hLnJlY2VpcHQuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZCB9LFxuICAgICAgICAgICAgaW5jbHVkZTogeyBcbiAgICAgICAgICAgICAgICBwYXltZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2U6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFleGlzdGluZ1JlY2VpcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnUmVjZWlwdCBub3QgZm91bmQnIH0sXG4gICAgICAgICAgICAgICAgeyBzdGF0dXM6IDQwNCB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHVzZXIgSUQgZnJvbSB0b2tlbiBmb3IgYXVkaXQgbG9nZ2luZ1xuICAgICAgICBjb25zdCB0b2tlbiA9IHJlcXVlc3QuaGVhZGVycy5nZXQoJ0F1dGhvcml6YXRpb24nKT8ucmVwbGFjZSgnQmVhcmVyICcsICcnKTtcbiAgICAgICAgbGV0IHVzZXJJZCA9IDE7IC8vIERlZmF1bHQgc3lzdGVtIHVzZXIgSURcbiAgICAgICAgXG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChkZWNvZGVkICYmIGRlY29kZWQudXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZCA9IGRlY29kZWQudXNlcklkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHRva2VuIGZvciBhdWRpdCBsb2dnaW5nLCB1c2luZyBkZWZhdWx0IHVzZXIgSUQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBlcmZvcm0gdXBkYXRlcyBpbiBhIHRyYW5zYWN0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJlY2VpcHQgbm90ZXNcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRSZWNlaXB0ID0gYXdhaXQgdHgucmVjZWlwdC51cGRhdGUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAuLi4obm90ZXMgIT09IHVuZGVmaW5lZCAmJiB7IG5vdGVzIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwYXltZW50IG1ldGhvZCBhbmQgYWNjb3VudCBpZiBwcm92aWRlZFxuICAgICAgICAgICAgbGV0IHVwZGF0ZWRQYXltZW50ID0gZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQ7XG4gICAgICAgICAgICBpZiAocGF5bWVudE1ldGhvZCAhPT0gdW5kZWZpbmVkIHx8IGFjY291bnRJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bWVudFVwZGF0ZURhdGE6IGFueSA9IHt9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChwYXltZW50TWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudFVwZGF0ZURhdGEucGF5bWVudE1ldGhvZCA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgbmV3IGFjY291bnQgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjY291bnQgPSBhd2FpdCB0eC5hY2NvdW50LmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdBY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdGVkIGFjY291bnQgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRVcGRhdGVEYXRhLmFjY291bnRJZCA9IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGFjY291bnQgaXMgY2hhbmdpbmcsIHdlIG5lZWQgdG8gYWRqdXN0IGJhbGFuY2VzXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1JlY2VpcHQucGF5bWVudC5hY2NvdW50SWQgIT09IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bWVudEFtb3VudCA9IGV4aXN0aW5nUmVjZWlwdC5wYXltZW50LmFtb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFtb3VudCBmcm9tIG9sZCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuYWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuYWNjb3VudElkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNyZW1lbnQ6IHBheW1lbnRBbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYW1vdW50IHRvIG5ldyBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50OiBwYXltZW50QW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBhY2NvdW50aW5nIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aGVyZUNsYXVzZTogYW55ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogZXhpc3RpbmdSZWNlaXB0LnJlY2VpcHROdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luY29tZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1JlY2VpcHQucGF5bWVudC5hY2NvdW50SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZUNsYXVzZS5hY2NvdW50SWQgPSBleGlzdGluZ1JlY2VpcHQucGF5bWVudC5hY2NvdW50SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0ZWRUcmFuc2FjdGlvbiA9IGF3YWl0IHR4LnRyYW5zYWN0aW9uLmZpbmRGaXJzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHdoZXJlQ2xhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbGF0ZWRUcmFuc2FjdGlvbiAmJiBleGlzdGluZ1JlY2VpcHQucGF5bWVudC5jdXN0b21lciAmJiBleGlzdGluZ1JlY2VpcHQucGF5bWVudC5pbnZvaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdHgudHJhbnNhY3Rpb24udXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHJlbGF0ZWRUcmFuc2FjdGlvbi5pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQ6IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgUGF5bWVudCByZWNlaXZlZCBmcm9tICR7ZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuY3VzdG9tZXIubmFtZX0gLSBJbnZvaWNlICR7ZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuaW52b2ljZS5pbnZvaWNlTnVtYmVyfSAoQWNjb3VudCBVcGRhdGVkKWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHVwZGF0ZWRQYXltZW50ID0gYXdhaXQgdHgucGF5bWVudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogZXhpc3RpbmdSZWNlaXB0LnBheW1lbnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXltZW50VXBkYXRlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvZyB0aGUgdXBkYXRlIGluIGF1ZGl0IHRyYWlsXG4gICAgICAgICAgICBhd2FpdCBhdWRpdFNlcnZpY2UubG9nQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdVUERBVEUnLFxuICAgICAgICAgICAgICAgIGVudGl0eTogJ1JlY2VpcHQnLFxuICAgICAgICAgICAgICAgIGVudGl0eUlkOiBpZCxcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHROdW1iZXI6IGV4aXN0aW5nUmVjZWlwdC5yZWNlaXB0TnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3Rlczogbm90ZXMgIT09IHVuZGVmaW5lZCA/IHsgb2xkOiBleGlzdGluZ1JlY2VpcHQubm90ZXMsIG5ldzogbm90ZXMgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2Q6IHBheW1lbnRNZXRob2QgIT09IHVuZGVmaW5lZCA/IHsgb2xkOiBleGlzdGluZ1JlY2VpcHQucGF5bWVudC5wYXltZW50TWV0aG9kLCBuZXc6IHBheW1lbnRNZXRob2QgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRJZDogYWNjb3VudElkICE9PSB1bmRlZmluZWQgPyB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZDogZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuYWNjb3VudElkLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXc6IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRBY2NvdW50TmFtZTogZXhpc3RpbmdSZWNlaXB0LnBheW1lbnQuYWNjb3VudD8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdBY2NvdW50TmFtZTogYWNjb3VudElkICE9PSB1bmRlZmluZWQgPyAoYXdhaXQgdHguYWNjb3VudC5maW5kVW5pcXVlKHsgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGFjY291bnRJZC50b1N0cmluZygpKSB9IH0pKT8ubmFtZSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1c2VySWRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnVwZGF0ZWRSZWNlaXB0LFxuICAgICAgICAgICAgICAgIHBheW1lbnQ6IHVwZGF0ZWRQYXltZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGZXRjaCB0aGUgY29tcGxldGUgdXBkYXRlZCByZWNlaXB0IHdpdGggYWxsIHJlbGF0aW9uc1xuICAgICAgICBjb25zdCBjb21wbGV0ZVJlY2VpcHQgPSBhd2FpdCBwcmlzbWEucmVjZWlwdC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgcGF5bWVudDoge1xuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpcm1lZEJ5VXNlcjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdSZWNlaXB0IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgICAgIGRhdGE6IGNvbXBsZXRlUmVjZWlwdFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyByZWNlaXB0OicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHVwZGF0ZSByZWNlaXB0JyB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQWtIc0JBLE1BQU0sV0FBQUEsQ0FBQTtJQUFBO0lBQUFDLGFBQUEsR0FBQUMsQ0FBQTtJQUFBRCxhQUFBLEdBQUFFLENBQUE7V0FBTkgsTUFBQTs7RUE1R0FJLEdBQUcsV0FBQUEsQ0FBQTtJQUFBO0lBQUFI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