{"version":3,"names":["cov_ql67exqxm","actualCoverage","s","QueryProvider","f","queryKeys","children","queryClient","_react","useState","_reactquery","QueryClient","defaultOptions","queries","staleTime","gcTime","retry","failureCount","error","b","status","refetchOnWindowFocus","refetchOnReconnect","mutations","_jsxruntime","jsxs","QueryClientProvider","client","process","env","NODE_ENV","jsx","_reactquerydevtools","ReactQueryDevtools","initialIsOpen","inventory","inventoryList","filters","inventoryItem","id","products","productsList","product","suppliers","suppliersList","supplier","customers","customersList","customer","invoices","invoicesList","invoice","purchaseInvoices","purchaseInvoicesList","purchaseInvoice","categories","categoriesList","shops","shopsList","shop","dashboard","dashboardMetrics"],"sources":["/Users/sachin/Documents/md-sports-/src/context/QueryProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\ninterface QueryProviderProps {\n  children: React.ReactNode;\n}\n\nexport function QueryProvider({ children }: QueryProviderProps) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // Stale time: how long data is considered fresh\n            staleTime: 1000 * 60 * 5, // 5 minutes\n            // Cache time: how long data stays in cache after component unmounts\n            gcTime: 1000 * 60 * 10, // 10 minutes\n            // Retry failed requests\n            retry: (failureCount, error: any) => {\n              // Don't retry on 4xx errors\n              if (error?.status >= 400 && error?.status < 500) {\n                return false;\n              }\n              // Retry up to 3 times for other errors\n              return failureCount < 3;\n            },\n            // Refetch on window focus for critical data\n            refetchOnWindowFocus: false,\n            // Refetch on reconnect\n            refetchOnReconnect: true,\n          },\n          mutations: {\n            // Retry failed mutations\n            retry: 1,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {process.env.NODE_ENV === 'development' && (\n        <ReactQueryDevtools initialIsOpen={false} />\n      )}\n    </QueryClientProvider>\n  );\n}\n\n// Query keys for consistent cache management\nexport const queryKeys = {\n  // Inventory\n  inventory: ['inventory'] as const,\n  inventoryList: (filters?: any) => ['inventory', 'list', filters] as const,\n  inventoryItem: (id: string) => ['inventory', 'item', id] as const,\n\n  // Products\n  products: ['products'] as const,\n  productsList: (filters?: any) => ['products', 'list', filters] as const,\n  product: (id: string) => ['products', 'item', id] as const,\n\n  // Suppliers\n  suppliers: ['suppliers'] as const,\n  suppliersList: (filters?: any) => ['suppliers', 'list', filters] as const,\n  supplier: (id: string) => ['suppliers', 'item', id] as const,\n\n  // Customers\n  customers: ['customers'] as const,\n  customersList: (filters?: any) => ['customers', 'list', filters] as const,\n  customer: (id: string) => ['customers', 'item', id] as const,\n\n  // Invoices\n  invoices: ['invoices'] as const,\n  invoicesList: (filters?: any) => ['invoices', 'list', filters] as const,\n  invoice: (id: string) => ['invoices', 'item', id] as const,\n\n  // Purchase Invoices\n  purchaseInvoices: ['purchase-invoices'] as const,\n  purchaseInvoicesList: (filters?: any) => ['purchase-invoices', 'list', filters] as const,\n  purchaseInvoice: (id: string) => ['purchase-invoices', 'item', id] as const,\n\n  // Categories\n  categories: ['categories'] as const,\n  categoriesList: (filters?: any) => ['categories', 'list', filters] as const,\n\n  // Shops\n  shops: ['shops'] as const,\n  shopsList: (filters?: any) => ['shops', 'list', filters] as const,\n  shop: (id: string) => ['shops', 'item', id] as const,\n\n  // Dashboard\n  dashboard: ['dashboard'] as const,\n  dashboardMetrics: ['dashboard', 'metrics'] as const,\n} as const;"],"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","ignoreList":[]}