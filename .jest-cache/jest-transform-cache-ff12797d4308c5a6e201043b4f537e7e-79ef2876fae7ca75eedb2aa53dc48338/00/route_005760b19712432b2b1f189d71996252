c842b40ebf27be512ae54a8e7322c659
"use strict";

/* istanbul ignore next */
function cov_2olsk8ksg4() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/product-performance/route.ts";
  var hash = "c84d142d9b11f10e4e0cb459cbd246fe770b0ba0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/product-performance/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "7": {
        start: {
          line: 16,
          column: 32
        },
        end: {
          line: 16,
          column: 78
        }
      },
      "8": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 98
        }
      },
      "9": {
        start: {
          line: 18,
          column: 29
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "11": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "12": {
        start: {
          line: 55,
          column: 35
        },
        end: {
          line: 55,
          column: 37
        }
      },
      "13": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "14": {
        start: {
          line: 57,
          column: 36
        },
        end: {
          line: 57,
          column: 61
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "16": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 67,
          column: 18
        }
      },
      "17": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "18": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 79
        }
      },
      "19": {
        start: {
          line: 73,
          column: 48
        },
        end: {
          line: 73,
          column: 50
        }
      },
      "20": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "21": {
        start: {
          line: 75,
          column: 36
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "22": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "23": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "24": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 84
        }
      },
      "25": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 108
        }
      },
      "26": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 112
        }
      },
      "27": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "28": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 116
        }
      },
      "29": {
        start: {
          line: 90,
          column: 75
        },
        end: {
          line: 90,
          column: 114
        }
      },
      "30": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 134
        }
      },
      "31": {
        start: {
          line: 93,
          column: 90
        },
        end: {
          line: 93,
          column: 133
        }
      },
      "32": {
        start: {
          line: 94,
          column: 36
        },
        end: {
          line: 94,
          column: 101
        }
      },
      "33": {
        start: {
          line: 94,
          column: 69
        },
        end: {
          line: 94,
          column: 97
        }
      },
      "34": {
        start: {
          line: 95,
          column: 41
        },
        end: {
          line: 95,
          column: 109
        }
      },
      "35": {
        start: {
          line: 95,
          column: 74
        },
        end: {
          line: 95,
          column: 105
        }
      },
      "36": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "37": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 75
        }
      },
      "38": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 56,
            column: 30
          }
        },
        loc: {
          start: {
            line: 56,
            column: 37
          },
          end: {
            line: 71,
            column: 9
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 50
          },
          end: {
            line: 74,
            column: 51
          }
        },
        loc: {
          start: {
            line: 74,
            column: 61
          },
          end: {
            line: 87,
            column: 9
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 90,
            column: 67
          },
          end: {
            line: 90,
            column: 68
          }
        },
        loc: {
          start: {
            line: 90,
            column: 75
          },
          end: {
            line: 90,
            column: 114
          }
        },
        line: 90
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 82
          },
          end: {
            line: 93,
            column: 83
          }
        },
        loc: {
          start: {
            line: 93,
            column: 90
          },
          end: {
            line: 93,
            column: 133
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 94,
            column: 57
          },
          end: {
            line: 94,
            column: 58
          }
        },
        loc: {
          start: {
            line: 94,
            column: 69
          },
          end: {
            line: 94,
            column: 97
          }
        },
        line: 94
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 62
          },
          end: {
            line: 95,
            column: 63
          }
        },
        loc: {
          start: {
            line: 95,
            column: 74
          },
          end: {
            line: 95,
            column: 105
          }
        },
        line: 95
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 61
          }
        }, {
          start: {
            line: 64,
            column: 65
          },
          end: {
            line: 64,
            column: 80
          }
        }],
        line: 64
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/product-performance/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const invoiceItems = await prisma.invoiceItem.findMany({\n            where: {\n                invoice: {\n                    status: 'paid', // Consider only paid invoices for sales performance\n                    createdAt: {\n                        gte: firstDayOfMonth,\n                        lte: lastDayOfMonth,\n                    },\n                },\n            },\n            include: {\n                product: {\n                    include: {\n                        category: true, // Include category information\n                    },\n                },\n                invoice: true, // To confirm invoice date and status if needed for double check\n            },\n        });\n\n        if (invoiceItems.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [], // Will be an array of categories, each with a products array\n                summary: {\n                    month: now.toLocaleString('default', { month: 'long' }),\n                    year: now.getFullYear(),\n                    overallTotalRevenue: 0,\n                    overallTotalProductsSold: 0,\n                    numberOfCategoriesWithSales: 0\n                },\n                generatedAt: new Date().toISOString(),\n                message: 'No sales data found for products in the current month.'\n            });\n        }\n\n        // Aggregate data by product\n        const productPerformance: Record<string, {\n            productId: number;\n            productName: string;\n            sku: string | null;\n            categoryId: number | null;\n            categoryName: string;\n            totalQuantitySold: number;\n            totalSalesAmount: number;\n        }> = {};\n\n        invoiceItems.forEach(item => {\n            const productIdString = item.productId.toString(); // Use string for object key\n            if (!productPerformance[productIdString]) {\n                productPerformance[productIdString] = {\n                    productId: item.productId,\n                    productName: item.product.name,\n                    sku: item.product.sku,\n                    categoryId: item.product.categoryId,\n                    categoryName: item.product.category?.name || 'Uncategorized',\n                    totalQuantitySold: 0,\n                    totalSalesAmount: 0,\n                };\n            }\n            productPerformance[productIdString].totalQuantitySold += item.quantity;\n            productPerformance[productIdString].totalSalesAmount += item.total;\n        });\n\n        // Further group by category\n        const categoryPerformanceIntermediate: Record<string, { categoryName: string; products: any[]; totalCategorySales: number; totalCategoryQuantity: number; }> = {};\n        Object.values(productPerformance).forEach(product => {\n            const categoryNameKey = product.categoryName; // Use category name as key\n\n            if (!categoryPerformanceIntermediate[categoryNameKey]) {\n                categoryPerformanceIntermediate[categoryNameKey] = {\n                    categoryName: product.categoryName,\n                    products: [],\n                    totalCategorySales: 0,\n                    totalCategoryQuantity: 0,\n                };\n            }\n            categoryPerformanceIntermediate[categoryNameKey].products.push(product);\n            categoryPerformanceIntermediate[categoryNameKey].totalCategorySales += product.totalSalesAmount;\n            categoryPerformanceIntermediate[categoryNameKey].totalCategoryQuantity += product.totalQuantitySold;\n        });\n\n        // Sort products within each category by sales amount\n        for (const catName in categoryPerformanceIntermediate) {\n            categoryPerformanceIntermediate[catName].products.sort((a, b) => b.totalSalesAmount - a.totalSalesAmount);\n        }\n\n        // Convert intermediate object to array and sort categories by sales amount\n        const reportDetails = Object.values(categoryPerformanceIntermediate).sort((a, b) => b.totalCategorySales - a.totalCategorySales);\n\n        const overallTotalRevenue = reportDetails.reduce((sum, cat) => sum + cat.totalCategorySales, 0);\n        const overallTotalProductsSold = reportDetails.reduce((sum, cat) => sum + cat.totalCategoryQuantity, 0);\n\n        return NextResponse.json({\n            success: true,\n            details: reportDetails, // Array of categories, each with products array\n            summary: {\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n                overallTotalRevenue: overallTotalRevenue,\n                overallTotalProductsSold: overallTotalProductsSold,\n                numberOfCategoriesWithSales: reportDetails.length,\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching product performance report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch product performance report', error: error.message },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "now", "Date", "firstDayOfMonth", "getFullYear", "getMonth", "lastDayOfMonth", "invoiceItems", "prisma", "invoiceItem", "findMany", "where", "invoice", "status", "createdAt", "gte", "lte", "include", "product", "category", "length", "NextResponse", "json", "success", "details", "summary", "month", "toLocaleString", "year", "overallTotalRevenue", "overallTotalProductsSold", "numberOfCategoriesWithSales", "generatedAt", "toISOString", "message", "productPerformance", "forEach", "item", "productIdString", "productId", "toString", "productName", "name", "sku", "categoryId", "categoryName", "totalQuantitySold", "totalSalesAmount", "quantity", "total", "categoryPerformanceIntermediate", "Object", "values", "categoryNameKey", "products", "totalCategorySales", "totalCategoryQuantity", "push", "catName", "sort", "a", "b", "reportDetails", "reduce", "sum", "cat", "error", "console"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c84d142d9b11f10e4e0cb459cbd246fe770b0ba0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2olsk8ksg4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2olsk8ksg4();
cov_2olsk8ksg4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2olsk8ksg4().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2olsk8ksg4().f[0]++;
    cov_2olsk8ksg4().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2olsk8ksg4().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2olsk8ksg4().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_2olsk8ksg4().f[1]++;
  cov_2olsk8ksg4().s[5]++;
  try {
    const now =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[6]++, new Date());
    const firstDayOfMonth =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[7]++, new Date(now.getFullYear(), now.getMonth(), 1));
    const lastDayOfMonth =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[8]++, new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999));
    const invoiceItems =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[9]++, await _prisma.prisma.invoiceItem.findMany({
      where: {
        invoice: {
          status: "paid",
          createdAt: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        }
      },
      include: {
        product: {
          include: {
            category: true
          }
        },
        invoice: true
      }
    }));
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[10]++;
    if (invoiceItems.length === 0) {
      /* istanbul ignore next */
      cov_2olsk8ksg4().b[0][0]++;
      cov_2olsk8ksg4().s[11]++;
      return _server.NextResponse.json({
        success: true,
        details: [],
        summary: {
          month: now.toLocaleString("default", {
            month: "long"
          }),
          year: now.getFullYear(),
          overallTotalRevenue: 0,
          overallTotalProductsSold: 0,
          numberOfCategoriesWithSales: 0
        },
        generatedAt: new Date().toISOString(),
        message: "No sales data found for products in the current month."
      });
    } else
    /* istanbul ignore next */
    {
      cov_2olsk8ksg4().b[0][1]++;
    }
    // Aggregate data by product
    const productPerformance =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[12]++, {});
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[13]++;
    invoiceItems.forEach(item => {
      /* istanbul ignore next */
      cov_2olsk8ksg4().f[2]++;
      const productIdString =
      /* istanbul ignore next */
      (cov_2olsk8ksg4().s[14]++, item.productId.toString()); // Use string for object key
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[15]++;
      if (!productPerformance[productIdString]) {
        /* istanbul ignore next */
        cov_2olsk8ksg4().b[1][0]++;
        cov_2olsk8ksg4().s[16]++;
        productPerformance[productIdString] = {
          productId: item.productId,
          productName: item.product.name,
          sku: item.product.sku,
          categoryId: item.product.categoryId,
          categoryName:
          /* istanbul ignore next */
          (cov_2olsk8ksg4().b[2][0]++, item.product.category?.name) ||
          /* istanbul ignore next */
          (cov_2olsk8ksg4().b[2][1]++, "Uncategorized"),
          totalQuantitySold: 0,
          totalSalesAmount: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_2olsk8ksg4().b[1][1]++;
      }
      cov_2olsk8ksg4().s[17]++;
      productPerformance[productIdString].totalQuantitySold += item.quantity;
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[18]++;
      productPerformance[productIdString].totalSalesAmount += item.total;
    });
    // Further group by category
    const categoryPerformanceIntermediate =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[19]++, {});
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[20]++;
    Object.values(productPerformance).forEach(product => {
      /* istanbul ignore next */
      cov_2olsk8ksg4().f[3]++;
      const categoryNameKey =
      /* istanbul ignore next */
      (cov_2olsk8ksg4().s[21]++, product.categoryName); // Use category name as key
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[22]++;
      if (!categoryPerformanceIntermediate[categoryNameKey]) {
        /* istanbul ignore next */
        cov_2olsk8ksg4().b[3][0]++;
        cov_2olsk8ksg4().s[23]++;
        categoryPerformanceIntermediate[categoryNameKey] = {
          categoryName: product.categoryName,
          products: [],
          totalCategorySales: 0,
          totalCategoryQuantity: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_2olsk8ksg4().b[3][1]++;
      }
      cov_2olsk8ksg4().s[24]++;
      categoryPerformanceIntermediate[categoryNameKey].products.push(product);
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[25]++;
      categoryPerformanceIntermediate[categoryNameKey].totalCategorySales += product.totalSalesAmount;
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[26]++;
      categoryPerformanceIntermediate[categoryNameKey].totalCategoryQuantity += product.totalQuantitySold;
    });
    // Sort products within each category by sales amount
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[27]++;
    for (const catName in categoryPerformanceIntermediate) {
      /* istanbul ignore next */
      cov_2olsk8ksg4().s[28]++;
      categoryPerformanceIntermediate[catName].products.sort((a, b) => {
        /* istanbul ignore next */
        cov_2olsk8ksg4().f[4]++;
        cov_2olsk8ksg4().s[29]++;
        return b.totalSalesAmount - a.totalSalesAmount;
      });
    }
    // Convert intermediate object to array and sort categories by sales amount
    const reportDetails =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[30]++, Object.values(categoryPerformanceIntermediate).sort((a, b) => {
      /* istanbul ignore next */
      cov_2olsk8ksg4().f[5]++;
      cov_2olsk8ksg4().s[31]++;
      return b.totalCategorySales - a.totalCategorySales;
    }));
    const overallTotalRevenue =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[32]++, reportDetails.reduce((sum, cat) => {
      /* istanbul ignore next */
      cov_2olsk8ksg4().f[6]++;
      cov_2olsk8ksg4().s[33]++;
      return sum + cat.totalCategorySales;
    }, 0));
    const overallTotalProductsSold =
    /* istanbul ignore next */
    (cov_2olsk8ksg4().s[34]++, reportDetails.reduce((sum, cat) => {
      /* istanbul ignore next */
      cov_2olsk8ksg4().f[7]++;
      cov_2olsk8ksg4().s[35]++;
      return sum + cat.totalCategoryQuantity;
    }, 0));
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[36]++;
    return _server.NextResponse.json({
      success: true,
      details: reportDetails,
      summary: {
        month: now.toLocaleString("default", {
          month: "long"
        }),
        year: now.getFullYear(),
        overallTotalRevenue: overallTotalRevenue,
        overallTotalProductsSold: overallTotalProductsSold,
        numberOfCategoriesWithSales: reportDetails.length
      },
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[37]++;
    console.error("Error fetching product performance report:", error);
    /* istanbul ignore next */
    cov_2olsk8ksg4().s[38]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch product performance report",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,