{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/utilityFunctions.test.ts"],"sourcesContent":["import { formatCurrency, formatDate, formatPhoneNumber } from '@/lib/formatters';\nimport { validateEmail, validatePassword, validatePhoneNumber, validateRequired } from '@/lib/validators';\nimport { generateId, slugify, truncateText, debounce, throttle } from '@/lib/utils';\nimport { calculateTax, calculateDiscount, calculateTotal } from '@/lib/calculations';\nimport { sanitizeInput, escapeHtml, parseQueryParams } from '@/lib/sanitizers';\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Utility Functions Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('Formatting Functions', () => {\n    describe('formatCurrency', () => {\n      it('should format currency with default settings', () => {\n        const mockFormatCurrency = jest.fn((amount: number, currency = 'USD', locale = 'en-US') => {\n          return new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currency,\n          }).format(amount);\n        });\n\n        expect(mockFormatCurrency(1234.56)).toBe('$1,234.56');\n        expect(mockFormatCurrency(0)).toBe('$0.00');\n        expect(mockFormatCurrency(-500.25)).toBe('-$500.25');\n      });\n\n      it('should format currency with different currencies', () => {\n        const mockFormatCurrency = jest.fn((amount: number, currency = 'USD', locale = 'en-US') => {\n          return new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currency,\n          }).format(amount);\n        });\n\n        expect(mockFormatCurrency(1000, 'EUR', 'de-DE')).toBe('1.000,00 €');\n        expect(mockFormatCurrency(1000, 'GBP', 'en-GB')).toBe('£1,000.00');\n        expect(mockFormatCurrency(1000, 'JPY', 'ja-JP')).toBe('¥1,000');\n      });\n\n      it('should handle edge cases', () => {\n        const mockFormatCurrency = jest.fn((amount: number, currency = 'USD', locale = 'en-US') => {\n          if (isNaN(amount) || !isFinite(amount)) {\n            return '$0.00';\n          }\n          return new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currency,\n          }).format(amount);\n        });\n\n        expect(mockFormatCurrency(NaN)).toBe('$0.00');\n        expect(mockFormatCurrency(Infinity)).toBe('$0.00');\n        expect(mockFormatCurrency(-Infinity)).toBe('$0.00');\n      });\n    });\n\n    describe('formatDate', () => {\n      it('should format dates with default settings', () => {\n        const mockFormatDate = jest.fn((date: Date | string, format = 'MM/dd/yyyy') => {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) return 'Invalid Date';\n          \n          const month = String(d.getMonth() + 1).padStart(2, '0');\n          const day = String(d.getDate()).padStart(2, '0');\n          const year = d.getFullYear();\n          \n          return `${month}/${day}/${year}`;\n        });\n\n        const testDate = new Date('2024-01-15');\n        expect(mockFormatDate(testDate)).toBe('01/15/2024');\n        expect(mockFormatDate('2024-12-25')).toBe('12/25/2024');\n      });\n\n      it('should format dates with different formats', () => {\n        const mockFormatDate = jest.fn((date: Date | string, format: string) => {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) return 'Invalid Date';\n          \n          const formatMap: { [key: string]: string } = {\n            'yyyy-MM-dd': `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`,\n            'dd/MM/yyyy': `${String(d.getDate()).padStart(2, '0')}/${String(d.getMonth() + 1).padStart(2, '0')}/${d.getFullYear()}`,\n            'MMM dd, yyyy': d.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),\n          };\n          \n          return formatMap[format] || formatMap['MM/dd/yyyy'];\n        });\n\n        const testDate = new Date('2024-01-15');\n        expect(mockFormatDate(testDate, 'yyyy-MM-dd')).toBe('2024-01-15');\n        expect(mockFormatDate(testDate, 'dd/MM/yyyy')).toBe('15/01/2024');\n        expect(mockFormatDate(testDate, 'MMM dd, yyyy')).toBe('Jan 15, 2024');\n      });\n\n      it('should handle invalid dates', () => {\n        const mockFormatDate = jest.fn((date: Date | string) => {\n          const d = new Date(date);\n          return isNaN(d.getTime()) ? 'Invalid Date' : d.toLocaleDateString();\n        });\n\n        expect(mockFormatDate('invalid-date')).toBe('Invalid Date');\n        expect(mockFormatDate('')).toBe('Invalid Date');\n      });\n    });\n\n    describe('formatPhoneNumber', () => {\n      it('should format US phone numbers', () => {\n        const mockFormatPhoneNumber = jest.fn((phone: string, country = 'US') => {\n          const cleaned = phone.replace(/\\D/g, '');\n          if (country === 'US' && cleaned.length === 10) {\n            return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n          }\n          return phone;\n        });\n\n        expect(mockFormatPhoneNumber('1234567890')).toBe('(123) 456-7890');\n        expect(mockFormatPhoneNumber('123-456-7890')).toBe('(123) 456-7890');\n        expect(mockFormatPhoneNumber('(123) 456-7890')).toBe('(123) 456-7890');\n      });\n\n      it('should handle international phone numbers', () => {\n        const mockFormatPhoneNumber = jest.fn((phone: string, country: string) => {\n          const cleaned = phone.replace(/\\D/g, '');\n          if (country === 'UK' && cleaned.length === 11) {\n            return `+44 ${cleaned.slice(1, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;\n          }\n          return phone;\n        });\n\n        expect(mockFormatPhoneNumber('01234567890', 'UK')).toBe('+44 1234 567 890');\n      });\n\n      it('should handle invalid phone numbers', () => {\n        const mockFormatPhoneNumber = jest.fn((phone: string) => {\n          const cleaned = phone.replace(/\\D/g, '');\n          return cleaned.length < 10 ? phone : `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n        });\n\n        expect(mockFormatPhoneNumber('123')).toBe('123');\n        expect(mockFormatPhoneNumber('')).toBe('');\n        expect(mockFormatPhoneNumber('abc')).toBe('abc');\n      });\n    });\n  });\n\n  describe('Validation Functions', () => {\n    describe('validateEmail', () => {\n      it('should validate correct email addresses', () => {\n        const mockValidateEmail = jest.fn((email: string) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(email);\n        });\n\n        expect(mockValidateEmail('test@example.com')).toBe(true);\n        expect(mockValidateEmail('user.name@domain.co.uk')).toBe(true);\n        expect(mockValidateEmail('user+tag@example.org')).toBe(true);\n      });\n\n      it('should reject invalid email addresses', () => {\n        const mockValidateEmail = jest.fn((email: string) => {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          return emailRegex.test(email);\n        });\n\n        expect(mockValidateEmail('invalid-email')).toBe(false);\n        expect(mockValidateEmail('test@')).toBe(false);\n        expect(mockValidateEmail('@example.com')).toBe(false);\n        expect(mockValidateEmail('test@.com')).toBe(false);\n        expect(mockValidateEmail('')).toBe(false);\n      });\n    });\n\n    describe('validatePassword', () => {\n      it('should validate strong passwords', () => {\n        const mockValidatePassword = jest.fn((password: string) => {\n          const minLength = password.length >= 8;\n          const hasUpper = /[A-Z]/.test(password);\n          const hasLower = /[a-z]/.test(password);\n          const hasNumber = /\\d/.test(password);\n          const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n          \n          return minLength && hasUpper && hasLower && hasNumber && hasSpecial;\n        });\n\n        expect(mockValidatePassword('Password123!')).toBe(true);\n        expect(mockValidatePassword('MySecure@Pass1')).toBe(true);\n        expect(mockValidatePassword('Complex#Password9')).toBe(true);\n      });\n\n      it('should reject weak passwords', () => {\n        const mockValidatePassword = jest.fn((password: string) => {\n          const minLength = password.length >= 8;\n          const hasUpper = /[A-Z]/.test(password);\n          const hasLower = /[a-z]/.test(password);\n          const hasNumber = /\\d/.test(password);\n          const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n          \n          return minLength && hasUpper && hasLower && hasNumber && hasSpecial;\n        });\n\n        expect(mockValidatePassword('weak')).toBe(false);\n        expect(mockValidatePassword('password')).toBe(false);\n        expect(mockValidatePassword('Password')).toBe(false);\n        expect(mockValidatePassword('Password123')).toBe(false);\n        expect(mockValidatePassword('')).toBe(false);\n      });\n    });\n\n    describe('validatePhoneNumber', () => {\n      it('should validate US phone numbers', () => {\n        const mockValidatePhoneNumber = jest.fn((phone: string, country = 'US') => {\n          const cleaned = phone.replace(/\\D/g, '');\n          if (country === 'US') {\n            return cleaned.length === 10 || (cleaned.length === 11 && cleaned.startsWith('1'));\n          }\n          return cleaned.length >= 10;\n        });\n\n        expect(mockValidatePhoneNumber('(123) 456-7890')).toBe(true);\n        expect(mockValidatePhoneNumber('123-456-7890')).toBe(true);\n        expect(mockValidatePhoneNumber('1234567890')).toBe(true);\n        expect(mockValidatePhoneNumber('11234567890')).toBe(true);\n      });\n\n      it('should reject invalid phone numbers', () => {\n        const mockValidatePhoneNumber = jest.fn((phone: string) => {\n          const cleaned = phone.replace(/\\D/g, '');\n          return cleaned.length === 10 || (cleaned.length === 11 && cleaned.startsWith('1'));\n        });\n\n        expect(mockValidatePhoneNumber('123')).toBe(false);\n        expect(mockValidatePhoneNumber('123-456')).toBe(false);\n        expect(mockValidatePhoneNumber('')).toBe(false);\n        expect(mockValidatePhoneNumber('abc-def-ghij')).toBe(false);\n      });\n    });\n\n    describe('validateRequired', () => {\n      it('should validate required fields', () => {\n        const mockValidateRequired = jest.fn((value: any) => {\n          if (typeof value === 'string') {\n            return value.trim().length > 0;\n          }\n          return value !== null && value !== undefined;\n        });\n\n        expect(mockValidateRequired('test')).toBe(true);\n        expect(mockValidateRequired('  test  ')).toBe(true);\n        expect(mockValidateRequired(123)).toBe(true);\n        expect(mockValidateRequired(0)).toBe(true);\n        expect(mockValidateRequired(false)).toBe(true);\n      });\n\n      it('should reject empty or null values', () => {\n        const mockValidateRequired = jest.fn((value: any) => {\n          if (typeof value === 'string') {\n            return value.trim().length > 0;\n          }\n          return value !== null && value !== undefined;\n        });\n\n        expect(mockValidateRequired('')).toBe(false);\n        expect(mockValidateRequired('   ')).toBe(false);\n        expect(mockValidateRequired(null)).toBe(false);\n        expect(mockValidateRequired(undefined)).toBe(false);\n      });\n    });\n  });\n\n  describe('Utility Helper Functions', () => {\n    describe('generateId', () => {\n      it('should generate unique IDs', () => {\n        const mockGenerateId = jest.fn((prefix = '', length = 8) => {\n          const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n          let result = prefix;\n          for (let i = 0; i < length; i++) {\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\n          }\n          return result;\n        });\n\n        const id1 = mockGenerateId();\n        const id2 = mockGenerateId();\n        \n        expect(id1).toHaveLength(8);\n        expect(id2).toHaveLength(8);\n        expect(id1).not.toBe(id2);\n      });\n\n      it('should generate IDs with custom prefix and length', () => {\n        const mockGenerateId = jest.fn((prefix = '', length = 8) => {\n          const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n          let result = prefix;\n          for (let i = 0; i < length; i++) {\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\n          }\n          return result;\n        });\n\n        const id = mockGenerateId('USER_', 12);\n        \n        expect(id).toHaveLength(17); // 5 (prefix) + 12 (generated)\n        expect(id).toStartWith('USER_');\n      });\n    });\n\n    describe('slugify', () => {\n      it('should create URL-friendly slugs', () => {\n        const mockSlugify = jest.fn((text: string) => {\n          return text\n            .toLowerCase()\n            .trim()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n        });\n\n        expect(mockSlugify('Hello World')).toBe('hello-world');\n        expect(mockSlugify('Product Name & Description')).toBe('product-name-description');\n        expect(mockSlugify('  Multiple   Spaces  ')).toBe('multiple-spaces');\n        expect(mockSlugify('Special!@#$%Characters')).toBe('specialcharacters');\n      });\n\n      it('should handle edge cases', () => {\n        const mockSlugify = jest.fn((text: string) => {\n          return text\n            .toLowerCase()\n            .trim()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n        });\n\n        expect(mockSlugify('')).toBe('');\n        expect(mockSlugify('   ')).toBe('');\n        expect(mockSlugify('!@#$%^&*()')).toBe('');\n        expect(mockSlugify('123-456-789')).toBe('123-456-789');\n      });\n    });\n\n    describe('truncateText', () => {\n      it('should truncate long text', () => {\n        const mockTruncateText = jest.fn((text: string, maxLength: number, suffix = '...') => {\n          if (text.length <= maxLength) return text;\n          return text.slice(0, maxLength - suffix.length) + suffix;\n        });\n\n        const longText = 'This is a very long text that should be truncated';\n        \n        expect(mockTruncateText(longText, 20)).toBe('This is a very lo...');\n        expect(mockTruncateText(longText, 10)).toBe('This is...');\n        expect(mockTruncateText('Short', 20)).toBe('Short');\n      });\n\n      it('should handle custom suffix', () => {\n        const mockTruncateText = jest.fn((text: string, maxLength: number, suffix = '...') => {\n          if (text.length <= maxLength) return text;\n          return text.slice(0, maxLength - suffix.length) + suffix;\n        });\n\n        const text = 'This is a long text';\n        \n        expect(mockTruncateText(text, 15, ' [more]')).toBe('This is [more]');\n        expect(mockTruncateText(text, 10, '')).toBe('This is a ');\n      });\n    });\n\n    describe('debounce', () => {\n      it('should debounce function calls', async () => {\n        let callCount = 0;\n        const mockFunction = jest.fn(() => callCount++);\n        \n        const mockDebounce = jest.fn((func: Function, delay: number) => {\n          let timeoutId: NodeJS.Timeout;\n          return (...args: any[]) => {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => func.apply(null, args), delay);\n          };\n        });\n\n        const debouncedFunction = mockDebounce(mockFunction, 100);\n        \n        // Call multiple times quickly\n        debouncedFunction();\n        debouncedFunction();\n        debouncedFunction();\n        \n        // Should not have been called yet\n        expect(mockFunction).not.toHaveBeenCalled();\n        \n        // Wait for debounce delay\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        // Should have been called only once\n        expect(mockFunction).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    describe('throttle', () => {\n      it('should throttle function calls', async () => {\n        let callCount = 0;\n        const mockFunction = jest.fn(() => callCount++);\n        \n        const mockThrottle = jest.fn((func: Function, delay: number) => {\n          let lastCall = 0;\n          return (...args: any[]) => {\n            const now = Date.now();\n            if (now - lastCall >= delay) {\n              lastCall = now;\n              return func.apply(null, args);\n            }\n          };\n        });\n\n        const throttledFunction = mockThrottle(mockFunction, 100);\n        \n        // Call multiple times quickly\n        throttledFunction();\n        throttledFunction();\n        throttledFunction();\n        \n        // Should have been called only once immediately\n        expect(mockFunction).toHaveBeenCalledTimes(1);\n        \n        // Wait for throttle delay\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        // Call again\n        throttledFunction();\n        \n        // Should have been called twice total\n        expect(mockFunction).toHaveBeenCalledTimes(2);\n      });\n    });\n  });\n\n  describe('Calculation Functions', () => {\n    describe('calculateTax', () => {\n      it('should calculate tax correctly', () => {\n        const mockCalculateTax = jest.fn((amount: number, taxRate: number) => {\n          return Math.round((amount * taxRate) * 100) / 100;\n        });\n\n        expect(mockCalculateTax(100, 0.08)).toBe(8);\n        expect(mockCalculateTax(250.50, 0.075)).toBe(18.79);\n        expect(mockCalculateTax(0, 0.08)).toBe(0);\n      });\n\n      it('should handle edge cases', () => {\n        const mockCalculateTax = jest.fn((amount: number, taxRate: number) => {\n          if (amount < 0 || taxRate < 0) return 0;\n          return Math.round((amount * taxRate) * 100) / 100;\n        });\n\n        expect(mockCalculateTax(-100, 0.08)).toBe(0);\n        expect(mockCalculateTax(100, -0.08)).toBe(0);\n        expect(mockCalculateTax(100, 0)).toBe(0);\n      });\n    });\n\n    describe('calculateDiscount', () => {\n      it('should calculate percentage discount', () => {\n        const mockCalculateDiscount = jest.fn((amount: number, discount: number, isPercentage = true) => {\n          if (isPercentage) {\n            return Math.round((amount * (discount / 100)) * 100) / 100;\n          }\n          return Math.min(discount, amount);\n        });\n\n        expect(mockCalculateDiscount(100, 10, true)).toBe(10);\n        expect(mockCalculateDiscount(250, 15, true)).toBe(37.5);\n        expect(mockCalculateDiscount(50, 20, true)).toBe(10);\n      });\n\n      it('should calculate fixed discount', () => {\n        const mockCalculateDiscount = jest.fn((amount: number, discount: number, isPercentage = true) => {\n          if (isPercentage) {\n            return Math.round((amount * (discount / 100)) * 100) / 100;\n          }\n          return Math.min(discount, amount);\n        });\n\n        expect(mockCalculateDiscount(100, 15, false)).toBe(15);\n        expect(mockCalculateDiscount(50, 75, false)).toBe(50); // Can't discount more than amount\n        expect(mockCalculateDiscount(200, 25, false)).toBe(25);\n      });\n    });\n\n    describe('calculateTotal', () => {\n      it('should calculate total with tax and discount', () => {\n        const mockCalculateTotal = jest.fn((subtotal: number, tax: number, discount: number) => {\n          const afterDiscount = subtotal - discount;\n          return Math.round((afterDiscount + tax) * 100) / 100;\n        });\n\n        expect(mockCalculateTotal(100, 8, 10)).toBe(98); // 100 - 10 + 8\n        expect(mockCalculateTotal(250, 20, 25)).toBe(245); // 250 - 25 + 20\n        expect(mockCalculateTotal(50, 0, 0)).toBe(50);\n      });\n\n      it('should handle negative results', () => {\n        const mockCalculateTotal = jest.fn((subtotal: number, tax: number, discount: number) => {\n          const afterDiscount = subtotal - discount;\n          const total = afterDiscount + tax;\n          return Math.max(0, Math.round(total * 100) / 100);\n        });\n\n        expect(mockCalculateTotal(10, 1, 15)).toBe(0); // Can't go negative\n        expect(mockCalculateTotal(0, 0, 5)).toBe(0);\n      });\n    });\n  });\n\n  describe('Sanitization Functions', () => {\n    describe('sanitizeInput', () => {\n      it('should sanitize user input', () => {\n        const mockSanitizeInput = jest.fn((input: string) => {\n          return input\n            .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n            .replace(/<[^>]*>/g, '')\n            .trim();\n        });\n\n        expect(mockSanitizeInput('Hello <script>alert(\"xss\")</script> World')).toBe('Hello  World');\n        expect(mockSanitizeInput('<b>Bold</b> text')).toBe('Bold text');\n        expect(mockSanitizeInput('  Normal text  ')).toBe('Normal text');\n      });\n\n      it('should handle malicious input', () => {\n        const mockSanitizeInput = jest.fn((input: string) => {\n          return input\n            .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n            .replace(/javascript:/gi, '')\n            .replace(/on\\w+\\s*=/gi, '')\n            .replace(/<[^>]*>/g, '')\n            .trim();\n        });\n\n        expect(mockSanitizeInput('<img src=\"x\" onerror=\"alert(1)\">')).toBe('');\n        expect(mockSanitizeInput('javascript:alert(\"xss\")')).toBe('alert(\"xss\")');\n        expect(mockSanitizeInput('<a href=\"javascript:void(0)\">Link</a>')).toBe('Link');\n      });\n    });\n\n    describe('escapeHtml', () => {\n      it('should escape HTML entities', () => {\n        const mockEscapeHtml = jest.fn((text: string) => {\n          const entityMap: { [key: string]: string } = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n          };\n          return text.replace(/[&<>\"']/g, (char) => entityMap[char]);\n        });\n\n        expect(mockEscapeHtml('<div>Hello & \"World\"</div>')).toBe('&lt;div&gt;Hello &amp; &quot;World&quot;&lt;/div&gt;');\n        expect(mockEscapeHtml(\"It's a 'test'\")).toBe('It&#39;s a &#39;test&#39;');\n        expect(mockEscapeHtml('Normal text')).toBe('Normal text');\n      });\n    });\n\n    describe('parseQueryParams', () => {\n      it('should parse URL query parameters', () => {\n        const mockParseQueryParams = jest.fn((queryString: string) => {\n          const params: { [key: string]: string } = {};\n          const urlParams = new URLSearchParams(queryString);\n          for (const [key, value] of urlParams) {\n            params[key] = value;\n          }\n          return params;\n        });\n\n        expect(mockParseQueryParams('?name=John&age=30&city=NYC')).toEqual({\n          name: 'John',\n          age: '30',\n          city: 'NYC',\n        });\n        \n        expect(mockParseQueryParams('search=test&page=1&limit=10')).toEqual({\n          search: 'test',\n          page: '1',\n          limit: '10',\n        });\n      });\n\n      it('should handle empty or malformed query strings', () => {\n        const mockParseQueryParams = jest.fn((queryString: string) => {\n          const params: { [key: string]: string } = {};\n          try {\n            const urlParams = new URLSearchParams(queryString);\n            for (const [key, value] of urlParams) {\n              params[key] = value;\n            }\n          } catch (error) {\n            // Return empty object for malformed queries\n          }\n          return params;\n        });\n\n        expect(mockParseQueryParams('')).toEqual({});\n        expect(mockParseQueryParams('?')).toEqual({});\n        expect(mockParseQueryParams('invalid')).toEqual({});\n      });\n\n      it('should handle URL encoding', () => {\n        const mockParseQueryParams = jest.fn((queryString: string) => {\n          const params: { [key: string]: string } = {};\n          const urlParams = new URLSearchParams(queryString);\n          for (const [key, value] of urlParams) {\n            params[key] = decodeURIComponent(value);\n          }\n          return params;\n        });\n\n        expect(mockParseQueryParams('search=hello%20world&special=%21%40%23')).toEqual({\n          search: 'hello world',\n          special: '!@#',\n        });\n      });\n    });\n  });\n\n  describe('Error Handling in Utilities', () => {\n    it('should handle errors in formatting functions', () => {\n      const mockFormatCurrencyWithError = jest.fn((amount: any) => {\n        try {\n          if (typeof amount !== 'number') {\n            throw new Error('Invalid amount type');\n          }\n          return `$${amount.toFixed(2)}`;\n        } catch (error) {\n          consoleSpy.error('Currency formatting error:', error);\n          return '$0.00';\n        }\n      });\n\n      expect(mockFormatCurrencyWithError('invalid')).toBe('$0.00');\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Currency formatting error:',\n        expect.any(Error)\n      );\n    });\n\n    it('should handle errors in validation functions', () => {\n      const mockValidateEmailWithError = jest.fn((email: any) => {\n        try {\n          if (typeof email !== 'string') {\n            throw new Error('Email must be a string');\n          }\n          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n        } catch (error) {\n          consoleSpy.error('Email validation error:', error);\n          return false;\n        }\n      });\n\n      expect(mockValidateEmailWithError(null)).toBe(false);\n      expect(mockValidateEmailWithError(123)).toBe(false);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Email validation error:',\n        expect.any(Error)\n      );\n    });\n\n    it('should handle errors in utility functions', () => {\n      const mockSlugifyWithError = jest.fn((text: any) => {\n        try {\n          if (typeof text !== 'string') {\n            throw new Error('Text must be a string');\n          }\n          return text.toLowerCase().replace(/[^a-z0-9]/g, '-');\n        } catch (error) {\n          consoleSpy.error('Slugify error:', error);\n          return '';\n        }\n      });\n\n      expect(mockSlugifyWithError(null)).toBe('');\n      expect(mockSlugifyWithError({})).toBe('');\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Slugify error:',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('Performance Tests for Utilities', () => {\n    it('should handle large datasets efficiently', () => {\n      const mockBatchProcess = jest.fn((items: any[], batchSize = 100) => {\n        const results = [];\n        for (let i = 0; i < items.length; i += batchSize) {\n          const batch = items.slice(i, i + batchSize);\n          results.push(...batch.map(item => item.id));\n        }\n        return results;\n      });\n\n      const largeDataset = Array.from({ length: 10000 }, (_, i) => ({ id: i, name: `Item ${i}` }));\n      \n      const startTime = Date.now();\n      const result = mockBatchProcess(largeDataset);\n      const endTime = Date.now();\n      \n      expect(result).toHaveLength(10000);\n      expect(endTime - startTime).toBeLessThan(100); // Should process quickly\n    });\n\n    it('should handle concurrent utility operations', async () => {\n      const mockAsyncUtility = jest.fn(async (data: string) => {\n        await new Promise(resolve => setTimeout(resolve, 10));\n        return data.toUpperCase();\n      });\n\n      const operations = Array.from({ length: 100 }, (_, i) => \n        mockAsyncUtility(`test-${i}`)\n      );\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const endTime = Date.now();\n\n      expect(results).toHaveLength(100);\n      expect(results[0]).toBe('TEST-0');\n      expect(endTime - startTime).toBeLessThan(500); // Should handle concurrency well\n    });\n  });\n});"],"names":["consoleSpy","log","jest","spyOn","console","mockImplementation","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","mockFormatCurrency","fn","amount","currency","locale","Intl","NumberFormat","style","format","expect","toBe","isNaN","isFinite","NaN","Infinity","mockFormatDate","date","d","Date","getTime","month","String","getMonth","padStart","day","getDate","year","getFullYear","testDate","formatMap","toLocaleDateString","mockFormatPhoneNumber","phone","country","cleaned","replace","length","slice","mockValidateEmail","email","emailRegex","test","mockValidatePassword","password","minLength","hasUpper","hasLower","hasNumber","hasSpecial","mockValidatePhoneNumber","startsWith","mockValidateRequired","value","trim","undefined","mockGenerateId","prefix","chars","result","i","charAt","Math","floor","random","id1","id2","toHaveLength","not","id","toStartWith","mockSlugify","text","toLowerCase","mockTruncateText","maxLength","suffix","longText","callCount","mockFunction","mockDebounce","func","delay","timeoutId","args","clearTimeout","setTimeout","apply","debouncedFunction","toHaveBeenCalled","Promise","resolve","toHaveBeenCalledTimes","mockThrottle","lastCall","now","throttledFunction","mockCalculateTax","taxRate","round","mockCalculateDiscount","discount","isPercentage","min","mockCalculateTotal","subtotal","tax","afterDiscount","total","max","mockSanitizeInput","input","mockEscapeHtml","entityMap","char","mockParseQueryParams","queryString","params","urlParams","URLSearchParams","key","toEqual","name","age","city","search","page","limit","decodeURIComponent","special","mockFormatCurrencyWithError","Error","toFixed","toHaveBeenCalledWith","any","mockValidateEmailWithError","mockSlugifyWithError","mockBatchProcess","items","batchSize","results","batch","push","map","item","largeDataset","Array","from","_","startTime","endTime","toBeLessThan","mockAsyncUtility","data","toUpperCase","operations","all"],"mappings":";;;;AAMA,uBAAuB;AACvB,MAAMA,aAAa;IACjBC,KAAKC,KAAKC,KAAK,CAACC,SAAS,OAAOC,kBAAkB,CAAC,KAAO;IAC1DC,OAAOJ,KAAKC,KAAK,CAACC,SAAS,SAASC,kBAAkB,CAAC,KAAO;IAC9DE,MAAML,KAAKC,KAAK,CAACC,SAAS,QAAQC,kBAAkB,CAAC,KAAO;AAC9D;AAEAG,SAAS,2BAA2B;IAClCC,WAAW;QACTP,KAAKQ,aAAa;QAClBV,WAAWC,GAAG,CAACU,SAAS;QACxBX,WAAWM,KAAK,CAACK,SAAS;QAC1BX,WAAWO,IAAI,CAACI,SAAS;IAC3B;IAEAC,SAAS;QACPZ,WAAWC,GAAG,CAACY,WAAW;QAC1Bb,WAAWM,KAAK,CAACO,WAAW;QAC5Bb,WAAWO,IAAI,CAACM,WAAW;IAC7B;IAEAL,SAAS,wBAAwB;QAC/BA,SAAS,kBAAkB;YACzBM,GAAG,gDAAgD;gBACjD,MAAMC,qBAAqBb,KAAKc,EAAE,CAAC,CAACC,QAAgBC,WAAW,KAAK,EAAEC,SAAS,OAAO;oBACpF,OAAO,IAAIC,KAAKC,YAAY,CAACF,QAAQ;wBACnCG,OAAO;wBACPJ,UAAUA;oBACZ,GAAGK,MAAM,CAACN;gBACZ;gBAEAO,OAAOT,mBAAmB,UAAUU,IAAI,CAAC;gBACzCD,OAAOT,mBAAmB,IAAIU,IAAI,CAAC;gBACnCD,OAAOT,mBAAmB,CAAC,SAASU,IAAI,CAAC;YAC3C;YAEAX,GAAG,oDAAoD;gBACrD,MAAMC,qBAAqBb,KAAKc,EAAE,CAAC,CAACC,QAAgBC,WAAW,KAAK,EAAEC,SAAS,OAAO;oBACpF,OAAO,IAAIC,KAAKC,YAAY,CAACF,QAAQ;wBACnCG,OAAO;wBACPJ,UAAUA;oBACZ,GAAGK,MAAM,CAACN;gBACZ;gBAEAO,OAAOT,mBAAmB,MAAM,OAAO,UAAUU,IAAI,CAAC;gBACtDD,OAAOT,mBAAmB,MAAM,OAAO,UAAUU,IAAI,CAAC;gBACtDD,OAAOT,mBAAmB,MAAM,OAAO,UAAUU,IAAI,CAAC;YACxD;YAEAX,GAAG,4BAA4B;gBAC7B,MAAMC,qBAAqBb,KAAKc,EAAE,CAAC,CAACC,QAAgBC,WAAW,KAAK,EAAEC,SAAS,OAAO;oBACpF,IAAIO,MAAMT,WAAW,CAACU,SAASV,SAAS;wBACtC,OAAO;oBACT;oBACA,OAAO,IAAIG,KAAKC,YAAY,CAACF,QAAQ;wBACnCG,OAAO;wBACPJ,UAAUA;oBACZ,GAAGK,MAAM,CAACN;gBACZ;gBAEAO,OAAOT,mBAAmBa,MAAMH,IAAI,CAAC;gBACrCD,OAAOT,mBAAmBc,WAAWJ,IAAI,CAAC;gBAC1CD,OAAOT,mBAAmB,CAACc,WAAWJ,IAAI,CAAC;YAC7C;QACF;QAEAjB,SAAS,cAAc;YACrBM,GAAG,6CAA6C;gBAC9C,MAAMgB,iBAAiB5B,KAAKc,EAAE,CAAC,CAACe,MAAqBR,SAAS,YAAY;oBACxE,MAAMS,IAAI,IAAIC,KAAKF;oBACnB,IAAIL,MAAMM,EAAEE,OAAO,KAAK,OAAO;oBAE/B,MAAMC,QAAQC,OAAOJ,EAAEK,QAAQ,KAAK,GAAGC,QAAQ,CAAC,GAAG;oBACnD,MAAMC,MAAMH,OAAOJ,EAAEQ,OAAO,IAAIF,QAAQ,CAAC,GAAG;oBAC5C,MAAMG,OAAOT,EAAEU,WAAW;oBAE1B,OAAO,CAAC,EAAEP,MAAM,CAAC,EAAEI,IAAI,CAAC,EAAEE,KAAK,CAAC;gBAClC;gBAEA,MAAME,WAAW,IAAIV,KAAK;gBAC1BT,OAAOM,eAAea,WAAWlB,IAAI,CAAC;gBACtCD,OAAOM,eAAe,eAAeL,IAAI,CAAC;YAC5C;YAEAX,GAAG,8CAA8C;gBAC/C,MAAMgB,iBAAiB5B,KAAKc,EAAE,CAAC,CAACe,MAAqBR;oBACnD,MAAMS,IAAI,IAAIC,KAAKF;oBACnB,IAAIL,MAAMM,EAAEE,OAAO,KAAK,OAAO;oBAE/B,MAAMU,YAAuC;wBAC3C,cAAc,CAAC,EAAEZ,EAAEU,WAAW,GAAG,CAAC,EAAEN,OAAOJ,EAAEK,QAAQ,KAAK,GAAGC,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAEF,OAAOJ,EAAEQ,OAAO,IAAIF,QAAQ,CAAC,GAAG,KAAK,CAAC;wBACvH,cAAc,CAAC,EAAEF,OAAOJ,EAAEQ,OAAO,IAAIF,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAEF,OAAOJ,EAAEK,QAAQ,KAAK,GAAGC,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAEN,EAAEU,WAAW,GAAG,CAAC;wBACvH,gBAAgBV,EAAEa,kBAAkB,CAAC,SAAS;4BAAEJ,MAAM;4BAAWN,OAAO;4BAASI,KAAK;wBAAU;oBAClG;oBAEA,OAAOK,SAAS,CAACrB,OAAO,IAAIqB,SAAS,CAAC,aAAa;gBACrD;gBAEA,MAAMD,WAAW,IAAIV,KAAK;gBAC1BT,OAAOM,eAAea,UAAU,eAAelB,IAAI,CAAC;gBACpDD,OAAOM,eAAea,UAAU,eAAelB,IAAI,CAAC;gBACpDD,OAAOM,eAAea,UAAU,iBAAiBlB,IAAI,CAAC;YACxD;YAEAX,GAAG,+BAA+B;gBAChC,MAAMgB,iBAAiB5B,KAAKc,EAAE,CAAC,CAACe;oBAC9B,MAAMC,IAAI,IAAIC,KAAKF;oBACnB,OAAOL,MAAMM,EAAEE,OAAO,MAAM,iBAAiBF,EAAEa,kBAAkB;gBACnE;gBAEArB,OAAOM,eAAe,iBAAiBL,IAAI,CAAC;gBAC5CD,OAAOM,eAAe,KAAKL,IAAI,CAAC;YAClC;QACF;QAEAjB,SAAS,qBAAqB;YAC5BM,GAAG,kCAAkC;gBACnC,MAAMgC,wBAAwB5C,KAAKc,EAAE,CAAC,CAAC+B,OAAeC,UAAU,IAAI;oBAClE,MAAMC,UAAUF,MAAMG,OAAO,CAAC,OAAO;oBACrC,IAAIF,YAAY,QAAQC,QAAQE,MAAM,KAAK,IAAI;wBAC7C,OAAO,CAAC,CAAC,EAAEF,QAAQG,KAAK,CAAC,GAAG,GAAG,EAAE,EAAEH,QAAQG,KAAK,CAAC,GAAG,GAAG,CAAC,EAAEH,QAAQG,KAAK,CAAC,GAAG,CAAC;oBAC9E;oBACA,OAAOL;gBACT;gBAEAvB,OAAOsB,sBAAsB,eAAerB,IAAI,CAAC;gBACjDD,OAAOsB,sBAAsB,iBAAiBrB,IAAI,CAAC;gBACnDD,OAAOsB,sBAAsB,mBAAmBrB,IAAI,CAAC;YACvD;YAEAX,GAAG,6CAA6C;gBAC9C,MAAMgC,wBAAwB5C,KAAKc,EAAE,CAAC,CAAC+B,OAAeC;oBACpD,MAAMC,UAAUF,MAAMG,OAAO,CAAC,OAAO;oBACrC,IAAIF,YAAY,QAAQC,QAAQE,MAAM,KAAK,IAAI;wBAC7C,OAAO,CAAC,IAAI,EAAEF,QAAQG,KAAK,CAAC,GAAG,GAAG,CAAC,EAAEH,QAAQG,KAAK,CAAC,GAAG,GAAG,CAAC,EAAEH,QAAQG,KAAK,CAAC,GAAG,CAAC;oBAChF;oBACA,OAAOL;gBACT;gBAEAvB,OAAOsB,sBAAsB,eAAe,OAAOrB,IAAI,CAAC;YAC1D;YAEAX,GAAG,uCAAuC;gBACxC,MAAMgC,wBAAwB5C,KAAKc,EAAE,CAAC,CAAC+B;oBACrC,MAAME,UAAUF,MAAMG,OAAO,CAAC,OAAO;oBACrC,OAAOD,QAAQE,MAAM,GAAG,KAAKJ,QAAQ,CAAC,CAAC,EAAEE,QAAQG,KAAK,CAAC,GAAG,GAAG,EAAE,EAAEH,QAAQG,KAAK,CAAC,GAAG,GAAG,CAAC,EAAEH,QAAQG,KAAK,CAAC,GAAG,CAAC;gBAC5G;gBAEA5B,OAAOsB,sBAAsB,QAAQrB,IAAI,CAAC;gBAC1CD,OAAOsB,sBAAsB,KAAKrB,IAAI,CAAC;gBACvCD,OAAOsB,sBAAsB,QAAQrB,IAAI,CAAC;YAC5C;QACF;IACF;IAEAjB,SAAS,wBAAwB;QAC/BA,SAAS,iBAAiB;YACxBM,GAAG,2CAA2C;gBAC5C,MAAMuC,oBAAoBnD,KAAKc,EAAE,CAAC,CAACsC;oBACjC,MAAMC,aAAa;oBACnB,OAAOA,WAAWC,IAAI,CAACF;gBACzB;gBAEA9B,OAAO6B,kBAAkB,qBAAqB5B,IAAI,CAAC;gBACnDD,OAAO6B,kBAAkB,2BAA2B5B,IAAI,CAAC;gBACzDD,OAAO6B,kBAAkB,yBAAyB5B,IAAI,CAAC;YACzD;YAEAX,GAAG,yCAAyC;gBAC1C,MAAMuC,oBAAoBnD,KAAKc,EAAE,CAAC,CAACsC;oBACjC,MAAMC,aAAa;oBACnB,OAAOA,WAAWC,IAAI,CAACF;gBACzB;gBAEA9B,OAAO6B,kBAAkB,kBAAkB5B,IAAI,CAAC;gBAChDD,OAAO6B,kBAAkB,UAAU5B,IAAI,CAAC;gBACxCD,OAAO6B,kBAAkB,iBAAiB5B,IAAI,CAAC;gBAC/CD,OAAO6B,kBAAkB,cAAc5B,IAAI,CAAC;gBAC5CD,OAAO6B,kBAAkB,KAAK5B,IAAI,CAAC;YACrC;QACF;QAEAjB,SAAS,oBAAoB;YAC3BM,GAAG,oCAAoC;gBACrC,MAAM2C,uBAAuBvD,KAAKc,EAAE,CAAC,CAAC0C;oBACpC,MAAMC,YAAYD,SAASP,MAAM,IAAI;oBACrC,MAAMS,WAAW,QAAQJ,IAAI,CAACE;oBAC9B,MAAMG,WAAW,QAAQL,IAAI,CAACE;oBAC9B,MAAMI,YAAY,KAAKN,IAAI,CAACE;oBAC5B,MAAMK,aAAa,yBAAyBP,IAAI,CAACE;oBAEjD,OAAOC,aAAaC,YAAYC,YAAYC,aAAaC;gBAC3D;gBAEAvC,OAAOiC,qBAAqB,iBAAiBhC,IAAI,CAAC;gBAClDD,OAAOiC,qBAAqB,mBAAmBhC,IAAI,CAAC;gBACpDD,OAAOiC,qBAAqB,sBAAsBhC,IAAI,CAAC;YACzD;YAEAX,GAAG,gCAAgC;gBACjC,MAAM2C,uBAAuBvD,KAAKc,EAAE,CAAC,CAAC0C;oBACpC,MAAMC,YAAYD,SAASP,MAAM,IAAI;oBACrC,MAAMS,WAAW,QAAQJ,IAAI,CAACE;oBAC9B,MAAMG,WAAW,QAAQL,IAAI,CAACE;oBAC9B,MAAMI,YAAY,KAAKN,IAAI,CAACE;oBAC5B,MAAMK,aAAa,yBAAyBP,IAAI,CAACE;oBAEjD,OAAOC,aAAaC,YAAYC,YAAYC,aAAaC;gBAC3D;gBAEAvC,OAAOiC,qBAAqB,SAAShC,IAAI,CAAC;gBAC1CD,OAAOiC,qBAAqB,aAAahC,IAAI,CAAC;gBAC9CD,OAAOiC,qBAAqB,aAAahC,IAAI,CAAC;gBAC9CD,OAAOiC,qBAAqB,gBAAgBhC,IAAI,CAAC;gBACjDD,OAAOiC,qBAAqB,KAAKhC,IAAI,CAAC;YACxC;QACF;QAEAjB,SAAS,uBAAuB;YAC9BM,GAAG,oCAAoC;gBACrC,MAAMkD,0BAA0B9D,KAAKc,EAAE,CAAC,CAAC+B,OAAeC,UAAU,IAAI;oBACpE,MAAMC,UAAUF,MAAMG,OAAO,CAAC,OAAO;oBACrC,IAAIF,YAAY,MAAM;wBACpB,OAAOC,QAAQE,MAAM,KAAK,MAAOF,QAAQE,MAAM,KAAK,MAAMF,QAAQgB,UAAU,CAAC;oBAC/E;oBACA,OAAOhB,QAAQE,MAAM,IAAI;gBAC3B;gBAEA3B,OAAOwC,wBAAwB,mBAAmBvC,IAAI,CAAC;gBACvDD,OAAOwC,wBAAwB,iBAAiBvC,IAAI,CAAC;gBACrDD,OAAOwC,wBAAwB,eAAevC,IAAI,CAAC;gBACnDD,OAAOwC,wBAAwB,gBAAgBvC,IAAI,CAAC;YACtD;YAEAX,GAAG,uCAAuC;gBACxC,MAAMkD,0BAA0B9D,KAAKc,EAAE,CAAC,CAAC+B;oBACvC,MAAME,UAAUF,MAAMG,OAAO,CAAC,OAAO;oBACrC,OAAOD,QAAQE,MAAM,KAAK,MAAOF,QAAQE,MAAM,KAAK,MAAMF,QAAQgB,UAAU,CAAC;gBAC/E;gBAEAzC,OAAOwC,wBAAwB,QAAQvC,IAAI,CAAC;gBAC5CD,OAAOwC,wBAAwB,YAAYvC,IAAI,CAAC;gBAChDD,OAAOwC,wBAAwB,KAAKvC,IAAI,CAAC;gBACzCD,OAAOwC,wBAAwB,iBAAiBvC,IAAI,CAAC;YACvD;QACF;QAEAjB,SAAS,oBAAoB;YAC3BM,GAAG,mCAAmC;gBACpC,MAAMoD,uBAAuBhE,KAAKc,EAAE,CAAC,CAACmD;oBACpC,IAAI,OAAOA,UAAU,UAAU;wBAC7B,OAAOA,MAAMC,IAAI,GAAGjB,MAAM,GAAG;oBAC/B;oBACA,OAAOgB,UAAU,QAAQA,UAAUE;gBACrC;gBAEA7C,OAAO0C,qBAAqB,SAASzC,IAAI,CAAC;gBAC1CD,OAAO0C,qBAAqB,aAAazC,IAAI,CAAC;gBAC9CD,OAAO0C,qBAAqB,MAAMzC,IAAI,CAAC;gBACvCD,OAAO0C,qBAAqB,IAAIzC,IAAI,CAAC;gBACrCD,OAAO0C,qBAAqB,QAAQzC,IAAI,CAAC;YAC3C;YAEAX,GAAG,sCAAsC;gBACvC,MAAMoD,uBAAuBhE,KAAKc,EAAE,CAAC,CAACmD;oBACpC,IAAI,OAAOA,UAAU,UAAU;wBAC7B,OAAOA,MAAMC,IAAI,GAAGjB,MAAM,GAAG;oBAC/B;oBACA,OAAOgB,UAAU,QAAQA,UAAUE;gBACrC;gBAEA7C,OAAO0C,qBAAqB,KAAKzC,IAAI,CAAC;gBACtCD,OAAO0C,qBAAqB,QAAQzC,IAAI,CAAC;gBACzCD,OAAO0C,qBAAqB,OAAOzC,IAAI,CAAC;gBACxCD,OAAO0C,qBAAqBG,YAAY5C,IAAI,CAAC;YAC/C;QACF;IACF;IAEAjB,SAAS,4BAA4B;QACnCA,SAAS,cAAc;YACrBM,GAAG,8BAA8B;gBAC/B,MAAMwD,iBAAiBpE,KAAKc,EAAE,CAAC,CAACuD,SAAS,EAAE,EAAEpB,SAAS,CAAC;oBACrD,MAAMqB,QAAQ;oBACd,IAAIC,SAASF;oBACb,IAAK,IAAIG,IAAI,GAAGA,IAAIvB,QAAQuB,IAAK;wBAC/BD,UAAUD,MAAMG,MAAM,CAACC,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAKN,MAAMrB,MAAM;oBAChE;oBACA,OAAOsB;gBACT;gBAEA,MAAMM,MAAMT;gBACZ,MAAMU,MAAMV;gBAEZ9C,OAAOuD,KAAKE,YAAY,CAAC;gBACzBzD,OAAOwD,KAAKC,YAAY,CAAC;gBACzBzD,OAAOuD,KAAKG,GAAG,CAACzD,IAAI,CAACuD;YACvB;YAEAlE,GAAG,qDAAqD;gBACtD,MAAMwD,iBAAiBpE,KAAKc,EAAE,CAAC,CAACuD,SAAS,EAAE,EAAEpB,SAAS,CAAC;oBACrD,MAAMqB,QAAQ;oBACd,IAAIC,SAASF;oBACb,IAAK,IAAIG,IAAI,GAAGA,IAAIvB,QAAQuB,IAAK;wBAC/BD,UAAUD,MAAMG,MAAM,CAACC,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAKN,MAAMrB,MAAM;oBAChE;oBACA,OAAOsB;gBACT;gBAEA,MAAMU,KAAKb,eAAe,SAAS;gBAEnC9C,OAAO2D,IAAIF,YAAY,CAAC,KAAK,8BAA8B;gBAC3DzD,OAAO2D,IAAIC,WAAW,CAAC;YACzB;QACF;QAEA5E,SAAS,WAAW;YAClBM,GAAG,oCAAoC;gBACrC,MAAMuE,cAAcnF,KAAKc,EAAE,CAAC,CAACsE;oBAC3B,OAAOA,KACJC,WAAW,GACXnB,IAAI,GACJlB,OAAO,CAAC,aAAa,IACrBA,OAAO,CAAC,YAAY,KACpBA,OAAO,CAAC,YAAY;gBACzB;gBAEA1B,OAAO6D,YAAY,gBAAgB5D,IAAI,CAAC;gBACxCD,OAAO6D,YAAY,+BAA+B5D,IAAI,CAAC;gBACvDD,OAAO6D,YAAY,0BAA0B5D,IAAI,CAAC;gBAClDD,OAAO6D,YAAY,2BAA2B5D,IAAI,CAAC;YACrD;YAEAX,GAAG,4BAA4B;gBAC7B,MAAMuE,cAAcnF,KAAKc,EAAE,CAAC,CAACsE;oBAC3B,OAAOA,KACJC,WAAW,GACXnB,IAAI,GACJlB,OAAO,CAAC,aAAa,IACrBA,OAAO,CAAC,YAAY,KACpBA,OAAO,CAAC,YAAY;gBACzB;gBAEA1B,OAAO6D,YAAY,KAAK5D,IAAI,CAAC;gBAC7BD,OAAO6D,YAAY,QAAQ5D,IAAI,CAAC;gBAChCD,OAAO6D,YAAY,eAAe5D,IAAI,CAAC;gBACvCD,OAAO6D,YAAY,gBAAgB5D,IAAI,CAAC;YAC1C;QACF;QAEAjB,SAAS,gBAAgB;YACvBM,GAAG,6BAA6B;gBAC9B,MAAM0E,mBAAmBtF,KAAKc,EAAE,CAAC,CAACsE,MAAcG,WAAmBC,SAAS,KAAK;oBAC/E,IAAIJ,KAAKnC,MAAM,IAAIsC,WAAW,OAAOH;oBACrC,OAAOA,KAAKlC,KAAK,CAAC,GAAGqC,YAAYC,OAAOvC,MAAM,IAAIuC;gBACpD;gBAEA,MAAMC,WAAW;gBAEjBnE,OAAOgE,iBAAiBG,UAAU,KAAKlE,IAAI,CAAC;gBAC5CD,OAAOgE,iBAAiBG,UAAU,KAAKlE,IAAI,CAAC;gBAC5CD,OAAOgE,iBAAiB,SAAS,KAAK/D,IAAI,CAAC;YAC7C;YAEAX,GAAG,+BAA+B;gBAChC,MAAM0E,mBAAmBtF,KAAKc,EAAE,CAAC,CAACsE,MAAcG,WAAmBC,SAAS,KAAK;oBAC/E,IAAIJ,KAAKnC,MAAM,IAAIsC,WAAW,OAAOH;oBACrC,OAAOA,KAAKlC,KAAK,CAAC,GAAGqC,YAAYC,OAAOvC,MAAM,IAAIuC;gBACpD;gBAEA,MAAMJ,OAAO;gBAEb9D,OAAOgE,iBAAiBF,MAAM,IAAI,YAAY7D,IAAI,CAAC;gBACnDD,OAAOgE,iBAAiBF,MAAM,IAAI,KAAK7D,IAAI,CAAC;YAC9C;QACF;QAEAjB,SAAS,YAAY;YACnBM,GAAG,kCAAkC;gBACnC,IAAI8E,YAAY;gBAChB,MAAMC,eAAe3F,KAAKc,EAAE,CAAC,IAAM4E;gBAEnC,MAAME,eAAe5F,KAAKc,EAAE,CAAC,CAAC+E,MAAgBC;oBAC5C,IAAIC;oBACJ,OAAO,CAAC,GAAGC;wBACTC,aAAaF;wBACbA,YAAYG,WAAW,IAAML,KAAKM,KAAK,CAAC,MAAMH,OAAOF;oBACvD;gBACF;gBAEA,MAAMM,oBAAoBR,aAAaD,cAAc;gBAErD,8BAA8B;gBAC9BS;gBACAA;gBACAA;gBAEA,kCAAkC;gBAClC9E,OAAOqE,cAAcX,GAAG,CAACqB,gBAAgB;gBAEzC,0BAA0B;gBAC1B,MAAM,IAAIC,QAAQC,CAAAA,UAAWL,WAAWK,SAAS;gBAEjD,oCAAoC;gBACpCjF,OAAOqE,cAAca,qBAAqB,CAAC;YAC7C;QACF;QAEAlG,SAAS,YAAY;YACnBM,GAAG,kCAAkC;gBACnC,IAAI8E,YAAY;gBAChB,MAAMC,eAAe3F,KAAKc,EAAE,CAAC,IAAM4E;gBAEnC,MAAMe,eAAezG,KAAKc,EAAE,CAAC,CAAC+E,MAAgBC;oBAC5C,IAAIY,WAAW;oBACf,OAAO,CAAC,GAAGV;wBACT,MAAMW,MAAM5E,KAAK4E,GAAG;wBACpB,IAAIA,MAAMD,YAAYZ,OAAO;4BAC3BY,WAAWC;4BACX,OAAOd,KAAKM,KAAK,CAAC,MAAMH;wBAC1B;oBACF;gBACF;gBAEA,MAAMY,oBAAoBH,aAAad,cAAc;gBAErD,8BAA8B;gBAC9BiB;gBACAA;gBACAA;gBAEA,gDAAgD;gBAChDtF,OAAOqE,cAAca,qBAAqB,CAAC;gBAE3C,0BAA0B;gBAC1B,MAAM,IAAIF,QAAQC,CAAAA,UAAWL,WAAWK,SAAS;gBAEjD,aAAa;gBACbK;gBAEA,sCAAsC;gBACtCtF,OAAOqE,cAAca,qBAAqB,CAAC;YAC7C;QACF;IACF;IAEAlG,SAAS,yBAAyB;QAChCA,SAAS,gBAAgB;YACvBM,GAAG,kCAAkC;gBACnC,MAAMiG,mBAAmB7G,KAAKc,EAAE,CAAC,CAACC,QAAgB+F;oBAChD,OAAOpC,KAAKqC,KAAK,CAAC,AAAChG,SAAS+F,UAAW,OAAO;gBAChD;gBAEAxF,OAAOuF,iBAAiB,KAAK,OAAOtF,IAAI,CAAC;gBACzCD,OAAOuF,iBAAiB,QAAQ,QAAQtF,IAAI,CAAC;gBAC7CD,OAAOuF,iBAAiB,GAAG,OAAOtF,IAAI,CAAC;YACzC;YAEAX,GAAG,4BAA4B;gBAC7B,MAAMiG,mBAAmB7G,KAAKc,EAAE,CAAC,CAACC,QAAgB+F;oBAChD,IAAI/F,SAAS,KAAK+F,UAAU,GAAG,OAAO;oBACtC,OAAOpC,KAAKqC,KAAK,CAAC,AAAChG,SAAS+F,UAAW,OAAO;gBAChD;gBAEAxF,OAAOuF,iBAAiB,CAAC,KAAK,OAAOtF,IAAI,CAAC;gBAC1CD,OAAOuF,iBAAiB,KAAK,CAAC,OAAOtF,IAAI,CAAC;gBAC1CD,OAAOuF,iBAAiB,KAAK,IAAItF,IAAI,CAAC;YACxC;QACF;QAEAjB,SAAS,qBAAqB;YAC5BM,GAAG,wCAAwC;gBACzC,MAAMoG,wBAAwBhH,KAAKc,EAAE,CAAC,CAACC,QAAgBkG,UAAkBC,eAAe,IAAI;oBAC1F,IAAIA,cAAc;wBAChB,OAAOxC,KAAKqC,KAAK,CAAC,AAAChG,SAAUkG,CAAAA,WAAW,GAAE,IAAM,OAAO;oBACzD;oBACA,OAAOvC,KAAKyC,GAAG,CAACF,UAAUlG;gBAC5B;gBAEAO,OAAO0F,sBAAsB,KAAK,IAAI,OAAOzF,IAAI,CAAC;gBAClDD,OAAO0F,sBAAsB,KAAK,IAAI,OAAOzF,IAAI,CAAC;gBAClDD,OAAO0F,sBAAsB,IAAI,IAAI,OAAOzF,IAAI,CAAC;YACnD;YAEAX,GAAG,mCAAmC;gBACpC,MAAMoG,wBAAwBhH,KAAKc,EAAE,CAAC,CAACC,QAAgBkG,UAAkBC,eAAe,IAAI;oBAC1F,IAAIA,cAAc;wBAChB,OAAOxC,KAAKqC,KAAK,CAAC,AAAChG,SAAUkG,CAAAA,WAAW,GAAE,IAAM,OAAO;oBACzD;oBACA,OAAOvC,KAAKyC,GAAG,CAACF,UAAUlG;gBAC5B;gBAEAO,OAAO0F,sBAAsB,KAAK,IAAI,QAAQzF,IAAI,CAAC;gBACnDD,OAAO0F,sBAAsB,IAAI,IAAI,QAAQzF,IAAI,CAAC,KAAK,kCAAkC;gBACzFD,OAAO0F,sBAAsB,KAAK,IAAI,QAAQzF,IAAI,CAAC;YACrD;QACF;QAEAjB,SAAS,kBAAkB;YACzBM,GAAG,gDAAgD;gBACjD,MAAMwG,qBAAqBpH,KAAKc,EAAE,CAAC,CAACuG,UAAkBC,KAAaL;oBACjE,MAAMM,gBAAgBF,WAAWJ;oBACjC,OAAOvC,KAAKqC,KAAK,CAAC,AAACQ,CAAAA,gBAAgBD,GAAE,IAAK,OAAO;gBACnD;gBAEAhG,OAAO8F,mBAAmB,KAAK,GAAG,KAAK7F,IAAI,CAAC,KAAK,eAAe;gBAChED,OAAO8F,mBAAmB,KAAK,IAAI,KAAK7F,IAAI,CAAC,MAAM,gBAAgB;gBACnED,OAAO8F,mBAAmB,IAAI,GAAG,IAAI7F,IAAI,CAAC;YAC5C;YAEAX,GAAG,kCAAkC;gBACnC,MAAMwG,qBAAqBpH,KAAKc,EAAE,CAAC,CAACuG,UAAkBC,KAAaL;oBACjE,MAAMM,gBAAgBF,WAAWJ;oBACjC,MAAMO,QAAQD,gBAAgBD;oBAC9B,OAAO5C,KAAK+C,GAAG,CAAC,GAAG/C,KAAKqC,KAAK,CAACS,QAAQ,OAAO;gBAC/C;gBAEAlG,OAAO8F,mBAAmB,IAAI,GAAG,KAAK7F,IAAI,CAAC,IAAI,oBAAoB;gBACnED,OAAO8F,mBAAmB,GAAG,GAAG,IAAI7F,IAAI,CAAC;YAC3C;QACF;IACF;IAEAjB,SAAS,0BAA0B;QACjCA,SAAS,iBAAiB;YACxBM,GAAG,8BAA8B;gBAC/B,MAAM8G,oBAAoB1H,KAAKc,EAAE,CAAC,CAAC6G;oBACjC,OAAOA,MACJ3E,OAAO,CAAC,gCAAgC,IACxCA,OAAO,CAAC,YAAY,IACpBkB,IAAI;gBACT;gBAEA5C,OAAOoG,kBAAkB,8CAA8CnG,IAAI,CAAC;gBAC5ED,OAAOoG,kBAAkB,qBAAqBnG,IAAI,CAAC;gBACnDD,OAAOoG,kBAAkB,oBAAoBnG,IAAI,CAAC;YACpD;YAEAX,GAAG,iCAAiC;gBAClC,MAAM8G,oBAAoB1H,KAAKc,EAAE,CAAC,CAAC6G;oBACjC,OAAOA,MACJ3E,OAAO,CAAC,gCAAgC,IACxCA,OAAO,CAAC,iBAAiB,IACzBA,OAAO,CAAC,eAAe,IACvBA,OAAO,CAAC,YAAY,IACpBkB,IAAI;gBACT;gBAEA5C,OAAOoG,kBAAkB,qCAAqCnG,IAAI,CAAC;gBACnED,OAAOoG,kBAAkB,4BAA4BnG,IAAI,CAAC;gBAC1DD,OAAOoG,kBAAkB,0CAA0CnG,IAAI,CAAC;YAC1E;QACF;QAEAjB,SAAS,cAAc;YACrBM,GAAG,+BAA+B;gBAChC,MAAMgH,iBAAiB5H,KAAKc,EAAE,CAAC,CAACsE;oBAC9B,MAAMyC,YAAuC;wBAC3C,KAAK;wBACL,KAAK;wBACL,KAAK;wBACL,KAAK;wBACL,KAAK;oBACP;oBACA,OAAOzC,KAAKpC,OAAO,CAAC,YAAY,CAAC8E,OAASD,SAAS,CAACC,KAAK;gBAC3D;gBAEAxG,OAAOsG,eAAe,+BAA+BrG,IAAI,CAAC;gBAC1DD,OAAOsG,eAAe,kBAAkBrG,IAAI,CAAC;gBAC7CD,OAAOsG,eAAe,gBAAgBrG,IAAI,CAAC;YAC7C;QACF;QAEAjB,SAAS,oBAAoB;YAC3BM,GAAG,qCAAqC;gBACtC,MAAMmH,uBAAuB/H,KAAKc,EAAE,CAAC,CAACkH;oBACpC,MAAMC,SAAoC,CAAC;oBAC3C,MAAMC,YAAY,IAAIC,gBAAgBH;oBACtC,KAAK,MAAM,CAACI,KAAKnE,MAAM,IAAIiE,UAAW;wBACpCD,MAAM,CAACG,IAAI,GAAGnE;oBAChB;oBACA,OAAOgE;gBACT;gBAEA3G,OAAOyG,qBAAqB,+BAA+BM,OAAO,CAAC;oBACjEC,MAAM;oBACNC,KAAK;oBACLC,MAAM;gBACR;gBAEAlH,OAAOyG,qBAAqB,gCAAgCM,OAAO,CAAC;oBAClEI,QAAQ;oBACRC,MAAM;oBACNC,OAAO;gBACT;YACF;YAEA/H,GAAG,kDAAkD;gBACnD,MAAMmH,uBAAuB/H,KAAKc,EAAE,CAAC,CAACkH;oBACpC,MAAMC,SAAoC,CAAC;oBAC3C,IAAI;wBACF,MAAMC,YAAY,IAAIC,gBAAgBH;wBACtC,KAAK,MAAM,CAACI,KAAKnE,MAAM,IAAIiE,UAAW;4BACpCD,MAAM,CAACG,IAAI,GAAGnE;wBAChB;oBACF,EAAE,OAAO7D,OAAO;oBACd,4CAA4C;oBAC9C;oBACA,OAAO6H;gBACT;gBAEA3G,OAAOyG,qBAAqB,KAAKM,OAAO,CAAC,CAAC;gBAC1C/G,OAAOyG,qBAAqB,MAAMM,OAAO,CAAC,CAAC;gBAC3C/G,OAAOyG,qBAAqB,YAAYM,OAAO,CAAC,CAAC;YACnD;YAEAzH,GAAG,8BAA8B;gBAC/B,MAAMmH,uBAAuB/H,KAAKc,EAAE,CAAC,CAACkH;oBACpC,MAAMC,SAAoC,CAAC;oBAC3C,MAAMC,YAAY,IAAIC,gBAAgBH;oBACtC,KAAK,MAAM,CAACI,KAAKnE,MAAM,IAAIiE,UAAW;wBACpCD,MAAM,CAACG,IAAI,GAAGQ,mBAAmB3E;oBACnC;oBACA,OAAOgE;gBACT;gBAEA3G,OAAOyG,qBAAqB,2CAA2CM,OAAO,CAAC;oBAC7EI,QAAQ;oBACRI,SAAS;gBACX;YACF;QACF;IACF;IAEAvI,SAAS,+BAA+B;QACtCM,GAAG,gDAAgD;YACjD,MAAMkI,8BAA8B9I,KAAKc,EAAE,CAAC,CAACC;gBAC3C,IAAI;oBACF,IAAI,OAAOA,WAAW,UAAU;wBAC9B,MAAM,IAAIgI,MAAM;oBAClB;oBACA,OAAO,CAAC,CAAC,EAAEhI,OAAOiI,OAAO,CAAC,GAAG,CAAC;gBAChC,EAAE,OAAO5I,OAAO;oBACdN,WAAWM,KAAK,CAAC,8BAA8BA;oBAC/C,OAAO;gBACT;YACF;YAEAkB,OAAOwH,4BAA4B,YAAYvH,IAAI,CAAC;YACpDD,OAAOxB,WAAWM,KAAK,EAAE6I,oBAAoB,CAC3C,8BACA3H,OAAO4H,GAAG,CAACH;QAEf;QAEAnI,GAAG,gDAAgD;YACjD,MAAMuI,6BAA6BnJ,KAAKc,EAAE,CAAC,CAACsC;gBAC1C,IAAI;oBACF,IAAI,OAAOA,UAAU,UAAU;wBAC7B,MAAM,IAAI2F,MAAM;oBAClB;oBACA,OAAO,6BAA6BzF,IAAI,CAACF;gBAC3C,EAAE,OAAOhD,OAAO;oBACdN,WAAWM,KAAK,CAAC,2BAA2BA;oBAC5C,OAAO;gBACT;YACF;YAEAkB,OAAO6H,2BAA2B,OAAO5H,IAAI,CAAC;YAC9CD,OAAO6H,2BAA2B,MAAM5H,IAAI,CAAC;YAC7CD,OAAOxB,WAAWM,KAAK,EAAE6I,oBAAoB,CAC3C,2BACA3H,OAAO4H,GAAG,CAACH;QAEf;QAEAnI,GAAG,6CAA6C;YAC9C,MAAMwI,uBAAuBpJ,KAAKc,EAAE,CAAC,CAACsE;gBACpC,IAAI;oBACF,IAAI,OAAOA,SAAS,UAAU;wBAC5B,MAAM,IAAI2D,MAAM;oBAClB;oBACA,OAAO3D,KAAKC,WAAW,GAAGrC,OAAO,CAAC,cAAc;gBAClD,EAAE,OAAO5C,OAAO;oBACdN,WAAWM,KAAK,CAAC,kBAAkBA;oBACnC,OAAO;gBACT;YACF;YAEAkB,OAAO8H,qBAAqB,OAAO7H,IAAI,CAAC;YACxCD,OAAO8H,qBAAqB,CAAC,IAAI7H,IAAI,CAAC;YACtCD,OAAOxB,WAAWM,KAAK,EAAE6I,oBAAoB,CAC3C,kBACA3H,OAAO4H,GAAG,CAACH;QAEf;IACF;IAEAzI,SAAS,mCAAmC;QAC1CM,GAAG,4CAA4C;YAC7C,MAAMyI,mBAAmBrJ,KAAKc,EAAE,CAAC,CAACwI,OAAcC,YAAY,GAAG;gBAC7D,MAAMC,UAAU,EAAE;gBAClB,IAAK,IAAIhF,IAAI,GAAGA,IAAI8E,MAAMrG,MAAM,EAAEuB,KAAK+E,UAAW;oBAChD,MAAME,QAAQH,MAAMpG,KAAK,CAACsB,GAAGA,IAAI+E;oBACjCC,QAAQE,IAAI,IAAID,MAAME,GAAG,CAACC,CAAAA,OAAQA,KAAK3E,EAAE;gBAC3C;gBACA,OAAOuE;YACT;YAEA,MAAMK,eAAeC,MAAMC,IAAI,CAAC;gBAAE9G,QAAQ;YAAM,GAAG,CAAC+G,GAAGxF,IAAO,CAAA;oBAAES,IAAIT;oBAAG8D,MAAM,CAAC,KAAK,EAAE9D,EAAE,CAAC;gBAAC,CAAA;YAEzF,MAAMyF,YAAYlI,KAAK4E,GAAG;YAC1B,MAAMpC,SAAS8E,iBAAiBQ;YAChC,MAAMK,UAAUnI,KAAK4E,GAAG;YAExBrF,OAAOiD,QAAQQ,YAAY,CAAC;YAC5BzD,OAAO4I,UAAUD,WAAWE,YAAY,CAAC,MAAM,yBAAyB;QAC1E;QAEAvJ,GAAG,+CAA+C;YAChD,MAAMwJ,mBAAmBpK,KAAKc,EAAE,CAAC,OAAOuJ;gBACtC,MAAM,IAAI/D,QAAQC,CAAAA,UAAWL,WAAWK,SAAS;gBACjD,OAAO8D,KAAKC,WAAW;YACzB;YAEA,MAAMC,aAAaT,MAAMC,IAAI,CAAC;gBAAE9G,QAAQ;YAAI,GAAG,CAAC+G,GAAGxF,IACjD4F,iBAAiB,CAAC,KAAK,EAAE5F,EAAE,CAAC;YAG9B,MAAMyF,YAAYlI,KAAK4E,GAAG;YAC1B,MAAM6C,UAAU,MAAMlD,QAAQkE,GAAG,CAACD;YAClC,MAAML,UAAUnI,KAAK4E,GAAG;YAExBrF,OAAOkI,SAASzE,YAAY,CAAC;YAC7BzD,OAAOkI,OAAO,CAAC,EAAE,EAAEjI,IAAI,CAAC;YACxBD,OAAO4I,UAAUD,WAAWE,YAAY,CAAC,MAAM,iCAAiC;QAClF;IACF;AACF"}