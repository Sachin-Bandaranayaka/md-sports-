57865ca80180ddfa7fd6729e82303c5a
"use strict";

/* istanbul ignore next */
function cov_2ew3kg3trd() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/distribution/route.ts";
  var hash = "75a135768dca9f8c13e0ec444530da983bdde8ce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/distribution/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 71
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 110,
          column: 2
        }
      },
      "7": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 63
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "10": {
        start: {
          line: 53,
          column: 36
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "11": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "12": {
        start: {
          line: 54,
          column: 68
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "13": {
        start: {
          line: 60,
          column: 31
        },
        end: {
          line: 60,
          column: 90
        }
      },
      "14": {
        start: {
          line: 60,
          column: 65
        },
        end: {
          line: 60,
          column: 86
        }
      },
      "15": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "16": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "17": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "18": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "19": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "20": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 81,
          column: 23
        }
      },
      "21": {
        start: {
          line: 85,
          column: 22
        },
        end: {
          line: 85,
          column: 94
        }
      },
      "22": {
        start: {
          line: 85,
          column: 65
        },
        end: {
          line: 85,
          column: 93
        }
      },
      "23": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 100
        }
      },
      "24": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "25": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 71
        }
      },
      "26": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 61
          },
          end: {
            line: 14,
            column: 62
          }
        },
        loc: {
          start: {
            line: 14,
            column: 87
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 49
          },
          end: {
            line: 53,
            column: 50
          }
        },
        loc: {
          start: {
            line: 53,
            column: 60
          },
          end: {
            line: 71,
            column: 9
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 59
          },
          end: {
            line: 54,
            column: 60
          }
        },
        loc: {
          start: {
            line: 54,
            column: 68
          },
          end: {
            line: 59,
            column: 17
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 50
          },
          end: {
            line: 60,
            column: 51
          }
        },
        loc: {
          start: {
            line: 60,
            column: 65
          },
          end: {
            line: 60,
            column: 86
          }
        },
        line: 60
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 26
          }
        },
        loc: {
          start: {
            line: 74,
            column: 36
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 43
          },
          end: {
            line: 75,
            column: 44
          }
        },
        loc: {
          start: {
            line: 75,
            column: 51
          },
          end: {
            line: 83,
            column: 13
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 57
          },
          end: {
            line: 85,
            column: 58
          }
        },
        loc: {
          start: {
            line: 85,
            column: 65
          },
          end: {
            line: 85,
            column: 93
          }
        },
        line: 85
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 25,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 58
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 18
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 19,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 19,
            column: 37
          }
        }, {
          start: {
            line: 19,
            column: 41
          },
          end: {
            line: 19,
            column: 55
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 36,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 66
          },
          end: {
            line: 36,
            column: 21
          }
        }, {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 36,
            column: 26
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 34,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 34,
            column: 45
          }
        }, {
          start: {
            line: 34,
            column: 49
          },
          end: {
            line: 34,
            column: 63
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 59
          }
        }, {
          start: {
            line: 58,
            column: 63
          },
          end: {
            line: 58,
            column: 64
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 32
          }
        }, {
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 64,
            column: 38
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 65,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 65,
            column: 42
          }
        }, {
          start: {
            line: 65,
            column: 46
          },
          end: {
            line: 65,
            column: 47
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 37
          },
          end: {
            line: 66,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 37
          },
          end: {
            line: 66,
            column: 64
          }
        }, {
          start: {
            line: 66,
            column: 68
          },
          end: {
            line: 66,
            column: 69
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 19
          },
          end: {
            line: 105,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 44
          },
          end: {
            line: 105,
            column: 57
          }
        }, {
          start: {
            line: 105,
            column: 60
          },
          end: {
            line: 105,
            column: 73
          }
        }],
        line: 105
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/distribution/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\n// Optimized endpoint for inventory distribution page\n// Gets all products with their inventory data in ONE database query\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        console.log('Fetching inventory distribution data...');\n        \n        // Single optimized query to get all products with inventory\n        const products = await prisma.product.findMany({\n            where: context.isFiltered && context.shopId ? {\n                inventoryItems: {\n                    some: {\n                        shopId: context.shopId\n                    }\n                }\n            } : {},\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                inventoryItems: {\n                    where: context.isFiltered && context.shopId ? {\n                        shopId: context.shopId\n                    } : {},\n                    include: {\n                        shop: {\n                            select: {\n                                id: true,\n                                name: true,\n                                location: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        // Transform data for the frontend\n        const transformedProducts = products.map(product => {\n            const branchStock = product.inventoryItems.map(item => ({\n                shopId: item.shopId,\n                shopName: item.shop.name,\n                quantity: item.quantity,\n                shopSpecificCost: item.shopSpecificCost || 0\n            }));\n\n            const totalStock = branchStock.reduce((sum, branch) => sum + branch.quantity, 0);\n\n            return {\n                id: product.id,\n                name: product.name,\n                sku: product.sku || '',\n                retailPrice: product.price || 0,\n                weightedAverageCost: product.weightedAverageCost || 0,\n                totalStock,\n                branchStock,\n                category: product.category\n            };\n        });\n\n        // Extract unique shops\n        const shopsMap = new Map();\n        products.forEach(product => {\n            product.inventoryItems.forEach(item => {\n                if (!shopsMap.has(item.shopId)) {\n                    shopsMap.set(item.shopId, {\n                        id: item.shopId,\n                        name: item.shop.name,\n                        location: item.shop.location\n                    });\n                }\n            });\n        });\n\n        const shops = Array.from(shopsMap.values()).sort((a, b) => \n            a.name.localeCompare(b.name)\n        );\n\n        console.log(`Retrieved ${transformedProducts.length} products with inventory distribution`);\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                products: transformedProducts,\n                shops: shops\n            },\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                totalProducts: transformedProducts.length,\n                totalShops: shops.length\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching inventory distribution:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching inventory distribution data',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}); "],
      names: ["GET", "ShopAccessControl", "withShopAccess", "request", "context", "console", "log", "products", "prisma", "product", "findMany", "where", "isFiltered", "shopId", "inventoryItems", "some", "include", "category", "select", "id", "name", "shop", "location", "orderBy", "transformedProducts", "map", "branchStock", "item", "shopName", "quantity", "shopSpecificCost", "totalStock", "reduce", "sum", "branch", "sku", "retailPrice", "price", "weightedAverageCost", "shopsMap", "Map", "forEach", "has", "set", "shops", "Array", "from", "values", "sort", "a", "b", "localeCompare", "length", "NextResponse", "json", "success", "data", "meta", "shopFiltered", "totalProducts", "totalShops", "error", "message", "Error", "String", "status"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "75a135768dca9f8c13e0ec444530da983bdde8ce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ew3kg3trd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ew3kg3trd();
cov_2ew3kg3trd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ew3kg3trd().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2ew3kg3trd().f[0]++;
    cov_2ew3kg3trd().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ew3kg3trd().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2ew3kg3trd().s[4]++, require("../../../../lib/prisma"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_2ew3kg3trd().s[5]++, require("../../../../lib/utils/shopMiddleware"));
const GET =
/* istanbul ignore next */
(cov_2ew3kg3trd().s[6]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_2ew3kg3trd().f[1]++;
  cov_2ew3kg3trd().s[7]++;
  try {
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[8]++;
    console.log("Fetching inventory distribution data...");
    // Single optimized query to get all products with inventory
    const products =
    /* istanbul ignore next */
    (cov_2ew3kg3trd().s[9]++, await _prisma.prisma.product.findMany({
      where:
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[1][0]++, context.isFiltered) &&
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[1][1]++, context.shopId) ?
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[0][0]++, {
        inventoryItems: {
          some: {
            shopId: context.shopId
          }
        }
      }) :
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[0][1]++, {}),
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        },
        inventoryItems: {
          where:
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[3][0]++, context.isFiltered) &&
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[3][1]++, context.shopId) ?
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[2][0]++, {
            shopId: context.shopId
          }) :
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[2][1]++, {}),
          include: {
            shop: {
              select: {
                id: true,
                name: true,
                location: true
              }
            }
          }
        }
      },
      orderBy: {
        name: "asc"
      }
    }));
    // Transform data for the frontend
    const transformedProducts =
    /* istanbul ignore next */
    (cov_2ew3kg3trd().s[10]++, products.map(product => {
      /* istanbul ignore next */
      cov_2ew3kg3trd().f[2]++;
      const branchStock =
      /* istanbul ignore next */
      (cov_2ew3kg3trd().s[11]++, product.inventoryItems.map(item => {
        /* istanbul ignore next */
        cov_2ew3kg3trd().f[3]++;
        cov_2ew3kg3trd().s[12]++;
        return {
          shopId: item.shopId,
          shopName: item.shop.name,
          quantity: item.quantity,
          shopSpecificCost:
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[4][0]++, item.shopSpecificCost) ||
          /* istanbul ignore next */
          (cov_2ew3kg3trd().b[4][1]++, 0)
        };
      }));
      const totalStock =
      /* istanbul ignore next */
      (cov_2ew3kg3trd().s[13]++, branchStock.reduce((sum, branch) => {
        /* istanbul ignore next */
        cov_2ew3kg3trd().f[4]++;
        cov_2ew3kg3trd().s[14]++;
        return sum + branch.quantity;
      }, 0));
      /* istanbul ignore next */
      cov_2ew3kg3trd().s[15]++;
      return {
        id: product.id,
        name: product.name,
        sku:
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[5][0]++, product.sku) ||
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[5][1]++, ""),
        retailPrice:
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[6][0]++, product.price) ||
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[6][1]++, 0),
        weightedAverageCost:
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[7][0]++, product.weightedAverageCost) ||
        /* istanbul ignore next */
        (cov_2ew3kg3trd().b[7][1]++, 0),
        totalStock,
        branchStock,
        category: product.category
      };
    }));
    // Extract unique shops
    const shopsMap =
    /* istanbul ignore next */
    (cov_2ew3kg3trd().s[16]++, new Map());
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[17]++;
    products.forEach(product => {
      /* istanbul ignore next */
      cov_2ew3kg3trd().f[5]++;
      cov_2ew3kg3trd().s[18]++;
      product.inventoryItems.forEach(item => {
        /* istanbul ignore next */
        cov_2ew3kg3trd().f[6]++;
        cov_2ew3kg3trd().s[19]++;
        if (!shopsMap.has(item.shopId)) {
          /* istanbul ignore next */
          cov_2ew3kg3trd().b[8][0]++;
          cov_2ew3kg3trd().s[20]++;
          shopsMap.set(item.shopId, {
            id: item.shopId,
            name: item.shop.name,
            location: item.shop.location
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ew3kg3trd().b[8][1]++;
        }
      });
    });
    const shops =
    /* istanbul ignore next */
    (cov_2ew3kg3trd().s[21]++, Array.from(shopsMap.values()).sort((a, b) => {
      /* istanbul ignore next */
      cov_2ew3kg3trd().f[7]++;
      cov_2ew3kg3trd().s[22]++;
      return a.name.localeCompare(b.name);
    }));
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[23]++;
    console.log(`Retrieved ${transformedProducts.length} products with inventory distribution`);
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[24]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        products: transformedProducts,
        shops: shops
      },
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        totalProducts: transformedProducts.length,
        totalShops: shops.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[25]++;
    console.error("Error fetching inventory distribution:", error);
    /* istanbul ignore next */
    cov_2ew3kg3trd().s[26]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching inventory distribution data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ew3kg3trd().b[9][1]++, String(error))
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmV3M2tnM3RyZCIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsIl9zaG9wTWlkZGxld2FyZSIsIlNob3BBY2Nlc3NDb250cm9sIiwid2l0aFNob3BBY2Nlc3MiLCJyZXF1ZXN0IiwiY29udGV4dCIsImYiLCJjb25zb2xlIiwibG9nIiwicHJvZHVjdHMiLCJfcHJpc21hIiwicHJpc21hIiwicHJvZHVjdCIsImZpbmRNYW55Iiwid2hlcmUiLCJiIiwiaXNGaWx0ZXJlZCIsInNob3BJZCIsImludmVudG9yeUl0ZW1zIiwic29tZSIsImluY2x1ZGUiLCJjYXRlZ29yeSIsInNlbGVjdCIsImlkIiwibmFtZSIsInNob3AiLCJsb2NhdGlvbiIsIm9yZGVyQnkiLCJ0cmFuc2Zvcm1lZFByb2R1Y3RzIiwibWFwIiwiYnJhbmNoU3RvY2siLCJpdGVtIiwic2hvcE5hbWUiLCJxdWFudGl0eSIsInNob3BTcGVjaWZpY0Nvc3QiLCJ0b3RhbFN0b2NrIiwicmVkdWNlIiwic3VtIiwiYnJhbmNoIiwic2t1IiwicmV0YWlsUHJpY2UiLCJwcmljZSIsIndlaWdodGVkQXZlcmFnZUNvc3QiLCJzaG9wc01hcCIsIk1hcCIsImZvckVhY2giLCJoYXMiLCJzZXQiLCJzaG9wcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInNvcnQiLCJhIiwibG9jYWxlQ29tcGFyZSIsImxlbmd0aCIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJtZXRhIiwic2hvcEZpbHRlcmVkIiwidG90YWxQcm9kdWN0cyIsInRvdGFsU2hvcHMiLCJlcnJvciIsIm1lc3NhZ2UiLCJFcnJvciIsIlN0cmluZyIsInN0YXR1cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2FwcC9hcGkvaW52ZW50b3J5L2Rpc3RyaWJ1dGlvbi9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJztcbmltcG9ydCB7IFNob3BBY2Nlc3NDb250cm9sIH0gZnJvbSAnQC9saWIvdXRpbHMvc2hvcE1pZGRsZXdhcmUnO1xuXG4vLyBPcHRpbWl6ZWQgZW5kcG9pbnQgZm9yIGludmVudG9yeSBkaXN0cmlidXRpb24gcGFnZVxuLy8gR2V0cyBhbGwgcHJvZHVjdHMgd2l0aCB0aGVpciBpbnZlbnRvcnkgZGF0YSBpbiBPTkUgZGF0YWJhc2UgcXVlcnlcbmV4cG9ydCBjb25zdCBHRVQgPSBTaG9wQWNjZXNzQ29udHJvbC53aXRoU2hvcEFjY2Vzcyhhc3luYyAocmVxdWVzdDogTmV4dFJlcXVlc3QsIGNvbnRleHQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgaW52ZW50b3J5IGRpc3RyaWJ1dGlvbiBkYXRhLi4uJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaW5nbGUgb3B0aW1pemVkIHF1ZXJ5IHRvIGdldCBhbGwgcHJvZHVjdHMgd2l0aCBpbnZlbnRvcnlcbiAgICAgICAgY29uc3QgcHJvZHVjdHMgPSBhd2FpdCBwcmlzbWEucHJvZHVjdC5maW5kTWFueSh7XG4gICAgICAgICAgICB3aGVyZTogY29udGV4dC5pc0ZpbHRlcmVkICYmIGNvbnRleHQuc2hvcElkID8ge1xuICAgICAgICAgICAgICAgIGludmVudG9yeUl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNvbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3BJZDogY29udGV4dC5zaG9wSWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiB7fSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeToge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnZlbnRvcnlJdGVtczoge1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogY29udGV4dC5pc0ZpbHRlcmVkICYmIGNvbnRleHQuc2hvcElkID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvcElkOiBjb250ZXh0LnNob3BJZFxuICAgICAgICAgICAgICAgICAgICB9IDoge30sXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3A6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYXNjJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUcmFuc2Zvcm0gZGF0YSBmb3IgdGhlIGZyb250ZW5kXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkUHJvZHVjdHMgPSBwcm9kdWN0cy5tYXAocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCBicmFuY2hTdG9jayA9IHByb2R1Y3QuaW52ZW50b3J5SXRlbXMubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgICAgICAgICBzaG9wSWQ6IGl0ZW0uc2hvcElkLFxuICAgICAgICAgICAgICAgIHNob3BOYW1lOiBpdGVtLnNob3AubmFtZSxcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICBzaG9wU3BlY2lmaWNDb3N0OiBpdGVtLnNob3BTcGVjaWZpY0Nvc3QgfHwgMFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBjb25zdCB0b3RhbFN0b2NrID0gYnJhbmNoU3RvY2sucmVkdWNlKChzdW0sIGJyYW5jaCkgPT4gc3VtICsgYnJhbmNoLnF1YW50aXR5LCAwKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogcHJvZHVjdC5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBwcm9kdWN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc2t1OiBwcm9kdWN0LnNrdSB8fCAnJyxcbiAgICAgICAgICAgICAgICByZXRhaWxQcmljZTogcHJvZHVjdC5wcmljZSB8fCAwLFxuICAgICAgICAgICAgICAgIHdlaWdodGVkQXZlcmFnZUNvc3Q6IHByb2R1Y3Qud2VpZ2h0ZWRBdmVyYWdlQ29zdCB8fCAwLFxuICAgICAgICAgICAgICAgIHRvdGFsU3RvY2ssXG4gICAgICAgICAgICAgICAgYnJhbmNoU3RvY2ssXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHByb2R1Y3QuY2F0ZWdvcnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEV4dHJhY3QgdW5pcXVlIHNob3BzXG4gICAgICAgIGNvbnN0IHNob3BzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBwcm9kdWN0cy5mb3JFYWNoKHByb2R1Y3QgPT4ge1xuICAgICAgICAgICAgcHJvZHVjdC5pbnZlbnRvcnlJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc2hvcHNNYXAuaGFzKGl0ZW0uc2hvcElkKSkge1xuICAgICAgICAgICAgICAgICAgICBzaG9wc01hcC5zZXQoaXRlbS5zaG9wSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLnNob3BJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0uc2hvcC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGl0ZW0uc2hvcC5sb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2hvcHMgPSBBcnJheS5mcm9tKHNob3BzTWFwLnZhbHVlcygpKS5zb3J0KChhLCBiKSA9PiBcbiAgICAgICAgICAgIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhgUmV0cmlldmVkICR7dHJhbnNmb3JtZWRQcm9kdWN0cy5sZW5ndGh9IHByb2R1Y3RzIHdpdGggaW52ZW50b3J5IGRpc3RyaWJ1dGlvbmApO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHByb2R1Y3RzOiB0cmFuc2Zvcm1lZFByb2R1Y3RzLFxuICAgICAgICAgICAgICAgIHNob3BzOiBzaG9wc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICBzaG9wRmlsdGVyZWQ6IGNvbnRleHQuaXNGaWx0ZXJlZCxcbiAgICAgICAgICAgICAgICBzaG9wSWQ6IGNvbnRleHQuc2hvcElkLFxuICAgICAgICAgICAgICAgIHRvdGFsUHJvZHVjdHM6IHRyYW5zZm9ybWVkUHJvZHVjdHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHRvdGFsU2hvcHM6IHNob3BzLmxlbmd0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGludmVudG9yeSBkaXN0cmlidXRpb246JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgaW52ZW50b3J5IGRpc3RyaWJ1dGlvbiBkYXRhJyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICB9XG59KTsgIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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