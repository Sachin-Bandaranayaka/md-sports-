76dae99b45abb8ff23726c7d3862f170
"use strict";

/* istanbul ignore next */
function cov_18rbj5g0f7() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts";
  var hash = "ae9b0737f9049c1a10ca87eb2f685f6231ba6774";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 71
        }
      },
      "9": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "10": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "13": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "15": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 77
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 87,
          column: 2
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "19": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 94
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "22": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 91
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "24": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 66
        }
      },
      "25": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "fetchCustomersData",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 42
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 61
          },
          end: {
            line: 56,
            column: 62
          }
        },
        loc: {
          start: {
            line: 56,
            column: 87
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 56
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 14
          },
          end: {
            line: 39,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 39,
            column: 14
          }
        }, {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 39,
            column: 30
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 44
          },
          end: {
            line: 52,
            column: 57
          }
        }, {
          start: {
            line: 52,
            column: 60
          },
          end: {
            line: 52,
            column: 73
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 67,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 69
          },
          end: {
            line: 67,
            column: 83
          }
        }, {
          start: {
            line: 67,
            column: 86
          },
          end: {
            line: 67,
            column: 90
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 18
          },
          end: {
            line: 70,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 35
          },
          end: {
            line: 70,
            column: 46
          }
        }, {
          start: {
            line: 70,
            column: 49
          },
          end: {
            line: 70,
            column: 53
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 19
          },
          end: {
            line: 71,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 71,
            column: 40
          }
        }, {
          start: {
            line: 71,
            column: 43
          },
          end: {
            line: 71,
            column: 55
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 19
          },
          end: {
            line: 82,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 82,
            column: 57
          }
        }, {
          start: {
            line: 82,
            column: 60
          },
          end: {
            line: 82,
            column: 73
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCustomersData(shopId: number | null) {\n    try {\n        console.log('Fetching customers data for dashboard', { shopId });\n\n        // Get monthly customer stats - how many customers were created each month\n        const monthlyCustomersStats = await prisma.$queryRaw`\n            SELECT \n                DATE_TRUNC('month', \"createdAt\") as month,\n                COUNT(*) as count\n            FROM \"Customer\"\n            ${shopId ? prisma.$raw`WHERE EXISTS (\n                SELECT 1 FROM \"Sale\" \n                WHERE \"Sale\".\"customerId\" = \"Customer\".\"id\" \n                AND \"Sale\".\"shopId\" = ${shopId}\n            )` : prisma.$raw``}\n            GROUP BY month\n            ORDER BY month ASC\n            LIMIT 12\n        `;\n\n        return {\n            success: true,\n            data: monthlyCustomersStats\n        };\n    } catch (error) {\n        console.error('Error fetching customers data for dashboard:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : String(error)\n        };\n    }\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const result = await fetchCustomersData(context.isFiltered ? context.shopId : null);\n\n        return NextResponse.json({\n            success: result.success,\n            data: result.success ? result.data : null,\n            error: result.success ? null : result.error,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        });\n    } catch (error) {\n        console.error('Error in customers dashboard API:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to fetch customers dashboard data',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}); "],
      names: ["GET", "fetchCustomersData", "prisma", "PrismaClient", "shopId", "console", "log", "monthlyCustomersStats", "$queryRaw", "$raw", "success", "data", "error", "Error", "message", "String", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "status", "result", "isFiltered", "meta", "shopFiltered"],
      mappings: ";;;;;;;;;;;IAwCaA,GAAG;eAAHA;;IAjCSC,kBAAkB;eAAlBA;;;wBAPoB;wBACb;gCACK;sBACM;AAExC,MAAMC,SAAS,IAAIC,oBAAY;AAExB,eAAeF,mBAAmBG,MAAqB;IAC1D,IAAI;QACAC,QAAQC,GAAG,CAAC,yCAAyC;YAAEF;QAAO;QAE9D,0EAA0E;QAC1E,MAAMG,wBAAwB,MAAML,OAAOM,SAAS,CAAC;;;;;YAKjD,EAAEJ,SAASF,OAAOO,IAAI,CAAC;;;sCAGG,EAAEL,OAAO;aAClC,CAAC,GAAGF,OAAOO,IAAI,CAAC,CAAC,CAAC;;;;QAIvB,CAAC;QAED,OAAO;YACHC,SAAS;YACTC,MAAMJ;QACV;IACJ,EAAE,OAAOK,OAAO;QACZP,QAAQO,KAAK,CAAC,gDAAgDA;QAC9D,OAAO;YACHF,SAAS;YACTE,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;QAC3D;IACJ;AACJ;AAEO,MAAMZ,MAAMgB,iCAAiB,CAACC,cAAc,CAAC,OAAOC,SAAsBC;IAC7E,IAAI;QACA,iCAAiC;QACjC,MAAMC,aAAa,MAAMC,IAAAA,6BAAuB,EAACH,SAAS;QAC1D,IAAI,CAACE,WAAWE,OAAO,EAAE;YACrB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEZ,OAAOQ,WAAWN,OAAO;YAAC,GAAG;gBAAEW,QAAQ;YAAI;QAC1E;QAEA,MAAMC,SAAS,MAAMzB,mBAAmBkB,QAAQQ,UAAU,GAAGR,QAAQf,MAAM,GAAG;QAE9E,OAAOmB,oBAAY,CAACC,IAAI,CAAC;YACrBd,SAASgB,OAAOhB,OAAO;YACvBC,MAAMe,OAAOhB,OAAO,GAAGgB,OAAOf,IAAI,GAAG;YACrCC,OAAOc,OAAOhB,OAAO,GAAG,OAAOgB,OAAOd,KAAK;YAC3CgB,MAAM;gBACFC,cAAcV,QAAQQ,UAAU;gBAChCvB,QAAQe,QAAQf,MAAM;YAC1B;QACJ;IACJ,EAAE,OAAOQ,OAAO;QACZP,QAAQO,KAAK,CAAC,qCAAqCA;QACnD,OAAOW,oBAAY,CAACC,IAAI,CAAC;YACrBd,SAAS;YACTI,SAAS;YACTF,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;QAC3D,GAAG;YAAEa,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ae9b0737f9049c1a10ca87eb2f685f6231ba6774"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18rbj5g0f7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18rbj5g0f7();
cov_18rbj5g0f7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_18rbj5g0f7().f[0]++;
  cov_18rbj5g0f7().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_18rbj5g0f7().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_18rbj5g0f7().f[1]++;
    cov_18rbj5g0f7().s[4]++;
    return GET;
  },
  fetchCustomersData: function () {
    /* istanbul ignore next */
    cov_18rbj5g0f7().f[2]++;
    cov_18rbj5g0f7().s[5]++;
    return fetchCustomersData;
  }
});
const _server =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[6]++, require("next/server"));
const _client =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[7]++, require("@prisma/client"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[8]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[9]++, require("../../../../lib/auth"));
const prisma =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[10]++, new _client.PrismaClient());
async function fetchCustomersData(shopId) {
  /* istanbul ignore next */
  cov_18rbj5g0f7().f[3]++;
  cov_18rbj5g0f7().s[11]++;
  try {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[12]++;
    console.log("Fetching customers data for dashboard", {
      shopId
    });
    // Get monthly customer stats - how many customers were created each month
    const monthlyCustomersStats =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[13]++, await prisma.$queryRaw`
            SELECT 
                DATE_TRUNC('month', "createdAt") as month,
                COUNT(*) as count
            FROM "Customer"
            ${shopId ?
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[0][0]++, prisma.$raw`WHERE EXISTS (
                SELECT 1 FROM "Sale" 
                WHERE "Sale"."customerId" = "Customer"."id" 
                AND "Sale"."shopId" = ${shopId}
            )`) :
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[0][1]++, prisma.$raw``)}
            GROUP BY month
            ORDER BY month ASC
            LIMIT 12
        `);
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[14]++;
    return {
      success: true,
      data: monthlyCustomersStats
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[15]++;
    console.error("Error fetching customers data for dashboard:", error);
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[16]++;
    return {
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[1][1]++, String(error))
    };
  }
}
const GET =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[17]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_18rbj5g0f7().f[4]++;
  cov_18rbj5g0f7().s[18]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[19]++, await (0, _auth.validateTokenPermission)(request, "view_dashboard"));
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[20]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_18rbj5g0f7().b[2][0]++;
      cov_18rbj5g0f7().s[21]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18rbj5g0f7().b[2][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[22]++, await fetchCustomersData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[3][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[3][1]++, null)));
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[23]++;
    return _server.NextResponse.json({
      success: result.success,
      data: result.success ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[4][0]++, result.data) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[4][1]++, null),
      error: result.success ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[5][0]++, null) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[5][1]++, result.error),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[24]++;
    console.error("Error in customers dashboard API:", error);
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch customers dashboard data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[6][1]++, String(error))
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,