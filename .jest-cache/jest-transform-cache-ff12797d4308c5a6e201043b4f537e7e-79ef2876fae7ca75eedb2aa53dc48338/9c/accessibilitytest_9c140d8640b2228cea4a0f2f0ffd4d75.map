{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/accessibility/accessibility.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { test as base, Page, Browser } from '@playwright/test';\nimport { injectAxe, checkA11y, getViolations } from 'axe-playwright';\n\n// Extend Playwright test with accessibility utilities\nconst test = base.extend<{ page: Page }>({});\n\n// Accessibility test utilities\nclass AccessibilityTestUtils {\n  static async checkPageAccessibility(\n    page: Page, \n    url: string, \n    options: {\n      skipFailures?: boolean;\n      tags?: string[];\n      rules?: Record<string, { enabled: boolean }>;\n    } = {}\n  ) {\n    await page.goto(url);\n    await injectAxe(page);\n    \n    const axeOptions = {\n      tags: options.tags || ['wcag2a', 'wcag2aa', 'wcag21aa'],\n      rules: options.rules || {},\n    };\n    \n    if (options.skipFailures) {\n      try {\n        await checkA11y(page, undefined, axeOptions);\n      } catch (error) {\n        console.warn(`Accessibility violations found on ${url}:`, error);\n      }\n    } else {\n      await checkA11y(page, undefined, axeOptions);\n    }\n  }\n\n  static async getAccessibilityViolations(page: Page, selector?: string) {\n    await injectAxe(page);\n    return await getViolations(page, selector);\n  }\n\n  static async checkColorContrast(page: Page) {\n    await injectAxe(page);\n    const violations = await getViolations(page, undefined, {\n      tags: ['wcag2aa'],\n      rules: {\n        'color-contrast': { enabled: true },\n      },\n    });\n    \n    return violations.filter(v => v.id === 'color-contrast');\n  }\n\n  static async checkKeyboardNavigation(page: Page) {\n    // Test tab navigation\n    const focusableElements = await page.locator(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    ).all();\n    \n    const results = [];\n    \n    for (let i = 0; i < Math.min(focusableElements.length, 10); i++) {\n      await page.keyboard.press('Tab');\n      const focused = await page.evaluate(() => document.activeElement?.tagName);\n      results.push(focused);\n    }\n    \n    return results;\n  }\n\n  static async checkAriaLabels(page: Page) {\n    await injectAxe(page);\n    const violations = await getViolations(page, undefined, {\n      rules: {\n        'aria-allowed-attr': { enabled: true },\n        'aria-required-attr': { enabled: true },\n        'aria-valid-attr': { enabled: true },\n        'aria-valid-attr-value': { enabled: true },\n        'label': { enabled: true },\n      },\n    });\n    \n    return violations.filter(v => \n      ['aria-allowed-attr', 'aria-required-attr', 'aria-valid-attr', 'aria-valid-attr-value', 'label'].includes(v.id)\n    );\n  }\n\n  static async checkHeadingStructure(page: Page) {\n    const headings = await page.locator('h1, h2, h3, h4, h5, h6').all();\n    const headingLevels = [];\n    \n    for (const heading of headings) {\n      const tagName = await heading.evaluate(el => el.tagName.toLowerCase());\n      const text = await heading.textContent();\n      headingLevels.push({ level: parseInt(tagName[1]), text });\n    }\n    \n    return headingLevels;\n  }\n\n  static async checkImageAltText(page: Page) {\n    const images = await page.locator('img').all();\n    const imageResults = [];\n    \n    for (const img of images) {\n      const alt = await img.getAttribute('alt');\n      const src = await img.getAttribute('src');\n      const isDecorative = alt === '';\n      const hasAlt = alt !== null;\n      \n      imageResults.push({\n        src,\n        hasAlt,\n        isDecorative,\n        altText: alt,\n      });\n    }\n    \n    return imageResults;\n  }\n\n  static async checkFormAccessibility(page: Page) {\n    await injectAxe(page);\n    const violations = await getViolations(page, undefined, {\n      rules: {\n        'label': { enabled: true },\n        'label-title-only': { enabled: true },\n        'form-field-multiple-labels': { enabled: true },\n      },\n    });\n    \n    return violations.filter(v => \n      ['label', 'label-title-only', 'form-field-multiple-labels'].includes(v.id)\n    );\n  }\n\n  static async simulateScreenReader(page: Page, selector: string) {\n    // Simulate screen reader navigation\n    const element = page.locator(selector);\n    \n    const ariaLabel = await element.getAttribute('aria-label');\n    const ariaLabelledBy = await element.getAttribute('aria-labelledby');\n    const ariaDescribedBy = await element.getAttribute('aria-describedby');\n    const role = await element.getAttribute('role');\n    const textContent = await element.textContent();\n    \n    return {\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      role,\n      textContent,\n    };\n  }\n}\n\ndescribe('Accessibility Tests', () => {\n  let browser: Browser;\n  let page: Page;\n  \n  beforeAll(async () => {\n    // These would be actual Playwright browser and page instances\n    // For Jest testing, we'll mock the behavior\n  });\n  \n  afterAll(async () => {\n    // Cleanup\n  });\n\n  describe('WCAG 2.1 AA Compliance', () => {\n    const testPages = [\n      { name: 'Login Page', url: '/login' },\n      { name: 'Dashboard', url: '/dashboard' },\n      { name: 'Products', url: '/products' },\n      { name: 'Inventory', url: '/inventory' },\n      { name: 'Sales', url: '/sales' },\n      { name: 'Reports', url: '/reports' },\n      { name: 'Settings', url: '/settings' },\n    ];\n\n    testPages.forEach(({ name, url }) => {\n      it(`should meet WCAG 2.1 AA standards on ${name}`, async () => {\n        // Mock page navigation and accessibility check\n        const mockViolations = [];\n        \n        // Simulate accessibility check\n        expect(mockViolations).toHaveLength(0);\n      });\n    });\n\n    it('should have proper color contrast ratios', async () => {\n      // Mock color contrast check\n      const mockContrastViolations = [];\n      \n      // All text should meet WCAG AA contrast requirements (4.5:1 for normal text, 3:1 for large text)\n      expect(mockContrastViolations).toHaveLength(0);\n    });\n\n    it('should have proper heading hierarchy', async () => {\n      // Mock heading structure check\n      const mockHeadings = [\n        { level: 1, text: 'MD Sports Dashboard' },\n        { level: 2, text: 'Quick Stats' },\n        { level: 3, text: 'Sales Today' },\n        { level: 3, text: 'Inventory Status' },\n        { level: 2, text: 'Recent Activities' },\n      ];\n      \n      // Check heading hierarchy\n      expect(mockHeadings[0].level).toBe(1); // Should start with h1\n      \n      // Check for proper nesting (no skipping levels)\n      for (let i = 1; i < mockHeadings.length; i++) {\n        const currentLevel = mockHeadings[i].level;\n        const previousLevel = mockHeadings[i - 1].level;\n        \n        // Should not skip more than one level\n        expect(currentLevel - previousLevel).toBeLessThanOrEqual(1);\n      }\n    });\n  });\n\n  describe('Keyboard Navigation', () => {\n    it('should support full keyboard navigation', async () => {\n      // Mock keyboard navigation test\n      const mockFocusableElements = [\n        'BUTTON', 'A', 'INPUT', 'SELECT', 'TEXTAREA', 'BUTTON'\n      ];\n      \n      // All interactive elements should be reachable via keyboard\n      expect(mockFocusableElements.length).toBeGreaterThan(0);\n      \n      // Should not have any non-focusable interactive elements\n      mockFocusableElements.forEach(element => {\n        expect(['BUTTON', 'A', 'INPUT', 'SELECT', 'TEXTAREA']).toContain(element);\n      });\n    });\n\n    it('should have visible focus indicators', async () => {\n      // Mock focus indicator check\n      const mockFocusStyles = {\n        outline: '2px solid #007bff',\n        outlineOffset: '2px',\n      };\n      \n      expect(mockFocusStyles.outline).toBeDefined();\n      expect(mockFocusStyles.outline).not.toBe('none');\n    });\n\n    it('should support escape key to close modals', async () => {\n      // Mock modal escape key test\n      const mockModalOpen = true;\n      \n      // Simulate escape key press\n      const mockModalClosed = false; // Would be true after escape\n      \n      // This test would verify modal closes on escape\n      expect(typeof mockModalOpen).toBe('boolean');\n    });\n\n    it('should trap focus within modals', async () => {\n      // Mock focus trap test\n      const mockModalFocusableElements = ['BUTTON', 'INPUT', 'BUTTON'];\n      \n      // Focus should cycle within modal\n      expect(mockModalFocusableElements.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Screen Reader Support', () => {\n    it('should have proper ARIA labels for interactive elements', async () => {\n      // Mock ARIA label check\n      const mockInteractiveElements = [\n        {\n          element: 'button',\n          ariaLabel: 'Add new product',\n          hasLabel: true,\n        },\n        {\n          element: 'input',\n          ariaLabel: 'Search products',\n          hasLabel: true,\n        },\n        {\n          element: 'select',\n          ariaLabel: 'Filter by category',\n          hasLabel: true,\n        },\n      ];\n      \n      mockInteractiveElements.forEach(element => {\n        expect(element.hasLabel).toBe(true);\n        expect(element.ariaLabel).toBeTruthy();\n      });\n    });\n\n    it('should have proper form labels', async () => {\n      // Mock form label check\n      const mockFormFields = [\n        {\n          type: 'email',\n          label: 'Email Address',\n          hasLabel: true,\n          required: true,\n          ariaRequired: 'true',\n        },\n        {\n          type: 'password',\n          label: 'Password',\n          hasLabel: true,\n          required: true,\n          ariaRequired: 'true',\n        },\n      ];\n      \n      mockFormFields.forEach(field => {\n        expect(field.hasLabel).toBe(true);\n        expect(field.label).toBeTruthy();\n        if (field.required) {\n          expect(field.ariaRequired).toBe('true');\n        }\n      });\n    });\n\n    it('should announce dynamic content changes', async () => {\n      // Mock live region test\n      const mockLiveRegions = [\n        {\n          selector: '[aria-live=\"polite\"]',\n          content: 'Product added successfully',\n          ariaLive: 'polite',\n        },\n        {\n          selector: '[aria-live=\"assertive\"]',\n          content: 'Error: Please fill in all required fields',\n          ariaLive: 'assertive',\n        },\n      ];\n      \n      mockLiveRegions.forEach(region => {\n        expect(region.ariaLive).toMatch(/^(polite|assertive)$/);\n        expect(region.content).toBeTruthy();\n      });\n    });\n\n    it('should have descriptive link text', async () => {\n      // Mock link text check\n      const mockLinks = [\n        {\n          href: '/products/123',\n          text: 'View product details for Nike Air Max',\n          isDescriptive: true,\n        },\n        {\n          href: '/reports/sales',\n          text: 'View sales report',\n          isDescriptive: true,\n        },\n      ];\n      \n      mockLinks.forEach(link => {\n        expect(link.isDescriptive).toBe(true);\n        expect(link.text).not.toMatch(/^(click here|read more|link)$/i);\n        expect(link.text.length).toBeGreaterThan(3);\n      });\n    });\n  });\n\n  describe('Image Accessibility', () => {\n    it('should have alt text for all informative images', async () => {\n      // Mock image alt text check\n      const mockImages = [\n        {\n          src: '/images/product-123.jpg',\n          alt: 'Nike Air Max running shoes in blue and white',\n          isDecorative: false,\n          hasAlt: true,\n        },\n        {\n          src: '/images/logo.png',\n          alt: 'MD Sports company logo',\n          isDecorative: false,\n          hasAlt: true,\n        },\n        {\n          src: '/images/decoration.svg',\n          alt: '',\n          isDecorative: true,\n          hasAlt: true,\n        },\n      ];\n      \n      mockImages.forEach(image => {\n        expect(image.hasAlt).toBe(true);\n        \n        if (!image.isDecorative) {\n          expect(image.alt).toBeTruthy();\n          expect(image.alt.length).toBeGreaterThan(0);\n        } else {\n          expect(image.alt).toBe('');\n        }\n      });\n    });\n\n    it('should not use images of text for essential information', async () => {\n      // Mock text-in-image check\n      const mockTextImages = [];\n      \n      // Should not have images containing essential text\n      expect(mockTextImages).toHaveLength(0);\n    });\n  });\n\n  describe('Form Accessibility', () => {\n    it('should have proper error message association', async () => {\n      // Mock form error check\n      const mockFormErrors = [\n        {\n          fieldId: 'email',\n          errorId: 'email-error',\n          ariaDescribedBy: 'email-error',\n          errorMessage: 'Please enter a valid email address',\n          isAssociated: true,\n        },\n        {\n          fieldId: 'password',\n          errorId: 'password-error',\n          ariaDescribedBy: 'password-error',\n          errorMessage: 'Password must be at least 8 characters long',\n          isAssociated: true,\n        },\n      ];\n      \n      mockFormErrors.forEach(error => {\n        expect(error.isAssociated).toBe(true);\n        expect(error.ariaDescribedBy).toBe(error.errorId);\n        expect(error.errorMessage).toBeTruthy();\n      });\n    });\n\n    it('should have proper fieldset and legend for grouped fields', async () => {\n      // Mock fieldset check\n      const mockFieldsets = [\n        {\n          legend: 'Shipping Address',\n          fields: ['street', 'city', 'state', 'zip'],\n          hasLegend: true,\n        },\n        {\n          legend: 'Payment Method',\n          fields: ['card-number', 'expiry', 'cvv'],\n          hasLegend: true,\n        },\n      ];\n      \n      mockFieldsets.forEach(fieldset => {\n        expect(fieldset.hasLegend).toBe(true);\n        expect(fieldset.legend).toBeTruthy();\n        expect(fieldset.fields.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should provide clear instructions for required fields', async () => {\n      // Mock required field instructions\n      const mockRequiredFields = [\n        {\n          name: 'email',\n          required: true,\n          ariaRequired: 'true',\n          hasInstruction: true,\n          instruction: 'Required field',\n        },\n        {\n          name: 'password',\n          required: true,\n          ariaRequired: 'true',\n          hasInstruction: true,\n          instruction: 'Required field - minimum 8 characters',\n        },\n      ];\n      \n      mockRequiredFields.forEach(field => {\n        if (field.required) {\n          expect(field.ariaRequired).toBe('true');\n          expect(field.hasInstruction).toBe(true);\n          expect(field.instruction).toBeTruthy();\n        }\n      });\n    });\n  });\n\n  describe('Mobile Accessibility', () => {\n    it('should have adequate touch target sizes', async () => {\n      // Mock touch target size check\n      const mockTouchTargets = [\n        {\n          element: 'button',\n          width: 44,\n          height: 44,\n          meetsMinimum: true,\n        },\n        {\n          element: 'link',\n          width: 48,\n          height: 48,\n          meetsMinimum: true,\n        },\n      ];\n      \n      mockTouchTargets.forEach(target => {\n        // WCAG recommends minimum 44x44 CSS pixels\n        expect(target.width).toBeGreaterThanOrEqual(44);\n        expect(target.height).toBeGreaterThanOrEqual(44);\n        expect(target.meetsMinimum).toBe(true);\n      });\n    });\n\n    it('should support zoom up to 200% without horizontal scrolling', async () => {\n      // Mock zoom test\n      const mockZoomTest = {\n        zoomLevel: 200,\n        hasHorizontalScroll: false,\n        contentVisible: true,\n      };\n      \n      expect(mockZoomTest.hasHorizontalScroll).toBe(false);\n      expect(mockZoomTest.contentVisible).toBe(true);\n    });\n\n    it('should work with device orientation changes', async () => {\n      // Mock orientation change test\n      const mockOrientationTest = {\n        portrait: {\n          contentVisible: true,\n          functionalityAvailable: true,\n        },\n        landscape: {\n          contentVisible: true,\n          functionalityAvailable: true,\n        },\n      };\n      \n      expect(mockOrientationTest.portrait.contentVisible).toBe(true);\n      expect(mockOrientationTest.portrait.functionalityAvailable).toBe(true);\n      expect(mockOrientationTest.landscape.contentVisible).toBe(true);\n      expect(mockOrientationTest.landscape.functionalityAvailable).toBe(true);\n    });\n  });\n\n  describe('Motion and Animation', () => {\n    it('should respect prefers-reduced-motion', async () => {\n      // Mock reduced motion test\n      const mockAnimations = [\n        {\n          element: '.fade-in',\n          hasReducedMotion: true,\n          respectsPreference: true,\n        },\n        {\n          element: '.slide-animation',\n          hasReducedMotion: true,\n          respectsPreference: true,\n        },\n      ];\n      \n      mockAnimations.forEach(animation => {\n        expect(animation.respectsPreference).toBe(true);\n      });\n    });\n\n    it('should not have content that flashes more than 3 times per second', async () => {\n      // Mock flash test\n      const mockFlashingContent = [];\n      \n      // Should not have any flashing content that could trigger seizures\n      expect(mockFlashingContent).toHaveLength(0);\n    });\n\n    it('should provide pause controls for auto-playing content', async () => {\n      // Mock auto-play content test\n      const mockAutoPlayContent = [\n        {\n          type: 'carousel',\n          hasPauseControl: true,\n          autoPlay: true,\n        },\n      ];\n      \n      mockAutoPlayContent.forEach(content => {\n        if (content.autoPlay) {\n          expect(content.hasPauseControl).toBe(true);\n        }\n      });\n    });\n  });\n\n  describe('Data Tables', () => {\n    it('should have proper table headers', async () => {\n      // Mock table header check\n      const mockTables = [\n        {\n          hasHeaders: true,\n          headerScope: 'col',\n          caption: 'Product inventory list',\n          hasCaption: true,\n        },\n      ];\n      \n      mockTables.forEach(table => {\n        expect(table.hasHeaders).toBe(true);\n        expect(table.hasCaption).toBe(true);\n        expect(table.caption).toBeTruthy();\n      });\n    });\n\n    it('should associate data cells with headers', async () => {\n      // Mock table cell association check\n      const mockTableCells = [\n        {\n          hasHeaderAssociation: true,\n          headers: 'product-name price-header',\n        },\n      ];\n      \n      mockTableCells.forEach(cell => {\n        expect(cell.hasHeaderAssociation).toBe(true);\n      });\n    });\n  });\n\n  describe('Language and Reading', () => {\n    it('should have proper language attributes', async () => {\n      // Mock language attribute check\n      const mockLanguageAttributes = {\n        htmlLang: 'en',\n        hasLangAttribute: true,\n      };\n      \n      expect(mockLanguageAttributes.hasLangAttribute).toBe(true);\n      expect(mockLanguageAttributes.htmlLang).toBeTruthy();\n    });\n\n    it('should have readable text size and line height', async () => {\n      // Mock text readability check\n      const mockTextStyles = {\n        fontSize: '16px',\n        lineHeight: '1.5',\n        meetsMinimum: true,\n      };\n      \n      expect(mockTextStyles.meetsMinimum).toBe(true);\n      expect(parseFloat(mockTextStyles.fontSize)).toBeGreaterThanOrEqual(16);\n      expect(parseFloat(mockTextStyles.lineHeight)).toBeGreaterThanOrEqual(1.4);\n    });\n  });\n});"],"names":["test","base","extend","AccessibilityTestUtils","checkPageAccessibility","page","url","options","goto","injectAxe","axeOptions","tags","rules","skipFailures","checkA11y","undefined","error","console","warn","getAccessibilityViolations","selector","getViolations","checkColorContrast","violations","enabled","filter","v","id","checkKeyboardNavigation","focusableElements","locator","all","results","i","Math","min","length","keyboard","press","focused","evaluate","document","activeElement","tagName","push","checkAriaLabels","includes","checkHeadingStructure","headings","headingLevels","heading","el","toLowerCase","text","textContent","level","parseInt","checkImageAltText","images","imageResults","img","alt","getAttribute","src","isDecorative","hasAlt","altText","checkFormAccessibility","simulateScreenReader","element","ariaLabel","ariaLabelledBy","ariaDescribedBy","role","describe","browser","beforeAll","afterAll","testPages","name","forEach","it","mockViolations","expect","toHaveLength","mockContrastViolations","mockHeadings","toBe","currentLevel","previousLevel","toBeLessThanOrEqual","mockFocusableElements","toBeGreaterThan","toContain","mockFocusStyles","outline","outlineOffset","toBeDefined","not","mockModalOpen","mockModalClosed","mockModalFocusableElements","mockInteractiveElements","hasLabel","toBeTruthy","mockFormFields","type","label","required","ariaRequired","field","mockLiveRegions","content","ariaLive","region","toMatch","mockLinks","href","isDescriptive","link","mockImages","image","mockTextImages","mockFormErrors","fieldId","errorId","errorMessage","isAssociated","mockFieldsets","legend","fields","hasLegend","fieldset","mockRequiredFields","hasInstruction","instruction","mockTouchTargets","width","height","meetsMinimum","target","toBeGreaterThanOrEqual","mockZoomTest","zoomLevel","hasHorizontalScroll","contentVisible","mockOrientationTest","portrait","functionalityAvailable","landscape","mockAnimations","hasReducedMotion","respectsPreference","animation","mockFlashingContent","mockAutoPlayContent","hasPauseControl","autoPlay","mockTables","hasHeaders","headerScope","caption","hasCaption","table","mockTableCells","hasHeaderAssociation","headers","cell","mockLanguageAttributes","htmlLang","hasLangAttribute","mockTextStyles","fontSize","lineHeight","parseFloat"],"mappings":"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"}