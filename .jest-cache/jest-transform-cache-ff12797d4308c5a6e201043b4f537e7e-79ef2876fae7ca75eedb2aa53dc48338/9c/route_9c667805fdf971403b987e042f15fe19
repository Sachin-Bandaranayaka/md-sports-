4ac37c37e8e043dbf0a08c0a9d50815f
"use strict";

/* istanbul ignore next */
function cov_k799w5447() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/add/route.ts";
  var hash = "356e6ba54f92c4e5a549a4d95c0da0b94298c224";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/add/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "7": {
        start: {
          line: 16,
          column: 48
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "10": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 48
        }
      },
      "11": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 42
        }
      },
      "12": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 46
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "15": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "18": {
        start: {
          line: 53,
          column: 21
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "21": {
        start: {
          line: 67,
          column: 34
        },
        end: {
          line: 72,
          column: 10
        }
      },
      "22": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "23": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 75,
          column: 27
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "25": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "26": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 67
        }
      },
      "27": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "28": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 38
        }
      },
      "29": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "30": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "31": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "32": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "33": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "34": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 56
        }
      },
      "35": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 22
          }
        }, {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 33
          }
        }, {
          start: {
            line: 18,
            column: 37
          },
          end: {
            line: 18,
            column: 59
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 31
          }
        }, {
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 51
          }
        }, {
          start: {
            line: 30,
            column: 55
          },
          end: {
            line: 30,
            column: 73
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: 89,
            column: 15
          },
          end: {
            line: 99,
            column: 9
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 19
          },
          end: {
            line: 131,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 44
          },
          end: {
            line: 131,
            column: 57
          }
        }, {
          start: {
            line: 131,
            column: 60
          },
          end: {
            line: 131,
            column: 73
          }
        }],
        line: 131
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/add/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\n\nexport async function POST(request: NextRequest) {\n    try {\n        const data = await request.json();\n        const { productId, shopId, quantity } = data;\n\n        // Validate required fields\n        if (!productId || !shopId || quantity === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields: productId, shopId, and quantity are required'\n            }, { status: 400 });\n        }\n\n        // Validate numeric values\n        const productIdNum = parseInt(productId);\n        const shopIdNum = parseInt(shopId);\n        const quantityNum = parseInt(quantity);\n\n        if (isNaN(productIdNum) || isNaN(shopIdNum) || isNaN(quantityNum)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid data format: productId, shopId, and quantity must be numbers'\n            }, { status: 400 });\n        }\n\n        // Check if product exists\n        const product = await prisma.product.findUnique({\n            where: { id: productIdNum }\n        });\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if shop exists\n        const shop = await prisma.shop.findUnique({\n            where: { id: shopIdNum }\n        });\n\n        if (!shop) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if inventory item exists for this product and shop\n        const existingInventory = await prisma.inventoryItem.findFirst({\n            where: {\n                productId: productIdNum,\n                shopId: shopIdNum\n            }\n        });\n\n        let result;\n        let previousQuantity = 0;\n        let newQuantity = 0;\n\n        if (existingInventory) {\n            // Update existing inventory\n            previousQuantity = existingInventory.quantity;\n            newQuantity = existingInventory.quantity + quantityNum;\n\n            result = await prisma.inventoryItem.update({\n                where: { id: existingInventory.id },\n                data: {\n                    quantity: newQuantity,\n                    updatedAt: new Date()\n                }\n            });\n        } else {\n            // Create new inventory item\n            newQuantity = quantityNum;\n\n            result = await prisma.inventoryItem.create({\n                data: {\n                    productId: productIdNum,\n                    shopId: shopIdNum,\n                    quantity: quantityNum\n                }\n            });\n        }\n\n        // Log this action to audit trail (if implemented)\n        try {\n            await prisma.auditLog.create({\n                data: {\n                    action: 'ADD_INVENTORY',\n                    entity: 'InventoryItem',\n                    entityId: result.id,\n                    details: JSON.stringify({\n                        productId: productIdNum,\n                        shopId: shopIdNum,\n                        quantity: quantityNum,\n                        method: 'Direct Addition'\n                    })\n                }\n            });\n        } catch (auditError) {\n            // Log error but don't fail the request\n            console.error('Error creating audit log:', auditError);\n            // Continue with the request even if audit logging fails\n        }\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Inventory updated successfully',\n            data: result\n        });\n    } catch (error) {\n        console.error('Error adding inventory:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to add inventory',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["POST", "request", "data", "json", "productId", "shopId", "quantity", "undefined", "NextResponse", "success", "message", "status", "productIdNum", "parseInt", "shopIdNum", "quantityNum", "isNaN", "product", "prisma", "findUnique", "where", "id", "shop", "existingInventory", "inventoryItem", "findFirst", "result", "previousQuantity", "newQuantity", "update", "updatedAt", "Date", "create", "auditLog", "action", "entity", "entityId", "details", "JSON", "stringify", "method", "auditError", "console", "error", "Error", "String"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "356e6ba54f92c4e5a549a4d95c0da0b94298c224"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_k799w5447 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_k799w5447();
cov_k799w5447().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_k799w5447().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_k799w5447().f[0]++;
    cov_k799w5447().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_k799w5447().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_k799w5447().s[4]++, require("../../../../lib/prisma"));
async function POST(request) {
  /* istanbul ignore next */
  cov_k799w5447().f[1]++;
  cov_k799w5447().s[5]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_k799w5447().s[6]++, await request.json());
    const {
      productId,
      shopId,
      quantity
    } =
    /* istanbul ignore next */
    (cov_k799w5447().s[7]++, data);
    // Validate required fields
    /* istanbul ignore next */
    cov_k799w5447().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_k799w5447().b[1][0]++, !productId) ||
    /* istanbul ignore next */
    (cov_k799w5447().b[1][1]++, !shopId) ||
    /* istanbul ignore next */
    (cov_k799w5447().b[1][2]++, quantity === undefined)) {
      /* istanbul ignore next */
      cov_k799w5447().b[0][0]++;
      cov_k799w5447().s[9]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields: productId, shopId, and quantity are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_k799w5447().b[0][1]++;
    }
    // Validate numeric values
    const productIdNum =
    /* istanbul ignore next */
    (cov_k799w5447().s[10]++, parseInt(productId));
    const shopIdNum =
    /* istanbul ignore next */
    (cov_k799w5447().s[11]++, parseInt(shopId));
    const quantityNum =
    /* istanbul ignore next */
    (cov_k799w5447().s[12]++, parseInt(quantity));
    /* istanbul ignore next */
    cov_k799w5447().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_k799w5447().b[3][0]++, isNaN(productIdNum)) ||
    /* istanbul ignore next */
    (cov_k799w5447().b[3][1]++, isNaN(shopIdNum)) ||
    /* istanbul ignore next */
    (cov_k799w5447().b[3][2]++, isNaN(quantityNum))) {
      /* istanbul ignore next */
      cov_k799w5447().b[2][0]++;
      cov_k799w5447().s[14]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid data format: productId, shopId, and quantity must be numbers"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_k799w5447().b[2][1]++;
    }
    // Check if product exists
    const product =
    /* istanbul ignore next */
    (cov_k799w5447().s[15]++, await _prisma.prisma.product.findUnique({
      where: {
        id: productIdNum
      }
    }));
    /* istanbul ignore next */
    cov_k799w5447().s[16]++;
    if (!product) {
      /* istanbul ignore next */
      cov_k799w5447().b[4][0]++;
      cov_k799w5447().s[17]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${productId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_k799w5447().b[4][1]++;
    }
    // Check if shop exists
    const shop =
    /* istanbul ignore next */
    (cov_k799w5447().s[18]++, await _prisma.prisma.shop.findUnique({
      where: {
        id: shopIdNum
      }
    }));
    /* istanbul ignore next */
    cov_k799w5447().s[19]++;
    if (!shop) {
      /* istanbul ignore next */
      cov_k799w5447().b[5][0]++;
      cov_k799w5447().s[20]++;
      return _server.NextResponse.json({
        success: false,
        message: `Shop with ID ${shopId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_k799w5447().b[5][1]++;
    }
    // Check if inventory item exists for this product and shop
    const existingInventory =
    /* istanbul ignore next */
    (cov_k799w5447().s[21]++, await _prisma.prisma.inventoryItem.findFirst({
      where: {
        productId: productIdNum,
        shopId: shopIdNum
      }
    }));
    let result;
    let previousQuantity =
    /* istanbul ignore next */
    (cov_k799w5447().s[22]++, 0);
    let newQuantity =
    /* istanbul ignore next */
    (cov_k799w5447().s[23]++, 0);
    /* istanbul ignore next */
    cov_k799w5447().s[24]++;
    if (existingInventory) {
      /* istanbul ignore next */
      cov_k799w5447().b[6][0]++;
      cov_k799w5447().s[25]++;
      // Update existing inventory
      previousQuantity = existingInventory.quantity;
      /* istanbul ignore next */
      cov_k799w5447().s[26]++;
      newQuantity = existingInventory.quantity + quantityNum;
      /* istanbul ignore next */
      cov_k799w5447().s[27]++;
      result = await _prisma.prisma.inventoryItem.update({
        where: {
          id: existingInventory.id
        },
        data: {
          quantity: newQuantity,
          updatedAt: new Date()
        }
      });
    } else {
      /* istanbul ignore next */
      cov_k799w5447().b[6][1]++;
      cov_k799w5447().s[28]++;
      // Create new inventory item
      newQuantity = quantityNum;
      /* istanbul ignore next */
      cov_k799w5447().s[29]++;
      result = await _prisma.prisma.inventoryItem.create({
        data: {
          productId: productIdNum,
          shopId: shopIdNum,
          quantity: quantityNum
        }
      });
    }
    // Log this action to audit trail (if implemented)
    /* istanbul ignore next */
    cov_k799w5447().s[30]++;
    try {
      /* istanbul ignore next */
      cov_k799w5447().s[31]++;
      await _prisma.prisma.auditLog.create({
        data: {
          action: "ADD_INVENTORY",
          entity: "InventoryItem",
          entityId: result.id,
          details: JSON.stringify({
            productId: productIdNum,
            shopId: shopIdNum,
            quantity: quantityNum,
            method: "Direct Addition"
          })
        }
      });
    } catch (auditError) {
      /* istanbul ignore next */
      cov_k799w5447().s[32]++;
      // Log error but don't fail the request
      console.error("Error creating audit log:", auditError);
      // Continue with the request even if audit logging fails
    }
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_k799w5447().s[33]++;
    return _server.NextResponse.json({
      success: true,
      message: "Inventory updated successfully",
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_k799w5447().s[34]++;
    console.error("Error adding inventory:", error);
    /* istanbul ignore next */
    cov_k799w5447().s[35]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to add inventory",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_k799w5447().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_k799w5447().b[7][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,