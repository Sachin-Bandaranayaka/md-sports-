{"version":3,"names":["cov_2ew3kg3trd","actualCoverage","s","GET","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","f","console","log","products","_prisma","prisma","product","findMany","where","b","isFiltered","shopId","inventoryItems","some","include","category","select","id","name","shop","location","orderBy","transformedProducts","map","branchStock","item","shopName","quantity","shopSpecificCost","totalStock","reduce","sum","branch","sku","retailPrice","price","weightedAverageCost","shopsMap","Map","forEach","has","set","shops","Array","from","values","sort","a","localeCompare","length","_server","NextResponse","json","success","data","meta","shopFiltered","totalProducts","totalShops","error","message","Error","String","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/distribution/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\n// Optimized endpoint for inventory distribution page\n// Gets all products with their inventory data in ONE database query\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        console.log('Fetching inventory distribution data...');\n        \n        // Single optimized query to get all products with inventory\n        const products = await prisma.product.findMany({\n            where: context.isFiltered && context.shopId ? {\n                inventoryItems: {\n                    some: {\n                        shopId: context.shopId\n                    }\n                }\n            } : {},\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                inventoryItems: {\n                    where: context.isFiltered && context.shopId ? {\n                        shopId: context.shopId\n                    } : {},\n                    include: {\n                        shop: {\n                            select: {\n                                id: true,\n                                name: true,\n                                location: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        // Transform data for the frontend\n        const transformedProducts = products.map(product => {\n            const branchStock = product.inventoryItems.map(item => ({\n                shopId: item.shopId,\n                shopName: item.shop.name,\n                quantity: item.quantity,\n                shopSpecificCost: item.shopSpecificCost || 0\n            }));\n\n            const totalStock = branchStock.reduce((sum, branch) => sum + branch.quantity, 0);\n\n            return {\n                id: product.id,\n                name: product.name,\n                sku: product.sku || '',\n                retailPrice: product.price || 0,\n                weightedAverageCost: product.weightedAverageCost || 0,\n                totalStock,\n                branchStock,\n                category: product.category\n            };\n        });\n\n        // Extract unique shops\n        const shopsMap = new Map();\n        products.forEach(product => {\n            product.inventoryItems.forEach(item => {\n                if (!shopsMap.has(item.shopId)) {\n                    shopsMap.set(item.shopId, {\n                        id: item.shopId,\n                        name: item.shop.name,\n                        location: item.shop.location\n                    });\n                }\n            });\n        });\n\n        const shops = Array.from(shopsMap.values()).sort((a, b) => \n            a.name.localeCompare(b.name)\n        );\n\n        console.log(`Retrieved ${transformedProducts.length} products with inventory distribution`);\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                products: transformedProducts,\n                shops: shops\n            },\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                totalProducts: transformedProducts.length,\n                totalShops: shops.length\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching inventory distribution:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching inventory distribution data',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}); "],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAFK;;;;;;WAAAC,GAAA;;;;;kCAN6B;;;kCACnB;;;kCACW;AAI3B,MAAMA,GAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAME,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAAAT,cAAA,GAAAE,CAAA;EAC7E,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACAQ,OAAA,CAAQC,GAAG,CAAC;IAEZ;IACA,MAAMC,QAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,OAAW,MAAMW,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;MAC3CC,KAAA;MAAO;MAAA,CAAAjB,cAAA,GAAAkB,CAAA,UAAAV,OAAA,CAAQW,UAAU;MAAA;MAAA,CAAAnB,cAAA,GAAAkB,CAAA,UAAIV,OAAA,CAAQY,MAAM;MAAA;MAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAG;QAC1CG,cAAA,EAAgB;UACZC,IAAA,EAAM;YACFF,MAAA,EAAQZ,OAAA,CAAQY;UACpB;QACJ;MACJ;MAAA;MAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAI,CAAC;MACLK,OAAA,EAAS;QACLC,QAAA,EAAU;UACNC,MAAA,EAAQ;YACJC,EAAA,EAAI;YACJC,IAAA,EAAM;UACV;QACJ;QACAN,cAAA,EAAgB;UACZJ,KAAA;UAAO;UAAA,CAAAjB,cAAA,GAAAkB,CAAA,UAAAV,OAAA,CAAQW,UAAU;UAAA;UAAA,CAAAnB,cAAA,GAAAkB,CAAA,UAAIV,OAAA,CAAQY,MAAM;UAAA;UAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAG;YAC1CE,MAAA,EAAQZ,OAAA,CAAQY;UACpB;UAAA;UAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAI,CAAC;UACLK,OAAA,EAAS;YACLK,IAAA,EAAM;cACFH,MAAA,EAAQ;gBACJC,EAAA,EAAI;gBACJC,IAAA,EAAM;gBACNE,QAAA,EAAU;cACd;YACJ;UACJ;QACJ;MACJ;MACAC,OAAA,EAAS;QACLH,IAAA,EAAM;MACV;IACJ;IAEA;IACA,MAAMI,mBAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAsBU,QAAA,CAASoB,GAAG,CAACjB,OAAA;MAAA;MAAAf,cAAA,GAAAS,CAAA;MACrC,MAAMwB,WAAA;MAAA;MAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAca,OAAA,CAAQM,cAAc,CAACW,GAAG,CAACE,IAAA,IAAS;QAAA;QAAAlC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA;UACpDkB,MAAA,EAAQc,IAAA,CAAKd,MAAM;UACnBe,QAAA,EAAUD,IAAA,CAAKN,IAAI,CAACD,IAAI;UACxBS,QAAA,EAAUF,IAAA,CAAKE,QAAQ;UACvBC,gBAAA;UAAkB;UAAA,CAAArC,cAAA,GAAAkB,CAAA,UAAAgB,IAAA,CAAKG,gBAAgB;UAAA;UAAA,CAAArC,cAAA,GAAAkB,CAAA,UAAI;QAC/C;MAAA;MAEA,MAAMoB,UAAA;MAAA;MAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAa+B,WAAA,CAAYM,MAAM,CAAC,CAACC,GAAA,EAAKC,MAAA,KAAW;QAAA;QAAAzC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA,OAAAsC,GAAA,GAAMC,MAAA,CAAOL,QAAQ;MAAR,CAAQ,EAAE;MAAA;MAAApC,cAAA,GAAAE,CAAA;MAE9E,OAAO;QACHwB,EAAA,EAAIX,OAAA,CAAQW,EAAE;QACdC,IAAA,EAAMZ,OAAA,CAAQY,IAAI;QAClBe,GAAA;QAAK;QAAA,CAAA1C,cAAA,GAAAkB,CAAA,UAAAH,OAAA,CAAQ2B,GAAG;QAAA;QAAA,CAAA1C,cAAA,GAAAkB,CAAA,UAAI;QACpByB,WAAA;QAAa;QAAA,CAAA3C,cAAA,GAAAkB,CAAA,UAAAH,OAAA,CAAQ6B,KAAK;QAAA;QAAA,CAAA5C,cAAA,GAAAkB,CAAA,UAAI;QAC9B2B,mBAAA;QAAqB;QAAA,CAAA7C,cAAA,GAAAkB,CAAA,UAAAH,OAAA,CAAQ8B,mBAAmB;QAAA;QAAA,CAAA7C,cAAA,GAAAkB,CAAA,UAAI;QACpDoB,UAAA;QACAL,WAAA;QACAT,QAAA,EAAUT,OAAA,CAAQS;MACtB;IACJ;IAEA;IACA,MAAMsB,QAAA;IAAA;IAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAW,IAAI6C,GAAA;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IACrBU,QAAA,CAASoC,OAAO,CAACjC,OAAA;MAAA;MAAAf,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACba,OAAA,CAAQM,cAAc,CAAC2B,OAAO,CAACd,IAAA;QAAA;QAAAlC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC3B,IAAI,CAAC4C,QAAA,CAASG,GAAG,CAACf,IAAA,CAAKd,MAAM,GAAG;UAAA;UAAApB,cAAA,GAAAkB,CAAA;UAAAlB,cAAA,GAAAE,CAAA;UAC5B4C,QAAA,CAASI,GAAG,CAAChB,IAAA,CAAKd,MAAM,EAAE;YACtBM,EAAA,EAAIQ,IAAA,CAAKd,MAAM;YACfO,IAAA,EAAMO,IAAA,CAAKN,IAAI,CAACD,IAAI;YACpBE,QAAA,EAAUK,IAAA,CAAKN,IAAI,CAACC;UACxB;QACJ;QAAA;QAAA;UAAA7B,cAAA,GAAAkB,CAAA;QAAA;MACJ;IACJ;IAEA,MAAMiC,KAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAQkD,KAAA,CAAMC,IAAI,CAACP,QAAA,CAASQ,MAAM,IAAIC,IAAI,CAAC,CAACC,CAAA,EAAGtC,CAAA,KACjD;MAAA;MAAAlB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,OAAAsD,CAAA,CAAE7B,IAAI,CAAC8B,aAAa,CAACvC,CAAA,CAAES,IAAI;IAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAG/BQ,OAAA,CAAQC,GAAG,CAAC,aAAaoB,mBAAA,CAAoB2B,MAAM,uCAAuC;IAAA;IAAA1D,cAAA,GAAAE,CAAA;IAE1F,OAAOyD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,IAAA,EAAM;QACFnD,QAAA,EAAUmB,mBAAA;QACVoB,KAAA,EAAOA;MACX;MACAa,IAAA,EAAM;QACFC,YAAA,EAAczD,OAAA,CAAQW,UAAU;QAChCC,MAAA,EAAQZ,OAAA,CAAQY,MAAM;QACtB8C,aAAA,EAAenC,mBAAA,CAAoB2B,MAAM;QACzCS,UAAA,EAAYhB,KAAA,CAAMO;MACtB;IACJ;EAEJ,EAAE,OAAOU,KAAA,EAAO;IAAA;IAAApE,cAAA,GAAAE,CAAA;IACZQ,OAAA,CAAQ0D,KAAK,CAAC,0CAA0CA,KAAA;IAAA;IAAApE,cAAA,GAAAE,CAAA;IACxD,OAAOyD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTO,OAAA,EAAS;MACTD,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAAtE,cAAA,GAAAkB,CAAA,UAAQkD,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAkB,CAAA,UAAGqD,MAAA,CAAOH,KAAA;IAC3D,GAAG;MAAEI,MAAA,EAAQ;IAAI;EACrB;AACJ","ignoreList":[]}