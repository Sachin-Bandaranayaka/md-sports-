967454d89b6e366c0345eef2d796e3e6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _vitest = require("vitest");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _page = /*#__PURE__*/ _interop_require_default(require("../../app/(protected)/audit-trail/page"));
const _useAuth = require("../../hooks/useAuth");
const _usetoast = require("../../components/ui/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_vitest.vi.mock("@/hooks/useAuth");
_vitest.vi.mock("@/components/ui/use-toast");
// Mock fetch
global.fetch = _vitest.vi.fn();
const mockUseAuth = _useAuth.useAuth;
const mockUseToast = _usetoast.useToast;
const mockToast = _vitest.vi.fn();
const mockFetch = global.fetch;
// Mock data
const mockRecycleBinData = {
    items: [
        {
            id: 1,
            entity: "product",
            entityId: 123,
            originalData: {
                name: "Test Product",
                price: 100
            },
            deletedAt: "2024-01-15T10:00:00Z",
            deletedBy: "user1",
            deletedByUser: {
                id: "user1",
                name: "John Doe",
                email: "john@example.com"
            },
            canRecover: true
        },
        {
            id: 2,
            entity: "customer",
            entityId: 456,
            originalData: {
                name: "Test Customer",
                email: "test@example.com"
            },
            deletedAt: "2024-01-16T11:00:00Z",
            deletedBy: "user2",
            deletedByUser: {
                id: "user2",
                name: "Jane Smith",
                email: "jane@example.com"
            },
            canRecover: true
        }
    ],
    total: 2
};
const mockAuditHistoryData = {
    items: [
        {
            id: 1,
            entity: "product",
            entityId: 123,
            action: "CREATE",
            userId: "user1",
            createdAt: "2024-01-15T10:00:00Z",
            details: {
                name: "Test Product"
            },
            user: {
                id: 1,
                name: "John Doe",
                email: "john@example.com"
            }
        },
        {
            id: 2,
            entity: "customer",
            entityId: 456,
            action: "UPDATE",
            userId: "user2",
            createdAt: "2024-01-16T11:00:00Z",
            details: {
                name: "Updated Customer"
            },
            user: {
                id: 2,
                name: "Jane Smith",
                email: "jane@example.com"
            }
        }
    ],
    total: 2
};
(0, _vitest.describe)("AuditTrailPage", ()=>{
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        mockUseAuth.mockReturnValue({
            isAuthenticated: true,
            accessToken: "valid-token"
        });
        mockUseToast.mockReturnValue({
            toast: mockToast
        });
        mockFetch.mockResolvedValue({
            ok: true,
            json: ()=>Promise.resolve(mockRecycleBinData)
        });
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)("Initial Rendering", ()=>{
        (0, _vitest.it)("should render the audit trail page with tabs", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _vitest.expect)(_react.screen.getByText("Audit Trail")).toBeInTheDocument();
            (0, _vitest.expect)(_react.screen.getByRole("tab", {
                name: /recycle bin/i
            })).toBeInTheDocument();
            (0, _vitest.expect)(_react.screen.getByRole("tab", {
                name: /audit history/i
            })).toBeInTheDocument();
        });
        (0, _vitest.it)("should render filter controls", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _vitest.expect)(_react.screen.getByPlaceholderText(/search/i)).toBeInTheDocument();
            (0, _vitest.expect)(_react.screen.getByText("Entity Type")).toBeInTheDocument();
            (0, _vitest.expect)(_react.screen.getByText("From Date")).toBeInTheDocument();
            (0, _vitest.expect)(_react.screen.getByText("To Date")).toBeInTheDocument();
        });
    });
    (0, _vitest.describe)("Entity Filter", ()=>{
        (0, _vitest.it)("should filter by entity type", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Wait for initial load
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining("/api/audit-trail?type=deleted"), _vitest.expect.any(Object));
            });
            // Clear previous calls
            mockFetch.mockClear();
            // Click on entity filter dropdown
            const entitySelect = _react.screen.getByRole("combobox");
            await user.click(entitySelect);
            // Select 'product' option
            const productOption = _react.screen.getByRole("option", {
                name: /product/i
            });
            await user.click(productOption);
            // Verify API call with entity filter
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining("entity=product"), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)("should reset entity filter to all", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Wait for initial load
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalled();
            });
            // Set entity filter to product first
            const entitySelect = _react.screen.getByRole("combobox");
            await user.click(entitySelect);
            const productOption = _react.screen.getByRole("option", {
                name: /product/i
            });
            await user.click(productOption);
            mockFetch.mockClear();
            // Reset to 'all'
            await user.click(entitySelect);
            const allOption = _react.screen.getByRole("option", {
                name: /all/i
            });
            await user.click(allOption);
            // Verify API call without entity filter
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.not.stringContaining("entity="), _vitest.expect.any(Object));
            });
        });
    });
    (0, _vitest.describe)("Date Filter", ()=>{
        (0, _vitest.it)("should filter by date range", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Wait for initial load
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalled();
            });
            mockFetch.mockClear();
            // Click on "From Date" button
            const fromDateButton = _react.screen.getByRole("button", {
                name: /from date/i
            });
            await user.click(fromDateButton);
            // Select a date (this is simplified - in real tests you'd interact with the calendar)
            // For now, we'll simulate the date selection by triggering the effect
            // Click on "To Date" button
            const toDateButton = _react.screen.getByRole("button", {
                name: /to date/i
            });
            await user.click(toDateButton);
            // The actual date selection would trigger a re-fetch
            // We can test this by checking if the clear button appears
            (0, _vitest.expect)(_react.screen.getByRole("button", {
                name: /clear/i
            })).toBeInTheDocument();
        });
        (0, _vitest.it)("should clear date filters", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Wait for initial load
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalled();
            });
            // Simulate having date filters set (this would normally be done through date selection)
            // For testing purposes, we'll just check if the clear button works
            const clearButton = _react.screen.getByRole("button", {
                name: /clear/i
            });
            mockFetch.mockClear();
            await user.click(clearButton);
            // Should trigger a new fetch without date parameters
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.not.stringContaining("dateFrom="), _vitest.expect.any(Object));
            });
        });
    });
    (0, _vitest.describe)("Tab Switching", ()=>{
        (0, _vitest.it)("should switch between recycle bin and audit history tabs", async ()=>{
            const user = _userevent.default.setup();
            // Mock different responses for different tabs
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve(mockRecycleBinData)
            }).mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve(mockAuditHistoryData)
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Initially should load recycle bin
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining("type=deleted"), _vitest.expect.any(Object));
            });
            mockFetch.mockClear();
            // Switch to audit history tab
            const auditHistoryTab = _react.screen.getByRole("tab", {
                name: /audit history/i
            });
            await user.click(auditHistoryTab);
            // Should load audit history
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining("type=all"), _vitest.expect.any(Object));
            });
        });
    });
    (0, _vitest.describe)("Data Display", ()=>{
        (0, _vitest.it)("should display recycle bin items", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(_react.screen.getByText("Test Product")).toBeInTheDocument();
                (0, _vitest.expect)(_react.screen.getByText("Test Customer")).toBeInTheDocument();
                (0, _vitest.expect)(_react.screen.getByText("John Doe")).toBeInTheDocument();
                (0, _vitest.expect)(_react.screen.getByText("Jane Smith")).toBeInTheDocument();
            });
        });
        (0, _vitest.it)("should display audit history items when tab is switched", async ()=>{
            const user = _userevent.default.setup();
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve(mockRecycleBinData)
            }).mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve(mockAuditHistoryData)
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Switch to audit history tab
            const auditHistoryTab = _react.screen.getByRole("tab", {
                name: /audit history/i
            });
            await user.click(auditHistoryTab);
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(_react.screen.getByText("CREATE")).toBeInTheDocument();
                (0, _vitest.expect)(_react.screen.getByText("UPDATE")).toBeInTheDocument();
            });
        });
    });
    (0, _vitest.describe)("Error Handling", ()=>{
        (0, _vitest.it)("should show error toast when API call fails", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                    title: "Error",
                    description: "Failed to fetch recycle bin items",
                    variant: "destructive"
                });
            });
        });
        (0, _vitest.it)("should show authentication error when not authenticated", async ()=>{
            mockUseAuth.mockReturnValue({
                isAuthenticated: false,
                accessToken: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                    title: "Authentication Error",
                    description: "You must be logged in to view the audit trail",
                    variant: "destructive"
                });
            });
        });
    });
    (0, _vitest.describe)("Loading States", ()=>{
        (0, _vitest.it)("should show loading state while fetching data", async ()=>{
            // Mock a delayed response
            mockFetch.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: ()=>Promise.resolve(mockRecycleBinData)
                        }), 100)));
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Should show loading state initially
            (0, _vitest.expect)(_react.screen.getByText(/loading/i)).toBeInTheDocument();
            // Wait for data to load
            await (0, _react.waitFor)(()=>{
                (0, _vitest.expect)(_react.screen.queryByText(/loading/i)).not.toBeInTheDocument();
            }, {
                timeout: 200
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,