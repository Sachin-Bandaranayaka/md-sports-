{"version":3,"names":["cov_1ejhkpqkkv","actualCoverage","s","GET","request","params","f","id","parseInt","isNaN","b","_server","NextResponse","json","error","status","invoice","_prisma","prisma","findUnique","where","include","customer","items","product","payments","console","success","message","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/pdf/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: { id },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: true\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        // Return the invoice data for client-side PDF generation\n        // This way we avoid server-side PDF generation which can be complex with Next.js API routes\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error generating invoice PDF:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error generating invoice PDF',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAPU;;;;;;WAAAC,GAAA;;;;;kCAHO;;;kCACN;AAEhB,eAAeA,IAClBC,OAAgB,EAChB;EAAEC;AAAM,CAA8B;EAAA;EAAAL,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAE,CAAA;EAEtC,IAAI;IACA,MAAMK,EAAA;IAAA;IAAA,CAAAP,cAAA,GAAAE,CAAA,OAAKM,QAAA,CAASH,MAAA,CAAOE,EAAE;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAE7B,IAAIO,KAAA,CAAMF,EAAA,GAAK;MAAA;MAAAP,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACX,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,KAAA,EAAO;MAAqB,GAC9B;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAf,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA,MAAMM,OAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,OAAU,MAAMe,OAAA,CAAAC,MAAM,CAACF,OAAO,CAACG,UAAU,CAAC;MAC5CC,KAAA,EAAO;QAAEb;MAAG;MACZc,OAAA,EAAS;QACLC,QAAA,EAAU;QACVC,KAAA,EAAO;UACHF,OAAA,EAAS;YACLG,OAAA,EAAS;UACb;QACJ;QACAC,QAAA,EAAU;MACd;IACJ;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACc,OAAA,EAAS;MAAA;MAAAhB,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACV,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,KAAA,EAAO;MAAoB,GAC7B;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAf,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA;IAAAV,cAAA,GAAAE,CAAA;IACA,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,OAAA;EAC7B,EAAE,OAAOF,KAAA,EAAO;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACZwB,OAAA,CAAQZ,KAAK,CAAC,iCAAiCA,KAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAC/C,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIc,OAAA,EAAS;MACTC,OAAA,EAAS;MACTd,KAAA,EAAOA,KAAA,YAAiBe,KAAA;MAAA;MAAA,CAAA7B,cAAA,GAAAU,CAAA,UAAQI,KAAA,CAAMc,OAAO;MAAA;MAAA,CAAA5B,cAAA,GAAAU,CAAA,UAAGoB,MAAA,CAAOhB,KAAA;IAC3D,GACA;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}