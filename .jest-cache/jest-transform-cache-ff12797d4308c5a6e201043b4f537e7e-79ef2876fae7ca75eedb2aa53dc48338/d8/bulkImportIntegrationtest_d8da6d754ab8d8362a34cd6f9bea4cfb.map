{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/bulkImportIntegration.test.ts"],"sourcesContent":["\nimport { POST as bulkImportPOST } from '@/app/api/products/bulk-import/route';\nimport { POST as bulkCreatePOST } from '@/app/api/products/bulk-create/route';\nimport { GET as shopNamesGET } from '@/app/api/shops/names/route';\nimport * as XLSX from 'xlsx';\nimport { PrismaClient } from '@prisma/client';\n\n// This would be your test database instance\n// You might use a separate test database or use database transactions\n// that get rolled back after each test\n\ndescribe('Bulk Import Integration Tests', () => {\n  let prisma: PrismaClient;\n\n  beforeAll(async () => {\n    // Initialize test database connection\n    prisma = new PrismaClient({\n      datasources: {\n        db: {\n          url: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL,\n        },\n      },\n    });\n  });\n\n  afterAll(async () => {\n    await prisma.$disconnect();\n  });\n\n  beforeEach(async () => {\n    // Clean up test data before each test\n    await prisma.inventoryItem.deleteMany();\n    await prisma.product.deleteMany();\n    await prisma.category.deleteMany();\n    await prisma.shop.deleteMany();\n\n    // Set up test data\n    await prisma.shop.createMany({\n      data: [\n        { id: 'shop-1', name: 'Test Shop 1', location: 'Location 1', is_active: true },\n        { id: 'shop-2', name: 'Test Shop 2', location: 'Location 2', is_active: true },\n      ],\n    });\n\n    await prisma.category.createMany({\n      data: [\n        { id: 1, name: 'Sports', description: 'Sports equipment' },\n        { id: 2, name: 'Equipment', description: 'General equipment' },\n      ],\n    });\n  });\n\n  afterEach(async () => {\n    // Clean up after each test\n    await prisma.inventoryItem.deleteMany();\n    await prisma.product.deleteMany();\n    await prisma.category.deleteMany();\n    await prisma.shop.deleteMany();\n  });\n\n  describe('End-to-End Excel Upload Flow', () => {\n    const createTestExcelFile = (data: any[]) => {\n      const ws = XLSX.utils.json_to_sheet(data);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Products');\n      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n      return buffer;\n    };\n\n    const createTestRequest = (buffer: Buffer) => {\n      const formData = new FormData();\n      const file = new File([buffer], 'test-products.xlsx', {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      });\n      formData.append('file', file);\n\n      return new Request('http://localhost:3000/api/products/bulk-import', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': 'Bearer test-token',\n        },\n      });\n    };\n\n    it('should successfully import products with inventory', async () => {\n      const testData = [\n        {\n          Name: 'Integration Test Product 1',\n          SKU: 'ITP001',\n          Description: 'Test description 1',\n          RetailPrice: 100,\n          CostPrice: 80,\n          CategoryName: 'Sports',\n          InitialQuantity: 50,\n          ShopName: 'Test Shop 1',\n        },\n        {\n          Name: 'Integration Test Product 2',\n          SKU: 'ITP002',\n          Description: 'Test description 2',\n          RetailPrice: 200,\n          CostPrice: 160,\n          CategoryName: 'Equipment',\n          InitialQuantity: 25,\n          ShopName: 'Test Shop 2',\n        },\n      ];\n\n      const buffer = createTestExcelFile(testData);\n      const request = createTestRequest(buffer);\n\n      // Mock authentication to pass\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      const response = await bulkImportPOST(request as any);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.details).toHaveLength(2);\n\n      // Verify products were created in database\n      const products = await prisma.product.findMany({\n        include: {\n          category: true,\n          inventoryItems: {\n            include: {\n              shop: true,\n            },\n          },\n        },\n      });\n\n      expect(products).toHaveLength(2);\n\n      const product1 = products.find(p => p.sku === 'ITP001');\n      expect(product1).toBeDefined();\n      expect(product1?.name).toBe('Integration Test Product 1');\n      expect(product1?.price).toBe(100);\n      expect(product1?.weightedaveragecost).toBe(80);\n      expect(product1?.category?.name).toBe('Sports');\n      expect(product1?.inventoryItems).toHaveLength(1);\n      expect(product1?.inventoryItems[0].quantity).toBe(50);\n      expect(product1?.inventoryItems[0].shop?.name).toBe('Test Shop 1');\n\n      const product2 = products.find(p => p.sku === 'ITP002');\n      expect(product2).toBeDefined();\n      expect(product2?.name).toBe('Integration Test Product 2');\n      expect(product2?.inventoryItems[0].quantity).toBe(25);\n      expect(product2?.inventoryItems[0].shop?.name).toBe('Test Shop 2');\n    });\n\n    it('should handle validation errors in real database context', async () => {\n      const testData = [\n        {\n          Name: 'Valid Product',\n          SKU: 'VP001',\n          RetailPrice: 100,\n          CategoryName: 'Sports',\n        },\n        {\n          Name: 'Invalid Product - Bad Shop',\n          SKU: 'IP001',\n          RetailPrice: 200,\n          InitialQuantity: 50,\n          ShopName: 'Nonexistent Shop',\n        },\n        {\n          Name: 'Invalid Product - Bad Category',\n          SKU: 'IP002',\n          RetailPrice: 150,\n          CategoryName: 'Nonexistent Category',\n        },\n      ];\n\n      const buffer = createTestExcelFile(testData);\n      const request = createTestRequest(buffer);\n\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      const response = await bulkImportPOST(request as any);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details).toHaveLength(3);\n\n      // First product should succeed\n      expect(result.details[0].success).toBe(true);\n\n      // Second product should fail due to invalid shop\n      expect(result.details[1].success).toBe(false);\n      expect(result.details[1].message).toContain('Shop \\'Nonexistent Shop\\' not found');\n\n      // Third product should fail due to invalid category\n      expect(result.details[2].success).toBe(false);\n      expect(result.details[2].message).toContain('Category \\'Nonexistent Category\\' not found');\n\n      // Verify only one product was created\n      const products = await prisma.product.findMany();\n      expect(products).toHaveLength(1);\n      expect(products[0].sku).toBe('VP001');\n    });\n\n    it('should handle duplicate SKU validation', async () => {\n      // First, create a product\n      await prisma.product.create({\n        data: {\n          name: 'Existing Product',\n          sku: 'EXISTING001',\n          price: 100,\n          weightedaveragecost: 80,\n        },\n      });\n\n      const testData = [\n        {\n          Name: 'New Product',\n          SKU: 'NEW001',\n          RetailPrice: 100,\n        },\n        {\n          Name: 'Duplicate SKU Product',\n          SKU: 'EXISTING001', // This SKU already exists\n          RetailPrice: 200,\n        },\n      ];\n\n      const buffer = createTestExcelFile(testData);\n      const request = createTestRequest(buffer);\n\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      const response = await bulkImportPOST(request as any);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details).toHaveLength(2);\n\n      // First product should succeed\n      expect(result.details[0].success).toBe(true);\n\n      // Second product should fail due to duplicate SKU\n      expect(result.details[1].success).toBe(false);\n      expect(result.details[1].message).toContain('SKU \\'EXISTING001\\' already exists');\n\n      // Verify only the new product was created (plus the existing one)\n      const products = await prisma.product.findMany();\n      expect(products).toHaveLength(2); // existing + new\n    });\n  });\n\n  describe('JSON API Integration', () => {\n    it('should create products via JSON API with database persistence', async () => {\n      const products = [\n        {\n          name: 'JSON API Product 1',\n          sku: 'JAP001',\n          price: 100,\n          weightedAverageCost: 80,\n          categoryId: 1,\n          initialQuantity: 30,\n          shopId: 'shop-1',\n        },\n        {\n          name: 'JSON API Product 2',\n          sku: 'JAP002',\n          price: 200,\n          weightedAverageCost: 160,\n          categoryId: 2,\n        },\n      ];\n\n      const request = new Request('http://localhost:3000/api/products/bulk-create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer test-token',\n        },\n        body: JSON.stringify({ products }),\n      });\n\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      const response = await bulkCreatePOST(request as any);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.successCount).toBe(2);\n\n      // Verify products in database\n      const dbProducts = await prisma.product.findMany({\n        include: {\n          inventoryItems: true,\n        },\n      });\n\n      expect(dbProducts).toHaveLength(2);\n\n      const product1 = dbProducts.find(p => p.sku === 'JAP001');\n      expect(product1).toBeDefined();\n      expect(product1?.inventoryItems).toHaveLength(1);\n      expect(product1?.inventoryItems[0].quantity).toBe(30);\n\n      const product2 = dbProducts.find(p => p.sku === 'JAP002');\n      expect(product2).toBeDefined();\n      expect(product2?.inventoryItems).toHaveLength(0); // No initial quantity\n    });\n  });\n\n  describe('Shop Names API Integration', () => {\n    it('should return actual shop names from database', async () => {\n      const request = new Request('http://localhost:3000/api/shops/names');\n      const response = await shopNamesGET();\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.shopNames).toEqual(['Test Shop 1', 'Test Shop 2']);\n    });\n\n    it('should only return active shops', async () => {\n      // Add an inactive shop\n      await prisma.shop.create({\n        data: {\n          id: 'shop-3',\n          name: 'Inactive Shop',\n          location: 'Location 3',\n          is_active: false,\n        },\n      });\n\n      const request = new Request('http://localhost:3000/api/shops/names');\n      const response = await shopNamesGET();\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.shopNames).toEqual(['Test Shop 1', 'Test Shop 2']);\n      expect(result.shopNames).not.toContain('Inactive Shop');\n    });\n  });\n\n  describe('Performance and Edge Cases', () => {\n    it('should handle large batch import efficiently', async () => {\n      const largeDataset = Array.from({ length: 100 }, (_, i) => ({\n        Name: `Bulk Product ${i + 1}`,\n        SKU: `BULK${String(i + 1).padStart(3, '0')}`,\n        RetailPrice: 100 + i,\n        CostPrice: 80 + i,\n        CategoryName: i % 2 === 0 ? 'Sports' : 'Equipment',\n      }));\n\n      const buffer = createTestExcelFile(largeDataset);\n      const request = createTestRequest(buffer);\n\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      const startTime = Date.now();\n      const response = await bulkImportPOST(request as any);\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.details).toHaveLength(100);\n\n      // Should complete within reasonable time (adjust based on your performance requirements)\n      expect(duration).toBeLessThan(10000); // 10 seconds\n\n      // Verify all products were created\n      const products = await prisma.product.count();\n      expect(products).toBe(100);\n    });\n\n    it('should handle transaction rollback on partial failures', async () => {\n      const testData = [\n        {\n          Name: 'Valid Product 1',\n          SKU: 'VP001',\n          RetailPrice: 100,\n        },\n        {\n          Name: 'Valid Product 2',\n          SKU: 'VP002',\n          RetailPrice: 200,\n        },\n      ];\n\n      // First import should succeed\n      let buffer = createTestExcelFile(testData);\n      let request = createTestRequest(buffer);\n\n      jest.mock('@/lib/auth', () => ({\n        validateTokenPermission: jest.fn().mockResolvedValue({ isValid: true }),\n      }));\n\n      await bulkImportPOST(request as any);\n\n      // Second import with duplicate SKUs should handle failures properly\n      const duplicateData = [\n        {\n          Name: 'New Valid Product',\n          SKU: 'NVP001',\n          RetailPrice: 300,\n        },\n        {\n          Name: 'Duplicate Product',\n          SKU: 'VP001', // This will fail\n          RetailPrice: 400,\n        },\n      ];\n\n      buffer = createTestExcelFile(duplicateData);\n      request = createTestRequest(buffer);\n\n      const response = await bulkImportPOST(request as any);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details[0].success).toBe(true);\n      expect(result.details[1].success).toBe(false);\n\n      // Verify that only valid products exist\n      const products = await prisma.product.findMany();\n      expect(products).toHaveLength(3); // 2 from first import + 1 from second\n      expect(products.map(p => p.sku).sort()).toEqual(['NVP001', 'VP001', 'VP002']);\n    });\n  });\n}); "],"names":["describe","prisma","beforeAll","PrismaClient","datasources","db","url","process","env","TEST_DATABASE_URL","DATABASE_URL","afterAll","$disconnect","beforeEach","inventoryItem","deleteMany","product","category","shop","createMany","data","id","name","location","is_active","description","afterEach","createTestExcelFile","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","buffer","write","type","bookType","createTestRequest","formData","FormData","file","File","append","Request","method","body","headers","it","jest","mock","validateTokenPermission","fn","mockResolvedValue","isValid","testData","Name","SKU","Description","RetailPrice","CostPrice","CategoryName","InitialQuantity","ShopName","request","response","bulkImportPOST","result","json","expect","status","toBe","success","details","toHaveLength","products","findMany","include","inventoryItems","product1","find","p","sku","toBeDefined","price","weightedaveragecost","quantity","product2","message","toContain","create","weightedAverageCost","categoryId","initialQuantity","shopId","JSON","stringify","bulkCreatePOST","successCount","dbProducts","shopNamesGET","shopNames","toEqual","not","largeDataset","Array","from","length","_","i","String","padStart","startTime","Date","now","endTime","duration","toBeLessThan","count","duplicateData","map","sort"],"mappings":"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"}