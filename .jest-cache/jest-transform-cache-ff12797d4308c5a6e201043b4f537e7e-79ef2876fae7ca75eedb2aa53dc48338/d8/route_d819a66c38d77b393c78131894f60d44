3a702234e0109053febc2873007653dc
"use strict";

/* istanbul ignore next */
function cov_18ou1cfcnl() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts";
  var hash = "ba614a4e2928cdc3a17df5e7bc801dfeb74c172c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 49
        }
      },
      "9": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "10": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 80
        }
      },
      "11": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "12": {
        start: {
          line: 25,
          column: 36
        },
        end: {
          line: 25,
          column: 89
        }
      },
      "13": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 78
        }
      },
      "14": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 62,
          column: 1
        }
      },
      "15": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 85
        }
      },
      "16": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 90
        }
      },
      "17": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 95
        }
      },
      "18": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "19": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 91
        }
      },
      "20": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 45
        }
      },
      "21": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 31
        }
      },
      "22": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 55
        }
      },
      "23": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 45
        }
      },
      "25": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "26": {
        start: {
          line: 84,
          column: 18
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "27": {
        start: {
          line: 85,
          column: 25
        },
        end: {
          line: 85,
          column: 60
        }
      },
      "28": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "29": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 45
        }
      },
      "30": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "31": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 42
        }
      },
      "32": {
        start: {
          line: 96,
          column: 28
        },
        end: {
          line: 96,
          column: 99
        }
      },
      "33": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 101,
          column: 46
        }
      },
      "34": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 82
        }
      },
      "35": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "36": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 61
        }
      },
      "37": {
        start: {
          line: 106,
          column: 33
        },
        end: {
          line: 106,
          column: 49
        }
      },
      "38": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "39": {
        start: {
          line: 118,
          column: 23
        },
        end: {
          line: 118,
          column: 78
        }
      },
      "40": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "41": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 49
        }
      },
      "42": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 53
        }
      },
      "43": {
        start: {
          line: 124,
          column: 23
        },
        end: {
          line: 198,
          column: 27
        }
      },
      "44": {
        start: {
          line: 125,
          column: 30
        },
        end: {
          line: 193,
          column: 75
        }
      },
      "45": {
        start: {
          line: 127,
          column: 34
        },
        end: {
          line: 127,
          column: 36
        }
      },
      "46": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 143,
          column: 17
        }
      },
      "47": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "48": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 80
        }
      },
      "49": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 94
        }
      },
      "50": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 180,
          column: 18
        }
      },
      "51": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "52": {
        start: {
          line: 182,
          column: 47
        },
        end: {
          line: 192,
          column: 21
        }
      },
      "53": {
        start: {
          line: 191,
          column: 80
        },
        end: {
          line: 191,
          column: 99
        }
      },
      "54": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "55": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 72
        }
      },
      "56": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 74
        }
      },
      "57": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 78
        }
      },
      "58": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 46
        }
      },
      "59": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 49
        }
      },
      "60": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 58
        }
      },
      "61": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 44
        }
      },
      "62": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "63": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 218,
          column: 91
        }
      },
      "64": {
        start: {
          line: 220,
          column: 28
        },
        end: {
          line: 220,
          column: 95
        }
      },
      "65": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "66": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 91
        }
      },
      "67": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 31
        }
      },
      "68": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 347,
          column: 5
        }
      },
      "69": {
        start: {
          line: 228,
          column: 21
        },
        end: {
          line: 228,
          column: 37
        }
      },
      "70": {
        start: {
          line: 229,
          column: 59
        },
        end: {
          line: 229,
          column: 63
        }
      },
      "71": {
        start: {
          line: 230,
          column: 34
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "72": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 105
        }
      },
      "73": {
        start: {
          line: 236,
          column: 27
        },
        end: {
          line: 236,
          column: 59
        }
      },
      "74": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "75": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 49
        }
      },
      "76": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 244,
          column: 15
        }
      },
      "77": {
        start: {
          line: 246,
          column: 22
        },
        end: {
          line: 246,
          column: 46
        }
      },
      "78": {
        start: {
          line: 247,
          column: 29
        },
        end: {
          line: 247,
          column: 64
        }
      },
      "79": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "80": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 49
        }
      },
      "81": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 255,
          column: 15
        }
      },
      "82": {
        start: {
          line: 257,
          column: 23
        },
        end: {
          line: 257,
          column: 39
        }
      },
      "83": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 62
        }
      },
      "84": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "85": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 53
        }
      },
      "86": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "87": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 315,
          column: 55
        }
      },
      "88": {
        start: {
          line: 270,
          column: 32
        },
        end: {
          line: 313,
          column: 14
        }
      },
      "89": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 294,
          column: 17
        }
      },
      "90": {
        start: {
          line: 273,
          column: 41
        },
        end: {
          line: 273,
          column: 65
        }
      },
      "91": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 274,
          column: 58
        }
      },
      "92": {
        start: {
          line: 275,
          column: 38
        },
        end: {
          line: 280,
          column: 22
        }
      },
      "93": {
        start: {
          line: 281,
          column: 20
        },
        end: {
          line: 283,
          column: 21
        }
      },
      "94": {
        start: {
          line: 282,
          column: 24
        },
        end: {
          line: 282,
          column: 105
        }
      },
      "95": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 293,
          column: 23
        }
      },
      "96": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 310,
          column: 19
        }
      },
      "97": {
        start: {
          line: 304,
          column: 55
        },
        end: {
          line: 307,
          column: 33
        }
      },
      "98": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 31
        }
      },
      "99": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "100": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 57
        }
      },
      "101": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 323,
          column: 11
        }
      },
      "102": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 73
        }
      },
      "103": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 28
        }
      },
      "104": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 334,
          column: 11
        }
      },
      "105": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 57
        }
      },
      "106": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "107": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 51
        }
      },
      "108": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 346,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 18
          }
        },
        loc: {
          start: {
            line: 63,
            column: 24
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 124,
            column: 75
          },
          end: {
            line: 124,
            column: 76
          }
        },
        loc: {
          start: {
            line: 124,
            column: 85
          },
          end: {
            line: 198,
            column: 9
          }
        },
        line: 124
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 59
          },
          end: {
            line: 125,
            column: 60
          }
        },
        loc: {
          start: {
            line: 125,
            column: 69
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 182,
            column: 34
          },
          end: {
            line: 182,
            column: 35
          }
        },
        loc: {
          start: {
            line: 182,
            column: 47
          },
          end: {
            line: 192,
            column: 21
          }
        },
        line: 182
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 191,
            column: 67
          },
          end: {
            line: 191,
            column: 68
          }
        },
        loc: {
          start: {
            line: 191,
            column: 80
          },
          end: {
            line: 191,
            column: 99
          }
        },
        line: 191
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 217,
            column: 15
          },
          end: {
            line: 217,
            column: 19
          }
        },
        loc: {
          start: {
            line: 217,
            column: 25
          },
          end: {
            line: 348,
            column: 1
          }
        },
        line: 217
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 269,
            column: 52
          },
          end: {
            line: 269,
            column: 53
          }
        },
        loc: {
          start: {
            line: 269,
            column: 62
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 269
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 270,
            column: 66
          },
          end: {
            line: 270,
            column: 67
          }
        },
        loc: {
          start: {
            line: 270,
            column: 78
          },
          end: {
            line: 311,
            column: 13
          }
        },
        line: 270
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 304,
            column: 46
          },
          end: {
            line: 304,
            column: 47
          }
        },
        loc: {
          start: {
            line: 304,
            column: 55
          },
          end: {
            line: 307,
            column: 33
          }
        },
        line: 304
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 19
          }
        }, {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 56
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 28
          },
          end: {
            line: 96,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 70
          },
          end: {
            line: 96,
            column: 94
          }
        }, {
          start: {
            line: 96,
            column: 97
          },
          end: {
            line: 96,
            column: 99
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 101,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 99,
            column: 19
          }
        }, {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 101,
            column: 21
          }
        }, {
          start: {
            line: 101,
            column: 25
          },
          end: {
            line: 101,
            column: 46
          }
        }],
        line: 97
      },
      "6": {
        loc: {
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 51
          }
        }, {
          start: {
            line: 108,
            column: 55
          },
          end: {
            line: 108,
            column: 58
          }
        }],
        line: 108
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 28
          },
          end: {
            line: 109,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 28
          },
          end: {
            line: 109,
            column: 53
          }
        }, {
          start: {
            line: 109,
            column: 57
          },
          end: {
            line: 109,
            column: 61
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 110,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 110,
            column: 46
          }
        }, {
          start: {
            line: 110,
            column: 50
          },
          end: {
            line: 110,
            column: 59
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 61
          },
          end: {
            line: 111,
            column: 103
          }
        }, {
          start: {
            line: 111,
            column: 106
          },
          end: {
            line: 111,
            column: 115
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 112,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 71
          },
          end: {
            line: 112,
            column: 118
          }
        }, {
          start: {
            line: 112,
            column: 121
          },
          end: {
            line: 112,
            column: 130
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 46
          }
        }, {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 59
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 52
          }
        }, {
          start: {
            line: 114,
            column: 56
          },
          end: {
            line: 114,
            column: 65
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 48
          }
        }, {
          start: {
            line: 115,
            column: 52
          },
          end: {
            line: 115,
            column: 61
          }
        }],
        line: 115
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        }, {
          start: {
            line: 141,
            column: 23
          },
          end: {
            line: 143,
            column: 17
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 28
          }
        }, {
          start: {
            line: 129,
            column: 32
          },
          end: {
            line: 129,
            column: 42
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 211,
            column: 19
          },
          end: {
            line: 211,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 44
          },
          end: {
            line: 211,
            column: 57
          }
        }, {
          start: {
            line: 211,
            column: 60
          },
          end: {
            line: 211,
            column: 73
          }
        }],
        line: 211
      },
      "18": {
        loc: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "19": {
        loc: {
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 36
          }
        }, {
          start: {
            line: 231,
            column: 40
          },
          end: {
            line: 231,
            column: 41
          }
        }],
        line: 231
      },
      "20": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "21": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 23
          }
        }, {
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 60
          }
        }],
        line: 237
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "23": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 248,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 248,
            column: 25
          }
        }, {
          start: {
            line: 248,
            column: 29
          },
          end: {
            line: 248,
            column: 46
          }
        }],
        line: 248
      },
      "24": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "25": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 25
          }
        }, {
          start: {
            line: 260,
            column: 29
          },
          end: {
            line: 260,
            column: 47
          }
        }, {
          start: {
            line: 260,
            column: 51
          },
          end: {
            line: 260,
            column: 57
          }
        }, {
          start: {
            line: 260,
            column: 61
          },
          end: {
            line: 260,
            column: 74
          }
        }],
        line: 260
      },
      "26": {
        loc: {
          start: {
            line: 281,
            column: 20
          },
          end: {
            line: 283,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 20
          },
          end: {
            line: 283,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "27": {
        loc: {
          start: {
            line: 281,
            column: 24
          },
          end: {
            line: 281,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 24
          },
          end: {
            line: 281,
            column: 34
          }
        }, {
          start: {
            line: 281,
            column: 38
          },
          end: {
            line: 281,
            column: 65
          }
        }],
        line: 281
      },
      "28": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "29": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "30": {
        loc: {
          start: {
            line: 343,
            column: 19
          },
          end: {
            line: 343,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 44
          },
          end: {
            line: 343,
            column: 57
          }
        }, {
          start: {
            line: 343,
            column: 60
          },
          end: {
            line: 343,
            column: 73
          }
        }],
        line: 343
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { verifyToken } from '@/lib/auth';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport { transferCacheService } from '@/lib/transferCache';\nimport { trackTransferOperation } from '@/lib/transferPerformanceMonitor';\nimport { deduplicateRequest } from '@/lib/request-deduplication';\n\n// Type definition for transfer items\ninterface TransferItem {\n    productId: string;\n    quantity: string;\n}\n\n// Default fallback data for transfers\nconst defaultTransfersData = [\n    { id: 1, status: 'pending', created_at: '2025-05-20T10:00:00Z', completed_at: null, source_shop_name: 'Colombo Shop', destination_shop_name: 'Kandy Shop', initiated_by: 'System User', item_count: 5, total_items: 25 },\n    { id: 2, status: 'completed', created_at: '2025-05-19T09:30:00Z', completed_at: '2025-05-19T16:00:00Z', source_shop_name: 'Galle Shop', destination_shop_name: 'Colombo Shop', initiated_by: 'System User', item_count: 3, total_items: 15 },\n    { id: 3, status: 'cancelled', created_at: '2025-05-18T14:00:00Z', completed_at: null, source_shop_name: 'Kandy Shop', destination_shop_name: 'Jaffna Shop', initiated_by: 'System User', item_count: 2, total_items: 10 }\n];\n\n// GET: Fetch all inventory transfers\nexport async function GET(req: NextRequest) {\n    const operation = trackTransferOperation('list');\n\n    console.log('GET /api/inventory/transfers - Checking permission: inventory:transfer');\n    // Check for inventory:transfer permission (shop staff should have this)\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        console.error('Permission denied for inventory:transfer:', permissionError.status);\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    // Get user context for shop filtering\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        operation.end(false, 'unauthorized');\n        return NextResponse.json({\n            success: false,\n            message: 'Authentication required'\n        }, { status: 401 });\n    }\n\n    const token = authHeader.split(' ')[1];\n    const decodedToken = await verifyToken(token);\n\n    if (!decodedToken) {\n        operation.end(false, 'unauthorized');\n        return NextResponse.json({\n            success: false,\n            message: 'Invalid token'\n        }, { status: 401 });\n    }\n\n    const userShopId = decodedToken.shopId;\n    const userPermissions = Array.isArray(decodedToken.permissions) ? decodedToken.permissions : [];\n    const isAdmin = permissionService.hasPermission({ permissions: userPermissions }, 'admin:all') || \n                    permissionService.hasPermission({ permissions: userPermissions }, 'shop:manage') || \n                    token === 'dev-token';\n    \n    console.log('User shop filtering - shopId:', userShopId, 'isAdmin:', isAdmin);\n\n    try {\n        console.log('Executing query to fetch transfers...');\n\n        // Generate cache key based on request parameters\n        const { searchParams } = new URL(req.url);\n        const cacheKey = transferCacheService.generateTransferCacheKey('transfers:list', {\n            page: parseInt(searchParams.get('page') || '1'),\n            limit: parseInt(searchParams.get('limit') || '10'),\n            status: searchParams.get('status') || undefined,\n            sourceShopId: searchParams.get('sourceShopId') ? parseInt(searchParams.get('sourceShopId')!) : undefined,\n            destinationShopId: searchParams.get('destinationShopId') ? parseInt(searchParams.get('destinationShopId')!) : undefined,\n            search: searchParams.get('search') || undefined,\n            startDate: searchParams.get('startDate') || undefined,\n            endDate: searchParams.get('endDate') || undefined\n        });\n\n        // Try to get from cache first\n        const cached = await transferCacheService.get(cacheKey);\n        if (cached) {\n            operation.end(true, undefined, true);\n            return NextResponse.json(cached);\n        }\n\n        // Use request deduplication for identical requests\n        const result = await deduplicateRequest(\n            async () => {\n                const transfers = await safeQuery(\n                    async () => {\n                        // Build where clause for shop filtering\n                        let whereClause: any = {};\n                        \n                        // If user is not admin and has a specific shop, filter transfers\n                        if (!isAdmin && userShopId) {\n                            whereClause = {\n                                OR: [\n                                    { fromShopId: userShopId },\n                                    { toShopId: userShopId }\n                                ]\n                            };\n                            console.log('Applying shop filter for shopId:', userShopId);\n                        } else {\n                            console.log('No shop filtering applied - admin user or no shop assigned');\n                        }\n                        \n                        const result = await prisma.inventoryTransfer.findMany({\n                            where: whereClause,\n                            select: {\n                                id: true,\n                                status: true,\n                                createdAt: true,\n                                updatedAt: true,\n                                notes: true,\n                                fromShop: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                toShop: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                fromUser: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                transferItems: {\n                                    select: {\n                                        id: true,\n                                        quantity: true\n                                    }\n                                }\n                            },\n                            orderBy: {\n                                createdAt: 'desc'\n                            }\n                        });\n\n                        // Format the data to match the expected format from the SQL query\n                        return result.map(transfer => ({\n                            id: transfer.id,\n                            status: transfer.status,\n                            created_at: transfer.createdAt.toISOString(),\n                            completed_at: null, // This field doesn't exist in Prisma schema, could be added later\n                            source_shop_name: transfer.fromShop.name,\n                            destination_shop_name: transfer.toShop.name,\n                            initiated_by: transfer.fromUser.name,\n                            item_count: transfer.transferItems.length,\n                            total_items: transfer.transferItems.reduce((sum, item) => sum + item.quantity, 0)\n                        }));\n                    },\n                    defaultTransfersData,\n                    'Failed to fetch inventory transfers'\n                );\n\n                return {\n                    success: true,\n                    data: transfers\n                };\n            },\n            cacheKey,\n            'GET'\n        );\n\n        // Cache the result\n        await transferCacheService.set(cacheKey, result);\n\n        console.log('Query executed successfully. Results:', result.data);\n        console.log(`Retrieved ${result.data.length} transfers successfully`);\n        operation.end(true, undefined, false);\n        return NextResponse.json(result);\n    } catch (error) {\n        console.error('Error fetching transfers:', error);\n        operation.end(false, 'fetch_error');\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching transfers',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new inventory transfer\nexport async function POST(req: NextRequest) {\n    console.log('POST /api/inventory/transfers - Checking permission: inventory:transfer');\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        console.error('Permission denied for inventory:transfer:', permissionError.status);\n        return permissionError;\n    }\n\n    // Create operation with metadata first\n    let operation: any;\n    \n    try {\n        const body = await req.json();\n        const { sourceShopId, destinationShopId, items } = body;\n\n        const operationMetadata = {\n            itemCount: items?.length || 0,\n            shopCount: 2 // source + destination\n        };\n        operation = trackTransferOperation('create', operationMetadata);\n\n        // Get user ID from authorization token\n        const authHeader = req.headers.get('authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            operation.end(false, 'unauthorized');\n            return NextResponse.json({\n                success: false,\n                message: 'Authentication required'\n            }, { status: 401 });\n        }\n\n        const token = authHeader.split(' ')[1];\n        const decodedToken = await verifyToken(token);\n\n        if (!decodedToken || !decodedToken.sub) {\n            operation.end(false, 'unauthorized');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid token: signature verification failed'\n            }, { status: 401 });\n        }\n\n        const userId = decodedToken.sub;\n        console.log('Creating transfer for user ID:', userId);\n\n        // Validate request data\n        if (!sourceShopId || !destinationShopId || !items || !items.length) {\n            operation.end(false, 'validation_error');\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        const result = await safeQuery(\n            async () => {\n                const newTransfer = await prisma.$transaction(\n                    async (tx) => {\n                        // 1. Reserve inventory in source shop\n                        for (const item of items) {\n                            const productIdNum = parseInt(item.productId);\n                            const qtyNum = parseInt(item.quantity);\n\n                            const inventory = await tx.inventoryItem.findFirst({\n                                where: { productId: productIdNum, shopId: sourceShopId }\n                            });\n\n                            if (!inventory || inventory.quantity < qtyNum) {\n                                throw new Error(`Insufficient stock for product ${productIdNum} in source shop`);\n                            }\n\n                            await tx.inventoryItem.update({\n                                where: { id: inventory.id },\n                                data: { quantity: { decrement: qtyNum } }\n                            });\n                        }\n\n                        // 2. Insert transfer & items\n                        return await tx.inventoryTransfer.create({\n                            data: {\n                                fromShopId: sourceShopId,\n                                toShopId: destinationShopId,\n                                fromUserId: userId,\n                                toUserId: userId,\n                                status: 'pending',\n                                transferItems: {\n                                    create: items.map((item: TransferItem) => ({\n                                        productId: parseInt(item.productId),\n                                        quantity: parseInt(item.quantity)\n                                    }))\n                                }\n                            }\n                        });\n                    },\n                    { timeout: 30000 }\n                );\n\n                return newTransfer;\n            },\n            null,\n            'Failed to create inventory transfer'\n        );\n\n        if (!result) {\n            throw new Error('Failed to create transfer');\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(result.id, [sourceShopId, destinationShopId]);\n\n        console.log('Transfer created successfully with ID:', result.id);\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Inventory transfer created successfully',\n            data: {\n                id: result.id\n            }\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating transfer:', error);\n        if (operation) {\n            operation.end(false, 'creation_error');\n        }\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating transfer',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["GET", "POST", "defaultTransfersData", "id", "status", "created_at", "completed_at", "source_shop_name", "destination_shop_name", "initiated_by", "item_count", "total_items", "req", "operation", "trackTransferOperation", "console", "log", "permissionError", "requirePermission", "error", "end", "authHeader", "headers", "get", "startsWith", "NextResponse", "json", "success", "message", "token", "split", "decodedToken", "verifyToken", "userShopId", "shopId", "userPermissions", "Array", "isArray", "permissions", "isAdmin", "permissionService", "hasPermission", "searchParams", "URL", "url", "cacheKey", "transferCacheService", "generateTransferCacheKey", "page", "parseInt", "limit", "undefined", "sourceShopId", "destinationShopId", "search", "startDate", "endDate", "cached", "result", "deduplicateRequest", "transfers", "safeQuery", "whereClause", "OR", "fromShopId", "toShopId", "prisma", "inventoryTransfer", "findMany", "where", "select", "createdAt", "updatedAt", "notes", "fromShop", "name", "toShop", "fromUser", "transferItems", "quantity", "orderBy", "map", "transfer", "toISOString", "length", "reduce", "sum", "item", "data", "set", "Error", "String", "body", "items", "operationMetadata", "itemCount", "shopCount", "sub", "userId", "newTransfer", "$transaction", "tx", "productIdNum", "productId", "qtyNum", "inventory", "inventoryItem", "findFirst", "update", "decrement", "create", "fromUserId", "toUserId", "timeout", "invalidateTransferCache"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ba614a4e2928cdc3a17df5e7bc801dfeb74c172c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18ou1cfcnl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18ou1cfcnl();
cov_18ou1cfcnl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[0]++;
  cov_18ou1cfcnl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_18ou1cfcnl().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_18ou1cfcnl().f[1]++;
    cov_18ou1cfcnl().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_18ou1cfcnl().f[2]++;
    cov_18ou1cfcnl().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[6]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[7]++, require("../../../../lib/utils/middleware"));
const _prisma =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[8]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[9]++, require("../../../../lib/auth"));
const _PermissionService =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[10]++, require("../../../../lib/services/PermissionService"));
const _transferCache =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[11]++, require("../../../../lib/transferCache"));
const _transferPerformanceMonitor =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[12]++, require("../../../../lib/transferPerformanceMonitor"));
const _requestdeduplication =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[13]++, require("../../../../lib/request-deduplication"));
// Default fallback data for transfers
const defaultTransfersData =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[14]++, [{
  id: 1,
  status: "pending",
  created_at: "2025-05-20T10:00:00Z",
  completed_at: null,
  source_shop_name: "Colombo Shop",
  destination_shop_name: "Kandy Shop",
  initiated_by: "System User",
  item_count: 5,
  total_items: 25
}, {
  id: 2,
  status: "completed",
  created_at: "2025-05-19T09:30:00Z",
  completed_at: "2025-05-19T16:00:00Z",
  source_shop_name: "Galle Shop",
  destination_shop_name: "Colombo Shop",
  initiated_by: "System User",
  item_count: 3,
  total_items: 15
}, {
  id: 3,
  status: "cancelled",
  created_at: "2025-05-18T14:00:00Z",
  completed_at: null,
  source_shop_name: "Kandy Shop",
  destination_shop_name: "Jaffna Shop",
  initiated_by: "System User",
  item_count: 2,
  total_items: 10
}]);
async function GET(req) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[3]++;
  const operation =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[15]++, (0, _transferPerformanceMonitor.trackTransferOperation)("list"));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[16]++;
  console.log("GET /api/inventory/transfers - Checking permission: inventory:transfer");
  // Check for inventory:transfer permission (shop staff should have this)
  const permissionError =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[17]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[18]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[0][0]++;
    cov_18ou1cfcnl().s[19]++;
    console.error("Permission denied for inventory:transfer:", permissionError.status);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[20]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[21]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[0][1]++;
  }
  // Get user context for shop filtering
  const authHeader =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[22]++, req.headers.get("authorization"));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[2][0]++, !authHeader) ||
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[2][1]++, !authHeader.startsWith("Bearer "))) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[1][0]++;
    cov_18ou1cfcnl().s[24]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Authentication required"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[1][1]++;
  }
  const token =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[26]++, authHeader.split(" ")[1]);
  const decodedToken =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[27]++, await (0, _auth.verifyToken)(token));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[28]++;
  if (!decodedToken) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[3][0]++;
    cov_18ou1cfcnl().s[29]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[30]++;
    return _server.NextResponse.json({
      success: false,
      message: "Invalid token"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[3][1]++;
  }
  const userShopId =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[31]++, decodedToken.shopId);
  const userPermissions =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[32]++, Array.isArray(decodedToken.permissions) ?
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[4][0]++, decodedToken.permissions) :
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[4][1]++, []));
  const isAdmin =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[33]++,
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[5][0]++, _PermissionService.permissionService.hasPermission({
    permissions: userPermissions
  }, "admin:all")) ||
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[5][1]++, _PermissionService.permissionService.hasPermission({
    permissions: userPermissions
  }, "shop:manage")) ||
  /* istanbul ignore next */
  (cov_18ou1cfcnl().b[5][2]++, token === "dev-token"));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[34]++;
  console.log("User shop filtering - shopId:", userShopId, "isAdmin:", isAdmin);
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[35]++;
  try {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[36]++;
    console.log("Executing query to fetch transfers...");
    // Generate cache key based on request parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[37]++, new URL(req.url));
    const cacheKey =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[38]++, _transferCache.transferCacheService.generateTransferCacheKey("transfers:list", {
      page: parseInt(
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[6][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[6][1]++, "1")),
      limit: parseInt(
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[7][0]++, searchParams.get("limit")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[7][1]++, "10")),
      status:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[8][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[8][1]++, undefined),
      sourceShopId: searchParams.get("sourceShopId") ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[9][0]++, parseInt(searchParams.get("sourceShopId"))) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[9][1]++, undefined),
      destinationShopId: searchParams.get("destinationShopId") ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[10][0]++, parseInt(searchParams.get("destinationShopId"))) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[10][1]++, undefined),
      search:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[11][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[11][1]++, undefined),
      startDate:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[12][0]++, searchParams.get("startDate")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[12][1]++, undefined),
      endDate:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[13][0]++, searchParams.get("endDate")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[13][1]++, undefined)
    }));
    // Try to get from cache first
    const cached =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[39]++, await _transferCache.transferCacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[40]++;
    if (cached) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[14][0]++;
      cov_18ou1cfcnl().s[41]++;
      operation.end(true, undefined, true);
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[42]++;
      return _server.NextResponse.json(cached);
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[14][1]++;
    }
    // Use request deduplication for identical requests
    const result =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[43]++, await (0, _requestdeduplication.deduplicateRequest)(async () => {
      /* istanbul ignore next */
      cov_18ou1cfcnl().f[4]++;
      const transfers =
      /* istanbul ignore next */
      (cov_18ou1cfcnl().s[44]++, await (0, _prisma.safeQuery)(async () => {
        /* istanbul ignore next */
        cov_18ou1cfcnl().f[5]++;
        // Build where clause for shop filtering
        let whereClause =
        /* istanbul ignore next */
        (cov_18ou1cfcnl().s[45]++, {});
        // If user is not admin and has a specific shop, filter transfers
        /* istanbul ignore next */
        cov_18ou1cfcnl().s[46]++;
        if (
        /* istanbul ignore next */
        (cov_18ou1cfcnl().b[16][0]++, !isAdmin) &&
        /* istanbul ignore next */
        (cov_18ou1cfcnl().b[16][1]++, userShopId)) {
          /* istanbul ignore next */
          cov_18ou1cfcnl().b[15][0]++;
          cov_18ou1cfcnl().s[47]++;
          whereClause = {
            OR: [{
              fromShopId: userShopId
            }, {
              toShopId: userShopId
            }]
          };
          /* istanbul ignore next */
          cov_18ou1cfcnl().s[48]++;
          console.log("Applying shop filter for shopId:", userShopId);
        } else {
          /* istanbul ignore next */
          cov_18ou1cfcnl().b[15][1]++;
          cov_18ou1cfcnl().s[49]++;
          console.log("No shop filtering applied - admin user or no shop assigned");
        }
        const result =
        /* istanbul ignore next */
        (cov_18ou1cfcnl().s[50]++, await _prisma.prisma.inventoryTransfer.findMany({
          where: whereClause,
          select: {
            id: true,
            status: true,
            createdAt: true,
            updatedAt: true,
            notes: true,
            fromShop: {
              select: {
                id: true,
                name: true
              }
            },
            toShop: {
              select: {
                id: true,
                name: true
              }
            },
            fromUser: {
              select: {
                id: true,
                name: true
              }
            },
            transferItems: {
              select: {
                id: true,
                quantity: true
              }
            }
          },
          orderBy: {
            createdAt: "desc"
          }
        }));
        // Format the data to match the expected format from the SQL query
        /* istanbul ignore next */
        cov_18ou1cfcnl().s[51]++;
        return result.map(transfer => {
          /* istanbul ignore next */
          cov_18ou1cfcnl().f[6]++;
          cov_18ou1cfcnl().s[52]++;
          return {
            id: transfer.id,
            status: transfer.status,
            created_at: transfer.createdAt.toISOString(),
            completed_at: null,
            source_shop_name: transfer.fromShop.name,
            destination_shop_name: transfer.toShop.name,
            initiated_by: transfer.fromUser.name,
            item_count: transfer.transferItems.length,
            total_items: transfer.transferItems.reduce((sum, item) => {
              /* istanbul ignore next */
              cov_18ou1cfcnl().f[7]++;
              cov_18ou1cfcnl().s[53]++;
              return sum + item.quantity;
            }, 0)
          };
        });
      }, defaultTransfersData, "Failed to fetch inventory transfers"));
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[54]++;
      return {
        success: true,
        data: transfers
      };
    }, cacheKey, "GET"));
    // Cache the result
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[55]++;
    await _transferCache.transferCacheService.set(cacheKey, result);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[56]++;
    console.log("Query executed successfully. Results:", result.data);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[57]++;
    console.log(`Retrieved ${result.data.length} transfers successfully`);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[58]++;
    operation.end(true, undefined, false);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[59]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[60]++;
    console.error("Error fetching transfers:", error);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[61]++;
    operation.end(false, "fetch_error");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[62]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching transfers",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[17][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[8]++;
  cov_18ou1cfcnl().s[63]++;
  console.log("POST /api/inventory/transfers - Checking permission: inventory:transfer");
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[64]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[65]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[18][0]++;
    cov_18ou1cfcnl().s[66]++;
    console.error("Permission denied for inventory:transfer:", permissionError.status);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[67]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[18][1]++;
  }
  // Create operation with metadata first
  let operation;
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[68]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[69]++, await req.json());
    const {
      sourceShopId,
      destinationShopId,
      items
    } =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[70]++, body);
    const operationMetadata =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[71]++, {
      itemCount:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[19][0]++, items?.length) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[19][1]++, 0),
      shopCount: 2 // source + destination
    });
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[72]++;
    operation = (0, _transferPerformanceMonitor.trackTransferOperation)("create", operationMetadata);
    // Get user ID from authorization token
    const authHeader =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[73]++, req.headers.get("authorization"));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[74]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[21][0]++, !authHeader) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[21][1]++, !authHeader.startsWith("Bearer "))) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[20][0]++;
      cov_18ou1cfcnl().s[75]++;
      operation.end(false, "unauthorized");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[76]++;
      return _server.NextResponse.json({
        success: false,
        message: "Authentication required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[20][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[77]++, authHeader.split(" ")[1]);
    const decodedToken =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[78]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[23][0]++, !decodedToken) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[23][1]++, !decodedToken.sub)) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[22][0]++;
      cov_18ou1cfcnl().s[80]++;
      operation.end(false, "unauthorized");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[81]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid token: signature verification failed"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[22][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[82]++, decodedToken.sub);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[83]++;
    console.log("Creating transfer for user ID:", userId);
    // Validate request data
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[25][0]++, !sourceShopId) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[25][1]++, !destinationShopId) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[25][2]++, !items) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[25][3]++, !items.length)) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[24][0]++;
      cov_18ou1cfcnl().s[85]++;
      operation.end(false, "validation_error");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[86]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[24][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[87]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_18ou1cfcnl().f[9]++;
      const newTransfer =
      /* istanbul ignore next */
      (cov_18ou1cfcnl().s[88]++, await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_18ou1cfcnl().f[10]++;
        cov_18ou1cfcnl().s[89]++;
        // 1. Reserve inventory in source shop
        for (const item of items) {
          const productIdNum =
          /* istanbul ignore next */
          (cov_18ou1cfcnl().s[90]++, parseInt(item.productId));
          const qtyNum =
          /* istanbul ignore next */
          (cov_18ou1cfcnl().s[91]++, parseInt(item.quantity));
          const inventory =
          /* istanbul ignore next */
          (cov_18ou1cfcnl().s[92]++, await tx.inventoryItem.findFirst({
            where: {
              productId: productIdNum,
              shopId: sourceShopId
            }
          }));
          /* istanbul ignore next */
          cov_18ou1cfcnl().s[93]++;
          if (
          /* istanbul ignore next */
          (cov_18ou1cfcnl().b[27][0]++, !inventory) ||
          /* istanbul ignore next */
          (cov_18ou1cfcnl().b[27][1]++, inventory.quantity < qtyNum)) {
            /* istanbul ignore next */
            cov_18ou1cfcnl().b[26][0]++;
            cov_18ou1cfcnl().s[94]++;
            throw new Error(`Insufficient stock for product ${productIdNum} in source shop`);
          } else
          /* istanbul ignore next */
          {
            cov_18ou1cfcnl().b[26][1]++;
          }
          cov_18ou1cfcnl().s[95]++;
          await tx.inventoryItem.update({
            where: {
              id: inventory.id
            },
            data: {
              quantity: {
                decrement: qtyNum
              }
            }
          });
        }
        // 2. Insert transfer & items
        /* istanbul ignore next */
        cov_18ou1cfcnl().s[96]++;
        return await tx.inventoryTransfer.create({
          data: {
            fromShopId: sourceShopId,
            toShopId: destinationShopId,
            fromUserId: userId,
            toUserId: userId,
            status: "pending",
            transferItems: {
              create: items.map(item => {
                /* istanbul ignore next */
                cov_18ou1cfcnl().f[11]++;
                cov_18ou1cfcnl().s[97]++;
                return {
                  productId: parseInt(item.productId),
                  quantity: parseInt(item.quantity)
                };
              })
            }
          }
        });
      }, {
        timeout: 30000
      }));
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[98]++;
      return newTransfer;
    }, null, "Failed to create inventory transfer"));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[99]++;
    if (!result) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[28][0]++;
      cov_18ou1cfcnl().s[100]++;
      throw new Error("Failed to create transfer");
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[28][1]++;
    }
    // Invalidate relevant caches
    cov_18ou1cfcnl().s[101]++;
    await _transferCache.transferCacheService.invalidateTransferCache(result.id, [sourceShopId, destinationShopId]);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[102]++;
    console.log("Transfer created successfully with ID:", result.id);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[103]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[104]++;
    return _server.NextResponse.json({
      success: true,
      message: "Inventory transfer created successfully",
      data: {
        id: result.id
      }
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[105]++;
    console.error("Error creating transfer:", error);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[106]++;
    if (operation) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[29][0]++;
      cov_18ou1cfcnl().s[107]++;
      operation.end(false, "creation_error");
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[29][1]++;
    }
    cov_18ou1cfcnl().s[108]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating transfer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[30][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,