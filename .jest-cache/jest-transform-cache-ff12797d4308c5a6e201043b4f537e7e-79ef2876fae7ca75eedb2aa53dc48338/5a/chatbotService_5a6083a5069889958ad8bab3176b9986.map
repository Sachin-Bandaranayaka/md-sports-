{"version":3,"names":["chatbotService","getCookie","name","cov_29uoksfmpq","f","s","document","b","undefined","value","cookie","parts","split","length","pop","shift","sendMessage","messages","console","log","configResponse","_axios","default","get","configData","data","success","isEmpty","valueLength","error","Error","configError","response","message","csrfToken","warn","post","headers","isAxiosError","toJSON","axiosError","status","serviceErrorMessage","responseData","request","getBusinessInfo","businessName","inventoryCount","topSellingProducts","customerCount","supplierCount","checkConfiguration","exists","isConfigured"],"sources":["/Users/sachin/Documents/md-sports-/src/services/chatbotService.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\nexport interface ChatMessage {\n    role: 'user' | 'assistant' | 'system';\n    content: string;\n}\n\nexport interface ChatResponse {\n    role: string;\n    content: string;\n}\n\n// Helper function to get a cookie by name\nfunction getCookie(name: string): string | undefined {\n    if (typeof document === 'undefined') {\n        return undefined; // Cookies are not available in non-browser environments\n    }\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\n    return undefined;\n}\n\nexport const chatbotService = {\n    /**\n     * Send a message to the chatbot API\n     */\n    async sendMessage(messages: ChatMessage[]): Promise<ChatResponse> {\n        console.log('[ChatbotService] Attempting to send message...');\n        try {\n            console.log('[ChatbotService] Step 1: Checking API key configuration via /api/test-settings...');\n            try {\n                const configResponse = await axios.get('/api/test-settings');\n                const configData = configResponse.data;\n                console.log('[ChatbotService] /api/test-settings response:', configData);\n\n                if (!configData.success || configData.isEmpty || configData.valueLength === 0) {\n                    console.error('[ChatbotService] API key not configured per /api/test-settings.', configData);\n                    throw new Error('Deepseek API key is not configured. Please set it in the AI Assistant settings page.');\n                }\n                console.log('[ChatbotService] API key seems configured according to /api/test-settings.');\n            } catch (configError: any) {\n                console.error('[ChatbotService] Error during /api/test-settings check:', configError.response?.data || configError.message);\n                throw new Error(configError.response?.data?.message || configError.message || 'Failed to verify API key configuration. Please check AI Assistant settings.');\n            }\n\n            // Get CSRF token from cookie\n            const csrfToken = getCookie('csrfToken');\n            if (!csrfToken) {\n                console.warn('[ChatbotService] CSRF token cookie not found. POST request might fail.');\n            }\n            console.log(`[ChatbotService] CSRF Token from cookie: ${csrfToken ? 'found' : 'not found'}`);\n\n            console.log('[ChatbotService] Step 2: API key configured, proceeding to POST /api/chatbot...');\n            const response = await axios.post('/api/chatbot',\n                { messages },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...(csrfToken && { 'X-CSRF-Token': csrfToken }), // Include CSRF token if found\n                    }\n                }\n            );\n            console.log('[ChatbotService] Successfully received response from /api/chatbot.');\n            return response.data;\n\n        } catch (error: any) {\n            console.error('[ChatbotService] Error sending message:', error.isAxiosError ? error.toJSON() : error);\n\n            if (axios.isAxiosError(error)) {\n                const axiosError = error as AxiosError<{ error?: string, message?: string }>;\n                console.error('[ChatbotService] Axios error details. Status:', axiosError.response?.status, 'Data:', axiosError.response?.data);\n\n                let serviceErrorMessage = 'Failed to communicate with the chatbot service.';\n\n                if (axiosError.response) {\n                    const responseData = axiosError.response.data;\n                    if (responseData && (responseData.error || responseData.message)) {\n                        serviceErrorMessage = responseData.error || responseData.message || serviceErrorMessage;\n                    } else if (axiosError.response.status === 403) {\n                        serviceErrorMessage = 'Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.';\n                    } else {\n                        serviceErrorMessage = `Chatbot service request failed with status ${axiosError.response.status}.`;\n                    }\n                } else if (axiosError.request) {\n                    serviceErrorMessage = 'No response received from the chatbot service. Please check your network connection and server status.';\n                } else {\n                    serviceErrorMessage = `Error setting up chatbot request: ${axiosError.message}`;\n                }\n                console.error('[ChatbotService] Throwing error with message:', serviceErrorMessage);\n                throw new Error(serviceErrorMessage);\n            }\n\n            // Fallback for non-Axios errors or errors from the initial config check that weren't AxiosErrors\n            console.error('[ChatbotService] Non-Axios error, throwing original or generic message.');\n            throw new Error(error.message || 'An unexpected error occurred with the chatbot service.');\n        }\n    },\n\n    /**\n     * Get business-specific information for the chatbot\n     * This function can be expanded to fetch real data from your database\n     */\n    async getBusinessInfo(): Promise<Record<string, any>> {\n        // This could be expanded to fetch real data from your database\n        return {\n            businessName: 'MS Sports',\n            inventoryCount: 'Over 1,000 items',\n            topSellingProducts: ['Sports Shoes', 'Jerseys', 'Training Equipment'],\n            customerCount: 'Over 500 registered customers',\n            supplierCount: '50+ active suppliers',\n            // Add more business-specific information\n        };\n    },\n\n    /**\n     * Check if the chatbot is properly configured\n     */\n    async checkConfiguration(): Promise<{ isConfigured: boolean; message?: string }> {\n        try {\n            const csrfToken = getCookie('csrfToken');\n            const response = await axios.get('/api/test-settings', {\n                headers: {\n                    ...(csrfToken && { 'X-CSRF-Token': csrfToken }),\n                }\n            });\n            const data = response.data;\n\n            if (!data.success || !data.exists) {\n                return {\n                    isConfigured: false,\n                    message: 'API key setting not found in database'\n                };\n            }\n\n            if (data.isEmpty) {\n                return {\n                    isConfigured: false,\n                    message: 'API key is empty. Please configure it in settings.'\n                };\n            }\n\n            return { isConfigured: true };\n        } catch (error) {\n            console.error('Error checking chatbot configuration:', error);\n            return {\n                isConfigured: false,\n                message: 'Failed to check configuration. Please try again.'\n            };\n        }\n    }\n}; "],"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","ignoreList":[]}