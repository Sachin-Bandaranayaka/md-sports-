315591c5f64047fe485eb78944f14ff3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cleanupRefreshTokens: function() {
        return cleanupRefreshTokens;
    },
    generateRefreshToken: function() {
        return generateRefreshToken;
    },
    revokeAllUserRefreshTokens: function() {
        return revokeAllUserRefreshTokens;
    },
    revokeRefreshToken: function() {
        return revokeRefreshToken;
    },
    verifyRefreshToken: function() {
        return verifyRefreshToken;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Configuration
const REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;
// Generate a secure random token using Web Crypto API
const generateSecureToken = (length = 40)=>{
    // Use Web Crypto API which is supported in Edge Runtime
    if (typeof crypto !== "undefined") {
        const bytes = new Uint8Array(length);
        crypto.getRandomValues(bytes);
        return Array.from(bytes).map((byte)=>byte.toString(16).padStart(2, "0")).join("");
    }
    // Fallback (less secure but works everywhere)
    return Array.from({
        length
    }, ()=>Math.floor(Math.random() * 16).toString(16)).join("");
};
const generateRefreshToken = async (userId)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            throw new Error("Database client not initialized correctly");
        }
        // Log for debugging
        console.log("Generating refresh token for user ID:", userId);
        // Generate a random token
        const token = generateSecureToken(40);
        // Calculate expiration date (30 days from now)
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);
        // Log the token details before creating
        console.log("Preparing to create refresh token with:", {
            userId,
            token: token.substring(0, 10) + "...",
            expiresAt
        });
        // Store the token in the database with retry logic
        const createdToken = await executeWithRetry(()=>_prisma.default.refreshToken.create({
                data: {
                    userId,
                    token,
                    expiresAt,
                    updatedAt: new Date()
                }
            }));
        console.log("Successfully created refresh token with ID:", createdToken.id);
        return token;
    } catch (error) {
        // More detailed error logging
        console.error("Error generating refresh token:", error);
        if (error instanceof Error) {
            console.error("Error message:", error.message);
            console.error("Error stack:", error.stack);
        }
        throw new Error("Failed to generate refresh token");
    }
};
/**
 * Helper function to execute Prisma queries with retry logic for prepared statement conflicts
 */ const executeWithRetry = async (operation, maxRetries = 3)=>{
    for(let attempt = 1; attempt <= maxRetries; attempt++){
        try {
            return await operation();
        } catch (error) {
            // Check if it's a prepared statement conflict error
            if (error?.code === "42P05" && error?.message?.includes("prepared statement") && attempt < maxRetries) {
                console.warn(`Prepared statement conflict on attempt ${attempt}, retrying...`);
                // Small delay before retry
                await new Promise((resolve)=>setTimeout(resolve, 100 * attempt));
                continue;
            }
            throw error;
        }
    }
    throw new Error("Max retries exceeded");
};
const verifyRefreshToken = async (token)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return null;
        }
        // Find the token in the database with retry logic
        const refreshToken = await executeWithRetry(()=>_prisma.default.refreshToken.findUnique({
                where: {
                    token
                }
            }));
        // Check if token exists and is not revoked
        if (!refreshToken || refreshToken.isRevoked) {
            console.log("Token not found or revoked:", token.substring(0, 10) + "...");
            return null;
        }
        // Check if token is expired
        if (new Date() > refreshToken.expiresAt) {
            console.log("Token expired:", token.substring(0, 10) + "...");
            // Revoke expired token with retry logic
            await executeWithRetry(()=>_prisma.default.refreshToken.update({
                    where: {
                        id: refreshToken.id
                    },
                    data: {
                        isRevoked: true
                    }
                }));
            return null;
        }
        return refreshToken.userId;
    } catch (error) {
        console.error("Error verifying refresh token:", error);
        return null;
    }
};
const revokeRefreshToken = async (token)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return false;
        }
        await executeWithRetry(()=>_prisma.default.refreshToken.updateMany({
                where: {
                    token
                },
                data: {
                    isRevoked: true
                }
            }));
        return true;
    } catch (error) {
        console.error("Error revoking refresh token:", error);
        return false;
    }
};
const revokeAllUserRefreshTokens = async (userId)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return false;
        }
        await executeWithRetry(()=>_prisma.default.refreshToken.updateMany({
                where: {
                    userId
                },
                data: {
                    isRevoked: true
                }
            }));
        return true;
    } catch (error) {
        console.error("Error revoking user refresh tokens:", error);
        return false;
    }
};
const cleanupRefreshTokens = async ()=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return;
        }
        const now = new Date();
        await executeWithRetry(()=>_prisma.default.refreshToken.deleteMany({
                where: {
                    OR: [
                        {
                            expiresAt: {
                                lt: now
                            }
                        },
                        {
                            isRevoked: true
                        }
                    ]
                }
            }));
    } catch (error) {
        console.error("Error cleaning up refresh tokens:", error);
    }
};

//# sourceMappingURL=data:application/json;base64,