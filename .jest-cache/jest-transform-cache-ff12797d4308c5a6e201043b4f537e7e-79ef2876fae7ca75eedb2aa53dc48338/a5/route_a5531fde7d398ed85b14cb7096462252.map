{"version":3,"names":["DELETE","cov_os53vclbf","f","s","GET","PATCH","PUT","request","params","resolvedParams","hasPermission","_auth","validateTokenPermission","b","_server","NextResponse","json","success","message","status","categoryId","parseInt","id","isNaN","data","name","description","parentId","category","_prisma","prisma","findUnique","where","include","subCategories","products","currentParentId","parent","existingCategory","findFirst","equals","mode","not","updatedCategory","update","cacheService","Promise","resolve","then","_interop_require_wildcard","require","invalidateReferenceData","error","console","authHeader","headers","get","token","startsWith","slice","log","hasAuthHeader","substring","userId","decoded","verifyToken","length","auditService","_auditService","AuditService","getInstance","softDelete","delete","parentName","parentCategory","parent_id","parent_name","checkId","undefined"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/categories/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// PUT: Update a category\nexport async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        \n        // Verify permission\n        const hasPermission = await validateTokenPermission(request, 'category:update');\n        if (!hasPermission) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized: Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        const categoryId = parseInt(resolvedParams.id);\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        if (!name) {\n            return NextResponse.json(\n                { success: false, message: 'Category name is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // Check for circular parent relationship\n        if (parentId) {\n            // Can't set a category as its own parent\n            if (parentId === categoryId) {\n                return NextResponse.json(\n                    { success: false, message: 'A category cannot be its own parent' },\n                    { status: 400 }\n                );\n            }\n\n            // Check for deeper circular relationships\n            let currentParentId = parentId;\n            while (currentParentId) {\n                const parent = await prisma.category.findUnique({\n                    where: { id: currentParentId }\n                });\n\n                if (!parent) break;\n\n                if (parent.parentId === categoryId) {\n                    return NextResponse.json(\n                        { success: false, message: 'Circular parent relationship detected' },\n                        { status: 400 }\n                    );\n                }\n\n                currentParentId = parent.parentId;\n            }\n        }\n\n        // Check if the new name already exists (excluding the current category)\n        const existingCategory = await prisma.category.findFirst({\n            where: {\n                name: { equals: name, mode: 'insensitive' },\n                id: { not: categoryId }\n            }\n        });\n\n        if (existingCategory) {\n            return NextResponse.json(\n                { success: false, message: 'A category with this name already exists' },\n                { status: 400 }\n            );\n        }\n\n        // Update the category\n        const updatedCategory = await prisma.category.update({\n            where: { id: categoryId },\n            data: {\n                name,\n                description: description || null,\n                parentId: parentId || null\n            }\n        });\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category updated successfully',\n            data: updatedCategory\n        });\n    } catch (error) {\n        console.error('Error updating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update category' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete a category by ID\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check auth header for development token\n        const authHeader = request.headers.get('authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n        console.log('Delete category request:', {\n            categoryId,\n            hasAuthHeader: !!authHeader,\n            token: token ? `${token.substring(0, 10)}...` : null\n        });\n\n        // Get user ID for audit logging\n        let userId: number | null = null;\n        if (token !== 'dev-token') {\n            // Verify permission\n            const hasPermission = await validateTokenPermission(request, 'category:delete');\n            if (!hasPermission) {\n                return NextResponse.json(\n                    { success: false, message: 'Unauthorized: Insufficient permissions' },\n                    { status: 403 }\n                );\n            }\n            \n            // Get user ID from token\n            if (token) {\n                const decoded = await verifyToken(token);\n                if (decoded && typeof decoded === 'object' && 'userId' in decoded) {\n                    userId = decoded.userId as number;\n                }\n            }\n        } else {\n            console.log('Using development token - bypassing permission check');\n            userId = 1; // Default user for dev token\n        }\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // Check if category has child categories\n        if (category.subCategories && category.subCategories.length > 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete category with subcategories. Please delete subcategories first.'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Check if category is used by any products\n        if (category.products && category.products.length > 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete category that is assigned to products. Please reassign products first.'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Use audit service for soft delete\n        if (userId) {\n            const auditService = AuditService.getInstance();\n            await auditService.softDelete(\n                'Category',\n                categoryId,\n                category,\n                userId,\n                true // canRecover\n            );\n        } else {\n            // Fallback to hard delete if no user ID available\n            await prisma.category.delete({\n                where: { id: categoryId }\n            });\n        }\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: userId ? 'Category moved to recycle bin successfully' : 'Category deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete category' },\n            { status: 500 }\n        );\n    }\n}\n\n// GET: Get a category by ID\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Get the category\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // If there's a parent ID, get the parent name\n        let parentName = null;\n        if (category.parentId) {\n            const parentCategory = await prisma.category.findUnique({\n                where: { id: category.parentId }\n            });\n            parentName = parentCategory?.name;\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                id: category.id,\n                name: category.name,\n                description: category.description,\n                parent_id: category.parentId,\n                parent_name: parentName\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch category' },\n            { status: 500 }\n        );\n    }\n}\n\n// PATCH: Update a category\nexport async function PATCH(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Verify permission\n        const hasPermission = await validateTokenPermission(request, 'category:update');\n        if (!hasPermission) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized: Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // If name is being changed, check for duplicates\n        if (name && name !== category.name) {\n            const existingCategory = await prisma.category.findFirst({\n                where: {\n                    name: { equals: name, mode: 'insensitive' },\n                    id: { not: categoryId }\n                }\n            });\n\n            if (existingCategory) {\n                return NextResponse.json(\n                    { success: false, message: 'A category with this name already exists' },\n                    { status: 400 }\n                );\n            }\n        }\n\n        // Check for circular reference if changing parent\n        if (parentId && parentId !== category.parentId) {\n            // Can't make itself its own parent\n            if (parentId === categoryId) {\n                return NextResponse.json(\n                    { success: false, message: 'Category cannot be its own parent' },\n                    { status: 400 }\n                );\n            }\n\n            // Check if the new parent is a descendant of this category (would create a loop)\n            let checkId = parentId;\n            while (checkId) {\n                if (checkId === categoryId) {\n                    return NextResponse.json(\n                        { success: false, message: 'Cannot create circular hierarchy' },\n                        { status: 400 }\n                    );\n                }\n\n                const parentCategory = await prisma.category.findUnique({\n                    where: { id: checkId }\n                });\n\n                checkId = parentCategory?.parentId || null;\n            }\n        }\n\n        // Update the category\n        const updatedCategory = await prisma.category.update({\n            where: { id: categoryId },\n            data: {\n                name: name || undefined,\n                description: description !== undefined ? description : undefined,\n                parentId: parentId !== undefined ? (parentId || null) : undefined\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category updated successfully',\n            data: updatedCategory\n        });\n    } catch (error) {\n        console.error('Error updating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update category' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}