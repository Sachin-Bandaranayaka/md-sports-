9e9bb48de6986403f065ea771c774eba
"use strict";

/* istanbul ignore next */
function cov_os53vclbf() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/categories/[id]/route.ts";
  var hash = "adf9461d88b1d6892137379cdca8f33b7fa74fd2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/categories/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 52
        }
      },
      "10": {
        start: {
          line: 27,
          column: 14
        },
        end: {
          line: 27,
          column: 48
        }
      },
      "11": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 69
        }
      },
      "12": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "13": {
        start: {
          line: 30,
          column: 39
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "14": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "15": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "16": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 20
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "18": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "20": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "21": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "22": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "23": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "24": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 30
        }
      },
      "25": {
        start: {
          line: 50,
          column: 17
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "26": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 88
        }
      },
      "27": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "28": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "29": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 95
        }
      },
      "30": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "31": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "32": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "33": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "34": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "35": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "36": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 18
        }
      },
      "37": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 200,
          column: 5
        }
      },
      "38": {
        start: {
          line: 73,
          column: 31
        },
        end: {
          line: 73,
          column: 43
        }
      },
      "39": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 75,
          column: 98
        }
      },
      "40": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "41": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "42": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 54
        }
      },
      "43": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "44": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "45": {
        start: {
          line: 94,
          column: 21
        },
        end: {
          line: 94,
          column: 41
        }
      },
      "46": {
        start: {
          line: 95,
          column: 48
        },
        end: {
          line: 95,
          column: 52
        }
      },
      "47": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "48": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "49": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "50": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "51": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "52": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "54": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 131,
          column: 19
        }
      },
      "55": {
        start: {
          line: 134,
          column: 34
        },
        end: {
          line: 134,
          column: 42
        }
      },
      "56": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "57": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 140,
          column: 18
        }
      },
      "58": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 35
        }
      },
      "59": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 35
        }
      },
      "60": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "61": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "62": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 50
        }
      },
      "63": {
        start: {
          line: 154,
          column: 33
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "64": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "65": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "66": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "67": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 143
        }
      },
      "68": {
        start: {
          line: 185,
          column: 80
        },
        end: {
          line: 185,
          column: 142
        }
      },
      "69": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 53
        }
      },
      "70": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "71": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 57
        }
      },
      "72": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "73": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 311,
          column: 5
        }
      },
      "74": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 43
        }
      },
      "75": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 206,
          column: 54
        }
      },
      "76": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "77": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "78": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 63
        }
      },
      "79": {
        start: {
          line: 217,
          column: 22
        },
        end: {
          line: 217,
          column: 84
        }
      },
      "80": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "81": {
        start: {
          line: 224,
          column: 21
        },
        end: {
          line: 224,
          column: 25
        }
      },
      "82": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "83": {
        start: {
          line: 227,
          column: 34
        },
        end: {
          line: 227,
          column: 102
        }
      },
      "84": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "85": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "86": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "87": {
        start: {
          line: 238,
          column: 32
        },
        end: {
          line: 238,
          column: 67
        }
      },
      "88": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 241,
          column: 17
        }
      },
      "89": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 44
        }
      },
      "90": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "91": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 23
        }
      },
      "92": {
        start: {
          line: 248,
          column: 25
        },
        end: {
          line: 256,
          column: 10
        }
      },
      "93": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "94": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 15
        }
      },
      "95": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "96": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "97": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "98": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "99": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "100": {
        start: {
          line: 285,
          column: 33
        },
        end: {
          line: 285,
          column: 73
        }
      },
      "101": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 287,
          column: 14
        }
      },
      "102": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "103": {
        start: {
          line: 297,
          column: 33
        },
        end: {
          line: 297,
          column: 143
        }
      },
      "104": {
        start: {
          line: 297,
          column: 80
        },
        end: {
          line: 297,
          column: 142
        }
      },
      "105": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 53
        }
      },
      "106": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "107": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 57
        }
      },
      "108": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "109": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 368,
          column: 5
        }
      },
      "110": {
        start: {
          line: 316,
          column: 31
        },
        end: {
          line: 316,
          column: 43
        }
      },
      "111": {
        start: {
          line: 317,
          column: 27
        },
        end: {
          line: 317,
          column: 54
        }
      },
      "112": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "113": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 324,
          column: 15
        }
      },
      "114": {
        start: {
          line: 327,
          column: 25
        },
        end: {
          line: 331,
          column: 10
        }
      },
      "115": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "116": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 338,
          column: 15
        }
      },
      "117": {
        start: {
          line: 341,
          column: 25
        },
        end: {
          line: 341,
          column: 29
        }
      },
      "118": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "119": {
        start: {
          line: 343,
          column: 35
        },
        end: {
          line: 347,
          column: 14
        }
      },
      "120": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 46
        }
      },
      "121": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 359,
          column: 11
        }
      },
      "122": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 57
        }
      },
      "123": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "124": {
        start: {
          line: 371,
          column: 4
        },
        end: {
          line: 490,
          column: 5
        }
      },
      "125": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 373,
          column: 43
        }
      },
      "126": {
        start: {
          line: 374,
          column: 27
        },
        end: {
          line: 374,
          column: 54
        }
      },
      "127": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "128": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 381,
          column: 15
        }
      },
      "129": {
        start: {
          line: 384,
          column: 30
        },
        end: {
          line: 384,
          column: 98
        }
      },
      "130": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "131": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 391,
          column: 15
        }
      },
      "132": {
        start: {
          line: 394,
          column: 21
        },
        end: {
          line: 394,
          column: 41
        }
      },
      "133": {
        start: {
          line: 395,
          column: 48
        },
        end: {
          line: 395,
          column: 52
        }
      },
      "134": {
        start: {
          line: 397,
          column: 25
        },
        end: {
          line: 405,
          column: 10
        }
      },
      "135": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "136": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 412,
          column: 15
        }
      },
      "137": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "138": {
        start: {
          line: 416,
          column: 37
        },
        end: {
          line: 426,
          column: 14
        }
      },
      "139": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "140": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 433,
          column: 19
        }
      },
      "141": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 465,
          column: 9
        }
      },
      "142": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "143": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 445,
          column: 19
        }
      },
      "144": {
        start: {
          line: 448,
          column: 26
        },
        end: {
          line: 448,
          column: 34
        }
      },
      "145": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "146": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 457,
          column: 17
        }
      },
      "147": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 456,
          column: 23
        }
      },
      "148": {
        start: {
          line: 458,
          column: 39
        },
        end: {
          line: 462,
          column: 18
        }
      },
      "149": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 59
        }
      },
      "150": {
        start: {
          line: 467,
          column: 32
        },
        end: {
          line: 476,
          column: 10
        }
      },
      "151": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 481,
          column: 11
        }
      },
      "152": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 57
        }
      },
      "153": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 489,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 10
          }
        },
        loc: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 47
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 40
          }
        },
        loc: {
          start: {
            line: 33,
            column: 61
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "7": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 34
          }
        },
        loc: {
          start: {
            line: 37,
            column: 53
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 37
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 18
          }
        },
        loc: {
          start: {
            line: 70,
            column: 40
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 70
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 185,
            column: 62
          },
          end: {
            line: 185,
            column: 63
          }
        },
        loc: {
          start: {
            line: 185,
            column: 80
          },
          end: {
            line: 185,
            column: 142
          }
        },
        line: 185
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 21
          }
        },
        loc: {
          start: {
            line: 202,
            column: 43
          },
          end: {
            line: 312,
            column: 1
          }
        },
        line: 202
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 297,
            column: 62
          },
          end: {
            line: 297,
            column: 63
          }
        },
        loc: {
          start: {
            line: 297,
            column: 80
          },
          end: {
            line: 297,
            column: 142
          }
        },
        line: 297
      },
      "12": {
        name: "GET",
        decl: {
          start: {
            line: 313,
            column: 15
          },
          end: {
            line: 313,
            column: 18
          }
        },
        loc: {
          start: {
            line: 313,
            column: 40
          },
          end: {
            line: 369,
            column: 1
          }
        },
        line: 313
      },
      "13": {
        name: "PATCH",
        decl: {
          start: {
            line: 370,
            column: 15
          },
          end: {
            line: 370,
            column: 20
          }
        },
        loc: {
          start: {
            line: 370,
            column: 42
          },
          end: {
            line: 491,
            column: 1
          }
        },
        line: 370
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 45
          }
        }, {
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 34,
            column: 65
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 20
          }
        }, {
          start: {
            line: 38,
            column: 24
          },
          end: {
            line: 38,
            column: 27
          }
        }, {
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 38,
            column: 45
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 20
          }
        }, {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 76
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 47,
            column: 31
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 53
          }
        }, {
          start: {
            line: 53,
            column: 57
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 29
          }
        }, {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 79
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 56,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 47
          },
          end: {
            line: 56,
            column: 88
          }
        }, {
          start: {
            line: 56,
            column: 91
          },
          end: {
            line: 56,
            column: 95
          }
        }],
        line: 56
      },
      "12": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 61,
            column: 13
          }
        }],
        line: 57
      },
      "13": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 20
          }
        }, {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 33
          }
        }, {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 45
          }
        }],
        line: 57
      },
      "14": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "15": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "16": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "17": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "18": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "19": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "20": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "21": {
        loc: {
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 141,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 141,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "22": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "23": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "24": {
        loc: {
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 180,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 180,
            column: 40
          }
        }, {
          start: {
            line: 180,
            column: 44
          },
          end: {
            line: 180,
            column: 48
          }
        }],
        line: 180
      },
      "25": {
        loc: {
          start: {
            line: 181,
            column: 26
          },
          end: {
            line: 181,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 26
          },
          end: {
            line: 181,
            column: 34
          }
        }, {
          start: {
            line: 181,
            column: 38
          },
          end: {
            line: 181,
            column: 42
          }
        }],
        line: 181
      },
      "26": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "27": {
        loc: {
          start: {
            line: 217,
            column: 22
          },
          end: {
            line: 217,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 58
          },
          end: {
            line: 217,
            column: 77
          }
        }, {
          start: {
            line: 217,
            column: 80
          },
          end: {
            line: 217,
            column: 84
          }
        }],
        line: 217
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 19
          },
          end: {
            line: 221,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 27
          },
          end: {
            line: 221,
            column: 57
          }
        }, {
          start: {
            line: 221,
            column: 60
          },
          end: {
            line: 221,
            column: 64
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: 243,
            column: 15
          },
          end: {
            line: 246,
            column: 9
          }
        }],
        line: 225
      },
      "30": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "31": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "32": {
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "33": {
        loc: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 27
          }
        }, {
          start: {
            line: 239,
            column: 31
          },
          end: {
            line: 239,
            column: 58
          }
        }, {
          start: {
            line: 239,
            column: 62
          },
          end: {
            line: 239,
            column: 81
          }
        }],
        line: 239
      },
      "34": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "35": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "36": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 34
          }
        }, {
          start: {
            line: 266,
            column: 38
          },
          end: {
            line: 266,
            column: 71
          }
        }],
        line: 266
      },
      "37": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "38": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 29
          }
        }, {
          start: {
            line: 275,
            column: 33
          },
          end: {
            line: 275,
            column: 61
          }
        }],
        line: 275
      },
      "39": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: 288,
            column: 15
          },
          end: {
            line: 295,
            column: 9
          }
        }],
        line: 284
      },
      "40": {
        loc: {
          start: {
            line: 301,
            column: 21
          },
          end: {
            line: 301,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 30
          },
          end: {
            line: 301,
            column: 74
          }
        }, {
          start: {
            line: 301,
            column: 77
          },
          end: {
            line: 301,
            column: 108
          }
        }],
        line: 301
      },
      "41": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "42": {
        loc: {
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "43": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "44": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "45": {
        loc: {
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "46": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "47": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "48": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 16
          }
        }, {
          start: {
            line: 415,
            column: 20
          },
          end: {
            line: 415,
            column: 42
          }
        }],
        line: 415
      },
      "49": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "50": {
        loc: {
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "51": {
        loc: {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 437,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 437,
            column: 20
          }
        }, {
          start: {
            line: 437,
            column: 24
          },
          end: {
            line: 437,
            column: 54
          }
        }],
        line: 437
      },
      "52": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "53": {
        loc: {
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 457,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 457,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "54": {
        loc: {
          start: {
            line: 463,
            column: 26
          },
          end: {
            line: 463,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 463,
            column: 26
          },
          end: {
            line: 463,
            column: 50
          }
        }, {
          start: {
            line: 463,
            column: 54
          },
          end: {
            line: 463,
            column: 58
          }
        }],
        line: 463
      },
      "55": {
        loc: {
          start: {
            line: 472,
            column: 22
          },
          end: {
            line: 472,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 22
          },
          end: {
            line: 472,
            column: 26
          }
        }, {
          start: {
            line: 472,
            column: 30
          },
          end: {
            line: 472,
            column: 39
          }
        }],
        line: 472
      },
      "56": {
        loc: {
          start: {
            line: 473,
            column: 29
          },
          end: {
            line: 473,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 473,
            column: 57
          },
          end: {
            line: 473,
            column: 68
          }
        }, {
          start: {
            line: 473,
            column: 71
          },
          end: {
            line: 473,
            column: 80
          }
        }],
        line: 473
      },
      "57": {
        loc: {
          start: {
            line: 474,
            column: 26
          },
          end: {
            line: 474,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 474,
            column: 51
          },
          end: {
            line: 474,
            column: 67
          }
        }, {
          start: {
            line: 474,
            column: 70
          },
          end: {
            line: 474,
            column: 79
          }
        }],
        line: 474
      },
      "58": {
        loc: {
          start: {
            line: 474,
            column: 51
          },
          end: {
            line: 474,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 51
          },
          end: {
            line: 474,
            column: 59
          }
        }, {
          start: {
            line: 474,
            column: 63
          },
          end: {
            line: 474,
            column: 67
          }
        }],
        line: 474
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/categories/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// PUT: Update a category\nexport async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        \n        // Verify permission\n        const hasPermission = await validateTokenPermission(request, 'category:update');\n        if (!hasPermission) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized: Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        const categoryId = parseInt(resolvedParams.id);\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        if (!name) {\n            return NextResponse.json(\n                { success: false, message: 'Category name is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // Check for circular parent relationship\n        if (parentId) {\n            // Can't set a category as its own parent\n            if (parentId === categoryId) {\n                return NextResponse.json(\n                    { success: false, message: 'A category cannot be its own parent' },\n                    { status: 400 }\n                );\n            }\n\n            // Check for deeper circular relationships\n            let currentParentId = parentId;\n            while (currentParentId) {\n                const parent = await prisma.category.findUnique({\n                    where: { id: currentParentId }\n                });\n\n                if (!parent) break;\n\n                if (parent.parentId === categoryId) {\n                    return NextResponse.json(\n                        { success: false, message: 'Circular parent relationship detected' },\n                        { status: 400 }\n                    );\n                }\n\n                currentParentId = parent.parentId;\n            }\n        }\n\n        // Check if the new name already exists (excluding the current category)\n        const existingCategory = await prisma.category.findFirst({\n            where: {\n                name: { equals: name, mode: 'insensitive' },\n                id: { not: categoryId }\n            }\n        });\n\n        if (existingCategory) {\n            return NextResponse.json(\n                { success: false, message: 'A category with this name already exists' },\n                { status: 400 }\n            );\n        }\n\n        // Update the category\n        const updatedCategory = await prisma.category.update({\n            where: { id: categoryId },\n            data: {\n                name,\n                description: description || null,\n                parentId: parentId || null\n            }\n        });\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category updated successfully',\n            data: updatedCategory\n        });\n    } catch (error) {\n        console.error('Error updating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update category' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete a category by ID\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check auth header for development token\n        const authHeader = request.headers.get('authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n        console.log('Delete category request:', {\n            categoryId,\n            hasAuthHeader: !!authHeader,\n            token: token ? `${token.substring(0, 10)}...` : null\n        });\n\n        // Get user ID for audit logging\n        let userId: number | null = null;\n        if (token !== 'dev-token') {\n            // Verify permission\n            const hasPermission = await validateTokenPermission(request, 'category:delete');\n            if (!hasPermission) {\n                return NextResponse.json(\n                    { success: false, message: 'Unauthorized: Insufficient permissions' },\n                    { status: 403 }\n                );\n            }\n            \n            // Get user ID from token\n            if (token) {\n                const decoded = await verifyToken(token);\n                if (decoded && typeof decoded === 'object' && 'userId' in decoded) {\n                    userId = decoded.userId as number;\n                }\n            }\n        } else {\n            console.log('Using development token - bypassing permission check');\n            userId = 1; // Default user for dev token\n        }\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // Check if category has child categories\n        if (category.subCategories && category.subCategories.length > 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete category with subcategories. Please delete subcategories first.'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Check if category is used by any products\n        if (category.products && category.products.length > 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete category that is assigned to products. Please reassign products first.'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Use audit service for soft delete\n        if (userId) {\n            const auditService = AuditService.getInstance();\n            await auditService.softDelete(\n                'Category',\n                categoryId,\n                category,\n                userId,\n                true // canRecover\n            );\n        } else {\n            // Fallback to hard delete if no user ID available\n            await prisma.category.delete({\n                where: { id: categoryId }\n            });\n        }\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: userId ? 'Category moved to recycle bin successfully' : 'Category deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete category' },\n            { status: 500 }\n        );\n    }\n}\n\n// GET: Get a category by ID\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Get the category\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // If there's a parent ID, get the parent name\n        let parentName = null;\n        if (category.parentId) {\n            const parentCategory = await prisma.category.findUnique({\n                where: { id: category.parentId }\n            });\n            parentName = parentCategory?.name;\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                id: category.id,\n                name: category.name,\n                description: category.description,\n                parent_id: category.parentId,\n                parent_name: parentName\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch category' },\n            { status: 500 }\n        );\n    }\n}\n\n// PATCH: Update a category\nexport async function PATCH(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const categoryId = parseInt(resolvedParams.id);\n\n        if (isNaN(categoryId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid category ID' },\n                { status: 400 }\n            );\n        }\n\n        // Verify permission\n        const hasPermission = await validateTokenPermission(request, 'category:update');\n        if (!hasPermission) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized: Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        // Check if category exists\n        const category = await prisma.category.findUnique({\n            where: { id: categoryId },\n            include: {\n                subCategories: true,\n                products: true\n            }\n        });\n\n        if (!category) {\n            return NextResponse.json(\n                { success: false, message: 'Category not found' },\n                { status: 404 }\n            );\n        }\n\n        // If name is being changed, check for duplicates\n        if (name && name !== category.name) {\n            const existingCategory = await prisma.category.findFirst({\n                where: {\n                    name: { equals: name, mode: 'insensitive' },\n                    id: { not: categoryId }\n                }\n            });\n\n            if (existingCategory) {\n                return NextResponse.json(\n                    { success: false, message: 'A category with this name already exists' },\n                    { status: 400 }\n                );\n            }\n        }\n\n        // Check for circular reference if changing parent\n        if (parentId && parentId !== category.parentId) {\n            // Can't make itself its own parent\n            if (parentId === categoryId) {\n                return NextResponse.json(\n                    { success: false, message: 'Category cannot be its own parent' },\n                    { status: 400 }\n                );\n            }\n\n            // Check if the new parent is a descendant of this category (would create a loop)\n            let checkId = parentId;\n            while (checkId) {\n                if (checkId === categoryId) {\n                    return NextResponse.json(\n                        { success: false, message: 'Cannot create circular hierarchy' },\n                        { status: 400 }\n                    );\n                }\n\n                const parentCategory = await prisma.category.findUnique({\n                    where: { id: checkId }\n                });\n\n                checkId = parentCategory?.parentId || null;\n            }\n        }\n\n        // Update the category\n        const updatedCategory = await prisma.category.update({\n            where: { id: categoryId },\n            data: {\n                name: name || undefined,\n                description: description !== undefined ? description : undefined,\n                parentId: parentId !== undefined ? (parentId || null) : undefined\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category updated successfully',\n            data: updatedCategory\n        });\n    } catch (error) {\n        console.error('Error updating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update category' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "PUT", "request", "params", "resolvedParams", "hasPermission", "validateTokenPermission", "NextResponse", "json", "success", "message", "status", "categoryId", "parseInt", "id", "isNaN", "data", "name", "description", "parentId", "category", "prisma", "findUnique", "where", "include", "subCategories", "products", "currentParentId", "parent", "existingCategory", "findFirst", "equals", "mode", "not", "updatedCategory", "update", "cacheService", "invalidateReferenceData", "error", "console", "authHeader", "headers", "get", "token", "startsWith", "slice", "log", "hasAuthHeader", "substring", "userId", "decoded", "verifyToken", "length", "auditService", "AuditService", "getInstance", "softDelete", "delete", "parentName", "parentCategory", "parent_id", "parent_name", "checkId", "undefined"],
      mappings: ";;;;;;;;;;;IAkIsBA,MAAM;eAANA;;IA2HAC,GAAG;eAAHA;;IAyDAC,KAAK;eAALA;;IA/SAC,GAAG;eAAHA;;;wBAPoB;wBACnB;sBACiB;8BACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAItB,eAAeA,IAAIC,OAAoB,EAAE,EAAEC,MAAM,EAAuC;IAC3F,IAAI;QACA,2CAA2C;QAC3C,MAAMC,iBAAiB,MAAMD;QAE7B,oBAAoB;QACpB,MAAME,gBAAgB,MAAMC,IAAAA,6BAAuB,EAACJ,SAAS;QAC7D,IAAI,CAACG,eAAe;YAChB,OAAOE,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAyC,GACpE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMC,aAAaC,SAAST,eAAeU,EAAE;QAC7C,IAAIC,MAAMH,aAAa;YACnB,OAAOL,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAsB,GACjD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,qBAAqB;QACrB,MAAMK,OAAO,MAAMd,QAAQM,IAAI;QAC/B,MAAM,EAAES,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAE,GAAGH;QAExC,IAAI,CAACC,MAAM;YACP,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAA4B,GACvD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,2BAA2B;QAC3B,MAAMS,WAAW,MAAMC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAIF;YAAW;YACxBY,SAAS;gBACLC,eAAe;gBACfC,UAAU;YACd;QACJ;QAEA,IAAI,CAACN,UAAU;YACX,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAqB,GAChD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,yCAAyC;QACzC,IAAIQ,UAAU;YACV,yCAAyC;YACzC,IAAIA,aAAaP,YAAY;gBACzB,OAAOL,oBAAY,CAACC,IAAI,CACpB;oBAAEC,SAAS;oBAAOC,SAAS;gBAAsC,GACjE;oBAAEC,QAAQ;gBAAI;YAEtB;YAEA,0CAA0C;YAC1C,IAAIgB,kBAAkBR;YACtB,MAAOQ,gBAAiB;gBACpB,MAAMC,SAAS,MAAMP,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;oBAC5CC,OAAO;wBAAET,IAAIa;oBAAgB;gBACjC;gBAEA,IAAI,CAACC,QAAQ;gBAEb,IAAIA,OAAOT,QAAQ,KAAKP,YAAY;oBAChC,OAAOL,oBAAY,CAACC,IAAI,CACpB;wBAAEC,SAAS;wBAAOC,SAAS;oBAAwC,GACnE;wBAAEC,QAAQ;oBAAI;gBAEtB;gBAEAgB,kBAAkBC,OAAOT,QAAQ;YACrC;QACJ;QAEA,wEAAwE;QACxE,MAAMU,mBAAmB,MAAMR,cAAM,CAACD,QAAQ,CAACU,SAAS,CAAC;YACrDP,OAAO;gBACHN,MAAM;oBAAEc,QAAQd;oBAAMe,MAAM;gBAAc;gBAC1ClB,IAAI;oBAAEmB,KAAKrB;gBAAW;YAC1B;QACJ;QAEA,IAAIiB,kBAAkB;YAClB,OAAOtB,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAA2C,GACtE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,sBAAsB;QACtB,MAAMuB,kBAAkB,MAAMb,cAAM,CAACD,QAAQ,CAACe,MAAM,CAAC;YACjDZ,OAAO;gBAAET,IAAIF;YAAW;YACxBI,MAAM;gBACFC;gBACAC,aAAaA,eAAe;gBAC5BC,UAAUA,YAAY;YAC1B;QACJ;QAEA,kCAAkC;QAClC,MAAM,EAAEiB,YAAY,EAAE,GAAG,MAAM,mEAAA,QAAO;QACtC,MAAMA,aAAaC,uBAAuB;QAE1C,OAAO9B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTM,MAAMkB;QACV;IACJ,EAAE,OAAOI,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAO/B,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA4B,GACvD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeb,OAClBI,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACA,2CAA2C;QAC3C,MAAMC,iBAAiB,MAAMD;QAC7B,MAAMS,aAAaC,SAAST,eAAeU,EAAE;QAE7C,IAAIC,MAAMH,aAAa;YACnB,OAAOL,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAsB,GACjD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,0CAA0C;QAC1C,MAAM6B,aAAatC,QAAQuC,OAAO,CAACC,GAAG,CAAC;QACvC,MAAMC,QAAQH,YAAYI,WAAW,aAAaJ,WAAWK,KAAK,CAAC,KAAK;QAExEN,QAAQO,GAAG,CAAC,4BAA4B;YACpClC;YACAmC,eAAe,CAAC,CAACP;YACjBG,OAAOA,QAAQ,CAAC,EAAEA,MAAMK,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG;QACpD;QAEA,gCAAgC;QAChC,IAAIC,SAAwB;QAC5B,IAAIN,UAAU,aAAa;YACvB,oBAAoB;YACpB,MAAMtC,gBAAgB,MAAMC,IAAAA,6BAAuB,EAACJ,SAAS;YAC7D,IAAI,CAACG,eAAe;gBAChB,OAAOE,oBAAY,CAACC,IAAI,CACpB;oBAAEC,SAAS;oBAAOC,SAAS;gBAAyC,GACpE;oBAAEC,QAAQ;gBAAI;YAEtB;YAEA,yBAAyB;YACzB,IAAIgC,OAAO;gBACP,MAAMO,UAAU,MAAMC,IAAAA,iBAAW,EAACR;gBAClC,IAAIO,WAAW,OAAOA,YAAY,YAAY,YAAYA,SAAS;oBAC/DD,SAASC,QAAQD,MAAM;gBAC3B;YACJ;QACJ,OAAO;YACHV,QAAQO,GAAG,CAAC;YACZG,SAAS,GAAG,6BAA6B;QAC7C;QAEA,2BAA2B;QAC3B,MAAM7B,WAAW,MAAMC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAIF;YAAW;YACxBY,SAAS;gBACLC,eAAe;gBACfC,UAAU;YACd;QACJ;QAEA,IAAI,CAACN,UAAU;YACX,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAqB,GAChD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,yCAAyC;QACzC,IAAIS,SAASK,aAAa,IAAIL,SAASK,aAAa,CAAC2B,MAAM,GAAG,GAAG;YAC7D,OAAO7C,oBAAY,CAACC,IAAI,CACpB;gBACIC,SAAS;gBACTC,SAAS;YACb,GACA;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,4CAA4C;QAC5C,IAAIS,SAASM,QAAQ,IAAIN,SAASM,QAAQ,CAAC0B,MAAM,GAAG,GAAG;YACnD,OAAO7C,oBAAY,CAACC,IAAI,CACpB;gBACIC,SAAS;gBACTC,SAAS;YACb,GACA;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,oCAAoC;QACpC,IAAIsC,QAAQ;YACR,MAAMI,eAAeC,0BAAY,CAACC,WAAW;YAC7C,MAAMF,aAAaG,UAAU,CACzB,YACA5C,YACAQ,UACA6B,QACA,KAAK,aAAa;;QAE1B,OAAO;YACH,kDAAkD;YAClD,MAAM5B,cAAM,CAACD,QAAQ,CAACqC,MAAM,CAAC;gBACzBlC,OAAO;oBAAET,IAAIF;gBAAW;YAC5B;QACJ;QAEA,kCAAkC;QAClC,MAAM,EAAEwB,YAAY,EAAE,GAAG,MAAM,mEAAA,QAAO;QACtC,MAAMA,aAAaC,uBAAuB;QAE1C,OAAO9B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAASuC,SAAS,+CAA+C;QACrE;IACJ,EAAE,OAAOX,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAO/B,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA4B,GACvD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeZ,IAClBG,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACA,2CAA2C;QAC3C,MAAMC,iBAAiB,MAAMD;QAC7B,MAAMS,aAAaC,SAAST,eAAeU,EAAE;QAE7C,IAAIC,MAAMH,aAAa;YACnB,OAAOL,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAsB,GACjD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,mBAAmB;QACnB,MAAMS,WAAW,MAAMC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAIF;YAAW;QAC5B;QAEA,IAAI,CAACQ,UAAU;YACX,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAqB,GAChD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,8CAA8C;QAC9C,IAAI+C,aAAa;QACjB,IAAItC,SAASD,QAAQ,EAAE;YACnB,MAAMwC,iBAAiB,MAAMtC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;gBACpDC,OAAO;oBAAET,IAAIM,SAASD,QAAQ;gBAAC;YACnC;YACAuC,aAAaC,gBAAgB1C;QACjC;QAEA,OAAOV,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTO,MAAM;gBACFF,IAAIM,SAASN,EAAE;gBACfG,MAAMG,SAASH,IAAI;gBACnBC,aAAaE,SAASF,WAAW;gBACjC0C,WAAWxC,SAASD,QAAQ;gBAC5B0C,aAAaH;YACjB;QACJ;IACJ,EAAE,OAAOpB,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAO/B,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA2B,GACtD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeX,MAClBE,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACA,2CAA2C;QAC3C,MAAMC,iBAAiB,MAAMD;QAC7B,MAAMS,aAAaC,SAAST,eAAeU,EAAE;QAE7C,IAAIC,MAAMH,aAAa;YACnB,OAAOL,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAsB,GACjD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,oBAAoB;QACpB,MAAMN,gBAAgB,MAAMC,IAAAA,6BAAuB,EAACJ,SAAS;QAC7D,IAAI,CAACG,eAAe;YAChB,OAAOE,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAyC,GACpE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,qBAAqB;QACrB,MAAMK,OAAO,MAAMd,QAAQM,IAAI;QAC/B,MAAM,EAAES,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAE,GAAGH;QAExC,2BAA2B;QAC3B,MAAMI,WAAW,MAAMC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAIF;YAAW;YACxBY,SAAS;gBACLC,eAAe;gBACfC,UAAU;YACd;QACJ;QAEA,IAAI,CAACN,UAAU;YACX,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAqB,GAChD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,iDAAiD;QACjD,IAAIM,QAAQA,SAASG,SAASH,IAAI,EAAE;YAChC,MAAMY,mBAAmB,MAAMR,cAAM,CAACD,QAAQ,CAACU,SAAS,CAAC;gBACrDP,OAAO;oBACHN,MAAM;wBAAEc,QAAQd;wBAAMe,MAAM;oBAAc;oBAC1ClB,IAAI;wBAAEmB,KAAKrB;oBAAW;gBAC1B;YACJ;YAEA,IAAIiB,kBAAkB;gBAClB,OAAOtB,oBAAY,CAACC,IAAI,CACpB;oBAAEC,SAAS;oBAAOC,SAAS;gBAA2C,GACtE;oBAAEC,QAAQ;gBAAI;YAEtB;QACJ;QAEA,kDAAkD;QAClD,IAAIQ,YAAYA,aAAaC,SAASD,QAAQ,EAAE;YAC5C,mCAAmC;YACnC,IAAIA,aAAaP,YAAY;gBACzB,OAAOL,oBAAY,CAACC,IAAI,CACpB;oBAAEC,SAAS;oBAAOC,SAAS;gBAAoC,GAC/D;oBAAEC,QAAQ;gBAAI;YAEtB;YAEA,iFAAiF;YACjF,IAAImD,UAAU3C;YACd,MAAO2C,QAAS;gBACZ,IAAIA,YAAYlD,YAAY;oBACxB,OAAOL,oBAAY,CAACC,IAAI,CACpB;wBAAEC,SAAS;wBAAOC,SAAS;oBAAmC,GAC9D;wBAAEC,QAAQ;oBAAI;gBAEtB;gBAEA,MAAMgD,iBAAiB,MAAMtC,cAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;oBACpDC,OAAO;wBAAET,IAAIgD;oBAAQ;gBACzB;gBAEAA,UAAUH,gBAAgBxC,YAAY;YAC1C;QACJ;QAEA,sBAAsB;QACtB,MAAMe,kBAAkB,MAAMb,cAAM,CAACD,QAAQ,CAACe,MAAM,CAAC;YACjDZ,OAAO;gBAAET,IAAIF;YAAW;YACxBI,MAAM;gBACFC,MAAMA,QAAQ8C;gBACd7C,aAAaA,gBAAgB6C,YAAY7C,cAAc6C;gBACvD5C,UAAUA,aAAa4C,YAAa5C,YAAY,OAAQ4C;YAC5D;QACJ;QAEA,OAAOxD,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTM,MAAMkB;QACV;IACJ,EAAE,OAAOI,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAO/B,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA4B,GACvD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "adf9461d88b1d6892137379cdca8f33b7fa74fd2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_os53vclbf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_os53vclbf();
cov_os53vclbf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_os53vclbf().f[0]++;
  cov_os53vclbf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_os53vclbf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_os53vclbf().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_os53vclbf().f[1]++;
    cov_os53vclbf().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_os53vclbf().f[2]++;
    cov_os53vclbf().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_os53vclbf().f[3]++;
    cov_os53vclbf().s[6]++;
    return PATCH;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_os53vclbf().f[4]++;
    cov_os53vclbf().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_os53vclbf().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_os53vclbf().s[9]++, require("../../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_os53vclbf().s[10]++, require("../../../../../lib/auth"));
const _auditService =
/* istanbul ignore next */
(cov_os53vclbf().s[11]++, require("../../../../../services/auditService"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_os53vclbf().f[5]++;
  cov_os53vclbf().s[12]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_os53vclbf().b[0][0]++;
    cov_os53vclbf().s[13]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_os53vclbf().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_os53vclbf().s[14]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_os53vclbf().s[15]++, new WeakMap());
  /* istanbul ignore next */
  cov_os53vclbf().s[16]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_os53vclbf().f[6]++;
    cov_os53vclbf().s[17]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_os53vclbf().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_os53vclbf().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_os53vclbf().f[7]++;
  cov_os53vclbf().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_os53vclbf().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_os53vclbf().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_os53vclbf().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_os53vclbf().b[2][0]++;
    cov_os53vclbf().s[19]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_os53vclbf().b[2][1]++;
  }
  cov_os53vclbf().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_os53vclbf().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_os53vclbf().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_os53vclbf().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_os53vclbf().b[4][0]++;
    cov_os53vclbf().s[21]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_os53vclbf().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_os53vclbf().s[22]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_os53vclbf().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_os53vclbf().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_os53vclbf().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_os53vclbf().b[6][0]++;
    cov_os53vclbf().s[24]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_os53vclbf().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_os53vclbf().s[25]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_os53vclbf().s[26]++,
  /* istanbul ignore next */
  (cov_os53vclbf().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_os53vclbf().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_os53vclbf().s[27]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_os53vclbf().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_os53vclbf().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_os53vclbf().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_os53vclbf().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_os53vclbf().s[29]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_os53vclbf().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_os53vclbf().b[11][1]++, null));
      /* istanbul ignore next */
      cov_os53vclbf().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_os53vclbf().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_os53vclbf().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_os53vclbf().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_os53vclbf().b[12][0]++;
        cov_os53vclbf().s[31]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_os53vclbf().b[12][1]++;
        cov_os53vclbf().s[32]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_os53vclbf().s[33]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_os53vclbf().s[34]++;
  if (cache) {
    /* istanbul ignore next */
    cov_os53vclbf().b[14][0]++;
    cov_os53vclbf().s[35]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_os53vclbf().b[14][1]++;
  }
  cov_os53vclbf().s[36]++;
  return newObj;
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_os53vclbf().f[8]++;
  cov_os53vclbf().s[37]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_os53vclbf().s[38]++, await params);
    // Verify permission
    const hasPermission =
    /* istanbul ignore next */
    (cov_os53vclbf().s[39]++, await (0, _auth.validateTokenPermission)(request, "category:update"));
    /* istanbul ignore next */
    cov_os53vclbf().s[40]++;
    if (!hasPermission) {
      /* istanbul ignore next */
      cov_os53vclbf().b[15][0]++;
      cov_os53vclbf().s[41]++;
      return _server.NextResponse.json({
        success: false,
        message: "Unauthorized: Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[15][1]++;
    }
    const categoryId =
    /* istanbul ignore next */
    (cov_os53vclbf().s[42]++, parseInt(resolvedParams.id));
    /* istanbul ignore next */
    cov_os53vclbf().s[43]++;
    if (isNaN(categoryId)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[16][0]++;
      cov_os53vclbf().s[44]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid category ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[16][1]++;
    }
    // Parse request body
    const data =
    /* istanbul ignore next */
    (cov_os53vclbf().s[45]++, await request.json());
    const {
      name,
      description,
      parentId
    } =
    /* istanbul ignore next */
    (cov_os53vclbf().s[46]++, data);
    /* istanbul ignore next */
    cov_os53vclbf().s[47]++;
    if (!name) {
      /* istanbul ignore next */
      cov_os53vclbf().b[17][0]++;
      cov_os53vclbf().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[17][1]++;
    }
    // Check if category exists
    const category =
    /* istanbul ignore next */
    (cov_os53vclbf().s[49]++, await _prisma.prisma.category.findUnique({
      where: {
        id: categoryId
      },
      include: {
        subCategories: true,
        products: true
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[50]++;
    if (!category) {
      /* istanbul ignore next */
      cov_os53vclbf().b[18][0]++;
      cov_os53vclbf().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[18][1]++;
    }
    // Check for circular parent relationship
    cov_os53vclbf().s[52]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_os53vclbf().b[19][0]++;
      cov_os53vclbf().s[53]++;
      // Can't set a category as its own parent
      if (parentId === categoryId) {
        /* istanbul ignore next */
        cov_os53vclbf().b[20][0]++;
        cov_os53vclbf().s[54]++;
        return _server.NextResponse.json({
          success: false,
          message: "A category cannot be its own parent"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_os53vclbf().b[20][1]++;
      }
      // Check for deeper circular relationships
      let currentParentId =
      /* istanbul ignore next */
      (cov_os53vclbf().s[55]++, parentId);
      /* istanbul ignore next */
      cov_os53vclbf().s[56]++;
      while (currentParentId) {
        const parent =
        /* istanbul ignore next */
        (cov_os53vclbf().s[57]++, await _prisma.prisma.category.findUnique({
          where: {
            id: currentParentId
          }
        }));
        /* istanbul ignore next */
        cov_os53vclbf().s[58]++;
        if (!parent) {
          /* istanbul ignore next */
          cov_os53vclbf().b[21][0]++;
          cov_os53vclbf().s[59]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_os53vclbf().b[21][1]++;
        }
        cov_os53vclbf().s[60]++;
        if (parent.parentId === categoryId) {
          /* istanbul ignore next */
          cov_os53vclbf().b[22][0]++;
          cov_os53vclbf().s[61]++;
          return _server.NextResponse.json({
            success: false,
            message: "Circular parent relationship detected"
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_os53vclbf().b[22][1]++;
        }
        cov_os53vclbf().s[62]++;
        currentParentId = parent.parentId;
      }
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[19][1]++;
    }
    // Check if the new name already exists (excluding the current category)
    const existingCategory =
    /* istanbul ignore next */
    (cov_os53vclbf().s[63]++, await _prisma.prisma.category.findFirst({
      where: {
        name: {
          equals: name,
          mode: "insensitive"
        },
        id: {
          not: categoryId
        }
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[64]++;
    if (existingCategory) {
      /* istanbul ignore next */
      cov_os53vclbf().b[23][0]++;
      cov_os53vclbf().s[65]++;
      return _server.NextResponse.json({
        success: false,
        message: "A category with this name already exists"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[23][1]++;
    }
    // Update the category
    const updatedCategory =
    /* istanbul ignore next */
    (cov_os53vclbf().s[66]++, await _prisma.prisma.category.update({
      where: {
        id: categoryId
      },
      data: {
        name,
        description:
        /* istanbul ignore next */
        (cov_os53vclbf().b[24][0]++, description) ||
        /* istanbul ignore next */
        (cov_os53vclbf().b[24][1]++, null),
        parentId:
        /* istanbul ignore next */
        (cov_os53vclbf().b[25][0]++, parentId) ||
        /* istanbul ignore next */
        (cov_os53vclbf().b[25][1]++, null)
      }
    }));
    // Invalidate reference data cache
    const {
      cacheService
    } =
    /* istanbul ignore next */
    (cov_os53vclbf().s[67]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_os53vclbf().f[9]++;
      cov_os53vclbf().s[68]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../../lib/cache"));
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[69]++;
    await cacheService.invalidateReferenceData();
    /* istanbul ignore next */
    cov_os53vclbf().s[70]++;
    return _server.NextResponse.json({
      success: true,
      message: "Category updated successfully",
      data: updatedCategory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_os53vclbf().s[71]++;
    console.error("Error updating category:", error);
    /* istanbul ignore next */
    cov_os53vclbf().s[72]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to update category"
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_os53vclbf().f[10]++;
  cov_os53vclbf().s[73]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_os53vclbf().s[74]++, await params);
    const categoryId =
    /* istanbul ignore next */
    (cov_os53vclbf().s[75]++, parseInt(resolvedParams.id));
    /* istanbul ignore next */
    cov_os53vclbf().s[76]++;
    if (isNaN(categoryId)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[26][0]++;
      cov_os53vclbf().s[77]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid category ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[26][1]++;
    }
    // Check auth header for development token
    const authHeader =
    /* istanbul ignore next */
    (cov_os53vclbf().s[78]++, request.headers.get("authorization"));
    const token =
    /* istanbul ignore next */
    (cov_os53vclbf().s[79]++, authHeader?.startsWith("Bearer ") ?
    /* istanbul ignore next */
    (cov_os53vclbf().b[27][0]++, authHeader.slice(7)) :
    /* istanbul ignore next */
    (cov_os53vclbf().b[27][1]++, null));
    /* istanbul ignore next */
    cov_os53vclbf().s[80]++;
    console.log("Delete category request:", {
      categoryId,
      hasAuthHeader: !!authHeader,
      token: token ?
      /* istanbul ignore next */
      (cov_os53vclbf().b[28][0]++, `${token.substring(0, 10)}...`) :
      /* istanbul ignore next */
      (cov_os53vclbf().b[28][1]++, null)
    });
    // Get user ID for audit logging
    let userId =
    /* istanbul ignore next */
    (cov_os53vclbf().s[81]++, null);
    /* istanbul ignore next */
    cov_os53vclbf().s[82]++;
    if (token !== "dev-token") {
      /* istanbul ignore next */
      cov_os53vclbf().b[29][0]++;
      // Verify permission
      const hasPermission =
      /* istanbul ignore next */
      (cov_os53vclbf().s[83]++, await (0, _auth.validateTokenPermission)(request, "category:delete"));
      /* istanbul ignore next */
      cov_os53vclbf().s[84]++;
      if (!hasPermission) {
        /* istanbul ignore next */
        cov_os53vclbf().b[30][0]++;
        cov_os53vclbf().s[85]++;
        return _server.NextResponse.json({
          success: false,
          message: "Unauthorized: Insufficient permissions"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_os53vclbf().b[30][1]++;
      }
      // Get user ID from token
      cov_os53vclbf().s[86]++;
      if (token) {
        /* istanbul ignore next */
        cov_os53vclbf().b[31][0]++;
        const decoded =
        /* istanbul ignore next */
        (cov_os53vclbf().s[87]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_os53vclbf().s[88]++;
        if (
        /* istanbul ignore next */
        (cov_os53vclbf().b[33][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_os53vclbf().b[33][1]++, typeof decoded === "object") &&
        /* istanbul ignore next */
        (cov_os53vclbf().b[33][2]++, "userId" in decoded)) {
          /* istanbul ignore next */
          cov_os53vclbf().b[32][0]++;
          cov_os53vclbf().s[89]++;
          userId = decoded.userId;
        } else
        /* istanbul ignore next */
        {
          cov_os53vclbf().b[32][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_os53vclbf().b[31][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_os53vclbf().b[29][1]++;
      cov_os53vclbf().s[90]++;
      console.log("Using development token - bypassing permission check");
      /* istanbul ignore next */
      cov_os53vclbf().s[91]++;
      userId = 1; // Default user for dev token
    }
    // Check if category exists
    const category =
    /* istanbul ignore next */
    (cov_os53vclbf().s[92]++, await _prisma.prisma.category.findUnique({
      where: {
        id: categoryId
      },
      include: {
        subCategories: true,
        products: true
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[93]++;
    if (!category) {
      /* istanbul ignore next */
      cov_os53vclbf().b[34][0]++;
      cov_os53vclbf().s[94]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[34][1]++;
    }
    // Check if category has child categories
    cov_os53vclbf().s[95]++;
    if (
    /* istanbul ignore next */
    (cov_os53vclbf().b[36][0]++, category.subCategories) &&
    /* istanbul ignore next */
    (cov_os53vclbf().b[36][1]++, category.subCategories.length > 0)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[35][0]++;
      cov_os53vclbf().s[96]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete category with subcategories. Please delete subcategories first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[35][1]++;
    }
    // Check if category is used by any products
    cov_os53vclbf().s[97]++;
    if (
    /* istanbul ignore next */
    (cov_os53vclbf().b[38][0]++, category.products) &&
    /* istanbul ignore next */
    (cov_os53vclbf().b[38][1]++, category.products.length > 0)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[37][0]++;
      cov_os53vclbf().s[98]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete category that is assigned to products. Please reassign products first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[37][1]++;
    }
    // Use audit service for soft delete
    cov_os53vclbf().s[99]++;
    if (userId) {
      /* istanbul ignore next */
      cov_os53vclbf().b[39][0]++;
      const auditService =
      /* istanbul ignore next */
      (cov_os53vclbf().s[100]++, _auditService.AuditService.getInstance());
      /* istanbul ignore next */
      cov_os53vclbf().s[101]++;
      await auditService.softDelete("Category", categoryId, category, userId, true // canRecover
      );
    } else {
      /* istanbul ignore next */
      cov_os53vclbf().b[39][1]++;
      cov_os53vclbf().s[102]++;
      // Fallback to hard delete if no user ID available
      await _prisma.prisma.category.delete({
        where: {
          id: categoryId
        }
      });
    }
    // Invalidate reference data cache
    const {
      cacheService
    } =
    /* istanbul ignore next */
    (cov_os53vclbf().s[103]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_os53vclbf().f[11]++;
      cov_os53vclbf().s[104]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../../lib/cache"));
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[105]++;
    await cacheService.invalidateReferenceData();
    /* istanbul ignore next */
    cov_os53vclbf().s[106]++;
    return _server.NextResponse.json({
      success: true,
      message: userId ?
      /* istanbul ignore next */
      (cov_os53vclbf().b[40][0]++, "Category moved to recycle bin successfully") :
      /* istanbul ignore next */
      (cov_os53vclbf().b[40][1]++, "Category deleted successfully")
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_os53vclbf().s[107]++;
    console.error("Error deleting category:", error);
    /* istanbul ignore next */
    cov_os53vclbf().s[108]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to delete category"
    }, {
      status: 500
    });
  }
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_os53vclbf().f[12]++;
  cov_os53vclbf().s[109]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_os53vclbf().s[110]++, await params);
    const categoryId =
    /* istanbul ignore next */
    (cov_os53vclbf().s[111]++, parseInt(resolvedParams.id));
    /* istanbul ignore next */
    cov_os53vclbf().s[112]++;
    if (isNaN(categoryId)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[41][0]++;
      cov_os53vclbf().s[113]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid category ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[41][1]++;
    }
    // Get the category
    const category =
    /* istanbul ignore next */
    (cov_os53vclbf().s[114]++, await _prisma.prisma.category.findUnique({
      where: {
        id: categoryId
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[115]++;
    if (!category) {
      /* istanbul ignore next */
      cov_os53vclbf().b[42][0]++;
      cov_os53vclbf().s[116]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[42][1]++;
    }
    // If there's a parent ID, get the parent name
    let parentName =
    /* istanbul ignore next */
    (cov_os53vclbf().s[117]++, null);
    /* istanbul ignore next */
    cov_os53vclbf().s[118]++;
    if (category.parentId) {
      /* istanbul ignore next */
      cov_os53vclbf().b[43][0]++;
      const parentCategory =
      /* istanbul ignore next */
      (cov_os53vclbf().s[119]++, await _prisma.prisma.category.findUnique({
        where: {
          id: category.parentId
        }
      }));
      /* istanbul ignore next */
      cov_os53vclbf().s[120]++;
      parentName = parentCategory?.name;
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[43][1]++;
    }
    cov_os53vclbf().s[121]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        id: category.id,
        name: category.name,
        description: category.description,
        parent_id: category.parentId,
        parent_name: parentName
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_os53vclbf().s[122]++;
    console.error("Error fetching category:", error);
    /* istanbul ignore next */
    cov_os53vclbf().s[123]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch category"
    }, {
      status: 500
    });
  }
}
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_os53vclbf().f[13]++;
  cov_os53vclbf().s[124]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_os53vclbf().s[125]++, await params);
    const categoryId =
    /* istanbul ignore next */
    (cov_os53vclbf().s[126]++, parseInt(resolvedParams.id));
    /* istanbul ignore next */
    cov_os53vclbf().s[127]++;
    if (isNaN(categoryId)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[44][0]++;
      cov_os53vclbf().s[128]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid category ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[44][1]++;
    }
    // Verify permission
    const hasPermission =
    /* istanbul ignore next */
    (cov_os53vclbf().s[129]++, await (0, _auth.validateTokenPermission)(request, "category:update"));
    /* istanbul ignore next */
    cov_os53vclbf().s[130]++;
    if (!hasPermission) {
      /* istanbul ignore next */
      cov_os53vclbf().b[45][0]++;
      cov_os53vclbf().s[131]++;
      return _server.NextResponse.json({
        success: false,
        message: "Unauthorized: Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[45][1]++;
    }
    // Parse request body
    const data =
    /* istanbul ignore next */
    (cov_os53vclbf().s[132]++, await request.json());
    const {
      name,
      description,
      parentId
    } =
    /* istanbul ignore next */
    (cov_os53vclbf().s[133]++, data);
    // Check if category exists
    const category =
    /* istanbul ignore next */
    (cov_os53vclbf().s[134]++, await _prisma.prisma.category.findUnique({
      where: {
        id: categoryId
      },
      include: {
        subCategories: true,
        products: true
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[135]++;
    if (!category) {
      /* istanbul ignore next */
      cov_os53vclbf().b[46][0]++;
      cov_os53vclbf().s[136]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[46][1]++;
    }
    // If name is being changed, check for duplicates
    cov_os53vclbf().s[137]++;
    if (
    /* istanbul ignore next */
    (cov_os53vclbf().b[48][0]++, name) &&
    /* istanbul ignore next */
    (cov_os53vclbf().b[48][1]++, name !== category.name)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[47][0]++;
      const existingCategory =
      /* istanbul ignore next */
      (cov_os53vclbf().s[138]++, await _prisma.prisma.category.findFirst({
        where: {
          name: {
            equals: name,
            mode: "insensitive"
          },
          id: {
            not: categoryId
          }
        }
      }));
      /* istanbul ignore next */
      cov_os53vclbf().s[139]++;
      if (existingCategory) {
        /* istanbul ignore next */
        cov_os53vclbf().b[49][0]++;
        cov_os53vclbf().s[140]++;
        return _server.NextResponse.json({
          success: false,
          message: "A category with this name already exists"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_os53vclbf().b[49][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[47][1]++;
    }
    // Check for circular reference if changing parent
    cov_os53vclbf().s[141]++;
    if (
    /* istanbul ignore next */
    (cov_os53vclbf().b[51][0]++, parentId) &&
    /* istanbul ignore next */
    (cov_os53vclbf().b[51][1]++, parentId !== category.parentId)) {
      /* istanbul ignore next */
      cov_os53vclbf().b[50][0]++;
      cov_os53vclbf().s[142]++;
      // Can't make itself its own parent
      if (parentId === categoryId) {
        /* istanbul ignore next */
        cov_os53vclbf().b[52][0]++;
        cov_os53vclbf().s[143]++;
        return _server.NextResponse.json({
          success: false,
          message: "Category cannot be its own parent"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_os53vclbf().b[52][1]++;
      }
      // Check if the new parent is a descendant of this category (would create a loop)
      let checkId =
      /* istanbul ignore next */
      (cov_os53vclbf().s[144]++, parentId);
      /* istanbul ignore next */
      cov_os53vclbf().s[145]++;
      while (checkId) {
        /* istanbul ignore next */
        cov_os53vclbf().s[146]++;
        if (checkId === categoryId) {
          /* istanbul ignore next */
          cov_os53vclbf().b[53][0]++;
          cov_os53vclbf().s[147]++;
          return _server.NextResponse.json({
            success: false,
            message: "Cannot create circular hierarchy"
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_os53vclbf().b[53][1]++;
        }
        const parentCategory =
        /* istanbul ignore next */
        (cov_os53vclbf().s[148]++, await _prisma.prisma.category.findUnique({
          where: {
            id: checkId
          }
        }));
        /* istanbul ignore next */
        cov_os53vclbf().s[149]++;
        checkId =
        /* istanbul ignore next */
        (cov_os53vclbf().b[54][0]++, parentCategory?.parentId) ||
        /* istanbul ignore next */
        (cov_os53vclbf().b[54][1]++, null);
      }
    } else
    /* istanbul ignore next */
    {
      cov_os53vclbf().b[50][1]++;
    }
    // Update the category
    const updatedCategory =
    /* istanbul ignore next */
    (cov_os53vclbf().s[150]++, await _prisma.prisma.category.update({
      where: {
        id: categoryId
      },
      data: {
        name:
        /* istanbul ignore next */
        (cov_os53vclbf().b[55][0]++, name) ||
        /* istanbul ignore next */
        (cov_os53vclbf().b[55][1]++, undefined),
        description: description !== undefined ?
        /* istanbul ignore next */
        (cov_os53vclbf().b[56][0]++, description) :
        /* istanbul ignore next */
        (cov_os53vclbf().b[56][1]++, undefined),
        parentId: parentId !== undefined ?
        /* istanbul ignore next */
        (cov_os53vclbf().b[57][0]++,
        /* istanbul ignore next */
        (cov_os53vclbf().b[58][0]++, parentId) ||
        /* istanbul ignore next */
        (cov_os53vclbf().b[58][1]++, null)) :
        /* istanbul ignore next */
        (cov_os53vclbf().b[57][1]++, undefined)
      }
    }));
    /* istanbul ignore next */
    cov_os53vclbf().s[151]++;
    return _server.NextResponse.json({
      success: true,
      message: "Category updated successfully",
      data: updatedCategory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_os53vclbf().s[152]++;
    console.error("Error updating category:", error);
    /* istanbul ignore next */
    cov_os53vclbf().s[153]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to update category"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,