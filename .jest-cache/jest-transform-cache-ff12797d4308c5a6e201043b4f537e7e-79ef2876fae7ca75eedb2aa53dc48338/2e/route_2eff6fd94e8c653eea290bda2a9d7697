bf641a4a058eb81ce7b53c9efb350c39
"use strict";

/* istanbul ignore next */
function cov_1hn3wb11wc() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/fix-shopstaff-permissions/route.ts";
  var hash = "f3e5e6060f56d7e09ad3b0fd2841c1568e5ebcb3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/fix-shopstaff-permissions/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "7": {
        start: {
          line: 17,
          column: 39
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 81
        }
      },
      "9": {
        start: {
          line: 30,
          column: 35
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "10": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 85
        }
      },
      "11": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "12": {
        start: {
          line: 59,
          column: 38
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "13": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "14": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 87
        }
      },
      "15": {
        start: {
          line: 72,
          column: 37
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "16": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 73,
          column: 37
        }
      },
      "17": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 31
        }
      },
      "18": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "19": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "20": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "21": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 56
        }
      },
      "22": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 35
        }
      },
      "23": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 74
        }
      },
      "24": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "25": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "26": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "27": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 72
        }
      },
      "28": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "29": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "30": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 53
          }
        }, {
          start: {
            line: 72,
            column: 57
          },
          end: {
            line: 72,
            column: 59
          }
        }],
        line: 72
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 23
          }
        }, {
          start: {
            line: 84,
            column: 27
          },
          end: {
            line: 84,
            column: 41
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 21
          },
          end: {
            line: 114,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 46
          },
          end: {
            line: 114,
            column: 59
          }
        }, {
          start: {
            line: 114,
            column: 62
          },
          end: {
            line: 114,
            column: 77
          }
        }],
        line: 114
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/fix-shopstaff-permissions/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: NextRequest) {\n    try {\n        console.log('Fixing Shop Staff user permissions...');\n        \n        // First, ensure the shop:assigned_only permission exists\n        const shopAssignedPermission = await prisma.permission.upsert({\n            where: { name: 'shop:assigned_only' },\n            update: {},\n            create: {\n                id: 53, // Use next available ID\n                name: 'shop:assigned_only',\n                description: 'Restricts user access to only their assigned shop'\n            }\n        });\n        \n        console.log('Shop assigned permission ensured:', shopAssignedPermission);\n        \n        // Find users who are likely shop staff (have inventory:transfer permission but no proper role)\n        const potentialShopStaff = await prisma.user.findMany({\n            where: {\n                AND: [\n                    { permissions: { has: '7' } }, // inventory:transfer permission ID\n                    { shopId: { not: null } },\n                    {\n                        OR: [\n                            { roleName: null },\n                            { roleName: '' }\n                        ]\n                    }\n                ]\n            }\n        });\n        \n        console.log(`Found ${potentialShopStaff.length} potential shop staff users`);\n        \n        const updates = [];\n        \n        // Define the complete shop staff permission set (using permission IDs)\n        const requiredPermissionIds = [\n            '5',  // dashboard:view\n            '2',  // sales:view\n            '7',  // inventory:transfer\n            '9',  // customer:view\n            '10', // invoice:create\n            '11', // quotation:create\n            '19', // shop:distribution:view\n            shopAssignedPermission.id.toString() // shop:assigned_only\n        ];\n        \n        for (const user of potentialShopStaff) {\n            console.log(`Updating permissions for user: ${user.name} (${user.email})`);\n            \n            // Get current permissions\n            let currentPermissions = user.permissions || [];\n            let addedPermissions = [];\n            let updated = false;\n            \n            // Add missing permissions if they don't exist\n            for (const permissionId of requiredPermissionIds) {\n                if (!currentPermissions.includes(permissionId)) {\n                    currentPermissions.push(permissionId);\n                    addedPermissions.push(permissionId);\n                    updated = true;\n                    console.log(`  Added permission ID: ${permissionId}`);\n                }\n            }\n            \n            if (updated || !user.roleName) {\n                // Update the user with new permissions and role name\n                await prisma.user.update({\n                    where: { id: user.id },\n                    data: {\n                        permissions: currentPermissions,\n                        roleName: 'Shop Staff'\n                    }\n                });\n                updates.push({\n                    user: user.name,\n                    email: user.email,\n                    addedPermissions,\n                    roleNameSet: !user.roleName\n                });\n                console.log(`  Updated user ${user.name} successfully`);\n            }\n        }\n        \n        return NextResponse.json({\n            success: true,\n            message: 'Shop Staff permissions fixed successfully',\n            updates\n        });\n        \n    } catch (error) {\n        console.error('Error fixing shop staff permissions:', error);\n        return NextResponse.json(\n            { \n                success: false, \n                error: 'Failed to fix shop staff permissions',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["POST", "request", "console", "log", "shopAssignedPermission", "prisma", "permission", "upsert", "where", "name", "update", "create", "id", "description", "potentialShopStaff", "user", "findMany", "AND", "permissions", "has", "shopId", "not", "OR", "roleName", "length", "updates", "requiredPermissionIds", "toString", "email", "currentPermissions", "addedPermissions", "updated", "permissionId", "includes", "push", "data", "roleNameSet", "NextResponse", "json", "success", "message", "error", "details", "Error", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHoB;wBACnB;AAEhB,eAAeA,KAAKC,OAAoB;IAC3C,IAAI;QACAC,QAAQC,GAAG,CAAC;QAEZ,yDAAyD;QACzD,MAAMC,yBAAyB,MAAMC,cAAM,CAACC,UAAU,CAACC,MAAM,CAAC;YAC1DC,OAAO;gBAAEC,MAAM;YAAqB;YACpCC,QAAQ,CAAC;YACTC,QAAQ;gBACJC,IAAI;gBACJH,MAAM;gBACNI,aAAa;YACjB;QACJ;QAEAX,QAAQC,GAAG,CAAC,qCAAqCC;QAEjD,+FAA+F;QAC/F,MAAMU,qBAAqB,MAAMT,cAAM,CAACU,IAAI,CAACC,QAAQ,CAAC;YAClDR,OAAO;gBACHS,KAAK;oBACD;wBAAEC,aAAa;4BAAEC,KAAK;wBAAI;oBAAE;oBAC5B;wBAAEC,QAAQ;4BAAEC,KAAK;wBAAK;oBAAE;oBACxB;wBACIC,IAAI;4BACA;gCAAEC,UAAU;4BAAK;4BACjB;gCAAEA,UAAU;4BAAG;yBAClB;oBACL;iBACH;YACL;QACJ;QAEArB,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEW,mBAAmBU,MAAM,CAAC,2BAA2B,CAAC;QAE3E,MAAMC,UAAU,EAAE;QAElB,uEAAuE;QACvE,MAAMC,wBAAwB;YAC1B;YACA;YACA;YACA;YACA;YACA;YACA;YACAtB,uBAAuBQ,EAAE,CAACe,QAAQ,GAAG,qBAAqB;SAC7D;QAED,KAAK,MAAMZ,QAAQD,mBAAoB;YACnCZ,QAAQC,GAAG,CAAC,CAAC,+BAA+B,EAAEY,KAAKN,IAAI,CAAC,EAAE,EAAEM,KAAKa,KAAK,CAAC,CAAC,CAAC;YAEzE,0BAA0B;YAC1B,IAAIC,qBAAqBd,KAAKG,WAAW,IAAI,EAAE;YAC/C,IAAIY,mBAAmB,EAAE;YACzB,IAAIC,UAAU;YAEd,8CAA8C;YAC9C,KAAK,MAAMC,gBAAgBN,sBAAuB;gBAC9C,IAAI,CAACG,mBAAmBI,QAAQ,CAACD,eAAe;oBAC5CH,mBAAmBK,IAAI,CAACF;oBACxBF,iBAAiBI,IAAI,CAACF;oBACtBD,UAAU;oBACV7B,QAAQC,GAAG,CAAC,CAAC,uBAAuB,EAAE6B,aAAa,CAAC;gBACxD;YACJ;YAEA,IAAID,WAAW,CAAChB,KAAKQ,QAAQ,EAAE;gBAC3B,qDAAqD;gBACrD,MAAMlB,cAAM,CAACU,IAAI,CAACL,MAAM,CAAC;oBACrBF,OAAO;wBAAEI,IAAIG,KAAKH,EAAE;oBAAC;oBACrBuB,MAAM;wBACFjB,aAAaW;wBACbN,UAAU;oBACd;gBACJ;gBACAE,QAAQS,IAAI,CAAC;oBACTnB,MAAMA,KAAKN,IAAI;oBACfmB,OAAOb,KAAKa,KAAK;oBACjBE;oBACAM,aAAa,CAACrB,KAAKQ,QAAQ;gBAC/B;gBACArB,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEY,KAAKN,IAAI,CAAC,aAAa,CAAC;YAC1D;QACJ;QAEA,OAAO4B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTf;QACJ;IAEJ,EAAE,OAAOgB,OAAO;QACZvC,QAAQuC,KAAK,CAAC,wCAAwCA;QACtD,OAAOJ,oBAAY,CAACC,IAAI,CACpB;YACIC,SAAS;YACTE,OAAO;YACPC,SAASD,iBAAiBE,QAAQF,MAAMD,OAAO,GAAG;QACtD,GACA;YAAEI,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f3e5e6060f56d7e09ad3b0fd2841c1568e5ebcb3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hn3wb11wc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hn3wb11wc();
cov_1hn3wb11wc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1hn3wb11wc().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1hn3wb11wc().f[0]++;
    cov_1hn3wb11wc().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1hn3wb11wc().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1hn3wb11wc().s[4]++, require("../../../lib/prisma"));
async function POST(request) {
  /* istanbul ignore next */
  cov_1hn3wb11wc().f[1]++;
  cov_1hn3wb11wc().s[5]++;
  try {
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[6]++;
    console.log("Fixing Shop Staff user permissions...");
    // First, ensure the shop:assigned_only permission exists
    const shopAssignedPermission =
    /* istanbul ignore next */
    (cov_1hn3wb11wc().s[7]++, await _prisma.prisma.permission.upsert({
      where: {
        name: "shop:assigned_only"
      },
      update: {},
      create: {
        id: 53,
        name: "shop:assigned_only",
        description: "Restricts user access to only their assigned shop"
      }
    }));
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[8]++;
    console.log("Shop assigned permission ensured:", shopAssignedPermission);
    // Find users who are likely shop staff (have inventory:transfer permission but no proper role)
    const potentialShopStaff =
    /* istanbul ignore next */
    (cov_1hn3wb11wc().s[9]++, await _prisma.prisma.user.findMany({
      where: {
        AND: [{
          permissions: {
            has: "7"
          }
        }, {
          shopId: {
            not: null
          }
        }, {
          OR: [{
            roleName: null
          }, {
            roleName: ""
          }]
        }]
      }
    }));
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[10]++;
    console.log(`Found ${potentialShopStaff.length} potential shop staff users`);
    const updates =
    /* istanbul ignore next */
    (cov_1hn3wb11wc().s[11]++, []);
    // Define the complete shop staff permission set (using permission IDs)
    const requiredPermissionIds =
    /* istanbul ignore next */
    (cov_1hn3wb11wc().s[12]++, ["5", "2", "7", "9", "10", "11", "19", shopAssignedPermission.id.toString() // shop:assigned_only
    ]);
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[13]++;
    for (const user of potentialShopStaff) {
      /* istanbul ignore next */
      cov_1hn3wb11wc().s[14]++;
      console.log(`Updating permissions for user: ${user.name} (${user.email})`);
      // Get current permissions
      let currentPermissions =
      /* istanbul ignore next */
      (cov_1hn3wb11wc().s[15]++,
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[0][0]++, user.permissions) ||
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[0][1]++, []));
      let addedPermissions =
      /* istanbul ignore next */
      (cov_1hn3wb11wc().s[16]++, []);
      let updated =
      /* istanbul ignore next */
      (cov_1hn3wb11wc().s[17]++, false);
      // Add missing permissions if they don't exist
      /* istanbul ignore next */
      cov_1hn3wb11wc().s[18]++;
      for (const permissionId of requiredPermissionIds) {
        /* istanbul ignore next */
        cov_1hn3wb11wc().s[19]++;
        if (!currentPermissions.includes(permissionId)) {
          /* istanbul ignore next */
          cov_1hn3wb11wc().b[1][0]++;
          cov_1hn3wb11wc().s[20]++;
          currentPermissions.push(permissionId);
          /* istanbul ignore next */
          cov_1hn3wb11wc().s[21]++;
          addedPermissions.push(permissionId);
          /* istanbul ignore next */
          cov_1hn3wb11wc().s[22]++;
          updated = true;
          /* istanbul ignore next */
          cov_1hn3wb11wc().s[23]++;
          console.log(`  Added permission ID: ${permissionId}`);
        } else
        /* istanbul ignore next */
        {
          cov_1hn3wb11wc().b[1][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1hn3wb11wc().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[3][0]++, updated) ||
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[3][1]++, !user.roleName)) {
        /* istanbul ignore next */
        cov_1hn3wb11wc().b[2][0]++;
        cov_1hn3wb11wc().s[25]++;
        // Update the user with new permissions and role name
        await _prisma.prisma.user.update({
          where: {
            id: user.id
          },
          data: {
            permissions: currentPermissions,
            roleName: "Shop Staff"
          }
        });
        /* istanbul ignore next */
        cov_1hn3wb11wc().s[26]++;
        updates.push({
          user: user.name,
          email: user.email,
          addedPermissions,
          roleNameSet: !user.roleName
        });
        /* istanbul ignore next */
        cov_1hn3wb11wc().s[27]++;
        console.log(`  Updated user ${user.name} successfully`);
      } else
      /* istanbul ignore next */
      {
        cov_1hn3wb11wc().b[2][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[28]++;
    return _server.NextResponse.json({
      success: true,
      message: "Shop Staff permissions fixed successfully",
      updates
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[29]++;
    console.error("Error fixing shop staff permissions:", error);
    /* istanbul ignore next */
    cov_1hn3wb11wc().s[30]++;
    return _server.NextResponse.json({
      success: false,
      error: "Failed to fix shop staff permissions",
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1hn3wb11wc().b[4][1]++, "Unknown error")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,