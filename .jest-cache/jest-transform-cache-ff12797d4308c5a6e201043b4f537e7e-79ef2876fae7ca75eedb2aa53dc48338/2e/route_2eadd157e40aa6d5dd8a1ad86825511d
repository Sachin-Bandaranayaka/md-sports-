c85745775a9a18926022b1de276cad56
"use strict";

/* istanbul ignore next */
function cov_hlicc6cy1() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/test-bcrypt/route.ts";
  var hash = "7955363b1b9bd1c099be24f743240c6861a14344";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/test-bcrypt/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "7": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "8": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "9": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 79
        }
      },
      "10": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 85
        }
      },
      "11": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 85
        }
      },
      "12": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 77
        }
      },
      "13": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 83
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/test-bcrypt/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\n\nexport async function GET(req: NextRequest) {\n    try {\n        // Test password hashing\n        const testPassword = 'password';\n\n        // Generate a salt\n        const salt = await bcrypt.genSalt(10);\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(testPassword, salt);\n\n        // Compare the password with the hash\n        const isMatch = await bcrypt.compare(testPassword, hashedPassword);\n\n        // Compare with a known hash from our database\n        const dbHash = '$2b$10$r249vbhhSVlwwCM7bO0v9e3CS9lXfD5M7ySVU2ECMQwEn1WhHBY8a';\n        const dbMatch = await bcrypt.compare(testPassword, dbHash);\n\n        // Test with a wrong password\n        const wrongMatch = await bcrypt.compare('wrongpassword', dbHash);\n\n        return NextResponse.json({\n            success: true,\n            testResults: {\n                hashedPassword,\n                isMatch,\n                dbHash,\n                dbMatch,\n                wrongMatch\n            }\n        });\n    } catch (error) {\n        console.error('Bcrypt test error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Test failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "req", "testPassword", "salt", "bcrypt", "genSalt", "hashedPassword", "hash", "isMatch", "compare", "dbHash", "dbMatch", "wrongMatch", "NextResponse", "json", "success", "testResults", "error", "console", "message", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHoB;iEACvB;;;;;;AAEZ,eAAeA,IAAIC,GAAgB;IACtC,IAAI;QACA,wBAAwB;QACxB,MAAMC,eAAe;QAErB,kBAAkB;QAClB,MAAMC,OAAO,MAAMC,iBAAM,CAACC,OAAO,CAAC;QAElC,oBAAoB;QACpB,MAAMC,iBAAiB,MAAMF,iBAAM,CAACG,IAAI,CAACL,cAAcC;QAEvD,qCAAqC;QACrC,MAAMK,UAAU,MAAMJ,iBAAM,CAACK,OAAO,CAACP,cAAcI;QAEnD,8CAA8C;QAC9C,MAAMI,SAAS;QACf,MAAMC,UAAU,MAAMP,iBAAM,CAACK,OAAO,CAACP,cAAcQ;QAEnD,6BAA6B;QAC7B,MAAME,aAAa,MAAMR,iBAAM,CAACK,OAAO,CAAC,iBAAiBC;QAEzD,OAAOG,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,aAAa;gBACTV;gBACAE;gBACAE;gBACAC;gBACAC;YACJ;QACJ;IACJ,EAAE,OAAOK,OAAO;QACZC,QAAQD,KAAK,CAAC,sBAAsBA;QACpC,OAAOJ,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOI,SAAS;YAAeF,OAAO,AAACA,MAAgBE,OAAO;QAAC,GAC1E;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7955363b1b9bd1c099be24f743240c6861a14344"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hlicc6cy1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hlicc6cy1();
cov_hlicc6cy1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hlicc6cy1().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_hlicc6cy1().f[0]++;
    cov_hlicc6cy1().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_hlicc6cy1().s[3]++, require("next/server"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_hlicc6cy1().s[4]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_hlicc6cy1().f[1]++;
  cov_hlicc6cy1().s[5]++;
  return /* istanbul ignore next */(cov_hlicc6cy1().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_hlicc6cy1().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_hlicc6cy1().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_hlicc6cy1().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_hlicc6cy1().f[2]++;
  cov_hlicc6cy1().s[6]++;
  try {
    // Test password hashing
    const testPassword =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[7]++, "password");
    // Generate a salt
    const salt =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[8]++, await _bcryptjs.default.genSalt(10));
    // Hash the password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[9]++, await _bcryptjs.default.hash(testPassword, salt));
    // Compare the password with the hash
    const isMatch =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[10]++, await _bcryptjs.default.compare(testPassword, hashedPassword));
    // Compare with a known hash from our database
    const dbHash =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[11]++, "$2b$10$r249vbhhSVlwwCM7bO0v9e3CS9lXfD5M7ySVU2ECMQwEn1WhHBY8a");
    const dbMatch =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[12]++, await _bcryptjs.default.compare(testPassword, dbHash));
    // Test with a wrong password
    const wrongMatch =
    /* istanbul ignore next */
    (cov_hlicc6cy1().s[13]++, await _bcryptjs.default.compare("wrongpassword", dbHash));
    /* istanbul ignore next */
    cov_hlicc6cy1().s[14]++;
    return _server.NextResponse.json({
      success: true,
      testResults: {
        hashedPassword,
        isMatch,
        dbHash,
        dbMatch,
        wrongMatch
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hlicc6cy1().s[15]++;
    console.error("Bcrypt test error:", error);
    /* istanbul ignore next */
    cov_hlicc6cy1().s[16]++;
    return _server.NextResponse.json({
      success: false,
      message: "Test failed",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJyZXEiLCJjb3ZfaGxpY2M2Y3kxIiwiZiIsInMiLCJ0ZXN0UGFzc3dvcmQiLCJzYWx0IiwiX2JjcnlwdGpzIiwiZGVmYXVsdCIsImdlblNhbHQiLCJoYXNoZWRQYXNzd29yZCIsImhhc2giLCJpc01hdGNoIiwiY29tcGFyZSIsImRiSGFzaCIsImRiTWF0Y2giLCJ3cm9uZ01hdGNoIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJzdWNjZXNzIiwidGVzdFJlc3VsdHMiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9hdXRoL3Rlc3QtYmNyeXB0L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXE6IE5leHRSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVGVzdCBwYXNzd29yZCBoYXNoaW5nXG4gICAgICAgIGNvbnN0IHRlc3RQYXNzd29yZCA9ICdwYXNzd29yZCc7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgYSBzYWx0XG4gICAgICAgIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMCk7XG5cbiAgICAgICAgLy8gSGFzaCB0aGUgcGFzc3dvcmRcbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaCh0ZXN0UGFzc3dvcmQsIHNhbHQpO1xuXG4gICAgICAgIC8vIENvbXBhcmUgdGhlIHBhc3N3b3JkIHdpdGggdGhlIGhhc2hcbiAgICAgICAgY29uc3QgaXNNYXRjaCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHRlc3RQYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xuXG4gICAgICAgIC8vIENvbXBhcmUgd2l0aCBhIGtub3duIGhhc2ggZnJvbSBvdXIgZGF0YWJhc2VcbiAgICAgICAgY29uc3QgZGJIYXNoID0gJyQyYiQxMCRyMjQ5dmJoaFNWbHd3Q003Yk8wdjllM0NTOWxYZkQ1TTd5U1ZVMkVDTVF3RW4xV2hIQlk4YSc7XG4gICAgICAgIGNvbnN0IGRiTWF0Y2ggPSBhd2FpdCBiY3J5cHQuY29tcGFyZSh0ZXN0UGFzc3dvcmQsIGRiSGFzaCk7XG5cbiAgICAgICAgLy8gVGVzdCB3aXRoIGEgd3JvbmcgcGFzc3dvcmRcbiAgICAgICAgY29uc3Qgd3JvbmdNYXRjaCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKCd3cm9uZ3Bhc3N3b3JkJywgZGJIYXNoKTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIHRlc3RSZXN1bHRzOiB7XG4gICAgICAgICAgICAgICAgaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgaXNNYXRjaCxcbiAgICAgICAgICAgICAgICBkYkhhc2gsXG4gICAgICAgICAgICAgICAgZGJNYXRjaCxcbiAgICAgICAgICAgICAgICB3cm9uZ01hdGNoXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0JjcnlwdCB0ZXN0IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1Rlc3QgZmFpbGVkJywgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBR3NCOzs7Ozs7V0FBQUEsR0FBQTs7Ozs7aUNBSG9COzs7dUVBQ3ZCOzs7Ozs7Ozs7Ozs7Ozs7QUFFWixlQUFlQSxJQUFJQyxHQUFnQjtFQUFBO0VBQUFDLGFBQUEsR0FBQUMsQ0FBQTtFQUFBRCxhQUFBLEdBQUFFLENBQUE7RUFDdEMsSUFBSTtJQUNBO0lBQ0EsTUFBTUMsWUFBQTtJQUFBO0lBQUEsQ0FBQUgsYUFBQSxHQUFBRSxDQUFBLE9BQWU7SUFFckI7SUFDQSxNQUFNRSxJQUFBO0lBQUE7SUFBQSxDQUFBSixhQUFBLEdBQUFFLENBQUEsT0FBTyxNQUFNRyxTQUFBLENBQUFDLE9BQU0sQ0FBQ0MsT0FBTyxDQUFDO0lBRWxDO0lBQ0EsTUFBTUMsY0FBQTtJQUFBO0lBQUEsQ0FBQVIsYUFBQSxHQUFBRSxDQUFBLE9BQWlCLE1BQU1HLFNBQUEsQ0FBQUMsT0FBTSxDQUFDRyxJQUFJLENBQUNOLFlBQUEsRUFBY0MsSUFBQTtJQUV2RDtJQUNBLE1BQU1NLE9BQUE7SUFBQTtJQUFBLENBQUFWLGFBQUEsR0FBQUUsQ0FBQSxRQUFVLE1BQU1HLFNBQUEsQ0FBQUMsT0FBTSxDQUFDSyxPQUFPLENBQUNSLFlBQUEsRUFBY0ssY0FBQTtJQUVuRDtJQUNBLE1BQU1JLE1BQUE7SUFBQTtJQUFBLENBQUFaLGFBQUEsR0FBQUUsQ0FBQSxRQUFTO0lBQ2YsTUFBTVcsT0FBQTtJQUFBO0lBQUEsQ0FBQWIsYUFBQSxHQUFBRSxDQUFBLFFBQVUsTUFBTUcsU0FBQSxDQUFBQyxPQUFNLENBQUNLLE9BQU8sQ0FBQ1IsWUFBQSxFQUFjUyxNQUFBO0lBRW5EO0lBQ0EsTUFBTUUsVUFBQTtJQUFBO0lBQUEsQ0FBQWQsYUFBQSxHQUFBRSxDQUFBLFFBQWEsTUFBTUcsU0FBQSxDQUFBQyxPQUFNLENBQUNLLE9BQU8sQ0FBQyxpQkFBaUJDLE1BQUE7SUFBQTtJQUFBWixhQUFBLEdBQUFFLENBQUE7SUFFekQsT0FBT2EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztNQUNyQkMsT0FBQSxFQUFTO01BQ1RDLFdBQUEsRUFBYTtRQUNUWCxjQUFBO1FBQ0FFLE9BQUE7UUFDQUUsTUFBQTtRQUNBQyxPQUFBO1FBQ0FDO01BQ0o7SUFDSjtFQUNKLEVBQUUsT0FBT00sS0FBQSxFQUFPO0lBQUE7SUFBQXBCLGFBQUEsR0FBQUUsQ0FBQTtJQUNabUIsT0FBQSxDQUFRRCxLQUFLLENBQUMsc0JBQXNCQSxLQUFBO0lBQUE7SUFBQXBCLGFBQUEsR0FBQUUsQ0FBQTtJQUNwQyxPQUFPYSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUNwQjtNQUFFQyxPQUFBLEVBQVM7TUFBT0ksT0FBQSxFQUFTO01BQWVGLEtBQUEsRUFBT0EsS0FBQyxDQUFnQkU7SUFBUSxHQUMxRTtNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUV0QjtBQUNKIiwiaWdub3JlTGlzdCI6W119