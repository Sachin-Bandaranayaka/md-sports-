{"version":3,"names":["GET","req","cov_hlicc6cy1","f","s","testPassword","salt","_bcryptjs","default","genSalt","hashedPassword","hash","isMatch","compare","dbHash","dbMatch","wrongMatch","_server","NextResponse","json","success","testResults","error","console","message","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/test-bcrypt/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\n\nexport async function GET(req: NextRequest) {\n    try {\n        // Test password hashing\n        const testPassword = 'password';\n\n        // Generate a salt\n        const salt = await bcrypt.genSalt(10);\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(testPassword, salt);\n\n        // Compare the password with the hash\n        const isMatch = await bcrypt.compare(testPassword, hashedPassword);\n\n        // Compare with a known hash from our database\n        const dbHash = '$2b$10$r249vbhhSVlwwCM7bO0v9e3CS9lXfD5M7ySVU2ECMQwEn1WhHBY8a';\n        const dbMatch = await bcrypt.compare(testPassword, dbHash);\n\n        // Test with a wrong password\n        const wrongMatch = await bcrypt.compare('wrongpassword', dbHash);\n\n        return NextResponse.json({\n            success: true,\n            testResults: {\n                hashedPassword,\n                isMatch,\n                dbHash,\n                dbMatch,\n                wrongMatch\n            }\n        });\n    } catch (error) {\n        console.error('Bcrypt test error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Test failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAGsB;;;;;;WAAAA,GAAA;;;;;iCAHoB;;;uEACvB;;;;;;;;;;;;;;;AAEZ,eAAeA,IAAIC,GAAgB;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACtC,IAAI;IACA;IACA,MAAMC,YAAA;IAAA;IAAA,CAAAH,aAAA,GAAAE,CAAA,OAAe;IAErB;IACA,MAAME,IAAA;IAAA;IAAA,CAAAJ,aAAA,GAAAE,CAAA,OAAO,MAAMG,SAAA,CAAAC,OAAM,CAACC,OAAO,CAAC;IAElC;IACA,MAAMC,cAAA;IAAA;IAAA,CAAAR,aAAA,GAAAE,CAAA,OAAiB,MAAMG,SAAA,CAAAC,OAAM,CAACG,IAAI,CAACN,YAAA,EAAcC,IAAA;IAEvD;IACA,MAAMM,OAAA;IAAA;IAAA,CAAAV,aAAA,GAAAE,CAAA,QAAU,MAAMG,SAAA,CAAAC,OAAM,CAACK,OAAO,CAACR,YAAA,EAAcK,cAAA;IAEnD;IACA,MAAMI,MAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAS;IACf,MAAMW,OAAA;IAAA;IAAA,CAAAb,aAAA,GAAAE,CAAA,QAAU,MAAMG,SAAA,CAAAC,OAAM,CAACK,OAAO,CAACR,YAAA,EAAcS,MAAA;IAEnD;IACA,MAAME,UAAA;IAAA;IAAA,CAAAd,aAAA,GAAAE,CAAA,QAAa,MAAMG,SAAA,CAAAC,OAAM,CAACK,OAAO,CAAC,iBAAiBC,MAAA;IAAA;IAAAZ,aAAA,GAAAE,CAAA;IAEzD,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,WAAA,EAAa;QACTX,cAAA;QACAE,OAAA;QACAE,MAAA;QACAC,OAAA;QACAC;MACJ;IACJ;EACJ,EAAE,OAAOM,KAAA,EAAO;IAAA;IAAApB,aAAA,GAAAE,CAAA;IACZmB,OAAA,CAAQD,KAAK,CAAC,sBAAsBA,KAAA;IAAA;IAAApB,aAAA,GAAAE,CAAA;IACpC,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEC,OAAA,EAAS;MAAOI,OAAA,EAAS;MAAeF,KAAA,EAAOA,KAAC,CAAgBE;IAAQ,GAC1E;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}