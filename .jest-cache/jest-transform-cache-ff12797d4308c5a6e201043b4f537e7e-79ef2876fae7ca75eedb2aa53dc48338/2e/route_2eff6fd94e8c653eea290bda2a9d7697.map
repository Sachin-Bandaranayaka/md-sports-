{"version":3,"names":["cov_1hn3wb11wc","actualCoverage","s","POST","request","f","console","log","shopAssignedPermission","_prisma","prisma","permission","upsert","where","name","update","create","id","description","potentialShopStaff","user","findMany","AND","permissions","has","shopId","not","OR","roleName","length","updates","requiredPermissionIds","toString","email","currentPermissions","b","addedPermissions","updated","permissionId","includes","push","data","roleNameSet","_server","NextResponse","json","success","message","error","details","Error","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/fix-shopstaff-permissions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: NextRequest) {\n    try {\n        console.log('Fixing Shop Staff user permissions...');\n        \n        // First, ensure the shop:assigned_only permission exists\n        const shopAssignedPermission = await prisma.permission.upsert({\n            where: { name: 'shop:assigned_only' },\n            update: {},\n            create: {\n                id: 53, // Use next available ID\n                name: 'shop:assigned_only',\n                description: 'Restricts user access to only their assigned shop'\n            }\n        });\n        \n        console.log('Shop assigned permission ensured:', shopAssignedPermission);\n        \n        // Find users who are likely shop staff (have inventory:transfer permission but no proper role)\n        const potentialShopStaff = await prisma.user.findMany({\n            where: {\n                AND: [\n                    { permissions: { has: '7' } }, // inventory:transfer permission ID\n                    { shopId: { not: null } },\n                    {\n                        OR: [\n                            { roleName: null },\n                            { roleName: '' }\n                        ]\n                    }\n                ]\n            }\n        });\n        \n        console.log(`Found ${potentialShopStaff.length} potential shop staff users`);\n        \n        const updates = [];\n        \n        // Define the complete shop staff permission set (using permission IDs)\n        const requiredPermissionIds = [\n            '5',  // dashboard:view\n            '2',  // sales:view\n            '7',  // inventory:transfer\n            '9',  // customer:view\n            '10', // invoice:create\n            '11', // quotation:create\n            '19', // shop:distribution:view\n            shopAssignedPermission.id.toString() // shop:assigned_only\n        ];\n        \n        for (const user of potentialShopStaff) {\n            console.log(`Updating permissions for user: ${user.name} (${user.email})`);\n            \n            // Get current permissions\n            let currentPermissions = user.permissions || [];\n            let addedPermissions = [];\n            let updated = false;\n            \n            // Add missing permissions if they don't exist\n            for (const permissionId of requiredPermissionIds) {\n                if (!currentPermissions.includes(permissionId)) {\n                    currentPermissions.push(permissionId);\n                    addedPermissions.push(permissionId);\n                    updated = true;\n                    console.log(`  Added permission ID: ${permissionId}`);\n                }\n            }\n            \n            if (updated || !user.roleName) {\n                // Update the user with new permissions and role name\n                await prisma.user.update({\n                    where: { id: user.id },\n                    data: {\n                        permissions: currentPermissions,\n                        roleName: 'Shop Staff'\n                    }\n                });\n                updates.push({\n                    user: user.name,\n                    email: user.email,\n                    addedPermissions,\n                    roleNameSet: !user.roleName\n                });\n                console.log(`  Updated user ${user.name} successfully`);\n            }\n        }\n        \n        return NextResponse.json({\n            success: true,\n            message: 'Shop Staff permissions fixed successfully',\n            updates\n        });\n        \n    } catch (error) {\n        console.error('Error fixing shop staff permissions:', error);\n        return NextResponse.json(\n            { \n                success: false, \n                error: 'Failed to fix shop staff permissions',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}