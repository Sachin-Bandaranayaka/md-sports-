477c9287ca6f05bbf054bd2ed54ef12a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cn: function() {
        return cn;
    },
    debounce: function() {
        return debounce;
    },
    formatCurrency: function() {
        return formatCurrency;
    },
    formatDate: function() {
        return formatDate;
    },
    formatNumber: function() {
        return formatNumber;
    },
    generateCacheKey: function() {
        return generateCacheKey;
    },
    isEmpty: function() {
        return isEmpty;
    },
    sleep: function() {
        return sleep;
    },
    throttle: function() {
        return throttle;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "numeric",
        minute: "numeric"
    });
}
function debounce(func, wait) {
    let timeout = null;
    return (...args)=>{
        if (timeout) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(()=>{
            func(...args);
        }, wait);
    };
}
function throttle(func, limit) {
    let inThrottle;
    return (...args)=>{
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}
function formatCurrency(amount, currency = "USD") {
    return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency
    }).format(amount);
}
function formatNumber(num) {
    return new Intl.NumberFormat("en-US").format(num);
}
function generateCacheKey(endpoint, params = {}) {
    const sortedParams = Object.keys(params).sort().reduce((result, key)=>{
        result[key] = params[key];
        return result;
    }, {});
    return `${endpoint}:${JSON.stringify(sortedParams)}`;
}
function sleep(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms));
}
function isEmpty(value) {
    if (value == null) return true;
    if (typeof value === "string") return value.trim() === "";
    if (Array.isArray(value)) return value.length === 0;
    if (typeof value === "object") return Object.keys(value).length === 0;
    return false;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2xpYi91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbHN4LCB0eXBlIENsYXNzVmFsdWUgfSBmcm9tIFwiY2xzeFwiO1xuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY24oLi4uaW5wdXRzOiBDbGFzc1ZhbHVlW10pIHtcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKTtcbn1cblxuLyoqXG4gKiBGb3JtYXQgYSBkYXRlIHN0cmluZyB0byBhIG1vcmUgcmVhZGFibGUgZm9ybWF0XG4gKiBAcGFyYW0gZGF0ZVN0cmluZyAtIFRoZSBkYXRlIHN0cmluZyB0byBmb3JtYXRcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlU3RyaW5nOiBzdHJpbmcgfCBEYXRlKTogc3RyaW5nIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHJpbmcpO1xuICByZXR1cm4gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywge1xuICAgIHllYXI6ICdudW1lcmljJyxcbiAgICBtb250aDogJ3Nob3J0JyxcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgbWludXRlOiAnbnVtZXJpYydcbiAgfSk7XG59XG5cbi8qKlxuICogRGVib3VuY2UgZnVuY3Rpb24gdG8gbGltaXQgdGhlIHJhdGUgYXQgd2hpY2ggYSBmdW5jdGlvbiBjYW4gZmlyZVxuICogQHBhcmFtIGZ1bmMgLSBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2VcbiAqIEBwYXJhbSB3YWl0IC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXlcbiAqIEByZXR1cm5zIERlYm91bmNlZCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbiAgZnVuYzogVCxcbiAgd2FpdDogbnVtYmVyXG4pOiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4gdm9pZCB7XG4gIGxldCB0aW1lb3V0OiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xuXG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfVxuXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICB9LCB3YWl0KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaHJvdHRsZSBmdW5jdGlvbiB0byBsaW1pdCB0aGUgcmF0ZSBhdCB3aGljaCBhIGZ1bmN0aW9uIGNhbiBmaXJlXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZVxuICogQHBhcmFtIGxpbWl0IC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gbGltaXRcbiAqIEByZXR1cm5zIFRocm90dGxlZCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGU8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbiAgZnVuYzogVCxcbiAgbGltaXQ6IG51bWJlclxuKTogKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHZvaWQge1xuICBsZXQgaW5UaHJvdHRsZTogYm9vbGVhbjtcblxuICByZXR1cm4gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHtcbiAgICBpZiAoIWluVGhyb3R0bGUpIHtcbiAgICAgIGZ1bmMoLi4uYXJncyk7XG4gICAgICBpblRocm90dGxlID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gKGluVGhyb3R0bGUgPSBmYWxzZSksIGxpbWl0KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRm9ybWF0IGN1cnJlbmN5IHZhbHVlc1xuICogQHBhcmFtIGFtb3VudCAtIFRoZSBhbW91bnQgdG8gZm9ybWF0XG4gKiBAcGFyYW0gY3VycmVuY3kgLSBUaGUgY3VycmVuY3kgY29kZSAoZGVmYXVsdDogVVNEKVxuICogQHJldHVybnMgRm9ybWF0dGVkIGN1cnJlbmN5IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Q3VycmVuY3koYW1vdW50OiBudW1iZXIsIGN1cnJlbmN5OiBzdHJpbmcgPSAnVVNEJyk6IHN0cmluZyB7XG4gIHJldHVybiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VuLVVTJywge1xuICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgIGN1cnJlbmN5LFxuICB9KS5mb3JtYXQoYW1vdW50KTtcbn1cblxuLyoqXG4gKiBGb3JtYXQgbnVtYmVycyB3aXRoIGNvbW1hc1xuICogQHBhcmFtIG51bSAtIFRoZSBudW1iZXIgdG8gZm9ybWF0XG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgbnVtYmVyIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnKS5mb3JtYXQobnVtKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGNhY2hlIGtleSBmb3IgQVBJIHJlc3BvbnNlc1xuICogQHBhcmFtIGVuZHBvaW50IC0gVGhlIEFQSSBlbmRwb2ludFxuICogQHBhcmFtIHBhcmFtcyAtIFF1ZXJ5IHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zIENhY2hlIGtleSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQ2FjaGVLZXkoZW5kcG9pbnQ6IHN0cmluZywgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge30pOiBzdHJpbmcge1xuICBjb25zdCBzb3J0ZWRQYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgLnNvcnQoKVxuICAgIC5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgICByZXN1bHRba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KTtcblxuICByZXR1cm4gYCR7ZW5kcG9pbnR9OiR7SlNPTi5zdHJpbmdpZnkoc29ydGVkUGFyYW1zKX1gO1xufVxuXG4vKipcbiAqIFNsZWVwIGZ1bmN0aW9uIGZvciBhc3luYyBvcGVyYXRpb25zXG4gKiBAcGFyYW0gbXMgLSBNaWxsaXNlY29uZHMgdG8gc2xlZXBcbiAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgZW1wdHkgKG51bGwsIHVuZGVmaW5lZCwgZW1wdHkgc3RyaW5nLCBlbXB0eSBhcnJheSwgZW1wdHkgb2JqZWN0KVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyBUcnVlIGlmIGVtcHR5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUudHJpbSgpID09PSAnJztcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUubGVuZ3RoID09PSAwO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gIHJldHVybiBmYWxzZTtcbn0iXSwibmFtZXMiOlsiY24iLCJkZWJvdW5jZSIsImZvcm1hdEN1cnJlbmN5IiwiZm9ybWF0RGF0ZSIsImZvcm1hdE51bWJlciIsImdlbmVyYXRlQ2FjaGVLZXkiLCJpc0VtcHR5Iiwic2xlZXAiLCJ0aHJvdHRsZSIsImlucHV0cyIsInR3TWVyZ2UiLCJjbHN4IiwiZGF0ZVN0cmluZyIsImRhdGUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsImZ1bmMiLCJ3YWl0IiwidGltZW91dCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGltaXQiLCJpblRocm90dGxlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJJbnRsIiwiTnVtYmVyRm9ybWF0Iiwic3R5bGUiLCJmb3JtYXQiLCJudW0iLCJlbmRwb2ludCIsInBhcmFtcyIsInNvcnRlZFBhcmFtcyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwicmVkdWNlIiwicmVzdWx0Iiwia2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2YWx1ZSIsInRyaW0iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBR2dCQSxFQUFFO2VBQUZBOztJQTBCQUMsUUFBUTtlQUFSQTs7SUE0Q0FDLGNBQWM7ZUFBZEE7O0lBN0RBQyxVQUFVO2VBQVZBOztJQXlFQUMsWUFBWTtlQUFaQTs7SUFVQUMsZ0JBQWdCO2VBQWhCQTs7SUF5QkFDLE9BQU87ZUFBUEE7O0lBVEFDLEtBQUs7ZUFBTEE7O0lBM0RBQyxRQUFRO2VBQVJBOzs7c0JBcERzQjsrQkFDZDtBQUVqQixTQUFTUixHQUFHLEdBQUdTLE1BQW9CO0lBQ3hDLE9BQU9DLElBQUFBLHNCQUFPLEVBQUNDLElBQUFBLFVBQUksRUFBQ0Y7QUFDdEI7QUFPTyxTQUFTTixXQUFXUyxVQUF5QjtJQUNsRCxNQUFNQyxPQUFPLElBQUlDLEtBQUtGO0lBQ3RCLE9BQU9DLEtBQUtFLGtCQUFrQixDQUFDLFNBQVM7UUFDdENDLE1BQU07UUFDTkMsT0FBTztRQUNQQyxLQUFLO1FBQ0xDLE1BQU07UUFDTkMsUUFBUTtJQUNWO0FBQ0Y7QUFRTyxTQUFTbkIsU0FDZG9CLElBQU8sRUFDUEMsSUFBWTtJQUVaLElBQUlDLFVBQWlDO0lBRXJDLE9BQU8sQ0FBQyxHQUFHQztRQUNULElBQUlELFNBQVM7WUFDWEUsYUFBYUY7UUFDZjtRQUVBQSxVQUFVRyxXQUFXO1lBQ25CTCxRQUFRRztRQUNWLEdBQUdGO0lBQ0w7QUFDRjtBQVFPLFNBQVNkLFNBQ2RhLElBQU8sRUFDUE0sS0FBYTtJQUViLElBQUlDO0lBRUosT0FBTyxDQUFDLEdBQUdKO1FBQ1QsSUFBSSxDQUFDSSxZQUFZO1lBQ2ZQLFFBQVFHO1lBQ1JJLGFBQWE7WUFDYkYsV0FBVyxJQUFPRSxhQUFhLE9BQVFEO1FBQ3pDO0lBQ0Y7QUFDRjtBQVFPLFNBQVN6QixlQUFlMkIsTUFBYyxFQUFFQyxXQUFtQixLQUFLO0lBQ3JFLE9BQU8sSUFBSUMsS0FBS0MsWUFBWSxDQUFDLFNBQVM7UUFDcENDLE9BQU87UUFDUEg7SUFDRixHQUFHSSxNQUFNLENBQUNMO0FBQ1o7QUFPTyxTQUFTekIsYUFBYStCLEdBQVc7SUFDdEMsT0FBTyxJQUFJSixLQUFLQyxZQUFZLENBQUMsU0FBU0UsTUFBTSxDQUFDQztBQUMvQztBQVFPLFNBQVM5QixpQkFBaUIrQixRQUFnQixFQUFFQyxTQUE4QixDQUFDLENBQUM7SUFDakYsTUFBTUMsZUFBZUMsT0FBT0MsSUFBSSxDQUFDSCxRQUM5QkksSUFBSSxHQUNKQyxNQUFNLENBQUMsQ0FBQ0MsUUFBUUM7UUFDZkQsTUFBTSxDQUFDQyxJQUFJLEdBQUdQLE1BQU0sQ0FBQ08sSUFBSTtRQUN6QixPQUFPRDtJQUNULEdBQUcsQ0FBQztJQUVOLE9BQU8sQ0FBQyxFQUFFUCxTQUFTLENBQUMsRUFBRVMsS0FBS0MsU0FBUyxDQUFDUixjQUFjLENBQUM7QUFDdEQ7QUFPTyxTQUFTL0IsTUFBTXdDLEVBQVU7SUFDOUIsT0FBTyxJQUFJQyxRQUFRQyxDQUFBQSxVQUFXdkIsV0FBV3VCLFNBQVNGO0FBQ3BEO0FBT08sU0FBU3pDLFFBQVE0QyxLQUFVO0lBQ2hDLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBQzFCLElBQUksT0FBT0EsVUFBVSxVQUFVLE9BQU9BLE1BQU1DLElBQUksT0FBTztJQUN2RCxJQUFJQyxNQUFNQyxPQUFPLENBQUNILFFBQVEsT0FBT0EsTUFBTUksTUFBTSxLQUFLO0lBQ2xELElBQUksT0FBT0osVUFBVSxVQUFVLE9BQU9YLE9BQU9DLElBQUksQ0FBQ1UsT0FBT0ksTUFBTSxLQUFLO0lBQ3BFLE9BQU87QUFDVCJ9