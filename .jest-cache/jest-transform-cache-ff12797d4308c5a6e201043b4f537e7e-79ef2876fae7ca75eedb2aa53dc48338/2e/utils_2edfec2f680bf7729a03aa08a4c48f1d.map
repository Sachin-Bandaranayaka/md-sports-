{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format a date string to a more readable format\n * @param dateString - The date string to format\n * @returns Formatted date string\n */\nexport function formatDate(dateString: string | Date): string {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric'\n  });\n}\n\n/**\n * Debounce function to limit the rate at which a function can fire\n * @param func - The function to debounce\n * @param wait - The number of milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(() => {\n      func(...args);\n    }, wait);\n  };\n}\n\n/**\n * Throttle function to limit the rate at which a function can fire\n * @param func - The function to throttle\n * @param limit - The number of milliseconds to limit\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Format currency values\n * @param amount - The amount to format\n * @param currency - The currency code (default: USD)\n * @returns Formatted currency string\n */\nexport function formatCurrency(amount: number, currency: string = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Format numbers with commas\n * @param num - The number to format\n * @returns Formatted number string\n */\nexport function formatNumber(num: number): string {\n  return new Intl.NumberFormat('en-US').format(num);\n}\n\n/**\n * Generate a cache key for API responses\n * @param endpoint - The API endpoint\n * @param params - Query parameters\n * @returns Cache key string\n */\nexport function generateCacheKey(endpoint: string, params: Record<string, any> = {}): string {\n  const sortedParams = Object.keys(params)\n    .sort()\n    .reduce((result, key) => {\n      result[key] = params[key];\n      return result;\n    }, {} as Record<string, any>);\n\n  return `${endpoint}:${JSON.stringify(sortedParams)}`;\n}\n\n/**\n * Sleep function for async operations\n * @param ms - Milliseconds to sleep\n * @returns Promise that resolves after the specified time\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check if a value is empty (null, undefined, empty string, empty array, empty object)\n * @param value - The value to check\n * @returns True if empty, false otherwise\n */\nexport function isEmpty(value: any): boolean {\n  if (value == null) return true;\n  if (typeof value === 'string') return value.trim() === '';\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return false;\n}"],"names":["cn","debounce","formatCurrency","formatDate","formatNumber","generateCacheKey","isEmpty","sleep","throttle","inputs","twMerge","clsx","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","func","wait","timeout","args","clearTimeout","setTimeout","limit","inThrottle","amount","currency","Intl","NumberFormat","style","format","num","endpoint","params","sortedParams","Object","keys","sort","reduce","result","key","JSON","stringify","ms","Promise","resolve","value","trim","Array","isArray","length"],"mappings":";;;;;;;;;;;IAGgBA,EAAE;eAAFA;;IA0BAC,QAAQ;eAARA;;IA4CAC,cAAc;eAAdA;;IA7DAC,UAAU;eAAVA;;IAyEAC,YAAY;eAAZA;;IAUAC,gBAAgB;eAAhBA;;IAyBAC,OAAO;eAAPA;;IATAC,KAAK;eAALA;;IA3DAC,QAAQ;eAARA;;;sBApDsB;+BACd;AAEjB,SAASR,GAAG,GAAGS,MAAoB;IACxC,OAAOC,IAAAA,sBAAO,EAACC,IAAAA,UAAI,EAACF;AACtB;AAOO,SAASN,WAAWS,UAAyB;IAClD,MAAMC,OAAO,IAAIC,KAAKF;IACtB,OAAOC,KAAKE,kBAAkB,CAAC,SAAS;QACtCC,MAAM;QACNC,OAAO;QACPC,KAAK;QACLC,MAAM;QACNC,QAAQ;IACV;AACF;AAQO,SAASnB,SACdoB,IAAO,EACPC,IAAY;IAEZ,IAAIC,UAAiC;IAErC,OAAO,CAAC,GAAGC;QACT,IAAID,SAAS;YACXE,aAAaF;QACf;QAEAA,UAAUG,WAAW;YACnBL,QAAQG;QACV,GAAGF;IACL;AACF;AAQO,SAASd,SACda,IAAO,EACPM,KAAa;IAEb,IAAIC;IAEJ,OAAO,CAAC,GAAGJ;QACT,IAAI,CAACI,YAAY;YACfP,QAAQG;YACRI,aAAa;YACbF,WAAW,IAAOE,aAAa,OAAQD;QACzC;IACF;AACF;AAQO,SAASzB,eAAe2B,MAAc,EAAEC,WAAmB,KAAK;IACrE,OAAO,IAAIC,KAAKC,YAAY,CAAC,SAAS;QACpCC,OAAO;QACPH;IACF,GAAGI,MAAM,CAACL;AACZ;AAOO,SAASzB,aAAa+B,GAAW;IACtC,OAAO,IAAIJ,KAAKC,YAAY,CAAC,SAASE,MAAM,CAACC;AAC/C;AAQO,SAAS9B,iBAAiB+B,QAAgB,EAAEC,SAA8B,CAAC,CAAC;IACjF,MAAMC,eAAeC,OAAOC,IAAI,CAACH,QAC9BI,IAAI,GACJC,MAAM,CAAC,CAACC,QAAQC;QACfD,MAAM,CAACC,IAAI,GAAGP,MAAM,CAACO,IAAI;QACzB,OAAOD;IACT,GAAG,CAAC;IAEN,OAAO,CAAC,EAAEP,SAAS,CAAC,EAAES,KAAKC,SAAS,CAACR,cAAc,CAAC;AACtD;AAOO,SAAS/B,MAAMwC,EAAU;IAC9B,OAAO,IAAIC,QAAQC,CAAAA,UAAWvB,WAAWuB,SAASF;AACpD;AAOO,SAASzC,QAAQ4C,KAAU;IAChC,IAAIA,SAAS,MAAM,OAAO;IAC1B,IAAI,OAAOA,UAAU,UAAU,OAAOA,MAAMC,IAAI,OAAO;IACvD,IAAIC,MAAMC,OAAO,CAACH,QAAQ,OAAOA,MAAMI,MAAM,KAAK;IAClD,IAAI,OAAOJ,UAAU,UAAU,OAAOX,OAAOC,IAAI,CAACU,OAAOI,MAAM,KAAK;IACpE,OAAO;AACT"}