{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/__tests__/api/audit-trail.test.ts"],"sourcesContent":["// Mock dependencies before any imports\njest.mock('@/lib/auth', () => ({\n  verifyToken: jest.fn(),\n}));\njest.mock('@/services/auditService', () => ({\n  auditService: {\n    getRecycleBinItems: jest.fn(),\n    getAuditEntries: jest.fn(),\n    getEntityHistory: jest.fn(),\n  },\n}));\n\nimport { NextRequest } from 'next/server';\nimport { GET } from '@/app/api/audit-trail/route';\nimport { verifyToken } from '@/lib/auth';\nimport { auditService } from '@/services/auditService';\n\nconst mockVerifyToken = verifyToken as jest.Mock;\nconst mockAuditService = auditService as {\n  getRecycleBinItems: jest.Mock;\n  getAuditEntries: jest.Mock;\n  getEntityHistory: jest.Mock;\n};\n\ndescribe('/api/audit-trail', () => {\n  const mockToken = 'valid-jwt-token';\n  const mockDecodedToken = { sub: 'user123', email: 'test@example.com' };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockVerifyToken.mockResolvedValue(mockDecodedToken);\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Authentication', () => {\n    it('should return 401 when no authorization header is provided', async () => {\n      const request = new NextRequest('http://localhost:3000/api/audit-trail');\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('No token provided');\n    });\n\n    it('should return 401 when token verification fails', async () => {\n      mockVerifyToken.mockResolvedValue(null);\n      \n      const request = new NextRequest('http://localhost:3000/api/audit-trail', {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid token');\n    });\n  });\n\n  describe('Recycle Bin Items (type=deleted)', () => {\n    const mockRecycleBinData = {\n      items: [\n        {\n          id: 1,\n          entity: 'product',\n          entityId: 123,\n          originalData: { name: 'Test Product' },\n          deletedAt: new Date('2024-01-15T10:00:00Z'),\n          deletedBy: 'user1',\n          canRecover: true,\n        },\n      ],\n      total: 1,\n    };\n\n    beforeEach(() => {\n      mockAuditService.getRecycleBinItems.mockResolvedValue(mockRecycleBinData);\n    });\n\n    it('should fetch recycle bin items without filters', async () => {\n      const url = 'http://localhost:3000/api/audit-trail?type=deleted&limit=20&offset=0';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockRecycleBinData);\n      expect(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(\n        undefined,\n        20,\n        0,\n        null,\n        null\n      );\n    });\n\n    it('should fetch recycle bin items with entity filter', async () => {\n      const url = 'http://localhost:3000/api/audit-trail?type=deleted&entity=product&limit=20&offset=0';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockRecycleBinData);\n      expect(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(\n        'product',\n        20,\n        0,\n        null,\n        null\n      );\n    });\n\n    it('should fetch recycle bin items with date filters', async () => {\n      const dateFrom = '2024-01-15T00:00:00Z';\n      const dateTo = '2024-01-15T23:59:59Z';\n      const url = `http://localhost:3000/api/audit-trail?type=deleted&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=20&offset=0`;\n      \n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockRecycleBinData);\n      expect(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(\n        undefined,\n        20,\n        0,\n        dateFrom,\n        dateTo\n      );\n    });\n\n    it('should fetch recycle bin items with entity and date filters combined', async () => {\n      const dateFrom = '2024-01-15T00:00:00Z';\n      const dateTo = '2024-01-16T23:59:59Z';\n      const url = `http://localhost:3000/api/audit-trail?type=deleted&entity=customer&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=10&offset=5`;\n      \n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockRecycleBinData);\n      expect(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(\n        'customer',\n        10,\n        5,\n        dateFrom,\n        dateTo\n      );\n    });\n  });\n\n  describe('Audit Entries (type=all)', () => {\n    const mockAuditData = {\n      items: [\n        {\n          id: 1,\n          entity: 'product',\n          entityId: 123,\n          action: 'CREATE',\n          userId: 'user1',\n          createdAt: new Date('2024-01-15T10:00:00Z'),\n          details: { name: 'Test Product' },\n        },\n      ],\n      total: 1,\n    };\n\n    beforeEach(() => {\n      mockAuditService.getAuditEntries.mockResolvedValue(mockAuditData);\n    });\n\n    it('should fetch audit entries without filters', async () => {\n      const url = 'http://localhost:3000/api/audit-trail?type=all&limit=20&offset=0';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockAuditData);\n      expect(mockAuditService.getAuditEntries).toHaveBeenCalledWith(\n        undefined,\n        20,\n        0,\n        null,\n        null\n      );\n    });\n\n    it('should fetch audit entries with entity filter', async () => {\n      const url = 'http://localhost:3000/api/audit-trail?type=all&entity=invoice&limit=20&offset=0';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockAuditData);\n      expect(mockAuditService.getAuditEntries).toHaveBeenCalledWith(\n        'invoice',\n        20,\n        0,\n        null,\n        null\n      );\n    });\n\n    it('should fetch audit entries with date filters', async () => {\n      const dateFrom = '2024-01-15T00:00:00Z';\n      const dateTo = '2024-01-15T23:59:59Z';\n      const url = `http://localhost:3000/api/audit-trail?type=all&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=20&offset=0`;\n      \n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockAuditData);\n      expect(mockAuditService.getAuditEntries).toHaveBeenCalledWith(\n        undefined,\n        20,\n        0,\n        dateFrom,\n        dateTo\n      );\n    });\n  });\n\n  describe('Entity History (type=history)', () => {\n    const mockHistoryData = [\n      {\n        id: 1,\n        entity: 'product',\n        entityId: 123,\n        action: 'CREATE',\n        userId: 'user1',\n        createdAt: new Date('2024-01-15T10:00:00Z'),\n        details: { name: 'Test Product' },\n      },\n      {\n        id: 2,\n        entity: 'product',\n        entityId: 123,\n        action: 'UPDATE',\n        userId: 'user2',\n        createdAt: new Date('2024-01-16T11:00:00Z'),\n        details: { name: 'Updated Product' },\n      },\n    ];\n\n    beforeEach(() => {\n      mockAuditService.getEntityHistory.mockResolvedValue(mockHistoryData);\n    });\n\n    it('should fetch entity history without date filters', async () => {\n      const url = 'http://localhost:3000/api/audit-trail?type=history&entity=product&entityId=123&limit=20';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual({ items: mockHistoryData, total: mockHistoryData.length });\n      expect(mockAuditService.getEntityHistory).toHaveBeenCalledWith(\n        'product',\n        123,\n        20,\n        null,\n        null\n      );\n    });\n\n    it('should fetch entity history with date filters', async () => {\n      const dateFrom = '2024-01-15T00:00:00Z';\n      const dateTo = '2024-01-16T23:59:59Z';\n      const url = `http://localhost:3000/api/audit-trail?type=history&entity=product&entityId=123&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=10`;\n      \n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual({ items: mockHistoryData, total: mockHistoryData.length });\n      expect(mockAuditService.getEntityHistory).toHaveBeenCalledWith(\n        'product',\n        123,\n        10,\n        dateFrom,\n        dateTo\n      );\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle service errors gracefully', async () => {\n      mockAuditService.getRecycleBinItems.mockRejectedValue(new Error('Database error'));\n      \n      const url = 'http://localhost:3000/api/audit-trail?type=deleted';\n      const request = new NextRequest(url, {\n        headers: { Authorization: `Bearer ${mockToken}` },\n      });\n      \n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('Failed to fetch audit trail');\n    });\n  });\n});"],"names":["jest","mock","verifyToken","fn","auditService","getRecycleBinItems","getAuditEntries","getEntityHistory","mockVerifyToken","mockAuditService","describe","mockToken","mockDecodedToken","sub","email","beforeEach","clearAllMocks","mockResolvedValue","afterEach","resetAllMocks","it","request","NextRequest","response","GET","data","json","expect","status","toBe","error","headers","Authorization","mockRecycleBinData","items","id","entity","entityId","originalData","name","deletedAt","Date","deletedBy","canRecover","total","url","toEqual","toHaveBeenCalledWith","undefined","dateFrom","dateTo","encodeURIComponent","mockAuditData","action","userId","createdAt","details","mockHistoryData","length","mockRejectedValue","Error"],"mappings":"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"}