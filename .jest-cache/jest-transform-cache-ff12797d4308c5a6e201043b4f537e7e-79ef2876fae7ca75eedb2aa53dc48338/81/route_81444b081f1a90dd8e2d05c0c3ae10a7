fb97d217c6d07ac246e80a8b5a15de5b
"use strict";

/* istanbul ignore next */
function cov_puwdst8ni() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/receipts/route.ts";
  var hash = "afa09734569e10e4d52fc597ee3a4f6f8de74711";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/receipts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 46
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "10": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 24,
          column: 53
        }
      },
      "11": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "12": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 61
        }
      },
      "13": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "14": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "15": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "16": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "17": {
        start: {
          line: 77,
          column: 30
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "18": {
        start: {
          line: 80,
          column: 27
        },
        end: {
          line: 80,
          column: 59
        }
      },
      "19": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "20": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "21": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "22": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "23": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 48
        }
      },
      "24": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "25": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "26": {
        start: {
          line: 111,
          column: 32
        },
        end: {
          line: 118,
          column: 10
        }
      },
      "27": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "28": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "29": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "30": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "31": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 134,
          column: 85
        }
      },
      "32": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "33": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "34": {
        start: {
          line: 162,
          column: 34
        },
        end: {
          line: 172,
          column: 14
        }
      },
      "35": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 180,
          column: 14
        }
      },
      "36": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 181,
          column: 60
        }
      },
      "37": {
        start: {
          line: 182,
          column: 33
        },
        end: {
          line: 182,
          column: 52
        }
      },
      "38": {
        start: {
          line: 184,
          column: 28
        },
        end: {
          line: 184,
          column: 37
        }
      },
      "39": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "40": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 35
        }
      },
      "41": {
        start: {
          line: 187,
          column: 19
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "42": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 38
        }
      },
      "43": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "44": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "45": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "46": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "47": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 74
        }
      },
      "48": {
        start: {
          line: 213,
          column: 38
        },
        end: {
          line: 213,
          column: 81
        }
      },
      "49": {
        start: {
          line: 214,
          column: 34
        },
        end: {
          line: 214,
          column: 36
        }
      },
      "50": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 215,
          column: 41
        }
      },
      "51": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 221,
          column: 17
        }
      },
      "52": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 49
        }
      },
      "53": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 49
        }
      },
      "54": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "55": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "56": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 239,
          column: 23
        }
      },
      "57": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "58": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 264,
          column: 15
        }
      },
      "59": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 27
        }
      },
      "60": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "61": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 56
        }
      },
      "62": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 18
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 99,
            column: 19
          }
        },
        loc: {
          start: {
            line: 99,
            column: 29
          },
          end: {
            line: 278,
            column: 1
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 57
          },
          end: {
            line: 136,
            column: 58
          }
        },
        loc: {
          start: {
            line: 136,
            column: 69
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 136
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 53
          }
        }, {
          start: {
            line: 25,
            column: 57
          },
          end: {
            line: 25,
            column: 58
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 55
          }
        }, {
          start: {
            line: 26,
            column: 59
          },
          end: {
            line: 26,
            column: 61
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 49
          }
        }, {
          start: {
            line: 27,
            column: 53
          },
          end: {
            line: 27,
            column: 55
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 22
          },
          end: {
            line: 57,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 14
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "6": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "7": {
        loc: {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 142,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 59
          },
          end: {
            line: 142,
            column: 92
          }
        }, {
          start: {
            line: 142,
            column: 95
          },
          end: {
            line: 142,
            column: 105
          }
        }],
        line: 142
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 30
          },
          end: {
            line: 143,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 30
          },
          end: {
            line: 143,
            column: 50
          }
        }, {
          start: {
            line: 143,
            column: 54
          },
          end: {
            line: 143,
            column: 58
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 144,
            column: 35
          },
          end: {
            line: 144,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 35
          },
          end: {
            line: 144,
            column: 60
          }
        }, {
          start: {
            line: 144,
            column: 64
          },
          end: {
            line: 144,
            column: 68
          }
        }],
        line: 144
      },
      "10": {
        loc: {
          start: {
            line: 145,
            column: 34
          },
          end: {
            line: 145,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 34
          },
          end: {
            line: 145,
            column: 58
          }
        }, {
          start: {
            line: 145,
            column: 62
          },
          end: {
            line: 145,
            column: 66
          }
        }],
        line: 145
      },
      "11": {
        loc: {
          start: {
            line: 146,
            column: 35
          },
          end: {
            line: 146,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 35
          },
          end: {
            line: 146,
            column: 60
          }
        }, {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 146,
            column: 68
          }
        }],
        line: 146
      },
      "12": {
        loc: {
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 147,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 147,
            column: 44
          }
        }, {
          start: {
            line: 147,
            column: 48
          },
          end: {
            line: 147,
            column: 52
          }
        }],
        line: 147
      },
      "13": {
        loc: {
          start: {
            line: 148,
            column: 33
          },
          end: {
            line: 148,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 33
          },
          end: {
            line: 148,
            column: 56
          }
        }, {
          start: {
            line: 148,
            column: 60
          },
          end: {
            line: 148,
            column: 64
          }
        }],
        line: 148
      },
      "14": {
        loc: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 55
          }
        }, {
          start: {
            line: 181,
            column: 59
          },
          end: {
            line: 181,
            column: 60
          }
        }],
        line: 181
      },
      "15": {
        loc: {
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 182,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 182,
            column: 47
          }
        }, {
          start: {
            line: 182,
            column: 51
          },
          end: {
            line: 182,
            column: 52
          }
        }],
        line: 182
      },
      "16": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 189,
            column: 13
          }
        }],
        line: 185
      },
      "17": {
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: 211,
            column: 19
          },
          end: {
            line: 241,
            column: 13
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: 218,
            column: 23
          },
          end: {
            line: 221,
            column: 17
          }
        }],
        line: 216
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 245,
            column: 26
          },
          end: {
            line: 245,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 52
          },
          end: {
            line: 245,
            column: 85
          }
        }, {
          start: {
            line: 245,
            column: 88
          },
          end: {
            line: 245,
            column: 98
          }
        }],
        line: 245
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/receipts/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { Prisma } from '@prisma/client';\n\n// Get all receipts with pagination and optional filtering\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const page = Number(searchParams.get('page')) || 1;\n        const limit = Number(searchParams.get('limit')) || 10;\n        const search = searchParams.get('search') || '';\n\n        const skip = (page - 1) * limit;\n\n        // Build the where condition for search\n        const where: Prisma.ReceiptWhereInput = search ? {\n            OR: [\n                { receiptNumber: { contains: search, mode: Prisma.QueryMode.insensitive } },\n                { payment: { referenceNumber: { contains: search, mode: Prisma.QueryMode.insensitive } } },\n                { payment: { customer: { name: { contains: search, mode: Prisma.QueryMode.insensitive } } } }\n            ]\n        } : {};\n\n        // Get receipts with pagination\n        const receipts = await prisma.receipt.findMany({\n            where,\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            },\n            orderBy: { createdAt: 'desc' },\n            skip,\n            take: limit\n        });\n\n        // Get total count for pagination\n        const totalReceipts = await prisma.receipt.count({ where });\n        const totalPages = Math.ceil(totalReceipts / limit);\n\n        return NextResponse.json({\n            receipts,\n            pagination: {\n                totalReceipts,\n                totalPages,\n                currentPage: page,\n                perPage: limit\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching receipts:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch receipts' },\n            { status: 500 }\n        );\n    }\n}\n\n// Create a new receipt\nexport async function POST(request: Request) {\n    try {\n        const receiptData = await request.json();\n\n        // Validate receipt data\n        if (!receiptData.paymentId) {\n            return NextResponse.json(\n                { error: 'Payment ID is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if payment exists and doesn't already have a receipt\n        const existingPayment = await prisma.payment.findUnique({\n            where: { id: receiptData.paymentId },\n            include: { receipt: true }\n        });\n\n        if (!existingPayment) {\n            return NextResponse.json(\n                { error: 'Payment not found' },\n                { status: 404 }\n            );\n        }\n\n        if (existingPayment.receipt) {\n            return NextResponse.json(\n                { error: 'A receipt already exists for this payment' },\n                { status: 409 }\n            );\n        }\n\n        // Generate a unique receipt number\n        const receiptNumber = `REC-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n        // Use a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // Create receipt\n            const receipt = await tx.receipt.create({\n                data: {\n                    paymentId: receiptData.paymentId,\n                    receiptNumber,\n                    receiptDate: receiptData.receiptDate ? new Date(receiptData.receiptDate) : new Date(),\n                    bankName: receiptData.bankName || null,\n                    accountNumber: receiptData.accountNumber || null,\n                    chequeNumber: receiptData.chequeNumber || null,\n                    transactionId: receiptData.transactionId || null,\n                    notes: receiptData.notes || null,\n                    confirmedBy: receiptData.confirmedBy || null\n                },\n                include: {\n                    payment: {\n                        include: {\n                            customer: true,\n                            invoice: true\n                        }\n                    },\n                    confirmedByUser: true\n                }\n            });\n\n            // Calculate total payments with receipts for the invoice to determine correct status\n            // Only count payments that have receipts (confirmed payments)\n            const totalPayments = await tx.payment.aggregate({\n                where: { \n                    invoiceId: existingPayment.invoiceId,\n                    receipt: {\n                        isNot: null\n                    }\n                },\n                _sum: { amount: true }\n            });\n\n            const invoice = await tx.invoice.findUnique({\n                where: { id: existingPayment.invoiceId },\n                select: { total: true }\n            });\n\n            const totalPaid = totalPayments._sum.amount || 0;\n            const invoiceTotal = invoice?.total || 0;\n\n            // Determine the correct status based on payment amount\n            let newStatus = 'pending';\n            if (totalPaid >= invoiceTotal) {\n                newStatus = 'paid';\n            } else if (totalPaid > 0) {\n                newStatus = 'partial';\n            }\n\n            // Update invoice status based on actual payment amount\n            await tx.invoice.update({\n                where: { id: existingPayment.invoiceId },\n                data: { status: newStatus }\n            });\n\n            // Use the selected account from the payment, or fallback to payment method logic\n            let account;\n            \n            if (existingPayment.accountId) {\n                // Use the account selected during payment creation\n                account = await tx.account.findUnique({\n                    where: { id: existingPayment.accountId }\n                });\n                \n                if (!account) {\n                    throw new Error('Selected payment account not found');\n                }\n            } else {\n                // Fallback to old logic for payments without selected accounts\n                const paymentMethod = existingPayment.paymentMethod.toLowerCase();\n                let accountName = '';\n                let accountType = 'asset';\n\n                if (paymentMethod.includes('cash')) {\n                    accountName = 'Cash in Hand';\n                } else {\n                    // For all non-cash payments, default to Cash in Bank\n                    accountName = 'Cash in Bank';\n                }\n\n                // Find or create the appropriate account\n                account = await tx.account.findFirst({\n                    where: {\n                        name: accountName,\n                        type: accountType\n                    }\n                });\n\n                if (!account) {\n                    // Create the account if it doesn't exist\n                    account = await tx.account.create({\n                        data: {\n                            name: accountName,\n                            type: accountType,\n                            balance: 0,\n                            description: `Auto-created account for ${paymentMethod} payments`,\n                            isActive: true\n                        }\n                    });\n                }\n            }\n\n            // Create accounting transaction for the income\n            await tx.transaction.create({\n                data: {\n                    date: receiptData.receiptDate ? new Date(receiptData.receiptDate) : new Date(),\n                    description: `Payment received from ${receipt.payment.customer.name} - Invoice ${receipt.payment.invoice.invoiceNumber}`,\n                    accountId: account.id,\n                    type: 'income',\n                    amount: existingPayment.amount,\n                    reference: receiptNumber,\n                    category: 'Sales Revenue'\n                }\n            });\n\n            // Update account balance\n            await tx.account.update({\n                where: { id: account.id },\n                data: {\n                    balance: {\n                        increment: existingPayment.amount\n                    }\n                }\n            });\n\n            return receipt;\n        });\n\n        return NextResponse.json(result, { status: 201 });\n    } catch (error) {\n        console.error('Error creating receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to create receipt' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "searchParams", "URL", "url", "page", "Number", "get", "limit", "search", "skip", "where", "OR", "receiptNumber", "contains", "mode", "Prisma", "QueryMode", "insensitive", "payment", "referenceNumber", "customer", "name", "receipts", "prisma", "receipt", "findMany", "include", "invoice", "confirmedByUser", "orderBy", "createdAt", "take", "totalReceipts", "count", "totalPages", "Math", "ceil", "NextResponse", "json", "pagination", "currentPage", "perPage", "error", "console", "status", "receiptData", "paymentId", "existingPayment", "findUnique", "id", "Date", "now", "floor", "random", "result", "$transaction", "tx", "create", "data", "receiptDate", "bankName", "accountNumber", "chequeNumber", "transactionId", "notes", "confirmedBy", "totalPayments", "aggregate", "invoiceId", "isNot", "_sum", "amount", "select", "total", "totalPaid", "invoiceTotal", "newStatus", "update", "account", "accountId", "Error", "paymentMethod", "toLowerCase", "accountName", "accountType", "includes", "findFirst", "type", "balance", "description", "isActive", "transaction", "date", "invoiceNumber", "reference", "category", "increment"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "afa09734569e10e4d52fc597ee3a4f6f8de74711"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_puwdst8ni = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_puwdst8ni();
cov_puwdst8ni().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_puwdst8ni().f[0]++;
  cov_puwdst8ni().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_puwdst8ni().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_puwdst8ni().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_puwdst8ni().f[1]++;
    cov_puwdst8ni().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_puwdst8ni().f[2]++;
    cov_puwdst8ni().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_puwdst8ni().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_puwdst8ni().s[7]++, require("../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_puwdst8ni().s[8]++, require("@prisma/client"));
async function GET(request) {
  /* istanbul ignore next */
  cov_puwdst8ni().f[3]++;
  cov_puwdst8ni().s[9]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[10]++, new URL(request.url));
    const page =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[11]++,
    /* istanbul ignore next */
    (cov_puwdst8ni().b[0][0]++, Number(searchParams.get("page"))) ||
    /* istanbul ignore next */
    (cov_puwdst8ni().b[0][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[12]++,
    /* istanbul ignore next */
    (cov_puwdst8ni().b[1][0]++, Number(searchParams.get("limit"))) ||
    /* istanbul ignore next */
    (cov_puwdst8ni().b[1][1]++, 10));
    const search =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[13]++,
    /* istanbul ignore next */
    (cov_puwdst8ni().b[2][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_puwdst8ni().b[2][1]++, ""));
    const skip =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[14]++, (page - 1) * limit);
    // Build the where condition for search
    const where =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[15]++, search ?
    /* istanbul ignore next */
    (cov_puwdst8ni().b[3][0]++, {
      OR: [{
        receiptNumber: {
          contains: search,
          mode: _client.Prisma.QueryMode.insensitive
        }
      }, {
        payment: {
          referenceNumber: {
            contains: search,
            mode: _client.Prisma.QueryMode.insensitive
          }
        }
      }, {
        payment: {
          customer: {
            name: {
              contains: search,
              mode: _client.Prisma.QueryMode.insensitive
            }
          }
        }
      }]
    }) :
    /* istanbul ignore next */
    (cov_puwdst8ni().b[3][1]++, {}));
    // Get receipts with pagination
    const receipts =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[16]++, await _prisma.prisma.receipt.findMany({
      where,
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true
          }
        },
        confirmedByUser: true
      },
      orderBy: {
        createdAt: "desc"
      },
      skip,
      take: limit
    }));
    // Get total count for pagination
    const totalReceipts =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[17]++, await _prisma.prisma.receipt.count({
      where
    }));
    const totalPages =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[18]++, Math.ceil(totalReceipts / limit));
    /* istanbul ignore next */
    cov_puwdst8ni().s[19]++;
    return _server.NextResponse.json({
      receipts,
      pagination: {
        totalReceipts,
        totalPages,
        currentPage: page,
        perPage: limit
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_puwdst8ni().s[20]++;
    console.error("Error fetching receipts:", error);
    /* istanbul ignore next */
    cov_puwdst8ni().s[21]++;
    return _server.NextResponse.json({
      error: "Failed to fetch receipts"
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_puwdst8ni().f[4]++;
  cov_puwdst8ni().s[22]++;
  try {
    const receiptData =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[23]++, await request.json());
    // Validate receipt data
    /* istanbul ignore next */
    cov_puwdst8ni().s[24]++;
    if (!receiptData.paymentId) {
      /* istanbul ignore next */
      cov_puwdst8ni().b[4][0]++;
      cov_puwdst8ni().s[25]++;
      return _server.NextResponse.json({
        error: "Payment ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_puwdst8ni().b[4][1]++;
    }
    // Check if payment exists and doesn't already have a receipt
    const existingPayment =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[26]++, await _prisma.prisma.payment.findUnique({
      where: {
        id: receiptData.paymentId
      },
      include: {
        receipt: true
      }
    }));
    /* istanbul ignore next */
    cov_puwdst8ni().s[27]++;
    if (!existingPayment) {
      /* istanbul ignore next */
      cov_puwdst8ni().b[5][0]++;
      cov_puwdst8ni().s[28]++;
      return _server.NextResponse.json({
        error: "Payment not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_puwdst8ni().b[5][1]++;
    }
    cov_puwdst8ni().s[29]++;
    if (existingPayment.receipt) {
      /* istanbul ignore next */
      cov_puwdst8ni().b[6][0]++;
      cov_puwdst8ni().s[30]++;
      return _server.NextResponse.json({
        error: "A receipt already exists for this payment"
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_puwdst8ni().b[6][1]++;
    }
    // Generate a unique receipt number
    const receiptNumber =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[31]++, `REC-${Date.now()}-${Math.floor(Math.random() * 1000)}`);
    // Use a transaction to ensure data consistency
    const result =
    /* istanbul ignore next */
    (cov_puwdst8ni().s[32]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_puwdst8ni().f[5]++;
      // Create receipt
      const receipt =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[33]++, await tx.receipt.create({
        data: {
          paymentId: receiptData.paymentId,
          receiptNumber,
          receiptDate: receiptData.receiptDate ?
          /* istanbul ignore next */
          (cov_puwdst8ni().b[7][0]++, new Date(receiptData.receiptDate)) :
          /* istanbul ignore next */
          (cov_puwdst8ni().b[7][1]++, new Date()),
          bankName:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[8][0]++, receiptData.bankName) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[8][1]++, null),
          accountNumber:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[9][0]++, receiptData.accountNumber) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[9][1]++, null),
          chequeNumber:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[10][0]++, receiptData.chequeNumber) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[10][1]++, null),
          transactionId:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[11][0]++, receiptData.transactionId) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[11][1]++, null),
          notes:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[12][0]++, receiptData.notes) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[12][1]++, null),
          confirmedBy:
          /* istanbul ignore next */
          (cov_puwdst8ni().b[13][0]++, receiptData.confirmedBy) ||
          /* istanbul ignore next */
          (cov_puwdst8ni().b[13][1]++, null)
        },
        include: {
          payment: {
            include: {
              customer: true,
              invoice: true
            }
          },
          confirmedByUser: true
        }
      }));
      // Calculate total payments with receipts for the invoice to determine correct status
      // Only count payments that have receipts (confirmed payments)
      const totalPayments =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[34]++, await tx.payment.aggregate({
        where: {
          invoiceId: existingPayment.invoiceId,
          receipt: {
            isNot: null
          }
        },
        _sum: {
          amount: true
        }
      }));
      const invoice =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[35]++, await tx.invoice.findUnique({
        where: {
          id: existingPayment.invoiceId
        },
        select: {
          total: true
        }
      }));
      const totalPaid =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[36]++,
      /* istanbul ignore next */
      (cov_puwdst8ni().b[14][0]++, totalPayments._sum.amount) ||
      /* istanbul ignore next */
      (cov_puwdst8ni().b[14][1]++, 0));
      const invoiceTotal =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[37]++,
      /* istanbul ignore next */
      (cov_puwdst8ni().b[15][0]++, invoice?.total) ||
      /* istanbul ignore next */
      (cov_puwdst8ni().b[15][1]++, 0));
      // Determine the correct status based on payment amount
      let newStatus =
      /* istanbul ignore next */
      (cov_puwdst8ni().s[38]++, "pending");
      /* istanbul ignore next */
      cov_puwdst8ni().s[39]++;
      if (totalPaid >= invoiceTotal) {
        /* istanbul ignore next */
        cov_puwdst8ni().b[16][0]++;
        cov_puwdst8ni().s[40]++;
        newStatus = "paid";
      } else {
        /* istanbul ignore next */
        cov_puwdst8ni().b[16][1]++;
        cov_puwdst8ni().s[41]++;
        if (totalPaid > 0) {
          /* istanbul ignore next */
          cov_puwdst8ni().b[17][0]++;
          cov_puwdst8ni().s[42]++;
          newStatus = "partial";
        } else
        /* istanbul ignore next */
        {
          cov_puwdst8ni().b[17][1]++;
        }
      }
      // Update invoice status based on actual payment amount
      /* istanbul ignore next */
      cov_puwdst8ni().s[43]++;
      await tx.invoice.update({
        where: {
          id: existingPayment.invoiceId
        },
        data: {
          status: newStatus
        }
      });
      // Use the selected account from the payment, or fallback to payment method logic
      let account;
      /* istanbul ignore next */
      cov_puwdst8ni().s[44]++;
      if (existingPayment.accountId) {
        /* istanbul ignore next */
        cov_puwdst8ni().b[18][0]++;
        cov_puwdst8ni().s[45]++;
        // Use the account selected during payment creation
        account = await tx.account.findUnique({
          where: {
            id: existingPayment.accountId
          }
        });
        /* istanbul ignore next */
        cov_puwdst8ni().s[46]++;
        if (!account) {
          /* istanbul ignore next */
          cov_puwdst8ni().b[19][0]++;
          cov_puwdst8ni().s[47]++;
          throw new Error("Selected payment account not found");
        } else
        /* istanbul ignore next */
        {
          cov_puwdst8ni().b[19][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_puwdst8ni().b[18][1]++;
        // Fallback to old logic for payments without selected accounts
        const paymentMethod =
        /* istanbul ignore next */
        (cov_puwdst8ni().s[48]++, existingPayment.paymentMethod.toLowerCase());
        let accountName =
        /* istanbul ignore next */
        (cov_puwdst8ni().s[49]++, "");
        let accountType =
        /* istanbul ignore next */
        (cov_puwdst8ni().s[50]++, "asset");
        /* istanbul ignore next */
        cov_puwdst8ni().s[51]++;
        if (paymentMethod.includes("cash")) {
          /* istanbul ignore next */
          cov_puwdst8ni().b[20][0]++;
          cov_puwdst8ni().s[52]++;
          accountName = "Cash in Hand";
        } else {
          /* istanbul ignore next */
          cov_puwdst8ni().b[20][1]++;
          cov_puwdst8ni().s[53]++;
          // For all non-cash payments, default to Cash in Bank
          accountName = "Cash in Bank";
        }
        // Find or create the appropriate account
        /* istanbul ignore next */
        cov_puwdst8ni().s[54]++;
        account = await tx.account.findFirst({
          where: {
            name: accountName,
            type: accountType
          }
        });
        /* istanbul ignore next */
        cov_puwdst8ni().s[55]++;
        if (!account) {
          /* istanbul ignore next */
          cov_puwdst8ni().b[21][0]++;
          cov_puwdst8ni().s[56]++;
          // Create the account if it doesn't exist
          account = await tx.account.create({
            data: {
              name: accountName,
              type: accountType,
              balance: 0,
              description: `Auto-created account for ${paymentMethod} payments`,
              isActive: true
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_puwdst8ni().b[21][1]++;
        }
      }
      // Create accounting transaction for the income
      /* istanbul ignore next */
      cov_puwdst8ni().s[57]++;
      await tx.transaction.create({
        data: {
          date: receiptData.receiptDate ?
          /* istanbul ignore next */
          (cov_puwdst8ni().b[22][0]++, new Date(receiptData.receiptDate)) :
          /* istanbul ignore next */
          (cov_puwdst8ni().b[22][1]++, new Date()),
          description: `Payment received from ${receipt.payment.customer.name} - Invoice ${receipt.payment.invoice.invoiceNumber}`,
          accountId: account.id,
          type: "income",
          amount: existingPayment.amount,
          reference: receiptNumber,
          category: "Sales Revenue"
        }
      });
      // Update account balance
      /* istanbul ignore next */
      cov_puwdst8ni().s[58]++;
      await tx.account.update({
        where: {
          id: account.id
        },
        data: {
          balance: {
            increment: existingPayment.amount
          }
        }
      });
      /* istanbul ignore next */
      cov_puwdst8ni().s[59]++;
      return receipt;
    }));
    /* istanbul ignore next */
    cov_puwdst8ni().s[60]++;
    return _server.NextResponse.json(result, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_puwdst8ni().s[61]++;
    console.error("Error creating receipt:", error);
    /* istanbul ignore next */
    cov_puwdst8ni().s[62]++;
    return _server.NextResponse.json({
      error: "Failed to create receipt"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,