1c56158c0413c06113a6c075a372c15f
// Load environment variables
"use strict";

/* istanbul ignore next */
function cov_11yafqbjp3() {
  var path = "/Users/sachin/Documents/md-sports-/src/scripts/test-neon.js";
  var hash = "0491fe956ff07d87c615d57cae1c96e251b6c159";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/scripts/test-neon.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 30
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "3": {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "4": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "5": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 64
        }
      },
      "7": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 73
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 51
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 76
        }
      },
      "10": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 45
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "14": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "15": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 51
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 67
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "19": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "testConnection",
        decl: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 17,
            column: 29
          }
        },
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 39
          }
        },
        loc: {
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 39,
            column: 13
          }
        },
        line: 37
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 40,
            column: 9
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/scripts/test-neon.js"],
      sourcesContent: ["// Load environment variables\nrequire('dotenv').config({ path: '.env.local' });\n\n// Simple script to check if pg can connect to Neon\nconst { Pool } = require('pg');\n\nconsole.log('Testing Neon database connection...');\n\n// Create a connection pool\nconst pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n        rejectUnauthorized: false\n    }\n});\n\n// Test the connection\nasync function testConnection() {\n    try {\n        // Connect to the database\n        const client = await pool.connect();\n        console.log('Connected to Neon database successfully!');\n        \n        // Execute a simple query\n        const result = await client.query('SELECT NOW() as current_time');\n        console.log('Query executed successfully');\n        console.log('Current time from Neon:', result.rows[0].current_time);\n        \n        // List tables in the database\n        const tablesResult = await client.query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public'\n            ORDER BY table_name\n        `);\n        \n        console.log('\\nTables in database:');\n        if (tablesResult.rows.length === 0) {\n            console.log('No tables found');\n        } else {\n            tablesResult.rows.forEach(row => {\n                console.log(`- ${row.table_name}`);\n            });\n        }\n        \n        // Release the client\n        client.release();\n    } catch (error) {\n        console.error('Error connecting to Neon database:', error);\n    } finally {\n        // End the pool\n        await pool.end();\n    }\n}\n\n// Run the test\ntestConnection().catch(console.error); "],
      names: ["require", "config", "path", "Pool", "console", "log", "pool", "connectionString", "process", "env", "DATABASE_URL", "ssl", "rejectUnauthorized", "testConnection", "client", "connect", "result", "query", "rows", "current_time", "tablesResult", "length", "forEach", "row", "table_name", "release", "error", "end", "catch"],
      mappings: "AAAA,6BAA6B;;AAC7BA,QAAQ,UAAUC,MAAM,CAAC;IAAEC,MAAM;AAAa;AAE9C,mDAAmD;AACnD,MAAM,EAAEC,IAAI,EAAE,GAAGH,QAAQ;AAEzBI,QAAQC,GAAG,CAAC;AAEZ,2BAA2B;AAC3B,MAAMC,OAAO,IAAIH,KAAK;IAClBI,kBAAkBC,QAAQC,GAAG,CAACC,YAAY;IAC1CC,KAAK;QACDC,oBAAoB;IACxB;AACJ;AAEA,sBAAsB;AACtB,eAAeC;IACX,IAAI;QACA,0BAA0B;QAC1B,MAAMC,SAAS,MAAMR,KAAKS,OAAO;QACjCX,QAAQC,GAAG,CAAC;QAEZ,yBAAyB;QACzB,MAAMW,SAAS,MAAMF,OAAOG,KAAK,CAAC;QAClCb,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,2BAA2BW,OAAOE,IAAI,CAAC,EAAE,CAACC,YAAY;QAElE,8BAA8B;QAC9B,MAAMC,eAAe,MAAMN,OAAOG,KAAK,CAAC,CAAC;;;;;QAKzC,CAAC;QAEDb,QAAQC,GAAG,CAAC;QACZ,IAAIe,aAAaF,IAAI,CAACG,MAAM,KAAK,GAAG;YAChCjB,QAAQC,GAAG,CAAC;QAChB,OAAO;YACHe,aAAaF,IAAI,CAACI,OAAO,CAACC,CAAAA;gBACtBnB,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEkB,IAAIC,UAAU,CAAC,CAAC;YACrC;QACJ;QAEA,qBAAqB;QACrBV,OAAOW,OAAO;IAClB,EAAE,OAAOC,OAAO;QACZtB,QAAQsB,KAAK,CAAC,sCAAsCA;IACxD,SAAU;QACN,eAAe;QACf,MAAMpB,KAAKqB,GAAG;IAClB;AACJ;AAEA,eAAe;AACfd,iBAAiBe,KAAK,CAACxB,QAAQsB,KAAK"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0491fe956ff07d87c615d57cae1c96e251b6c159"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11yafqbjp3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11yafqbjp3();
cov_11yafqbjp3().s[0]++;
require("dotenv").config({
  path: ".env.local"
});
// Simple script to check if pg can connect to Neon
const {
  Pool
} =
/* istanbul ignore next */
(cov_11yafqbjp3().s[1]++, require("pg"));
/* istanbul ignore next */
cov_11yafqbjp3().s[2]++;
console.log("Testing Neon database connection...");
// Create a connection pool
const pool =
/* istanbul ignore next */
(cov_11yafqbjp3().s[3]++, new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
}));
// Test the connection
async function testConnection() {
  /* istanbul ignore next */
  cov_11yafqbjp3().f[0]++;
  cov_11yafqbjp3().s[4]++;
  try {
    // Connect to the database
    const client =
    /* istanbul ignore next */
    (cov_11yafqbjp3().s[5]++, await pool.connect());
    /* istanbul ignore next */
    cov_11yafqbjp3().s[6]++;
    console.log("Connected to Neon database successfully!");
    // Execute a simple query
    const result =
    /* istanbul ignore next */
    (cov_11yafqbjp3().s[7]++, await client.query("SELECT NOW() as current_time"));
    /* istanbul ignore next */
    cov_11yafqbjp3().s[8]++;
    console.log("Query executed successfully");
    /* istanbul ignore next */
    cov_11yafqbjp3().s[9]++;
    console.log("Current time from Neon:", result.rows[0].current_time);
    // List tables in the database
    const tablesResult =
    /* istanbul ignore next */
    (cov_11yafqbjp3().s[10]++, await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        `));
    /* istanbul ignore next */
    cov_11yafqbjp3().s[11]++;
    console.log("\nTables in database:");
    /* istanbul ignore next */
    cov_11yafqbjp3().s[12]++;
    if (tablesResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_11yafqbjp3().b[0][0]++;
      cov_11yafqbjp3().s[13]++;
      console.log("No tables found");
    } else {
      /* istanbul ignore next */
      cov_11yafqbjp3().b[0][1]++;
      cov_11yafqbjp3().s[14]++;
      tablesResult.rows.forEach(row => {
        /* istanbul ignore next */
        cov_11yafqbjp3().f[1]++;
        cov_11yafqbjp3().s[15]++;
        console.log(`- ${row.table_name}`);
      });
    }
    // Release the client
    /* istanbul ignore next */
    cov_11yafqbjp3().s[16]++;
    client.release();
  } catch (error) {
    /* istanbul ignore next */
    cov_11yafqbjp3().s[17]++;
    console.error("Error connecting to Neon database:", error);
  } finally {
    /* istanbul ignore next */
    cov_11yafqbjp3().s[18]++;
    // End the pool
    await pool.end();
  }
}
// Run the test
/* istanbul ignore next */
cov_11yafqbjp3().s[19]++;
testConnection().catch(console.error);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTF5YWZxYmpwMyIsImFjdHVhbENvdmVyYWdlIiwicyIsInJlcXVpcmUiLCJjb25maWciLCJwYXRoIiwiUG9vbCIsImNvbnNvbGUiLCJsb2ciLCJwb29sIiwiY29ubmVjdGlvblN0cmluZyIsInByb2Nlc3MiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJzc2wiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJ0ZXN0Q29ubmVjdGlvbiIsImYiLCJjbGllbnQiLCJjb25uZWN0IiwicmVzdWx0IiwicXVlcnkiLCJyb3dzIiwiY3VycmVudF90aW1lIiwidGFibGVzUmVzdWx0IiwibGVuZ3RoIiwiYiIsImZvckVhY2giLCJyb3ciLCJ0YWJsZV9uYW1lIiwicmVsZWFzZSIsImVycm9yIiwiZW5kIiwiY2F0Y2giXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9zY3JpcHRzL3Rlc3QtbmVvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKHsgcGF0aDogJy5lbnYubG9jYWwnIH0pO1xuXG4vLyBTaW1wbGUgc2NyaXB0IHRvIGNoZWNrIGlmIHBnIGNhbiBjb25uZWN0IHRvIE5lb25cbmNvbnN0IHsgUG9vbCB9ID0gcmVxdWlyZSgncGcnKTtcblxuY29uc29sZS5sb2coJ1Rlc3RpbmcgTmVvbiBkYXRhYmFzZSBjb25uZWN0aW9uLi4uJyk7XG5cbi8vIENyZWF0ZSBhIGNvbm5lY3Rpb24gcG9vbFxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcbiAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gICAgc3NsOiB7XG4gICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcbiAgICB9XG59KTtcblxuLy8gVGVzdCB0aGUgY29ubmVjdGlvblxuYXN5bmMgZnVuY3Rpb24gdGVzdENvbm5lY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ29ubmVjdCB0byB0aGUgZGF0YWJhc2VcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgcG9vbC5jb25uZWN0KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gTmVvbiBkYXRhYmFzZSBzdWNjZXNzZnVsbHkhJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBFeGVjdXRlIGEgc2ltcGxlIHF1ZXJ5XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNsaWVudC5xdWVyeSgnU0VMRUNUIE5PVygpIGFzIGN1cnJlbnRfdGltZScpO1xuICAgICAgICBjb25zb2xlLmxvZygnUXVlcnkgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHRpbWUgZnJvbSBOZW9uOicsIHJlc3VsdC5yb3dzWzBdLmN1cnJlbnRfdGltZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBMaXN0IHRhYmxlcyBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgY29uc3QgdGFibGVzUmVzdWx0ID0gYXdhaXQgY2xpZW50LnF1ZXJ5KGBcbiAgICAgICAgICAgIFNFTEVDVCB0YWJsZV9uYW1lIFxuICAgICAgICAgICAgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIFxuICAgICAgICAgICAgV0hFUkUgdGFibGVfc2NoZW1hID0gJ3B1YmxpYydcbiAgICAgICAgICAgIE9SREVSIEJZIHRhYmxlX25hbWVcbiAgICAgICAgYCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnXFxuVGFibGVzIGluIGRhdGFiYXNlOicpO1xuICAgICAgICBpZiAodGFibGVzUmVzdWx0LnJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gdGFibGVzIGZvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YWJsZXNSZXN1bHQucm93cy5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYC0gJHtyb3cudGFibGVfbmFtZX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBSZWxlYXNlIHRoZSBjbGllbnRcbiAgICAgICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb25uZWN0aW5nIHRvIE5lb24gZGF0YWJhc2U6JywgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIC8vIEVuZCB0aGUgcG9vbFxuICAgICAgICBhd2FpdCBwb29sLmVuZCgpO1xuICAgIH1cbn1cblxuLy8gUnVuIHRoZSB0ZXN0XG50ZXN0Q29ubmVjdGlvbigpLmNhdGNoKGNvbnNvbGUuZXJyb3IpOyAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZ0JBO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBO0FBZkFDLE9BQUEsQ0FBUSxVQUFVQyxNQUFNLENBQUM7RUFBRUMsSUFBQSxFQUFNO0FBQWE7QUFFOUM7QUFDQSxNQUFNO0VBQUVDO0FBQUksQ0FBRTtBQUFBO0FBQUEsQ0FBQU4sY0FBQSxHQUFBRSxDQUFBLE9BQUdDLE9BQUEsQ0FBUTtBQUFBO0FBQUFILGNBQUEsR0FBQUUsQ0FBQTtBQUV6QkssT0FBQSxDQUFRQyxHQUFHLENBQUM7QUFFWjtBQUNBLE1BQU1DLElBQUE7QUFBQTtBQUFBLENBQUFULGNBQUEsR0FBQUUsQ0FBQSxPQUFPLElBQUlJLElBQUEsQ0FBSztFQUNsQkksZ0JBQUEsRUFBa0JDLE9BQUEsQ0FBUUMsR0FBRyxDQUFDQyxZQUFZO0VBQzFDQyxHQUFBLEVBQUs7SUFDREMsa0JBQUEsRUFBb0I7RUFDeEI7QUFDSjtBQUVBO0FBQ0EsZUFBZUMsZUFBQTtFQUFBO0VBQUFoQixjQUFBLEdBQUFpQixDQUFBO0VBQUFqQixjQUFBLEdBQUFFLENBQUE7RUFDWCxJQUFJO0lBQ0E7SUFDQSxNQUFNZ0IsTUFBQTtJQUFBO0lBQUEsQ0FBQWxCLGNBQUEsR0FBQUUsQ0FBQSxPQUFTLE1BQU1PLElBQUEsQ0FBS1UsT0FBTztJQUFBO0lBQUFuQixjQUFBLEdBQUFFLENBQUE7SUFDakNLLE9BQUEsQ0FBUUMsR0FBRyxDQUFDO0lBRVo7SUFDQSxNQUFNWSxNQUFBO0lBQUE7SUFBQSxDQUFBcEIsY0FBQSxHQUFBRSxDQUFBLE9BQVMsTUFBTWdCLE1BQUEsQ0FBT0csS0FBSyxDQUFDO0lBQUE7SUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtJQUNsQ0ssT0FBQSxDQUFRQyxHQUFHLENBQUM7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDWkssT0FBQSxDQUFRQyxHQUFHLENBQUMsMkJBQTJCWSxNQUFBLENBQU9FLElBQUksQ0FBQyxFQUFFLENBQUNDLFlBQVk7SUFFbEU7SUFDQSxNQUFNQyxZQUFBO0lBQUE7SUFBQSxDQUFBeEIsY0FBQSxHQUFBRSxDQUFBLFFBQWUsTUFBTWdCLE1BQUEsQ0FBT0csS0FBSyxDQUFDOzs7OztTQUt2QztJQUFBO0lBQUFyQixjQUFBLEdBQUFFLENBQUE7SUFFREssT0FBQSxDQUFRQyxHQUFHLENBQUM7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDWixJQUFJc0IsWUFBQSxDQUFhRixJQUFJLENBQUNHLE1BQU0sS0FBSyxHQUFHO01BQUE7TUFBQXpCLGNBQUEsR0FBQTBCLENBQUE7TUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtNQUNoQ0ssT0FBQSxDQUFRQyxHQUFHLENBQUM7SUFDaEIsT0FBTztNQUFBO01BQUFSLGNBQUEsR0FBQTBCLENBQUE7TUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtNQUNIc0IsWUFBQSxDQUFhRixJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsR0FBQTtRQUFBO1FBQUE1QixjQUFBLEdBQUFpQixDQUFBO1FBQUFqQixjQUFBLEdBQUFFLENBQUE7UUFDdEJLLE9BQUEsQ0FBUUMsR0FBRyxDQUFDLEtBQUtvQixHQUFBLENBQUlDLFVBQVUsRUFBRTtNQUNyQztJQUNKO0lBRUE7SUFBQTtJQUFBN0IsY0FBQSxHQUFBRSxDQUFBO0lBQ0FnQixNQUFBLENBQU9ZLE9BQU87RUFDbEIsRUFBRSxPQUFPQyxLQUFBLEVBQU87SUFBQTtJQUFBL0IsY0FBQSxHQUFBRSxDQUFBO0lBQ1pLLE9BQUEsQ0FBUXdCLEtBQUssQ0FBQyxzQ0FBc0NBLEtBQUE7RUFDeEQsVUFBVTtJQUFBO0lBQUEvQixjQUFBLEdBQUFFLENBQUE7SUFDTjtJQUNBLE1BQU1PLElBQUEsQ0FBS3VCLEdBQUc7RUFDbEI7QUFDSjtBQUVBO0FBQUE7QUFBQWhDLGNBQUEsR0FBQUUsQ0FBQTtBQUNBYyxjQUFBLEdBQWlCaUIsS0FBSyxDQUFDMUIsT0FBQSxDQUFRd0IsS0FBSyIsImlnbm9yZUxpc3QiOltdfQ==