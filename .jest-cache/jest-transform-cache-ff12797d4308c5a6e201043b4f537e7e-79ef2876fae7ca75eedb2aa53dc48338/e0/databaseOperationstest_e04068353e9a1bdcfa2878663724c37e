caa42129b53a12ef35db69e81a664dd0
"use strict";
// Mock the Prisma module
jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Create mock functions for Prisma operations
const mockPrismaUser = {
    findMany: jest.fn(),
    findUnique: jest.fn(),
    findFirst: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn()
};
const mockPrismaProduct = {
    findMany: jest.fn(),
    findUnique: jest.fn(),
    findFirst: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn()
};
const mockPrismaCustomer = {
    findMany: jest.fn(),
    findUnique: jest.fn(),
    findFirst: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn()
};
const mockPrismaInvoice = {
    findMany: jest.fn(),
    findUnique: jest.fn(),
    findFirst: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn()
};
const mockPrismaInventoryItem = {
    findMany: jest.fn(),
    findUnique: jest.fn(),
    findFirst: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    count: jest.fn()
};
const mockPrisma = {
    user: mockPrismaUser,
    product: mockPrismaProduct,
    customer: mockPrismaCustomer,
    invoice: mockPrismaInvoice,
    inventoryItem: mockPrismaInventoryItem,
    $transaction: jest.fn(),
    $connect: jest.fn(),
    $disconnect: jest.fn(),
    $executeRaw: jest.fn(),
    $queryRaw: jest.fn()
};
describe("Database Operations - Prisma Models", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("User Model Operations", ()=>{
        const mockUser1 = {
            id: 1,
            username: "testuser",
            email: "test@example.com",
            password: "hashedpassword",
            firstName: "Test",
            lastName: "User",
            isActive: true,
            roleId: 1,
            shopId: "shop1",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active users", async ()=>{
                const mockUsers = [
                    mockUser1,
                    {
                        ...mockUser1,
                        id: 2,
                        username: "testuser2"
                    }
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsers);
                const result = await _prisma.default.user.findMany({
                    where: {
                        isActive: true
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockUsers);
                expect(result).toHaveLength(2);
            });
            it("should fetch users with role and shop relations", async ()=>{
                const mockUsersWithRelations = [
                    {
                        ...mockUser1,
                        role: {
                            id: 1,
                            name: "admin",
                            permissions: []
                        },
                        shop: {
                            id: "shop1",
                            name: "Main Shop"
                        }
                    }
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsersWithRelations);
                const result = await _prisma.default.user.findMany({
                    include: {
                        role: {
                            include: {
                                permissions: true
                            }
                        },
                        shop: true
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    include: {
                        role: {
                            include: {
                                permissions: true
                            }
                        },
                        shop: true
                    }
                });
                expect(result[0]).toHaveProperty("role");
                expect(result[0]).toHaveProperty("shop");
            });
        });
        describe("findUnique", ()=>{
            it("should find user by id", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser1);
            });
            it("should find user by email", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        email: "test@example.com"
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        email: "test@example.com"
                    }
                });
                expect(result).toEqual(mockUser1);
            });
            it("should return null for non-existent user", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(null);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        id: 999
                    }
                });
                expect(result).toBeNull();
            });
        });
        describe("create", ()=>{
            it("should create a new user", async ()=>{
                const newUserData = {
                    username: "newuser",
                    email: "new@example.com",
                    password: "hashedpassword",
                    firstName: "New",
                    lastName: "User",
                    roleId: 2
                };
                const createdUser = {
                    ...mockUser1,
                    ...newUserData,
                    id: 3
                };
                mockPrisma.user.create.mockResolvedValue(createdUser);
                const result = await _prisma.default.user.create({
                    data: newUserData
                });
                expect(mockPrisma.user.create).toHaveBeenCalledWith({
                    data: newUserData
                });
                expect(result).toEqual(createdUser);
            });
        });
        describe("update", ()=>{
            it("should update user data", async ()=>{
                const updateData = {
                    firstName: "Updated",
                    lastName: "Name"
                };
                const updatedUser = {
                    ...mockUser1,
                    ...updateData
                };
                mockPrisma.user.update.mockResolvedValue(updatedUser);
                const result = await _prisma.default.user.update({
                    where: {
                        id: 1
                    },
                    data: updateData
                });
                expect(mockPrisma.user.update).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    },
                    data: updateData
                });
                expect(result).toEqual(updatedUser);
            });
        });
        describe("delete", ()=>{
            it("should delete a user", async ()=>{
                mockPrisma.user.delete.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.delete({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.delete).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser1);
            });
        });
    });
    describe("Product Model Operations", ()=>{
        const mockProduct1 = {
            id: 1,
            name: "Test Product",
            description: "Test Description",
            price: 99.99,
            costPrice: 50.00,
            sku: "TEST-001",
            barcode: "1234567890",
            categoryId: 1,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active products", async ()=>{
                const mockProducts = [
                    mockProduct1,
                    {
                        ...mockProduct1,
                        id: 2,
                        name: "Product 2"
                    }
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProducts);
                const result = await _prisma.default.product.findMany({
                    where: {
                        isActive: true
                    }
                });
                expect(mockPrisma.product.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockProducts);
            });
            it("should fetch products with category and inventory", async ()=>{
                const mockProductsWithRelations = [
                    {
                        ...mockProduct1,
                        category: {
                            id: 1,
                            name: "Electronics"
                        },
                        inventoryItems: [
                            {
                                id: 1,
                                quantity: 100,
                                shopId: "shop1"
                            }
                        ]
                    }
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProductsWithRelations);
                const result = await _prisma.default.product.findMany({
                    include: {
                        category: true,
                        inventoryItems: true
                    }
                });
                expect(result[0]).toHaveProperty("category");
                expect(result[0]).toHaveProperty("inventoryItems");
            });
        });
        describe("findUnique", ()=>{
            it("should find product by id", async ()=>{
                mockPrisma.product.findUnique.mockResolvedValue(mockProduct1);
                const result = await _prisma.default.product.findUnique({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockProduct1);
            });
            it("should find product by SKU", async ()=>{
                mockPrisma.product.findUnique.mockResolvedValue(mockProduct1);
                const result = await _prisma.default.product.findUnique({
                    where: {
                        sku: "TEST-001"
                    }
                });
                expect(result).toEqual(mockProduct1);
            });
        });
        describe("create", ()=>{
            it("should create a new product", async ()=>{
                const newProductData = {
                    name: "New Product",
                    price: 149.99,
                    costPrice: 75.00,
                    sku: "NEW-001",
                    categoryId: 1
                };
                const createdProduct = {
                    ...mockProduct1,
                    ...newProductData,
                    id: 3
                };
                mockPrisma.product.create.mockResolvedValue(createdProduct);
                const result = await _prisma.default.product.create({
                    data: newProductData
                });
                expect(result).toEqual(createdProduct);
            });
        });
    });
    describe("Customer Model Operations", ()=>{
        const mockCustomer = {
            id: 1,
            name: "Test Customer",
            email: "customer@example.com",
            phone: "+1234567890",
            address: "123 Test St",
            city: "Test City",
            status: "active",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active customers", async ()=>{
                const mockCustomers = [
                    mockCustomer,
                    {
                        ...mockCustomer,
                        id: 2,
                        name: "Customer 2"
                    }
                ];
                mockPrisma.customer.findMany.mockResolvedValue(mockCustomers);
                const result = await _prisma.default.customer.findMany({
                    where: {
                        status: "active"
                    }
                });
                expect(result).toEqual(mockCustomers);
            });
            it("should fetch customers with invoices", async ()=>{
                const mockCustomersWithInvoices = [
                    {
                        ...mockCustomer,
                        invoices: [
                            {
                                id: 1,
                                total: 100.00,
                                status: "paid"
                            }
                        ]
                    }
                ];
                mockPrisma.customer.findMany.mockResolvedValue(mockCustomersWithInvoices);
                const result = await _prisma.default.customer.findMany({
                    include: {
                        invoices: true
                    }
                });
                expect(result[0]).toHaveProperty("invoices");
            });
        });
        describe("create", ()=>{
            it("should create a new customer", async ()=>{
                const newCustomerData = {
                    name: "New Customer",
                    email: "new@customer.com",
                    phone: "+9876543210"
                };
                const createdCustomer = {
                    ...mockCustomer,
                    ...newCustomerData,
                    id: 3
                };
                mockPrisma.customer.create.mockResolvedValue(createdCustomer);
                const result = await _prisma.default.customer.create({
                    data: newCustomerData
                });
                expect(result).toEqual(createdCustomer);
            });
        });
    });
    describe("Invoice Model Operations", ()=>{
        const mockInvoice = {
            id: 1,
            invoiceNumber: "INV-001",
            customerId: 1,
            total: 199.99,
            status: "pending",
            paymentMethod: "Cash",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch invoices with filters", async ()=>{
                const mockInvoices = [
                    mockInvoice,
                    {
                        ...mockInvoice,
                        id: 2,
                        invoiceNumber: "INV-002"
                    }
                ];
                mockPrisma.invoice.findMany.mockResolvedValue(mockInvoices);
                const result = await _prisma.default.invoice.findMany({
                    where: {
                        status: "pending",
                        createdAt: {
                            gte: new Date("2024-01-01")
                        }
                    },
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(mockPrisma.invoice.findMany).toHaveBeenCalledWith({
                    where: {
                        status: "pending",
                        createdAt: {
                            gte: new Date("2024-01-01")
                        }
                    },
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(result).toEqual(mockInvoices);
            });
            it("should fetch invoices with customer and items", async ()=>{
                const mockInvoicesWithRelations = [
                    {
                        ...mockInvoice,
                        customer: {
                            id: 1,
                            name: "Test Customer"
                        },
                        items: [
                            {
                                id: 1,
                                productId: 1,
                                quantity: 2,
                                price: 99.99
                            }
                        ]
                    }
                ];
                mockPrisma.invoice.findMany.mockResolvedValue(mockInvoicesWithRelations);
                const result = await _prisma.default.invoice.findMany({
                    include: {
                        customer: true,
                        items: {
                            include: {
                                product: true
                            }
                        }
                    }
                });
                expect(result[0]).toHaveProperty("customer");
                expect(result[0]).toHaveProperty("items");
            });
        });
        describe("create", ()=>{
            it("should create invoice with items", async ()=>{
                const invoiceData = {
                    invoiceNumber: "INV-003",
                    customerId: 1,
                    total: 299.99,
                    status: "pending",
                    items: {
                        create: [
                            {
                                productId: 1,
                                quantity: 2,
                                price: 99.99,
                                total: 199.98
                            },
                            {
                                productId: 2,
                                quantity: 1,
                                price: 100.01,
                                total: 100.01
                            }
                        ]
                    }
                };
                const createdInvoice = {
                    ...mockInvoice,
                    ...invoiceData,
                    id: 3
                };
                mockPrisma.invoice.create.mockResolvedValue(createdInvoice);
                const result = await _prisma.default.invoice.create({
                    data: invoiceData,
                    include: {
                        items: true
                    }
                });
                expect(mockPrisma.invoice.create).toHaveBeenCalledWith({
                    data: invoiceData,
                    include: {
                        items: true
                    }
                });
                expect(result).toEqual(createdInvoice);
            });
        });
    });
    describe("Inventory Model Operations", ()=>{
        const mockInventoryItem = {
            id: 1,
            productId: 1,
            shopId: "shop1",
            quantity: 100,
            minStockLevel: 10,
            maxStockLevel: 500,
            reorderPoint: 20,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch inventory items by shop", async ()=>{
                const mockInventoryItems = [
                    mockInventoryItem,
                    {
                        ...mockInventoryItem,
                        id: 2,
                        productId: 2
                    }
                ];
                mockPrisma.inventoryItem.findMany.mockResolvedValue(mockInventoryItems);
                const result = await _prisma.default.inventoryItem.findMany({
                    where: {
                        shopId: "shop1"
                    },
                    include: {
                        product: true
                    }
                });
                expect(mockPrisma.inventoryItem.findMany).toHaveBeenCalledWith({
                    where: {
                        shopId: "shop1"
                    },
                    include: {
                        product: true
                    }
                });
                expect(result).toEqual(mockInventoryItems);
            });
            it("should fetch low stock items", async ()=>{
                const lowStockItems = [
                    {
                        ...mockInventoryItem,
                        quantity: 5
                    }
                ];
                mockPrisma.inventoryItem.findMany.mockResolvedValue(lowStockItems);
                const result = await _prisma.default.inventoryItem.findMany({
                    where: {
                        quantity: {
                            lte: mockInventoryItem.minStockLevel
                        }
                    }
                });
                expect(result).toEqual(lowStockItems);
            });
        });
        describe("update", ()=>{
            it("should update inventory quantity", async ()=>{
                const updatedItem = {
                    ...mockInventoryItem,
                    quantity: 150
                };
                mockPrisma.inventoryItem.update.mockResolvedValue(updatedItem);
                const result = await _prisma.default.inventoryItem.update({
                    where: {
                        productId_shopId: {
                            productId: 1,
                            shopId: "shop1"
                        }
                    },
                    data: {
                        quantity: 150
                    }
                });
                expect(result).toEqual(updatedItem);
            });
        });
    });
    describe("Transaction Operations", ()=>{
        describe("$transaction", ()=>{
            it("should execute multiple operations in a transaction", async ()=>{
                const mockResults = [
                    mockUser,
                    mockProduct
                ];
                mockPrisma.$transaction.mockResolvedValue(mockResults);
                const result = await _prisma.default.$transaction([
                    _prisma.default.user.create({
                        data: {
                            username: "test",
                            email: "test@test.com"
                        }
                    }),
                    _prisma.default.product.create({
                        data: {
                            name: "Test Product",
                            price: 99.99
                        }
                    })
                ]);
                expect(mockPrisma.$transaction).toHaveBeenCalled();
                expect(result).toEqual(mockResults);
            });
            it("should handle transaction rollback on error", async ()=>{
                const error = new Error("Transaction failed");
                mockPrisma.$transaction.mockRejectedValue(error);
                await expect(_prisma.default.$transaction([
                    _prisma.default.user.create({
                        data: {
                            username: "test",
                            email: "test@test.com"
                        }
                    }),
                    _prisma.default.product.create({
                        data: {
                            name: "Test Product",
                            price: 99.99
                        }
                    })
                ])).rejects.toThrow("Transaction failed");
            });
        });
    });
    describe("Connection Management", ()=>{
        describe("$connect", ()=>{
            it("should connect to database", async ()=>{
                mockPrisma.$connect.mockResolvedValue(undefined);
                await _prisma.default.$connect();
                expect(mockPrisma.$connect).toHaveBeenCalled();
            });
        });
        describe("$disconnect", ()=>{
            it("should disconnect from database", async ()=>{
                mockPrisma.$disconnect.mockResolvedValue(undefined);
                await _prisma.default.$disconnect();
                expect(mockPrisma.$disconnect).toHaveBeenCalled();
            });
        });
    });
    describe("Error Handling", ()=>{
        it("should handle database connection errors", async ()=>{
            const connectionError = new Error("Database connection failed");
            mockPrisma.user.findMany.mockRejectedValue(connectionError);
            await expect(_prisma.default.user.findMany()).rejects.toThrow("Database connection failed");
        });
        it("should handle unique constraint violations", async ()=>{
            const uniqueError = new Error("Unique constraint failed");
            mockPrisma.user.create.mockRejectedValue(uniqueError);
            await expect(_prisma.default.user.create({
                data: {
                    username: "existing",
                    email: "existing@test.com"
                }
            })).rejects.toThrow("Unique constraint failed");
        });
        it("should handle foreign key constraint violations", async ()=>{
            const fkError = new Error("Foreign key constraint failed");
            mockPrisma.product.create.mockRejectedValue(fkError);
            await expect(_prisma.default.product.create({
                data: {
                    name: "Test",
                    price: 99.99,
                    categoryId: 999
                }
            })).rejects.toThrow("Foreign key constraint failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,