a817a34a95f729dc3895c4b293eabd44
"use strict";

/* istanbul ignore next */
function cov_kcwhvrt63() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts";
  var hash = "3b734c3c706cfb50d1541bf8491984fe5a2055e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 44
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 40
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 46
        }
      },
      "16": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 30
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 71
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 90
        }
      },
      "19": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "20": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "21": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "22": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "23": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "24": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 53
        }
      },
      "25": {
        start: {
          line: 64,
          column: 48
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "26": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "27": {
        start: {
          line: 65,
          column: 57
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "28": {
        start: {
          line: 83,
          column: 21
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "29": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "32": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 64
        }
      },
      "33": {
        start: {
          line: 92,
          column: 17
        },
        end: {
          line: 99,
          column: 6
        }
      },
      "34": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 89
        }
      },
      "35": {
        start: {
          line: 93,
          column: 66
        },
        end: {
          line: 93,
          column: 85
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "37": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 103,
          column: 6
        }
      },
      "38": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 26
        }
      },
      "39": {
        start: {
          line: 108,
          column: 25
        },
        end: {
          line: 108,
          column: 71
        }
      },
      "40": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 90
        }
      },
      "41": {
        start: {
          line: 111,
          column: 31
        },
        end: {
          line: 125,
          column: 40
        }
      },
      "42": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 114,
          column: 14
        }
      },
      "43": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "44": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "45": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 10
        }
      },
      "46": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 53
        }
      },
      "47": {
        start: {
          line: 133,
          column: 48
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "48": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 150,
          column: 66
        }
      },
      "49": {
        start: {
          line: 134,
          column: 64
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "50": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "51": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "52": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "53": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "54": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 64
        }
      },
      "55": {
        start: {
          line: 161,
          column: 17
        },
        end: {
          line: 168,
          column: 6
        }
      },
      "56": {
        start: {
          line: 162,
          column: 27
        },
        end: {
          line: 162,
          column: 89
        }
      },
      "57": {
        start: {
          line: 162,
          column: 66
        },
        end: {
          line: 162,
          column: 85
        }
      },
      "58": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "59": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 80
        }
      },
      "60": {
        start: {
          line: 170,
          column: 47
        },
        end: {
          line: 170,
          column: 79
        }
      },
      "61": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 174,
          column: 6
        }
      },
      "62": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 233,
          column: 2
        }
      },
      "63": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "64": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 179,
          column: 94
        }
      },
      "65": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "66": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "67": {
        start: {
          line: 188,
          column: 25
        },
        end: {
          line: 188,
          column: 89
        }
      },
      "68": {
        start: {
          line: 189,
          column: 27
        },
        end: {
          line: 189,
          column: 66
        }
      },
      "69": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "70": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "71": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "72": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "73": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 92
        }
      },
      "74": {
        start: {
          line: 207,
          column: 29
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "75": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 67
        }
      },
      "76": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 68
        }
      },
      "77": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 55
        }
      },
      "78": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 70
        }
      },
      "79": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 29
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "fetchShopsDataFiltered",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 37
          }
        },
        loc: {
          start: {
            line: 27,
            column: 58
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 42,
            column: 60
          },
          end: {
            line: 42,
            column: 61
          }
        },
        loc: {
          start: {
            line: 42,
            column: 64
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 42
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 64,
            column: 44
          }
        },
        loc: {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 64,
            column: 52
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 53
          },
          end: {
            line: 65,
            column: 54
          }
        },
        loc: {
          start: {
            line: 65,
            column: 57
          },
          end: {
            line: 81,
            column: 10
          }
        },
        line: 65
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 85,
            column: 28
          },
          end: {
            line: 85,
            column: 29
          }
        },
        loc: {
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 89,
            column: 9
          }
        },
        line: 85
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 92,
            column: 40
          },
          end: {
            line: 92,
            column: 41
          }
        },
        loc: {
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 92
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 93,
            column: 53
          },
          end: {
            line: 93,
            column: 54
          }
        },
        loc: {
          start: {
            line: 93,
            column: 66
          },
          end: {
            line: 93,
            column: 85
          }
        },
        line: 93
      },
      "11": {
        name: "fetchShopsData",
        decl: {
          start: {
            line: 105,
            column: 15
          },
          end: {
            line: 105,
            column: 29
          }
        },
        loc: {
          start: {
            line: 105,
            column: 71
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 111,
            column: 60
          },
          end: {
            line: 111,
            column: 61
          }
        },
        loc: {
          start: {
            line: 111,
            column: 64
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 111
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 133,
            column: 43
          },
          end: {
            line: 133,
            column: 44
          }
        },
        loc: {
          start: {
            line: 133,
            column: 48
          },
          end: {
            line: 133,
            column: 52
          }
        },
        line: 133
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 134,
            column: 60
          },
          end: {
            line: 134,
            column: 61
          }
        },
        loc: {
          start: {
            line: 134,
            column: 64
          },
          end: {
            line: 150,
            column: 10
          }
        },
        line: 134
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 36
          }
        },
        loc: {
          start: {
            line: 154,
            column: 43
          },
          end: {
            line: 158,
            column: 9
          }
        },
        line: 154
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 161,
            column: 40
          },
          end: {
            line: 161,
            column: 41
          }
        },
        loc: {
          start: {
            line: 161,
            column: 48
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 161
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 162,
            column: 53
          },
          end: {
            line: 162,
            column: 54
          }
        },
        loc: {
          start: {
            line: 162,
            column: 66
          },
          end: {
            line: 162,
            column: 85
          }
        },
        line: 162
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 170,
            column: 39
          },
          end: {
            line: 170,
            column: 40
          }
        },
        loc: {
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 79
          }
        },
        line: 170
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 176,
            column: 61
          },
          end: {
            line: 176,
            column: 62
          }
        },
        loc: {
          start: {
            line: 176,
            column: 87
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 176
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: 35,
            column: 11
          },
          end: {
            line: 40,
            column: 5
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 28
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 22
          },
          end: {
            line: 45,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 43,
            column: 31
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 14
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 27
          }
        }, {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 62
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 57
          }
        }, {
          start: {
            line: 87,
            column: 61
          },
          end: {
            line: 87,
            column: 62
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 19
          },
          end: {
            line: 96,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 19
          },
          end: {
            line: 96,
            column: 40
          }
        }, {
          start: {
            line: 96,
            column: 44
          },
          end: {
            line: 96,
            column: 45
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 22
          },
          end: {
            line: 114,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 32
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 14
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "11": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 126,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 126,
            column: 27
          }
        }, {
          start: {
            line: 126,
            column: 31
          },
          end: {
            line: 126,
            column: 62
          }
        }],
        line: 126
      },
      "12": {
        loc: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 57
          }
        }, {
          start: {
            line: 156,
            column: 61
          },
          end: {
            line: 156,
            column: 62
          }
        }],
        line: 156
      },
      "15": {
        loc: {
          start: {
            line: 165,
            column: 19
          },
          end: {
            line: 165,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 19
          },
          end: {
            line: 165,
            column: 40
          }
        }, {
          start: {
            line: 165,
            column: 44
          },
          end: {
            line: 165,
            column: 45
          }
        }],
        line: 165
      },
      "16": {
        loc: {
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 47
          },
          end: {
            line: 170,
            column: 61
          }
        }, {
          start: {
            line: 170,
            column: 65
          },
          end: {
            line: 170,
            column: 79
          }
        }],
        line: 170
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "18": {
        loc: {
          start: {
            line: 188,
            column: 44
          },
          end: {
            line: 188,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 65
          },
          end: {
            line: 188,
            column: 79
          }
        }, {
          start: {
            line: 188,
            column: 82
          },
          end: {
            line: 188,
            column: 87
          }
        }],
        line: 188
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 205,
            column: 49
          },
          end: {
            line: 205,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 70
          },
          end: {
            line: 205,
            column: 84
          }
        }, {
          start: {
            line: 205,
            column: 87
          },
          end: {
            line: 205,
            column: 91
          }
        }],
        line: 205
      },
      "21": {
        loc: {
          start: {
            line: 224,
            column: 21
          },
          end: {
            line: 224,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 46
          },
          end: {
            line: 224,
            column: 59
          }
        }, {
          start: {
            line: 224,
            column: 62
          },
          end: {
            line: 224,
            column: 77
          }
        }],
        line: 224
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for shops (can be removed if not needed after refactor)\n// const defaultShopsData = [\n//     { name: 'Colombo Shop', sales: 125000, stock: 450 },\n//     { name: 'Kandy Shop', sales: 98500, stock: 320 },\n//     { name: 'Galle Shop', sales: 75200, stock: 280 },\n//     { name: 'Jaffna Shop', sales: 62800, stock: 210 }\n// ];\n\n// Filtered version of fetchShopsData with date range support\nexport async function fetchShopsDataFiltered(startDate?: string | null, endDate?: string | null) {\n    // Build date filter\n    let startOfPeriod: Date;\n    let endOfPeriod: Date;\n\n    if (startDate && endDate) {\n        startOfPeriod = new Date(startDate);\n        endOfPeriod = new Date(endDate);\n        endOfPeriod.setHours(23, 59, 59, 999);\n    } else {\n        // Default to current month if no dates provided\n        const now = new Date();\n        startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);\n        endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n    }\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the specified period\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const salesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds },\n                createdAt: {\n                    gte: startOfPeriod,\n                    lte: endOfPeriod\n                }\n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(salesByShop)) {\n        salesByShop.forEach(sale => {\n            if (sale.shopId !== null) {\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0,\n            stock: totalStock\n        };\n    });\n\n    return {\n        success: true,\n        data: data\n    };\n}\n\nexport async function fetchShopsData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    // Get current month's start and end dates\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the current month\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const monthlySalesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds }, // Filter by the shops we care about\n                createdAt: {\n                    gte: startOfMonth,\n                    lte: endOfMonth\n                },\n                // Optionally, filter by invoice status if only e.g. 'Paid' invoices count as sales\n                // status: 'Paid' \n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(monthlySalesByShop)) {\n        monthlySalesByShop.forEach(sale => {\n            if (sale.shopId !== null) { // Ensure shopId is not null before setting\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0, // Get sales from the map, default to 0\n            stock: totalStock\n        };\n    });\n\n    // Filter out shops with no inventory (if still desired, or adjust logic)\n    const shopsToDisplay = data.filter(shop => shop.stock > 0 || shop.sales > 0); // show if stock or sales\n\n    return {\n        success: true,\n        data: shopsToDisplay\n    };\n}\n\n// GET: Fetch shop performance data\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:shops:${context.isFiltered ? context.shopId : 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Shops data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh shops data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered\n        });\n        const shopsResult = await fetchShopsData(context.isFiltered ? context.shopId : null);\n\n        // Add metadata to response\n        const responseData = {\n            ...shopsResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 5 minutes (shop data changes less frequently)\n        await cacheService.set(cacheKey, responseData, 300);\n        console.log('\uD83D\uDCBE Shops data cached for 5 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching shop performance data:', error);\n        return NextResponse.json({\n            success: false, // Signal error more clearly\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],
      names: ["GET", "fetchShopsData", "fetchShopsDataFiltered", "startDate", "endDate", "startOfPeriod", "endOfPeriod", "Date", "setHours", "now", "getFullYear", "getMonth", "shopsWithInventory", "safeQuery", "where", "shopId", "id", "prisma", "shop", "findMany", "include", "InventoryItem", "select", "quantity", "length", "success", "data", "shopIds", "map", "s", "salesByShop", "invoice", "groupBy", "by", "in", "createdAt", "gte", "lte", "_sum", "total", "salesMap", "Map", "Array", "isArray", "forEach", "sale", "set", "totalStock", "reduce", "sum", "item", "name", "sales", "get", "stock", "periodDays", "startOfMonth", "endOfMonth", "monthlySalesByShop", "shopsToDisplay", "filter", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "cacheKey", "isFiltered", "cachedData", "cacheService", "console", "log", "meta", "shopFiltered", "fromCache", "shopsResult", "responseData", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b734c3c706cfb50d1541bf8491984fe5a2055e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kcwhvrt63 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kcwhvrt63();
cov_kcwhvrt63().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[0]++;
  cov_kcwhvrt63().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_kcwhvrt63().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_kcwhvrt63().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[1]++;
    cov_kcwhvrt63().s[4]++;
    return GET;
  },
  fetchShopsData: function () {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[2]++;
    cov_kcwhvrt63().s[5]++;
    return fetchShopsData;
  },
  fetchShopsDataFiltered: function () {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[3]++;
    cov_kcwhvrt63().s[6]++;
    return fetchShopsDataFiltered;
  }
});
const _server =
/* istanbul ignore next */
(cov_kcwhvrt63().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_kcwhvrt63().s[8]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_kcwhvrt63().s[9]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_kcwhvrt63().s[10]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_kcwhvrt63().s[11]++, require("../../../../lib/auth"));
async function fetchShopsDataFiltered(startDate, endDate) {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[4]++;
  // Build date filter
  let startOfPeriod;
  let endOfPeriod;
  /* istanbul ignore next */
  cov_kcwhvrt63().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[1][0]++, startDate) &&
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[1][1]++, endDate)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[0][0]++;
    cov_kcwhvrt63().s[13]++;
    startOfPeriod = new Date(startDate);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[14]++;
    endOfPeriod = new Date(endDate);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[15]++;
    endOfPeriod.setHours(23, 59, 59, 999);
  } else {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[0][1]++;
    // Default to current month if no dates provided
    const now =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[16]++, new Date());
    /* istanbul ignore next */
    cov_kcwhvrt63().s[17]++;
    startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[18]++;
    endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
  }
  // 1. Fetch shops and their inventory with optional shop filtering
  const shopsWithInventory =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[19]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[5]++;
    const where =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[20]++, shopId ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[2][0]++, {
      id: shopId
    }) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[2][1]++, {}));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[21]++;
    return _prisma.prisma.shop.findMany({
      where,
      include: {
        InventoryItem: {
          select: {
            quantity: true
          } // Only select quantity for stock calculation
        }
      }
    });
  }, [], "Failed to fetch shops data"));
  /* istanbul ignore next */
  cov_kcwhvrt63().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[4][0]++, !shopsWithInventory) ||
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[4][1]++, shopsWithInventory.length === 0)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[3][0]++;
    cov_kcwhvrt63().s[23]++;
    return {
      success: true,
      data: []
    };
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[3][1]++;
  }
  // 2. Fetch aggregated sales data for all relevant shops in the specified period
  const shopIds =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[24]++, shopsWithInventory.map(s => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[6]++;
    cov_kcwhvrt63().s[25]++;
    return s.id;
  }));
  const salesByShop =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[26]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[7]++;
    cov_kcwhvrt63().s[27]++;
    return _prisma.prisma.invoice.groupBy({
      by: ["shopId"],
      where: {
        shopId: {
          in: shopIds
        },
        createdAt: {
          gte: startOfPeriod,
          lte: endOfPeriod
        }
      },
      _sum: {
        total: true
      }
    });
  }, [], "Failed to fetch aggregated sales data for shops"));
  // Create a map for easy lookup of sales by shopId
  const salesMap =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[28]++, new Map());
  /* istanbul ignore next */
  cov_kcwhvrt63().s[29]++;
  if (Array.isArray(salesByShop)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[5][0]++;
    cov_kcwhvrt63().s[30]++;
    salesByShop.forEach(sale => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[8]++;
      cov_kcwhvrt63().s[31]++;
      if (sale.shopId !== null) {
        /* istanbul ignore next */
        cov_kcwhvrt63().b[6][0]++;
        cov_kcwhvrt63().s[32]++;
        salesMap.set(sale.shopId,
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[7][0]++, sale._sum.total) ||
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[7][1]++, 0));
      } else
      /* istanbul ignore next */
      {
        cov_kcwhvrt63().b[6][1]++;
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[5][1]++;
  }
  // 3. Combine shop data with their sales and stock
  const data =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[33]++, shopsWithInventory.map(shop => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[9]++;
    const totalStock =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[34]++, shop.InventoryItem.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[10]++;
      cov_kcwhvrt63().s[35]++;
      return sum + item.quantity;
    }, 0));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[36]++;
    return {
      name: shop.name,
      sales:
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[8][0]++, salesMap.get(shop.id)) ||
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[8][1]++, 0),
      stock: totalStock
    };
  }));
  /* istanbul ignore next */
  cov_kcwhvrt63().s[37]++;
  return {
    success: true,
    data: data
  };
}
async function fetchShopsData(shopId1, periodDays, startDate, endDate) {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[11]++;
  // Get current month's start and end dates
  const now =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[38]++, new Date());
  const startOfMonth =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[39]++, new Date(now.getFullYear(), now.getMonth(), 1));
  const endOfMonth =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[40]++, new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999));
  // 1. Fetch shops and their inventory with optional shop filtering
  const shopsWithInventory =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[41]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[12]++;
    const where =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[42]++, shopId1 ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[9][0]++, {
      id: shopId1
    }) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[9][1]++, {}));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[43]++;
    return _prisma.prisma.shop.findMany({
      where,
      include: {
        InventoryItem: {
          select: {
            quantity: true
          } // Only select quantity for stock calculation
        }
      }
    });
  }, [], "Failed to fetch shops data"));
  /* istanbul ignore next */
  cov_kcwhvrt63().s[44]++;
  if (
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[11][0]++, !shopsWithInventory) ||
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[11][1]++, shopsWithInventory.length === 0)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[10][0]++;
    cov_kcwhvrt63().s[45]++;
    return {
      success: true,
      data: []
    };
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[10][1]++;
  }
  // 2. Fetch aggregated sales data for all relevant shops in the current month
  const shopIds =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[46]++, shopsWithInventory.map(s => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[13]++;
    cov_kcwhvrt63().s[47]++;
    return s.id;
  }));
  const monthlySalesByShop =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[48]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[14]++;
    cov_kcwhvrt63().s[49]++;
    return _prisma.prisma.invoice.groupBy({
      by: ["shopId"],
      where: {
        shopId: {
          in: shopIds
        },
        createdAt: {
          gte: startOfMonth,
          lte: endOfMonth
        }
      },
      _sum: {
        total: true
      }
    });
  }, [], "Failed to fetch aggregated sales data for shops"));
  // Create a map for easy lookup of sales by shopId
  const salesMap =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[50]++, new Map());
  /* istanbul ignore next */
  cov_kcwhvrt63().s[51]++;
  if (Array.isArray(monthlySalesByShop)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[12][0]++;
    cov_kcwhvrt63().s[52]++;
    monthlySalesByShop.forEach(sale => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[15]++;
      cov_kcwhvrt63().s[53]++;
      if (sale.shopId !== null) {
        /* istanbul ignore next */
        cov_kcwhvrt63().b[13][0]++;
        cov_kcwhvrt63().s[54]++;
        salesMap.set(sale.shopId,
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[14][0]++, sale._sum.total) ||
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[14][1]++, 0));
      } else
      /* istanbul ignore next */
      {
        cov_kcwhvrt63().b[13][1]++;
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[12][1]++;
  }
  // 3. Combine shop data with their sales and stock
  const data =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[55]++, shopsWithInventory.map(shop => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[16]++;
    const totalStock =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[56]++, shop.InventoryItem.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[17]++;
      cov_kcwhvrt63().s[57]++;
      return sum + item.quantity;
    }, 0));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[58]++;
    return {
      name: shop.name,
      sales:
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[15][0]++, salesMap.get(shop.id)) ||
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[15][1]++, 0),
      stock: totalStock
    };
  }));
  // Filter out shops with no inventory (if still desired, or adjust logic)
  const shopsToDisplay =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[59]++, data.filter(shop => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[18]++;
    cov_kcwhvrt63().s[60]++;
    return /* istanbul ignore next */(cov_kcwhvrt63().b[16][0]++, shop.stock > 0) ||
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[16][1]++, shop.sales > 0);
  })); // show if stock or sales
  /* istanbul ignore next */
  cov_kcwhvrt63().s[61]++;
  return {
    success: true,
    data: shopsToDisplay
  };
}
const GET =
/* istanbul ignore next */
(cov_kcwhvrt63().s[62]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[19]++;
  cov_kcwhvrt63().s[63]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[64]++, await (0, _auth.validateTokenPermission)(request, "view_dashboard"));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[65]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_kcwhvrt63().b[17][0]++;
      cov_kcwhvrt63().s[66]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_kcwhvrt63().b[17][1]++;
    }
    // Check cache first with shop context
    const cacheKey =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[67]++, `dashboard:shops:${context.isFiltered ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[18][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[18][1]++, "all")}`);
    const cachedData =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[68]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[69]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_kcwhvrt63().b[19][0]++;
      cov_kcwhvrt63().s[70]++;
      console.log("✅ Shops data served from cache");
      /* istanbul ignore next */
      cov_kcwhvrt63().s[71]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_kcwhvrt63().b[19][1]++;
    }
    cov_kcwhvrt63().s[72]++;
    console.log("\uD83D\uDD04 Fetching fresh shops data with shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered
    });
    const shopsResult =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[73]++, await fetchShopsData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[20][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[20][1]++, null)));
    // Add metadata to response
    const responseData =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[74]++, {
      ...shopsResult,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache for 5 minutes (shop data changes less frequently)
    /* istanbul ignore next */
    cov_kcwhvrt63().s[75]++;
    await _cache.cacheService.set(cacheKey, responseData, 300);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[76]++;
    console.log("\uD83D\uDCBE Shops data cached for 5 minutes");
    /* istanbul ignore next */
    cov_kcwhvrt63().s[77]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_kcwhvrt63().s[78]++;
    console.error("Error fetching shop performance data:", error);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[79]++;
    return _server.NextResponse.json({
      success: false,
      data: [],
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[21][0]++, error.message) :
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[21][1]++, "Unknown error"),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,