{"version":3,"names":["authDelete","cov_2hqdskfdrz","f","s","authFetch","authGet","authPatch","authPost","authPut","getCsrfToken","setTokenProvider","setupFetchInterceptor","tokenProvider","provider","getAuthToken","b","document","value","cookie","parts","split","length","token","pop","shift","undefined","url","options","console","warn","log","substring","headers","hasOwnProperty","body","FormData","method","csrfToken","response","fetch","status","window","location","pathname","includes","href","data","JSON","stringify","originalFetch","urlString","toString","startsWith","origin"],"sources":["/Users/sachin/Documents/md-sports-/src/utils/api.ts"],"sourcesContent":["/**\n * Utility for making authenticated API requests\n */\n\n// Token provider - will be set by AuthProvider\nlet tokenProvider: (() => string | null) | null = null;\n\n/**\n * Set the token provider function\n * This should be called by the AuthProvider to provide access to the current token\n */\nexport const setTokenProvider = (provider: () => string | null) => {\n    tokenProvider = provider;\n};\n\n/**\n * Get the current authentication token\n */\nconst getAuthToken = (): string | null => {\n    // Use the token provider if available\n    if (tokenProvider) {\n        return tokenProvider();\n    }\n    \n    // Fallback to cookies only (not localStorage) for security\n    // This is only used during SSR or before the auth provider is initialized\n    if (typeof document !== 'undefined') {\n        // Try to get token from cookie (if server sets it as non-httpOnly for development)\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; accessToken=`);\n        if (parts.length === 2) {\n            const token = parts.pop()?.split(';').shift();\n            if (token) return token;\n        }\n    }\n    \n    return null;\n};\n\n/**\n * Get CSRF token from cookies\n */\nexport const getCsrfToken = (): string | undefined => {\n    if (typeof document === 'undefined') return undefined;\n\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; csrfToken=`);\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\n    return undefined;\n};\n\n/**\n * Enhanced fetch function that automatically adds authentication token\n */\nexport const authFetch = async (url: string, options: RequestInit = {}) => {\n    // Get token using the centralized method\n    const token = getAuthToken();\n\n    if (!token) {\n        console.warn('No auth token found for request to:', url);\n    } else {\n        console.log(`Making authenticated request to ${url} with token: ${token.substring(0, 10)}...`);\n    }\n\n    // Prepare headers with authentication\n    const headers: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {}),\n        'Authorization': token ? `Bearer ${token}` : '',\n    };\n\n    // If content type is not explicitly set and we're not sending FormData,\n    // default to JSON content type\n    if (\n        !options.headers?.hasOwnProperty('Content-Type') &&\n        !(options.body instanceof FormData)\n    ) {\n        headers['Content-Type'] = 'application/json';\n    }\n\n    // Add CSRF token for non-GET requests\n    if (options.method && options.method !== 'GET' && options.method !== 'HEAD') {\n        const csrfToken = getCsrfToken();\n        if (csrfToken) {\n            headers['X-CSRF-Token'] = csrfToken;\n        }\n    }\n\n    // Make the request with authentication header\n    const response = await fetch(url, {\n        ...options,\n        headers,\n    });\n\n    // If unauthorized and not on the login page, redirect to login\n    if (response.status === 401 && typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {\n        console.warn('Authentication error (401) for request to:', url);\n        // Don't clear localStorage - let the auth provider handle this\n        window.location.href = '/login';\n        return response;\n    }\n\n    return response;\n};\n\n/**\n * GET request with authentication\n */\nexport const authGet = async (url: string, options: RequestInit = {}) => {\n    return authFetch(url, { ...options, method: 'GET' });\n};\n\n/**\n * POST request with authentication\n */\nexport const authPost = async (url: string, data: any, options: RequestInit = {}) => {\n    return authFetch(url, {\n        ...options,\n        method: 'POST',\n        body: JSON.stringify(data),\n    });\n};\n\n/**\n * PUT request with authentication\n */\nexport const authPut = async (url: string, data: any, options: RequestInit = {}) => {\n    return authFetch(url, {\n        ...options,\n        method: 'PUT',\n        body: JSON.stringify(data),\n    });\n};\n\n/**\n * DELETE request with authentication\n */\nexport const authDelete = async (url: string, options: RequestInit = {}) => {\n    return authFetch(url, { ...options, method: 'DELETE' });\n};\n\n/**\n * PATCH request with authentication\n */\nexport const authPatch = async (url: string, data: any, options: RequestInit = {}) => {\n    return authFetch(url, {\n        ...options,\n        method: 'PATCH',\n        body: JSON.stringify(data),\n    });\n};\n\n/**\n * Setup global fetch interceptor to add authentication token to all API calls\n * Call this once at the app initialization\n */\nexport const setupFetchInterceptor = () => {\n    if (typeof window !== 'undefined') {\n        const originalFetch = window.fetch;\n\n        window.fetch = async (url: RequestInfo | URL, options?: RequestInit) => {\n            // Only intercept API calls to our own API (starting with /api)\n            const urlString = url.toString();\n            if (urlString.startsWith('/api') || urlString.startsWith(window.location.origin + '/api')) {\n                options = options || {};\n                options.headers = options.headers || {};\n\n                // Cast headers to any to allow string indexing\n                const headers = options.headers as any;\n\n                // Add authentication header if token exists\n                const token = getAuthToken();\n                if (token && !headers['Authorization']) {\n                    headers['Authorization'] = `Bearer ${token}`;\n                }\n\n                // Add CSRF token for non-GET requests\n                if (options.method && options.method !== 'GET' && options.method !== 'HEAD') {\n                    const csrfToken = getCsrfToken();\n                    if (csrfToken && !headers['X-CSRF-Token']) {\n                        headers['X-CSRF-Token'] = csrfToken;\n                        console.log(`Adding CSRF token for ${options.method} request to ${urlString}`);\n                    }\n                }\n            }\n\n            return originalFetch(url, options);\n        };\n\n        console.log('Fetch interceptor set up successfully');\n    }\n};"],"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","ignoreList":[]}