d9d4ac4b5bae02f48feb7c6bfc70e815
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _smsService = require("../../src/services/smsService");
const _prisma = require("../../src/lib/prisma");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock axios
_globals.jest.mock("axios");
const mockedAxios = _axios.default;
// Mock prisma
_globals.jest.mock("@/lib/prisma", ()=>({
        prisma: {
            setting: {
                findMany: _globals.jest.fn()
            },
            invoice: {
                findUnique: _globals.jest.fn()
            },
            customer: {
                findUnique: _globals.jest.fn()
            }
        }
    }));
const mockPrisma = _prisma.prisma;
(0, _globals.describe)("SMSService", ()=>{
    let smsService;
    (0, _globals.beforeEach)(()=>{
        smsService = new _smsService.SMSService();
        _globals.jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("init", ()=>{
        (0, _globals.it)("should initialize SMS service with settings from database", async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
            (0, _globals.expect)(mockPrisma.setting.findMany).toHaveBeenCalledWith({
                where: {
                    key: {
                        in: [
                            "sms_api_key",
                            "sms_user_id",
                            "sms_enabled"
                        ]
                    }
                }
            });
            (0, _globals.expect)(smsService.isConfigured()).toBe(true);
        });
        (0, _globals.it)("should handle missing settings gracefully", async ()=>{
            mockPrisma.setting.findMany.mockResolvedValue([]);
            await smsService.init();
            (0, _globals.expect)(smsService.isConfigured()).toBe(false);
        });
        (0, _globals.it)("should handle database errors during initialization", async ()=>{
            mockPrisma.setting.findMany.mockRejectedValue(new Error("Database error"));
            await (0, _globals.expect)(smsService.init()).rejects.toThrow("Database error");
        });
    });
    (0, _globals.describe)("isConfigured", ()=>{
        (0, _globals.it)("should return true when all required settings are present", async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
            (0, _globals.expect)(smsService.isConfigured()).toBe(true);
        });
        (0, _globals.it)("should return false when SMS is disabled", async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "false"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
            (0, _globals.expect)(smsService.isConfigured()).toBe(false);
        });
        (0, _globals.it)("should return false when API key is missing", async ()=>{
            const mockSettings = [
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
            (0, _globals.expect)(smsService.isConfigured()).toBe(false);
        });
    });
    (0, _globals.describe)("sendSMS", ()=>{
        (0, _globals.beforeEach)(async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
        });
        (0, _globals.it)("should send SMS successfully with valid phone number", async ()=>{
            const mockResponse = {
                data: {
                    status: "success",
                    message: "SMS sent successfully"
                }
            };
            mockedAxios.get.mockResolvedValue(mockResponse);
            const result = await smsService.sendSMS("0771234567", "Test message");
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith("https://app.notify.lk/api/v1/send", {
                params: {
                    user_id: "test-user-id",
                    api_key: "test-api-key",
                    sender_id: "NotifyDEMO",
                    to: "94771234567",
                    message: "Test message"
                }
            });
            (0, _globals.expect)(result).toEqual(mockResponse.data);
        });
        (0, _globals.it)("should format phone number correctly for different formats", async ()=>{
            const mockResponse = {
                data: {
                    status: "success"
                }
            };
            mockedAxios.get.mockResolvedValue(mockResponse);
            // Test with +94 prefix
            await smsService.sendSMS("+94771234567", "Test message");
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
                params: _globals.expect.objectContaining({
                    to: "94771234567"
                })
            }));
            // Test with 94 prefix
            await smsService.sendSMS("94771234567", "Test message");
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
                params: _globals.expect.objectContaining({
                    to: "94771234567"
                })
            }));
            // Test with 0 prefix
            await smsService.sendSMS("0771234567", "Test message");
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
                params: _globals.expect.objectContaining({
                    to: "94771234567"
                })
            }));
        });
        (0, _globals.it)("should throw error when service is not configured", async ()=>{
            const unconfiguredService = new _smsService.SMSService();
            mockPrisma.setting.findMany.mockResolvedValue([]);
            await unconfiguredService.init();
            await (0, _globals.expect)(unconfiguredService.sendSMS("0771234567", "Test message")).rejects.toThrow("SMS service is not configured");
        });
        (0, _globals.it)("should handle API errors gracefully", async ()=>{
            mockedAxios.get.mockRejectedValue(new Error("API Error"));
            await (0, _globals.expect)(smsService.sendSMS("0771234567", "Test message")).rejects.toThrow("API Error");
        });
        (0, _globals.it)("should handle invalid phone numbers", async ()=>{
            await (0, _globals.expect)(smsService.sendSMS("", "Test message")).rejects.toThrow();
            await (0, _globals.expect)(smsService.sendSMS("invalid-phone", "Test message")).rejects.toThrow();
        });
    });
    (0, _globals.describe)("sendInvoiceNotification", ()=>{
        (0, _globals.beforeEach)(async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
        });
        (0, _globals.it)("should send invoice notification successfully", async ()=>{
            const mockInvoice = {
                id: "inv-123",
                invoiceNumber: "INV-001",
                totalAmount: 1000,
                customerId: "cust-123",
                customer: {
                    id: "cust-123",
                    name: "John Doe",
                    phone: "0771234567"
                }
            };
            mockPrisma.invoice.findUnique.mockResolvedValue(mockInvoice);
            mockedAxios.get.mockResolvedValue({
                data: {
                    status: "success"
                }
            });
            const result = await smsService.sendInvoiceNotification("inv-123");
            (0, _globals.expect)(mockPrisma.invoice.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "inv-123"
                },
                include: {
                    customer: true
                }
            });
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
                params: _globals.expect.objectContaining({
                    to: "94771234567",
                    message: _globals.expect.stringContaining("INV-001")
                })
            }));
            (0, _globals.expect)(result).toEqual({
                status: "success"
            });
        });
        (0, _globals.it)("should throw error when invoice is not found", async ()=>{
            mockPrisma.invoice.findUnique.mockResolvedValue(null);
            await (0, _globals.expect)(smsService.sendInvoiceNotification("non-existent-id")).rejects.toThrow("Invoice not found");
        });
        (0, _globals.it)("should throw error when customer phone is missing", async ()=>{
            const mockInvoice = {
                id: "inv-123",
                invoiceNumber: "INV-001",
                totalAmount: 1000,
                customerId: "cust-123",
                customer: {
                    id: "cust-123",
                    name: "John Doe",
                    phone: null
                }
            };
            mockPrisma.invoice.findUnique.mockResolvedValue(mockInvoice);
            await (0, _globals.expect)(smsService.sendInvoiceNotification("inv-123")).rejects.toThrow("Customer phone number not available");
        });
    });
    (0, _globals.describe)("sendPaymentReminder", ()=>{
        (0, _globals.beforeEach)(async ()=>{
            const mockSettings = [
                {
                    key: "sms_api_key",
                    value: "test-api-key"
                },
                {
                    key: "sms_user_id",
                    value: "test-user-id"
                },
                {
                    key: "sms_enabled",
                    value: "true"
                }
            ];
            mockPrisma.setting.findMany.mockResolvedValue(mockSettings);
            await smsService.init();
        });
        (0, _globals.it)("should send payment reminder successfully", async ()=>{
            const mockInvoice = {
                id: "inv-123",
                invoiceNumber: "INV-001",
                totalAmount: 1000,
                dueDate: new Date("2024-01-15"),
                customerId: "cust-123",
                customer: {
                    id: "cust-123",
                    name: "John Doe",
                    phone: "0771234567"
                }
            };
            mockPrisma.invoice.findUnique.mockResolvedValue(mockInvoice);
            mockedAxios.get.mockResolvedValue({
                data: {
                    status: "success"
                }
            });
            const result = await smsService.sendPaymentReminder("inv-123");
            (0, _globals.expect)(mockPrisma.invoice.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "inv-123"
                },
                include: {
                    customer: true
                }
            });
            (0, _globals.expect)(mockedAxios.get).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
                params: _globals.expect.objectContaining({
                    to: "94771234567",
                    message: _globals.expect.stringContaining("payment reminder")
                })
            }));
            (0, _globals.expect)(result).toEqual({
                status: "success"
            });
        });
        (0, _globals.it)("should throw error when invoice is not found", async ()=>{
            mockPrisma.invoice.findUnique.mockResolvedValue(null);
            await (0, _globals.expect)(smsService.sendPaymentReminder("non-existent-id")).rejects.toThrow("Invoice not found");
        });
        (0, _globals.it)("should throw error when customer phone is missing", async ()=>{
            const mockInvoice = {
                id: "inv-123",
                invoiceNumber: "INV-001",
                totalAmount: 1000,
                dueDate: new Date("2024-01-15"),
                customerId: "cust-123",
                customer: {
                    id: "cust-123",
                    name: "John Doe",
                    phone: null
                }
            };
            mockPrisma.invoice.findUnique.mockResolvedValue(mockInvoice);
            await (0, _globals.expect)(smsService.sendPaymentReminder("inv-123")).rejects.toThrow("Customer phone number not available");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,