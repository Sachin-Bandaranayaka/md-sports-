{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/authService.test.ts"],"sourcesContent":["// Fixed Unit tests for AuthService\n// This file tests the authentication service functionality\n\nimport { jest } from '@jest/globals';\n\n// Mock dependencies BEFORE importing the service\nconst mockCacheService = {\n  get: jest.fn() as jest.MockedFunction<any>,\n  set: jest.fn() as jest.MockedFunction<any>,\n  delete: jest.fn() as jest.MockedFunction<any>,\n  increment: jest.fn() as jest.MockedFunction<any>,\n  generateKey: jest.fn() as jest.MockedFunction<any>,\n  clear: jest.fn() as jest.MockedFunction<any>,\n};\n\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn() as jest.MockedFunction<any>,\n    findFirst: jest.fn() as jest.MockedFunction<any>,\n    create: jest.fn() as jest.MockedFunction<any>,\n    update: jest.fn() as jest.MockedFunction<any>,\n    findMany: jest.fn() as jest.MockedFunction<any>,\n    delete: jest.fn() as jest.MockedFunction<any>,\n  },\n  permission: {\n    findMany: jest.fn() as jest.MockedFunction<any>,\n  },\n  session: {\n    create: jest.fn() as jest.MockedFunction<any>,\n    findUnique: jest.fn() as jest.MockedFunction<any>,\n    update: jest.fn() as jest.MockedFunction<any>,\n    deleteMany: jest.fn() as jest.MockedFunction<any>,\n  },\n  auditLog: {\n    create: jest.fn() as jest.MockedFunction<any>,\n  },\n};\n\nconst mockBcrypt = {\n  compare: jest.fn() as jest.MockedFunction<any>,\n  hash: jest.fn(),\n  genSalt: jest.fn(),\n};\n\n// Mock modules\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('@/lib/cache', () => ({\n  cacheService: mockCacheService,\n  CACHE_CONFIG: {\n    KEYS: {\n      USER_SESSION: 'user_session',\n      TOKEN_VALIDATION: 'token_validation',\n    },\n    TTL: {\n      USER_SESSION: 3600,\n      TOKEN_VALIDATION: 1800,\n    },\n  },\n}));\n\njest.mock('bcryptjs', () => mockBcrypt);\n// Create mock functions\nconst mockJwtSign = jest.fn();\nconst mockJwtVerify = jest.fn();\nconst mockJwtDecode = jest.fn();\n\nclass MockTokenExpiredError extends Error {\n  expiredAt: Date;\n  constructor(message: string, expiredAt?: Date) {\n    super(message);\n    this.name = 'TokenExpiredError';\n    this.expiredAt = expiredAt || new Date();\n  }\n}\n\nclass MockJsonWebTokenError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'JsonWebTokenError';\n  }\n}\n\n// Mock jsonwebtoken before any imports\njest.doMock('jsonwebtoken', () => ({\n  __esModule: true,\n  default: {\n    sign: mockJwtSign,\n    verify: mockJwtVerify,\n    decode: mockJwtDecode,\n    TokenExpiredError: MockTokenExpiredError,\n    JsonWebTokenError: MockJsonWebTokenError,\n  },\n  sign: mockJwtSign,\n  verify: mockJwtVerify,\n  decode: mockJwtDecode,\n  TokenExpiredError: MockTokenExpiredError,\n  JsonWebTokenError: MockJsonWebTokenError,\n}));\n\n// Import after mocking\nimport { authenticateUser, generateToken, verifyToken, parseTimeStringToSeconds, getUserFromDecodedPayload, getUserFromToken } from '@/services/authService';\n\n// Create proper mock types for easier access\nconst mockUserFindFirst = mockPrisma.user.findFirst as jest.MockedFunction<any>;\nconst mockPermissionFindMany = mockPrisma.permission.findMany as jest.MockedFunction<any>;\nconst mockJwt = {\n  sign: mockJwtSign,\n  verify: mockJwtVerify,\n  decode: mockJwtDecode,\n  TokenExpiredError: MockTokenExpiredError,\n  JsonWebTokenError: MockJsonWebTokenError,\n};\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    process.env.JWT_SECRET = 'test-secret-key';\n    process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = '12h';\n    \n    // Setup default cache mocks\n    mockCacheService.generateKey.mockReturnValue('mock-cache-key');\n    mockCacheService.get.mockResolvedValue(null);\n    mockCacheService.set.mockResolvedValue(true);\n    mockCacheService.delete.mockResolvedValue(true);\n    \n    // Reset Prisma mocks\n    mockUserFindFirst.mockResolvedValue(null);\n    mockPermissionFindMany.mockResolvedValue([]);\n    \n    // Reset JWT mocks\n    mockJwt.sign.mockReturnValue('mocked-jwt-token');\n    mockJwt.verify.mockReturnValue({ userId: 1, email: 'test@example.com' });\n    mockJwt.decode.mockReturnValue({ userId: 1, email: 'test@example.com' });\n  });\n\n  describe('parseTimeStringToSeconds', () => {\n    test('should parse seconds correctly', () => {\n      expect(parseTimeStringToSeconds('30s')).toBe(30);\n    });\n\n    test('should parse minutes correctly', () => {\n      expect(parseTimeStringToSeconds('5m')).toBe(300);\n    });\n\n    test('should parse hours correctly', () => {\n      expect(parseTimeStringToSeconds('2h')).toBe(7200);\n    });\n\n    test('should parse days correctly', () => {\n      expect(parseTimeStringToSeconds('1d')).toBe(86400);\n    });\n\n    test('should return 0 for invalid input', () => {\n      expect(parseTimeStringToSeconds('')).toBe(0);\n      expect(parseTimeStringToSeconds('invalid')).toBe(0);\n      expect(parseTimeStringToSeconds('abc')).toBe(0);\n    });\n\n    test('should handle edge cases', () => {\n      expect(parseTimeStringToSeconds('0s')).toBe(0);\n      expect(parseTimeStringToSeconds('100x')).toBe(100); // Falls back to parsing the number part\n    });\n  });\n\n  describe('authenticateUser', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      password: 'hashedpassword',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      roleName: 'admin',\n      permissions: null,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should authenticate valid user credentials', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(true as any);\n      mockJwt.sign.mockReturnValue('mock-jwt-token' as any);\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(true);\n      expect(result.token).toBe('mock-jwt-token');\n      expect(result.user).toEqual({\n        id: 1,\n        email: 'test@example.com',\n        username: 'testuser',\n        fullName: 'testuser',\n        roleId: 1,\n        roleName: 'admin',\n        shopId: 1,\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockUserFindFirst).toHaveBeenCalledWith({\n        where: {\n          email: 'test@example.com',\n          isActive: true\n        },\n        include: {\n          role: {\n            include: {\n              permissions: {\n                select: { name: true }\n              }\n            }\n          }\n        }\n      });\n    });\n\n    test('should reject invalid email', async () => {\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await authenticateUser('invalid@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject invalid password', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(false as any);\n\n      const result = await authenticateUser('test@example.com', 'wrongpassword');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject inactive user', async () => {\n      mockUserFindFirst.mockResolvedValue(null); // findFirst with isActive: true returns null\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should handle database errors gracefully', async () => {\n      mockUserFindFirst.mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n\n    test('should handle bcrypt errors gracefully', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockRejectedValue(new Error('Bcrypt error'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n  });\n\n  describe('generateToken', () => {\n    const mockPayload = {\n      sub: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      roleId: 1,\n      shopId: 1,\n      permissions: ['read_products', 'write_products']\n    };\n\n    test('should generate JWT token', () => {\n      const mockToken = 'mock-jwt-token';\n      mockJwt.sign.mockReturnValue(mockToken);\n\n      const result = generateToken(mockPayload);\n\n      expect(result).toBe(mockToken);\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n          mockPayload,\n          'test-secret-key',\n          { expiresIn: '12h' }\n        );\n    });\n  });\n\n  describe('verifyToken', () => {\n    test('should verify valid token from cache', async () => {\n      const mockPayload = {\n        sub: '1',\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(mockPayload);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should verify valid token and cache result', async () => {\n      const mockPayload = {\n        sub: '1',\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockJwt.verify.mockReturnValue(mockPayload as any);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret-key');\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      await expect(verifyToken('invalid-token')).rejects.toThrow('Invalid token');\n    });\n\n    test('should throw error for expired token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        const error = new Error('Token expired') as any;\n        error.name = 'TokenExpiredError';\n        error.expiredAt = new Date();\n        throw error;\n      });\n\n      await expect(verifyToken('expired-token')).rejects.toThrow('Token expired');\n    });\n  });\n\n  describe('getUserFromDecodedPayload', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should return user from cache', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const cachedUser = {\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      };\n      \n      mockCacheService.get.mockResolvedValue(cachedUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual(cachedUser);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should return user from database and cache it', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockUserFindFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should return null for null payload', async () => {\n      const result = await getUserFromDecodedPayload(null);\n      expect(result).toBeNull();\n    });\n\n    test('should return null for invalid payload', async () => {\n      const result = await getUserFromDecodedPayload({} as any);\n      expect(result).toBeNull();\n    });\n\n    test('should return null when user not found', async () => {\n      const payload = {\n        sub: 999,\n        username: 'nonexistent',\n        email: 'nonexistent@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await getUserFromDecodedPayload(payload);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getUserFromToken', () => {\n    test('should return user from valid token', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'testuser',\n        isActive: true,\n        roleId: 1,\n        shopId: 1,\n        role: {\n          id: 1,\n          name: 'admin',\n          permissions: [{ name: 'read_products' }]\n        }\n      };\n\n      // Mock verifyToken to return payload\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => mockPayload);\n      \n      // Mock getUserFromDecodedPayload\n      mockUserFindFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromToken('valid-token');\n      \n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products']\n      });\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockCacheService.generateKey.mockReturnValue('test-cache-key');\n      const jwt = require('jsonwebtoken');\n      \n      // Mock jwt.verify to throw JsonWebTokenError\n      mockJwt.verify.mockImplementation(() => {\n        const error = new Error('jwt malformed');\n        error.name = 'JsonWebTokenError';\n        throw error;\n      });\n\n      await expect(getUserFromToken('invalid')).rejects.toThrow('jwt malformed');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle missing JWT_SECRET', async () => {\n      const originalSecret = process.env.JWT_SECRET;\n      delete process.env.JWT_SECRET;\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('secretOrPrivateKey must have a value');\n      });\n      \n      await expect(verifyToken('any-token')).rejects.toThrow();\n      \n      // Restore the secret\n      process.env.JWT_SECRET = originalSecret;\n    });\n\n    test('should handle malformed tokens gracefully', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      \n      // Mock jwt.verify to throw JsonWebTokenError\n      mockJwt.verify.mockImplementation((token: string) => {\n        console.log('Mock jwt.verify called with:', token);\n        const error = new mockJwt.JsonWebTokenError('jwt malformed');\n        throw error;\n      });\n      \n      await expect(verifyToken('malformed-token')).rejects.toThrow('jwt malformed');\n    });\n\n    test('should handle empty token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      \n      await expect(verifyToken('')).rejects.toThrow('jwt must be provided');\n    });\n  });\n});"],"names":["mockCacheService","get","jest","fn","set","delete","increment","generateKey","clear","mockPrisma","user","findUnique","findFirst","create","update","findMany","permission","session","deleteMany","auditLog","mockBcrypt","compare","hash","genSalt","mock","__esModule","default","cacheService","CACHE_CONFIG","KEYS","USER_SESSION","TOKEN_VALIDATION","TTL","mockJwtSign","mockJwtVerify","mockJwtDecode","MockTokenExpiredError","Error","constructor","message","expiredAt","name","Date","MockJsonWebTokenError","doMock","sign","verify","decode","TokenExpiredError","JsonWebTokenError","mockUserFindFirst","mockPermissionFindMany","mockJwt","describe","beforeEach","clearAllMocks","process","env","JWT_SECRET","JWT_ACCESS_TOKEN_EXPIRES_IN","mockReturnValue","mockResolvedValue","userId","email","test","expect","parseTimeStringToSeconds","toBe","mockUser","id","password","isActive","roleId","shopId","roleName","permissions","role","result","authenticateUser","success","token","toEqual","username","fullName","toHaveBeenCalledWith","where","include","select","mockRejectedValue","mockPayload","sub","mockToken","generateToken","expiresIn","iat","Math","floor","now","exp","verifyToken","toHaveBeenCalled","mockImplementation","rejects","toThrow","error","payload","cachedUser","getUserFromDecodedPayload","toBeNull","getUserFromToken","jwt","require","originalSecret","console","log"],"mappings":"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"}