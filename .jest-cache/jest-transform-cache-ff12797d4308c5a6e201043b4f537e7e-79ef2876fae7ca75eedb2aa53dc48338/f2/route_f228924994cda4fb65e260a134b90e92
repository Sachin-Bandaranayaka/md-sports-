f459e14fe49a81f845610dcfae1a00ff
"use strict";

/* istanbul ignore next */
function cov_2l5rqpdkxm() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts";
  var hash = "6121bf1d0f7e946c135695536f8018019d0b8520";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 46
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "9": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "14": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "15": {
        start: {
          line: 54,
          column: 24
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "16": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "17": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "18": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "19": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "20": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "21": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 51
        }
      },
      "22": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 57
        }
      },
      "23": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 19
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 83,
            column: 15
          },
          end: {
            line: 83,
            column: 18
          }
        },
        loc: {
          start: {
            line: 83,
            column: 21
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 34
          }
        }, {
          start: {
            line: 25,
            column: 38
          },
          end: {
            line: 25,
            column: 61
          }
        }, {
          start: {
            line: 25,
            column: 65
          },
          end: {
            line: 25,
            column: 84
          }
        }, {
          start: {
            line: 25,
            column: 88
          },
          end: {
            line: 25,
            column: 114
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 48
          }
        }, {
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 49,
            column: 56
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 50,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 50,
            column: 60
          }
        }, {
          start: {
            line: 50,
            column: 64
          },
          end: {
            line: 50,
            column: 68
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 77,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 44
          },
          end: {
            line: 77,
            column: 57
          }
        }, {
          start: {
            line: 77,
            column: 60
          },
          end: {
            line: 77,
            column: 73
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 44
          },
          end: {
            line: 102,
            column: 57
          }
        }, {
          start: {
            line: 102,
            column: 60
          },
          end: {
            line: 102,
            column: 73
          }
        }],
        line: 102
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: Request) {\n    try {\n        const paymentData = await request.json();\n\n        // Validate payment data\n        if (!paymentData.invoiceId || !paymentData.customerId || !paymentData.amount || !paymentData.paymentMethod) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required payment information'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate the amount is positive\n        if (paymentData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Payment amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Create payment in database\n        const payment = await prisma.payment.create({\n            data: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            }\n        });\n\n        // Get the invoice information for reference\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: paymentData.invoiceId },\n            include: {\n                payments: true\n            }\n        });\n\n        // NOTE: We no longer automatically update the invoice status here\n        // The invoice status will only be updated when a receipt is created\n        // This ensures proper payment documentation before marking as paid\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Payment recorded successfully',\n                data: payment\n            },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error recording payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error recording payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function GET() {\n    try {\n        // Fetch all payments with related invoice, customer, and account info\n        const payments = await prisma.payment.findMany({\n            include: {\n                invoice: true,\n                customer: true,\n                account: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(payments);\n    } catch (error) {\n        console.error('Error fetching payments:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching payments',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "paymentData", "json", "invoiceId", "customerId", "amount", "paymentMethod", "NextResponse", "success", "message", "status", "payment", "prisma", "create", "data", "accountId", "referenceNumber", "invoice", "findUnique", "where", "id", "include", "payments", "error", "console", "Error", "String", "findMany", "customer", "account", "orderBy", "createdAt"],
      mappings: ";;;;;;;;;;;IA0EsBA,GAAG;eAAHA;;IAvEAC,IAAI;eAAJA;;;wBAHO;wBACN;AAEhB,eAAeA,KAAKC,OAAgB;IACvC,IAAI;QACA,MAAMC,cAAc,MAAMD,QAAQE,IAAI;QAEtC,wBAAwB;QACxB,IAAI,CAACD,YAAYE,SAAS,IAAI,CAACF,YAAYG,UAAU,IAAI,CAACH,YAAYI,MAAM,IAAI,CAACJ,YAAYK,aAAa,EAAE;YACxG,OAAOC,oBAAY,CAACL,IAAI,CACpB;gBACIM,SAAS;gBACTC,SAAS;YACb,GACA;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,kCAAkC;QAClC,IAAIT,YAAYI,MAAM,IAAI,GAAG;YACzB,OAAOE,oBAAY,CAACL,IAAI,CACpB;gBACIM,SAAS;gBACTC,SAAS;YACb,GACA;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,6BAA6B;QAC7B,MAAMC,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,MAAM,CAAC;YACxCC,MAAM;gBACFX,WAAWF,YAAYE,SAAS;gBAChCC,YAAYH,YAAYG,UAAU;gBAClCC,QAAQJ,YAAYI,MAAM;gBAC1BC,eAAeL,YAAYK,aAAa;gBACxCS,WAAWd,YAAYc,SAAS,IAAI;gBACpCC,iBAAiBf,YAAYe,eAAe,IAAI;YACpD;QACJ;QAEA,4CAA4C;QAC5C,MAAMC,UAAU,MAAML,cAAM,CAACK,OAAO,CAACC,UAAU,CAAC;YAC5CC,OAAO;gBAAEC,IAAInB,YAAYE,SAAS;YAAC;YACnCkB,SAAS;gBACLC,UAAU;YACd;QACJ;QAEA,kEAAkE;QAClE,oEAAoE;QACpE,mEAAmE;QAEnE,OAAOf,oBAAY,CAACL,IAAI,CACpB;YACIM,SAAS;YACTC,SAAS;YACTK,MAAMH;QACV,GACA;YAAED,QAAQ;QAAI;IAEtB,EAAE,OAAOa,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAOhB,oBAAY,CAACL,IAAI,CACpB;YACIM,SAAS;YACTC,SAAS;YACTc,OAAOA,iBAAiBE,QAAQF,MAAMd,OAAO,GAAGiB,OAAOH;QAC3D,GACA;YAAEb,QAAQ;QAAI;IAEtB;AACJ;AAEO,eAAeZ;IAClB,IAAI;QACA,sEAAsE;QACtE,MAAMwB,WAAW,MAAMV,cAAM,CAACD,OAAO,CAACgB,QAAQ,CAAC;YAC3CN,SAAS;gBACLJ,SAAS;gBACTW,UAAU;gBACVC,SAAS;YACb;YACAC,SAAS;gBACLC,WAAW;YACf;QACJ;QAEA,OAAOxB,oBAAY,CAACL,IAAI,CAACoB;IAC7B,EAAE,OAAOC,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAOhB,oBAAY,CAACL,IAAI,CACpB;YACIM,SAAS;YACTC,SAAS;YACTc,OAAOA,iBAAiBE,QAAQF,MAAMd,OAAO,GAAGiB,OAAOH;QAC3D,GACA;YAAEb,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6121bf1d0f7e946c135695536f8018019d0b8520"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l5rqpdkxm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l5rqpdkxm();
cov_2l5rqpdkxm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[0]++;
  cov_2l5rqpdkxm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2l5rqpdkxm().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().f[1]++;
    cov_2l5rqpdkxm().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().f[2]++;
    cov_2l5rqpdkxm().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[7]++, require("../../../lib/prisma"));
async function POST(request) {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[3]++;
  cov_2l5rqpdkxm().s[8]++;
  try {
    const paymentData =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[9]++, await request.json());
    // Validate payment data
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[10]++;
    if (
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[1][0]++, !paymentData.invoiceId) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[1][1]++, !paymentData.customerId) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[1][2]++, !paymentData.amount) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[1][3]++, !paymentData.paymentMethod)) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[0][0]++;
      cov_2l5rqpdkxm().s[11]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required payment information"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[0][1]++;
    }
    // Validate the amount is positive
    cov_2l5rqpdkxm().s[12]++;
    if (paymentData.amount <= 0) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[2][0]++;
      cov_2l5rqpdkxm().s[13]++;
      return _server.NextResponse.json({
        success: false,
        message: "Payment amount must be greater than zero"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[2][1]++;
    }
    // Create payment in database
    const payment =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[14]++, await _prisma.prisma.payment.create({
      data: {
        invoiceId: paymentData.invoiceId,
        customerId: paymentData.customerId,
        amount: paymentData.amount,
        paymentMethod: paymentData.paymentMethod,
        accountId:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[3][0]++, paymentData.accountId) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[3][1]++, null),
        referenceNumber:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[4][0]++, paymentData.referenceNumber) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[4][1]++, null)
      }
    }));
    // Get the invoice information for reference
    const invoice =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[15]++, await _prisma.prisma.invoice.findUnique({
      where: {
        id: paymentData.invoiceId
      },
      include: {
        payments: true
      }
    }));
    // NOTE: We no longer automatically update the invoice status here
    // The invoice status will only be updated when a receipt is created
    // This ensures proper payment documentation before marking as paid
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[16]++;
    return _server.NextResponse.json({
      success: true,
      message: "Payment recorded successfully",
      data: payment
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[17]++;
    console.error("Error recording payment:", error);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[18]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error recording payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[5][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[4]++;
  cov_2l5rqpdkxm().s[19]++;
  try {
    // Fetch all payments with related invoice, customer, and account info
    const payments =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[20]++, await _prisma.prisma.payment.findMany({
      include: {
        invoice: true,
        customer: true,
        account: true
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[21]++;
    return _server.NextResponse.json(payments);
  } catch (error) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[22]++;
    console.error("Error fetching payments:", error);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[23]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching payments",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[6][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,