{"version":3,"names":["GET","cov_2l5rqpdkxm","f","s","POST","request","paymentData","json","b","invoiceId","customerId","amount","paymentMethod","_server","NextResponse","success","message","status","payment","_prisma","prisma","create","data","accountId","referenceNumber","invoice","findUnique","where","id","include","payments","error","console","Error","String","findMany","customer","account","orderBy","createdAt"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(request: Request) {\n    try {\n        const paymentData = await request.json();\n\n        // Validate payment data\n        if (!paymentData.invoiceId || !paymentData.customerId || !paymentData.amount || !paymentData.paymentMethod) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required payment information'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate the amount is positive\n        if (paymentData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Payment amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Create payment in database\n        const payment = await prisma.payment.create({\n            data: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            }\n        });\n\n        // Get the invoice information for reference\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: paymentData.invoiceId },\n            include: {\n                payments: true\n            }\n        });\n\n        // NOTE: We no longer automatically update the invoice status here\n        // The invoice status will only be updated when a receipt is created\n        // This ensures proper payment documentation before marking as paid\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Payment recorded successfully',\n                data: payment\n            },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error recording payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error recording payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function GET() {\n    try {\n        // Fetch all payments with related invoice, customer, and account info\n        const payments = await prisma.payment.findMany({\n            include: {\n                invoice: true,\n                customer: true,\n                account: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(payments);\n    } catch (error) {\n        console.error('Error fetching payments:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching payments',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}