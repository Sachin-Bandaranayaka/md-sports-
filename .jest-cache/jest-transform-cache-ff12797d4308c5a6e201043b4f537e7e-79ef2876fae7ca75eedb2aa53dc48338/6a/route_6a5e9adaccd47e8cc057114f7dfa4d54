a9b7c131d0e78f09c3c1d2c3b8754529
"use strict";

/* istanbul ignore next */
function cov_1trv9o0a18() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/admin/cleanup-tokens/route.ts";
  var hash = "0f19bf5db017c565f3671df8126ba1b6150d2811";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/admin/cleanup-tokens/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 89
        }
      },
      "5": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 64
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "8": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 59
        }
      },
      "9": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "11": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "12": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 68
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "14": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 71
        }
      },
      "16": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "17": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "18": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 28
        }
      },
      "19": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 30
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "21": {
        start: {
          line: 63,
          column: 31
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "22": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "23": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 85
        }
      },
      "24": {
        start: {
          line: 78,
          column: 39
        },
        end: {
          line: 78,
          column: 73
        }
      },
      "25": {
        start: {
          line: 78,
          column: 68
        },
        end: {
          line: 78,
          column: 72
        }
      },
      "26": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "27": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 54
        }
      },
      "28": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 33
        }
      },
      "29": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 100
        }
      },
      "30": {
        start: {
          line: 95,
          column: 30
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "31": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 81
        }
      },
      "32": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 55
        }
      },
      "33": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "34": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 53
        }
      },
      "35": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 78,
            column: 63
          },
          end: {
            line: 78,
            column: 64
          }
        },
        loc: {
          start: {
            line: 78,
            column: 68
          },
          end: {
            line: 78,
            column: 72
          }
        },
        line: 78
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 23
          }
        }, {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 60
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 22
          }
        }, {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 71
          }
        }],
        line: 34
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/admin/cleanup-tokens/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken } from '@/services/authService';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Verify admin access\n        const authHeader = req.headers.get('authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized' },\n                { status: 401 }\n            );\n        }\n\n        const token = authHeader.split(' ')[1];\n        const tokenData = await verifyToken(token);\n        \n        // Check if user has admin permissions\n        if (!tokenData || !tokenData.permissions?.includes('admin:all')) {\n            return NextResponse.json(\n                { success: false, message: 'Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        console.log('Starting cleanup of duplicate refresh tokens...');\n        \n        // Get all users with active refresh tokens\n        const usersWithTokens = await prisma.refreshToken.findMany({\n            where: {\n                isRevoked: false,\n                expiresAt: { gt: new Date() }\n            },\n            select: {\n                userId: true\n            },\n            distinct: ['userId']\n        });\n\n        console.log(`Found ${usersWithTokens.length} users with active refresh tokens`);\n        \n        let totalRevoked = 0;\n        let usersProcessed = 0;\n\n        for (const { userId } of usersWithTokens) {\n            // Get all active tokens for this user, ordered by creation date\n            const userTokens = await prisma.refreshToken.findMany({\n                where: {\n                    userId,\n                    isRevoked: false,\n                    expiresAt: { gt: new Date() }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n\n            if (userTokens.length > 1) {\n                console.log(`User ${userId} has ${userTokens.length} active tokens`);\n                \n                // Keep only the most recent token, revoke all others\n                const tokensToRevoke = userTokens.slice(1).map(t => t.id);\n                \n                await prisma.refreshToken.updateMany({\n                    where: {\n                        id: { in: tokensToRevoke }\n                    },\n                    data: {\n                        isRevoked: true\n                    }\n                });\n\n                totalRevoked += tokensToRevoke.length;\n                usersProcessed++;\n                console.log(`Revoked ${tokensToRevoke.length} duplicate tokens for user ${userId}`);\n            }\n        }\n\n        // Also clean up expired tokens\n        const expiredResult = await prisma.refreshToken.deleteMany({\n            where: {\n                OR: [\n                    { expiresAt: { lt: new Date() } },\n                    { \n                        isRevoked: true,\n                        updatedAt: { lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // Older than 7 days\n                    }\n                ]\n            }\n        });\n\n        console.log(`Deleted ${expiredResult.count} expired/old revoked tokens`);\n        console.log('Cleanup completed successfully!');\n\n        return NextResponse.json({\n            success: true,\n            message: 'Token cleanup completed',\n            stats: {\n                usersProcessed,\n                tokensRevoked: totalRevoked,\n                expiredTokensDeleted: expiredResult.count\n            }\n        });\n\n    } catch (error) {\n        console.error('Token cleanup error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Token cleanup failed' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["POST", "req", "authHeader", "headers", "get", "startsWith", "NextResponse", "json", "success", "message", "status", "token", "split", "tokenData", "verifyToken", "permissions", "includes", "console", "log", "usersWithTokens", "prisma", "refreshToken", "findMany", "where", "isRevoked", "expiresAt", "gt", "Date", "select", "userId", "distinct", "length", "totalRevoked", "usersProcessed", "userTokens", "orderBy", "createdAt", "tokensToRevoke", "slice", "map", "t", "id", "updateMany", "in", "data", "expiredResult", "deleteMany", "OR", "lt", "updatedAt", "now", "count", "stats", "tokensRevoked", "expiredTokensDeleted", "error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0f19bf5db017c565f3671df8126ba1b6150d2811"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1trv9o0a18 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1trv9o0a18();
cov_1trv9o0a18().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1trv9o0a18().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1trv9o0a18().f[0]++;
    cov_1trv9o0a18().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1trv9o0a18().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_1trv9o0a18().s[4]++, _interop_require_default(require("../../../../lib/prisma")));
const _authService =
/* istanbul ignore next */
(cov_1trv9o0a18().s[5]++, require("../../../../services/authService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1trv9o0a18().f[1]++;
  cov_1trv9o0a18().s[6]++;
  return /* istanbul ignore next */(cov_1trv9o0a18().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1trv9o0a18().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1trv9o0a18().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1trv9o0a18().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_1trv9o0a18().f[2]++;
  cov_1trv9o0a18().s[7]++;
  try {
    // Verify admin access
    const authHeader =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[8]++, req.headers.get("authorization"));
    /* istanbul ignore next */
    cov_1trv9o0a18().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_1trv9o0a18().b[3][0]++, !authHeader) ||
    /* istanbul ignore next */
    (cov_1trv9o0a18().b[3][1]++, !authHeader.startsWith("Bearer "))) {
      /* istanbul ignore next */
      cov_1trv9o0a18().b[2][0]++;
      cov_1trv9o0a18().s[10]++;
      return _server.NextResponse.json({
        success: false,
        message: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1trv9o0a18().b[2][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[11]++, authHeader.split(" ")[1]);
    const tokenData =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[12]++, await (0, _authService.verifyToken)(token));
    // Check if user has admin permissions
    /* istanbul ignore next */
    cov_1trv9o0a18().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_1trv9o0a18().b[5][0]++, !tokenData) ||
    /* istanbul ignore next */
    (cov_1trv9o0a18().b[5][1]++, !tokenData.permissions?.includes("admin:all"))) {
      /* istanbul ignore next */
      cov_1trv9o0a18().b[4][0]++;
      cov_1trv9o0a18().s[14]++;
      return _server.NextResponse.json({
        success: false,
        message: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1trv9o0a18().b[4][1]++;
    }
    cov_1trv9o0a18().s[15]++;
    console.log("Starting cleanup of duplicate refresh tokens...");
    // Get all users with active refresh tokens
    const usersWithTokens =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[16]++, await _prisma.default.refreshToken.findMany({
      where: {
        isRevoked: false,
        expiresAt: {
          gt: new Date()
        }
      },
      select: {
        userId: true
      },
      distinct: ["userId"]
    }));
    /* istanbul ignore next */
    cov_1trv9o0a18().s[17]++;
    console.log(`Found ${usersWithTokens.length} users with active refresh tokens`);
    let totalRevoked =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[18]++, 0);
    let usersProcessed =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[19]++, 0);
    /* istanbul ignore next */
    cov_1trv9o0a18().s[20]++;
    for (const {
      userId
    } of usersWithTokens) {
      // Get all active tokens for this user, ordered by creation date
      const userTokens =
      /* istanbul ignore next */
      (cov_1trv9o0a18().s[21]++, await _prisma.default.refreshToken.findMany({
        where: {
          userId,
          isRevoked: false,
          expiresAt: {
            gt: new Date()
          }
        },
        orderBy: {
          createdAt: "desc"
        }
      }));
      /* istanbul ignore next */
      cov_1trv9o0a18().s[22]++;
      if (userTokens.length > 1) {
        /* istanbul ignore next */
        cov_1trv9o0a18().b[6][0]++;
        cov_1trv9o0a18().s[23]++;
        console.log(`User ${userId} has ${userTokens.length} active tokens`);
        // Keep only the most recent token, revoke all others
        const tokensToRevoke =
        /* istanbul ignore next */
        (cov_1trv9o0a18().s[24]++, userTokens.slice(1).map(t => {
          /* istanbul ignore next */
          cov_1trv9o0a18().f[3]++;
          cov_1trv9o0a18().s[25]++;
          return t.id;
        }));
        /* istanbul ignore next */
        cov_1trv9o0a18().s[26]++;
        await _prisma.default.refreshToken.updateMany({
          where: {
            id: {
              in: tokensToRevoke
            }
          },
          data: {
            isRevoked: true
          }
        });
        /* istanbul ignore next */
        cov_1trv9o0a18().s[27]++;
        totalRevoked += tokensToRevoke.length;
        /* istanbul ignore next */
        cov_1trv9o0a18().s[28]++;
        usersProcessed++;
        /* istanbul ignore next */
        cov_1trv9o0a18().s[29]++;
        console.log(`Revoked ${tokensToRevoke.length} duplicate tokens for user ${userId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1trv9o0a18().b[6][1]++;
      }
    }
    // Also clean up expired tokens
    const expiredResult =
    /* istanbul ignore next */
    (cov_1trv9o0a18().s[30]++, await _prisma.default.refreshToken.deleteMany({
      where: {
        OR: [{
          expiresAt: {
            lt: new Date()
          }
        }, {
          isRevoked: true,
          updatedAt: {
            lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          } // Older than 7 days
        }]
      }
    }));
    /* istanbul ignore next */
    cov_1trv9o0a18().s[31]++;
    console.log(`Deleted ${expiredResult.count} expired/old revoked tokens`);
    /* istanbul ignore next */
    cov_1trv9o0a18().s[32]++;
    console.log("Cleanup completed successfully!");
    /* istanbul ignore next */
    cov_1trv9o0a18().s[33]++;
    return _server.NextResponse.json({
      success: true,
      message: "Token cleanup completed",
      stats: {
        usersProcessed,
        tokensRevoked: totalRevoked,
        expiredTokensDeleted: expiredResult.count
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1trv9o0a18().s[34]++;
    console.error("Token cleanup error:", error);
    /* istanbul ignore next */
    cov_1trv9o0a18().s[35]++;
    return _server.NextResponse.json({
      success: false,
      message: "Token cleanup failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,