{"version":3,"names":["POST","req","cov_1trv9o0a18","f","s","authHeader","headers","get","b","startsWith","_server","NextResponse","json","success","message","status","token","split","tokenData","_authService","verifyToken","permissions","includes","console","log","usersWithTokens","_prisma","default","refreshToken","findMany","where","isRevoked","expiresAt","gt","Date","select","userId","distinct","length","totalRevoked","usersProcessed","userTokens","orderBy","createdAt","tokensToRevoke","slice","map","t","id","updateMany","in","data","expiredResult","deleteMany","OR","lt","updatedAt","now","count","stats","tokensRevoked","expiredTokensDeleted","error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/admin/cleanup-tokens/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken } from '@/services/authService';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Verify admin access\n        const authHeader = req.headers.get('authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            return NextResponse.json(\n                { success: false, message: 'Unauthorized' },\n                { status: 401 }\n            );\n        }\n\n        const token = authHeader.split(' ')[1];\n        const tokenData = await verifyToken(token);\n        \n        // Check if user has admin permissions\n        if (!tokenData || !tokenData.permissions?.includes('admin:all')) {\n            return NextResponse.json(\n                { success: false, message: 'Insufficient permissions' },\n                { status: 403 }\n            );\n        }\n\n        console.log('Starting cleanup of duplicate refresh tokens...');\n        \n        // Get all users with active refresh tokens\n        const usersWithTokens = await prisma.refreshToken.findMany({\n            where: {\n                isRevoked: false,\n                expiresAt: { gt: new Date() }\n            },\n            select: {\n                userId: true\n            },\n            distinct: ['userId']\n        });\n\n        console.log(`Found ${usersWithTokens.length} users with active refresh tokens`);\n        \n        let totalRevoked = 0;\n        let usersProcessed = 0;\n\n        for (const { userId } of usersWithTokens) {\n            // Get all active tokens for this user, ordered by creation date\n            const userTokens = await prisma.refreshToken.findMany({\n                where: {\n                    userId,\n                    isRevoked: false,\n                    expiresAt: { gt: new Date() }\n                },\n                orderBy: {\n                    createdAt: 'desc'\n                }\n            });\n\n            if (userTokens.length > 1) {\n                console.log(`User ${userId} has ${userTokens.length} active tokens`);\n                \n                // Keep only the most recent token, revoke all others\n                const tokensToRevoke = userTokens.slice(1).map(t => t.id);\n                \n                await prisma.refreshToken.updateMany({\n                    where: {\n                        id: { in: tokensToRevoke }\n                    },\n                    data: {\n                        isRevoked: true\n                    }\n                });\n\n                totalRevoked += tokensToRevoke.length;\n                usersProcessed++;\n                console.log(`Revoked ${tokensToRevoke.length} duplicate tokens for user ${userId}`);\n            }\n        }\n\n        // Also clean up expired tokens\n        const expiredResult = await prisma.refreshToken.deleteMany({\n            where: {\n                OR: [\n                    { expiresAt: { lt: new Date() } },\n                    { \n                        isRevoked: true,\n                        updatedAt: { lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // Older than 7 days\n                    }\n                ]\n            }\n        });\n\n        console.log(`Deleted ${expiredResult.count} expired/old revoked tokens`);\n        console.log('Cleanup completed successfully!');\n\n        return NextResponse.json({\n            success: true,\n            message: 'Token cleanup completed',\n            stats: {\n                usersProcessed,\n                tokensRevoked: totalRevoked,\n                expiredTokensDeleted: expiredResult.count\n            }\n        });\n\n    } catch (error) {\n        console.error('Token cleanup error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Token cleanup failed' },\n            { status: 500 }\n        );\n    }\n} "],"mappingssB;;;;;;WAAAA,IAAA;;;;;kCAJoB;;;wEACvB;;;kCACS;;;;;;;;;;;;;;;AAErB,eAAeA,KAAKC,GAAgB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACvC,IAAI;IACA;IACA,MAAMC,UAAA;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,OAAaH,GAAA,CAAIK,OAAO,CAACC,GAAG,CAAC;IAAA;IAAAL,cAAA,GAAAE,CAAA;IACnC;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAACH,UAAA;IAAA;IAAA,CAAAH,cAAA,GAAAM,CAAA,UAAc,CAACH,UAAA,CAAWI,UAAU,CAAC,aAAY;MAAA;MAAAP,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAClD,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOC,OAAA,EAAS;MAAe,GAC1C;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAb,cAAA,GAAAM,CAAA;IAAA;IAEA,MAAMQ,KAAA;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAQC,UAAA,CAAWY,KAAK,CAAC,IAAI,CAAC,EAAE;IACtC,MAAMC,SAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAY,MAAM,IAAAe,YAAA,CAAAC,WAAW,EAACJ,KAAA;IAEpC;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAACU,SAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAM,CAAA,UAAa,CAACU,SAAA,CAAUG,WAAW,EAAEC,QAAA,CAAS,eAAc;MAAA;MAAApB,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAC7D,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOC,OAAA,EAAS;MAA2B,GACtD;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAb,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAEAmB,OAAA,CAAQC,GAAG,CAAC;IAEZ;IACA,MAAMC,eAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAkB,MAAMsB,OAAA,CAAAC,OAAM,CAACC,YAAY,CAACC,QAAQ,CAAC;MACvDC,KAAA,EAAO;QACHC,SAAA,EAAW;QACXC,SAAA,EAAW;UAAEC,EAAA,EAAI,IAAIC,IAAA;QAAO;MAChC;MACAC,MAAA,EAAQ;QACJC,MAAA,EAAQ;MACZ;MACAC,QAAA,EAAU,CAAC;IACf;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAEAmB,OAAA,CAAQC,GAAG,CAAC,SAASC,eAAA,CAAgBa,MAAM,mCAAmC;IAE9E,IAAIC,YAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAe;IACnB,IAAIoC,cAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAiB;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAErB,KAAK,MAAM;MAAEgC;IAAM,CAAE,IAAIX,eAAA,EAAiB;MACtC;MACA,MAAMgB,UAAA;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAa,MAAMsB,OAAA,CAAAC,OAAM,CAACC,YAAY,CAACC,QAAQ,CAAC;QAClDC,KAAA,EAAO;UACHM,MAAA;UACAL,SAAA,EAAW;UACXC,SAAA,EAAW;YAAEC,EAAA,EAAI,IAAIC,IAAA;UAAO;QAChC;QACAQ,OAAA,EAAS;UACLC,SAAA,EAAW;QACf;MACJ;MAAA;MAAAzC,cAAA,GAAAE,CAAA;MAEA,IAAIqC,UAAA,CAAWH,MAAM,GAAG,GAAG;QAAA;QAAApC,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAE,CAAA;QACvBmB,OAAA,CAAQC,GAAG,CAAC,QAAQY,MAAA,QAAcK,UAAA,CAAWH,MAAM,gBAAgB;QAEnE;QACA,MAAMM,cAAA;QAAA;QAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAiBqC,UAAA,CAAWI,KAAK,CAAC,GAAGC,GAAG,CAACC,CAAA,IAAK;UAAA;UAAA7C,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UAAA,OAAA2C,CAAA,CAAEC,EAAE;QAAF,CAAE;QAAA;QAAA9C,cAAA,GAAAE,CAAA;QAExD,MAAMsB,OAAA,CAAAC,OAAM,CAACC,YAAY,CAACqB,UAAU,CAAC;UACjCnB,KAAA,EAAO;YACHkB,EAAA,EAAI;cAAEE,EAAA,EAAIN;YAAe;UAC7B;UACAO,IAAA,EAAM;YACFpB,SAAA,EAAW;UACf;QACJ;QAAA;QAAA7B,cAAA,GAAAE,CAAA;QAEAmC,YAAA,IAAgBK,cAAA,CAAeN,MAAM;QAAA;QAAApC,cAAA,GAAAE,CAAA;QACrCoC,cAAA;QAAA;QAAAtC,cAAA,GAAAE,CAAA;QACAmB,OAAA,CAAQC,GAAG,CAAC,WAAWoB,cAAA,CAAeN,MAAM,8BAA8BF,MAAA,EAAQ;MACtF;MAAA;MAAA;QAAAlC,cAAA,GAAAM,CAAA;MAAA;IACJ;IAEA;IACA,MAAM4C,aAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAgB,MAAMsB,OAAA,CAAAC,OAAM,CAACC,YAAY,CAACyB,UAAU,CAAC;MACvDvB,KAAA,EAAO;QACHwB,EAAA,EAAI,CACA;UAAEtB,SAAA,EAAW;YAAEuB,EAAA,EAAI,IAAIrB,IAAA;UAAO;QAAE,GAChC;UACIH,SAAA,EAAW;UACXyB,SAAA,EAAW;YAAED,EAAA,EAAI,IAAIrB,IAAA,CAAKA,IAAA,CAAKuB,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;UAAM,EAAE;QACtE;MAER;IACJ;IAAA;IAAAvD,cAAA,GAAAE,CAAA;IAEAmB,OAAA,CAAQC,GAAG,CAAC,WAAW4B,aAAA,CAAcM,KAAK,6BAA6B;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACvEmB,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAEZ,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,OAAA,EAAS;MACT6C,KAAA,EAAO;QACHnB,cAAA;QACAoB,aAAA,EAAerB,YAAA;QACfsB,oBAAA,EAAsBT,aAAA,CAAcM;MACxC;IACJ;EAEJ,EAAE,OAAOI,KAAA,EAAO;IAAA;IAAA5D,cAAA,GAAAE,CAAA;IACZmB,OAAA,CAAQuC,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAA5D,cAAA,GAAAE,CAAA;IACtC,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEC,OAAA,EAAS;MAAOC,OAAA,EAAS;IAAuB,GAClD;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}