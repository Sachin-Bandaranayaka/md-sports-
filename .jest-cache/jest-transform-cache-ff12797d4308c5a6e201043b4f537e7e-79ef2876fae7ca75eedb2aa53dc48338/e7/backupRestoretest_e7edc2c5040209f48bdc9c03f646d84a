9e1c6d860bef73789f0e00efa46001d0
"use strict";
// Mock authentication middleware
jest.mock("@/lib/auth", ()=>({
        extractToken: jest.fn((request)=>{
            const authHeader = request.headers.get?.("authorization") || request.headers.authorization;
            return authHeader?.replace("Bearer ", "");
        }),
        verifyToken: jest.fn((token)=>{
            if (token === TEST_ADMIN_TOKEN) {
                return Promise.resolve({
                    sub: "admin-user-id"
                });
            } else if (token === TEST_USER_TOKEN) {
                return Promise.resolve({
                    sub: "regular-user-id"
                });
            }
            return Promise.resolve(null);
        })
    }));
// Mock user permissions
jest.mock("@/lib/utils/permissions", ()=>({
        hasPermission: jest.fn((permissions, permission)=>{
            if (permission === "admin:all") {
                return permissions.includes("admin:all");
            }
            return false;
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _client = require("@prisma/client");
const _nodefetch = /*#__PURE__*/ _interop_require_default(require("node-fetch"));
const _promises = /*#__PURE__*/ _interop_require_default(require("node:fs/promises"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Initialize test database
const prisma = new _client.PrismaClient({
    datasources: {
        db: {
            url: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL
        }
    }
});
// Test configuration
const BASE_URL = process.env.TEST_BASE_URL || "http://localhost:3000";
const TEST_ADMIN_TOKEN = "test-admin-token";
const TEST_USER_TOKEN = "test-user-token";
// Mock data for testing
const mockTestData = {
    categories: [
        {
            id: 999901,
            name: "Test Category 1",
            description: "Test category for backup/restore testing"
        },
        {
            id: 999902,
            name: "Test Category 2",
            description: "Another test category"
        }
    ],
    suppliers: [
        {
            id: 999901,
            name: "Test Supplier 1",
            email: "supplier1@test.com",
            phone: "1234567890",
            address: "123 Test Street",
            city: "Test City",
            status: "active"
        }
    ],
    customers: [
        {
            id: 999901,
            name: "Test Customer 1",
            email: "customer1@test.com",
            phone: "0987654321",
            address: "456 Test Avenue",
            city: "Test City"
        }
    ],
    products: [
        {
            id: 999901,
            name: "Test Product 1",
            description: "Test product for backup/restore",
            price: 99.99,
            sku: "TEST-001",
            categoryId: 999901,
            weightedAverageCost: 50.00
        }
    ],
    inventoryItems: [
        {
            id: 999901,
            productId: 999901,
            shopId: "test-shop-1",
            quantity: 100,
            shopSpecificCost: 45.00
        }
    ],
    invoices: [
        {
            id: 999901,
            invoiceNumber: "TEST-INV-001",
            customerId: 999901,
            total: 199.98,
            status: "paid",
            shopId: "test-shop-1"
        }
    ]
};
(0, _globals.describe)("Backup and Restore Integration Tests", ()=>{
    let testShopId;
    let backupFilePath;
    (0, _globals.beforeAll)(async ()=>{
        // Connect to test database
        await prisma.$connect();
        // Create test shop if it doesn't exist
        const existingShop = await prisma.shop.findFirst({
            where: {
                id: "test-shop-1"
            }
        });
        if (!existingShop) {
            await prisma.shop.create({
                data: {
                    id: "test-shop-1",
                    name: "Test Shop 1",
                    location: "Test Location"
                }
            });
        }
        testShopId = "test-shop-1";
        // Create backup directory
        backupFilePath = _path.default.join(__dirname, "../temp/test-backup.json");
    });
    (0, _globals.afterAll)(async ()=>{
        // Clean up test data
        await cleanupTestData();
        await prisma.$disconnect();
        // Clean up backup file
        try {
            await _promises.default.unlink(backupFilePath);
        } catch (error) {
        // File doesn't exist, ignore
        }
    });
    (0, _globals.beforeEach)(async ()=>{
        // Clean up before each test
        await cleanupTestData();
    });
    (0, _globals.afterEach)(async ()=>{
        // Clean up after each test
        await cleanupTestData();
    });
    async function cleanupTestData() {
        // Delete in proper order to respect foreign key constraints
        await prisma.inventoryItem.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
        await prisma.invoice.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
        await prisma.product.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
        await prisma.customer.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
        await prisma.category.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
        await prisma.supplier.deleteMany({
            where: {
                id: {
                    gte: 999900
                }
            }
        });
    }
    async function createTestData() {
        // Create test data in proper order
        for (const category of mockTestData.categories){
            await prisma.category.create({
                data: category
            });
        }
        for (const supplier of mockTestData.suppliers){
            await prisma.supplier.create({
                data: supplier
            });
        }
        for (const customer of mockTestData.customers){
            await prisma.customer.create({
                data: customer
            });
        }
        for (const product of mockTestData.products){
            await prisma.product.create({
                data: product
            });
        }
        for (const item of mockTestData.inventoryItems){
            await prisma.inventoryItem.create({
                data: item
            });
        }
        for (const invoice of mockTestData.invoices){
            await prisma.invoice.create({
                data: invoice
            });
        }
    }
    (0, _globals.describe)("Backup Functionality (GET /api/backup)", ()=>{
        (0, _globals.beforeEach)(async ()=>{
            await createTestData();
        });
        (0, _globals.it)("should successfully generate a backup with admin permissions", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                }
            });
            (0, _globals.expect)(response.status).toBe(200);
            const backupData = await response.json();
            // Verify backup structure
            (0, _globals.expect)(backupData).toHaveProperty("timestamp");
            (0, _globals.expect)(backupData).toHaveProperty("version", "1.0");
            (0, _globals.expect)(backupData).toHaveProperty("users");
            (0, _globals.expect)(backupData).toHaveProperty("products");
            (0, _globals.expect)(backupData).toHaveProperty("shops");
            (0, _globals.expect)(backupData).toHaveProperty("inventoryItems");
            (0, _globals.expect)(backupData).toHaveProperty("invoices");
            (0, _globals.expect)(backupData).toHaveProperty("customers");
            (0, _globals.expect)(backupData).toHaveProperty("categories");
            (0, _globals.expect)(backupData).toHaveProperty("suppliers");
            // Verify test data is included
            (0, _globals.expect)(backupData.categories).toEqual(_globals.expect.arrayContaining([
                _globals.expect.objectContaining({
                    name: "Test Category 1"
                })
            ]));
            (0, _globals.expect)(backupData.products).toEqual(_globals.expect.arrayContaining([
                _globals.expect.objectContaining({
                    name: "Test Product 1"
                })
            ]));
            // Save backup for restore tests
            await _promises.default.mkdir(_path.default.dirname(backupFilePath), {
                recursive: true
            });
            await _promises.default.writeFile(backupFilePath, JSON.stringify(backupData, null, 2));
        });
        (0, _globals.it)("should reject backup request with insufficient permissions", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_USER_TOKEN}`,
                    "Content-Type": "application/json"
                }
            });
            (0, _globals.expect)(response.status).toBe(403);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Insufficient permissions");
        });
        (0, _globals.it)("should reject backup request without authentication", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            });
            (0, _globals.expect)(response.status).toBe(401);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("No authorization token provided");
        });
        (0, _globals.it)("should reject backup request with invalid token", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": "Bearer invalid-token",
                    "Content-Type": "application/json"
                }
            });
            (0, _globals.expect)(response.status).toBe(401);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Invalid or expired token");
        });
        (0, _globals.it)("should include proper headers for file download", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                }
            });
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(response.headers.get("content-type")).toBe("application/json");
            (0, _globals.expect)(response.headers.get("content-disposition")).toBe("attachment; filename=backup.json");
        });
    });
    (0, _globals.describe)("Restore Functionality (POST /api/backup)", ()=>{
        let validBackupData;
        (0, _globals.beforeEach)(async ()=>{
            // Create some initial data and generate a backup
            await createTestData();
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                }
            });
            validBackupData = await response.json();
            // Clear database for restore tests
            await cleanupTestData();
        });
        (0, _globals.it)("should successfully restore from valid backup data", async ()=>{
            // Verify database is empty
            const initialCategoryCount = await prisma.category.count({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(initialCategoryCount).toBe(0);
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(validBackupData)
            });
            (0, _globals.expect)(response.status).toBe(200);
            const restoreResult = await response.json();
            (0, _globals.expect)(restoreResult).toHaveProperty("success", true);
            (0, _globals.expect)(restoreResult).toHaveProperty("message", "Database restored successfully");
            (0, _globals.expect)(restoreResult).toHaveProperty("restoredCounts");
            // Verify data was restored
            const restoredCategories = await prisma.category.findMany({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(restoredCategories).toHaveLength(2);
            const restoredProducts = await prisma.product.findMany({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(restoredProducts).toHaveLength(1);
            (0, _globals.expect)(restoredProducts[0].name).toBe("Test Product 1");
        });
        (0, _globals.it)("should reject restore with insufficient permissions", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_USER_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(validBackupData)
            });
            (0, _globals.expect)(response.status).toBe(403);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Insufficient permissions");
        });
        (0, _globals.it)("should reject restore without authentication", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(validBackupData)
            });
            (0, _globals.expect)(response.status).toBe(401);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("No authorization token provided");
        });
        (0, _globals.it)("should reject invalid backup data format", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    invalid: "data"
                })
            });
            (0, _globals.expect)(response.status).toBe(400);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Invalid backup data format");
        });
        (0, _globals.it)("should reject incompatible backup version", async ()=>{
            const incompatibleBackup = {
                ...validBackupData,
                version: "2.0"
            };
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(incompatibleBackup)
            });
            (0, _globals.expect)(response.status).toBe(400);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Backup version incompatible");
        });
        (0, _globals.it)("should handle malformed JSON gracefully", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: "{ invalid json"
            });
            (0, _globals.expect)(response.status).toBe(400);
        });
        (0, _globals.it)("should restore data in correct order respecting foreign key constraints", async ()=>{
            // Create a backup with complex relationships
            const complexBackupData = {
                ...validBackupData,
                categories: [
                    {
                        id: 999903,
                        name: "Parent Category",
                        description: "Parent"
                    },
                    {
                        id: 999904,
                        name: "Child Category",
                        description: "Child",
                        parentId: 999903
                    }
                ],
                products: [
                    {
                        id: 999903,
                        name: "Complex Product",
                        price: 150.00,
                        categoryId: 999904,
                        weightedAverageCost: 75.00
                    }
                ]
            };
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(complexBackupData)
            });
            (0, _globals.expect)(response.status).toBe(200);
            // Verify relationships are maintained
            const restoredProduct = await prisma.product.findUnique({
                where: {
                    id: 999903
                },
                include: {
                    category: true
                }
            });
            (0, _globals.expect)(restoredProduct).toBeDefined();
            (0, _globals.expect)(restoredProduct?.category?.name).toBe("Child Category");
        });
        (0, _globals.it)("should provide detailed restore counts", async ()=>{
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(validBackupData)
            });
            (0, _globals.expect)(response.status).toBe(200);
            const restoreResult = await response.json();
            (0, _globals.expect)(restoreResult.restoredCounts).toEqual({
                users: 0,
                products: _globals.expect.any(Number),
                shops: 0,
                inventoryItems: _globals.expect.any(Number),
                invoices: _globals.expect.any(Number),
                customers: _globals.expect.any(Number),
                categories: _globals.expect.any(Number),
                suppliers: _globals.expect.any(Number)
            });
        });
    });
    (0, _globals.describe)("End-to-End Backup and Restore Workflow", ()=>{
        (0, _globals.it)("should complete full backup and restore cycle maintaining data integrity", async ()=>{
            // Step 1: Create initial test data
            await createTestData();
            // Step 2: Generate backup
            const backupResponse = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`
                }
            });
            (0, _globals.expect)(backupResponse.status).toBe(200);
            const backupData = await backupResponse.json();
            // Step 3: Verify initial data exists
            const initialProductCount = await prisma.product.count({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(initialProductCount).toBeGreaterThan(0);
            // Step 4: Clear all data (simulating data loss)
            await cleanupTestData();
            // Step 5: Verify data is gone
            const afterClearCount = await prisma.product.count({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(afterClearCount).toBe(0);
            // Step 6: Restore from backup
            const restoreResponse = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(backupData)
            });
            (0, _globals.expect)(restoreResponse.status).toBe(200);
            // Step 7: Verify data is restored correctly
            const restoredProductCount = await prisma.product.count({
                where: {
                    id: {
                        gte: 999900
                    }
                }
            });
            (0, _globals.expect)(restoredProductCount).toBe(initialProductCount);
            // Step 8: Verify data integrity
            const restoredProduct = await prisma.product.findFirst({
                where: {
                    name: "Test Product 1"
                },
                include: {
                    category: true,
                    inventoryItems: true
                }
            });
            (0, _globals.expect)(restoredProduct).toBeDefined();
            (0, _globals.expect)(restoredProduct?.name).toBe("Test Product 1");
            (0, _globals.expect)(restoredProduct?.category?.name).toBe("Test Category 1");
            (0, _globals.expect)(restoredProduct?.inventoryItems).toHaveLength(1);
            (0, _globals.expect)(restoredProduct?.inventoryItems[0].quantity).toBe(100);
        });
        (0, _globals.it)("should handle large dataset backup and restore", async ()=>{
            // Create larger dataset
            const largeDataset = {
                categories: Array.from({
                    length: 10
                }, (_, i)=>({
                        id: 999910 + i,
                        name: `Large Test Category ${i + 1}`,
                        description: `Description for category ${i + 1}`
                    })),
                products: Array.from({
                    length: 50
                }, (_, i)=>({
                        id: 999910 + i,
                        name: `Large Test Product ${i + 1}`,
                        price: 10.00 + i,
                        sku: `LARGE-${(i + 1).toString().padStart(3, "0")}`,
                        categoryId: 999910 + i % 10,
                        weightedAverageCost: 5.00 + i
                    }))
            };
            // Create large dataset
            for (const category of largeDataset.categories){
                await prisma.category.create({
                    data: category
                });
            }
            for (const product of largeDataset.products){
                await prisma.product.create({
                    data: product
                });
            }
            // Test backup performance
            const startTime = Date.now();
            const backupResponse = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`
                }
            });
            const backupTime = Date.now() - startTime;
            (0, _globals.expect)(backupResponse.status).toBe(200);
            (0, _globals.expect)(backupTime).toBeLessThan(10000); // Should complete within 10 seconds
            const backupData = await backupResponse.json();
            (0, _globals.expect)(backupData.categories.length).toBeGreaterThanOrEqual(10);
            (0, _globals.expect)(backupData.products.length).toBeGreaterThanOrEqual(50);
            // Clean and restore
            await cleanupTestData();
            const restoreStartTime = Date.now();
            const restoreResponse = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(backupData)
            });
            const restoreTime = Date.now() - restoreStartTime;
            (0, _globals.expect)(restoreResponse.status).toBe(200);
            (0, _globals.expect)(restoreTime).toBeLessThan(15000); // Should complete within 15 seconds
            // Verify all data was restored
            const restoredCategories = await prisma.category.count({
                where: {
                    id: {
                        gte: 999910
                    }
                }
            });
            const restoredProducts = await prisma.product.count({
                where: {
                    id: {
                        gte: 999910
                    }
                }
            });
            (0, _globals.expect)(restoredCategories).toBe(10);
            (0, _globals.expect)(restoredProducts).toBe(50);
        });
    });
    (0, _globals.describe)("Error Handling and Edge Cases", ()=>{
        (0, _globals.it)("should handle database connection issues during backup", async ()=>{
            // This test would need to mock database failures
            // For now, we'll test the basic error handling structure
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`
                }
            });
            // Should either succeed or return a proper error response
            (0, _globals.expect)([
                200,
                500
            ]).toContain(response.status);
            if (response.status === 500) {
                const errorData = await response.json();
                (0, _globals.expect)(errorData).toHaveProperty("error");
                (0, _globals.expect)(errorData.error).toContain("Failed to generate backup");
            }
        });
        (0, _globals.it)("should handle database transaction failures during restore", async ()=>{
            // Create a backup with invalid foreign key references
            const invalidBackupData = {
                version: "1.0",
                timestamp: new Date().toISOString(),
                categories: [],
                suppliers: [],
                customers: [],
                users: [],
                shops: [],
                products: [
                    {
                        id: 999950,
                        name: "Invalid Product",
                        price: 100.00,
                        categoryId: 999999,
                        weightedAverageCost: 50.00
                    }
                ],
                inventoryItems: [],
                invoices: []
            };
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(invalidBackupData)
            });
            (0, _globals.expect)(response.status).toBe(500);
            const errorData = await response.json();
            (0, _globals.expect)(errorData).toHaveProperty("error");
            (0, _globals.expect)(errorData.error).toContain("Failed to restore backup");
        });
        (0, _globals.it)("should handle empty backup data gracefully", async ()=>{
            const emptyBackupData = {
                version: "1.0",
                timestamp: new Date().toISOString(),
                categories: [],
                suppliers: [],
                customers: [],
                users: [],
                shops: [],
                products: [],
                inventoryItems: [],
                invoices: []
            };
            const response = await (0, _nodefetch.default)(`${BASE_URL}/api/backup`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${TEST_ADMIN_TOKEN}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(emptyBackupData)
            });
            (0, _globals.expect)(response.status).toBe(200);
            const restoreResult = await response.json();
            (0, _globals.expect)(restoreResult.success).toBe(true);
            (0, _globals.expect)(restoreResult.restoredCounts).toEqual({
                users: 0,
                products: 0,
                shops: 0,
                inventoryItems: 0,
                invoices: 0,
                customers: 0,
                categories: 0,
                suppliers: 0
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,