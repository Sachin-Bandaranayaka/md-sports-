{"version":3,"names":["GET","cov_puwdst8ni","f","s","POST","request","searchParams","URL","url","page","b","Number","get","limit","search","skip","where","OR","receiptNumber","contains","mode","_client","Prisma","QueryMode","insensitive","payment","referenceNumber","customer","name","receipts","_prisma","prisma","receipt","findMany","include","invoice","confirmedByUser","orderBy","createdAt","take","totalReceipts","count","totalPages","Math","ceil","_server","NextResponse","json","pagination","currentPage","perPage","error","console","status","receiptData","paymentId","existingPayment","findUnique","id","Date","now","floor","random","result","$transaction","tx","create","data","receiptDate","bankName","accountNumber","chequeNumber","transactionId","notes","confirmedBy","totalPayments","aggregate","invoiceId","isNot","_sum","amount","select","total","totalPaid","invoiceTotal","newStatus","update","account","accountId","Error","paymentMethod","toLowerCase","accountName","accountType","includes","findFirst","type","balance","description","isActive","transaction","date","invoiceNumber","reference","category","increment"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/receipts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { Prisma } from '@prisma/client';\n\n// Get all receipts with pagination and optional filtering\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const page = Number(searchParams.get('page')) || 1;\n        const limit = Number(searchParams.get('limit')) || 10;\n        const search = searchParams.get('search') || '';\n\n        const skip = (page - 1) * limit;\n\n        // Build the where condition for search\n        const where: Prisma.ReceiptWhereInput = search ? {\n            OR: [\n                { receiptNumber: { contains: search, mode: Prisma.QueryMode.insensitive } },\n                { payment: { referenceNumber: { contains: search, mode: Prisma.QueryMode.insensitive } } },\n                { payment: { customer: { name: { contains: search, mode: Prisma.QueryMode.insensitive } } } }\n            ]\n        } : {};\n\n        // Get receipts with pagination\n        const receipts = await prisma.receipt.findMany({\n            where,\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            },\n            orderBy: { createdAt: 'desc' },\n            skip,\n            take: limit\n        });\n\n        // Get total count for pagination\n        const totalReceipts = await prisma.receipt.count({ where });\n        const totalPages = Math.ceil(totalReceipts / limit);\n\n        return NextResponse.json({\n            receipts,\n            pagination: {\n                totalReceipts,\n                totalPages,\n                currentPage: page,\n                perPage: limit\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching receipts:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch receipts' },\n            { status: 500 }\n        );\n    }\n}\n\n// Create a new receipt\nexport async function POST(request: Request) {\n    try {\n        const receiptData = await request.json();\n\n        // Validate receipt data\n        if (!receiptData.paymentId) {\n            return NextResponse.json(\n                { error: 'Payment ID is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if payment exists and doesn't already have a receipt\n        const existingPayment = await prisma.payment.findUnique({\n            where: { id: receiptData.paymentId },\n            include: { receipt: true }\n        });\n\n        if (!existingPayment) {\n            return NextResponse.json(\n                { error: 'Payment not found' },\n                { status: 404 }\n            );\n        }\n\n        if (existingPayment.receipt) {\n            return NextResponse.json(\n                { error: 'A receipt already exists for this payment' },\n                { status: 409 }\n            );\n        }\n\n        // Generate a unique receipt number\n        const receiptNumber = `REC-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n        // Use a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // Create receipt\n            const receipt = await tx.receipt.create({\n                data: {\n                    paymentId: receiptData.paymentId,\n                    receiptNumber,\n                    receiptDate: receiptData.receiptDate ? new Date(receiptData.receiptDate) : new Date(),\n                    bankName: receiptData.bankName || null,\n                    accountNumber: receiptData.accountNumber || null,\n                    chequeNumber: receiptData.chequeNumber || null,\n                    transactionId: receiptData.transactionId || null,\n                    notes: receiptData.notes || null,\n                    confirmedBy: receiptData.confirmedBy || null\n                },\n                include: {\n                    payment: {\n                        include: {\n                            customer: true,\n                            invoice: true\n                        }\n                    },\n                    confirmedByUser: true\n                }\n            });\n\n            // Calculate total payments with receipts for the invoice to determine correct status\n            // Only count payments that have receipts (confirmed payments)\n            const totalPayments = await tx.payment.aggregate({\n                where: { \n                    invoiceId: existingPayment.invoiceId,\n                    receipt: {\n                        isNot: null\n                    }\n                },\n                _sum: { amount: true }\n            });\n\n            const invoice = await tx.invoice.findUnique({\n                where: { id: existingPayment.invoiceId },\n                select: { total: true }\n            });\n\n            const totalPaid = totalPayments._sum.amount || 0;\n            const invoiceTotal = invoice?.total || 0;\n\n            // Determine the correct status based on payment amount\n            let newStatus = 'pending';\n            if (totalPaid >= invoiceTotal) {\n                newStatus = 'paid';\n            } else if (totalPaid > 0) {\n                newStatus = 'partial';\n            }\n\n            // Update invoice status based on actual payment amount\n            await tx.invoice.update({\n                where: { id: existingPayment.invoiceId },\n                data: { status: newStatus }\n            });\n\n            // Use the selected account from the payment, or fallback to payment method logic\n            let account;\n            \n            if (existingPayment.accountId) {\n                // Use the account selected during payment creation\n                account = await tx.account.findUnique({\n                    where: { id: existingPayment.accountId }\n                });\n                \n                if (!account) {\n                    throw new Error('Selected payment account not found');\n                }\n            } else {\n                // Fallback to old logic for payments without selected accounts\n                const paymentMethod = existingPayment.paymentMethod.toLowerCase();\n                let accountName = '';\n                let accountType = 'asset';\n\n                if (paymentMethod.includes('cash')) {\n                    accountName = 'Cash in Hand';\n                } else {\n                    // For all non-cash payments, default to Cash in Bank\n                    accountName = 'Cash in Bank';\n                }\n\n                // Find or create the appropriate account\n                account = await tx.account.findFirst({\n                    where: {\n                        name: accountName,\n                        type: accountType\n                    }\n                });\n\n                if (!account) {\n                    // Create the account if it doesn't exist\n                    account = await tx.account.create({\n                        data: {\n                            name: accountName,\n                            type: accountType,\n                            balance: 0,\n                            description: `Auto-created account for ${paymentMethod} payments`,\n                            isActive: true\n                        }\n                    });\n                }\n            }\n\n            // Create accounting transaction for the income\n            await tx.transaction.create({\n                data: {\n                    date: receiptData.receiptDate ? new Date(receiptData.receiptDate) : new Date(),\n                    description: `Payment received from ${receipt.payment.customer.name} - Invoice ${receipt.payment.invoice.invoiceNumber}`,\n                    accountId: account.id,\n                    type: 'income',\n                    amount: existingPayment.amount,\n                    reference: receiptNumber,\n                    category: 'Sales Revenue'\n                }\n            });\n\n            // Update account balance\n            await tx.account.update({\n                where: { id: account.id },\n                data: {\n                    balance: {\n                        increment: existingPayment.amount\n                    }\n                }\n            });\n\n            return receipt;\n        });\n\n        return NextResponse.json(result, { status: 201 });\n    } catch (error) {\n        console.error('Error creating receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to create receipt' },\n            { status: 500 }\n        );\n    }\n}"],"mappingssBA,GAAG,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAHH,GAAA;;EA0DAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;iCAhEoB;;;iCACnB;;;iCAEA;AAGhB,eAAeJ,IAAIK,OAAgB;EAAA;EAAAJ,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACtC,IAAI;IACA,MAAM;MAAEG;IAAY,CAAE;IAAA;IAAA,CAAAL,aAAA,GAAAE,CAAA,QAAG,IAAII,GAAA,CAAIF,OAAA,CAAQG,GAAG;IAC5C,MAAMC,IAAA;IAAA;IAAA,CAAAR,aAAA,GAAAE,CAAA;IAAO;IAAA,CAAAF,aAAA,GAAAS,CAAA,UAAAC,MAAA,CAAOL,YAAA,CAAaM,GAAG,CAAC;IAAA;IAAA,CAAAX,aAAA,GAAAS,CAAA,UAAY;IACjD,MAAMG,KAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAE,CAAA;IAAQ;IAAA,CAAAF,aAAA,GAAAS,CAAA,UAAAC,MAAA,CAAOL,YAAA,CAAaM,GAAG,CAAC;IAAA;IAAA,CAAAX,aAAA,GAAAS,CAAA,UAAa;IACnD,MAAMI,MAAA;IAAA;IAAA,CAAAb,aAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,aAAA,GAAAS,CAAA,UAAAJ,YAAA,CAAaM,GAAG,CAAC;IAAA;IAAA,CAAAX,aAAA,GAAAS,CAAA,UAAa;IAE7C,MAAMK,IAAA;IAAA;IAAA,CAAAd,aAAA,GAAAE,CAAA,QAAO,CAACM,IAAA,GAAO,KAAKI,KAAA;IAE1B;IACA,MAAMG,KAAA;IAAA;IAAA,CAAAf,aAAA,GAAAE,CAAA,QAAkCW,MAAA;IAAA;IAAA,CAAAb,aAAA,GAAAS,CAAA,UAAS;MAC7CO,EAAA,EAAI,CACA;QAAEC,aAAA,EAAe;UAAEC,QAAA,EAAUL,MAAA;UAAQM,IAAA,EAAMC,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACC;QAAY;MAAE,GAC1E;QAAEC,OAAA,EAAS;UAAEC,eAAA,EAAiB;YAAEP,QAAA,EAAUL,MAAA;YAAQM,IAAA,EAAMC,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACC;UAAY;QAAE;MAAE,GACzF;QAAEC,OAAA,EAAS;UAAEE,QAAA,EAAU;YAAEC,IAAA,EAAM;cAAET,QAAA,EAAUL,MAAA;cAAQM,IAAA,EAAMC,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACC;YAAY;UAAE;QAAE;MAAE;IAEpG;IAAA;IAAA,CAAAvB,aAAA,GAAAS,CAAA,UAAI,CAAC;IAEL;IACA,MAAMmB,QAAA;IAAA;IAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAW,MAAM2B,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;MAC3CjB,KAAA;MACAkB,OAAA,EAAS;QACLT,OAAA,EAAS;UACLS,OAAA,EAAS;YACLP,QAAA,EAAU;YACVQ,OAAA,EAAS;UACb;QACJ;QACAC,eAAA,EAAiB;MACrB;MACAC,OAAA,EAAS;QAAEC,SAAA,EAAW;MAAO;MAC7BvB,IAAA;MACAwB,IAAA,EAAM1B;IACV;IAEA;IACA,MAAM2B,aAAA;IAAA;IAAA,CAAAvC,aAAA,GAAAE,CAAA,QAAgB,MAAM2B,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACS,KAAK,CAAC;MAAEzB;IAAM;IACzD,MAAM0B,UAAA;IAAA;IAAA,CAAAzC,aAAA,GAAAE,CAAA,QAAawC,IAAA,CAAKC,IAAI,CAACJ,aAAA,GAAgB3B,KAAA;IAAA;IAAAZ,aAAA,GAAAE,CAAA;IAE7C,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBlB,QAAA;MACAmB,UAAA,EAAY;QACRR,aAAA;QACAE,UAAA;QACAO,WAAA,EAAaxC,IAAA;QACbyC,OAAA,EAASrC;MACb;IACJ;EACJ,EAAE,OAAOsC,KAAA,EAAO;IAAA;IAAAlD,aAAA,GAAAE,CAAA;IACZiD,OAAA,CAAQD,KAAK,CAAC,4BAA4BA,KAAA;IAAA;IAAAlD,aAAA,GAAAE,CAAA;IAC1C,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEI,KAAA,EAAO;IAA2B,GACpC;MAAEE,MAAA,EAAQ;IAAI;EAEtB;AACJ;AAGO,eAAejD,KAAKC,OAAgB;EAAA;EAAAJ,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACvC,IAAI;IACA,MAAMmD,WAAA;IAAA;IAAA,CAAArD,aAAA,GAAAE,CAAA,QAAc,MAAME,OAAA,CAAQ0C,IAAI;IAEtC;IAAA;IAAA9C,aAAA,GAAAE,CAAA;IACA,IAAI,CAACmD,WAAA,CAAYC,SAAS,EAAE;MAAA;MAAAtD,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MACxB,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEI,KAAA,EAAO;MAAyB,GAClC;QAAEE,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAApD,aAAA,GAAAS,CAAA;IAAA;IAEA;IACA,MAAM8C,eAAA;IAAA;IAAA,CAAAvD,aAAA,GAAAE,CAAA,QAAkB,MAAM2B,OAAA,CAAAC,MAAM,CAACN,OAAO,CAACgC,UAAU,CAAC;MACpDzC,KAAA,EAAO;QAAE0C,EAAA,EAAIJ,WAAA,CAAYC;MAAU;MACnCrB,OAAA,EAAS;QAAEF,OAAA,EAAS;MAAK;IAC7B;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACqD,eAAA,EAAiB;MAAA;MAAAvD,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MAClB,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEI,KAAA,EAAO;MAAoB,GAC7B;QAAEE,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAApD,aAAA,GAAAS,CAAA;IAAA;IAAAT,aAAA,GAAAE,CAAA;IAEA,IAAIqD,eAAA,CAAgBxB,OAAO,EAAE;MAAA;MAAA/B,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MACzB,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEI,KAAA,EAAO;MAA4C,GACrD;QAAEE,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAApD,aAAA,GAAAS,CAAA;IAAA;IAEA;IACA,MAAMQ,aAAA;IAAA;IAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAgB,OAAOwD,IAAA,CAAKC,GAAG,MAAMjB,IAAA,CAAKkB,KAAK,CAAClB,IAAA,CAAKmB,MAAM,KAAK,OAAO;IAE7E;IACA,MAAMC,MAAA;IAAA;IAAA,CAAA9D,aAAA,GAAAE,CAAA,QAAS,MAAM2B,OAAA,CAAAC,MAAM,CAACiC,YAAY,CAAC,MAAOC,EAAA;MAAA;MAAAhE,aAAA,GAAAC,CAAA;MAC5C;MACA,MAAM8B,OAAA;MAAA;MAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAU,MAAM8D,EAAA,CAAGjC,OAAO,CAACkC,MAAM,CAAC;QACpCC,IAAA,EAAM;UACFZ,SAAA,EAAWD,WAAA,CAAYC,SAAS;UAChCrC,aAAA;UACAkD,WAAA,EAAad,WAAA,CAAYc,WAAW;UAAA;UAAA,CAAAnE,aAAA,GAAAS,CAAA,UAAG,IAAIiD,IAAA,CAAKL,WAAA,CAAYc,WAAW;UAAA;UAAA,CAAAnE,aAAA,GAAAS,CAAA,UAAI,IAAIiD,IAAA;UAC/EU,QAAA;UAAU;UAAA,CAAApE,aAAA,GAAAS,CAAA,UAAA4C,WAAA,CAAYe,QAAQ;UAAA;UAAA,CAAApE,aAAA,GAAAS,CAAA,UAAI;UAClC4D,aAAA;UAAe;UAAA,CAAArE,aAAA,GAAAS,CAAA,UAAA4C,WAAA,CAAYgB,aAAa;UAAA;UAAA,CAAArE,aAAA,GAAAS,CAAA,UAAI;UAC5C6D,YAAA;UAAc;UAAA,CAAAtE,aAAA,GAAAS,CAAA,WAAA4C,WAAA,CAAYiB,YAAY;UAAA;UAAA,CAAAtE,aAAA,GAAAS,CAAA,WAAI;UAC1C8D,aAAA;UAAe;UAAA,CAAAvE,aAAA,GAAAS,CAAA,WAAA4C,WAAA,CAAYkB,aAAa;UAAA;UAAA,CAAAvE,aAAA,GAAAS,CAAA,WAAI;UAC5C+D,KAAA;UAAO;UAAA,CAAAxE,aAAA,GAAAS,CAAA,WAAA4C,WAAA,CAAYmB,KAAK;UAAA;UAAA,CAAAxE,aAAA,GAAAS,CAAA,WAAI;UAC5BgE,WAAA;UAAa;UAAA,CAAAzE,aAAA,GAAAS,CAAA,WAAA4C,WAAA,CAAYoB,WAAW;UAAA;UAAA,CAAAzE,aAAA,GAAAS,CAAA,WAAI;QAC5C;QACAwB,OAAA,EAAS;UACLT,OAAA,EAAS;YACLS,OAAA,EAAS;cACLP,QAAA,EAAU;cACVQ,OAAA,EAAS;YACb;UACJ;UACAC,eAAA,EAAiB;QACrB;MACJ;MAEA;MACA;MACA,MAAMuC,aAAA;MAAA;MAAA,CAAA1E,aAAA,GAAAE,CAAA,QAAgB,MAAM8D,EAAA,CAAGxC,OAAO,CAACmD,SAAS,CAAC;QAC7C5D,KAAA,EAAO;UACH6D,SAAA,EAAWrB,eAAA,CAAgBqB,SAAS;UACpC7C,OAAA,EAAS;YACL8C,KAAA,EAAO;UACX;QACJ;QACAC,IAAA,EAAM;UAAEC,MAAA,EAAQ;QAAK;MACzB;MAEA,MAAM7C,OAAA;MAAA;MAAA,CAAAlC,aAAA,GAAAE,CAAA,QAAU,MAAM8D,EAAA,CAAG9B,OAAO,CAACsB,UAAU,CAAC;QACxCzC,KAAA,EAAO;UAAE0C,EAAA,EAAIF,eAAA,CAAgBqB;QAAU;QACvCI,MAAA,EAAQ;UAAEC,KAAA,EAAO;QAAK;MAC1B;MAEA,MAAMC,SAAA;MAAA;MAAA,CAAAlF,aAAA,GAAAE,CAAA;MAAY;MAAA,CAAAF,aAAA,GAAAS,CAAA,WAAAiE,aAAA,CAAcI,IAAI,CAACC,MAAM;MAAA;MAAA,CAAA/E,aAAA,GAAAS,CAAA,WAAI;MAC/C,MAAM0E,YAAA;MAAA;MAAA,CAAAnF,aAAA,GAAAE,CAAA;MAAe;MAAA,CAAAF,aAAA,GAAAS,CAAA,WAAAyB,OAAA,EAAS+C,KAAA;MAAA;MAAA,CAAAjF,aAAA,GAAAS,CAAA,WAAS;MAEvC;MACA,IAAI2E,SAAA;MAAA;MAAA,CAAApF,aAAA,GAAAE,CAAA,QAAY;MAAA;MAAAF,aAAA,GAAAE,CAAA;MAChB,IAAIgF,SAAA,IAAaC,YAAA,EAAc;QAAA;QAAAnF,aAAA,GAAAS,CAAA;QAAAT,aAAA,GAAAE,CAAA;QAC3BkF,SAAA,GAAY;MAChB,OAAO;QAAA;QAAApF,aAAA,GAAAS,CAAA;QAAAT,aAAA,GAAAE,CAAA;QAAA,IAAIgF,SAAA,GAAY,GAAG;UAAA;UAAAlF,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UACtBkF,SAAA,GAAY;QAChB;QAAA;QAAA;UAAApF,aAAA,GAAAS,CAAA;QAAA;MAAA;MAEA;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACA,MAAM8D,EAAA,CAAG9B,OAAO,CAACmD,MAAM,CAAC;QACpBtE,KAAA,EAAO;UAAE0C,EAAA,EAAIF,eAAA,CAAgBqB;QAAU;QACvCV,IAAA,EAAM;UAAEd,MAAA,EAAQgC;QAAU;MAC9B;MAEA;MACA,IAAIE,OAAA;MAAA;MAAAtF,aAAA,GAAAE,CAAA;MAEJ,IAAIqD,eAAA,CAAgBgC,SAAS,EAAE;QAAA;QAAAvF,aAAA,GAAAS,CAAA;QAAAT,aAAA,GAAAE,CAAA;QAC3B;QACAoF,OAAA,GAAU,MAAMtB,EAAA,CAAGsB,OAAO,CAAC9B,UAAU,CAAC;UAClCzC,KAAA,EAAO;YAAE0C,EAAA,EAAIF,eAAA,CAAgBgC;UAAU;QAC3C;QAAA;QAAAvF,aAAA,GAAAE,CAAA;QAEA,IAAI,CAACoF,OAAA,EAAS;UAAA;UAAAtF,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UACV,MAAM,IAAIsF,KAAA,CAAM;QACpB;QAAA;QAAA;UAAAxF,aAAA,GAAAS,CAAA;QAAA;MACJ,OAAO;QAAA;QAAAT,aAAA,GAAAS,CAAA;QACH;QACA,MAAMgF,aAAA;QAAA;QAAA,CAAAzF,aAAA,GAAAE,CAAA,QAAgBqD,eAAA,CAAgBkC,aAAa,CAACC,WAAW;QAC/D,IAAIC,WAAA;QAAA;QAAA,CAAA3F,aAAA,GAAAE,CAAA,QAAc;QAClB,IAAI0F,WAAA;QAAA;QAAA,CAAA5F,aAAA,GAAAE,CAAA,QAAc;QAAA;QAAAF,aAAA,GAAAE,CAAA;QAElB,IAAIuF,aAAA,CAAcI,QAAQ,CAAC,SAAS;UAAA;UAAA7F,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UAChCyF,WAAA,GAAc;QAClB,OAAO;UAAA;UAAA3F,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UACH;UACAyF,WAAA,GAAc;QAClB;QAEA;QAAA;QAAA3F,aAAA,GAAAE,CAAA;QACAoF,OAAA,GAAU,MAAMtB,EAAA,CAAGsB,OAAO,CAACQ,SAAS,CAAC;UACjC/E,KAAA,EAAO;YACHY,IAAA,EAAMgE,WAAA;YACNI,IAAA,EAAMH;UACV;QACJ;QAAA;QAAA5F,aAAA,GAAAE,CAAA;QAEA,IAAI,CAACoF,OAAA,EAAS;UAAA;UAAAtF,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UACV;UACAoF,OAAA,GAAU,MAAMtB,EAAA,CAAGsB,OAAO,CAACrB,MAAM,CAAC;YAC9BC,IAAA,EAAM;cACFvC,IAAA,EAAMgE,WAAA;cACNI,IAAA,EAAMH,WAAA;cACNI,OAAA,EAAS;cACTC,WAAA,EAAa,4BAA4BR,aAAA,WAAwB;cACjES,QAAA,EAAU;YACd;UACJ;QACJ;QAAA;QAAA;UAAAlG,aAAA,GAAAS,CAAA;QAAA;MACJ;MAEA;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACA,MAAM8D,EAAA,CAAGmC,WAAW,CAAClC,MAAM,CAAC;QACxBC,IAAA,EAAM;UACFkC,IAAA,EAAM/C,WAAA,CAAYc,WAAW;UAAA;UAAA,CAAAnE,aAAA,GAAAS,CAAA,WAAG,IAAIiD,IAAA,CAAKL,WAAA,CAAYc,WAAW;UAAA;UAAA,CAAAnE,aAAA,GAAAS,CAAA,WAAI,IAAIiD,IAAA;UACxEuC,WAAA,EAAa,yBAAyBlE,OAAA,CAAQP,OAAO,CAACE,QAAQ,CAACC,IAAI,cAAcI,OAAA,CAAQP,OAAO,CAACU,OAAO,CAACmE,aAAa,EAAE;UACxHd,SAAA,EAAWD,OAAA,CAAQ7B,EAAE;UACrBsC,IAAA,EAAM;UACNhB,MAAA,EAAQxB,eAAA,CAAgBwB,MAAM;UAC9BuB,SAAA,EAAWrF,aAAA;UACXsF,QAAA,EAAU;QACd;MACJ;MAEA;MAAA;MAAAvG,aAAA,GAAAE,CAAA;MACA,MAAM8D,EAAA,CAAGsB,OAAO,CAACD,MAAM,CAAC;QACpBtE,KAAA,EAAO;UAAE0C,EAAA,EAAI6B,OAAA,CAAQ7B;QAAG;QACxBS,IAAA,EAAM;UACF8B,OAAA,EAAS;YACLQ,SAAA,EAAWjD,eAAA,CAAgBwB;UAC/B;QACJ;MACJ;MAAA;MAAA/E,aAAA,GAAAE,CAAA;MAEA,OAAO6B,OAAA;IACX;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IAEA,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACgB,MAAA,EAAQ;MAAEV,MAAA,EAAQ;IAAI;EACnD,EAAE,OAAOF,KAAA,EAAO;IAAA;IAAAlD,aAAA,GAAAE,CAAA;IACZiD,OAAA,CAAQD,KAAK,CAAC,2BAA2BA,KAAA;IAAA;IAAAlD,aAAA,GAAAE,CAAA;IACzC,OAAO0C,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEI,KAAA,EAAO;IAA2B,GACpC;MAAEE,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}