4563a85a7c91790831b544980bd427ee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
// Validation functions extracted from the components for testing
const validateDistributions = (items, itemDistributions, shops)=>{
    if (!items || items.length === 0) return {
        isValid: false,
        error: "No items to validate"
    };
    if (shops.length === 0) {
        return {
            isValid: false,
            error: "No shops available for distribution. Please configure at least one shop before creating purchase invoices."
        };
    }
    for(let i = 0; i < items.length; i++){
        const item = items[i];
        const distribution = itemDistributions[i] || {};
        // Calculate total distributed quantity for this item
        const totalDistributed = Object.values(distribution).reduce((sum, qty)=>{
            const num = Number(qty) || 0;
            return sum + num;
        }, 0);
        const requiredQuantity = Number(item.quantity);
        if (totalDistributed === 0) {
            return {
                isValid: false,
                error: `Product "${item.productName || `Product ${item.productId}`}" has no distribution set. Please distribute all quantities to shops.`
            };
        }
        if (totalDistributed !== requiredQuantity) {
            return {
                isValid: false,
                error: `Product "${item.productName || `Product ${item.productId}`}" distribution mismatch. Required: ${requiredQuantity}, Distributed: ${totalDistributed}`
            };
        }
    }
    return {
        isValid: true,
        error: null
    };
};
const getItemDistributionStatus = (itemIndex, items, itemDistributions)=>{
    if (!items || !items[itemIndex]) return {
        status: "none",
        message: "No item"
    };
    const item = items[itemIndex];
    const requiredQty = Number(item.quantity);
    // Calculate distributed quantity
    const distribution = itemDistributions[itemIndex] || {};
    const distributedQty = Object.values(distribution).reduce((sum, qty)=>sum + (Number(qty) || 0), 0);
    // Check if quantities match first (handles zero quantity items)
    if (distributedQty === requiredQty) {
        return {
            status: "complete",
            message: "Fully distributed"
        };
    } else if (distributedQty === 0) {
        return {
            status: "none",
            message: "Not distributed"
        };
    } else if (distributedQty < requiredQty) {
        return {
            status: "partial",
            message: `${distributedQty}/${requiredQty} distributed`
        };
    } else {
        return {
            status: "over",
            message: `Over-distributed: ${distributedQty}/${requiredQty}`
        };
    }
};
(0, _globals.describe)("Purchase Invoice Distribution Validation", ()=>{
    let mockItems;
    let mockShops;
    let mockDistributions;
    (0, _globals.beforeEach)(()=>{
        mockItems = [
            {
                productId: "1",
                productName: "Test Product 1",
                quantity: 10,
                price: 100
            },
            {
                productId: "2",
                productName: "Test Product 2",
                quantity: 5,
                price: 50
            }
        ];
        mockShops = [
            {
                id: "shop1",
                name: "Shop 1"
            },
            {
                id: "shop2",
                name: "Shop 2"
            }
        ];
        mockDistributions = [
            {
                "shop1": 6,
                "shop2": 4
            },
            {
                "shop1": 5
            } // Total: 5 (matches item 2)
        ];
    });
    (0, _globals.describe)("validateDistributions", ()=>{
        (0, _globals.it)("should return valid when all items are properly distributed", ()=>{
            const result = validateDistributions(mockItems, mockDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(true);
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)("should return invalid when no items exist", ()=>{
            const result = validateDistributions([], [], mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe("No items to validate");
        });
        (0, _globals.it)("should return invalid when no shops are configured", ()=>{
            const result = validateDistributions(mockItems, mockDistributions, []);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe("No shops available for distribution. Please configure at least one shop before creating purchase invoices.");
        });
        (0, _globals.it)("should return invalid when item has no distribution", ()=>{
            const emptyDistributions = [
                {},
                {
                    "shop1": 5
                }
            ];
            const result = validateDistributions(mockItems, emptyDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe('Product "Test Product 1" has no distribution set. Please distribute all quantities to shops.');
        });
        (0, _globals.it)("should return invalid when distributed quantity is less than required", ()=>{
            const partialDistributions = [
                {
                    "shop1": 6,
                    "shop2": 2
                },
                {
                    "shop1": 5
                }
            ];
            const result = validateDistributions(mockItems, partialDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe('Product "Test Product 1" distribution mismatch. Required: 10, Distributed: 8');
        });
        (0, _globals.it)("should return invalid when distributed quantity exceeds required", ()=>{
            const overDistributions = [
                {
                    "shop1": 6,
                    "shop2": 6
                },
                {
                    "shop1": 5
                }
            ];
            const result = validateDistributions(mockItems, overDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe('Product "Test Product 1" distribution mismatch. Required: 10, Distributed: 12');
        });
        (0, _globals.it)("should handle missing distribution arrays gracefully", ()=>{
            const incompleteDistributions = [
                {
                    "shop1": 10
                }
            ];
            const result = validateDistributions(mockItems, incompleteDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe('Product "Test Product 2" has no distribution set. Please distribute all quantities to shops.');
        });
        (0, _globals.it)("should handle string quantities in distributions", ()=>{
            const stringDistributions = [
                {
                    "shop1": "6",
                    "shop2": "4"
                },
                {
                    "shop1": "5"
                }
            ];
            const result = validateDistributions(mockItems, stringDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(true);
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)("should handle invalid/NaN quantities in distributions", ()=>{
            const invalidDistributions = [
                {
                    "shop1": "invalid",
                    "shop2": 4
                },
                {
                    "shop1": 5
                }
            ];
            const result = validateDistributions(mockItems, invalidDistributions, mockShops);
            (0, _globals.expect)(result.isValid).toBe(false);
            (0, _globals.expect)(result.error).toBe('Product "Test Product 1" distribution mismatch. Required: 10, Distributed: 4');
        });
    });
    (0, _globals.describe)("getItemDistributionStatus", ()=>{
        (0, _globals.it)('should return "complete" when item is fully distributed', ()=>{
            const result = getItemDistributionStatus(0, mockItems, mockDistributions);
            (0, _globals.expect)(result.status).toBe("complete");
            (0, _globals.expect)(result.message).toBe("Fully distributed");
        });
        (0, _globals.it)('should return "none" when item has no distribution', ()=>{
            const emptyDistributions = [
                {}
            ];
            const result = getItemDistributionStatus(0, mockItems, emptyDistributions);
            (0, _globals.expect)(result.status).toBe("none");
            (0, _globals.expect)(result.message).toBe("Not distributed");
        });
        (0, _globals.it)('should return "partial" when item is partially distributed', ()=>{
            const partialDistributions = [
                {
                    "shop1": 6
                }
            ]; // 6 out of 10
            const result = getItemDistributionStatus(0, mockItems, partialDistributions);
            (0, _globals.expect)(result.status).toBe("partial");
            (0, _globals.expect)(result.message).toBe("6/10 distributed");
        });
        (0, _globals.it)('should return "over" when item is over-distributed', ()=>{
            const overDistributions = [
                {
                    "shop1": 12
                }
            ]; // 12 out of 10
            const result = getItemDistributionStatus(0, mockItems, overDistributions);
            (0, _globals.expect)(result.status).toBe("over");
            (0, _globals.expect)(result.message).toBe("Over-distributed: 12/10");
        });
        (0, _globals.it)('should return "none" when item index is invalid', ()=>{
            const result = getItemDistributionStatus(999, mockItems, mockDistributions);
            (0, _globals.expect)(result.status).toBe("none");
            (0, _globals.expect)(result.message).toBe("No item");
        });
        (0, _globals.it)("should handle missing distribution for item index", ()=>{
            const incompleteDistributions = [
                {
                    "shop1": 10
                }
            ]; // Missing index 1
            const result = getItemDistributionStatus(1, mockItems, incompleteDistributions);
            (0, _globals.expect)(result.status).toBe("none");
            (0, _globals.expect)(result.message).toBe("Not distributed");
        });
        (0, _globals.it)("should handle zero quantity items", ()=>{
            const zeroQuantityItems = [
                {
                    ...mockItems[0],
                    quantity: 0
                }
            ];
            const zeroDistributions = [
                {
                    "shop1": 0
                }
            ];
            const result = getItemDistributionStatus(0, zeroQuantityItems, zeroDistributions);
            // Zero quantity items with zero distribution should be considered complete
            (0, _globals.expect)(result.status).toBe("complete");
            (0, _globals.expect)(result.message).toBe("Fully distributed");
        });
    });
    (0, _globals.describe)("Edge Cases", ()=>{
        (0, _globals.it)("should handle empty arrays", ()=>{
            const result = validateDistributions([], [], []);
            (0, _globals.expect)(result.isValid).toBe(false);
        });
        (0, _globals.it)("should handle null/undefined inputs gracefully", ()=>{
            const result = validateDistributions(null, null, null);
            (0, _globals.expect)(result.isValid).toBe(false);
        });
        (0, _globals.it)("should handle items with missing productName", ()=>{
            const itemsNoName = [
                {
                    productId: "1",
                    productName: "",
                    quantity: 5,
                    price: 100
                }
            ];
            const emptyDist = [
                {}
            ];
            const result = validateDistributions(itemsNoName, emptyDist, mockShops);
            (0, _globals.expect)(result.error).toContain("Product 1");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,