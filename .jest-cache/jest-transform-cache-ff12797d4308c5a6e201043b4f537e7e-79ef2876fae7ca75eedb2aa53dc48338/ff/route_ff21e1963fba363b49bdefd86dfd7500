dde47e8b6242ab43704dd7889288abde
"use strict";

/* istanbul ignore next */
function cov_12reuwq8qi() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/total-retail-value/route.ts";
  var hash = "738265f2fa83c9211e2add07a100c345741ba05a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/total-retail-value/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "10": {
        start: {
          line: 23,
          column: 14
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 27
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "12": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 65
        }
      },
      "13": {
        start: {
          line: 32,
          column: 50
        },
        end: {
          line: 32,
          column: 64
        }
      },
      "14": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 44,
          column: 6
        }
      },
      "15": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 32
        }
      },
      "16": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "18": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 28
        }
      },
      "19": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 52,
          column: 31
        }
      },
      "20": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "21": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 54
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "23": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 50
        }
      },
      "24": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 58,
          column: 63
        }
      },
      "25": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "26": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 50
        }
      },
      "27": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 61
        }
      },
      "28": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 125
        }
      },
      "29": {
        start: {
          line: 70,
          column: 27
        },
        end: {
          line: 70,
          column: 69
        }
      },
      "30": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 77,
          column: 6
        }
      },
      "31": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 146,
          column: 2
        }
      },
      "32": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "33": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 94
        }
      },
      "34": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "35": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "36": {
        start: {
          line: 91,
          column: 33
        },
        end: {
          line: 91,
          column: 53
        }
      },
      "37": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "38": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "39": {
        start: {
          line: 95,
          column: 33
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "41": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 42
        }
      },
      "42": {
        start: {
          line: 101,
          column: 25
        },
        end: {
          line: 101,
          column: 125
        }
      },
      "43": {
        start: {
          line: 102,
          column: 27
        },
        end: {
          line: 102,
          column: 66
        }
      },
      "44": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "45": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "46": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "47": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "48": {
        start: {
          line: 119,
          column: 32
        },
        end: {
          line: 119,
          column: 119
        }
      },
      "49": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "50": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 67
        }
      },
      "51": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "52": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 55
        }
      },
      "53": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 70
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 32
          }
        },
        loc: {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "fetchTotalRetailValueData",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 40
          }
        },
        loc: {
          start: {
            line: 24,
            column: 61
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 42
          },
          end: {
            line: 32,
            column: 43
          }
        },
        loc: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 64
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 47,
            column: 22
          }
        },
        loc: {
          start: {
            line: 47,
            column: 32
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 28
          }
        },
        loc: {
          start: {
            line: 54,
            column: 35
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 79,
            column: 61
          },
          end: {
            line: 79,
            column: 62
          }
        },
        loc: {
          start: {
            line: 79,
            column: 87
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 79
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 29,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 14
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 19
          }
        }, {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 56,
            column: 40
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 32
          },
          end: {
            line: 57,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 32
          },
          end: {
            line: 57,
            column: 45
          }
        }, {
          start: {
            line: 57,
            column: 49
          },
          end: {
            line: 57,
            column: 50
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 26
          },
          end: {
            line: 68,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 54
          },
          end: {
            line: 68,
            column: 84
          }
        }, {
          start: {
            line: 68,
            column: 87
          },
          end: {
            line: 68,
            column: 125
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 54
          },
          end: {
            line: 68,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 77
          },
          end: {
            line: 68,
            column: 80
          }
        }, {
          start: {
            line: 68,
            column: 83
          },
          end: {
            line: 68,
            column: 84
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 42
          }
        }, {
          start: {
            line: 75,
            column: 45
          },
          end: {
            line: 75,
            column: 47
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 96,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 96,
            column: 34
          }
        }, {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 57
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 57
          },
          end: {
            line: 101,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 78
          },
          end: {
            line: 101,
            column: 92
          }
        }, {
          start: {
            line: 101,
            column: 95
          },
          end: {
            line: 101,
            column: 100
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 104
          },
          end: {
            line: 101,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 104
          },
          end: {
            line: 101,
            column: 114
          }
        }, {
          start: {
            line: 101,
            column: 118
          },
          end: {
            line: 101,
            column: 123
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 64
          },
          end: {
            line: 119,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 85
          },
          end: {
            line: 119,
            column: 99
          }
        }, {
          start: {
            line: 119,
            column: 102
          },
          end: {
            line: 119,
            column: 106
          }
        }],
        line: 119
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/total-retail-value/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nexport async function fetchTotalRetailValueData(shopId?: string | null, periodDays?: number) {\n    // Get inventory items with optional shop filtering\n    const inventoryItems = await prisma.inventoryItem.findMany({\n        where: shopId ? { shopId } : {}\n    });\n\n    // Get all products to access their retail prices\n    const productIds = inventoryItems.map(item => item.productId);\n    const products = await prisma.product.findMany({\n        where: {\n            id: {\n                in: productIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            price: true  // This is the retail price\n        }\n    });\n\n    // Create a map of product ID to product data for easy lookup\n    const productMap = new Map();\n    products.forEach(product => {\n        productMap.set(product.id, product);\n    });\n\n    // Calculate total retail value\n    let totalRetailValue = 0;\n    let previousPeriodValue = 0;  // For comparison with previous period\n\n    // Process each inventory item\n    inventoryItems.forEach(item => {\n        const product = productMap.get(item.productId);\n        if (product && item.quantity > 0) {\n            const retailPrice = product.price || 0;\n            const itemRetailValue = retailPrice * item.quantity;\n            totalRetailValue += itemRetailValue;\n        }\n    });\n\n    // For demo purposes, let's assume previous value was 5% less\n    // In a real app, you would fetch historical data\n    previousPeriodValue = totalRetailValue * 0.95;\n\n    // Calculate trend\n    const difference = totalRetailValue - previousPeriodValue;\n    // Handle division by zero if previousPeriodValue is 0\n    const percentChange = previousPeriodValue === 0 ? (totalRetailValue > 0 ? 100 : 0) : (difference / previousPeriodValue) * 100;\n\n    // Format the value for display\n    const formattedValue = `Rs. ${totalRetailValue.toLocaleString()}`;\n\n    return {\n        success: true,\n        formattedValue,\n        rawValue: totalRetailValue,\n        trend: `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(0)}%`,\n        trendUp: percentChange >= 0\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract period parameter from URL\n        const { searchParams } = new URL(request.url);\n        const period = searchParams.get('period');\n        let periodDays: number | undefined;\n        \n        if (period) {\n            const parsedPeriod = parseInt(period);\n            if (parsedPeriod === 7 || parsedPeriod === 30) {\n                periodDays = parsedPeriod;\n            }\n        }\n\n        // Check cache first with shop context and period\n        const cacheKey = `dashboard:total-retail-value:${context.isFiltered ? context.shopId : 'all'}:${periodDays || 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Total retail value served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh total retail value with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            periodDays\n        });\n        const retailValueData = await fetchTotalRetailValueData(context.isFiltered ? context.shopId : null, periodDays);\n\n        // Add metadata to response\n        const responseData = {\n            ...retailValueData,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 3 minutes (retail value changes moderately)\n        await cacheService.set(cacheKey, responseData, 180);\n        console.log('\uD83D\uDCBE Total retail value cached for 3 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error calculating total retail value:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to calculate total retail value',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],
      names: ["GET", "fetchTotalRetailValueData", "shopId", "periodDays", "inventoryItems", "prisma", "inventoryItem", "findMany", "where", "productIds", "map", "item", "productId", "products", "product", "id", "in", "select", "name", "price", "productMap", "Map", "forEach", "set", "totalRetailValue", "previousPeriodValue", "get", "quantity", "retailPrice", "itemRetailValue", "difference", "percentChange", "formattedValue", "toLocaleString", "success", "rawValue", "trend", "toFixed", "trendUp", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "searchParams", "URL", "url", "period", "parsedPeriod", "parseInt", "cacheKey", "isFiltered", "cachedData", "cacheService", "console", "log", "meta", "shopFiltered", "fromCache", "retailValueData", "responseData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "738265f2fa83c9211e2add07a100c345741ba05a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12reuwq8qi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12reuwq8qi();
cov_12reuwq8qi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_12reuwq8qi().f[0]++;
  cov_12reuwq8qi().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_12reuwq8qi().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_12reuwq8qi().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_12reuwq8qi().f[1]++;
    cov_12reuwq8qi().s[4]++;
    return GET;
  },
  fetchTotalRetailValueData: function () {
    /* istanbul ignore next */
    cov_12reuwq8qi().f[2]++;
    cov_12reuwq8qi().s[5]++;
    return fetchTotalRetailValueData;
  }
});
const _server =
/* istanbul ignore next */
(cov_12reuwq8qi().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_12reuwq8qi().s[7]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_12reuwq8qi().s[8]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_12reuwq8qi().s[9]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_12reuwq8qi().s[10]++, require("../../../../lib/auth"));
async function fetchTotalRetailValueData(shopId, periodDays) {
  /* istanbul ignore next */
  cov_12reuwq8qi().f[3]++;
  // Get inventory items with optional shop filtering
  const inventoryItems =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[11]++, await _prisma.prisma.inventoryItem.findMany({
    where: shopId ?
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[0][0]++, {
      shopId
    }) :
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[0][1]++, {})
  }));
  // Get all products to access their retail prices
  const productIds =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[12]++, inventoryItems.map(item => {
    /* istanbul ignore next */
    cov_12reuwq8qi().f[4]++;
    cov_12reuwq8qi().s[13]++;
    return item.productId;
  }));
  const products =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[14]++, await _prisma.prisma.product.findMany({
    where: {
      id: {
        in: productIds
      }
    },
    select: {
      id: true,
      name: true,
      price: true // This is the retail price
    }
  }));
  // Create a map of product ID to product data for easy lookup
  const productMap =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[15]++, new Map());
  /* istanbul ignore next */
  cov_12reuwq8qi().s[16]++;
  products.forEach(product => {
    /* istanbul ignore next */
    cov_12reuwq8qi().f[5]++;
    cov_12reuwq8qi().s[17]++;
    productMap.set(product.id, product);
  });
  // Calculate total retail value
  let totalRetailValue =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[18]++, 0);
  let previousPeriodValue =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[19]++, 0); // For comparison with previous period
  // Process each inventory item
  /* istanbul ignore next */
  cov_12reuwq8qi().s[20]++;
  inventoryItems.forEach(item => {
    /* istanbul ignore next */
    cov_12reuwq8qi().f[6]++;
    const product =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[21]++, productMap.get(item.productId));
    /* istanbul ignore next */
    cov_12reuwq8qi().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[2][0]++, product) &&
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[2][1]++, item.quantity > 0)) {
      /* istanbul ignore next */
      cov_12reuwq8qi().b[1][0]++;
      const retailPrice =
      /* istanbul ignore next */
      (cov_12reuwq8qi().s[23]++,
      /* istanbul ignore next */
      (cov_12reuwq8qi().b[3][0]++, product.price) ||
      /* istanbul ignore next */
      (cov_12reuwq8qi().b[3][1]++, 0));
      const itemRetailValue =
      /* istanbul ignore next */
      (cov_12reuwq8qi().s[24]++, retailPrice * item.quantity);
      /* istanbul ignore next */
      cov_12reuwq8qi().s[25]++;
      totalRetailValue += itemRetailValue;
    } else
    /* istanbul ignore next */
    {
      cov_12reuwq8qi().b[1][1]++;
    }
  });
  // For demo purposes, let's assume previous value was 5% less
  // In a real app, you would fetch historical data
  /* istanbul ignore next */
  cov_12reuwq8qi().s[26]++;
  previousPeriodValue = totalRetailValue * 0.95;
  // Calculate trend
  const difference =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[27]++, totalRetailValue - previousPeriodValue);
  // Handle division by zero if previousPeriodValue is 0
  const percentChange =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[28]++, previousPeriodValue === 0 ?
  /* istanbul ignore next */
  (cov_12reuwq8qi().b[4][0]++, totalRetailValue > 0 ?
  /* istanbul ignore next */
  (cov_12reuwq8qi().b[5][0]++, 100) :
  /* istanbul ignore next */
  (cov_12reuwq8qi().b[5][1]++, 0)) :
  /* istanbul ignore next */
  (cov_12reuwq8qi().b[4][1]++, difference / previousPeriodValue * 100));
  // Format the value for display
  const formattedValue =
  /* istanbul ignore next */
  (cov_12reuwq8qi().s[29]++, `Rs. ${totalRetailValue.toLocaleString()}`);
  /* istanbul ignore next */
  cov_12reuwq8qi().s[30]++;
  return {
    success: true,
    formattedValue,
    rawValue: totalRetailValue,
    trend: `${percentChange >= 0 ?
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[6][0]++, "+") :
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[6][1]++, "")}${percentChange.toFixed(0)}%`,
    trendUp: percentChange >= 0
  };
}
const GET =
/* istanbul ignore next */
(cov_12reuwq8qi().s[31]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_12reuwq8qi().f[7]++;
  cov_12reuwq8qi().s[32]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[33]++, await (0, _auth.validateTokenPermission)(request, "view_dashboard"));
    /* istanbul ignore next */
    cov_12reuwq8qi().s[34]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_12reuwq8qi().b[7][0]++;
      cov_12reuwq8qi().s[35]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_12reuwq8qi().b[7][1]++;
    }
    // Extract period parameter from URL
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[36]++, new URL(request.url));
    const period =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[37]++, searchParams.get("period"));
    let periodDays;
    /* istanbul ignore next */
    cov_12reuwq8qi().s[38]++;
    if (period) {
      /* istanbul ignore next */
      cov_12reuwq8qi().b[8][0]++;
      const parsedPeriod =
      /* istanbul ignore next */
      (cov_12reuwq8qi().s[39]++, parseInt(period));
      /* istanbul ignore next */
      cov_12reuwq8qi().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_12reuwq8qi().b[10][0]++, parsedPeriod === 7) ||
      /* istanbul ignore next */
      (cov_12reuwq8qi().b[10][1]++, parsedPeriod === 30)) {
        /* istanbul ignore next */
        cov_12reuwq8qi().b[9][0]++;
        cov_12reuwq8qi().s[41]++;
        periodDays = parsedPeriod;
      } else
      /* istanbul ignore next */
      {
        cov_12reuwq8qi().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_12reuwq8qi().b[8][1]++;
    }
    // Check cache first with shop context and period
    const cacheKey =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[42]++, `dashboard:total-retail-value:${context.isFiltered ?
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[11][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[11][1]++, "all")}:${
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[12][0]++, periodDays) ||
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[12][1]++, "all")}`);
    const cachedData =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[43]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_12reuwq8qi().s[44]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_12reuwq8qi().b[13][0]++;
      cov_12reuwq8qi().s[45]++;
      console.log("✅ Total retail value served from cache");
      /* istanbul ignore next */
      cov_12reuwq8qi().s[46]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_12reuwq8qi().b[13][1]++;
    }
    cov_12reuwq8qi().s[47]++;
    console.log("\uD83D\uDD04 Fetching fresh total retail value with shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered,
      periodDays
    });
    const retailValueData =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[48]++, await fetchTotalRetailValueData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[14][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_12reuwq8qi().b[14][1]++, null), periodDays));
    // Add metadata to response
    const responseData =
    /* istanbul ignore next */
    (cov_12reuwq8qi().s[49]++, {
      ...retailValueData,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache for 3 minutes (retail value changes moderately)
    /* istanbul ignore next */
    cov_12reuwq8qi().s[50]++;
    await _cache.cacheService.set(cacheKey, responseData, 180);
    /* istanbul ignore next */
    cov_12reuwq8qi().s[51]++;
    console.log("\uD83D\uDCBE Total retail value cached for 3 minutes");
    /* istanbul ignore next */
    cov_12reuwq8qi().s[52]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_12reuwq8qi().s[53]++;
    console.error("Error calculating total retail value:", error);
    /* istanbul ignore next */
    cov_12reuwq8qi().s[54]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to calculate total retail value",
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,