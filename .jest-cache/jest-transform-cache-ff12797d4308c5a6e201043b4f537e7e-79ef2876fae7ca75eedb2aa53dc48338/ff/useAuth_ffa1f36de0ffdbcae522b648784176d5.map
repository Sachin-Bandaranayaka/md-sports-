{"version":3,"names":["cov_2nnkk9tup4","actualCoverage","s","AuthProvider","f","api","useAuth","AuthContext","_react","createContext","undefined","_axios","default","create","baseURL","headers","children","user","setUser","useState","accessToken","setAccessToken","isLoading","setIsLoading","router","_navigation","useRouter","useEffect","requestInterceptor","interceptors","request","use","config","currentToken","b","localStorage","getItem","Authorization","csrfToken","getCookie","method","error","Promise","reject","responseInterceptor","response","originalRequest","status","_retry","console","log","refreshResponse","post","withCredentials","timeout","data","success","newAccessToken","setItem","substring","message","logout","refreshError","code","eject","validateAuth","storedAccessToken","retryCount","maxRetries","validationSuccessful","get","warn","validationError","resolve","setTimeout","login","email","password","userData","removeItem","useCallback","push","hasPermission","permission","permissions","includes","getUserPermissions","name","value","document","cookie","parts","split","length","pop","shift","_jsxruntime","jsx","Provider","isAuthenticated","context","useContext","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\n\n// Types\ninterface User {\n    id: number;\n    username: string;\n    fullName: string;\n    email: string;\n    roleId: number;\n    roleName: string;\n    shopId?: number;\n    permissions: string[];\n}\n\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken || localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if ((error.response?.status === 401) && !originalRequest._retry) { // Only retry on 401 for token refresh\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        // Use api instance to ensure CSRF token is included\n                        const refreshResponse = await api.post('/api/auth/refresh', {}, {\n                            withCredentials: true,\n                            timeout: 10000 // 10 second timeout for refresh\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n                            localStorage.setItem('accessToken', newAccessToken);\n                            localStorage.setItem('authToken', newAccessToken); // Keep for compatibility if still used\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        \n                        // Be more lenient with network errors during refresh\n                        if (refreshError.code === 'ECONNABORTED' || refreshError.code === 'NETWORK_ERROR' || !refreshError.response) {\n                            console.log('Network error during token refresh, not logging out user');\n                            // Don't logout for network issues - let the user try again\n                            return Promise.reject(error); // Reject with original error, but don't logout\n                        } else if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                            // Only logout for actual authentication failures (401, 403)\n                            if (refreshError.response.status === 401 || refreshError.response.status === 403) {\n                                await logout();\n                            } else {\n                                console.log('Server error during refresh, not logging out user');\n                            }\n                        } else {\n                            await logout(); // Logout for other unexpected errors\n                        }\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken]); // Added accessToken to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                const storedAccessToken = localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n\n                if (storedAccessToken) {\n                    console.log('Found stored accessToken, validating with /api/auth/validate...');\n                    \n                    // Retry logic for validation to handle network issues during hard refresh\n                    let retryCount = 0;\n                    const maxRetries = 2;\n                    let validationSuccessful = false;\n                    \n                    while (retryCount <= maxRetries && !validationSuccessful) {\n                        try {\n                            const response = await api.get('/api/auth/validate', {\n                                headers: { Authorization: `Bearer ${storedAccessToken}` },\n                                timeout: 10000, // 10 second timeout\n                            });\n                            \n                            if (response.data.success) {\n                                setUser(response.data.user);\n                                setAccessToken(storedAccessToken);\n                                console.log('Stored accessToken is valid.');\n                                validationSuccessful = true;\n                            } else {\n                                console.warn('/api/auth/validate returned success:false, but not an error status.');\n                                break; // Don't retry for explicit validation failures\n                            }\n                        } catch (validationError: any) {\n                            console.log(`Validation attempt ${retryCount + 1} failed. Error status:`, validationError?.response?.status);\n                            \n                            // Handle different types of errors\n                            if (validationError.response?.status === 401) {\n                                // Token is invalid/expired - let interceptor handle refresh\n                                console.log('Token appears invalid, letting interceptor handle refresh...');\n                                break;\n                            } else if (validationError.code === 'ECONNABORTED' || validationError.code === 'NETWORK_ERROR' || !validationError.response) {\n                                // Network/timeout errors - retry\n                                retryCount++;\n                                if (retryCount <= maxRetries) {\n                                    console.log(`Network error detected, retrying in ${retryCount * 1000}ms...`);\n                                    await new Promise(resolve => setTimeout(resolve, retryCount * 1000));\n                                    continue;\n                                } else {\n                                    console.log('Max retries reached for network errors, assuming user is still authenticated');\n                                    // Don't clear auth state for network issues - assume user is still valid\n                                    setAccessToken(storedAccessToken);\n                                    validationSuccessful = true;\n                                }\n                            } else {\n                                // Other server errors (5xx) - don't clear auth immediately\n                                console.log('Server error during validation, assuming temporary issue');\n                                setAccessToken(storedAccessToken);\n                                validationSuccessful = true;\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    console.log('No stored accessToken found.');\n                    // No token, user is not logged in\n                }\n            } catch (error) {\n                // Catch-all for unexpected errors - be more lenient\n                console.error('Unexpected error in validateAuth:', error);\n                const storedAccessToken = localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n                if (storedAccessToken) {\n                    console.log('Keeping existing token despite validation error');\n                    setAccessToken(storedAccessToken);\n                }\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, []); // Remove logout from dependencies as it's not used in this useEffect\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n                localStorage.setItem('accessToken', newAccessToken);\n                localStorage.setItem('authToken', newAccessToken); // for compatibility\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        return false;\n    };\n\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return user.permissions.includes(permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                accessToken,\n                isLoading,\n                isAuthenticated: !!user,\n                login,\n                logout,\n                hasPermission,\n                getUserPermissions,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],"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","ignoreList":[]}