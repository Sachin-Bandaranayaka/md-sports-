747bc91fa8110f100827eb0206be2b1e
"use client";
"use strict";

/* istanbul ignore next */
function cov_2nnkk9tup4() {
  var path = "/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx";
  var hash = "b29f12d31989e6de3a0e3b2cb7980a9654a4b709";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "8": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "9": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "10": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 46
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "12": {
        start: {
          line: 33,
          column: 34
        },
        end: {
          line: 33,
          column: 70
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "14": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 270,
          column: 1
        }
      },
      "15": {
        start: {
          line: 42,
          column: 28
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "16": {
        start: {
          line: 43,
          column: 42
        },
        end: {
          line: 43,
          column: 68
        }
      },
      "17": {
        start: {
          line: 44,
          column: 38
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "18": {
        start: {
          line: 45,
          column: 19
        },
        end: {
          line: 45,
          column: 47
        }
      },
      "19": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "20": {
        start: {
          line: 48,
          column: 35
        },
        end: {
          line: 59,
          column: 42
        }
      },
      "21": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 49,
          column: 120
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "23": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 72
        }
      },
      "24": {
        start: {
          line: 54,
          column: 30
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 59
        }
      },
      "27": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "28": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "29": {
        start: {
          line: 60,
          column: 36
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "30": {
        start: {
          line: 60,
          column: 78
        },
        end: {
          line: 60,
          column: 86
        }
      },
      "31": {
        start: {
          line: 61,
          column: 36
        },
        end: {
          line: 61,
          column: 48
        }
      },
      "32": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "33": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 46
        }
      },
      "34": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "35": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 115
        }
      },
      "36": {
        start: {
          line: 68,
          column: 44
        },
        end: {
          line: 71,
          column: 22
        }
      },
      "37": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 85,
          column: 21
        }
      },
      "38": {
        start: {
          line: 73,
          column: 47
        },
        end: {
          line: 73,
          column: 79
        }
      },
      "39": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 59
        }
      },
      "40": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "41": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 76
        }
      },
      "42": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 74
        }
      },
      "43": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 78,
          column: 127
        }
      },
      "44": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 91
        }
      },
      "45": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 52
        }
      },
      "46": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 111
        }
      },
      "47": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 39
        }
      },
      "48": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "49": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 92
        }
      },
      "50": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "51": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 96
        }
      },
      "52": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 53
        }
      },
      "53": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "54": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 144
        }
      },
      "55": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 100,
          column: 25
        }
      },
      "56": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 43
        }
      },
      "57": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 99,
          column: 93
        }
      },
      "58": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 39
        }
      },
      "59": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 56
        }
      },
      "60": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 41
        }
      },
      "61": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 112,
          column: 10
        }
      },
      "62": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 63
        }
      },
      "63": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "64": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "65": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "66": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 31
        }
      },
      "67": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "68": {
        start: {
          line: 120,
          column: 42
        },
        end: {
          line: 120,
          column: 114
        }
      },
      "69": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "70": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 99
        }
      },
      "71": {
        start: {
          line: 124,
          column: 37
        },
        end: {
          line: 124,
          column: 38
        }
      },
      "72": {
        start: {
          line: 125,
          column: 39
        },
        end: {
          line: 125,
          column: 40
        }
      },
      "73": {
        start: {
          line: 126,
          column: 47
        },
        end: {
          line: 126,
          column: 52
        }
      },
      "74": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 172,
          column: 21
        }
      },
      "75": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 171,
          column: 25
        }
      },
      "76": {
        start: {
          line: 129,
          column: 45
        },
        end: {
          line: 134,
          column: 30
        }
      },
      "77": {
        start: {
          line: 135,
          column: 28
        },
        end: {
          line: 143,
          column: 29
        }
      },
      "78": {
        start: {
          line: 136,
          column: 32
        },
        end: {
          line: 136,
          column: 60
        }
      },
      "79": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 66
        }
      },
      "80": {
        start: {
          line: 138,
          column: 32
        },
        end: {
          line: 138,
          column: 76
        }
      },
      "81": {
        start: {
          line: 139,
          column: 32
        },
        end: {
          line: 139,
          column: 60
        }
      },
      "82": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 141,
          column: 116
        }
      },
      "83": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 38
        }
      },
      "84": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 137
        }
      },
      "85": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 170,
          column: 29
        }
      },
      "86": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 108
        }
      },
      "87": {
        start: {
          line: 150,
          column: 32
        },
        end: {
          line: 150,
          column: 38
        }
      },
      "88": {
        start: {
          line: 151,
          column: 35
        },
        end: {
          line: 170,
          column: 29
        }
      },
      "89": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 45
        }
      },
      "90": {
        start: {
          line: 154,
          column: 32
        },
        end: {
          line: 163,
          column: 33
        }
      },
      "91": {
        start: {
          line: 155,
          column: 36
        },
        end: {
          line: 155,
          column: 113
        }
      },
      "92": {
        start: {
          line: 156,
          column: 36
        },
        end: {
          line: 156,
          column: 105
        }
      },
      "93": {
        start: {
          line: 156,
          column: 65
        },
        end: {
          line: 156,
          column: 103
        }
      },
      "94": {
        start: {
          line: 157,
          column: 36
        },
        end: {
          line: 157,
          column: 45
        }
      },
      "95": {
        start: {
          line: 159,
          column: 36
        },
        end: {
          line: 159,
          column: 128
        }
      },
      "96": {
        start: {
          line: 161,
          column: 36
        },
        end: {
          line: 161,
          column: 70
        }
      },
      "97": {
        start: {
          line: 162,
          column: 36
        },
        end: {
          line: 162,
          column: 64
        }
      },
      "98": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 166,
          column: 104
        }
      },
      "99": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 66
        }
      },
      "100": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 168,
          column: 60
        }
      },
      "101": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 38
        }
      },
      "102": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 64
        }
      },
      "103": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 74
        }
      },
      "104": {
        start: {
          line: 180,
          column: 42
        },
        end: {
          line: 180,
          column: 114
        }
      },
      "105": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "106": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 83
        }
      },
      "107": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "108": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 36
        }
      },
      "109": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 23
        }
      },
      "110": {
        start: {
          line: 191,
          column: 18
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "111": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 27
        }
      },
      "112": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "113": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "114": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "115": {
        start: {
          line: 199,
          column: 72
        },
        end: {
          line: 199,
          column: 85
        }
      },
      "116": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 34
        }
      },
      "117": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 47
        }
      },
      "118": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 68
        }
      },
      "119": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 66
        }
      },
      "120": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 109
        }
      },
      "121": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 36
        }
      },
      "122": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 28
        }
      },
      "123": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 91
        }
      },
      "124": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 28
        }
      },
      "125": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 22
        }
      },
      "126": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 29
        }
      },
      "127": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 47
        }
      },
      "128": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 45
        }
      },
      "129": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 21
        }
      },
      "130": {
        start: {
          line: 219,
          column: 19
        },
        end: {
          line: 237,
          column: 6
        }
      },
      "131": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 27
        }
      },
      "132": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 22
        }
      },
      "133": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 29
        }
      },
      "134": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 47
        }
      },
      "135": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 45
        }
      },
      "136": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "137": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 47
        }
      },
      "138": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 75
        }
      },
      "139": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 60
        }
      },
      "140": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 30
        }
      },
      "141": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 28
        }
      },
      "142": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 242,
          column: 5
        }
      },
      "143": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 53
        }
      },
      "144": {
        start: {
          line: 240,
          column: 40
        },
        end: {
          line: 240,
          column: 53
        }
      },
      "145": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 53
        }
      },
      "146": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "147": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 50
        }
      },
      "148": {
        start: {
          line: 245,
          column: 40
        },
        end: {
          line: 245,
          column: 50
        }
      },
      "149": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "150": {
        start: {
          line: 251,
          column: 22
        },
        end: {
          line: 256,
          column: 5
        }
      },
      "151": {
        start: {
          line: 252,
          column: 22
        },
        end: {
          line: 252,
          column: 44
        }
      },
      "152": {
        start: {
          line: 253,
          column: 22
        },
        end: {
          line: 253,
          column: 47
        }
      },
      "153": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 71
        }
      },
      "154": {
        start: {
          line: 254,
          column: 32
        },
        end: {
          line: 254,
          column: 71
        }
      },
      "155": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 25
        }
      },
      "156": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 269,
          column: 7
        }
      },
      "157": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 277,
          column: 1
        }
      },
      "158": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 55
        }
      },
      "159": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "160": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 71
        }
      },
      "161": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 10
          }
        },
        loc: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 13
          },
          end: {
            line: 19,
            column: 14
          }
        },
        loc: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 41,
            column: 22
          }
        },
        loc: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 270,
            column: 1
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 27
          }
        },
        loc: {
          start: {
            line: 47,
            column: 30
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 47
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 65
          }
        },
        loc: {
          start: {
            line: 48,
            column: 74
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 48
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 59,
            column: 11
          },
          end: {
            line: 59,
            column: 12
          }
        },
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 41
          }
        },
        line: 59
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 60,
            column: 66
          },
          end: {
            line: 60,
            column: 67
          }
        },
        loc: {
          start: {
            line: 60,
            column: 78
          },
          end: {
            line: 60,
            column: 86
          }
        },
        line: 60
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 60,
            column: 88
          },
          end: {
            line: 60,
            column: 89
          }
        },
        loc: {
          start: {
            line: 60,
            column: 103
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 60
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 109,
            column: 16
          }
        },
        loc: {
          start: {
            line: 109,
            column: 19
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 109
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 116,
            column: 27
          }
        },
        loc: {
          start: {
            line: 116,
            column: 30
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 116
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 29
          },
          end: {
            line: 117,
            column: 30
          }
        },
        loc: {
          start: {
            line: 117,
            column: 39
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 156,
            column: 54
          },
          end: {
            line: 156,
            column: 55
          }
        },
        loc: {
          start: {
            line: 156,
            column: 65
          },
          end: {
            line: 156,
            column: 103
          }
        },
        line: 156
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 191,
            column: 18
          },
          end: {
            line: 191,
            column: 19
          }
        },
        loc: {
          start: {
            line: 191,
            column: 43
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 191
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 219,
            column: 43
          },
          end: {
            line: 219,
            column: 44
          }
        },
        loc: {
          start: {
            line: 219,
            column: 53
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 219
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 239,
            column: 26
          },
          end: {
            line: 239,
            column: 27
          }
        },
        loc: {
          start: {
            line: 239,
            column: 40
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 239
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 244,
            column: 31
          },
          end: {
            line: 244,
            column: 32
          }
        },
        loc: {
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 244
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 251,
            column: 22
          },
          end: {
            line: 251,
            column: 23
          }
        },
        loc: {
          start: {
            line: 251,
            column: 30
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 251
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        },
        loc: {
          start: {
            line: 271,
            column: 20
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 271
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 49,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 49,
            column: 44
          }
        }, {
          start: {
            line: 49,
            column: 48
          },
          end: {
            line: 49,
            column: 83
          }
        }, {
          start: {
            line: 49,
            column: 87
          },
          end: {
            line: 49,
            column: 120
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 25
          }
        }, {
          start: {
            line: 55,
            column: 29
          },
          end: {
            line: 55,
            column: 52
          }
        }, {
          start: {
            line: 55,
            column: 56
          },
          end: {
            line: 55,
            column: 80
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 62,
            column: 46
          }
        }, {
          start: {
            line: 62,
            column: 50
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        }, {
          start: {
            line: 81,
            column: 27
          },
          end: {
            line: 85,
            column: 21
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: 93,
            column: 27
          },
          end: {
            line: 103,
            column: 21
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 60
          }
        }, {
          start: {
            line: 89,
            column: 64
          },
          end: {
            line: 89,
            column: 101
          }
        }, {
          start: {
            line: 89,
            column: 105
          },
          end: {
            line: 89,
            column: 127
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 27
          },
          end: {
            line: 103,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 27
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: 101,
            column: 27
          },
          end: {
            line: 103,
            column: 21
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 100,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 100,
            column: 25
          }
        }, {
          start: {
            line: 98,
            column: 31
          },
          end: {
            line: 100,
            column: 25
          }
        }],
        line: 96
      },
      "13": {
        loc: {
          start: {
            line: 96,
            column: 28
          },
          end: {
            line: 96,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 28
          },
          end: {
            line: 96,
            column: 64
          }
        }, {
          start: {
            line: 96,
            column: 68
          },
          end: {
            line: 96,
            column: 104
          }
        }],
        line: 96
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 42
          },
          end: {
            line: 120,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 42
          },
          end: {
            line: 120,
            column: 77
          }
        }, {
          start: {
            line: 120,
            column: 81
          },
          end: {
            line: 120,
            column: 114
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 176,
            column: 17
          }
        }],
        line: 121
      },
      "16": {
        loc: {
          start: {
            line: 127,
            column: 26
          },
          end: {
            line: 127,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 26
          },
          end: {
            line: 127,
            column: 50
          }
        }, {
          start: {
            line: 127,
            column: 54
          },
          end: {
            line: 127,
            column: 75
          }
        }],
        line: 127
      },
      "17": {
        loc: {
          start: {
            line: 135,
            column: 28
          },
          end: {
            line: 143,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 28
          },
          end: {
            line: 143,
            column: 29
          }
        }, {
          start: {
            line: 140,
            column: 35
          },
          end: {
            line: 143,
            column: 29
          }
        }],
        line: 135
      },
      "18": {
        loc: {
          start: {
            line: 147,
            column: 28
          },
          end: {
            line: 170,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 28
          },
          end: {
            line: 170,
            column: 29
          }
        }, {
          start: {
            line: 151,
            column: 35
          },
          end: {
            line: 170,
            column: 29
          }
        }],
        line: 147
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 35
          },
          end: {
            line: 170,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 35
          },
          end: {
            line: 170,
            column: 29
          }
        }, {
          start: {
            line: 164,
            column: 35
          },
          end: {
            line: 170,
            column: 29
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 151,
            column: 39
          },
          end: {
            line: 151,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 39
          },
          end: {
            line: 151,
            column: 78
          }
        }, {
          start: {
            line: 151,
            column: 82
          },
          end: {
            line: 151,
            column: 122
          }
        }, {
          start: {
            line: 151,
            column: 126
          },
          end: {
            line: 151,
            column: 151
          }
        }],
        line: 151
      },
      "21": {
        loc: {
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 163,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 163,
            column: 33
          }
        }, {
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 163,
            column: 33
          }
        }],
        line: 154
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 42
          },
          end: {
            line: 180,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 42
          },
          end: {
            line: 180,
            column: 77
          }
        }, {
          start: {
            line: 180,
            column: 81
          },
          end: {
            line: 180,
            column: 114
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "24": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "25": {
        loc: {
          start: {
            line: 210,
            column: 43
          },
          end: {
            line: 210,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 43
          },
          end: {
            line: 210,
            column: 72
          }
        }, {
          start: {
            line: 210,
            column: 76
          },
          end: {
            line: 210,
            column: 89
          }
        }],
        line: 210
      },
      "26": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 240,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 240,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "27": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 17
          }
        }, {
          start: {
            line: 240,
            column: 21
          },
          end: {
            line: 240,
            column: 38
          }
        }],
        line: 240
      },
      "28": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 245,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 245,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "29": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 245,
            column: 38
          }
        }],
        line: 245
      },
      "30": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 254,
            column: 71
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 254,
            column: 71
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "31": {
        loc: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],
      sourcesContent: ["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\n\n// Types\ninterface User {\n    id: number;\n    username: string;\n    fullName: string;\n    email: string;\n    roleId: number;\n    roleName: string;\n    shopId?: number;\n    permissions: string[];\n}\n\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken || localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if ((error.response?.status === 401) && !originalRequest._retry) { // Only retry on 401 for token refresh\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        // Use api instance to ensure CSRF token is included\n                        const refreshResponse = await api.post('/api/auth/refresh', {}, {\n                            withCredentials: true,\n                            timeout: 10000 // 10 second timeout for refresh\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n                            localStorage.setItem('accessToken', newAccessToken);\n                            localStorage.setItem('authToken', newAccessToken); // Keep for compatibility if still used\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        \n                        // Be more lenient with network errors during refresh\n                        if (refreshError.code === 'ECONNABORTED' || refreshError.code === 'NETWORK_ERROR' || !refreshError.response) {\n                            console.log('Network error during token refresh, not logging out user');\n                            // Don't logout for network issues - let the user try again\n                            return Promise.reject(error); // Reject with original error, but don't logout\n                        } else if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                            // Only logout for actual authentication failures (401, 403)\n                            if (refreshError.response.status === 401 || refreshError.response.status === 403) {\n                                await logout();\n                            } else {\n                                console.log('Server error during refresh, not logging out user');\n                            }\n                        } else {\n                            await logout(); // Logout for other unexpected errors\n                        }\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken]); // Added accessToken to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                const storedAccessToken = localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n\n                if (storedAccessToken) {\n                    console.log('Found stored accessToken, validating with /api/auth/validate...');\n                    \n                    // Retry logic for validation to handle network issues during hard refresh\n                    let retryCount = 0;\n                    const maxRetries = 2;\n                    let validationSuccessful = false;\n                    \n                    while (retryCount <= maxRetries && !validationSuccessful) {\n                        try {\n                            const response = await api.get('/api/auth/validate', {\n                                headers: { Authorization: `Bearer ${storedAccessToken}` },\n                                timeout: 10000, // 10 second timeout\n                            });\n                            \n                            if (response.data.success) {\n                                setUser(response.data.user);\n                                setAccessToken(storedAccessToken);\n                                console.log('Stored accessToken is valid.');\n                                validationSuccessful = true;\n                            } else {\n                                console.warn('/api/auth/validate returned success:false, but not an error status.');\n                                break; // Don't retry for explicit validation failures\n                            }\n                        } catch (validationError: any) {\n                            console.log(`Validation attempt ${retryCount + 1} failed. Error status:`, validationError?.response?.status);\n                            \n                            // Handle different types of errors\n                            if (validationError.response?.status === 401) {\n                                // Token is invalid/expired - let interceptor handle refresh\n                                console.log('Token appears invalid, letting interceptor handle refresh...');\n                                break;\n                            } else if (validationError.code === 'ECONNABORTED' || validationError.code === 'NETWORK_ERROR' || !validationError.response) {\n                                // Network/timeout errors - retry\n                                retryCount++;\n                                if (retryCount <= maxRetries) {\n                                    console.log(`Network error detected, retrying in ${retryCount * 1000}ms...`);\n                                    await new Promise(resolve => setTimeout(resolve, retryCount * 1000));\n                                    continue;\n                                } else {\n                                    console.log('Max retries reached for network errors, assuming user is still authenticated');\n                                    // Don't clear auth state for network issues - assume user is still valid\n                                    setAccessToken(storedAccessToken);\n                                    validationSuccessful = true;\n                                }\n                            } else {\n                                // Other server errors (5xx) - don't clear auth immediately\n                                console.log('Server error during validation, assuming temporary issue');\n                                setAccessToken(storedAccessToken);\n                                validationSuccessful = true;\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    console.log('No stored accessToken found.');\n                    // No token, user is not logged in\n                }\n            } catch (error) {\n                // Catch-all for unexpected errors - be more lenient\n                console.error('Unexpected error in validateAuth:', error);\n                const storedAccessToken = localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n                if (storedAccessToken) {\n                    console.log('Keeping existing token despite validation error');\n                    setAccessToken(storedAccessToken);\n                }\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, []); // Remove logout from dependencies as it's not used in this useEffect\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n                localStorage.setItem('accessToken', newAccessToken);\n                localStorage.setItem('authToken', newAccessToken); // for compatibility\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        return false;\n    };\n\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return user.permissions.includes(permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                accessToken,\n                isLoading,\n                isAuthenticated: !!user,\n                login,\n                logout,\n                hasPermission,\n                getUserPermissions,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],
      names: ["AuthProvider", "api", "useAuth", "AuthContext", "createContext", "undefined", "axios", "create", "baseURL", "headers", "children", "user", "setUser", "useState", "accessToken", "setAccessToken", "isLoading", "setIsLoading", "router", "useRouter", "useEffect", "requestInterceptor", "interceptors", "request", "use", "config", "currentToken", "localStorage", "getItem", "Authorization", "csrfToken", "getCookie", "method", "error", "Promise", "reject", "responseInterceptor", "response", "originalRequest", "status", "_retry", "console", "log", "refreshResponse", "post", "withCredentials", "timeout", "data", "success", "newAccessToken", "setItem", "substring", "message", "logout", "refreshError", "code", "eject", "validateAuth", "storedAccessToken", "retryCount", "maxRetries", "validationSuccessful", "get", "warn", "validationError", "resolve", "setTimeout", "login", "email", "password", "userData", "removeItem", "useCallback", "push", "hasPermission", "permission", "permissions", "includes", "getUserPermissions", "name", "value", "document", "cookie", "parts", "split", "length", "pop", "shift", "Provider", "isAuthenticated", "context", "useContext", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b29f12d31989e6de3a0e3b2cb7980a9654a4b709"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nnkk9tup4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nnkk9tup4();
cov_2nnkk9tup4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[0]++;
  cov_2nnkk9tup4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2nnkk9tup4().s[3]++;
_export(exports, {
  AuthProvider: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[1]++;
    cov_2nnkk9tup4().s[4]++;
    return AuthProvider;
  },
  api: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[2]++;
    cov_2nnkk9tup4().s[5]++;
    return api;
  },
  useAuth: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[3]++;
    cov_2nnkk9tup4().s[6]++;
    return useAuth;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[7]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[8]++, require("react"));
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_2nnkk9tup4().s[9]++, _interop_require_default(require("axios")));
const _navigation =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[10]++, require("next/navigation"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[4]++;
  cov_2nnkk9tup4().s[11]++;
  return /* istanbul ignore next */(cov_2nnkk9tup4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[0][1]++, {
    default: obj
  });
}
// Create context
const AuthContext =
/* istanbul ignore next */
(/*#__PURE__*/cov_2nnkk9tup4().s[12]++, (0, _react.createContext)(undefined));
// Create axios instance with interceptors
const api =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[13]++, _axios.default.create({
  baseURL: "/",
  headers: {
    "Content-Type": "application/json"
  }
}));
/* istanbul ignore next */
cov_2nnkk9tup4().s[14]++;
const AuthProvider = ({
  children
}) => {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[5]++;
  const [user, setUser] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[15]++, (0, _react.useState)(null));
  const [accessToken, setAccessToken] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[16]++, (0, _react.useState)(null));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[17]++, (0, _react.useState)(true));
  const router =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[18]++, (0, _navigation.useRouter)());
  // Setup axios interceptors for token refresh
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[19]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[6]++;
    const requestInterceptor =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[20]++, api.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[7]++;
      const currentToken =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[21]++,
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[2][0]++, accessToken) ||
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[2][1]++, localStorage.getItem("accessToken")) ||
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[2][2]++, localStorage.getItem("authToken")));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[22]++;
      if (currentToken) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[3][0]++;
        cov_2nnkk9tup4().s[23]++;
        config.headers.Authorization = `Bearer ${currentToken}`;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[3][1]++;
      }
      // CSRF token logic remains unchanged
      const csrfToken =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[24]++, getCookie("csrfToken"));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[5][0]++, csrfToken) &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[5][1]++, config.method !== "get") &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[5][2]++, config.method !== "head")) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[4][0]++;
        cov_2nnkk9tup4().s[26]++;
        config.headers["X-CSRF-Token"] = csrfToken;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[4][1]++;
      }
      cov_2nnkk9tup4().s[27]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[8]++;
      cov_2nnkk9tup4().s[28]++;
      return Promise.reject(error);
    }));
    const responseInterceptor =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[29]++, api.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[9]++;
      cov_2nnkk9tup4().s[30]++;
      return response;
    }, async error => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[10]++;
      const originalRequest =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[31]++, error.config);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[32]++;
      if (
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[7][0]++, error.response?.status === 401) &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[7][1]++, !originalRequest._retry)) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[6][0]++;
        cov_2nnkk9tup4().s[33]++;
        originalRequest._retry = true;
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[34]++;
        try {
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[35]++;
          console.log("Access Token expired or invalid, attempting to refresh via /api/auth/refresh...");
          // Send an empty object or no body. Relies on httpOnly refreshToken cookie.
          // Use api instance to ensure CSRF token is included
          const refreshResponse =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[36]++, await api.post("/api/auth/refresh", {}, {
            withCredentials: true,
            timeout: 10000 // 10 second timeout for refresh
          }));
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[37]++;
          if (refreshResponse.data.success) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[8][0]++;
            const newAccessToken =
            /* istanbul ignore next */
            (cov_2nnkk9tup4().s[38]++, refreshResponse.data.accessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[39]++;
            setUser(refreshResponse.data.user);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[40]++;
            setAccessToken(newAccessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[41]++;
            localStorage.setItem("accessToken", newAccessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[42]++;
            localStorage.setItem("authToken", newAccessToken); // Keep for compatibility if still used
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[43]++;
            console.log("Token refreshed successfully. New accessToken:", newAccessToken.substring(0, 10) + "...");
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[44]++;
            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[45]++;
            return api(originalRequest);
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[8][1]++;
            cov_2nnkk9tup4().s[46]++;
            console.error("Token refresh explicitly failed by API:", refreshResponse.data.message);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[47]++;
            await logout(); // Logout if refresh attempt itself fails
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[48]++;
            return Promise.reject(error); // Reject with original error
          }
        } catch (refreshError) {
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[49]++;
          console.error("Full error during token refresh attempt:", refreshError);
          // Be more lenient with network errors during refresh
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[50]++;
          if (
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[10][0]++, refreshError.code === "ECONNABORTED") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[10][1]++, refreshError.code === "NETWORK_ERROR") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[10][2]++, !refreshError.response)) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[9][0]++;
            cov_2nnkk9tup4().s[51]++;
            console.log("Network error during token refresh, not logging out user");
            // Don't logout for network issues - let the user try again
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[52]++;
            return Promise.reject(error); // Reject with original error, but don't logout
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[9][1]++;
            cov_2nnkk9tup4().s[53]++;
            if (refreshError.response) {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[11][0]++;
              cov_2nnkk9tup4().s[54]++;
              console.error("Refresh attempt failed with status:", refreshError.response.status, "data:", refreshError.response.data);
              // Only logout for actual authentication failures (401, 403)
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[55]++;
              if (
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[13][0]++, refreshError.response.status === 401) ||
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[13][1]++, refreshError.response.status === 403)) {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[12][0]++;
                cov_2nnkk9tup4().s[56]++;
                await logout();
              } else {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[12][1]++;
                cov_2nnkk9tup4().s[57]++;
                console.log("Server error during refresh, not logging out user");
              }
            } else {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[11][1]++;
              cov_2nnkk9tup4().s[58]++;
              await logout(); // Logout for other unexpected errors
            }
          }
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[59]++;
          return Promise.reject(refreshError); // Reject with refresh error
        }
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[6][1]++;
      }
      cov_2nnkk9tup4().s[60]++;
      return Promise.reject(error);
    }));
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[61]++;
    return () => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[11]++;
      cov_2nnkk9tup4().s[62]++;
      api.interceptors.request.eject(requestInterceptor);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[63]++;
      api.interceptors.response.eject(responseInterceptor);
    };
  }, [accessToken]); // Added accessToken to dependency array
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[64]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[12]++;
    cov_2nnkk9tup4().s[65]++;
    const validateAuth = async () => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[13]++;
      cov_2nnkk9tup4().s[66]++;
      setIsLoading(true);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[67]++;
      try {
        const storedAccessToken =
        /* istanbul ignore next */
        (cov_2nnkk9tup4().s[68]++,
        /* istanbul ignore next */
        (cov_2nnkk9tup4().b[14][0]++, localStorage.getItem("accessToken")) ||
        /* istanbul ignore next */
        (cov_2nnkk9tup4().b[14][1]++, localStorage.getItem("authToken")));
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[69]++;
        if (storedAccessToken) {
          /* istanbul ignore next */
          cov_2nnkk9tup4().b[15][0]++;
          cov_2nnkk9tup4().s[70]++;
          console.log("Found stored accessToken, validating with /api/auth/validate...");
          // Retry logic for validation to handle network issues during hard refresh
          let retryCount =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[71]++, 0);
          const maxRetries =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[72]++, 2);
          let validationSuccessful =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[73]++, false);
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[74]++;
          while (
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[16][0]++, retryCount <= maxRetries) &&
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[16][1]++, !validationSuccessful)) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[75]++;
            try {
              const response =
              /* istanbul ignore next */
              (cov_2nnkk9tup4().s[76]++, await api.get("/api/auth/validate", {
                headers: {
                  Authorization: `Bearer ${storedAccessToken}`
                },
                timeout: 10000
              }));
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[77]++;
              if (response.data.success) {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[17][0]++;
                cov_2nnkk9tup4().s[78]++;
                setUser(response.data.user);
                /* istanbul ignore next */
                cov_2nnkk9tup4().s[79]++;
                setAccessToken(storedAccessToken);
                /* istanbul ignore next */
                cov_2nnkk9tup4().s[80]++;
                console.log("Stored accessToken is valid.");
                /* istanbul ignore next */
                cov_2nnkk9tup4().s[81]++;
                validationSuccessful = true;
              } else {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[17][1]++;
                cov_2nnkk9tup4().s[82]++;
                console.warn("/api/auth/validate returned success:false, but not an error status.");
                /* istanbul ignore next */
                cov_2nnkk9tup4().s[83]++;
                break; // Don't retry for explicit validation failures
              }
            } catch (validationError) {
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[84]++;
              console.log(`Validation attempt ${retryCount + 1} failed. Error status:`, validationError?.response?.status);
              // Handle different types of errors
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[85]++;
              if (validationError.response?.status === 401) {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[18][0]++;
                cov_2nnkk9tup4().s[86]++;
                // Token is invalid/expired - let interceptor handle refresh
                console.log("Token appears invalid, letting interceptor handle refresh...");
                /* istanbul ignore next */
                cov_2nnkk9tup4().s[87]++;
                break;
              } else {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[18][1]++;
                cov_2nnkk9tup4().s[88]++;
                if (
                /* istanbul ignore next */
                (cov_2nnkk9tup4().b[20][0]++, validationError.code === "ECONNABORTED") ||
                /* istanbul ignore next */
                (cov_2nnkk9tup4().b[20][1]++, validationError.code === "NETWORK_ERROR") ||
                /* istanbul ignore next */
                (cov_2nnkk9tup4().b[20][2]++, !validationError.response)) {
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().b[19][0]++;
                  cov_2nnkk9tup4().s[89]++;
                  // Network/timeout errors - retry
                  retryCount++;
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().s[90]++;
                  if (retryCount <= maxRetries) {
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().b[21][0]++;
                    cov_2nnkk9tup4().s[91]++;
                    console.log(`Network error detected, retrying in ${retryCount * 1000}ms...`);
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().s[92]++;
                    await new Promise(resolve => {
                      /* istanbul ignore next */
                      cov_2nnkk9tup4().f[14]++;
                      cov_2nnkk9tup4().s[93]++;
                      return setTimeout(resolve, retryCount * 1000);
                    });
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().s[94]++;
                    continue;
                  } else {
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().b[21][1]++;
                    cov_2nnkk9tup4().s[95]++;
                    console.log("Max retries reached for network errors, assuming user is still authenticated");
                    // Don't clear auth state for network issues - assume user is still valid
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().s[96]++;
                    setAccessToken(storedAccessToken);
                    /* istanbul ignore next */
                    cov_2nnkk9tup4().s[97]++;
                    validationSuccessful = true;
                  }
                } else {
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().b[19][1]++;
                  cov_2nnkk9tup4().s[98]++;
                  // Other server errors (5xx) - don't clear auth immediately
                  console.log("Server error during validation, assuming temporary issue");
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().s[99]++;
                  setAccessToken(storedAccessToken);
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().s[100]++;
                  validationSuccessful = true;
                  /* istanbul ignore next */
                  cov_2nnkk9tup4().s[101]++;
                  break;
                }
              }
            }
          }
        } else {
          /* istanbul ignore next */
          cov_2nnkk9tup4().b[15][1]++;
          cov_2nnkk9tup4().s[102]++;
          console.log("No stored accessToken found.");
          // No token, user is not logged in
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[103]++;
        // Catch-all for unexpected errors - be more lenient
        console.error("Unexpected error in validateAuth:", error);
        const storedAccessToken =
        /* istanbul ignore next */
        (cov_2nnkk9tup4().s[104]++,
        /* istanbul ignore next */
        (cov_2nnkk9tup4().b[22][0]++, localStorage.getItem("accessToken")) ||
        /* istanbul ignore next */
        (cov_2nnkk9tup4().b[22][1]++, localStorage.getItem("authToken")));
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[105]++;
        if (storedAccessToken) {
          /* istanbul ignore next */
          cov_2nnkk9tup4().b[23][0]++;
          cov_2nnkk9tup4().s[106]++;
          console.log("Keeping existing token despite validation error");
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[107]++;
          setAccessToken(storedAccessToken);
        } else
        /* istanbul ignore next */
        {
          cov_2nnkk9tup4().b[23][1]++;
        }
      } finally {
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[108]++;
        setIsLoading(false);
      }
    };
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[109]++;
    validateAuth();
  }, []); // Remove logout from dependencies as it's not used in this useEffect
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[110]++;
  const login = async (email, password) => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[15]++;
    cov_2nnkk9tup4().s[111]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[112]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[113]++, await _axios.default.post("/api/auth/login", {
        email,
        password
      }));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[114]++;
      if (response.data.success) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[24][0]++;
        const {
          accessToken: newAccessToken,
          user: userData
        } =
        /* istanbul ignore next */
        (cov_2nnkk9tup4().s[115]++, response.data);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[116]++;
        setUser(userData);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[117]++;
        setAccessToken(newAccessToken);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[118]++;
        localStorage.setItem("accessToken", newAccessToken);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[119]++;
        localStorage.setItem("authToken", newAccessToken); // for compatibility
        // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[120]++;
        console.log("Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.");
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[121]++;
        setIsLoading(false);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[122]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[24][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[123]++;
      console.error("Login failed:",
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[25][0]++, error.response?.data?.message) ||
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[25][1]++, error.message));
    }
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[124]++;
    setIsLoading(false);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[125]++;
    setUser(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[126]++;
    setAccessToken(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[127]++;
    localStorage.removeItem("accessToken");
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[128]++;
    localStorage.removeItem("authToken");
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[129]++;
    return false;
  };
  const logout =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[130]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[16]++;
    cov_2nnkk9tup4().s[131]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[132]++;
    setUser(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[133]++;
    setAccessToken(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[134]++;
    localStorage.removeItem("accessToken");
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[135]++;
    localStorage.removeItem("authToken");
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[136]++;
    try {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[137]++;
      // Call the backend to invalidate the refresh token and clear cookies
      await api.post("/api/auth/logout");
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[138]++;
      console.log("Logout successful, server-side session cleared.");
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[139]++;
      console.error("Logout API call failed:", error);
      // Still clear client-side, even if server call fails
    }
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[140]++;
    router.push("/login"); // Redirect to login page
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[141]++;
    setIsLoading(false);
  }, [router]));
  // Check if user has a specific permission
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[142]++;
  const hasPermission = permission => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[17]++;
    cov_2nnkk9tup4().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[27][0]++, !user) ||
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[27][1]++, !user.permissions)) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[26][0]++;
      cov_2nnkk9tup4().s[144]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[26][1]++;
    }
    cov_2nnkk9tup4().s[145]++;
    return user.permissions.includes(permission);
  };
  // Get all user permissions
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[146]++;
  const getUserPermissions = () => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[18]++;
    cov_2nnkk9tup4().s[147]++;
    if (
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[29][0]++, !user) ||
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[29][1]++, !user.permissions)) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[28][0]++;
      cov_2nnkk9tup4().s[148]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[28][1]++;
    }
    cov_2nnkk9tup4().s[149]++;
    return [...user.permissions];
  };
  // Helper function to get cookie value
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[150]++;
  const getCookie = name => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[19]++;
    const value =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[151]++, `; ${document.cookie}`);
    const parts =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[152]++, value.split(`; ${name}=`));
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[153]++;
    if (parts.length === 2) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[30][0]++;
      cov_2nnkk9tup4().s[154]++;
      return parts.pop()?.split(";").shift();
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[30][1]++;
    }
    cov_2nnkk9tup4().s[155]++;
    return undefined;
  };
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[156]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)(AuthContext.Provider, {
    value: {
      user,
      accessToken,
      isLoading,
      isAuthenticated: !!user,
      login,
      logout,
      hasPermission,
      getUserPermissions
    },
    children: children
  });
};
/* istanbul ignore next */
cov_2nnkk9tup4().s[157]++;
const useAuth = () => {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[20]++;
  const context =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[158]++, (0, _react.useContext)(AuthContext));
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[159]++;
  if (context === undefined) {
    /* istanbul ignore next */
    cov_2nnkk9tup4().b[31][0]++;
    cov_2nnkk9tup4().s[160]++;
    throw new Error("useAuth must be used within an AuthProvider");
  } else
  /* istanbul ignore next */
  {
    cov_2nnkk9tup4().b[31][1]++;
  }
  cov_2nnkk9tup4().s[161]++;
  return context;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,