{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/validators.test.ts"],"sourcesContent":["import {\n  loginSchema,\n  registerSchema,\n  productSchema,\n  categorySchema,\n  inventorySchema,\n  shopSchema,\n  customerSchema,\n  supplierSchema,\n  invoiceSchema,\n  paymentSchema,\n  validateInput,\n  paginationSchema,\n  searchSchema,\n  idSchema\n} from '../../src/utils/validators';\n\ndescribe('Validators', () => {\n  describe('loginSchema', () => {\n    it('should validate valid login data', () => {\n      const validData = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n      \n      const result = loginSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid email', () => {\n      const invalidData = {\n        email: 'invalid-email',\n        password: 'password123'\n      };\n      \n      const result = loginSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject missing password', () => {\n      const invalidData = {\n        email: 'test@example.com'\n      };\n      \n      const result = loginSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('registerSchema', () => {\n    it('should validate valid registration data', () => {\n      const validData = {\n        email: 'test@example.com',\n        password: 'password123',\n        name: 'John Doe'\n      };\n      \n      const result = registerSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid email format', () => {\n      const invalidData = {\n        email: 'invalid-email',\n        password: 'password123',\n        name: 'John Doe'\n      };\n      \n      const result = registerSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject short password', () => {\n      const invalidData = {\n        email: 'test@example.com',\n        password: '123',\n        name: 'John Doe'\n      };\n      \n      const result = registerSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('productSchema', () => {\n    it('should validate valid product data', () => {\n      const validData = {\n        name: 'Test Product',\n        description: 'A test product',\n        price: 99.99,\n        categoryId: 1,\n        shopId: 1\n      };\n      \n      const result = productSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject negative price', () => {\n      const invalidData = {\n        name: 'Test Product',\n        description: 'A test product',\n        price: -10,\n        categoryId: 1,\n        shopId: 1\n      };\n      \n      const result = productSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject missing required fields', () => {\n      const invalidData = {\n        name: 'Test Product'\n      };\n      \n      const result = productSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('categorySchema', () => {\n    it('should validate valid category data', () => {\n      const validData = {\n        name: 'Electronics',\n        description: 'Electronic products',\n        shopId: 1\n      };\n      \n      const result = categorySchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject empty name', () => {\n      const invalidData = {\n        name: '',\n        description: 'Electronic products',\n        shopId: 1\n      };\n      \n      const result = categorySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('inventorySchema', () => {\n    it('should validate valid inventory data', () => {\n      const validData = {\n        productId: 1,\n        quantity: 100,\n        minStock: 10,\n        maxStock: 1000,\n        shopId: 1\n      };\n      \n      const result = inventorySchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject negative quantity', () => {\n      const invalidData = {\n        productId: 1,\n        quantity: -5,\n        minStock: 10,\n        maxStock: 1000,\n        shopId: 1\n      };\n      \n      const result = inventorySchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('shopSchema', () => {\n    it('should validate valid shop data', () => {\n      const validData = {\n        name: 'Test Shop',\n        address: '123 Main St',\n        phone: '+1234567890',\n        email: 'shop@example.com'\n      };\n      \n      const result = shopSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid email', () => {\n      const invalidData = {\n        name: 'Test Shop',\n        address: '123 Main St',\n        phone: '+1234567890',\n        email: 'invalid-email'\n      };\n      \n      const result = shopSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('customerSchema', () => {\n    it('should validate valid customer data', () => {\n      const validData = {\n        name: 'John Customer',\n        email: 'customer@example.com',\n        phone: '+1234567890',\n        address: '456 Customer St'\n      };\n      \n      const result = customerSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid email', () => {\n      const invalidData = {\n        name: 'John Customer',\n        email: 'invalid-email',\n        phone: '+1234567890',\n        address: '456 Customer St'\n      };\n      \n      const result = customerSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('supplierSchema', () => {\n    it('should validate valid supplier data', () => {\n      const validData = {\n        name: 'Supplier Corp',\n        email: 'supplier@example.com',\n        phone: '+1234567890',\n        address: '789 Supplier Ave'\n      };\n      \n      const result = supplierSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject missing required fields', () => {\n      const invalidData = {\n        name: 'Supplier Corp'\n      };\n      \n      const result = supplierSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('paginationSchema', () => {\n    it('should validate valid pagination data', () => {\n      const validData = {\n        page: 1,\n        limit: 10\n      };\n      \n      const result = paginationSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject negative page number', () => {\n      const invalidData = {\n        page: -1,\n        limit: 10\n      };\n      \n      const result = paginationSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('searchSchema', () => {\n    it('should validate valid search data', () => {\n      const validData = {\n        query: 'test search',\n        filters: {}\n      };\n      \n      const result = searchSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle empty query', () => {\n      const validData = {\n        query: '',\n        filters: {}\n      };\n      \n      const result = searchSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('idSchema', () => {\n    it('should validate valid ID', () => {\n      const validData = { id: 123 };\n      \n      const result = idSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject negative ID', () => {\n      const invalidData = { id: -1 };\n      \n      const result = idSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('validateInput utility', () => {\n    it('should validate input using provided schema', () => {\n      const validData = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n      \n      const result = validateInput(loginSchema, validData);\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(validData);\n    });\n\n    it('should return error for invalid input', () => {\n      const invalidData = {\n        email: 'invalid-email',\n        password: 'password123'\n      };\n      \n      const result = validateInput(loginSchema, invalidData);\n      expect(result.success).toBe(false);\n      expect(result.errors).toBeDefined();\n    });\n  });\n});"],"names":["describe","it","validData","email","password","result","loginSchema","safeParse","expect","success","toBe","invalidData","name","registerSchema","description","price","categoryId","shopId","productSchema","categorySchema","productId","quantity","minStock","maxStock","inventorySchema","address","phone","shopSchema","customerSchema","supplierSchema","page","limit","paginationSchema","query","filters","searchSchema","id","idSchema","validateInput","data","toEqual","errors","toBeDefined"],"mappings":"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"}