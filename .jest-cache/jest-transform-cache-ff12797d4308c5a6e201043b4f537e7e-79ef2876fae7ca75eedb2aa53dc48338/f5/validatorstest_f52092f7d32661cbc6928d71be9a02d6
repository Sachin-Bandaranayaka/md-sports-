140766810718ccc98989ab147f88593e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _validators = require("../../src/utils/validators");
describe("Validators", ()=>{
    describe("loginSchema", ()=>{
        it("should validate valid login data", ()=>{
            const validData = {
                email: "test@example.com",
                password: "password123"
            };
            const result = _validators.loginSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject invalid email", ()=>{
            const invalidData = {
                email: "invalid-email",
                password: "password123"
            };
            const result = _validators.loginSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it("should reject missing password", ()=>{
            const invalidData = {
                email: "test@example.com"
            };
            const result = _validators.loginSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("registerSchema", ()=>{
        it("should validate valid registration data", ()=>{
            const validData = {
                email: "test@example.com",
                password: "password123",
                name: "John Doe"
            };
            const result = _validators.registerSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject invalid email format", ()=>{
            const invalidData = {
                email: "invalid-email",
                password: "password123",
                name: "John Doe"
            };
            const result = _validators.registerSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it("should reject short password", ()=>{
            const invalidData = {
                email: "test@example.com",
                password: "123",
                name: "John Doe"
            };
            const result = _validators.registerSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("productSchema", ()=>{
        it("should validate valid product data", ()=>{
            const validData = {
                name: "Test Product",
                description: "A test product",
                price: 99.99,
                categoryId: 1,
                shopId: 1
            };
            const result = _validators.productSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject negative price", ()=>{
            const invalidData = {
                name: "Test Product",
                description: "A test product",
                price: -10,
                categoryId: 1,
                shopId: 1
            };
            const result = _validators.productSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
        it("should reject missing required fields", ()=>{
            const invalidData = {
                name: "Test Product"
            };
            const result = _validators.productSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("categorySchema", ()=>{
        it("should validate valid category data", ()=>{
            const validData = {
                name: "Electronics",
                description: "Electronic products",
                shopId: 1
            };
            const result = _validators.categorySchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject empty name", ()=>{
            const invalidData = {
                name: "",
                description: "Electronic products",
                shopId: 1
            };
            const result = _validators.categorySchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("inventorySchema", ()=>{
        it("should validate valid inventory data", ()=>{
            const validData = {
                productId: 1,
                quantity: 100,
                minStock: 10,
                maxStock: 1000,
                shopId: 1
            };
            const result = _validators.inventorySchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject negative quantity", ()=>{
            const invalidData = {
                productId: 1,
                quantity: -5,
                minStock: 10,
                maxStock: 1000,
                shopId: 1
            };
            const result = _validators.inventorySchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("shopSchema", ()=>{
        it("should validate valid shop data", ()=>{
            const validData = {
                name: "Test Shop",
                address: "123 Main St",
                phone: "+1234567890",
                email: "shop@example.com"
            };
            const result = _validators.shopSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject invalid email", ()=>{
            const invalidData = {
                name: "Test Shop",
                address: "123 Main St",
                phone: "+1234567890",
                email: "invalid-email"
            };
            const result = _validators.shopSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("customerSchema", ()=>{
        it("should validate valid customer data", ()=>{
            const validData = {
                name: "John Customer",
                email: "customer@example.com",
                phone: "+1234567890",
                address: "456 Customer St"
            };
            const result = _validators.customerSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject invalid email", ()=>{
            const invalidData = {
                name: "John Customer",
                email: "invalid-email",
                phone: "+1234567890",
                address: "456 Customer St"
            };
            const result = _validators.customerSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("supplierSchema", ()=>{
        it("should validate valid supplier data", ()=>{
            const validData = {
                name: "Supplier Corp",
                email: "supplier@example.com",
                phone: "+1234567890",
                address: "789 Supplier Ave"
            };
            const result = _validators.supplierSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject missing required fields", ()=>{
            const invalidData = {
                name: "Supplier Corp"
            };
            const result = _validators.supplierSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("paginationSchema", ()=>{
        it("should validate valid pagination data", ()=>{
            const validData = {
                page: 1,
                limit: 10
            };
            const result = _validators.paginationSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject negative page number", ()=>{
            const invalidData = {
                page: -1,
                limit: 10
            };
            const result = _validators.paginationSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("searchSchema", ()=>{
        it("should validate valid search data", ()=>{
            const validData = {
                query: "test search",
                filters: {}
            };
            const result = _validators.searchSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should handle empty query", ()=>{
            const validData = {
                query: "",
                filters: {}
            };
            const result = _validators.searchSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
    });
    describe("idSchema", ()=>{
        it("should validate valid ID", ()=>{
            const validData = {
                id: 123
            };
            const result = _validators.idSchema.safeParse(validData);
            expect(result.success).toBe(true);
        });
        it("should reject negative ID", ()=>{
            const invalidData = {
                id: -1
            };
            const result = _validators.idSchema.safeParse(invalidData);
            expect(result.success).toBe(false);
        });
    });
    describe("validateInput utility", ()=>{
        it("should validate input using provided schema", ()=>{
            const validData = {
                email: "test@example.com",
                password: "password123"
            };
            const result = (0, _validators.validateInput)(_validators.loginSchema, validData);
            expect(result.success).toBe(true);
            expect(result.data).toEqual(validData);
        });
        it("should return error for invalid input", ()=>{
            const invalidData = {
                email: "invalid-email",
                password: "password123"
            };
            const result = (0, _validators.validateInput)(_validators.loginSchema, invalidData);
            expect(result.success).toBe(false);
            expect(result.errors).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,