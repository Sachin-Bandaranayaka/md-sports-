a9af985a3ee5e507959888ae756ed4cb
"use strict";

/* istanbul ignore next */
function cov_1zy3y7347p() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/audit-trail/route.ts";
  var hash = "109c46e6109a08ea8140c821c358c77271766478";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/audit-trail/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 53
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 104
        }
      },
      "10": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 56
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 66
        }
      },
      "13": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 26,
          column: 15
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 72
        }
      },
      "15": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 59
        }
      },
      "16": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 82
        }
      },
      "17": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "18": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 71
        }
      },
      "19": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "21": {
        start: {
          line: 40,
          column: 33
        },
        end: {
          line: 40,
          column: 53
        }
      },
      "22": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 62
        }
      },
      "23": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 53
        }
      },
      "24": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 65
        }
      },
      "25": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "26": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "27": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "28": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 48,
          column: 101
        }
      },
      "29": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 53
        }
      },
      "30": {
        start: {
          line: 50,
          column: 15
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "31": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 112
        }
      },
      "32": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "33": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 98
        }
      },
      "34": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "35": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 60
        }
      },
      "36": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 18
          }
        },
        loc: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 45
          },
          end: {
            line: 18,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 58
          },
          end: {
            line: 18,
            column: 93
          }
        }, {
          start: {
            line: 18,
            column: 96
          },
          end: {
            line: 18,
            column: 102
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 50
          },
          end: {
            line: 30,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 60
          },
          end: {
            line: 30,
            column: 69
          }
        }, {
          start: {
            line: 30,
            column: 72
          },
          end: {
            line: 30,
            column: 80
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 20
          }
        }, {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 36
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 49
          }
        }, {
          start: {
            line: 41,
            column: 53
          },
          end: {
            line: 41,
            column: 62
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 31
          },
          end: {
            line: 43,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 31
          },
          end: {
            line: 43,
            column: 56
          }
        }, {
          start: {
            line: 43,
            column: 60
          },
          end: {
            line: 43,
            column: 64
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 58
          }
        }, {
          start: {
            line: 44,
            column: 62
          },
          end: {
            line: 44,
            column: 65
          }
        }],
        line: 44
      },
      "8": {
        loc: {
          start: {
            line: 45,
            column: 21
          },
          end: {
            line: 45,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 21
          },
          end: {
            line: 45,
            column: 45
          }
        }, {
          start: {
            line: 45,
            column: 49
          },
          end: {
            line: 45,
            column: 54
          }
        }],
        line: 45
      },
      "9": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: 50,
            column: 15
          },
          end: {
            line: 61,
            column: 9
          }
        }],
        line: 46
      },
      "10": {
        loc: {
          start: {
            line: 50,
            column: 15
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 15
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 61,
            column: 9
          }
        }],
        line: 50
      },
      "11": {
        loc: {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 37
          }
        }, {
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 50,
            column: 47
          }
        }, {
          start: {
            line: 50,
            column: 51
          },
          end: {
            line: 50,
            column: 59
          }
        }],
        line: 50
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/audit-trail/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyToken } from '@/lib/auth';\nimport { auditService } from '@/services/auditService';\nimport { revalidateTag } from 'next/cache';\n\n// GET /api/audit-trail - Get audit trail entries\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('=== AUDIT TRAIL API DEBUG ===');\n    const authHeader = request.headers.get('Authorization');\n    console.log('Authorization header:', authHeader ? `${authHeader.substring(0, 20)}...` : 'none');\n    \n    const token = authHeader?.replace('Bearer ', '');\n    if (!token) {\n      console.log('No token found in Authorization header');\n      return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n    }\n\n    console.log('Token extracted:', token.substring(0, 20) + '...');\n    const decoded = await verifyToken(token);\n    console.log('Token verification result:', decoded ? 'SUCCESS' : 'FAILED');\n    \n    if (!decoded || !decoded.sub) {\n      console.log('Token validation failed - decoded:', decoded);\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n    }\n    \n    console.log('Token validated successfully for user:', decoded.sub);\n\n    const { searchParams } = new URL(request.url);\n    const entity = searchParams.get('entity') || undefined;\n    const entityId = searchParams.get('entityId');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const type = searchParams.get('type') || 'all'; // 'all', 'deleted', 'history'\n\n    if (type === 'deleted') {\n      // Get recycle bin items\n      const result = await auditService.getRecycleBinItems(entity, limit, offset);\n      return NextResponse.json(result);\n    } else if (type === 'history' && entity && entityId) {\n      // Get entity history\n      const history = await auditService.getEntityHistory(\n        entity,\n        parseInt(entityId),\n        limit\n      );\n      return NextResponse.json({ items: history, total: history.length });\n    } else {\n      // Get all audit entries\n      const result = await auditService.getAuditEntries(entity, limit, offset);\n      return NextResponse.json(result);\n    }\n  } catch (error) {\n    console.error('Error fetching audit trail:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch audit trail' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "console", "log", "authHeader", "headers", "get", "substring", "token", "replace", "NextResponse", "json", "error", "status", "decoded", "verifyToken", "sub", "searchParams", "URL", "url", "entity", "undefined", "entityId", "limit", "parseInt", "offset", "type", "result", "auditService", "getRecycleBinItems", "history", "getEntityHistory", "items", "total", "length", "getAuditEntries"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;sBACd;8BACC;AAItB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACFC,QAAQC,GAAG,CAAC;QACZ,MAAMC,aAAaH,QAAQI,OAAO,CAACC,GAAG,CAAC;QACvCJ,QAAQC,GAAG,CAAC,yBAAyBC,aAAa,CAAC,EAAEA,WAAWG,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG;QAExF,MAAMC,QAAQJ,YAAYK,QAAQ,WAAW;QAC7C,IAAI,CAACD,OAAO;YACVN,QAAQC,GAAG,CAAC;YACZ,OAAOO,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAoB,GAAG;gBAAEC,QAAQ;YAAI;QACzE;QAEAX,QAAQC,GAAG,CAAC,oBAAoBK,MAAMD,SAAS,CAAC,GAAG,MAAM;QACzD,MAAMO,UAAU,MAAMC,IAAAA,iBAAW,EAACP;QAClCN,QAAQC,GAAG,CAAC,8BAA8BW,UAAU,YAAY;QAEhE,IAAI,CAACA,WAAW,CAACA,QAAQE,GAAG,EAAE;YAC5Bd,QAAQC,GAAG,CAAC,sCAAsCW;YAClD,OAAOJ,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAgB,GAAG;gBAAEC,QAAQ;YAAI;QACrE;QAEAX,QAAQC,GAAG,CAAC,0CAA0CW,QAAQE,GAAG;QAEjE,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIjB,QAAQkB,GAAG;QAC5C,MAAMC,SAASH,aAAaX,GAAG,CAAC,aAAae;QAC7C,MAAMC,WAAWL,aAAaX,GAAG,CAAC;QAClC,MAAMiB,QAAQC,SAASP,aAAaX,GAAG,CAAC,YAAY;QACpD,MAAMmB,SAASD,SAASP,aAAaX,GAAG,CAAC,aAAa;QACtD,MAAMoB,OAAOT,aAAaX,GAAG,CAAC,WAAW,OAAO,8BAA8B;QAE9E,IAAIoB,SAAS,WAAW;YACtB,wBAAwB;YACxB,MAAMC,SAAS,MAAMC,0BAAY,CAACC,kBAAkB,CAACT,QAAQG,OAAOE;YACpE,OAAOf,oBAAY,CAACC,IAAI,CAACgB;QAC3B,OAAO,IAAID,SAAS,aAAaN,UAAUE,UAAU;YACnD,qBAAqB;YACrB,MAAMQ,UAAU,MAAMF,0BAAY,CAACG,gBAAgB,CACjDX,QACAI,SAASF,WACTC;YAEF,OAAOb,oBAAY,CAACC,IAAI,CAAC;gBAAEqB,OAAOF;gBAASG,OAAOH,QAAQI,MAAM;YAAC;QACnE,OAAO;YACL,wBAAwB;YACxB,MAAMP,SAAS,MAAMC,0BAAY,CAACO,eAAe,CAACf,QAAQG,OAAOE;YACjE,OAAOf,oBAAY,CAACC,IAAI,CAACgB;QAC3B;IACF,EAAE,OAAOf,OAAO;QACdV,QAAQU,KAAK,CAAC,+BAA+BA;QAC7C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA8B,GACvC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "109c46e6109a08ea8140c821c358c77271766478"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zy3y7347p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zy3y7347p();
cov_1zy3y7347p().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zy3y7347p().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1zy3y7347p().f[0]++;
    cov_1zy3y7347p().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1zy3y7347p().s[3]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_1zy3y7347p().s[4]++, require("../../../lib/auth"));
const _auditService =
/* istanbul ignore next */
(cov_1zy3y7347p().s[5]++, require("../../../services/auditService"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1zy3y7347p().f[1]++;
  cov_1zy3y7347p().s[6]++;
  try {
    /* istanbul ignore next */
    cov_1zy3y7347p().s[7]++;
    console.log("=== AUDIT TRAIL API DEBUG ===");
    const authHeader =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[8]++, request.headers.get("Authorization"));
    /* istanbul ignore next */
    cov_1zy3y7347p().s[9]++;
    console.log("Authorization header:", authHeader ?
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[0][0]++, `${authHeader.substring(0, 20)}...`) :
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[0][1]++, "none"));
    const token =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[10]++, authHeader?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_1zy3y7347p().s[11]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1zy3y7347p().b[1][0]++;
      cov_1zy3y7347p().s[12]++;
      console.log("No token found in Authorization header");
      /* istanbul ignore next */
      cov_1zy3y7347p().s[13]++;
      return _server.NextResponse.json({
        error: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zy3y7347p().b[1][1]++;
    }
    cov_1zy3y7347p().s[14]++;
    console.log("Token extracted:", token.substring(0, 20) + "...");
    const decoded =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[15]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_1zy3y7347p().s[16]++;
    console.log("Token verification result:", decoded ?
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[2][0]++, "SUCCESS") :
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[2][1]++, "FAILED"));
    /* istanbul ignore next */
    cov_1zy3y7347p().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[4][0]++, !decoded) ||
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[4][1]++, !decoded.sub)) {
      /* istanbul ignore next */
      cov_1zy3y7347p().b[3][0]++;
      cov_1zy3y7347p().s[18]++;
      console.log("Token validation failed - decoded:", decoded);
      /* istanbul ignore next */
      cov_1zy3y7347p().s[19]++;
      return _server.NextResponse.json({
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zy3y7347p().b[3][1]++;
    }
    cov_1zy3y7347p().s[20]++;
    console.log("Token validated successfully for user:", decoded.sub);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[21]++, new URL(request.url));
    const entity =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[22]++,
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[5][0]++, searchParams.get("entity")) ||
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[5][1]++, undefined));
    const entityId =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[23]++, searchParams.get("entityId"));
    const limit =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[24]++, parseInt(
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[6][0]++, searchParams.get("limit")) ||
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[6][1]++, "20")));
    const offset =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[25]++, parseInt(
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[7][0]++, searchParams.get("offset")) ||
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[7][1]++, "0")));
    const type =
    /* istanbul ignore next */
    (cov_1zy3y7347p().s[26]++,
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[8][0]++, searchParams.get("type")) ||
    /* istanbul ignore next */
    (cov_1zy3y7347p().b[8][1]++, "all")); // 'all', 'deleted', 'history'
    /* istanbul ignore next */
    cov_1zy3y7347p().s[27]++;
    if (type === "deleted") {
      /* istanbul ignore next */
      cov_1zy3y7347p().b[9][0]++;
      // Get recycle bin items
      const result =
      /* istanbul ignore next */
      (cov_1zy3y7347p().s[28]++, await _auditService.auditService.getRecycleBinItems(entity, limit, offset));
      /* istanbul ignore next */
      cov_1zy3y7347p().s[29]++;
      return _server.NextResponse.json(result);
    } else {
      /* istanbul ignore next */
      cov_1zy3y7347p().b[9][1]++;
      cov_1zy3y7347p().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_1zy3y7347p().b[11][0]++, type === "history") &&
      /* istanbul ignore next */
      (cov_1zy3y7347p().b[11][1]++, entity) &&
      /* istanbul ignore next */
      (cov_1zy3y7347p().b[11][2]++, entityId)) {
        /* istanbul ignore next */
        cov_1zy3y7347p().b[10][0]++;
        // Get entity history
        const history =
        /* istanbul ignore next */
        (cov_1zy3y7347p().s[31]++, await _auditService.auditService.getEntityHistory(entity, parseInt(entityId), limit));
        /* istanbul ignore next */
        cov_1zy3y7347p().s[32]++;
        return _server.NextResponse.json({
          items: history,
          total: history.length
        });
      } else {
        /* istanbul ignore next */
        cov_1zy3y7347p().b[10][1]++;
        // Get all audit entries
        const result =
        /* istanbul ignore next */
        (cov_1zy3y7347p().s[33]++, await _auditService.auditService.getAuditEntries(entity, limit, offset));
        /* istanbul ignore next */
        cov_1zy3y7347p().s[34]++;
        return _server.NextResponse.json(result);
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1zy3y7347p().s[35]++;
    console.error("Error fetching audit trail:", error);
    /* istanbul ignore next */
    cov_1zy3y7347p().s[36]++;
    return _server.NextResponse.json({
      error: "Failed to fetch audit trail"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,