{"version":3,"names":["DELETE","cov_7f8epg9vf","f","s","GET","PUT","request","params","b","id","isNaN","Number","_server","NextResponse","json","error","status","invoiceId","invoice","_prisma","prisma","findUnique","where","include","customer","shop","select","name","location","contact_person","phone","email","address_line1","address_line2","city","state","postal_code","country","items","product","payments","receipt","isNot","console","success","message","Error","String","requestData","log","sendSms","invoiceData","isOnlyStatusUpdate","Object","keys","length","undefined","includes","updatedInvoice","update","data","Array","isArray","inventoryUpdatesForEvent","$transaction","tx","existingInvoice","oldItemsMap","Map","newItemsMap","item","existingQuantity","get","productId","set","quantity","parseInt","toString","allProductIds","Set","from","oldQuantity","newQuantity","quantityChange","affectedShopId","shopId","push","availableInventory","inventoryItem","findMany","totalAvailable","reduce","sum","updateMany","gte","decrement","increment","Math","abs","invoiceItem","deleteMany","newCalculatedTotalInvoiceAmount","newTotalInvoiceProfit","productIdsForNewItems","map","inventoryItems","in","shopSpecificCost","productCostMap","missingProductIds","filter","has","fallbackProducts","weightedAverageCost","forEach","p","costPrice","itemSellingTotal","price","totalItemCost","itemProfit","create","total","profit","newProfitMargin","dataToUpdate","paymentMethod","invoiceDate","Date","dueDate","notes","totalProfit","profitMargin","customerId","finalUpdatedInvoice","txError","timeout","_smsService","smsService","init","isConfigured","sendInvoiceUpdateNotification","then","result","warn","catch","smsError","Promise","all","_cache","cacheService","invalidateInvoices","invalidateInventory","del","deletedInvoiceResult","invoiceToDelete","targetShopId","payment","delete","invoiceNumber","invalidationPromises","invalidatePattern","allSettled","setImmediate","fetch","process","env","NEXT_PUBLIC_APP_URL","method","headers","body","JSON","stringify","action","type","err","stack"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\n\n\nimport { cacheService } from '@/lib/cache';\n\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(params.id);\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: invoiceId },\n            include: {\n                customer: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true,\n                        location: true,\n                        contact_person: true,\n                        phone: true,\n                        email: true,\n                        address_line1: true,\n                        address_line2: true,\n                        city: true,\n                        state: true,\n                        postal_code: true,\n                        country: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: {\n                    where: {\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    include: {\n                        receipt: true\n                    }\n                }\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error fetching invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(params.id);\n        const requestData = await request.json();\n        console.log('Invoice update request data:', { invoiceId, ...requestData });\n        const { sendSms, ...invoiceData } = requestData;\n\n        // Check if this is only a status update to \"Paid\"\n        // More specific check: make sure it only has the status field and it's being changed to 'Paid'\n        const isOnlyStatusUpdate =\n            Object.keys(invoiceData).length === 1 &&\n            invoiceData.status !== undefined &&\n            ['Paid', 'Pending'].includes(invoiceData.status);\n\n        // If it's only updating status, handle it without affecting inventory\n        if (isOnlyStatusUpdate) {\n            console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);\n            const updatedInvoice = await prisma.invoice.update({\n                where: { id: invoiceId },\n                data: { status: invoiceData.status },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    },\n                    payments: true\n                }\n            });\n\n            return NextResponse.json(updatedInvoice);\n        }\n\n        // Ensure invoiceData.items is an array, default to empty if not provided or not an array\n        if (!Array.isArray(invoiceData.items)) {\n            console.log('invoiceData.items was not an array, defaulting to [] for update.');\n            invoiceData.items = [];\n        }\n\n        const inventoryUpdatesForEvent: Array<{ productId: number, shopId?: number, newQuantity?: number, oldQuantity?: number, quantityChange: number }> = [];\n\n        // Update invoice with transaction to handle items\n        const updatedInvoice = await prisma.$transaction(\n            async (tx) => {\n                try {\n                    const existingInvoice = await tx.invoice.findUnique({\n                        where: { id: invoiceId },\n                        include: {\n                            items: true // Keep for inventory adjustment if needed, though items will be replaced\n                        }\n                    });\n\n                    if (!existingInvoice) {\n                        throw new Error('Invoice not found');\n                    }\n\n                    // --- Inventory Adjustment Logic (existing) --- \n                    // This logic might need review if items are fully replaced, \n                    // as it compares old vs new item quantities. \n                    // For profit, we are deleting and re-creating items.\n                    const oldItemsMap = new Map();\n                    const newItemsMap = new Map();\n\n                    for (const item of existingInvoice.items) {\n                        const existingQuantity = oldItemsMap.get(item.productId) || 0;\n                        oldItemsMap.set(item.productId, existingQuantity + item.quantity);\n                    }\n\n                    for (const item of invoiceData.items) {\n                        const productId = parseInt(item.productId.toString());\n                        const existingQuantity = newItemsMap.get(productId) || 0;\n                        newItemsMap.set(productId, existingQuantity + item.quantity);\n                    }\n\n                    const allProductIds = new Set([\n                        ...Array.from(oldItemsMap.keys()),\n                        ...Array.from(newItemsMap.keys())\n                    ]);\n\n                    console.log('Invoice update - Inventory changes (based on diff):');\n                    for (const productId of allProductIds) {\n                        const oldQuantity = oldItemsMap.get(productId) || 0;\n                        const newQuantity = newItemsMap.get(productId) || 0;\n                        const quantityChange = newQuantity - oldQuantity;\n                        console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);\n                        if (quantityChange !== 0) {\n                            // Ensure affectedShopId is a string if invoiceData.shopId is a string\n                            let affectedShopId: string | undefined = invoiceData.shopId ? String(invoiceData.shopId) : undefined;\n\n                            inventoryUpdatesForEvent.push({\n                                productId: productId as number,\n                                shopId: affectedShopId,\n                                quantityChange: quantityChange,\n                            });\n                            if (quantityChange > 0) { // Deduct (more items sold or added)\n                                if (affectedShopId) {\n                                    const availableInventory = await tx.inventoryItem.findMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId }\n                                    });\n                                    const totalAvailable = availableInventory.reduce((sum, item) => sum + item.quantity, 0);\n                                    if (totalAvailable < quantityChange) {\n                                        throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);\n                                    }\n                                    // This should ideally be a more robust way to pick which inventory item to decrement\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId, quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                }\n                            } else { // Add back (fewer items sold or items removed)\n                                if (affectedShopId) {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()) },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    // --- End Inventory Adjustment Logic ---\n\n                    // Delete old invoice items before adding new ones for profit recalc\n                    await tx.invoiceItem.deleteMany({ where: { invoiceId: invoiceId } });\n\n                    let newCalculatedTotalInvoiceAmount = 0;\n                    let newTotalInvoiceProfit = 0;\n\n                    if (invoiceData.items && Array.isArray(invoiceData.items) && invoiceData.items.length > 0) {\n                        const productIdsForNewItems = invoiceData.items.map((item: any) => parseInt(item.productId.toString()));\n                        \n                        // Get shop-specific costs for profit calculation instead of global weighted average\n                        const inventoryItems = await tx.inventoryItem.findMany({\n                            where: { \n                                productId: { in: productIdsForNewItems },\n                                shopId: invoiceData.shopId\n                            },\n                            select: { productId: true, shopSpecificCost: true }\n                        });\n\n                        // Create a map of productId to shop-specific cost\n                        const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                        \n                        // For products not found in inventory, fallback to global weighted average\n                        const missingProductIds = productIdsForNewItems.filter(id => !productCostMap.has(id));\n                        if (missingProductIds.length > 0) {\n                            const fallbackProducts = await tx.product.findMany({\n                                where: { id: { in: missingProductIds } },\n                                select: { id: true, weightedAverageCost: true }\n                            });\n                            fallbackProducts.forEach(p => {\n                                productCostMap.set(p.id, p.weightedAverageCost || 0);\n                            });\n                        }\n\n                        for (const item of invoiceData.items) {\n                            const productId = parseInt(item.productId.toString());\n                            const costPrice = productCostMap.get(productId) || 0;\n                            const itemSellingTotal = item.quantity * item.price;\n                            const totalItemCost = costPrice * item.quantity;\n                            const itemProfit = itemSellingTotal - totalItemCost;\n\n                            await tx.invoiceItem.create({\n                                data: {\n                                    invoiceId: invoiceId,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                }\n                            });\n                            newCalculatedTotalInvoiceAmount += itemSellingTotal;\n                            newTotalInvoiceProfit += itemProfit;\n                        }\n                    }\n\n                    const newProfitMargin = newCalculatedTotalInvoiceAmount > 0 ? (newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount) * 100 : 0;\n\n                    const dataToUpdate: any = {\n                        status: invoiceData.status,\n                        paymentMethod: invoiceData.paymentMethod,\n                        invoiceDate: invoiceData.invoiceDate ? new Date(invoiceData.invoiceDate) : undefined,\n                        dueDate: invoiceData.dueDate ? new Date(invoiceData.dueDate) : undefined,\n                        notes: invoiceData.notes,\n                        shopId: invoiceData.shopId ? String(invoiceData.shopId) : null, // Ensure shopId is string or null\n                        total: newCalculatedTotalInvoiceAmount, // Updated total\n                        totalProfit: newTotalInvoiceProfit,   // Updated profit\n                        profitMargin: newProfitMargin         // Updated profit margin\n                    };\n\n                    if (invoiceData.customerId) {\n                        dataToUpdate.customerId = invoiceData.customerId;\n                    } else {\n                        // If customerId is explicitly null or undefined, disconnect it if your schema allows\n                        // dataToUpdate.customer = { disconnect: true }; \n                        // Or ensure it's set to null if the field is optional and you want to clear it.\n                        // For now, we assume if not provided, it's not changed or handled by frontend state.\n                    }\n\n                    console.log('Updating invoice details with profit:', { invoiceId, dataToUpdate });\n\n                    const finalUpdatedInvoice = await tx.invoice.update({\n                        where: { id: invoiceId },\n                        data: dataToUpdate,\n                        include: {\n                            customer: true,\n                            items: { include: { product: true } },\n                            payments: true\n                        }\n                    });\n\n                    // Handle cash payment method\n                    // Removed automatic payment creation/update for cash invoices\n                    // Users will manually record payments when they actually receive them\n\n                    return finalUpdatedInvoice;\n                } catch (txError) {\n                    console.error('Transaction error:', txError);\n                    throw txError;\n                }\n            },\n            { timeout: 30000 }\n        );\n\n        // Real-time updates now handled by polling system\n        if (inventoryUpdatesForEvent.length > 0) {\n            console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);\n        }\n\n        // Send SMS notification if requested\n        if (sendSms && updatedInvoice) {\n            try {\n                await smsService.init();\n                if (smsService.isConfigured()) {\n                    // Send SMS notification asynchronously\n                    smsService.sendInvoiceUpdateNotification(updatedInvoice.id)\n                        .then(result => {\n                            if (result.status >= 200 && result.status < 300) {\n                                console.log('SMS update notification sent successfully');\n                            } else {\n                                console.warn('Failed to send SMS update notification:', result.message);\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error sending SMS update notification:', error);\n                        });\n                }\n            } catch (smsError) {\n                // Log SMS error but don't fail the request\n                console.error('SMS update notification error:', smsError);\n            }\n        }\n\n        // Invalidate related caches after successful update\n        await Promise.all([\n            cacheService.invalidateInvoices(),\n            cacheService.invalidateInventory(),\n            cacheService.del('dashboard:summary') // Invalidate dashboard cache\n        ]);\n\n        return NextResponse.json({\n            success: true,\n            message: 'Invoice updated successfully',\n            data: updatedInvoice\n        });\n    } catch (error) {\n        console.error('Error updating invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json({ error: 'Invalid invoice ID' }, { status: 400 });\n        }\n        const invoiceId = Number(params.id);\n\n        const inventoryUpdatesForEvent: Array<{ productId: number, shopId?: number, quantityChange: number }> = [];\n\n        // Use Prisma transaction to ensure atomicity\n        const deletedInvoiceResult = await prisma.$transaction(async (tx) => {\n            const invoiceToDelete = await tx.invoice.findUnique({\n                where: { id: invoiceId },\n                include: { items: true, customer: true } // Include items for inventory adjustment & customer for context\n            });\n\n            if (!invoiceToDelete) {\n                throw new Error('Invoice not found for deletion');\n            }\n\n            // Adjust inventory for each item deleted from the invoice\n            if (invoiceToDelete.items && invoiceToDelete.items.length > 0) {\n                for (const item of invoiceToDelete.items) {\n                    // Add item quantity back to inventory\n                    // Similar to PUT, we need to determine the shopId if possible.\n                    // If the invoice had a shopId, we assume items are returned to that shop's inventory.\n                    let targetShopId: number | undefined = invoiceToDelete.shopId || undefined;\n\n                    // If no shopId on invoice, this becomes a general increment for the product.\n                    // For more precise shop-specific return, the original shop source of item would be needed.\n                    await tx.inventoryItem.updateMany({\n                        where: {\n                            productId: item.productId,\n                            ...(targetShopId && { shopId: targetShopId }) // Conditionally add shopId to where clause\n                        },\n                        data: { quantity: { increment: item.quantity } }\n                    });\n\n                    inventoryUpdatesForEvent.push({\n                        productId: item.productId,\n                        shopId: targetShopId, // May be undefined\n                        quantityChange: item.quantity, // Positive, as it's being added back\n                    });\n                }\n            }\n\n            // Delete related payments first (if any)\n            await tx.payment.deleteMany({\n                where: { invoiceId: invoiceId }\n            });\n\n            // Delete invoice items\n            await tx.invoiceItem.deleteMany({\n                where: { invoiceId: invoiceId }\n            });\n\n            // Finally, delete the invoice itself\n            await tx.invoice.delete({\n                where: { id: invoiceId }\n            });\n\n            return { id: invoiceId, customerId: invoiceToDelete.customerId, invoiceNumber: invoiceToDelete.invoiceNumber }; // Return some info about the deleted invoice\n        });\n\n        // Real-time updates now handled by polling system\n        console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);\n\n        // Smart cache invalidation - only invalidate what's necessary\n        const invalidationPromises = [\n            // Invalidate invoice-specific caches\n            cacheService.invalidatePattern(`invoices:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            \n            // Invalidate inventory caches for affected shop\n            cacheService.invalidatePattern(`inventory:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('inventory:all:*'),\n            \n            // Use optimized dashboard cache invalidation\n            cacheService.invalidatePattern(`dashboard:optimized:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:optimized:*:all'),\n            \n            // Invalidate legacy dashboard caches\n            cacheService.invalidatePattern(`dashboard:summary:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary:*:all')\n        ];\n\n        await Promise.allSettled(invalidationPromises);\n        \n        // Trigger materialized view refresh in background\n        setImmediate(async () => {\n            try {\n                await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/dashboard/optimized`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': request.headers.get('Authorization') || ''\n                    },\n                    body: JSON.stringify({\n                        action: 'invalidate',\n                        shopId: deletedInvoiceResult?.shopId?.toString() || 'all',\n                        type: 'inventory'\n                    })\n                });\n            } catch (error) {\n                console.warn('Failed to trigger optimized dashboard refresh:', error);\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: `Invoice ${deletedInvoiceResult?.invoiceNumber || invoiceId} deleted successfully`,\n            data: { id: deletedInvoiceResult?.id }\n        });\n\n    } catch (error) {\n        console.error('Error deleting invoice:', error);\n        const err = error as Error;\n\n        // Check for foreign key constraint violation with receipts\n        if (err.message && err.message.includes('Receipt_paymentId_fkey')) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete invoice with associated receipts. Please delete the receipts first.',\n                    error: err.message\n                },\n                { status: 400 }\n            );\n        }\n\n        return NextResponse.json(\n            { success: false, message: err.message || 'Error deleting invoice', error: err.stack },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}