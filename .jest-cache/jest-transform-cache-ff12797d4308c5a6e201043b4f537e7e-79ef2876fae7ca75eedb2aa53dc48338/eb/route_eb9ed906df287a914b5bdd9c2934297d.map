{"version":3,"names":["cov_1zy3y7347p","actualCoverage","s","GET","request","f","console","log","authHeader","headers","get","b","substring","token","replace","_server","NextResponse","json","error","status","decoded","_auth","verifyToken","sub","searchParams","URL","url","entity","undefined","entityId","limit","parseInt","offset","type","result","_auditService","auditService","getRecycleBinItems","history","getEntityHistory","items","total","length","getAuditEntries"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/audit-trail/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyToken } from '@/lib/auth';\nimport { auditService } from '@/services/auditService';\nimport { revalidateTag } from 'next/cache';\n\n// GET /api/audit-trail - Get audit trail entries\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('=== AUDIT TRAIL API DEBUG ===');\n    const authHeader = request.headers.get('Authorization');\n    console.log('Authorization header:', authHeader ? `${authHeader.substring(0, 20)}...` : 'none');\n    \n    const token = authHeader?.replace('Bearer ', '');\n    if (!token) {\n      console.log('No token found in Authorization header');\n      return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n    }\n\n    console.log('Token extracted:', token.substring(0, 20) + '...');\n    const decoded = await verifyToken(token);\n    console.log('Token verification result:', decoded ? 'SUCCESS' : 'FAILED');\n    \n    if (!decoded || !decoded.sub) {\n      console.log('Token validation failed - decoded:', decoded);\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n    }\n    \n    console.log('Token validated successfully for user:', decoded.sub);\n\n    const { searchParams } = new URL(request.url);\n    const entity = searchParams.get('entity') || undefined;\n    const entityId = searchParams.get('entityId');\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const type = searchParams.get('type') || 'all'; // 'all', 'deleted', 'history'\n\n    if (type === 'deleted') {\n      // Get recycle bin items\n      const result = await auditService.getRecycleBinItems(entity, limit, offset);\n      return NextResponse.json(result);\n    } else if (type === 'history' && entity && entityId) {\n      // Get entity history\n      const history = await auditService.getEntityHistory(\n        entity,\n        parseInt(entityId),\n        limit\n      );\n      return NextResponse.json({ items: history, total: history.length });\n    } else {\n      // Get all audit entries\n      const result = await auditService.getAuditEntries(entity, limit, offset);\n      return NextResponse.json(result);\n    }\n  } catch (error) {\n    console.error('Error fetching audit trail:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch audit trail' },\n      { status: 500 }\n    );\n  }\n}"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAFkB;;;;;;WAAAC,GAAA;;;;;kCANoB;;;kCACd;;;kCACC;AAItB,eAAeA,IAAIC,OAAoB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EAC5C,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACFI,OAAA,CAAQC,GAAG,CAAC;IACZ,MAAMC,UAAA;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,OAAaE,OAAA,CAAQK,OAAO,CAACC,GAAG,CAAC;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACvCI,OAAA,CAAQC,GAAG,CAAC,yBAAyBC,UAAA;IAAA;IAAA,CAAAR,cAAA,GAAAW,CAAA,UAAa,GAAGH,UAAA,CAAWI,SAAS,CAAC,GAAG,QAAQ;IAAA;IAAA,CAAAZ,cAAA,GAAAW,CAAA,UAAG;IAExF,MAAME,KAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAQM,UAAA,EAAYM,OAAA,CAAQ,WAAW;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAC7C,IAAI,CAACW,KAAA,EAAO;MAAA;MAAAb,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACVI,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAP,cAAA,GAAAE,CAAA;MACZ,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAoB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACzE;IAAA;IAAA;MAAAnB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEAI,OAAA,CAAQC,GAAG,CAAC,oBAAoBM,KAAA,CAAMD,SAAS,CAAC,GAAG,MAAM;IACzD,MAAMQ,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAmB,KAAA,CAAAC,WAAW,EAACT,KAAA;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAClCI,OAAA,CAAQC,GAAG,CAAC,8BAA8Ba,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAW,CAAA,UAAU;IAAA;IAAA,CAAAX,cAAA,GAAAW,CAAA,UAAY;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEhE;IAAI;IAAA,CAAAF,cAAA,GAAAW,CAAA,WAACS,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAW,CAAA,UAAW,CAACS,OAAA,CAAQG,GAAG,GAAE;MAAA;MAAAvB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAC5BI,OAAA,CAAQC,GAAG,CAAC,sCAAsCa,OAAA;MAAA;MAAApB,cAAA,GAAAE,CAAA;MAClD,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAgB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrE;IAAA;IAAA;MAAAnB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEAI,OAAA,CAAQC,GAAG,CAAC,0CAA0Ca,OAAA,CAAQG,GAAG;IAEjE,MAAM;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAG,IAAIuB,GAAA,CAAIrB,OAAA,CAAQsB,GAAG;IAC5C,MAAMC,MAAA;IAAA;IAAA,CAAA3B,cAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,cAAA,GAAAW,CAAA,UAAAa,YAAA,CAAad,GAAG,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAW,CAAA,UAAaiB,SAAA;IAC7C,MAAMC,QAAA;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAWsB,YAAA,CAAad,GAAG,CAAC;IAClC,MAAMoB,KAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAQ6B,QAAA;IAAS;IAAA,CAAA/B,cAAA,GAAAW,CAAA,UAAAa,YAAA,CAAad,GAAG,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAW,CAAA,UAAY;IACpD,MAAMqB,MAAA;IAAA;IAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAS6B,QAAA;IAAS;IAAA,CAAA/B,cAAA,GAAAW,CAAA,UAAAa,YAAA,CAAad,GAAG,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAW,CAAA,UAAa;IACtD,MAAMsB,IAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA;IAAO;IAAA,CAAAF,cAAA,GAAAW,CAAA,UAAAa,YAAA,CAAad,GAAG,CAAC;IAAA;IAAA,CAAAV,cAAA,GAAAW,CAAA,UAAW,SAAO;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEhD,IAAI+B,IAAA,KAAS,WAAW;MAAA;MAAAjC,cAAA,GAAAW,CAAA;MACtB;MACA,MAAMuB,MAAA;MAAA;MAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAS,MAAMiC,aAAA,CAAAC,YAAY,CAACC,kBAAkB,CAACV,MAAA,EAAQG,KAAA,EAAOE,MAAA;MAAA;MAAAhC,cAAA,GAAAE,CAAA;MACpE,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACiB,MAAA;IAC3B,OAAO;MAAA;MAAAlC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAAA;MAAI;MAAA,CAAAF,cAAA,GAAAW,CAAA,WAAAsB,IAAA,KAAS;MAAA;MAAA,CAAAjC,cAAA,GAAAW,CAAA,WAAagB,MAAA;MAAA;MAAA,CAAA3B,cAAA,GAAAW,CAAA,WAAUkB,QAAA,GAAU;QAAA;QAAA7B,cAAA,GAAAW,CAAA;QACnD;QACA,MAAM2B,OAAA;QAAA;QAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAU,MAAMiC,aAAA,CAAAC,YAAY,CAACG,gBAAgB,CACjDZ,MAAA,EACAI,QAAA,CAASF,QAAA,GACTC,KAAA;QAAA;QAAA9B,cAAA,GAAAE,CAAA;QAEF,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UAAEuB,KAAA,EAAOF,OAAA;UAASG,KAAA,EAAOH,OAAA,CAAQI;QAAO;MACnE,OAAO;QAAA;QAAA1C,cAAA,GAAAW,CAAA;QACL;QACA,MAAMuB,MAAA;QAAA;QAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAS,MAAMiC,aAAA,CAAAC,YAAY,CAACO,eAAe,CAAChB,MAAA,EAAQG,KAAA,EAAOE,MAAA;QAAA;QAAAhC,cAAA,GAAAE,CAAA;QACjE,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACiB,MAAA;MAC3B;IAAA;EACF,EAAE,OAAOhB,KAAA,EAAO;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACdI,OAAA,CAAQY,KAAK,CAAC,+BAA+BA,KAAA;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAC7C,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,KAAA,EAAO;IAA8B,GACvC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}