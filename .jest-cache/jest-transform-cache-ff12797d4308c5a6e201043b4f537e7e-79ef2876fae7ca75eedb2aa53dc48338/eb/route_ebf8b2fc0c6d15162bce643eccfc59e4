847ad0311a85f4fe1e580eea44287527
"use strict";

/* istanbul ignore next */
function cov_7f8epg9vf() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts";
  var hash = "1461c448ef5a7cbade1ca4b4597b69952466ad19";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "10": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 47
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "14": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "15": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "16": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "17": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "18": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 50
        }
      },
      "19": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 56
        }
      },
      "20": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "21": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 425,
          column: 5
        }
      },
      "22": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "23": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "24": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 43
        }
      },
      "25": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 48
        }
      },
      "26": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "27": {
        start: {
          line: 110,
          column: 44
        },
        end: {
          line: 110,
          column: 55
        }
      },
      "28": {
        start: {
          line: 113,
          column: 35
        },
        end: {
          line: 116,
          column: 38
        }
      },
      "29": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "30": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 107
        }
      },
      "31": {
        start: {
          line: 120,
          column: 35
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "32": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 61
        }
      },
      "33": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "34": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 92
        }
      },
      "35": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 35
        }
      },
      "36": {
        start: {
          line: 144,
          column: 41
        },
        end: {
          line: 144,
          column: 43
        }
      },
      "37": {
        start: {
          line: 146,
          column: 31
        },
        end: {
          line: 379,
          column: 10
        }
      },
      "38": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "39": {
        start: {
          line: 148,
          column: 40
        },
        end: {
          line: 155,
          column: 18
        }
      },
      "40": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "41": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 57
        }
      },
      "42": {
        start: {
          line: 163,
          column: 36
        },
        end: {
          line: 163,
          column: 45
        }
      },
      "43": {
        start: {
          line: 164,
          column: 36
        },
        end: {
          line: 164,
          column: 45
        }
      },
      "44": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 168,
          column: 17
        }
      },
      "45": {
        start: {
          line: 166,
          column: 45
        },
        end: {
          line: 166,
          column: 81
        }
      },
      "46": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 86
        }
      },
      "47": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "48": {
        start: {
          line: 170,
          column: 38
        },
        end: {
          line: 170,
          column: 73
        }
      },
      "49": {
        start: {
          line: 171,
          column: 45
        },
        end: {
          line: 171,
          column: 76
        }
      },
      "50": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 81
        }
      },
      "51": {
        start: {
          line: 174,
          column: 38
        },
        end: {
          line: 177,
          column: 18
        }
      },
      "52": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 83
        }
      },
      "53": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 261,
          column: 17
        }
      },
      "54": {
        start: {
          line: 180,
          column: 40
        },
        end: {
          line: 180,
          column: 71
        }
      },
      "55": {
        start: {
          line: 181,
          column: 40
        },
        end: {
          line: 181,
          column: 71
        }
      },
      "56": {
        start: {
          line: 182,
          column: 43
        },
        end: {
          line: 182,
          column: 68
        }
      },
      "57": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 125
        }
      },
      "58": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 260,
          column: 21
        }
      },
      "59": {
        start: {
          line: 186,
          column: 45
        },
        end: {
          line: 186,
          column: 104
        }
      },
      "60": {
        start: {
          line: 187,
          column: 24
        },
        end: {
          line: 191,
          column: 27
        }
      },
      "61": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 259,
          column: 25
        }
      },
      "62": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 233,
          column: 29
        }
      },
      "63": {
        start: {
          line: 194,
          column: 59
        },
        end: {
          line: 199,
          column: 34
        }
      },
      "64": {
        start: {
          line: 200,
          column: 55
        },
        end: {
          line: 200,
          column: 117
        }
      },
      "65": {
        start: {
          line: 200,
          column: 94
        },
        end: {
          line: 200,
          column: 113
        }
      },
      "66": {
        start: {
          line: 201,
          column: 32
        },
        end: {
          line: 203,
          column: 33
        }
      },
      "67": {
        start: {
          line: 202,
          column: 36
        },
        end: {
          line: 202,
          column: 200
        }
      },
      "68": {
        start: {
          line: 205,
          column: 32
        },
        end: {
          line: 218,
          column: 35
        }
      },
      "69": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 232,
          column: 35
        }
      },
      "70": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 258,
          column: 29
        }
      },
      "71": {
        start: {
          line: 236,
          column: 32
        },
        end: {
          line: 246,
          column: 35
        }
      },
      "72": {
        start: {
          line: 248,
          column: 32
        },
        end: {
          line: 257,
          column: 35
        }
      },
      "73": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 268,
          column: 19
        }
      },
      "74": {
        start: {
          line: 269,
          column: 54
        },
        end: {
          line: 269,
          column: 55
        }
      },
      "75": {
        start: {
          line: 270,
          column: 44
        },
        end: {
          line: 270,
          column: 45
        }
      },
      "76": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 329,
          column: 17
        }
      },
      "77": {
        start: {
          line: 272,
          column: 50
        },
        end: {
          line: 272,
          column: 116
        }
      },
      "78": {
        start: {
          line: 272,
          column: 80
        },
        end: {
          line: 272,
          column: 115
        }
      },
      "79": {
        start: {
          line: 274,
          column: 43
        },
        end: {
          line: 285,
          column: 22
        }
      },
      "80": {
        start: {
          line: 287,
          column: 43
        },
        end: {
          line: 290,
          column: 27
        }
      },
      "81": {
        start: {
          line: 287,
          column: 78
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "82": {
        start: {
          line: 292,
          column: 46
        },
        end: {
          line: 292,
          column: 105
        }
      },
      "83": {
        start: {
          line: 292,
          column: 81
        },
        end: {
          line: 292,
          column: 104
        }
      },
      "84": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 308,
          column: 21
        }
      },
      "85": {
        start: {
          line: 294,
          column: 49
        },
        end: {
          line: 304,
          column: 26
        }
      },
      "86": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 307,
          column: 27
        }
      },
      "87": {
        start: {
          line: 306,
          column: 28
        },
        end: {
          line: 306,
          column: 81
        }
      },
      "88": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 328,
          column: 21
        }
      },
      "89": {
        start: {
          line: 310,
          column: 42
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "90": {
        start: {
          line: 311,
          column: 42
        },
        end: {
          line: 311,
          column: 76
        }
      },
      "91": {
        start: {
          line: 312,
          column: 49
        },
        end: {
          line: 312,
          column: 75
        }
      },
      "92": {
        start: {
          line: 313,
          column: 46
        },
        end: {
          line: 313,
          column: 71
        }
      },
      "93": {
        start: {
          line: 314,
          column: 43
        },
        end: {
          line: 314,
          column: 75
        }
      },
      "94": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 325,
          column: 27
        }
      },
      "95": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 326,
          column: 76
        }
      },
      "96": {
        start: {
          line: 327,
          column: 24
        },
        end: {
          line: 327,
          column: 60
        }
      },
      "97": {
        start: {
          line: 330,
          column: 40
        },
        end: {
          line: 330,
          column: 143
        }
      },
      "98": {
        start: {
          line: 331,
          column: 37
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "99": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 349,
          column: 17
        }
      },
      "100": {
        start: {
          line: 343,
          column: 20
        },
        end: {
          line: 343,
          column: 69
        }
      },
      "101": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 353,
          column: 19
        }
      },
      "102": {
        start: {
          line: 354,
          column: 44
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "103": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 43
        }
      },
      "104": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 61
        }
      },
      "105": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 30
        }
      },
      "106": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "107": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 123
        }
      },
      "108": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "109": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "110": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 52
        }
      },
      "111": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 399,
          column: 17
        }
      },
      "112": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 398,
          column: 23
        }
      },
      "113": {
        start: {
          line: 391,
          column: 24
        },
        end: {
          line: 395,
          column: 25
        }
      },
      "114": {
        start: {
          line: 392,
          column: 28
        },
        end: {
          line: 392,
          column: 85
        }
      },
      "115": {
        start: {
          line: 394,
          column: 28
        },
        end: {
          line: 394,
          column: 100
        }
      },
      "116": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 87
        }
      },
      "117": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 74
        }
      },
      "118": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 410,
          column: 11
        }
      },
      "119": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 415,
          column: 11
        }
      },
      "120": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 56
        }
      },
      "121": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 424,
          column: 11
        }
      },
      "122": {
        start: {
          line: 428,
          column: 4
        },
        end: {
          line: 569,
          column: 5
        }
      },
      "123": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "124": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 434,
          column: 15
        }
      },
      "125": {
        start: {
          line: 436,
          column: 26
        },
        end: {
          line: 436,
          column: 43
        }
      },
      "126": {
        start: {
          line: 437,
          column: 41
        },
        end: {
          line: 437,
          column: 43
        }
      },
      "127": {
        start: {
          line: 439,
          column: 37
        },
        end: {
          line: 504,
          column: 10
        }
      },
      "128": {
        start: {
          line: 440,
          column: 36
        },
        end: {
          line: 448,
          column: 14
        }
      },
      "129": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 451,
          column: 13
        }
      },
      "130": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 66
        }
      },
      "131": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "132": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 479,
          column: 17
        }
      },
      "133": {
        start: {
          line: 458,
          column: 39
        },
        end: {
          line: 458,
          column: 74
        }
      },
      "134": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 473,
          column: 23
        }
      },
      "135": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 478,
          column: 23
        }
      },
      "136": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 486,
          column: 15
        }
      },
      "137": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 492,
          column: 15
        }
      },
      "138": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 498,
          column: 15
        }
      },
      "139": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 503,
          column: 14
        }
      },
      "140": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 79
        }
      },
      "141": {
        start: {
          line: 508,
          column: 37
        },
        end: {
          line: 521,
          column: 9
        }
      },
      "142": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 522,
          column: 55
        }
      },
      "143": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 541,
          column: 11
        }
      },
      "144": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 540,
          column: 13
        }
      },
      "145": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 537,
          column: 19
        }
      },
      "146": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 539,
          column: 86
        }
      },
      "147": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 548,
          column: 11
        }
      },
      "148": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 550,
          column: 56
        }
      },
      "149": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 25
        }
      },
      "150": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 561,
          column: 9
        }
      },
      "151": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 560,
          column: 15
        }
      },
      "152": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 568,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 40
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 95,
            column: 15
          },
          end: {
            line: 95,
            column: 18
          }
        },
        loc: {
          start: {
            line: 95,
            column: 40
          },
          end: {
            line: 426,
            column: 1
          }
        },
        line: 95
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 65
          },
          end: {
            line: 146,
            column: 66
          }
        },
        loc: {
          start: {
            line: 146,
            column: 77
          },
          end: {
            line: 377,
            column: 9
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 200,
            column: 81
          },
          end: {
            line: 200,
            column: 82
          }
        },
        loc: {
          start: {
            line: 200,
            column: 94
          },
          end: {
            line: 200,
            column: 113
          }
        },
        line: 200
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 272,
            column: 72
          },
          end: {
            line: 272,
            column: 73
          }
        },
        loc: {
          start: {
            line: 272,
            column: 80
          },
          end: {
            line: 272,
            column: 115
          }
        },
        line: 272
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 287,
            column: 70
          },
          end: {
            line: 287,
            column: 71
          }
        },
        loc: {
          start: {
            line: 287,
            column: 78
          },
          end: {
            line: 290,
            column: 25
          }
        },
        line: 287
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 292,
            column: 75
          },
          end: {
            line: 292,
            column: 76
          }
        },
        loc: {
          start: {
            line: 292,
            column: 81
          },
          end: {
            line: 292,
            column: 104
          }
        },
        line: 292
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 305,
            column: 49
          },
          end: {
            line: 305,
            column: 50
          }
        },
        loc: {
          start: {
            line: 305,
            column: 54
          },
          end: {
            line: 307,
            column: 25
          }
        },
        line: 305
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 390,
            column: 97
          },
          end: {
            line: 390,
            column: 98
          }
        },
        loc: {
          start: {
            line: 390,
            column: 107
          },
          end: {
            line: 396,
            column: 21
          }
        },
        line: 390
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 396,
            column: 29
          },
          end: {
            line: 396,
            column: 30
          }
        },
        loc: {
          start: {
            line: 396,
            column: 38
          },
          end: {
            line: 398,
            column: 21
          }
        },
        line: 396
      },
      "14": {
        name: "DELETE",
        decl: {
          start: {
            line: 427,
            column: 15
          },
          end: {
            line: 427,
            column: 21
          }
        },
        loc: {
          start: {
            line: 427,
            column: 43
          },
          end: {
            line: 570,
            column: 1
          }
        },
        line: 427
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 439,
            column: 71
          },
          end: {
            line: 439,
            column: 72
          }
        },
        loc: {
          start: {
            line: 439,
            column: 83
          },
          end: {
            line: 504,
            column: 9
          }
        },
        line: 439
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 524,
            column: 21
          },
          end: {
            line: 524,
            column: 22
          }
        },
        loc: {
          start: {
            line: 524,
            column: 31
          },
          end: {
            line: 541,
            column: 9
          }
        },
        line: 524
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 23
          }
        }, {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 51
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 44
          },
          end: {
            line: 89,
            column: 57
          }
        }, {
          start: {
            line: 89,
            column: 60
          },
          end: {
            line: 89,
            column: 73
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "5": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 23
          }
        }, {
          start: {
            line: 97,
            column: 27
          },
          end: {
            line: 97,
            column: 51
          }
        }],
        line: 97
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 35
          },
          end: {
            line: 116,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 35
          },
          end: {
            line: 113,
            column: 72
          }
        }, {
          start: {
            line: 113,
            column: 76
          },
          end: {
            line: 113,
            column: 108
          }
        }, {
          start: {
            line: 113,
            column: 112
          },
          end: {
            line: 116,
            column: 38
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "10": {
        loc: {
          start: {
            line: 166,
            column: 45
          },
          end: {
            line: 166,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 45
          },
          end: {
            line: 166,
            column: 76
          }
        }, {
          start: {
            line: 166,
            column: 80
          },
          end: {
            line: 166,
            column: 81
          }
        }],
        line: 166
      },
      "11": {
        loc: {
          start: {
            line: 171,
            column: 45
          },
          end: {
            line: 171,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 45
          },
          end: {
            line: 171,
            column: 71
          }
        }, {
          start: {
            line: 171,
            column: 75
          },
          end: {
            line: 171,
            column: 76
          }
        }],
        line: 171
      },
      "12": {
        loc: {
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 180,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 180,
            column: 66
          }
        }, {
          start: {
            line: 180,
            column: 70
          },
          end: {
            line: 180,
            column: 71
          }
        }],
        line: 180
      },
      "13": {
        loc: {
          start: {
            line: 181,
            column: 40
          },
          end: {
            line: 181,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 40
          },
          end: {
            line: 181,
            column: 66
          }
        }, {
          start: {
            line: 181,
            column: 70
          },
          end: {
            line: 181,
            column: 71
          }
        }],
        line: 181
      },
      "14": {
        loc: {
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "15": {
        loc: {
          start: {
            line: 186,
            column: 45
          },
          end: {
            line: 186,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 66
          },
          end: {
            line: 186,
            column: 92
          }
        }, {
          start: {
            line: 186,
            column: 95
          },
          end: {
            line: 186,
            column: 104
          }
        }],
        line: 186
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 24
          },
          end: {
            line: 259,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 24
          },
          end: {
            line: 259,
            column: 25
          }
        }, {
          start: {
            line: 234,
            column: 31
          },
          end: {
            line: 259,
            column: 25
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 28
          },
          end: {
            line: 233,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 28
          },
          end: {
            line: 233,
            column: 29
          }
        }, {
          start: {
            line: 219,
            column: 35
          },
          end: {
            line: 233,
            column: 29
          }
        }],
        line: 193
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 203,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 203,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 258,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 258,
            column: 29
          }
        }, {
          start: {
            line: 247,
            column: 35
          },
          end: {
            line: 258,
            column: 29
          }
        }],
        line: 235
      },
      "20": {
        loc: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "21": {
        loc: {
          start: {
            line: 271,
            column: 20
          },
          end: {
            line: 271,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 20
          },
          end: {
            line: 271,
            column: 37
          }
        }, {
          start: {
            line: 271,
            column: 41
          },
          end: {
            line: 271,
            column: 73
          }
        }, {
          start: {
            line: 271,
            column: 77
          },
          end: {
            line: 271,
            column: 105
          }
        }],
        line: 271
      },
      "22": {
        loc: {
          start: {
            line: 289,
            column: 28
          },
          end: {
            line: 289,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 28
          },
          end: {
            line: 289,
            column: 49
          }
        }, {
          start: {
            line: 289,
            column: 53
          },
          end: {
            line: 289,
            column: 54
          }
        }],
        line: 289
      },
      "23": {
        loc: {
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "24": {
        loc: {
          start: {
            line: 306,
            column: 53
          },
          end: {
            line: 306,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 53
          },
          end: {
            line: 306,
            column: 74
          }
        }, {
          start: {
            line: 306,
            column: 78
          },
          end: {
            line: 306,
            column: 79
          }
        }],
        line: 306
      },
      "25": {
        loc: {
          start: {
            line: 311,
            column: 42
          },
          end: {
            line: 311,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 42
          },
          end: {
            line: 311,
            column: 71
          }
        }, {
          start: {
            line: 311,
            column: 75
          },
          end: {
            line: 311,
            column: 76
          }
        }],
        line: 311
      },
      "26": {
        loc: {
          start: {
            line: 330,
            column: 40
          },
          end: {
            line: 330,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 78
          },
          end: {
            line: 330,
            column: 139
          }
        }, {
          start: {
            line: 330,
            column: 142
          },
          end: {
            line: 330,
            column: 143
          }
        }],
        line: 330
      },
      "27": {
        loc: {
          start: {
            line: 334,
            column: 33
          },
          end: {
            line: 334,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 59
          },
          end: {
            line: 334,
            column: 92
          }
        }, {
          start: {
            line: 334,
            column: 95
          },
          end: {
            line: 334,
            column: 104
          }
        }],
        line: 334
      },
      "28": {
        loc: {
          start: {
            line: 335,
            column: 29
          },
          end: {
            line: 335,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 51
          },
          end: {
            line: 335,
            column: 80
          }
        }, {
          start: {
            line: 335,
            column: 83
          },
          end: {
            line: 335,
            column: 92
          }
        }],
        line: 335
      },
      "29": {
        loc: {
          start: {
            line: 337,
            column: 28
          },
          end: {
            line: 337,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 49
          },
          end: {
            line: 337,
            column: 75
          }
        }, {
          start: {
            line: 337,
            column: 78
          },
          end: {
            line: 337,
            column: 82
          }
        }],
        line: 337
      },
      "30": {
        loc: {
          start: {
            line: 342,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 16
          },
          end: {
            line: 349,
            column: 17
          }
        }, {
          start: {
            line: 344,
            column: 23
          },
          end: {
            line: 349,
            column: 17
          }
        }],
        line: 342
      },
      "31": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "32": {
        loc: {
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "33": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 19
          }
        }, {
          start: {
            line: 385,
            column: 23
          },
          end: {
            line: 385,
            column: 37
          }
        }],
        line: 385
      },
      "34": {
        loc: {
          start: {
            line: 388,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "35": {
        loc: {
          start: {
            line: 391,
            column: 24
          },
          end: {
            line: 395,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 24
          },
          end: {
            line: 395,
            column: 25
          }
        }, {
          start: {
            line: 393,
            column: 31
          },
          end: {
            line: 395,
            column: 25
          }
        }],
        line: 391
      },
      "36": {
        loc: {
          start: {
            line: 391,
            column: 28
          },
          end: {
            line: 391,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 28
          },
          end: {
            line: 391,
            column: 48
          }
        }, {
          start: {
            line: 391,
            column: 52
          },
          end: {
            line: 391,
            column: 71
          }
        }],
        line: 391
      },
      "37": {
        loc: {
          start: {
            line: 421,
            column: 19
          },
          end: {
            line: 421,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 421,
            column: 44
          },
          end: {
            line: 421,
            column: 57
          }
        }, {
          start: {
            line: 421,
            column: 60
          },
          end: {
            line: 421,
            column: 73
          }
        }],
        line: 421
      },
      "38": {
        loc: {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "39": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 429,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 429,
            column: 23
          }
        }, {
          start: {
            line: 429,
            column: 27
          },
          end: {
            line: 429,
            column: 51
          }
        }],
        line: 429
      },
      "40": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "41": {
        loc: {
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "42": {
        loc: {
          start: {
            line: 453,
            column: 16
          },
          end: {
            line: 453,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 16
          },
          end: {
            line: 453,
            column: 37
          }
        }, {
          start: {
            line: 453,
            column: 41
          },
          end: {
            line: 453,
            column: 73
          }
        }],
        line: 453
      },
      "43": {
        loc: {
          start: {
            line: 458,
            column: 39
          },
          end: {
            line: 458,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 39
          },
          end: {
            line: 458,
            column: 61
          }
        }, {
          start: {
            line: 458,
            column: 65
          },
          end: {
            line: 458,
            column: 74
          }
        }],
        line: 458
      },
      "44": {
        loc: {
          start: {
            line: 464,
            column: 31
          },
          end: {
            line: 466,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 31
          },
          end: {
            line: 464,
            column: 43
          }
        }, {
          start: {
            line: 464,
            column: 47
          },
          end: {
            line: 466,
            column: 29
          }
        }],
        line: 464
      },
      "45": {
        loc: {
          start: {
            line: 510,
            column: 69
          },
          end: {
            line: 510,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 69
          },
          end: {
            line: 510,
            column: 97
          }
        }, {
          start: {
            line: 510,
            column: 101
          },
          end: {
            line: 510,
            column: 106
          }
        }],
        line: 510
      },
      "46": {
        loc: {
          start: {
            line: 513,
            column: 70
          },
          end: {
            line: 513,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 70
          },
          end: {
            line: 513,
            column: 98
          }
        }, {
          start: {
            line: 513,
            column: 102
          },
          end: {
            line: 513,
            column: 107
          }
        }],
        line: 513
      },
      "47": {
        loc: {
          start: {
            line: 516,
            column: 80
          },
          end: {
            line: 516,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 80
          },
          end: {
            line: 516,
            column: 108
          }
        }, {
          start: {
            line: 516,
            column: 112
          },
          end: {
            line: 516,
            column: 117
          }
        }],
        line: 516
      },
      "48": {
        loc: {
          start: {
            line: 519,
            column: 78
          },
          end: {
            line: 519,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 78
          },
          end: {
            line: 519,
            column: 106
          }
        }, {
          start: {
            line: 519,
            column: 110
          },
          end: {
            line: 519,
            column: 115
          }
        }],
        line: 519
      },
      "49": {
        loc: {
          start: {
            line: 526,
            column: 31
          },
          end: {
            line: 526,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 526,
            column: 31
          },
          end: {
            line: 526,
            column: 62
          }
        }, {
          start: {
            line: 526,
            column: 66
          },
          end: {
            line: 526,
            column: 89
          }
        }],
        line: 526
      },
      "50": {
        loc: {
          start: {
            line: 530,
            column: 41
          },
          end: {
            line: 530,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 530,
            column: 41
          },
          end: {
            line: 530,
            column: 77
          }
        }, {
          start: {
            line: 530,
            column: 81
          },
          end: {
            line: 530,
            column: 83
          }
        }],
        line: 530
      },
      "51": {
        loc: {
          start: {
            line: 534,
            column: 32
          },
          end: {
            line: 534,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 534,
            column: 32
          },
          end: {
            line: 534,
            column: 72
          }
        }, {
          start: {
            line: 534,
            column: 76
          },
          end: {
            line: 534,
            column: 81
          }
        }],
        line: 534
      },
      "52": {
        loc: {
          start: {
            line: 544,
            column: 32
          },
          end: {
            line: 544,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 544,
            column: 32
          },
          end: {
            line: 544,
            column: 67
          }
        }, {
          start: {
            line: 544,
            column: 71
          },
          end: {
            line: 544,
            column: 80
          }
        }],
        line: 544
      },
      "53": {
        loc: {
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 561,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 561,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "54": {
        loc: {
          start: {
            line: 553,
            column: 12
          },
          end: {
            line: 553,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 553,
            column: 12
          },
          end: {
            line: 553,
            column: 23
          }
        }, {
          start: {
            line: 553,
            column: 27
          },
          end: {
            line: 553,
            column: 73
          }
        }],
        line: 553
      },
      "55": {
        loc: {
          start: {
            line: 564,
            column: 21
          },
          end: {
            line: 564,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 564,
            column: 21
          },
          end: {
            line: 564,
            column: 32
          }
        }, {
          start: {
            line: 564,
            column: 36
          },
          end: {
            line: 564,
            column: 60
          }
        }],
        line: 564
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\n\n\nimport { cacheService } from '@/lib/cache';\n\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(params.id);\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: invoiceId },\n            include: {\n                customer: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true,\n                        location: true,\n                        contact_person: true,\n                        phone: true,\n                        email: true,\n                        address_line1: true,\n                        address_line2: true,\n                        city: true,\n                        state: true,\n                        postal_code: true,\n                        country: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: {\n                    where: {\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    include: {\n                        receipt: true\n                    }\n                }\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error fetching invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        const invoiceId = Number(params.id);\n        const requestData = await request.json();\n        console.log('Invoice update request data:', { invoiceId, ...requestData });\n        const { sendSms, ...invoiceData } = requestData;\n\n        // Check if this is only a status update to \"Paid\"\n        // More specific check: make sure it only has the status field and it's being changed to 'Paid'\n        const isOnlyStatusUpdate =\n            Object.keys(invoiceData).length === 1 &&\n            invoiceData.status !== undefined &&\n            ['Paid', 'Pending'].includes(invoiceData.status);\n\n        // If it's only updating status, handle it without affecting inventory\n        if (isOnlyStatusUpdate) {\n            console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);\n            const updatedInvoice = await prisma.invoice.update({\n                where: { id: invoiceId },\n                data: { status: invoiceData.status },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    },\n                    payments: true\n                }\n            });\n\n            return NextResponse.json(updatedInvoice);\n        }\n\n        // Ensure invoiceData.items is an array, default to empty if not provided or not an array\n        if (!Array.isArray(invoiceData.items)) {\n            console.log('invoiceData.items was not an array, defaulting to [] for update.');\n            invoiceData.items = [];\n        }\n\n        const inventoryUpdatesForEvent: Array<{ productId: number, shopId?: number, newQuantity?: number, oldQuantity?: number, quantityChange: number }> = [];\n\n        // Update invoice with transaction to handle items\n        const updatedInvoice = await prisma.$transaction(\n            async (tx) => {\n                try {\n                    const existingInvoice = await tx.invoice.findUnique({\n                        where: { id: invoiceId },\n                        include: {\n                            items: true // Keep for inventory adjustment if needed, though items will be replaced\n                        }\n                    });\n\n                    if (!existingInvoice) {\n                        throw new Error('Invoice not found');\n                    }\n\n                    // --- Inventory Adjustment Logic (existing) --- \n                    // This logic might need review if items are fully replaced, \n                    // as it compares old vs new item quantities. \n                    // For profit, we are deleting and re-creating items.\n                    const oldItemsMap = new Map();\n                    const newItemsMap = new Map();\n\n                    for (const item of existingInvoice.items) {\n                        const existingQuantity = oldItemsMap.get(item.productId) || 0;\n                        oldItemsMap.set(item.productId, existingQuantity + item.quantity);\n                    }\n\n                    for (const item of invoiceData.items) {\n                        const productId = parseInt(item.productId.toString());\n                        const existingQuantity = newItemsMap.get(productId) || 0;\n                        newItemsMap.set(productId, existingQuantity + item.quantity);\n                    }\n\n                    const allProductIds = new Set([\n                        ...Array.from(oldItemsMap.keys()),\n                        ...Array.from(newItemsMap.keys())\n                    ]);\n\n                    console.log('Invoice update - Inventory changes (based on diff):');\n                    for (const productId of allProductIds) {\n                        const oldQuantity = oldItemsMap.get(productId) || 0;\n                        const newQuantity = newItemsMap.get(productId) || 0;\n                        const quantityChange = newQuantity - oldQuantity;\n                        console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);\n                        if (quantityChange !== 0) {\n                            // Ensure affectedShopId is a string if invoiceData.shopId is a string\n                            let affectedShopId: string | undefined = invoiceData.shopId ? String(invoiceData.shopId) : undefined;\n\n                            inventoryUpdatesForEvent.push({\n                                productId: productId as number,\n                                shopId: affectedShopId,\n                                quantityChange: quantityChange,\n                            });\n                            if (quantityChange > 0) { // Deduct (more items sold or added)\n                                if (affectedShopId) {\n                                    const availableInventory = await tx.inventoryItem.findMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId }\n                                    });\n                                    const totalAvailable = availableInventory.reduce((sum, item) => sum + item.quantity, 0);\n                                    if (totalAvailable < quantityChange) {\n                                        throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);\n                                    }\n                                    // This should ideally be a more robust way to pick which inventory item to decrement\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId, quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), quantity: { gte: quantityChange } }, // Simplistic update\n                                        data: { quantity: { decrement: quantityChange } }\n                                    });\n                                }\n                            } else { // Add back (fewer items sold or items removed)\n                                if (affectedShopId) {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()), shopId: affectedShopId },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                } else {\n                                    await tx.inventoryItem.updateMany({\n                                        where: { productId: parseInt(productId.toString()) },\n                                        data: { quantity: { increment: Math.abs(quantityChange) } }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    // --- End Inventory Adjustment Logic ---\n\n                    // Delete old invoice items before adding new ones for profit recalc\n                    await tx.invoiceItem.deleteMany({ where: { invoiceId: invoiceId } });\n\n                    let newCalculatedTotalInvoiceAmount = 0;\n                    let newTotalInvoiceProfit = 0;\n\n                    if (invoiceData.items && Array.isArray(invoiceData.items) && invoiceData.items.length > 0) {\n                        const productIdsForNewItems = invoiceData.items.map((item: any) => parseInt(item.productId.toString()));\n                        \n                        // Get shop-specific costs for profit calculation instead of global weighted average\n                        const inventoryItems = await tx.inventoryItem.findMany({\n                            where: { \n                                productId: { in: productIdsForNewItems },\n                                shopId: invoiceData.shopId\n                            },\n                            select: { productId: true, shopSpecificCost: true }\n                        });\n\n                        // Create a map of productId to shop-specific cost\n                        const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                        \n                        // For products not found in inventory, fallback to global weighted average\n                        const missingProductIds = productIdsForNewItems.filter(id => !productCostMap.has(id));\n                        if (missingProductIds.length > 0) {\n                            const fallbackProducts = await tx.product.findMany({\n                                where: { id: { in: missingProductIds } },\n                                select: { id: true, weightedAverageCost: true }\n                            });\n                            fallbackProducts.forEach(p => {\n                                productCostMap.set(p.id, p.weightedAverageCost || 0);\n                            });\n                        }\n\n                        for (const item of invoiceData.items) {\n                            const productId = parseInt(item.productId.toString());\n                            const costPrice = productCostMap.get(productId) || 0;\n                            const itemSellingTotal = item.quantity * item.price;\n                            const totalItemCost = costPrice * item.quantity;\n                            const itemProfit = itemSellingTotal - totalItemCost;\n\n                            await tx.invoiceItem.create({\n                                data: {\n                                    invoiceId: invoiceId,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                }\n                            });\n                            newCalculatedTotalInvoiceAmount += itemSellingTotal;\n                            newTotalInvoiceProfit += itemProfit;\n                        }\n                    }\n\n                    const newProfitMargin = newCalculatedTotalInvoiceAmount > 0 ? (newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount) * 100 : 0;\n\n                    const dataToUpdate: any = {\n                        status: invoiceData.status,\n                        paymentMethod: invoiceData.paymentMethod,\n                        invoiceDate: invoiceData.invoiceDate ? new Date(invoiceData.invoiceDate) : undefined,\n                        dueDate: invoiceData.dueDate ? new Date(invoiceData.dueDate) : undefined,\n                        notes: invoiceData.notes,\n                        shopId: invoiceData.shopId ? String(invoiceData.shopId) : null, // Ensure shopId is string or null\n                        total: newCalculatedTotalInvoiceAmount, // Updated total\n                        totalProfit: newTotalInvoiceProfit,   // Updated profit\n                        profitMargin: newProfitMargin         // Updated profit margin\n                    };\n\n                    if (invoiceData.customerId) {\n                        dataToUpdate.customerId = invoiceData.customerId;\n                    } else {\n                        // If customerId is explicitly null or undefined, disconnect it if your schema allows\n                        // dataToUpdate.customer = { disconnect: true }; \n                        // Or ensure it's set to null if the field is optional and you want to clear it.\n                        // For now, we assume if not provided, it's not changed or handled by frontend state.\n                    }\n\n                    console.log('Updating invoice details with profit:', { invoiceId, dataToUpdate });\n\n                    const finalUpdatedInvoice = await tx.invoice.update({\n                        where: { id: invoiceId },\n                        data: dataToUpdate,\n                        include: {\n                            customer: true,\n                            items: { include: { product: true } },\n                            payments: true\n                        }\n                    });\n\n                    // Handle cash payment method\n                    // Removed automatic payment creation/update for cash invoices\n                    // Users will manually record payments when they actually receive them\n\n                    return finalUpdatedInvoice;\n                } catch (txError) {\n                    console.error('Transaction error:', txError);\n                    throw txError;\n                }\n            },\n            { timeout: 30000 }\n        );\n\n        // Real-time updates now handled by polling system\n        if (inventoryUpdatesForEvent.length > 0) {\n            console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);\n        }\n\n        // Send SMS notification if requested\n        if (sendSms && updatedInvoice) {\n            try {\n                await smsService.init();\n                if (smsService.isConfigured()) {\n                    // Send SMS notification asynchronously\n                    smsService.sendInvoiceUpdateNotification(updatedInvoice.id)\n                        .then(result => {\n                            if (result.status >= 200 && result.status < 300) {\n                                console.log('SMS update notification sent successfully');\n                            } else {\n                                console.warn('Failed to send SMS update notification:', result.message);\n                            }\n                        })\n                        .catch(error => {\n                            console.error('Error sending SMS update notification:', error);\n                        });\n                }\n            } catch (smsError) {\n                // Log SMS error but don't fail the request\n                console.error('SMS update notification error:', smsError);\n            }\n        }\n\n        // Invalidate related caches after successful update\n        await Promise.all([\n            cacheService.invalidateInvoices(),\n            cacheService.invalidateInventory(),\n            cacheService.del('dashboard:summary') // Invalidate dashboard cache\n        ]);\n\n        return NextResponse.json({\n            success: true,\n            message: 'Invoice updated successfully',\n            data: updatedInvoice\n        });\n    } catch (error) {\n        console.error('Error updating invoice:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating invoice',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        if (!params?.id || isNaN(Number(params.id))) {\n            return NextResponse.json({ error: 'Invalid invoice ID' }, { status: 400 });\n        }\n        const invoiceId = Number(params.id);\n\n        const inventoryUpdatesForEvent: Array<{ productId: number, shopId?: number, quantityChange: number }> = [];\n\n        // Use Prisma transaction to ensure atomicity\n        const deletedInvoiceResult = await prisma.$transaction(async (tx) => {\n            const invoiceToDelete = await tx.invoice.findUnique({\n                where: { id: invoiceId },\n                include: { items: true, customer: true } // Include items for inventory adjustment & customer for context\n            });\n\n            if (!invoiceToDelete) {\n                throw new Error('Invoice not found for deletion');\n            }\n\n            // Adjust inventory for each item deleted from the invoice\n            if (invoiceToDelete.items && invoiceToDelete.items.length > 0) {\n                for (const item of invoiceToDelete.items) {\n                    // Add item quantity back to inventory\n                    // Similar to PUT, we need to determine the shopId if possible.\n                    // If the invoice had a shopId, we assume items are returned to that shop's inventory.\n                    let targetShopId: number | undefined = invoiceToDelete.shopId || undefined;\n\n                    // If no shopId on invoice, this becomes a general increment for the product.\n                    // For more precise shop-specific return, the original shop source of item would be needed.\n                    await tx.inventoryItem.updateMany({\n                        where: {\n                            productId: item.productId,\n                            ...(targetShopId && { shopId: targetShopId }) // Conditionally add shopId to where clause\n                        },\n                        data: { quantity: { increment: item.quantity } }\n                    });\n\n                    inventoryUpdatesForEvent.push({\n                        productId: item.productId,\n                        shopId: targetShopId, // May be undefined\n                        quantityChange: item.quantity, // Positive, as it's being added back\n                    });\n                }\n            }\n\n            // Delete related payments first (if any)\n            await tx.payment.deleteMany({\n                where: { invoiceId: invoiceId }\n            });\n\n            // Delete invoice items\n            await tx.invoiceItem.deleteMany({\n                where: { invoiceId: invoiceId }\n            });\n\n            // Finally, delete the invoice itself\n            await tx.invoice.delete({\n                where: { id: invoiceId }\n            });\n\n            return { id: invoiceId, customerId: invoiceToDelete.customerId, invoiceNumber: invoiceToDelete.invoiceNumber }; // Return some info about the deleted invoice\n        });\n\n        // Real-time updates now handled by polling system\n        console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);\n\n        // Smart cache invalidation - only invalidate what's necessary\n        const invalidationPromises = [\n            // Invalidate invoice-specific caches\n            cacheService.invalidatePattern(`invoices:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('invoices:all:*'),\n            \n            // Invalidate inventory caches for affected shop\n            cacheService.invalidatePattern(`inventory:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('inventory:all:*'),\n            \n            // Use optimized dashboard cache invalidation\n            cacheService.invalidatePattern(`dashboard:optimized:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:optimized:*:all'),\n            \n            // Invalidate legacy dashboard caches\n            cacheService.invalidatePattern(`dashboard:summary:*:shop:${deletedInvoiceResult?.shopId || 'all'}`),\n            cacheService.invalidatePattern('dashboard:summary:*:all')\n        ];\n\n        await Promise.allSettled(invalidationPromises);\n        \n        // Trigger materialized view refresh in background\n        setImmediate(async () => {\n            try {\n                await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/dashboard/optimized`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': request.headers.get('Authorization') || ''\n                    },\n                    body: JSON.stringify({\n                        action: 'invalidate',\n                        shopId: deletedInvoiceResult?.shopId?.toString() || 'all',\n                        type: 'inventory'\n                    })\n                });\n            } catch (error) {\n                console.warn('Failed to trigger optimized dashboard refresh:', error);\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: `Invoice ${deletedInvoiceResult?.invoiceNumber || invoiceId} deleted successfully`,\n            data: { id: deletedInvoiceResult?.id }\n        });\n\n    } catch (error) {\n        console.error('Error deleting invoice:', error);\n        const err = error as Error;\n\n        // Check for foreign key constraint violation with receipts\n        if (err.message && err.message.includes('Receipt_paymentId_fkey')) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Cannot delete invoice with associated receipts. Please delete the receipts first.',\n                    error: err.message\n                },\n                { status: 400 }\n            );\n        }\n\n        return NextResponse.json(\n            { success: false, message: err.message || 'Error deleting invoice', error: err.stack },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "id", "isNaN", "Number", "NextResponse", "json", "error", "status", "invoiceId", "invoice", "prisma", "findUnique", "where", "include", "customer", "shop", "select", "name", "location", "contact_person", "phone", "email", "address_line1", "address_line2", "city", "state", "postal_code", "country", "items", "product", "payments", "receipt", "isNot", "console", "success", "message", "Error", "String", "requestData", "log", "sendSms", "invoiceData", "isOnlyStatusUpdate", "Object", "keys", "length", "undefined", "includes", "updatedInvoice", "update", "data", "Array", "isArray", "inventoryUpdatesForEvent", "$transaction", "tx", "existingInvoice", "oldItemsMap", "Map", "newItemsMap", "item", "existingQuantity", "get", "productId", "set", "quantity", "parseInt", "toString", "allProductIds", "Set", "from", "oldQuantity", "newQuantity", "quantityChange", "affectedShopId", "shopId", "push", "availableInventory", "inventoryItem", "findMany", "totalAvailable", "reduce", "sum", "updateMany", "gte", "decrement", "increment", "Math", "abs", "invoiceItem", "deleteMany", "newCalculatedTotalInvoiceAmount", "newTotalInvoiceProfit", "productIdsForNewItems", "map", "inventoryItems", "in", "shopSpecificCost", "productCostMap", "missingProductIds", "filter", "has", "fallbackProducts", "weightedAverageCost", "forEach", "p", "costPrice", "itemSellingTotal", "price", "totalItemCost", "itemProfit", "create", "total", "profit", "newProfitMargin", "dataToUpdate", "paymentMethod", "invoiceDate", "Date", "dueDate", "notes", "totalProfit", "profitMargin", "customerId", "finalUpdatedInvoice", "txError", "timeout", "smsService", "init", "isConfigured", "sendInvoiceUpdateNotification", "then", "result", "warn", "catch", "smsError", "Promise", "all", "cacheService", "invalidateInvoices", "invalidateInventory", "del", "deletedInvoiceResult", "invoiceToDelete", "targetShopId", "payment", "delete", "invoiceNumber", "invalidationPromises", "invalidatePattern", "allSettled", "setImmediate", "fetch", "process", "env", "NEXT_PUBLIC_APP_URL", "method", "headers", "body", "JSON", "stringify", "action", "type", "err", "stack"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1461c448ef5a7cbade1ca4b4597b69952466ad19"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7f8epg9vf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7f8epg9vf();
cov_7f8epg9vf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[0]++;
  cov_7f8epg9vf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_7f8epg9vf().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[1]++;
    cov_7f8epg9vf().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[2]++;
    cov_7f8epg9vf().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_7f8epg9vf().f[3]++;
    cov_7f8epg9vf().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_7f8epg9vf().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_7f8epg9vf().s[8]++, require("../../../../lib/prisma"));
const _smsService =
/* istanbul ignore next */
(cov_7f8epg9vf().s[9]++, require("../../../../services/smsService"));
const _cache =
/* istanbul ignore next */
(cov_7f8epg9vf().s[10]++, require("../../../../lib/cache"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[4]++;
  cov_7f8epg9vf().s[11]++;
  try {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[1][0]++, !params?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[1][1]++, isNaN(Number(params.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[0][0]++;
      cov_7f8epg9vf().s[13]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[0][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[14]++, Number(params.id));
    // Fetch invoice with all related data
    const invoice =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[15]++, await _prisma.prisma.invoice.findUnique({
      where: {
        id: invoiceId
      },
      include: {
        customer: true,
        shop: {
          select: {
            id: true,
            name: true,
            location: true,
            contact_person: true,
            phone: true,
            email: true,
            address_line1: true,
            address_line2: true,
            city: true,
            state: true,
            postal_code: true,
            country: true
          }
        },
        items: {
          include: {
            product: true
          }
        },
        payments: {
          where: {
            receipt: {
              isNot: null
            }
          },
          include: {
            receipt: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7f8epg9vf().s[16]++;
    if (!invoice) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[2][0]++;
      cov_7f8epg9vf().s[17]++;
      return _server.NextResponse.json({
        error: "Invoice not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[2][1]++;
    }
    cov_7f8epg9vf().s[18]++;
    return _server.NextResponse.json(invoice);
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[19]++;
    console.error("Error fetching invoice:", error);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[20]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching invoice",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[3][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[5]++;
  cov_7f8epg9vf().s[21]++;
  try {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[5][0]++, !params?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[5][1]++, isNaN(Number(params.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[4][0]++;
      cov_7f8epg9vf().s[23]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[4][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[24]++, Number(params.id));
    const requestData =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[25]++, await request.json());
    /* istanbul ignore next */
    cov_7f8epg9vf().s[26]++;
    console.log("Invoice update request data:", {
      invoiceId,
      ...requestData
    });
    const {
      sendSms,
      ...invoiceData
    } =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[27]++, requestData);
    // Check if this is only a status update to "Paid"
    // More specific check: make sure it only has the status field and it's being changed to 'Paid'
    const isOnlyStatusUpdate =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[28]++,
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[6][0]++, Object.keys(invoiceData).length === 1) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[6][1]++, invoiceData.status !== undefined) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[6][2]++, ["Paid", "Pending"].includes(invoiceData.status)));
    // If it's only updating status, handle it without affecting inventory
    /* istanbul ignore next */
    cov_7f8epg9vf().s[29]++;
    if (isOnlyStatusUpdate) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[7][0]++;
      cov_7f8epg9vf().s[30]++;
      console.log(`Processing status-only update to ${invoiceData.status} for invoice ${invoiceId}`);
      const updatedInvoice =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[31]++, await _prisma.prisma.invoice.update({
        where: {
          id: invoiceId
        },
        data: {
          status: invoiceData.status
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          },
          payments: true
        }
      }));
      /* istanbul ignore next */
      cov_7f8epg9vf().s[32]++;
      return _server.NextResponse.json(updatedInvoice);
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[7][1]++;
    }
    // Ensure invoiceData.items is an array, default to empty if not provided or not an array
    cov_7f8epg9vf().s[33]++;
    if (!Array.isArray(invoiceData.items)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[8][0]++;
      cov_7f8epg9vf().s[34]++;
      console.log("invoiceData.items was not an array, defaulting to [] for update.");
      /* istanbul ignore next */
      cov_7f8epg9vf().s[35]++;
      invoiceData.items = [];
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[8][1]++;
    }
    const inventoryUpdatesForEvent =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[36]++, []);
    // Update invoice with transaction to handle items
    const updatedInvoice =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[37]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7f8epg9vf().f[6]++;
      cov_7f8epg9vf().s[38]++;
      try {
        const existingInvoice =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[39]++, await tx.invoice.findUnique({
          where: {
            id: invoiceId
          },
          include: {
            items: true // Keep for inventory adjustment if needed, though items will be replaced
          }
        }));
        /* istanbul ignore next */
        cov_7f8epg9vf().s[40]++;
        if (!existingInvoice) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[9][0]++;
          cov_7f8epg9vf().s[41]++;
          throw new Error("Invoice not found");
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[9][1]++;
        }
        // --- Inventory Adjustment Logic (existing) --- 
        // This logic might need review if items are fully replaced, 
        // as it compares old vs new item quantities. 
        // For profit, we are deleting and re-creating items.
        const oldItemsMap =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[42]++, new Map());
        const newItemsMap =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[43]++, new Map());
        /* istanbul ignore next */
        cov_7f8epg9vf().s[44]++;
        for (const item of existingInvoice.items) {
          const existingQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[45]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[10][0]++, oldItemsMap.get(item.productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[10][1]++, 0));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[46]++;
          oldItemsMap.set(item.productId, existingQuantity + item.quantity);
        }
        /* istanbul ignore next */
        cov_7f8epg9vf().s[47]++;
        for (const item of invoiceData.items) {
          const productId =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[48]++, parseInt(item.productId.toString()));
          const existingQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[49]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[11][0]++, newItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[11][1]++, 0));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[50]++;
          newItemsMap.set(productId, existingQuantity + item.quantity);
        }
        const allProductIds =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[51]++, new Set([...Array.from(oldItemsMap.keys()), ...Array.from(newItemsMap.keys())]));
        /* istanbul ignore next */
        cov_7f8epg9vf().s[52]++;
        console.log("Invoice update - Inventory changes (based on diff):");
        /* istanbul ignore next */
        cov_7f8epg9vf().s[53]++;
        for (const productId of allProductIds) {
          const oldQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[54]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[12][0]++, oldItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[12][1]++, 0));
          const newQuantity =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[55]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[13][0]++, newItemsMap.get(productId)) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[13][1]++, 0));
          const quantityChange =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[56]++, newQuantity - oldQuantity);
          /* istanbul ignore next */
          cov_7f8epg9vf().s[57]++;
          console.log(`Product ID ${productId}: Old=${oldQuantity}, New=${newQuantity}, Change=${quantityChange}`);
          /* istanbul ignore next */
          cov_7f8epg9vf().s[58]++;
          if (quantityChange !== 0) {
            /* istanbul ignore next */
            cov_7f8epg9vf().b[14][0]++;
            // Ensure affectedShopId is a string if invoiceData.shopId is a string
            let affectedShopId =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[59]++, invoiceData.shopId ?
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[15][0]++, String(invoiceData.shopId)) :
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[15][1]++, undefined));
            /* istanbul ignore next */
            cov_7f8epg9vf().s[60]++;
            inventoryUpdatesForEvent.push({
              productId: productId,
              shopId: affectedShopId,
              quantityChange: quantityChange
            });
            /* istanbul ignore next */
            cov_7f8epg9vf().s[61]++;
            if (quantityChange > 0) {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[16][0]++;
              cov_7f8epg9vf().s[62]++;
              if (affectedShopId) {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[17][0]++;
                const availableInventory =
                /* istanbul ignore next */
                (cov_7f8epg9vf().s[63]++, await tx.inventoryItem.findMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId
                  }
                }));
                const totalAvailable =
                /* istanbul ignore next */
                (cov_7f8epg9vf().s[64]++, availableInventory.reduce((sum, item) => {
                  /* istanbul ignore next */
                  cov_7f8epg9vf().f[7]++;
                  cov_7f8epg9vf().s[65]++;
                  return sum + item.quantity;
                }, 0));
                /* istanbul ignore next */
                cov_7f8epg9vf().s[66]++;
                if (totalAvailable < quantityChange) {
                  /* istanbul ignore next */
                  cov_7f8epg9vf().b[18][0]++;
                  cov_7f8epg9vf().s[67]++;
                  throw new Error(`Insufficient inventory for product ID ${productId} in shop ${affectedShopId}. Available: ${totalAvailable}, Required increase: ${quantityChange}`);
                } else
                /* istanbul ignore next */
                {
                  cov_7f8epg9vf().b[18][1]++;
                }
                // This should ideally be a more robust way to pick which inventory item to decrement
                cov_7f8epg9vf().s[68]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId,
                    quantity: {
                      gte: quantityChange
                    }
                  },
                  data: {
                    quantity: {
                      decrement: quantityChange
                    }
                  }
                });
              } else {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[17][1]++;
                cov_7f8epg9vf().s[69]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    quantity: {
                      gte: quantityChange
                    }
                  },
                  data: {
                    quantity: {
                      decrement: quantityChange
                    }
                  }
                });
              }
            } else {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[16][1]++;
              cov_7f8epg9vf().s[70]++;
              if (affectedShopId) {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[19][0]++;
                cov_7f8epg9vf().s[71]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString()),
                    shopId: affectedShopId
                  },
                  data: {
                    quantity: {
                      increment: Math.abs(quantityChange)
                    }
                  }
                });
              } else {
                /* istanbul ignore next */
                cov_7f8epg9vf().b[19][1]++;
                cov_7f8epg9vf().s[72]++;
                await tx.inventoryItem.updateMany({
                  where: {
                    productId: parseInt(productId.toString())
                  },
                  data: {
                    quantity: {
                      increment: Math.abs(quantityChange)
                    }
                  }
                });
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_7f8epg9vf().b[14][1]++;
          }
        }
        // --- End Inventory Adjustment Logic ---
        // Delete old invoice items before adding new ones for profit recalc
        /* istanbul ignore next */
        cov_7f8epg9vf().s[73]++;
        await tx.invoiceItem.deleteMany({
          where: {
            invoiceId: invoiceId
          }
        });
        let newCalculatedTotalInvoiceAmount =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[74]++, 0);
        let newTotalInvoiceProfit =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[75]++, 0);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[76]++;
        if (
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[21][0]++, invoiceData.items) &&
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[21][1]++, Array.isArray(invoiceData.items)) &&
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[21][2]++, invoiceData.items.length > 0)) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[20][0]++;
          const productIdsForNewItems =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[77]++, invoiceData.items.map(item => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[8]++;
            cov_7f8epg9vf().s[78]++;
            return parseInt(item.productId.toString());
          }));
          // Get shop-specific costs for profit calculation instead of global weighted average
          const inventoryItems =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[79]++, await tx.inventoryItem.findMany({
            where: {
              productId: {
                in: productIdsForNewItems
              },
              shopId: invoiceData.shopId
            },
            select: {
              productId: true,
              shopSpecificCost: true
            }
          }));
          // Create a map of productId to shop-specific cost
          const productCostMap =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[80]++, new Map(inventoryItems.map(item => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[9]++;
            cov_7f8epg9vf().s[81]++;
            return [item.productId,
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[22][0]++, item.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[22][1]++, 0)];
          })));
          // For products not found in inventory, fallback to global weighted average
          const missingProductIds =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[82]++, productIdsForNewItems.filter(id => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[10]++;
            cov_7f8epg9vf().s[83]++;
            return !productCostMap.has(id);
          }));
          /* istanbul ignore next */
          cov_7f8epg9vf().s[84]++;
          if (missingProductIds.length > 0) {
            /* istanbul ignore next */
            cov_7f8epg9vf().b[23][0]++;
            const fallbackProducts =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[85]++, await tx.product.findMany({
              where: {
                id: {
                  in: missingProductIds
                }
              },
              select: {
                id: true,
                weightedAverageCost: true
              }
            }));
            /* istanbul ignore next */
            cov_7f8epg9vf().s[86]++;
            fallbackProducts.forEach(p => {
              /* istanbul ignore next */
              cov_7f8epg9vf().f[11]++;
              cov_7f8epg9vf().s[87]++;
              productCostMap.set(p.id,
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[24][0]++, p.weightedAverageCost) ||
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[24][1]++, 0));
            });
          } else
          /* istanbul ignore next */
          {
            cov_7f8epg9vf().b[23][1]++;
          }
          cov_7f8epg9vf().s[88]++;
          for (const item of invoiceData.items) {
            const productId =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[89]++, parseInt(item.productId.toString()));
            const costPrice =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[90]++,
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[25][0]++, productCostMap.get(productId)) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[25][1]++, 0));
            const itemSellingTotal =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[91]++, item.quantity * item.price);
            const totalItemCost =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[92]++, costPrice * item.quantity);
            const itemProfit =
            /* istanbul ignore next */
            (cov_7f8epg9vf().s[93]++, itemSellingTotal - totalItemCost);
            /* istanbul ignore next */
            cov_7f8epg9vf().s[94]++;
            await tx.invoiceItem.create({
              data: {
                invoiceId: invoiceId,
                productId: productId,
                quantity: item.quantity,
                price: item.price,
                total: itemSellingTotal,
                costPrice: costPrice,
                profit: itemProfit
              }
            });
            /* istanbul ignore next */
            cov_7f8epg9vf().s[95]++;
            newCalculatedTotalInvoiceAmount += itemSellingTotal;
            /* istanbul ignore next */
            cov_7f8epg9vf().s[96]++;
            newTotalInvoiceProfit += itemProfit;
          }
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[20][1]++;
        }
        const newProfitMargin =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[97]++, newCalculatedTotalInvoiceAmount > 0 ?
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[26][0]++, newTotalInvoiceProfit / newCalculatedTotalInvoiceAmount * 100) :
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[26][1]++, 0));
        const dataToUpdate =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[98]++, {
          status: invoiceData.status,
          paymentMethod: invoiceData.paymentMethod,
          invoiceDate: invoiceData.invoiceDate ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[27][0]++, new Date(invoiceData.invoiceDate)) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[27][1]++, undefined),
          dueDate: invoiceData.dueDate ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[28][0]++, new Date(invoiceData.dueDate)) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[28][1]++, undefined),
          notes: invoiceData.notes,
          shopId: invoiceData.shopId ?
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[29][0]++, String(invoiceData.shopId)) :
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[29][1]++, null),
          total: newCalculatedTotalInvoiceAmount,
          totalProfit: newTotalInvoiceProfit,
          profitMargin: newProfitMargin // Updated profit margin
        });
        /* istanbul ignore next */
        cov_7f8epg9vf().s[99]++;
        if (invoiceData.customerId) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[30][0]++;
          cov_7f8epg9vf().s[100]++;
          dataToUpdate.customerId = invoiceData.customerId;
        } else {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[30][1]++;
        } // If customerId is explicitly null or undefined, disconnect it if your schema allows
        // dataToUpdate.customer = { disconnect: true }; 
        // Or ensure it's set to null if the field is optional and you want to clear it.
        // For now, we assume if not provided, it's not changed or handled by frontend state.
        /* istanbul ignore next */
        cov_7f8epg9vf().s[101]++;
        console.log("Updating invoice details with profit:", {
          invoiceId,
          dataToUpdate
        });
        const finalUpdatedInvoice =
        /* istanbul ignore next */
        (cov_7f8epg9vf().s[102]++, await tx.invoice.update({
          where: {
            id: invoiceId
          },
          data: dataToUpdate,
          include: {
            customer: true,
            items: {
              include: {
                product: true
              }
            },
            payments: true
          }
        }));
        // Handle cash payment method
        // Removed automatic payment creation/update for cash invoices
        // Users will manually record payments when they actually receive them
        /* istanbul ignore next */
        cov_7f8epg9vf().s[103]++;
        return finalUpdatedInvoice;
      } catch (txError) {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[104]++;
        console.error("Transaction error:", txError);
        /* istanbul ignore next */
        cov_7f8epg9vf().s[105]++;
        throw txError;
      }
    }, {
      timeout: 30000
    }));
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_7f8epg9vf().s[106]++;
    if (inventoryUpdatesForEvent.length > 0) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[31][0]++;
      cov_7f8epg9vf().s[107]++;
      console.log(`${inventoryUpdatesForEvent.length} inventory updates processed for updated invoice ${invoiceId}`);
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[31][1]++;
    }
    // Send SMS notification if requested
    cov_7f8epg9vf().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[33][0]++, sendSms) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[33][1]++, updatedInvoice)) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[32][0]++;
      cov_7f8epg9vf().s[109]++;
      try {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[110]++;
        await _smsService.smsService.init();
        /* istanbul ignore next */
        cov_7f8epg9vf().s[111]++;
        if (_smsService.smsService.isConfigured()) {
          /* istanbul ignore next */
          cov_7f8epg9vf().b[34][0]++;
          cov_7f8epg9vf().s[112]++;
          // Send SMS notification asynchronously
          _smsService.smsService.sendInvoiceUpdateNotification(updatedInvoice.id).then(result => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[12]++;
            cov_7f8epg9vf().s[113]++;
            if (
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[36][0]++, result.status >= 200) &&
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[36][1]++, result.status < 300)) {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[35][0]++;
              cov_7f8epg9vf().s[114]++;
              console.log("SMS update notification sent successfully");
            } else {
              /* istanbul ignore next */
              cov_7f8epg9vf().b[35][1]++;
              cov_7f8epg9vf().s[115]++;
              console.warn("Failed to send SMS update notification:", result.message);
            }
          }).catch(error => {
            /* istanbul ignore next */
            cov_7f8epg9vf().f[13]++;
            cov_7f8epg9vf().s[116]++;
            console.error("Error sending SMS update notification:", error);
          });
        } else
        /* istanbul ignore next */
        {
          cov_7f8epg9vf().b[34][1]++;
        }
      } catch (smsError) {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[117]++;
        // Log SMS error but don't fail the request
        console.error("SMS update notification error:", smsError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[32][1]++;
    }
    // Invalidate related caches after successful update
    cov_7f8epg9vf().s[118]++;
    await Promise.all([_cache.cacheService.invalidateInvoices(), _cache.cacheService.invalidateInventory(), _cache.cacheService.del("dashboard:summary") // Invalidate dashboard cache
    ]);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[119]++;
    return _server.NextResponse.json({
      success: true,
      message: "Invoice updated successfully",
      data: updatedInvoice
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[120]++;
    console.error("Error updating invoice:", error);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[121]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating invoice",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[37][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8epg9vf().f[14]++;
  cov_7f8epg9vf().s[122]++;
  try {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[123]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[39][0]++, !params?.id) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[39][1]++, isNaN(Number(params.id)))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[38][0]++;
      cov_7f8epg9vf().s[124]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[38][1]++;
    }
    const invoiceId =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[125]++, Number(params.id));
    const inventoryUpdatesForEvent =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[126]++, []);
    // Use Prisma transaction to ensure atomicity
    const deletedInvoiceResult =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[127]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7f8epg9vf().f[15]++;
      const invoiceToDelete =
      /* istanbul ignore next */
      (cov_7f8epg9vf().s[128]++, await tx.invoice.findUnique({
        where: {
          id: invoiceId
        },
        include: {
          items: true,
          customer: true
        } // Include items for inventory adjustment & customer for context
      }));
      /* istanbul ignore next */
      cov_7f8epg9vf().s[129]++;
      if (!invoiceToDelete) {
        /* istanbul ignore next */
        cov_7f8epg9vf().b[40][0]++;
        cov_7f8epg9vf().s[130]++;
        throw new Error("Invoice not found for deletion");
      } else
      /* istanbul ignore next */
      {
        cov_7f8epg9vf().b[40][1]++;
      }
      // Adjust inventory for each item deleted from the invoice
      cov_7f8epg9vf().s[131]++;
      if (
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[42][0]++, invoiceToDelete.items) &&
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[42][1]++, invoiceToDelete.items.length > 0)) {
        /* istanbul ignore next */
        cov_7f8epg9vf().b[41][0]++;
        cov_7f8epg9vf().s[132]++;
        for (const item of invoiceToDelete.items) {
          // Add item quantity back to inventory
          // Similar to PUT, we need to determine the shopId if possible.
          // If the invoice had a shopId, we assume items are returned to that shop's inventory.
          let targetShopId =
          /* istanbul ignore next */
          (cov_7f8epg9vf().s[133]++,
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[43][0]++, invoiceToDelete.shopId) ||
          /* istanbul ignore next */
          (cov_7f8epg9vf().b[43][1]++, undefined));
          // If no shopId on invoice, this becomes a general increment for the product.
          // For more precise shop-specific return, the original shop source of item would be needed.
          /* istanbul ignore next */
          cov_7f8epg9vf().s[134]++;
          await tx.inventoryItem.updateMany({
            where: {
              productId: item.productId,
              ...(
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[44][0]++, targetShopId) &&
              /* istanbul ignore next */
              (cov_7f8epg9vf().b[44][1]++, {
                shopId: targetShopId
              })) // Conditionally add shopId to where clause
            },
            data: {
              quantity: {
                increment: item.quantity
              }
            }
          });
          /* istanbul ignore next */
          cov_7f8epg9vf().s[135]++;
          inventoryUpdatesForEvent.push({
            productId: item.productId,
            shopId: targetShopId,
            quantityChange: item.quantity
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_7f8epg9vf().b[41][1]++;
      }
      // Delete related payments first (if any)
      cov_7f8epg9vf().s[136]++;
      await tx.payment.deleteMany({
        where: {
          invoiceId: invoiceId
        }
      });
      // Delete invoice items
      /* istanbul ignore next */
      cov_7f8epg9vf().s[137]++;
      await tx.invoiceItem.deleteMany({
        where: {
          invoiceId: invoiceId
        }
      });
      // Finally, delete the invoice itself
      /* istanbul ignore next */
      cov_7f8epg9vf().s[138]++;
      await tx.invoice.delete({
        where: {
          id: invoiceId
        }
      });
      /* istanbul ignore next */
      cov_7f8epg9vf().s[139]++;
      return {
        id: invoiceId,
        customerId: invoiceToDelete.customerId,
        invoiceNumber: invoiceToDelete.invoiceNumber
      }; // Return some info about the deleted invoice
    }));
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_7f8epg9vf().s[140]++;
    console.log(`Invoice ${deletedInvoiceResult.id} deleted successfully`);
    // Smart cache invalidation - only invalidate what's necessary
    const invalidationPromises =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[141]++, [
    // Invalidate invoice-specific caches
    _cache.cacheService.invalidatePattern(`invoices:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[45][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[45][1]++, "all")}`), _cache.cacheService.invalidatePattern("invoices:all:*"),
    // Invalidate inventory caches for affected shop
    _cache.cacheService.invalidatePattern(`inventory:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[46][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[46][1]++, "all")}`), _cache.cacheService.invalidatePattern("inventory:all:*"),
    // Use optimized dashboard cache invalidation
    _cache.cacheService.invalidatePattern(`dashboard:optimized:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[47][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[47][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:optimized:*:all"),
    // Invalidate legacy dashboard caches
    _cache.cacheService.invalidatePattern(`dashboard:summary:*:shop:${
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[48][0]++, deletedInvoiceResult?.shopId) ||
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[48][1]++, "all")}`), _cache.cacheService.invalidatePattern("dashboard:summary:*:all")]);
    /* istanbul ignore next */
    cov_7f8epg9vf().s[142]++;
    await Promise.allSettled(invalidationPromises);
    // Trigger materialized view refresh in background
    /* istanbul ignore next */
    cov_7f8epg9vf().s[143]++;
    setImmediate(async () => {
      /* istanbul ignore next */
      cov_7f8epg9vf().f[16]++;
      cov_7f8epg9vf().s[144]++;
      try {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[145]++;
        await fetch(`${
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[49][0]++, process.env.NEXT_PUBLIC_APP_URL) ||
        /* istanbul ignore next */
        (cov_7f8epg9vf().b[49][1]++, "http://localhost:3000")}/api/dashboard/optimized`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization":
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[50][0]++, request.headers.get("Authorization")) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[50][1]++, "")
          },
          body: JSON.stringify({
            action: "invalidate",
            shopId:
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[51][0]++, deletedInvoiceResult?.shopId?.toString()) ||
            /* istanbul ignore next */
            (cov_7f8epg9vf().b[51][1]++, "all"),
            type: "inventory"
          })
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_7f8epg9vf().s[146]++;
        console.warn("Failed to trigger optimized dashboard refresh:", error);
      }
    });
    /* istanbul ignore next */
    cov_7f8epg9vf().s[147]++;
    return _server.NextResponse.json({
      success: true,
      message: `Invoice ${
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[52][0]++, deletedInvoiceResult?.invoiceNumber) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[52][1]++, invoiceId)} deleted successfully`,
      data: {
        id: deletedInvoiceResult?.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8epg9vf().s[148]++;
    console.error("Error deleting invoice:", error);
    const err =
    /* istanbul ignore next */
    (cov_7f8epg9vf().s[149]++, error);
    // Check for foreign key constraint violation with receipts
    /* istanbul ignore next */
    cov_7f8epg9vf().s[150]++;
    if (
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[54][0]++, err.message) &&
    /* istanbul ignore next */
    (cov_7f8epg9vf().b[54][1]++, err.message.includes("Receipt_paymentId_fkey"))) {
      /* istanbul ignore next */
      cov_7f8epg9vf().b[53][0]++;
      cov_7f8epg9vf().s[151]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete invoice with associated receipts. Please delete the receipts first.",
        error: err.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8epg9vf().b[53][1]++;
    }
    cov_7f8epg9vf().s[152]++;
    return _server.NextResponse.json({
      success: false,
      message:
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[55][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_7f8epg9vf().b[55][1]++, "Error deleting invoice"),
      error: err.stack
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,