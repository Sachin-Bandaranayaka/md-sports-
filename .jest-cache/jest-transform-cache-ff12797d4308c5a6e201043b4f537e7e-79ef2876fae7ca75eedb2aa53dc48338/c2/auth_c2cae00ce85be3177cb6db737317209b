a10d8ac066148abbb1a0c0d3347e9977
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    authOptions: function() {
        return authOptions;
    },
    extractToken: function() {
        return extractToken;
    },
    getShopIdFromToken: function() {
        return getShopIdFromToken;
    },
    getUserIdFromToken: function() {
        return getUserIdFromToken;
    },
    validateTokenPermission: function() {
        return validateTokenPermission;
    },
    verifyToken: function() {
        return verifyToken;
    }
});
const _jose = /*#__PURE__*/ _interop_require_wildcard(require("jose"));
const _prisma = /*#__PURE__*/ _interop_require_default(require("./prisma"));
const _permissions = require("./utils/permissions");
const _credentials = /*#__PURE__*/ _interop_require_default(require("next-auth/providers/credentials"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const JWT_SECRET = process.env.JWT_SECRET || "default-secret-key-for-development";
const NEXTAUTH_SECRET = process.env.NEXTAUTH_SECRET || process.env.JWT_SECRET || "default-secret-key-for-development";
const secretKey = new TextEncoder().encode(JWT_SECRET);
const authOptions = {
    secret: NEXTAUTH_SECRET,
    providers: [
        (0, _credentials.default)({
            name: "credentials",
            credentials: {
                email: {
                    label: "Email",
                    type: "email"
                },
                password: {
                    label: "Password",
                    type: "password"
                }
            },
            async authorize (_credentials) {
                // This is a placeholder - the actual authentication is handled by custom API routes
                // NextAuth.js requires a provider to be configured even if we're using custom auth
                return null;
            }
        })
    ],
    session: {
        strategy: "jwt",
        maxAge: 24 * 60 * 60
    },
    callbacks: {
        async jwt ({ token, user }) {
            if (user) {
                token.id = user.id;
                token.permissions = user.permissions;
            }
            return token;
        },
        async session ({ session, token }) {
            if (token && session.user) {
                session.user.id = token.id;
                session.user.permissions = token.permissions;
            }
            return session;
        }
    }
};
const verifyToken = async (token)=>{
    try {
        const { payload } = await _jose.jwtVerify(token, secretKey, {
        });
        return payload;
    } catch (error) {
        if (error.code === "ERR_JWT_EXPIRED") {
            console.error("Token expired:", error.message);
        } else if (error.code === "ERR_JWS_INVALID" || error.code === "ERR_JWS_SIGNATURE_VERIFICATION_FAILED" || error.code === "ERR_JWT_CLAIM_VALIDATION_FAILED") {
            console.error("Invalid token:", error.message);
        } else {
            console.error("Token verification error:", error.message);
        }
        return null;
    }
};
const extractToken = (req)=>{
    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return null;
    }
    return authHeader.split(" ")[1];
};
const validateTokenPermission = async (req, permission)=>{
    try {
        const token = extractToken(req);
        console.log(`Checking permission "${permission}" with token: ${token ? `${token.substring(0, 10)}...` : "none"}`);
        if (!token) {
            console.error("No token provided when checking permission:", permission);
            return {
                isValid: false,
                message: "Authentication required"
            };
        }
        // Special case for development token
        if (token === "dev-token") {
            console.log(`Development mode: granting permission '${permission}'`);
            return {
                isValid: true
            };
        }
        const payload = await verifyToken(token);
        console.log("Token payload:", payload);
        if (!payload || typeof payload !== "object" || !("sub" in payload)) {
            console.error("Invalid token payload when checking permission:", permission);
            return {
                isValid: false,
                message: "Invalid authentication token"
            };
        }
        const userId = payload.sub;
        // Check if permission is in the token payload directly
        if (payload.permissions && Array.isArray(payload.permissions)) {
            const hasPermission = (0, _permissions.hasPermission)(payload.permissions, permission);
            console.log(`Permission check from token for "${permission}": ${hasPermission ? "GRANTED" : "DENIED"}`);
            if (hasPermission) {
                return {
                    isValid: true
                };
            }
        }
        // If not in token or as fallback, get user with permissions from database
        const user = await _prisma.default.user.findUnique({
            where: {
                id: userId
            }
        });
        if (!user) {
            console.error(`User not found for ID: ${userId}`);
            return {
                isValid: false,
                message: "User not found"
            };
        }
        if (!user.permissions || !Array.isArray(user.permissions)) {
            console.error(`User ${userId} has no permissions array`);
            return {
                isValid: false,
                message: "User has no permissions"
            };
        }
        // Check if user has the required permission
        console.log(`User ${userId} permissions:`, user.permissions);
        const hasPermission = (0, _permissions.hasPermission)(user.permissions, permission);
        console.log(`Permission check result for "${permission}": ${hasPermission ? "GRANTED" : "DENIED"}`);
        return {
            isValid: hasPermission,
            message: hasPermission ? undefined : `Permission denied: '${permission}' is required`
        };
    } catch (error) {
        console.error(`Error checking permission ${permission}:`, error);
        return {
            isValid: false,
            message: `Error checking permission: ${error instanceof Error ? error.message : String(error)}`
        };
    }
};
const getUserIdFromToken = async (req)=>{
    const token = extractToken(req);
    if (!token) {
        return null;
    }
    // Special case for development token
    if (token === "dev-token") {
        return "4447d3a9-595b-483e-b55a-38f0f6160121"; // Admin user ID for development
    }
    const payload = await verifyToken(token);
    if (!payload || typeof payload !== "object" || !("sub" in payload)) {
        return null;
    }
    return payload.sub;
};
const getShopIdFromToken = async (req)=>{
    const token = extractToken(req);
    if (!token) {
        return null;
    }
    // Special case for development token - assign to first shop for testing shop staff behavior
    if (token === "dev-token") {
        return "cmbtr9q6l000061romoxi7uvf"; // Assign dev-token to first shop from database
    }
    const payload = await verifyToken(token);
    if (!payload || typeof payload !== "object" || !("shopId" in payload)) {
        return null;
    }
    return payload.shopId;
};

//# sourceMappingURL=data:application/json;base64,