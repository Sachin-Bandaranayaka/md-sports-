{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: number;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: number;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: number;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: number;\n  deletedByUser?: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: number,\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId,\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || item.userId!,\n          deletedByUser: undefined, // We'll need to fetch this separately if needed\n          canRecover: details?.canRecover || false,\n        };\n      });\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId,\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              amount: originalData.amount,\n              paymentId: originalData.paymentId,\n              issuedAt: originalData.issuedAt,\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20\n  ): Promise<AuditLogEntry[]> {\n    const entries = await this.prisma.auditLog.findMany({\n      where: {\n        entity,\n        entityId,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    await this.prisma.auditLog.updateMany({\n      where: {\n        id: { in: auditLogIds },\n        isDeleted: true,\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],"names":["AuditService","auditService","prisma","getInstance","instance","logAction","entry","details","originalData","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","auditLog","create","data","userId","action","entity","entityId","error","console","softDelete","Date","type","recoverable","getRecycleBinItems","limit","offset","where","items","total","Promise","all","findMany","orderBy","createdAt","take","skip","count","recycleBinItems","filter","item","map","id","deletedByUser","undefined","recoverItem","auditLogId","auditEntry","findUnique","success","message","restoredData","restoreEntityData","updatedDetails","update","originalAuditLogId","recoveredData","toLowerCase","product","name","description","price","cost","sku","barcode","categoryId","supplierId","minStockLevel","maxStockLevel","unit","weight","dimensions","isActive","customer","email","phone","address","city","postalCode","country","taxNumber","creditLimit","paymentTerms","supplier","category","receipt","receiptNumber","amount","paymentId","issuedAt","notes","Error","getEntityHistory","entries","include","user","select","recoveredByUser","permanentlyDelete","auditLogIds","updateMany","in","cleanupOldDeletedItems","daysOld","cutoffDate","setDate","getDate","result","lt","getDeletedEntityIds","deletedEntries","deletedIds"],"mappings":"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"}