cf3eabf756e27a8e4c9451e71a000356
"use strict";

/* istanbul ignore next */
function cov_22fgou357z() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts";
  var hash = "3c37b3ce71be016231a8549ed98f27acd175a572";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "12": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 45
        }
      },
      "15": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "16": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 45
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "19": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "20": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "22": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "23": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "24": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 80,
          column: 58
        }
      },
      "25": {
        start: {
          line: 54,
          column: 55
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "26": {
        start: {
          line: 82,
          column: 17
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "27": {
        start: {
          line: 82,
          column: 44
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "28": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 93,
          column: 6
        }
      },
      "29": {
        start: {
          line: 97,
          column: 24
        },
        end: {
          line: 97,
          column: 26
        }
      },
      "30": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "31": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "32": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "33": {
        start: {
          line: 111,
          column: 26
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "34": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 60
        }
      },
      "35": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "36": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "37": {
        start: {
          line: 119,
          column: 22
        },
        end: {
          line: 145,
          column: 49
        }
      },
      "38": {
        start: {
          line: 119,
          column: 55
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "39": {
        start: {
          line: 147,
          column: 17
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "40": {
        start: {
          line: 147,
          column: 44
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "41": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 158,
          column: 6
        }
      },
      "42": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 245,
          column: 2
        }
      },
      "43": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "44": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 94
        }
      },
      "45": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "46": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "47": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 172,
          column: 53
        }
      },
      "48": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "49": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 174,
          column: 64
        }
      },
      "50": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 131
        }
      },
      "51": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 36
        }
      },
      "52": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 66
        }
      },
      "53": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 39
        }
      },
      "54": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "55": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 62
        }
      },
      "56": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "57": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "58": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 65
        }
      },
      "59": {
        start: {
          line: 199,
          column: 23
        },
        end: {
          line: 199,
          column: 67
        }
      },
      "60": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "61": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "62": {
        start: {
          line: 214,
          column: 29
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "63": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 34
        }
      },
      "64": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 67
        }
      },
      "65": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 37
        }
      },
      "66": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 72
        }
      },
      "67": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 55
        }
      },
      "68": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 63
        }
      },
      "69": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "fetchTransfersDataFiltered",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 41
          }
        },
        loc: {
          start: {
            line: 27,
            column: 70
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 51
          },
          end: {
            line: 54,
            column: 52
          }
        },
        loc: {
          start: {
            line: 54,
            column: 55
          },
          end: {
            line: 80,
            column: 10
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 32
          }
        },
        loc: {
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 89,
            column: 9
          }
        },
        line: 82
      },
      "7": {
        name: "fetchTransfersData",
        decl: {
          start: {
            line: 95,
            column: 15
          },
          end: {
            line: 95,
            column: 33
          }
        },
        loc: {
          start: {
            line: 95,
            column: 74
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 119,
            column: 51
          },
          end: {
            line: 119,
            column: 52
          }
        },
        loc: {
          start: {
            line: 119,
            column: 55
          },
          end: {
            line: 145,
            column: 10
          }
        },
        line: 119
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 31
          },
          end: {
            line: 147,
            column: 32
          }
        },
        loc: {
          start: {
            line: 147,
            column: 44
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 160,
            column: 61
          },
          end: {
            line: 160,
            column: 62
          }
        },
        loc: {
          start: {
            line: 160,
            column: 87
          },
          end: {
            line: 245,
            column: 1
          }
        },
        line: 160
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 57
          },
          end: {
            line: 75,
            column: 68
          }
        }, {
          start: {
            line: 75,
            column: 71
          },
          end: {
            line: 75,
            column: 80
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 140,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 57
          },
          end: {
            line: 140,
            column: 68
          }
        }, {
          start: {
            line: 140,
            column: 71
          },
          end: {
            line: 140,
            column: 80
          }
        }],
        line: 140
      },
      "8": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "9": {
        loc: {
          start: {
            line: 174,
            column: 27
          },
          end: {
            line: 174,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 36
          },
          end: {
            line: 174,
            column: 52
          }
        }, {
          start: {
            line: 174,
            column: 55
          },
          end: {
            line: 174,
            column: 64
          }
        }],
        line: 174
      },
      "10": {
        loc: {
          start: {
            line: 176,
            column: 48
          },
          end: {
            line: 176,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 69
          },
          end: {
            line: 176,
            column: 83
          }
        }, {
          start: {
            line: 176,
            column: 86
          },
          end: {
            line: 176,
            column: 91
          }
        }],
        line: 176
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 94
          },
          end: {
            line: 176,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 107
          },
          end: {
            line: 176,
            column: 124
          }
        }, {
          start: {
            line: 176,
            column: 127
          },
          end: {
            line: 176,
            column: 129
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "13": {
        loc: {
          start: {
            line: 197,
            column: 23
          },
          end: {
            line: 197,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 44
          },
          end: {
            line: 197,
            column: 58
          }
        }, {
          start: {
            line: 197,
            column: 61
          },
          end: {
            line: 197,
            column: 65
          }
        }],
        line: 197
      },
      "14": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "15": {
        loc: {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 235,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 44
          },
          end: {
            line: 235,
            column: 57
          }
        }, {
          start: {
            line: 235,
            column: 60
          },
          end: {
            line: 235,
            column: 73
          }
        }],
        line: 235
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/transfers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Filtered version of fetchTransfersData with date range support\nexport async function fetchTransfersDataFiltered(startDate?: string | null, endDate?: string | null, shopId?: string | null) {\n    // Build date filter\n    const dateFilter: any = {};\n    if (startDate) {\n        dateFilter.gte = new Date(startDate);\n    }\n    if (endDate) {\n        const endDateTime = new Date(endDate);\n        endDateTime.setHours(23, 59, 59, 999);\n        dateFilter.lte = endDateTime;\n    }\n\n    // Build where clause with date and shop filtering\n    const whereClause: any = {};\n    if (Object.keys(dateFilter).length > 0) {\n        whereClause.createdAt = dateFilter;\n    }\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n\n    // Fetch inventory transfers with date and shop filtering\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true }\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 10 // Show more transfers when filtering by date\n        }),\n        [],\n        'Failed to fetch filtered transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport async function fetchTransfersData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    // Build where clause for shop and date filtering\n    const whereClause: any = {};\n    \n    // Add shop filtering\n    if (shopId) {\n        whereClause.OR = [\n            { fromShopId: shopId },\n            { toShopId: shopId }\n        ];\n    }\n    \n    // Add date filtering based on period\n    if (periodDays) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - periodDays);\n        startDate.setHours(0, 0, 0, 0);\n        \n        whereClause.createdAt = {\n            gte: startDate\n        };\n    }\n\n    // Fetch recent inventory transfers using Prisma\n    const transfers = await safeQuery(\n        () => prisma.inventoryTransfer.findMany({\n            select: {\n                id: true,\n                status: true,\n                createdAt: true,\n                fromShop: {\n                    select: { name: true }\n                },\n                toShop: {\n                    select: { name: true }\n                },\n                transferItems: {\n                    select: { id: true } // Selecting id to count items\n                }\n            },\n            where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 5 // Limit to 5 most recent transfers\n        }),\n        [], // Empty array fallback\n        'Failed to fetch transfers data'\n    );\n\n    // Format the data for the frontend\n    const data = transfers.map(transfer => ({\n        id: `TR-${String(transfer.id).padStart(3, '0')}`,\n        source: transfer.fromShop.name,\n        destination: transfer.toShop.name,\n        status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),\n        date: transfer.createdAt.toISOString().split('T')[0],\n        items: transfer.transferItems.length\n    }));\n\n    return {\n        success: true,\n        data\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_transfers');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get query parameters\n        const { searchParams } = new URL(request.url);\n        const period = searchParams.get('period');\n        const periodDays = period ? parseInt(period) : undefined;\n\n        // Check cache first with shop context and period\n        const cacheKey = `dashboard:transfers:${context.isFiltered ? context.shopId : 'all'}${periodDays ? `:${periodDays}d` : ''}`;\n        console.time('cache check');\n        const cachedData = await cacheService.get(cacheKey);\n        console.timeEnd('cache check');\n\n        if (cachedData) {\n            console.log('\u2705 Transfers data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    period: periodDays,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh transfers data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            period: periodDays\n        });\n\n        const shopId = context.isFiltered ? context.shopId : null;\n\n        // Fetch transfers data with period filtering\n        const result = await fetchTransfersData(shopId, periodDays);\n\n        if (!result.success) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Failed to fetch transfers data',\n                    data: [],\n                    meta: {\n                        shopFiltered: context.isFiltered,\n                        shopId: context.shopId,\n                        period: periodDays\n                    }\n                },\n                { status: 500 }\n            );\n        }\n\n        const responseData = {\n            success: true,\n            data: result.data,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                period: periodDays,\n                fromCache: false\n            }\n        };\n\n        // Cache the response for 2 minutes\n        console.time('cache set');\n        await cacheService.set(cacheKey, responseData, 120);\n        console.timeEnd('cache set');\n        console.log('\uD83D\uDCBE Transfers data cached for 2 minutes');\n\n        return NextResponse.json(responseData);\n\n    } catch (error) {\n        console.error('Error fetching transfers data:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to load transfers data',\n                error: error instanceof Error ? error.message : String(error),\n                data: [], // Return empty array on error\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            },\n            { status: 500 }\n        );\n    }\n});"],
      names: ["GET", "fetchTransfersData", "fetchTransfersDataFiltered", "startDate", "endDate", "shopId", "dateFilter", "gte", "Date", "endDateTime", "setHours", "lte", "whereClause", "Object", "keys", "length", "createdAt", "OR", "fromShopId", "toShopId", "transfers", "safeQuery", "prisma", "inventoryTransfer", "findMany", "select", "id", "status", "fromShop", "name", "toShop", "transferItems", "where", "undefined", "orderBy", "take", "data", "map", "transfer", "String", "padStart", "source", "destination", "charAt", "toUpperCase", "slice", "date", "toISOString", "split", "items", "success", "periodDays", "setDate", "getDate", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "searchParams", "URL", "url", "period", "get", "parseInt", "cacheKey", "isFiltered", "console", "time", "cachedData", "cacheService", "timeEnd", "log", "meta", "shopFiltered", "fromCache", "result", "responseData", "set", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c37b3ce71be016231a8549ed98f27acd175a572"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22fgou357z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22fgou357z();
cov_22fgou357z().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_22fgou357z().f[0]++;
  cov_22fgou357z().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_22fgou357z().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_22fgou357z().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[1]++;
    cov_22fgou357z().s[4]++;
    return GET;
  },
  fetchTransfersData: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[2]++;
    cov_22fgou357z().s[5]++;
    return fetchTransfersData;
  },
  fetchTransfersDataFiltered: function () {
    /* istanbul ignore next */
    cov_22fgou357z().f[3]++;
    cov_22fgou357z().s[6]++;
    return fetchTransfersDataFiltered;
  }
});
const _server =
/* istanbul ignore next */
(cov_22fgou357z().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_22fgou357z().s[8]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_22fgou357z().s[9]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_22fgou357z().s[10]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_22fgou357z().s[11]++, require("../../../../lib/auth"));
async function fetchTransfersDataFiltered(startDate, endDate, shopId) {
  /* istanbul ignore next */
  cov_22fgou357z().f[4]++;
  // Build date filter
  const dateFilter =
  /* istanbul ignore next */
  (cov_22fgou357z().s[12]++, {});
  /* istanbul ignore next */
  cov_22fgou357z().s[13]++;
  if (startDate) {
    /* istanbul ignore next */
    cov_22fgou357z().b[0][0]++;
    cov_22fgou357z().s[14]++;
    dateFilter.gte = new Date(startDate);
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[0][1]++;
  }
  cov_22fgou357z().s[15]++;
  if (endDate) {
    /* istanbul ignore next */
    cov_22fgou357z().b[1][0]++;
    const endDateTime =
    /* istanbul ignore next */
    (cov_22fgou357z().s[16]++, new Date(endDate));
    /* istanbul ignore next */
    cov_22fgou357z().s[17]++;
    endDateTime.setHours(23, 59, 59, 999);
    /* istanbul ignore next */
    cov_22fgou357z().s[18]++;
    dateFilter.lte = endDateTime;
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[1][1]++;
  }
  // Build where clause with date and shop filtering
  const whereClause =
  /* istanbul ignore next */
  (cov_22fgou357z().s[19]++, {});
  /* istanbul ignore next */
  cov_22fgou357z().s[20]++;
  if (Object.keys(dateFilter).length > 0) {
    /* istanbul ignore next */
    cov_22fgou357z().b[2][0]++;
    cov_22fgou357z().s[21]++;
    whereClause.createdAt = dateFilter;
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[2][1]++;
  }
  cov_22fgou357z().s[22]++;
  if (shopId) {
    /* istanbul ignore next */
    cov_22fgou357z().b[3][0]++;
    cov_22fgou357z().s[23]++;
    whereClause.OR = [{
      fromShopId: shopId
    }, {
      toShopId: shopId
    }];
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[3][1]++;
  }
  // Fetch inventory transfers with date and shop filtering
  const transfers =
  /* istanbul ignore next */
  (cov_22fgou357z().s[24]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_22fgou357z().f[5]++;
    cov_22fgou357z().s[25]++;
    return _prisma.prisma.inventoryTransfer.findMany({
      select: {
        id: true,
        status: true,
        createdAt: true,
        fromShop: {
          select: {
            name: true
          }
        },
        toShop: {
          select: {
            name: true
          }
        },
        transferItems: {
          select: {
            id: true
          }
        }
      },
      where: Object.keys(whereClause).length > 0 ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[4][0]++, whereClause) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[4][1]++, undefined),
      orderBy: {
        createdAt: "desc"
      },
      take: 10 // Show more transfers when filtering by date
    });
  }, [], "Failed to fetch filtered transfers data"));
  // Format the data for the frontend
  const data =
  /* istanbul ignore next */
  (cov_22fgou357z().s[26]++, transfers.map(transfer => {
    /* istanbul ignore next */
    cov_22fgou357z().f[6]++;
    cov_22fgou357z().s[27]++;
    return {
      id: `TR-${String(transfer.id).padStart(3, "0")}`,
      source: transfer.fromShop.name,
      destination: transfer.toShop.name,
      status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),
      date: transfer.createdAt.toISOString().split("T")[0],
      items: transfer.transferItems.length
    };
  }));
  /* istanbul ignore next */
  cov_22fgou357z().s[28]++;
  return {
    success: true,
    data
  };
}
async function fetchTransfersData(shopId, periodDays, startDate, endDate) {
  /* istanbul ignore next */
  cov_22fgou357z().f[7]++;
  // Build where clause for shop and date filtering
  const whereClause =
  /* istanbul ignore next */
  (cov_22fgou357z().s[29]++, {});
  // Add shop filtering
  /* istanbul ignore next */
  cov_22fgou357z().s[30]++;
  if (shopId) {
    /* istanbul ignore next */
    cov_22fgou357z().b[5][0]++;
    cov_22fgou357z().s[31]++;
    whereClause.OR = [{
      fromShopId: shopId
    }, {
      toShopId: shopId
    }];
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[5][1]++;
  }
  // Add date filtering based on period
  cov_22fgou357z().s[32]++;
  if (periodDays) {
    /* istanbul ignore next */
    cov_22fgou357z().b[6][0]++;
    const startDate =
    /* istanbul ignore next */
    (cov_22fgou357z().s[33]++, new Date());
    /* istanbul ignore next */
    cov_22fgou357z().s[34]++;
    startDate.setDate(startDate.getDate() - periodDays);
    /* istanbul ignore next */
    cov_22fgou357z().s[35]++;
    startDate.setHours(0, 0, 0, 0);
    /* istanbul ignore next */
    cov_22fgou357z().s[36]++;
    whereClause.createdAt = {
      gte: startDate
    };
  } else
  /* istanbul ignore next */
  {
    cov_22fgou357z().b[6][1]++;
  }
  // Fetch recent inventory transfers using Prisma
  const transfers =
  /* istanbul ignore next */
  (cov_22fgou357z().s[37]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_22fgou357z().f[8]++;
    cov_22fgou357z().s[38]++;
    return _prisma.prisma.inventoryTransfer.findMany({
      select: {
        id: true,
        status: true,
        createdAt: true,
        fromShop: {
          select: {
            name: true
          }
        },
        toShop: {
          select: {
            name: true
          }
        },
        transferItems: {
          select: {
            id: true
          } // Selecting id to count items
        }
      },
      where: Object.keys(whereClause).length > 0 ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[7][0]++, whereClause) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[7][1]++, undefined),
      orderBy: {
        createdAt: "desc"
      },
      take: 5 // Limit to 5 most recent transfers
    });
  }, [], "Failed to fetch transfers data"));
  // Format the data for the frontend
  const data =
  /* istanbul ignore next */
  (cov_22fgou357z().s[39]++, transfers.map(transfer => {
    /* istanbul ignore next */
    cov_22fgou357z().f[9]++;
    cov_22fgou357z().s[40]++;
    return {
      id: `TR-${String(transfer.id).padStart(3, "0")}`,
      source: transfer.fromShop.name,
      destination: transfer.toShop.name,
      status: transfer.status.charAt(0).toUpperCase() + transfer.status.slice(1),
      date: transfer.createdAt.toISOString().split("T")[0],
      items: transfer.transferItems.length
    };
  }));
  /* istanbul ignore next */
  cov_22fgou357z().s[41]++;
  return {
    success: true,
    data
  };
}
const GET =
/* istanbul ignore next */
(cov_22fgou357z().s[42]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_22fgou357z().f[10]++;
  cov_22fgou357z().s[43]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_22fgou357z().s[44]++, await (0, _auth.validateTokenPermission)(request, "view_transfers"));
    /* istanbul ignore next */
    cov_22fgou357z().s[45]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_22fgou357z().b[8][0]++;
      cov_22fgou357z().s[46]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[8][1]++;
    }
    // Get query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_22fgou357z().s[47]++, new URL(request.url));
    const period =
    /* istanbul ignore next */
    (cov_22fgou357z().s[48]++, searchParams.get("period"));
    const periodDays =
    /* istanbul ignore next */
    (cov_22fgou357z().s[49]++, period ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[9][0]++, parseInt(period)) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[9][1]++, undefined));
    // Check cache first with shop context and period
    const cacheKey =
    /* istanbul ignore next */
    (cov_22fgou357z().s[50]++, `dashboard:transfers:${context.isFiltered ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[10][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[10][1]++, "all")}${periodDays ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[11][0]++, `:${periodDays}d`) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[11][1]++, "")}`);
    /* istanbul ignore next */
    cov_22fgou357z().s[51]++;
    console.time("cache check");
    const cachedData =
    /* istanbul ignore next */
    (cov_22fgou357z().s[52]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_22fgou357z().s[53]++;
    console.timeEnd("cache check");
    /* istanbul ignore next */
    cov_22fgou357z().s[54]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_22fgou357z().b[12][0]++;
      cov_22fgou357z().s[55]++;
      console.log("✅ Transfers data served from cache");
      /* istanbul ignore next */
      cov_22fgou357z().s[56]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          period: periodDays,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[12][1]++;
    }
    cov_22fgou357z().s[57]++;
    console.log("\uD83D\uDD04 Fetching fresh transfers data with shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered,
      period: periodDays
    });
    const shopId =
    /* istanbul ignore next */
    (cov_22fgou357z().s[58]++, context.isFiltered ?
    /* istanbul ignore next */
    (cov_22fgou357z().b[13][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_22fgou357z().b[13][1]++, null));
    // Fetch transfers data with period filtering
    const result =
    /* istanbul ignore next */
    (cov_22fgou357z().s[59]++, await fetchTransfersData(shopId, periodDays));
    /* istanbul ignore next */
    cov_22fgou357z().s[60]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_22fgou357z().b[14][0]++;
      cov_22fgou357z().s[61]++;
      return _server.NextResponse.json({
        success: false,
        message: "Failed to fetch transfers data",
        data: [],
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          period: periodDays
        }
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_22fgou357z().b[14][1]++;
    }
    const responseData =
    /* istanbul ignore next */
    (cov_22fgou357z().s[62]++, {
      success: true,
      data: result.data,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        period: periodDays,
        fromCache: false
      }
    });
    // Cache the response for 2 minutes
    /* istanbul ignore next */
    cov_22fgou357z().s[63]++;
    console.time("cache set");
    /* istanbul ignore next */
    cov_22fgou357z().s[64]++;
    await _cache.cacheService.set(cacheKey, responseData, 120);
    /* istanbul ignore next */
    cov_22fgou357z().s[65]++;
    console.timeEnd("cache set");
    /* istanbul ignore next */
    cov_22fgou357z().s[66]++;
    console.log("\uD83D\uDCBE Transfers data cached for 2 minutes");
    /* istanbul ignore next */
    cov_22fgou357z().s[67]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_22fgou357z().s[68]++;
    console.error("Error fetching transfers data:", error);
    /* istanbul ignore next */
    cov_22fgou357z().s[69]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to load transfers data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_22fgou357z().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_22fgou357z().b[15][1]++, String(error)),
      data: [],
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,