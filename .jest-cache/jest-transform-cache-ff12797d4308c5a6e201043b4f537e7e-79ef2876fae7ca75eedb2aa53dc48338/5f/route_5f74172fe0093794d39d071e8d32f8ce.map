{"version":3,"names":["GET","cov_2l5rqpdkxm","f","s","PATCH","POST","request","paymentData","json","token","headers","get","replace","userId","b","decoded","_auth","verifyToken","error","console","warn","invoiceId","customerId","amount","paymentMethod","_server","NextResponse","success","message","status","payment","_prisma","prisma","create","data","accountId","referenceNumber","invoice","findUnique","where","id","include","payments","_auditService","auditService","logAction","action","entity","entityId","toString","details","Error","String","authHeader","startsWith","undefined","userIdForUpdate","e","searchParams","URL","url","paymentId","parseInt","isNaN","updateData","existingPayment","receipt","customer","newAmount","parseFloat","newPaymentMethod","newReference","newAccountId","result","$transaction","tx","relatedTxn","transaction","findFirst","reference","receiptNumber","type","oldAccountId","oldAmount","toNumber","account","update","balance","decrement","appliedAccountId","increment","_client","Prisma","Decimal","description","name","invoiceNumber","updatedPayment","aggregate","isNot","_sum","invoiceInfo","select","total","paid","invoiceTotal","newStatus","changes","findMany","orderBy","createdAt"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\nimport { auditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\nexport async function POST(request: Request) {\n    try {\n        const paymentData = await request.json();\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId: number | string | null = null;\n        if (token) {\n            try {\n                const decoded: any = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, continuing without user');\n            }\n        }\n\n        // Validate payment data\n        if (!paymentData.invoiceId || !paymentData.customerId || !paymentData.amount || !paymentData.paymentMethod) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required payment information'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate the amount is positive\n        if (paymentData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Payment amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Create payment in database\n        const payment = await prisma.payment.create({\n            data: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            }\n        });\n\n        // Get the invoice information for reference\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: paymentData.invoiceId },\n            include: {\n                payments: true\n            }\n        });\n\n        // NOTE: We no longer automatically update the invoice status here\n        // The invoice status will only be updated when a receipt is created\n        // This ensures proper payment documentation before marking as paid\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Payment recorded successfully',\n                data: payment\n            },\n            { status: 201 }\n        );\n\n        // Log CREATE action in Audit Trail\n        await auditService.logAction({\n            action: 'CREATE',\n            entity: 'Payment',\n            entityId: payment.id,\n            userId: userId?.toString(),\n            details: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            },\n        });\n    } catch (error) {\n        console.error('Error recording payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error recording payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\n// Update an existing payment and keep accounting in sync\nexport async function PATCH(request: Request) {\n    try {\n        // Get user from token for audit log later\n        const authHeader = request.headers.get('Authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.replace('Bearer ', '') : undefined;\n        let userIdForUpdate: string | null = null;\n        if (token) {\n            try {\n                const decoded: any = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userIdForUpdate = decoded.userId.toString();\n                }\n            } catch (e) {\n                console.warn('Invalid token for audit logging on payment update');\n            }\n        }\n        const { searchParams } = new URL(request.url);\n        const paymentId = searchParams.get('id');\n\n        if (!paymentId) {\n            return NextResponse.json(\n                { success: false, message: 'Payment ID is required' },\n                { status: 400 }\n            );\n        }\n\n        const id = parseInt(paymentId);\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid payment ID' },\n                { status: 400 }\n            );\n        }\n\n        const updateData = await request.json();\n\n        // At minimum, one updatable field should be provided\n        if (\n            updateData.amount === undefined &&\n            updateData.paymentMethod === undefined &&\n            updateData.accountId === undefined &&\n            updateData.referenceNumber === undefined\n        ) {\n            return NextResponse.json(\n                { success: false, message: 'No valid fields provided to update' },\n                { status: 400 }\n            );\n        }\n\n        if (updateData.amount !== undefined && updateData.amount <= 0) {\n            return NextResponse.json(\n                { success: false, message: 'Amount must be greater than zero' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch payment with relations\n        const existingPayment = await prisma.payment.findUnique({\n            where: { id },\n            include: {\n                receipt: true,\n                customer: true,\n                invoice: true\n            }\n        });\n\n        if (!existingPayment) {\n            return NextResponse.json(\n                { success: false, message: 'Payment not found' },\n                { status: 404 }\n            );\n        }\n\n        // Normalize new values falling back to current values\n        const newAmount: number = updateData.amount !== undefined ? parseFloat(updateData.amount) : existingPayment.amount;\n        const newPaymentMethod: string = updateData.paymentMethod ?? existingPayment.paymentMethod;\n        const newReference: string | null = updateData.referenceNumber ?? existingPayment.referenceNumber;\n        const newAccountId: number | null = updateData.accountId !== undefined ? (updateData.accountId ? parseInt(updateData.accountId) : null) : existingPayment.accountId;\n\n        // Perform updates in a DB transaction to keep everything consistent\n        const result = await prisma.$transaction(async (tx) => {\n            // If there is an associated receipt, we must also update the accounting transaction and balances\n            if (existingPayment.receipt) {\n                // Locate the related accounting transaction using the receipt number reference\n                const relatedTxn = await tx.transaction.findFirst({\n                    where: {\n                        reference: existingPayment.receipt.receiptNumber,\n                        type: 'income'\n                    }\n                });\n\n                if (!relatedTxn) {\n                    throw new Error('Related accounting transaction not found');\n                }\n\n                const oldAccountId = relatedTxn.accountId;\n                const oldAmount = (relatedTxn.amount as unknown as Prisma.Decimal).toNumber ? (relatedTxn.amount as unknown as Prisma.Decimal).toNumber() : parseFloat(relatedTxn.amount as unknown as string);\n\n                // Reverse the original balances\n                await tx.account.update({\n                    where: { id: oldAccountId },\n                    data: { balance: { decrement: oldAmount } }\n                });\n\n                // If the account is changing, we handle the new account separately; otherwise we can re-use oldAccountId\n                const appliedAccountId = newAccountId ?? oldAccountId;\n\n                // Apply the new balance effect\n                await tx.account.update({\n                    where: { id: appliedAccountId },\n                    data: { balance: { increment: newAmount } }\n                });\n\n                // Update the accounting transaction record\n                await tx.transaction.update({\n                    where: { id: relatedTxn.id },\n                    data: {\n                        accountId: appliedAccountId,\n                        amount: new Prisma.Decimal(newAmount),\n                        description: `Payment received from ${existingPayment.customer?.name ?? 'Customer'} - Invoice ${existingPayment.invoice.invoiceNumber}`\n                    }\n                });\n            }\n\n            // Update the payment record itself\n            const updatedPayment = await tx.payment.update({\n                where: { id },\n                data: {\n                    amount: newAmount,\n                    paymentMethod: newPaymentMethod,\n                    referenceNumber: newReference,\n                    accountId: newAccountId\n                },\n                include: {\n                    receipt: true,\n                    account: true,\n                    customer: true,\n                    invoice: true\n                }\n            });\n\n            // If payment has a receipt, recalculate invoice status\n            if (updatedPayment.receipt) {\n                const aggregate = await tx.payment.aggregate({\n                    where: {\n                        invoiceId: updatedPayment.invoiceId,\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    _sum: { amount: true }\n                });\n\n                const invoiceInfo = await tx.invoice.findUnique({\n                    where: { id: updatedPayment.invoiceId },\n                    select: { total: true }\n                });\n\n                const paid = aggregate._sum.amount || 0;\n                const invoiceTotal = invoiceInfo?.total || 0;\n                let newStatus: string = 'pending';\n                if (paid >= invoiceTotal) newStatus = 'paid';\n                else if (paid > 0) newStatus = 'partial';\n\n                await tx.invoice.update({\n                    where: { id: updatedPayment.invoiceId },\n                    data: { status: newStatus }\n                });\n            }\n\n            return updatedPayment;\n        });\n\n        // Log UPDATE action in Audit Trail\n        await auditService.logAction({\n            action: 'UPDATE',\n            entity: 'Payment',\n            entityId: result.id,\n            userId: userIdForUpdate ?? undefined,\n            details: {\n                changes: updateData,\n            },\n        });\n\n        return NextResponse.json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error updating payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function GET() {\n    try {\n        // Fetch all payments with related invoice, customer, and account info\n        const payments = await prisma.payment.findMany({\n            include: {\n                invoice: true,\n                customer: true,\n                account: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(payments);\n    } catch (error) {\n        console.error('Error fetching payments:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching payments',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}