d083d042f49fe8a529954987a82f4c23
/**
 * Health check endpoint optimized for Vercel serverless
 */"use strict";

/* istanbul ignore next */
function cov_160jyjwbc8() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/health/route.ts";
  var hash = "845cfcfd59b6395c2e8cdbcac28acb6f7ec84cc9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/health/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 6,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "3": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 19
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 27
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 23
        }
      },
      "8": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "9": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "10": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 57
        }
      },
      "11": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "12": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "13": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "14": {
        start: {
          line: 34,
          column: 18
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "15": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "16": {
        start: {
          line: 37,
          column: 25
        },
        end: {
          line: 37,
          column: 39
        }
      },
      "17": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 62
        }
      },
      "19": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 66
        }
      },
      "20": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 34
        }
      },
      "21": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 49
        }
      },
      "22": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 43
        }
      },
      "23": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "24": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 53
        }
      },
      "26": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 10
          }
        },
        loc: {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 13
          },
          end: {
            line: 17,
            column: 14
          }
        },
        loc: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 13
          },
          end: {
            line: 23,
            column: 14
          }
        },
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 33,
            column: 18
          }
        },
        loc: {
          start: {
            line: 33,
            column: 28
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 33
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 56
          },
          end: {
            line: 55,
            column: 65
          }
        }, {
          start: {
            line: 55,
            column: 68
          },
          end: {
            line: 55,
            column: 78
          }
        }],
        line: 55
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 61,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 61,
            column: 49
          }
        }, {
          start: {
            line: 61,
            column: 53
          },
          end: {
            line: 61,
            column: 62
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 79,
            column: 19
          },
          end: {
            line: 79,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 44
          },
          end: {
            line: 79,
            column: 57
          }
        }, {
          start: {
            line: 79,
            column: 60
          },
          end: {
            line: 79,
            column: 75
          }
        }],
        line: 79
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/health/route.ts"],
      sourcesContent: ["/**\n * Health check endpoint optimized for Vercel serverless\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { cache } from '@/lib/cache-vercel';\n\n// Vercel serverless optimizations\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const maxDuration = 10;\n\nexport async function GET(request: NextRequest) {\n  const start = Date.now();\n  \n  try {\n    // Check cache health\n    const cacheKey = 'health:check';\n    const timestamp = Date.now();\n    await cache.set(cacheKey, timestamp, 60);\n    const cachedValue = await cache.get(cacheKey);\n    \n    // Check database health\n    const dbStart = Date.now();\n    await prisma.$queryRaw`SELECT 1`;\n    const dbTime = Date.now() - dbStart;\n    \n    const totalTime = Date.now() - start;\n    \n    return NextResponse.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      checks: {\n        database: {\n          status: 'healthy',\n          responseTime: `${dbTime}ms`\n        },\n        cache: {\n          status: cachedValue === timestamp ? 'healthy' : 'degraded',\n          responseTime: 'N/A'\n        }\n      },\n      environment: {\n        runtime: 'vercel-serverless',\n        region: process.env.VERCEL_REGION || 'unknown',\n        nodeVersion: process.version\n      },\n      performance: {\n        totalResponseTime: `${totalTime}ms`\n      }\n    }, {\n      status: 200,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Content-Type': 'application/json'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Health check failed:', error);\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n      performance: {\n        totalResponseTime: `${Date.now() - start}ms`\n      }\n    }, {\n      status: 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n}"],
      names: ["GET", "dynamic", "maxDuration", "runtime", "request", "start", "Date", "now", "cacheKey", "timestamp", "cache", "set", "cachedValue", "get", "dbStart", "prisma", "$queryRaw", "dbTime", "totalTime", "NextResponse", "json", "status", "toISOString", "checks", "database", "responseTime", "environment", "region", "process", "env", "VERCEL_REGION", "nodeVersion", "version", "performance", "totalResponseTime", "headers", "error", "console", "Error", "message"],
      mappings: "AAAA;;CAEC;;;;;;;;;;;IAWqBA,GAAG;eAAHA;;IAHTC,OAAO;eAAPA;;IACAC,WAAW;eAAXA;;IAFAC,OAAO;eAAPA;;;wBAL6B;wBACnB;6BACD;AAGf,MAAMA,UAAU;AAChB,MAAMF,UAAU;AAChB,MAAMC,cAAc;AAEpB,eAAeF,IAAII,OAAoB;IAC5C,MAAMC,QAAQC,KAAKC,GAAG;IAEtB,IAAI;QACF,qBAAqB;QACrB,MAAMC,WAAW;QACjB,MAAMC,YAAYH,KAAKC,GAAG;QAC1B,MAAMG,kBAAK,CAACC,GAAG,CAACH,UAAUC,WAAW;QACrC,MAAMG,cAAc,MAAMF,kBAAK,CAACG,GAAG,CAACL;QAEpC,wBAAwB;QACxB,MAAMM,UAAUR,KAAKC,GAAG;QACxB,MAAMQ,cAAM,CAACC,SAAS,CAAC,QAAQ,CAAC;QAChC,MAAMC,SAASX,KAAKC,GAAG,KAAKO;QAE5B,MAAMI,YAAYZ,KAAKC,GAAG,KAAKF;QAE/B,OAAOc,oBAAY,CAACC,IAAI,CAAC;YACvBC,QAAQ;YACRZ,WAAW,IAAIH,OAAOgB,WAAW;YACjCC,QAAQ;gBACNC,UAAU;oBACRH,QAAQ;oBACRI,cAAc,CAAC,EAAER,OAAO,EAAE,CAAC;gBAC7B;gBACAP,OAAO;oBACLW,QAAQT,gBAAgBH,YAAY,YAAY;oBAChDgB,cAAc;gBAChB;YACF;YACAC,aAAa;gBACXvB,SAAS;gBACTwB,QAAQC,QAAQC,GAAG,CAACC,aAAa,IAAI;gBACrCC,aAAaH,QAAQI,OAAO;YAC9B;YACAC,aAAa;gBACXC,mBAAmB,CAAC,EAAEhB,UAAU,EAAE,CAAC;YACrC;QACF,GAAG;YACDG,QAAQ;YACRc,SAAS;gBACP,iBAAiB;gBACjB,gBAAgB;YAClB;QACF;IAEF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,wBAAwBA;QAEtC,OAAOjB,oBAAY,CAACC,IAAI,CAAC;YACvBC,QAAQ;YACRZ,WAAW,IAAIH,OAAOgB,WAAW;YACjCc,OAAOA,iBAAiBE,QAAQF,MAAMG,OAAO,GAAG;YAChDN,aAAa;gBACXC,mBAAmB,CAAC,EAAE5B,KAAKC,GAAG,KAAKF,MAAM,EAAE,CAAC;YAC9C;QACF,GAAG;YACDgB,QAAQ;YACRc,SAAS;gBACP,iBAAiB;gBACjB,gBAAgB;YAClB;QACF;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "845cfcfd59b6395c2e8cdbcac28acb6f7ec84cc9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_160jyjwbc8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_160jyjwbc8();
cov_160jyjwbc8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_160jyjwbc8().f[0]++;
  cov_160jyjwbc8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_160jyjwbc8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_160jyjwbc8().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_160jyjwbc8().f[1]++;
    cov_160jyjwbc8().s[4]++;
    return GET;
  },
  dynamic: function () {
    /* istanbul ignore next */
    cov_160jyjwbc8().f[2]++;
    cov_160jyjwbc8().s[5]++;
    return dynamic;
  },
  maxDuration: function () {
    /* istanbul ignore next */
    cov_160jyjwbc8().f[3]++;
    cov_160jyjwbc8().s[6]++;
    return maxDuration;
  },
  runtime: function () {
    /* istanbul ignore next */
    cov_160jyjwbc8().f[4]++;
    cov_160jyjwbc8().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_160jyjwbc8().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_160jyjwbc8().s[9]++, require("../../../lib/prisma"));
const _cachevercel =
/* istanbul ignore next */
(cov_160jyjwbc8().s[10]++, require("../../../lib/cache-vercel"));
const runtime =
/* istanbul ignore next */
(cov_160jyjwbc8().s[11]++, "nodejs");
const dynamic =
/* istanbul ignore next */
(cov_160jyjwbc8().s[12]++, "force-dynamic");
const maxDuration =
/* istanbul ignore next */
(cov_160jyjwbc8().s[13]++, 10);
async function GET(request) {
  /* istanbul ignore next */
  cov_160jyjwbc8().f[5]++;
  const start =
  /* istanbul ignore next */
  (cov_160jyjwbc8().s[14]++, Date.now());
  /* istanbul ignore next */
  cov_160jyjwbc8().s[15]++;
  try {
    // Check cache health
    const cacheKey =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[16]++, "health:check");
    const timestamp =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[17]++, Date.now());
    /* istanbul ignore next */
    cov_160jyjwbc8().s[18]++;
    await _cachevercel.cache.set(cacheKey, timestamp, 60);
    const cachedValue =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[19]++, await _cachevercel.cache.get(cacheKey));
    // Check database health
    const dbStart =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[20]++, Date.now());
    /* istanbul ignore next */
    cov_160jyjwbc8().s[21]++;
    await _prisma.prisma.$queryRaw`SELECT 1`;
    const dbTime =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[22]++, Date.now() - dbStart);
    const totalTime =
    /* istanbul ignore next */
    (cov_160jyjwbc8().s[23]++, Date.now() - start);
    /* istanbul ignore next */
    cov_160jyjwbc8().s[24]++;
    return _server.NextResponse.json({
      status: "healthy",
      timestamp: new Date().toISOString(),
      checks: {
        database: {
          status: "healthy",
          responseTime: `${dbTime}ms`
        },
        cache: {
          status: cachedValue === timestamp ?
          /* istanbul ignore next */
          (cov_160jyjwbc8().b[0][0]++, "healthy") :
          /* istanbul ignore next */
          (cov_160jyjwbc8().b[0][1]++, "degraded"),
          responseTime: "N/A"
        }
      },
      environment: {
        runtime: "vercel-serverless",
        region:
        /* istanbul ignore next */
        (cov_160jyjwbc8().b[1][0]++, process.env.VERCEL_REGION) ||
        /* istanbul ignore next */
        (cov_160jyjwbc8().b[1][1]++, "unknown"),
        nodeVersion: process.version
      },
      performance: {
        totalResponseTime: `${totalTime}ms`
      }
    }, {
      status: 200,
      headers: {
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_160jyjwbc8().s[25]++;
    console.error("Health check failed:", error);
    /* istanbul ignore next */
    cov_160jyjwbc8().s[26]++;
    return _server.NextResponse.json({
      status: "unhealthy",
      timestamp: new Date().toISOString(),
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_160jyjwbc8().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_160jyjwbc8().b[2][1]++, "Unknown error"),
      performance: {
        totalResponseTime: `${Date.now() - start}ms`
      }
    }, {
      status: 503,
      headers: {
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Content-Type": "application/json"
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTYwanlqd2JjOCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsIm5hbWVzIiwibWFwcGluZ3MiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiR0VUIiwiZHluYW1pYyIsIm1heER1cmF0aW9uIiwicnVudGltZSIsInJlcXVlc3QiLCJEYXRlIiwibm93IiwiY2FjaGVLZXkiLCJ0aW1lc3RhbXAiLCJfY2FjaGV2ZXJjZWwiLCJjYWNoZSIsInNldCIsImNhY2hlZFZhbHVlIiwiZ2V0IiwiZGJTdGFydCIsIl9wcmlzbWEiLCJwcmlzbWEiLCIkcXVlcnlSYXciLCJkYlRpbWUiLCJ0b3RhbFRpbWUiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN0YXR1cyIsInRvSVNPU3RyaW5nIiwiY2hlY2tzIiwiZGF0YWJhc2UiLCJyZXNwb25zZVRpbWUiLCJlbnZpcm9ubWVudCIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJWRVJDRUxfUkVHSU9OIiwibm9kZVZlcnNpb24iLCJwZXJmb3JtYW5jZSIsInRvdGFsUmVzcG9uc2VUaW1lIiwiaGVhZGVycyIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2FwcC9hcGkvaGVhbHRoL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVhbHRoIGNoZWNrIGVuZHBvaW50IG9wdGltaXplZCBmb3IgVmVyY2VsIHNlcnZlcmxlc3NcbiAqL1xuXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJztcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSAnQC9saWIvY2FjaGUtdmVyY2VsJztcblxuLy8gVmVyY2VsIHNlcnZlcmxlc3Mgb3B0aW1pemF0aW9uc1xuZXhwb3J0IGNvbnN0IHJ1bnRpbWUgPSAnbm9kZWpzJztcbmV4cG9ydCBjb25zdCBkeW5hbWljID0gJ2ZvcmNlLWR5bmFtaWMnO1xuZXhwb3J0IGNvbnN0IG1heER1cmF0aW9uID0gMTA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBDaGVjayBjYWNoZSBoZWFsdGhcbiAgICBjb25zdCBjYWNoZUtleSA9ICdoZWFsdGg6Y2hlY2snO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgYXdhaXQgY2FjaGUuc2V0KGNhY2hlS2V5LCB0aW1lc3RhbXAsIDYwKTtcbiAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGF3YWl0IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgXG4gICAgLy8gQ2hlY2sgZGF0YWJhc2UgaGVhbHRoXG4gICAgY29uc3QgZGJTdGFydCA9IERhdGUubm93KCk7XG4gICAgYXdhaXQgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgMWA7XG4gICAgY29uc3QgZGJUaW1lID0gRGF0ZS5ub3coKSAtIGRiU3RhcnQ7XG4gICAgXG4gICAgY29uc3QgdG90YWxUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdGF0dXM6ICdoZWFsdGh5JyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgY2hlY2tzOiB7XG4gICAgICAgIGRhdGFiYXNlOiB7XG4gICAgICAgICAgc3RhdHVzOiAnaGVhbHRoeScsXG4gICAgICAgICAgcmVzcG9uc2VUaW1lOiBgJHtkYlRpbWV9bXNgXG4gICAgICAgIH0sXG4gICAgICAgIGNhY2hlOiB7XG4gICAgICAgICAgc3RhdHVzOiBjYWNoZWRWYWx1ZSA9PT0gdGltZXN0YW1wID8gJ2hlYWx0aHknIDogJ2RlZ3JhZGVkJyxcbiAgICAgICAgICByZXNwb25zZVRpbWU6ICdOL0EnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBydW50aW1lOiAndmVyY2VsLXNlcnZlcmxlc3MnLFxuICAgICAgICByZWdpb246IHByb2Nlc3MuZW52LlZFUkNFTF9SRUdJT04gfHwgJ3Vua25vd24nLFxuICAgICAgICBub2RlVmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9uXG4gICAgICB9LFxuICAgICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgICAgdG90YWxSZXNwb25zZVRpbWU6IGAke3RvdGFsVGltZX1tc2BcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUnLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignSGVhbHRoIGNoZWNrIGZhaWxlZDonLCBlcnJvcik7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN0YXR1czogJ3VuaGVhbHRoeScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgIHRvdGFsUmVzcG9uc2VUaW1lOiBgJHtEYXRlLm5vdygpIC0gc3RhcnR9bXNgXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7R0FFQzs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVUsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsY0FBQTtNQUFBQyxPQUFBO01BQUFDLE9BQUE7TUFBQUMsY0FBQTtNQUFBQyxLQUFBO01BQUFDLFFBQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUExQixJQUFBO0VBQUE7RUFBQSxJQUFBMkIsUUFBQSxHQUFBMUIsTUFBQSxDQUFBRSxHQUFBLE1B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