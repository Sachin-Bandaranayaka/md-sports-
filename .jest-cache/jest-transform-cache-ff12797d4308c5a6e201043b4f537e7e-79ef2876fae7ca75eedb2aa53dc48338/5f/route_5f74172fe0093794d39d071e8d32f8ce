fca0040bf230557a0e008d59133eae3a
"use strict";

/* istanbul ignore next */
function cov_2l5rqpdkxm() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts";
  var hash = "d6affa9aee2877e7ad11a19047ecbbf51b390d15";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 20
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "9": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 41
        }
      },
      "10": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 63
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 42
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "13": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 48
        }
      },
      "14": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 82
        }
      },
      "15": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "17": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "18": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 67
        }
      },
      "19": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 38,
          column: 17
        }
      },
      "20": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "21": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 89
        }
      },
      "22": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "23": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "25": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "26": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "27": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "28": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "29": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "30": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 57
        }
      },
      "31": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "32": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "33": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 63
        }
      },
      "34": {
        start: {
          line: 121,
          column: 22
        },
        end: {
          line: 121,
          column: 103
        }
      },
      "35": {
        start: {
          line: 122,
          column: 30
        },
        end: {
          line: 122,
          column: 34
        }
      },
      "36": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "37": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "38": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 125,
          column: 67
        }
      },
      "39": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 128,
          column: 17
        }
      },
      "40": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 64
        }
      },
      "41": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 82
        }
      },
      "42": {
        start: {
          line: 133,
          column: 33
        },
        end: {
          line: 133,
          column: 53
        }
      },
      "43": {
        start: {
          line: 134,
          column: 26
        },
        end: {
          line: 134,
          column: 48
        }
      },
      "44": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "45": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "46": {
        start: {
          line: 143,
          column: 19
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "48": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "49": {
        start: {
          line: 152,
          column: 27
        },
        end: {
          line: 152,
          column: 47
        }
      },
      "50": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "51": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "52": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "53": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "54": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 180,
          column: 10
        }
      },
      "55": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "56": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "57": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 114
        }
      },
      "58": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 90
        }
      },
      "59": {
        start: {
          line: 192,
          column: 29
        },
        end: {
          line: 192,
          column: 90
        }
      },
      "60": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 193,
          column: 154
        }
      },
      "61": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 300,
          column: 10
        }
      },
      "62": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "63": {
        start: {
          line: 199,
          column: 35
        },
        end: {
          line: 204,
          column: 18
        }
      },
      "64": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "65": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 80
        }
      },
      "66": {
        start: {
          line: 208,
          column: 37
        },
        end: {
          line: 208,
          column: 57
        }
      },
      "67": {
        start: {
          line: 209,
          column: 34
        },
        end: {
          line: 209,
          column: 123
        }
      },
      "68": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "69": {
        start: {
          line: 222,
          column: 41
        },
        end: {
          line: 222,
          column: 69
        }
      },
      "70": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "71": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "72": {
        start: {
          line: 247,
          column: 35
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "73": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "74": {
        start: {
          line: 266,
          column: 34
        },
        end: {
          line: 276,
          column: 18
        }
      },
      "75": {
        start: {
          line: 277,
          column: 36
        },
        end: {
          line: 284,
          column: 18
        }
      },
      "76": {
        start: {
          line: 285,
          column: 29
        },
        end: {
          line: 285,
          column: 55
        }
      },
      "77": {
        start: {
          line: 286,
          column: 37
        },
        end: {
          line: 286,
          column: 60
        }
      },
      "78": {
        start: {
          line: 287,
          column: 32
        },
        end: {
          line: 287,
          column: 41
        }
      },
      "79": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 289,
          column: 57
        }
      },
      "80": {
        start: {
          line: 288,
          column: 42
        },
        end: {
          line: 288,
          column: 61
        }
      },
      "81": {
        start: {
          line: 289,
          column: 21
        },
        end: {
          line: 289,
          column: 57
        }
      },
      "82": {
        start: {
          line: 289,
          column: 35
        },
        end: {
          line: 289,
          column: 57
        }
      },
      "83": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "84": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 34
        }
      },
      "85": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "86": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "87": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 56
        }
      },
      "88": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 323,
          column: 11
        }
      },
      "89": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "90": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "91": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 51
        }
      },
      "92": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 57
        }
      },
      "93": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 12
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 11
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 19
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "PATCH",
        decl: {
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 117,
            column: 20
          }
        },
        loc: {
          start: {
            line: 117,
            column: 30
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 117
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 195,
            column: 57
          },
          end: {
            line: 195,
            column: 58
          }
        },
        loc: {
          start: {
            line: 195,
            column: 69
          },
          end: {
            line: 300,
            column: 9
          }
        },
        line: 195
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 326,
            column: 15
          },
          end: {
            line: 326,
            column: 18
          }
        },
        loc: {
          start: {
            line: 326,
            column: 21
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 326
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 38,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 38,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 27
          }
        }, {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 45
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 34
          }
        }, {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 44,
            column: 61
          }
        }, {
          start: {
            line: 44,
            column: 65
          },
          end: {
            line: 44,
            column: 84
          }
        }, {
          start: {
            line: 44,
            column: 88
          },
          end: {
            line: 44,
            column: 114
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 27
          },
          end: {
            line: 68,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 27
          },
          end: {
            line: 68,
            column: 48
          }
        }, {
          start: {
            line: 68,
            column: 52
          },
          end: {
            line: 68,
            column: 56
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 69,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 69,
            column: 60
          }
        }, {
          start: {
            line: 69,
            column: 64
          },
          end: {
            line: 69,
            column: 68
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 102,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 102,
            column: 48
          }
        }, {
          start: {
            line: 102,
            column: 52
          },
          end: {
            line: 102,
            column: 56
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 33
          },
          end: {
            line: 103,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 33
          },
          end: {
            line: 103,
            column: 60
          }
        }, {
          start: {
            line: 103,
            column: 64
          },
          end: {
            line: 103,
            column: 68
          }
        }],
        line: 103
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 19
          },
          end: {
            line: 111,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 44
          },
          end: {
            line: 111,
            column: 57
          }
        }, {
          start: {
            line: 111,
            column: 60
          },
          end: {
            line: 111,
            column: 73
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 22
          },
          end: {
            line: 121,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 58
          },
          end: {
            line: 121,
            column: 91
          }
        }, {
          start: {
            line: 121,
            column: 94
          },
          end: {
            line: 121,
            column: 103
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 128,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 128,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "14": {
        loc: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 27
          }
        }, {
          start: {
            line: 126,
            column: 31
          },
          end: {
            line: 126,
            column: 45
          }
        }],
        line: 126
      },
      "15": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "18": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 167
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 43
          }
        }, {
          start: {
            line: 154,
            column: 47
          },
          end: {
            line: 154,
            column: 85
          }
        }, {
          start: {
            line: 154,
            column: 89
          },
          end: {
            line: 154,
            column: 123
          }
        }, {
          start: {
            line: 154,
            column: 127
          },
          end: {
            line: 154,
            column: 167
          }
        }],
        line: 154
      },
      "19": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 43
          }
        }, {
          start: {
            line: 162,
            column: 47
          },
          end: {
            line: 162,
            column: 69
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "22": {
        loc: {
          start: {
            line: 190,
            column: 26
          },
          end: {
            line: 190,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 60
          },
          end: {
            line: 190,
            column: 89
          }
        }, {
          start: {
            line: 190,
            column: 92
          },
          end: {
            line: 190,
            column: 114
          }
        }],
        line: 190
      },
      "23": {
        loc: {
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 33
          },
          end: {
            line: 191,
            column: 57
          }
        }, {
          start: {
            line: 191,
            column: 61
          },
          end: {
            line: 191,
            column: 90
          }
        }],
        line: 191
      },
      "24": {
        loc: {
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 192,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 192,
            column: 55
          }
        }, {
          start: {
            line: 192,
            column: 59
          },
          end: {
            line: 192,
            column: 90
          }
        }],
        line: 192
      },
      "25": {
        loc: {
          start: {
            line: 193,
            column: 29
          },
          end: {
            line: 193,
            column: 154
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 66
          },
          end: {
            line: 193,
            column: 126
          }
        }, {
          start: {
            line: 193,
            column: 129
          },
          end: {
            line: 193,
            column: 154
          }
        }],
        line: 193
      },
      "26": {
        loc: {
          start: {
            line: 193,
            column: 66
          },
          end: {
            line: 193,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 89
          },
          end: {
            line: 193,
            column: 119
          }
        }, {
          start: {
            line: 193,
            column: 122
          },
          end: {
            line: 193,
            column: 126
          }
        }],
        line: 193
      },
      "27": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "28": {
        loc: {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "29": {
        loc: {
          start: {
            line: 209,
            column: 34
          },
          end: {
            line: 209,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 63
          },
          end: {
            line: 209,
            column: 91
          }
        }, {
          start: {
            line: 209,
            column: 94
          },
          end: {
            line: 209,
            column: 123
          }
        }],
        line: 209
      },
      "30": {
        loc: {
          start: {
            line: 222,
            column: 41
          },
          end: {
            line: 222,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 41
          },
          end: {
            line: 222,
            column: 53
          }
        }, {
          start: {
            line: 222,
            column: 57
          },
          end: {
            line: 222,
            column: 69
          }
        }],
        line: 222
      },
      "31": {
        loc: {
          start: {
            line: 242,
            column: 62
          },
          end: {
            line: 242,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 62
          },
          end: {
            line: 242,
            column: 92
          }
        }, {
          start: {
            line: 242,
            column: 96
          },
          end: {
            line: 242,
            column: 106
          }
        }],
        line: 242
      },
      "32": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "33": {
        loc: {
          start: {
            line: 285,
            column: 29
          },
          end: {
            line: 285,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 29
          },
          end: {
            line: 285,
            column: 50
          }
        }, {
          start: {
            line: 285,
            column: 54
          },
          end: {
            line: 285,
            column: 55
          }
        }],
        line: 285
      },
      "34": {
        loc: {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 286,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 286,
            column: 55
          }
        }, {
          start: {
            line: 286,
            column: 59
          },
          end: {
            line: 286,
            column: 60
          }
        }],
        line: 286
      },
      "35": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 289,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 289,
            column: 57
          }
        }, {
          start: {
            line: 289,
            column: 21
          },
          end: {
            line: 289,
            column: 57
          }
        }],
        line: 288
      },
      "36": {
        loc: {
          start: {
            line: 289,
            column: 21
          },
          end: {
            line: 289,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 21
          },
          end: {
            line: 289,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "37": {
        loc: {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 306,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 306,
            column: 35
          }
        }, {
          start: {
            line: 306,
            column: 39
          },
          end: {
            line: 306,
            column: 48
          }
        }],
        line: 306
      },
      "38": {
        loc: {
          start: {
            line: 320,
            column: 19
          },
          end: {
            line: 320,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 44
          },
          end: {
            line: 320,
            column: 57
          }
        }, {
          start: {
            line: 320,
            column: 60
          },
          end: {
            line: 320,
            column: 73
          }
        }],
        line: 320
      },
      "39": {
        loc: {
          start: {
            line: 345,
            column: 19
          },
          end: {
            line: 345,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 44
          },
          end: {
            line: 345,
            column: 57
          }
        }, {
          start: {
            line: 345,
            column: 60
          },
          end: {
            line: 345,
            column: 73
          }
        }],
        line: 345
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/payments/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\nimport { auditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\nexport async function POST(request: Request) {\n    try {\n        const paymentData = await request.json();\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId: number | string | null = null;\n        if (token) {\n            try {\n                const decoded: any = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, continuing without user');\n            }\n        }\n\n        // Validate payment data\n        if (!paymentData.invoiceId || !paymentData.customerId || !paymentData.amount || !paymentData.paymentMethod) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Missing required payment information'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Validate the amount is positive\n        if (paymentData.amount <= 0) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Payment amount must be greater than zero'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Create payment in database\n        const payment = await prisma.payment.create({\n            data: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            }\n        });\n\n        // Get the invoice information for reference\n        const invoice = await prisma.invoice.findUnique({\n            where: { id: paymentData.invoiceId },\n            include: {\n                payments: true\n            }\n        });\n\n        // NOTE: We no longer automatically update the invoice status here\n        // The invoice status will only be updated when a receipt is created\n        // This ensures proper payment documentation before marking as paid\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Payment recorded successfully',\n                data: payment\n            },\n            { status: 201 }\n        );\n\n        // Log CREATE action in Audit Trail\n        await auditService.logAction({\n            action: 'CREATE',\n            entity: 'Payment',\n            entityId: payment.id,\n            userId: userId?.toString(),\n            details: {\n                invoiceId: paymentData.invoiceId,\n                customerId: paymentData.customerId,\n                amount: paymentData.amount,\n                paymentMethod: paymentData.paymentMethod,\n                accountId: paymentData.accountId || null,\n                referenceNumber: paymentData.referenceNumber || null,\n            },\n        });\n    } catch (error) {\n        console.error('Error recording payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error recording payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\n// Update an existing payment and keep accounting in sync\nexport async function PATCH(request: Request) {\n    try {\n        // Get user from token for audit log later\n        const authHeader = request.headers.get('Authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.replace('Bearer ', '') : undefined;\n        let userIdForUpdate: string | null = null;\n        if (token) {\n            try {\n                const decoded: any = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userIdForUpdate = decoded.userId.toString();\n                }\n            } catch (e) {\n                console.warn('Invalid token for audit logging on payment update');\n            }\n        }\n        const { searchParams } = new URL(request.url);\n        const paymentId = searchParams.get('id');\n\n        if (!paymentId) {\n            return NextResponse.json(\n                { success: false, message: 'Payment ID is required' },\n                { status: 400 }\n            );\n        }\n\n        const id = parseInt(paymentId);\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid payment ID' },\n                { status: 400 }\n            );\n        }\n\n        const updateData = await request.json();\n\n        // At minimum, one updatable field should be provided\n        if (\n            updateData.amount === undefined &&\n            updateData.paymentMethod === undefined &&\n            updateData.accountId === undefined &&\n            updateData.referenceNumber === undefined\n        ) {\n            return NextResponse.json(\n                { success: false, message: 'No valid fields provided to update' },\n                { status: 400 }\n            );\n        }\n\n        if (updateData.amount !== undefined && updateData.amount <= 0) {\n            return NextResponse.json(\n                { success: false, message: 'Amount must be greater than zero' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch payment with relations\n        const existingPayment = await prisma.payment.findUnique({\n            where: { id },\n            include: {\n                receipt: true,\n                customer: true,\n                invoice: true\n            }\n        });\n\n        if (!existingPayment) {\n            return NextResponse.json(\n                { success: false, message: 'Payment not found' },\n                { status: 404 }\n            );\n        }\n\n        // Normalize new values falling back to current values\n        const newAmount: number = updateData.amount !== undefined ? parseFloat(updateData.amount) : existingPayment.amount;\n        const newPaymentMethod: string = updateData.paymentMethod ?? existingPayment.paymentMethod;\n        const newReference: string | null = updateData.referenceNumber ?? existingPayment.referenceNumber;\n        const newAccountId: number | null = updateData.accountId !== undefined ? (updateData.accountId ? parseInt(updateData.accountId) : null) : existingPayment.accountId;\n\n        // Perform updates in a DB transaction to keep everything consistent\n        const result = await prisma.$transaction(async (tx) => {\n            // If there is an associated receipt, we must also update the accounting transaction and balances\n            if (existingPayment.receipt) {\n                // Locate the related accounting transaction using the receipt number reference\n                const relatedTxn = await tx.transaction.findFirst({\n                    where: {\n                        reference: existingPayment.receipt.receiptNumber,\n                        type: 'income'\n                    }\n                });\n\n                if (!relatedTxn) {\n                    throw new Error('Related accounting transaction not found');\n                }\n\n                const oldAccountId = relatedTxn.accountId;\n                const oldAmount = (relatedTxn.amount as unknown as Prisma.Decimal).toNumber ? (relatedTxn.amount as unknown as Prisma.Decimal).toNumber() : parseFloat(relatedTxn.amount as unknown as string);\n\n                // Reverse the original balances\n                await tx.account.update({\n                    where: { id: oldAccountId },\n                    data: { balance: { decrement: oldAmount } }\n                });\n\n                // If the account is changing, we handle the new account separately; otherwise we can re-use oldAccountId\n                const appliedAccountId = newAccountId ?? oldAccountId;\n\n                // Apply the new balance effect\n                await tx.account.update({\n                    where: { id: appliedAccountId },\n                    data: { balance: { increment: newAmount } }\n                });\n\n                // Update the accounting transaction record\n                await tx.transaction.update({\n                    where: { id: relatedTxn.id },\n                    data: {\n                        accountId: appliedAccountId,\n                        amount: new Prisma.Decimal(newAmount),\n                        description: `Payment received from ${existingPayment.customer?.name ?? 'Customer'} - Invoice ${existingPayment.invoice.invoiceNumber}`\n                    }\n                });\n            }\n\n            // Update the payment record itself\n            const updatedPayment = await tx.payment.update({\n                where: { id },\n                data: {\n                    amount: newAmount,\n                    paymentMethod: newPaymentMethod,\n                    referenceNumber: newReference,\n                    accountId: newAccountId\n                },\n                include: {\n                    receipt: true,\n                    account: true,\n                    customer: true,\n                    invoice: true\n                }\n            });\n\n            // If payment has a receipt, recalculate invoice status\n            if (updatedPayment.receipt) {\n                const aggregate = await tx.payment.aggregate({\n                    where: {\n                        invoiceId: updatedPayment.invoiceId,\n                        receipt: {\n                            isNot: null\n                        }\n                    },\n                    _sum: { amount: true }\n                });\n\n                const invoiceInfo = await tx.invoice.findUnique({\n                    where: { id: updatedPayment.invoiceId },\n                    select: { total: true }\n                });\n\n                const paid = aggregate._sum.amount || 0;\n                const invoiceTotal = invoiceInfo?.total || 0;\n                let newStatus: string = 'pending';\n                if (paid >= invoiceTotal) newStatus = 'paid';\n                else if (paid > 0) newStatus = 'partial';\n\n                await tx.invoice.update({\n                    where: { id: updatedPayment.invoiceId },\n                    data: { status: newStatus }\n                });\n            }\n\n            return updatedPayment;\n        });\n\n        // Log UPDATE action in Audit Trail\n        await auditService.logAction({\n            action: 'UPDATE',\n            entity: 'Payment',\n            entityId: result.id,\n            userId: userIdForUpdate ?? undefined,\n            details: {\n                changes: updateData,\n            },\n        });\n\n        return NextResponse.json({ success: true, data: result });\n    } catch (error) {\n        console.error('Error updating payment:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating payment',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function GET() {\n    try {\n        // Fetch all payments with related invoice, customer, and account info\n        const payments = await prisma.payment.findMany({\n            include: {\n                invoice: true,\n                customer: true,\n                account: true\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(payments);\n    } catch (error) {\n        console.error('Error fetching payments:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching payments',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "PATCH", "POST", "request", "paymentData", "json", "token", "headers", "get", "replace", "userId", "decoded", "verifyToken", "error", "console", "warn", "invoiceId", "customerId", "amount", "paymentMethod", "NextResponse", "success", "message", "status", "payment", "prisma", "create", "data", "accountId", "referenceNumber", "invoice", "findUnique", "where", "id", "include", "payments", "auditService", "logAction", "action", "entity", "entityId", "toString", "details", "Error", "String", "authHeader", "startsWith", "undefined", "userIdForUpdate", "e", "searchParams", "URL", "url", "paymentId", "parseInt", "isNaN", "updateData", "existingPayment", "receipt", "customer", "newAmount", "parseFloat", "newPaymentMethod", "newReference", "newAccountId", "result", "$transaction", "tx", "relatedTxn", "transaction", "findFirst", "reference", "receiptNumber", "type", "oldAccountId", "oldAmount", "toNumber", "account", "update", "balance", "decrement", "appliedAccountId", "increment", "Prisma", "Decimal", "description", "name", "invoiceNumber", "updatedPayment", "aggregate", "isNot", "_sum", "invoiceInfo", "select", "total", "paid", "invoiceTotal", "newStatus", "changes", "findMany", "orderBy", "createdAt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d6affa9aee2877e7ad11a19047ecbbf51b390d15"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l5rqpdkxm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l5rqpdkxm();
cov_2l5rqpdkxm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[0]++;
  cov_2l5rqpdkxm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2l5rqpdkxm().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().f[1]++;
    cov_2l5rqpdkxm().s[4]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().f[2]++;
    cov_2l5rqpdkxm().s[5]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().f[3]++;
    cov_2l5rqpdkxm().s[6]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[8]++, require("../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[9]++, require("@prisma/client"));
const _auditService =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[10]++, require("../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_2l5rqpdkxm().s[11]++, require("../../../lib/auth"));
async function POST(request) {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[4]++;
  cov_2l5rqpdkxm().s[12]++;
  try {
    const paymentData =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[13]++, await request.json());
    // Get user ID from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[14]++, request.headers.get("Authorization")?.replace("Bearer ", ""));
    let userId =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[15]++, null);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[16]++;
    if (token) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[0][0]++;
      cov_2l5rqpdkxm().s[17]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[18]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[19]++;
        if (
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[2][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[2][1]++, decoded.userId)) {
          /* istanbul ignore next */
          cov_2l5rqpdkxm().b[1][0]++;
          cov_2l5rqpdkxm().s[20]++;
          userId = decoded.userId;
        } else
        /* istanbul ignore next */
        {
          cov_2l5rqpdkxm().b[1][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[21]++;
        console.warn("Invalid token for audit logging, continuing without user");
      }
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[0][1]++;
    }
    // Validate payment data
    cov_2l5rqpdkxm().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[4][0]++, !paymentData.invoiceId) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[4][1]++, !paymentData.customerId) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[4][2]++, !paymentData.amount) ||
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[4][3]++, !paymentData.paymentMethod)) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[3][0]++;
      cov_2l5rqpdkxm().s[23]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required payment information"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[3][1]++;
    }
    // Validate the amount is positive
    cov_2l5rqpdkxm().s[24]++;
    if (paymentData.amount <= 0) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[5][0]++;
      cov_2l5rqpdkxm().s[25]++;
      return _server.NextResponse.json({
        success: false,
        message: "Payment amount must be greater than zero"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[5][1]++;
    }
    // Create payment in database
    const payment =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[26]++, await _prisma.prisma.payment.create({
      data: {
        invoiceId: paymentData.invoiceId,
        customerId: paymentData.customerId,
        amount: paymentData.amount,
        paymentMethod: paymentData.paymentMethod,
        accountId:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[6][0]++, paymentData.accountId) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[6][1]++, null),
        referenceNumber:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[7][0]++, paymentData.referenceNumber) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[7][1]++, null)
      }
    }));
    // Get the invoice information for reference
    const invoice =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[27]++, await _prisma.prisma.invoice.findUnique({
      where: {
        id: paymentData.invoiceId
      },
      include: {
        payments: true
      }
    }));
    // NOTE: We no longer automatically update the invoice status here
    // The invoice status will only be updated when a receipt is created
    // This ensures proper payment documentation before marking as paid
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[28]++;
    return _server.NextResponse.json({
      success: true,
      message: "Payment recorded successfully",
      data: payment
    }, {
      status: 201
    });
    // Log CREATE action in Audit Trail
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[29]++;
    await _auditService.auditService.logAction({
      action: "CREATE",
      entity: "Payment",
      entityId: payment.id,
      userId: userId?.toString(),
      details: {
        invoiceId: paymentData.invoiceId,
        customerId: paymentData.customerId,
        amount: paymentData.amount,
        paymentMethod: paymentData.paymentMethod,
        accountId:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[8][0]++, paymentData.accountId) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[8][1]++, null),
        referenceNumber:
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[9][0]++, paymentData.referenceNumber) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[9][1]++, null)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[30]++;
    console.error("Error recording payment:", error);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[31]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error recording payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[10][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[5]++;
  cov_2l5rqpdkxm().s[32]++;
  try {
    // Get user from token for audit log later
    const authHeader =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[33]++, request.headers.get("Authorization"));
    const token =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[34]++, authHeader?.startsWith("Bearer ") ?
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[11][0]++, authHeader.replace("Bearer ", "")) :
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[11][1]++, undefined));
    let userIdForUpdate =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[35]++, null);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[36]++;
    if (token) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[12][0]++;
      cov_2l5rqpdkxm().s[37]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[38]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[39]++;
        if (
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[14][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[14][1]++, decoded.userId)) {
          /* istanbul ignore next */
          cov_2l5rqpdkxm().b[13][0]++;
          cov_2l5rqpdkxm().s[40]++;
          userIdForUpdate = decoded.userId.toString();
        } else
        /* istanbul ignore next */
        {
          cov_2l5rqpdkxm().b[13][1]++;
        }
      } catch (e) {
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[41]++;
        console.warn("Invalid token for audit logging on payment update");
      }
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[12][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[42]++, new URL(request.url));
    const paymentId =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[43]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[44]++;
    if (!paymentId) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[15][0]++;
      cov_2l5rqpdkxm().s[45]++;
      return _server.NextResponse.json({
        success: false,
        message: "Payment ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[15][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[46]++, parseInt(paymentId));
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[47]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[16][0]++;
      cov_2l5rqpdkxm().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid payment ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[16][1]++;
    }
    const updateData =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[49]++, await request.json());
    // At minimum, one updatable field should be provided
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[18][0]++, updateData.amount === undefined) &&
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[18][1]++, updateData.paymentMethod === undefined) &&
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[18][2]++, updateData.accountId === undefined) &&
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[18][3]++, updateData.referenceNumber === undefined)) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[17][0]++;
      cov_2l5rqpdkxm().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: "No valid fields provided to update"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[17][1]++;
    }
    cov_2l5rqpdkxm().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[20][0]++, updateData.amount !== undefined) &&
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[20][1]++, updateData.amount <= 0)) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[19][0]++;
      cov_2l5rqpdkxm().s[53]++;
      return _server.NextResponse.json({
        success: false,
        message: "Amount must be greater than zero"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[19][1]++;
    }
    // Fetch payment with relations
    const existingPayment =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[54]++, await _prisma.prisma.payment.findUnique({
      where: {
        id
      },
      include: {
        receipt: true,
        customer: true,
        invoice: true
      }
    }));
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[55]++;
    if (!existingPayment) {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().b[21][0]++;
      cov_2l5rqpdkxm().s[56]++;
      return _server.NextResponse.json({
        success: false,
        message: "Payment not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l5rqpdkxm().b[21][1]++;
    }
    // Normalize new values falling back to current values
    const newAmount =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[57]++, updateData.amount !== undefined ?
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[22][0]++, parseFloat(updateData.amount)) :
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[22][1]++, existingPayment.amount));
    const newPaymentMethod =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[58]++,
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[23][0]++, updateData.paymentMethod) ??
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[23][1]++, existingPayment.paymentMethod));
    const newReference =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[59]++,
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[24][0]++, updateData.referenceNumber) ??
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[24][1]++, existingPayment.referenceNumber));
    const newAccountId =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[60]++, updateData.accountId !== undefined ?
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[25][0]++, updateData.accountId ?
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[26][0]++, parseInt(updateData.accountId)) :
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[26][1]++, null)) :
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().b[25][1]++, existingPayment.accountId));
    // Perform updates in a DB transaction to keep everything consistent
    const result =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[61]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2l5rqpdkxm().f[6]++;
      cov_2l5rqpdkxm().s[62]++;
      // If there is an associated receipt, we must also update the accounting transaction and balances
      if (existingPayment.receipt) {
        /* istanbul ignore next */
        cov_2l5rqpdkxm().b[27][0]++;
        // Locate the related accounting transaction using the receipt number reference
        const relatedTxn =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[63]++, await tx.transaction.findFirst({
          where: {
            reference: existingPayment.receipt.receiptNumber,
            type: "income"
          }
        }));
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[64]++;
        if (!relatedTxn) {
          /* istanbul ignore next */
          cov_2l5rqpdkxm().b[28][0]++;
          cov_2l5rqpdkxm().s[65]++;
          throw new Error("Related accounting transaction not found");
        } else
        /* istanbul ignore next */
        {
          cov_2l5rqpdkxm().b[28][1]++;
        }
        const oldAccountId =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[66]++, relatedTxn.accountId);
        const oldAmount =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[67]++, relatedTxn.amount.toNumber ?
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[29][0]++, relatedTxn.amount.toNumber()) :
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[29][1]++, parseFloat(relatedTxn.amount)));
        // Reverse the original balances
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[68]++;
        await tx.account.update({
          where: {
            id: oldAccountId
          },
          data: {
            balance: {
              decrement: oldAmount
            }
          }
        });
        // If the account is changing, we handle the new account separately; otherwise we can re-use oldAccountId
        const appliedAccountId =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[69]++,
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[30][0]++, newAccountId) ??
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[30][1]++, oldAccountId));
        // Apply the new balance effect
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[70]++;
        await tx.account.update({
          where: {
            id: appliedAccountId
          },
          data: {
            balance: {
              increment: newAmount
            }
          }
        });
        // Update the accounting transaction record
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[71]++;
        await tx.transaction.update({
          where: {
            id: relatedTxn.id
          },
          data: {
            accountId: appliedAccountId,
            amount: new _client.Prisma.Decimal(newAmount),
            description: `Payment received from ${
            /* istanbul ignore next */
            (cov_2l5rqpdkxm().b[31][0]++, existingPayment.customer?.name) ??
            /* istanbul ignore next */
            (cov_2l5rqpdkxm().b[31][1]++, "Customer")} - Invoice ${existingPayment.invoice.invoiceNumber}`
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2l5rqpdkxm().b[27][1]++;
      }
      // Update the payment record itself
      const updatedPayment =
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().s[72]++, await tx.payment.update({
        where: {
          id
        },
        data: {
          amount: newAmount,
          paymentMethod: newPaymentMethod,
          referenceNumber: newReference,
          accountId: newAccountId
        },
        include: {
          receipt: true,
          account: true,
          customer: true,
          invoice: true
        }
      }));
      // If payment has a receipt, recalculate invoice status
      /* istanbul ignore next */
      cov_2l5rqpdkxm().s[73]++;
      if (updatedPayment.receipt) {
        /* istanbul ignore next */
        cov_2l5rqpdkxm().b[32][0]++;
        const aggregate =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[74]++, await tx.payment.aggregate({
          where: {
            invoiceId: updatedPayment.invoiceId,
            receipt: {
              isNot: null
            }
          },
          _sum: {
            amount: true
          }
        }));
        const invoiceInfo =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[75]++, await tx.invoice.findUnique({
          where: {
            id: updatedPayment.invoiceId
          },
          select: {
            total: true
          }
        }));
        const paid =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[76]++,
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[33][0]++, aggregate._sum.amount) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[33][1]++, 0));
        const invoiceTotal =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[77]++,
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[34][0]++, invoiceInfo?.total) ||
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().b[34][1]++, 0));
        let newStatus =
        /* istanbul ignore next */
        (cov_2l5rqpdkxm().s[78]++, "pending");
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[79]++;
        if (paid >= invoiceTotal) {
          /* istanbul ignore next */
          cov_2l5rqpdkxm().b[35][0]++;
          cov_2l5rqpdkxm().s[80]++;
          newStatus = "paid";
        } else {
          /* istanbul ignore next */
          cov_2l5rqpdkxm().b[35][1]++;
          cov_2l5rqpdkxm().s[81]++;
          if (paid > 0) {
            /* istanbul ignore next */
            cov_2l5rqpdkxm().b[36][0]++;
            cov_2l5rqpdkxm().s[82]++;
            newStatus = "partial";
          } else
          /* istanbul ignore next */
          {
            cov_2l5rqpdkxm().b[36][1]++;
          }
        }
        /* istanbul ignore next */
        cov_2l5rqpdkxm().s[83]++;
        await tx.invoice.update({
          where: {
            id: updatedPayment.invoiceId
          },
          data: {
            status: newStatus
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2l5rqpdkxm().b[32][1]++;
      }
      cov_2l5rqpdkxm().s[84]++;
      return updatedPayment;
    }));
    // Log UPDATE action in Audit Trail
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[85]++;
    await _auditService.auditService.logAction({
      action: "UPDATE",
      entity: "Payment",
      entityId: result.id,
      userId:
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[37][0]++, userIdForUpdate) ??
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[37][1]++, undefined),
      details: {
        changes: updateData
      }
    });
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[86]++;
    return _server.NextResponse.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[87]++;
    console.error("Error updating payment:", error);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[88]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating payment",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[38][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[38][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_2l5rqpdkxm().f[7]++;
  cov_2l5rqpdkxm().s[89]++;
  try {
    // Fetch all payments with related invoice, customer, and account info
    const payments =
    /* istanbul ignore next */
    (cov_2l5rqpdkxm().s[90]++, await _prisma.prisma.payment.findMany({
      include: {
        invoice: true,
        customer: true,
        account: true
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[91]++;
    return _server.NextResponse.json(payments);
  } catch (error) {
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[92]++;
    console.error("Error fetching payments:", error);
    /* istanbul ignore next */
    cov_2l5rqpdkxm().s[93]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching payments",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[39][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l5rqpdkxm().b[39][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,