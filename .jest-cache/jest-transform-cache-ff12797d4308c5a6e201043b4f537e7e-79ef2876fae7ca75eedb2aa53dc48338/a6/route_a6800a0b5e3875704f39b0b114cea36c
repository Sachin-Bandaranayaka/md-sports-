2a40c541a2939991104e57e5ab8e0e3c
"use strict";

/* istanbul ignore next */
function cov_2p0x2nd3q8() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/inventory/route.ts";
  var hash = "05271749c4526753681f1d9328215f7df4d8fd90";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/inventory/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "6": {
        start: {
          line: 16,
          column: 31
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "7": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "8": {
        start: {
          line: 38,
          column: 55
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "9": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "10": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 72
        }
      },
      "11": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 46
          },
          end: {
            line: 38,
            column: 47
          }
        },
        loc: {
          start: {
            line: 38,
            column: 55
          },
          end: {
            line: 47,
            column: 13
          }
        },
        line: 38
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 53
          }
        }, {
          start: {
            line: 42,
            column: 57
          },
          end: {
            line: 42,
            column: 62
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/inventory/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        // TODO: Implement inventory status report logic\n        const inventoryItems = await prisma.inventoryItem.findMany({\n            include: {\n                product: {\n                    include: {\n                        category: true,\n                    }\n                },\n                shop: true,\n            },\n            orderBy: [\n                { shop: { name: 'asc' } },\n                { product: { name: 'asc' } },\n            ]\n        });\n\n        const reportData = inventoryItems.map(item => ({\n            productName: item.product.name,\n            sku: item.product.sku,\n            barcode: item.product.barcode,\n            category: item.product.category?.name || 'N/A',\n            shopName: item.shop.name,\n            quantity: item.quantity,\n            price: item.product.price, // Assuming 'price' on Product is the current retail price\n            totalValue: item.quantity * item.product.price,\n            // Add other relevant fields from item.product or item.shop as needed\n        }));\n\n        return NextResponse.json({\n            success: true,\n            // Summary might not be applicable here, or could be total items, total value etc.\n            // For now, just returning the detailed list.\n            details: reportData,\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error) {\n        console.error('Error fetching inventory status report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch inventory status report' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "request", "inventoryItems", "prisma", "inventoryItem", "findMany", "include", "product", "category", "shop", "orderBy", "name", "reportData", "map", "item", "productName", "sku", "barcode", "shopName", "quantity", "price", "totalValue", "NextResponse", "json", "success", "details", "generatedAt", "Date", "toISOString", "error", "console", "message", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA,IAAIC,OAAgB;IACtC,IAAI;QACA,gDAAgD;QAChD,MAAMC,iBAAiB,MAAMC,cAAM,CAACC,aAAa,CAACC,QAAQ,CAAC;YACvDC,SAAS;gBACLC,SAAS;oBACLD,SAAS;wBACLE,UAAU;oBACd;gBACJ;gBACAC,MAAM;YACV;YACAC,SAAS;gBACL;oBAAED,MAAM;wBAAEE,MAAM;oBAAM;gBAAE;gBACxB;oBAAEJ,SAAS;wBAAEI,MAAM;oBAAM;gBAAE;aAC9B;QACL;QAEA,MAAMC,aAAaV,eAAeW,GAAG,CAACC,CAAAA,OAAS,CAAA;gBAC3CC,aAAaD,KAAKP,OAAO,CAACI,IAAI;gBAC9BK,KAAKF,KAAKP,OAAO,CAACS,GAAG;gBACrBC,SAASH,KAAKP,OAAO,CAACU,OAAO;gBAC7BT,UAAUM,KAAKP,OAAO,CAACC,QAAQ,EAAEG,QAAQ;gBACzCO,UAAUJ,KAAKL,IAAI,CAACE,IAAI;gBACxBQ,UAAUL,KAAKK,QAAQ;gBACvBC,OAAON,KAAKP,OAAO,CAACa,KAAK;gBACzBC,YAAYP,KAAKK,QAAQ,GAAGL,KAAKP,OAAO,CAACa,KAAK;YAElD,CAAA;QAEA,OAAOE,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACT,kFAAkF;YAClF,6CAA6C;YAC7CC,SAASb;YACTc,aAAa,IAAIC,OAAOC,WAAW;QACvC;IAEJ,EAAE,OAAOC,OAAO;QACZC,QAAQD,KAAK,CAAC,2CAA2CA;QACzD,OAAOP,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOO,SAAS;QAA0C,GACrE;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "05271749c4526753681f1d9328215f7df4d8fd90"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2p0x2nd3q8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2p0x2nd3q8();
cov_2p0x2nd3q8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2p0x2nd3q8().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2p0x2nd3q8().f[0]++;
    cov_2p0x2nd3q8().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2p0x2nd3q8().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2p0x2nd3q8().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_2p0x2nd3q8().f[1]++;
  cov_2p0x2nd3q8().s[5]++;
  try {
    // TODO: Implement inventory status report logic
    const inventoryItems =
    /* istanbul ignore next */
    (cov_2p0x2nd3q8().s[6]++, await _prisma.prisma.inventoryItem.findMany({
      include: {
        product: {
          include: {
            category: true
          }
        },
        shop: true
      },
      orderBy: [{
        shop: {
          name: "asc"
        }
      }, {
        product: {
          name: "asc"
        }
      }]
    }));
    const reportData =
    /* istanbul ignore next */
    (cov_2p0x2nd3q8().s[7]++, inventoryItems.map(item => {
      /* istanbul ignore next */
      cov_2p0x2nd3q8().f[2]++;
      cov_2p0x2nd3q8().s[8]++;
      return {
        productName: item.product.name,
        sku: item.product.sku,
        barcode: item.product.barcode,
        category:
        /* istanbul ignore next */
        (cov_2p0x2nd3q8().b[0][0]++, item.product.category?.name) ||
        /* istanbul ignore next */
        (cov_2p0x2nd3q8().b[0][1]++, "N/A"),
        shopName: item.shop.name,
        quantity: item.quantity,
        price: item.product.price,
        totalValue: item.quantity * item.product.price
      };
    }));
    /* istanbul ignore next */
    cov_2p0x2nd3q8().s[9]++;
    return _server.NextResponse.json({
      success: true,
      // Summary might not be applicable here, or could be total items, total value etc.
      // For now, just returning the detailed list.
      details: reportData,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2p0x2nd3q8().s[10]++;
    console.error("Error fetching inventory status report:", error);
    /* istanbul ignore next */
    cov_2p0x2nd3q8().s[11]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch inventory status report"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnAweDJuZDNxOCIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJmIiwiaW52ZW50b3J5SXRlbXMiLCJfcHJpc21hIiwicHJpc21hIiwiaW52ZW50b3J5SXRlbSIsImZpbmRNYW55IiwiaW5jbHVkZSIsInByb2R1Y3QiLCJjYXRlZ29yeSIsInNob3AiLCJvcmRlckJ5IiwibmFtZSIsInJlcG9ydERhdGEiLCJtYXAiLCJpdGVtIiwicHJvZHVjdE5hbWUiLCJza3UiLCJiYXJjb2RlIiwiYiIsInNob3BOYW1lIiwicXVhbnRpdHkiLCJwcmljZSIsInRvdGFsVmFsdWUiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN1Y2Nlc3MiLCJkZXRhaWxzIiwiZ2VuZXJhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9yZXBvcnRzL2ludmVudG9yeS9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgaW52ZW50b3J5IHN0YXR1cyByZXBvcnQgbG9naWNcbiAgICAgICAgY29uc3QgaW52ZW50b3J5SXRlbXMgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kTWFueSh7XG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgcHJvZHVjdDoge1xuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2hvcDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmRlckJ5OiBbXG4gICAgICAgICAgICAgICAgeyBzaG9wOiB7IG5hbWU6ICdhc2MnIH0gfSxcbiAgICAgICAgICAgICAgICB7IHByb2R1Y3Q6IHsgbmFtZTogJ2FzYycgfSB9LFxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXBvcnREYXRhID0gaW52ZW50b3J5SXRlbXMubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgICAgIHByb2R1Y3ROYW1lOiBpdGVtLnByb2R1Y3QubmFtZSxcbiAgICAgICAgICAgIHNrdTogaXRlbS5wcm9kdWN0LnNrdSxcbiAgICAgICAgICAgIGJhcmNvZGU6IGl0ZW0ucHJvZHVjdC5iYXJjb2RlLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGl0ZW0ucHJvZHVjdC5jYXRlZ29yeT8ubmFtZSB8fCAnTi9BJyxcbiAgICAgICAgICAgIHNob3BOYW1lOiBpdGVtLnNob3AubmFtZSxcbiAgICAgICAgICAgIHF1YW50aXR5OiBpdGVtLnF1YW50aXR5LFxuICAgICAgICAgICAgcHJpY2U6IGl0ZW0ucHJvZHVjdC5wcmljZSwgLy8gQXNzdW1pbmcgJ3ByaWNlJyBvbiBQcm9kdWN0IGlzIHRoZSBjdXJyZW50IHJldGFpbCBwcmljZVxuICAgICAgICAgICAgdG90YWxWYWx1ZTogaXRlbS5xdWFudGl0eSAqIGl0ZW0ucHJvZHVjdC5wcmljZSxcbiAgICAgICAgICAgIC8vIEFkZCBvdGhlciByZWxldmFudCBmaWVsZHMgZnJvbSBpdGVtLnByb2R1Y3Qgb3IgaXRlbS5zaG9wIGFzIG5lZWRlZFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAvLyBTdW1tYXJ5IG1pZ2h0IG5vdCBiZSBhcHBsaWNhYmxlIGhlcmUsIG9yIGNvdWxkIGJlIHRvdGFsIGl0ZW1zLCB0b3RhbCB2YWx1ZSBldGMuXG4gICAgICAgICAgICAvLyBGb3Igbm93LCBqdXN0IHJldHVybmluZyB0aGUgZGV0YWlsZWQgbGlzdC5cbiAgICAgICAgICAgIGRldGFpbHM6IHJlcG9ydERhdGEsXG4gICAgICAgICAgICBnZW5lcmF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9KTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGludmVudG9yeSBzdGF0dXMgcmVwb3J0OicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBpbnZlbnRvcnkgc3RhdHVzIHJlcG9ydCcgfSxcbiAgICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgICApO1xuICAgIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNUTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtB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