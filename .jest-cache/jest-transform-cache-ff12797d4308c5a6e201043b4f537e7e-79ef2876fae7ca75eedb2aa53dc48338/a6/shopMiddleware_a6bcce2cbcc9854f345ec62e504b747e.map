{"version":3,"names":["ShopAccessControl","cov_k8426yhnu","f","s","canAccessAllShops","getRequestShopId","validateShopAccess","req","targetShopId","userShopId","_auth","getShopIdFromToken","_userId","getUserIdFromToken","token","headers","get","split","b","hasAccess","isAdmin","shopManagePermission","validateTokenPermission","adminAllPermission","userManagePermission","isValid","String","error","undefined","console","getEffectiveShopId","requestedShopId","accessResult","shopId","isFiltered","shopIdStr","createAccessDeniedResponse","message","_server","NextResponse","json","success","status","withShopAccess","handler","url","URL","searchParams","shopResult","buildShopFilter","context","buildInventoryShopFilter","inventoryItems","some","validateShopExists","shop","_prisma","default","findUnique","where","id","queryShopId","parseInt"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/utils/shopMiddleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateTokenPermission, getUserIdFromToken, getShopIdFromToken } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\n\n/**\n * Shop-based access control middleware for API routes\n */\nexport class ShopAccessControl {\n    /**\n     * Validate if user can access data from a specific shop\n     */\n    static async validateShopAccess(req: NextRequest, targetShopId?: string | number): Promise<{\n        hasAccess: boolean;\n        userShopId: string | null;\n        isAdmin: boolean;\n        error?: string;\n    }> {\n        try {\n            const userShopId = await getShopIdFromToken(req);\n            const _userId = await getUserIdFromToken(req);\n\n            // Development mode - allow all access\n            const token = req.headers.get('authorization')?.split(' ')[1];\n            if (token === 'dev-token') {\n                return { hasAccess: true, userShopId: null, isAdmin: true };\n            }\n\n            // Check if user has admin permissions for cross-shop access\n            const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n            const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n            const userManagePermission = await validateTokenPermission(req, 'user:manage');\n\n            const isAdmin = shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n\n            // If no target shop specified, allow access\n            if (!targetShopId) {\n                return { hasAccess: true, userShopId, isAdmin };\n            }\n\n            // Admins can access any shop\n            if (isAdmin) {\n                return { hasAccess: true, userShopId, isAdmin };\n            }\n\n            // Check if user belongs to the target shop\n            // Handle both string and number shop IDs\n            let hasAccess = false;\n            if (typeof targetShopId === 'string' && typeof userShopId === 'string') {\n                hasAccess = userShopId === targetShopId;\n            } else if (typeof targetShopId === 'number' && typeof userShopId === 'number') {\n                hasAccess = userShopId === targetShopId;\n            } else {\n                // Convert both to strings for comparison\n                hasAccess = String(userShopId) === String(targetShopId);\n            }\n\n            return {\n                hasAccess,\n                userShopId,\n                isAdmin,\n                error: hasAccess ? undefined : 'Access denied: You can only access data from your assigned shop'\n            };\n\n        } catch (error) {\n            console.error('Error validating shop access:', error);\n            return {\n                hasAccess: false,\n                userShopId: null,\n                isAdmin: false,\n                error: 'Failed to validate shop access'\n            };\n        }\n    }\n\n    /**\n     * Get the effective shop ID for filtering data\n     * Returns user's shop ID if they're restricted, or the requested shop ID if they're admin\n     */\n    static async getEffectiveShopId(req: NextRequest, requestedShopId?: string | number): Promise<{\n        shopId: string | null;\n        isFiltered: boolean;\n        error?: string;\n    }> {\n        const accessResult = await this.validateShopAccess(req, requestedShopId);\n\n        if (!accessResult.hasAccess) {\n            return {\n                shopId: null,\n                isFiltered: false,\n                error: accessResult.error\n            };\n        }\n\n        // If user is admin and requested a specific shop, use that\n        if (accessResult.isAdmin && requestedShopId) {\n            const shopIdStr = String(requestedShopId);\n            return {\n                shopId: shopIdStr,\n                isFiltered: true\n            };\n        }\n\n        // If user is not admin, use their shop ID\n        if (!accessResult.isAdmin && accessResult.userShopId) {\n            return {\n                shopId: accessResult.userShopId,\n                isFiltered: true\n            };\n        }\n\n        // Admin with no specific shop requested - no filtering\n        return {\n            shopId: null,\n            isFiltered: false\n        };\n    }\n\n    /**\n     * Create a standardized error response for shop access violations\n     */\n    static createAccessDeniedResponse(message?: string): NextResponse {\n        return NextResponse.json({\n            success: false,\n            message: message || 'Access denied: You can only access data from your assigned shop'\n        }, { status: 403 });\n    }\n\n    /**\n     * Middleware wrapper for API routes that need shop-based filtering\n     */\n    static withShopAccess(handler: (req: NextRequest, context: {\n        shopId: string | null;\n        isFiltered: boolean;\n        userShopId: string | null;\n        isAdmin: boolean;\n    }) => Promise<NextResponse>) {\n        return async (req: NextRequest) => {\n            try {\n                // Extract shopId from query parameters\n                const url = new URL(req.url);\n                const requestedShopId = url.searchParams.get('shopId');\n\n                // Get effective shop ID for filtering\n                const shopResult = await this.getEffectiveShopId(req, requestedShopId || undefined);\n\n                if (shopResult.error) {\n                    return this.createAccessDeniedResponse(shopResult.error);\n                }\n\n                // Get user context\n                const userShopId = await getShopIdFromToken(req);\n\n                const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n                const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n                const userManagePermission = await validateTokenPermission(req, 'user:manage');\n\n                const isAdmin = shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n\n                // Call the handler with shop context\n                return await handler(req, {\n                    shopId: shopResult.shopId,\n                    isFiltered: shopResult.isFiltered,\n                    userShopId,\n                    isAdmin\n                });\n\n            } catch (error) {\n                console.error('Shop access middleware error:', error);\n                return NextResponse.json({\n                    success: false,\n                    message: 'Internal server error'\n                }, { status: 500 });\n            }\n        };\n    }\n\n    /**\n     * Helper to build Prisma where clauses with shop filtering\n     */\n    static buildShopFilter(context: { shopId: string | null; isFiltered: boolean }) {\n        if (!context.isFiltered || !context.shopId) {\n            return {};\n        }\n\n        return {\n            shopId: context.shopId\n        };\n    }\n\n    /**\n     * Helper to build Prisma where clauses for inventory items with shop filtering\n     */\n    static buildInventoryShopFilter(shopId: string | null, isFiltered: boolean) {\n        if (!isFiltered || !shopId) {\n            return {};\n        }\n\n        return {\n            inventoryItems: {\n                some: {\n                    shopId: shopId\n                }\n            }\n        };\n    }\n\n    /**\n     * Helper to validate shop exists and user has access\n     */\n    static async validateShopExists(shopId: number): Promise<boolean> {\n        try {\n            const shop = await prisma.shop.findUnique({\n                where: { id: shopId }\n            });\n            return !!shop;\n        } catch (error) {\n            console.error('Error validating shop exists:', error);\n            return false;\n        }\n    }\n}\n\n/**\n * Utility function to extract shop ID from request (query param or user's shop)\n */\nexport async function getRequestShopId(req: NextRequest): Promise<number | null> {\n    const url = new URL(req.url);\n    const queryShopId = url.searchParams.get('shopId');\n\n    if (queryShopId) {\n        return parseInt(queryShopId);\n    }\n\n    return getShopIdFromToken(req);\n}\n\n/**\n * Utility function to check if user can perform cross-shop operations\n */\nexport async function canAccessAllShops(req: NextRequest): Promise<boolean> {\n    const token = req.headers.get('authorization')?.split(' ')[1];\n    if (token === 'dev-token') {\n        return true;\n    }\n\n    const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n    const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n    const userManagePermission = await validateTokenPermission(req, 'user:manage');\n\n    return shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n}"],"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","ignoreList":[]}