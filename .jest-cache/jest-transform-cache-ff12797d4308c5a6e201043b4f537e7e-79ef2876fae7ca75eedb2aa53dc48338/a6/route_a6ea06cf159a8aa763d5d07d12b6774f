43735d8741f16b1aa45c91f2fa4fddbe
"use strict";

/* istanbul ignore next */
function cov_224nkb6iqt() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/customers/route.ts";
  var hash = "2e6bc3f45799e6010a048cd5b74c59fc2532d256";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/customers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 46
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 63
        }
      },
      "10": {
        start: {
          line: 23,
          column: 14
        },
        end: {
          line: 23,
          column: 42
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "13": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "14": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "15": {
        start: {
          line: 52,
          column: 34
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "16": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 54
        }
      },
      "17": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 60
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "20": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "21": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 75,
          column: 96
        }
      },
      "22": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 31
        }
      },
      "24": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "25": {
        start: {
          line: 80,
          column: 29
        },
        end: {
          line: 80,
          column: 49
        }
      },
      "26": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 82,
          column: 87
        }
      },
      "27": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "28": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 31
        }
      },
      "29": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "30": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 71
        }
      },
      "32": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "33": {
        start: {
          line: 91,
          column: 37
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "34": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "35": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "36": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 117,
          column: 10
        }
      },
      "37": {
        start: {
          line: 119,
          column: 22
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "38": {
        start: {
          line: 120,
          column: 21
        },
        end: {
          line: 120,
          column: 25
        }
      },
      "39": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "40": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "41": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "42": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 73
        }
      },
      "43": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 71
        }
      },
      "44": {
        start: {
          line: 130,
          column: 29
        },
        end: {
          line: 130,
          column: 69
        }
      },
      "45": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "46": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "47": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 57
        }
      },
      "48": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 48
          },
          end: {
            line: 52,
            column: 49
          }
        },
        loc: {
          start: {
            line: 52,
            column: 60
          },
          end: {
            line: 60,
            column: 9
          }
        },
        line: 52
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 19
          }
        },
        loc: {
          start: {
            line: 73,
            column: 29
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 73
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 56,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 56,
            column: 69
          }
        }, {
          start: {
            line: 56,
            column: 72
          },
          end: {
            line: 56,
            column: 76
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 57
          }
        }, {
          start: {
            line: 67,
            column: 60
          },
          end: {
            line: 67,
            column: 73
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 65
          },
          end: {
            line: 82,
            column: 76
          }
        }, {
          start: {
            line: 82,
            column: 79
          },
          end: {
            line: 82,
            column: 87
          }
        }],
        line: 82
      },
      "4": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 62
          }
        }, {
          start: {
            line: 86,
            column: 66
          },
          end: {
            line: 86,
            column: 67
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 62
          }
        }, {
          start: {
            line: 87,
            column: 66
          },
          end: {
            line: 87,
            column: 70
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 30
          }
        }, {
          start: {
            line: 90,
            column: 34
          },
          end: {
            line: 90,
            column: 59
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 23
          },
          end: {
            line: 110,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 23
          },
          end: {
            line: 110,
            column: 41
          }
        }, {
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 110,
            column: 49
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 23
          },
          end: {
            line: 111,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 23
          },
          end: {
            line: 111,
            column: 41
          }
        }, {
          start: {
            line: 111,
            column: 45
          },
          end: {
            line: 111,
            column: 49
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 45
          }
        }, {
          start: {
            line: 112,
            column: 49
          },
          end: {
            line: 112,
            column: 53
          }
        }],
        line: 112
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 124,
            column: 25
          },
          end: {
            line: 124,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 43
          },
          end: {
            line: 124,
            column: 65
          }
        }, {
          start: {
            line: 124,
            column: 68
          },
          end: {
            line: 124,
            column: 72
          }
        }],
        line: 124
      },
      "15": {
        loc: {
          start: {
            line: 158,
            column: 19
          },
          end: {
            line: 158,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 44
          },
          end: {
            line: 158,
            column: 57
          }
        }, {
          start: {
            line: 158,
            column: 60
          },
          end: {
            line: 158,
            column: 73
          }
        }],
        line: 158
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/customers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\nexport async function GET() {\n    try {\n        // Get IDs of soft-deleted customers\n        const auditService = AuditService.getInstance();\n        const deletedCustomerIds = await auditService.getDeletedEntityIds('Customer');\n\n        // Fetch customers from database using Prisma\n        const customers = await prisma.customer.findMany({\n            where: {\n                id: {\n                    notIn: deletedCustomerIds\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            },\n            include: {\n                invoices: {\n                    orderBy: {\n                        createdAt: 'desc'\n                    },\n                    take: 1,\n                    select: {\n                        createdAt: true\n                    }\n                }\n            }\n        });\n\n        // Add lastPurchaseDate field to each customer\n        const enrichedCustomers = customers.map(customer => {\n            const lastInvoice = customer.invoices?.[0];\n            return {\n                ...customer,\n                lastPurchaseDate: lastInvoice ? lastInvoice.createdAt : null,\n                // Remove the invoices array from the response to keep it clean\n                invoices: undefined\n            };\n        });\n\n        return NextResponse.json(enrichedCustomers);\n    } catch (error) {\n        console.error('Error fetching customers:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching customers',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function POST(request: NextRequest) {\n    // Check for 'customer:create' permission\n    const permissionError = await requirePermission('customer:create')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const customerData = await request.json();\n\n        // Validate and transform incoming data\n        const type = customerData.customerType === 'Wholesale' ? 'wholesale' : 'retail';\n        let creditLimit = null;\n        let creditPeriod = null;\n\n        if (type === 'wholesale') {\n            creditLimit = parseFloat(customerData.creditLimit) || 0;\n            creditPeriod = parseInt(customerData.creditPeriod) || null;\n        }\n\n        // Check for duplicate mobile number if phone is provided\n        if (customerData.phone && customerData.phone.trim()) {\n            const existingCustomer = await prisma.customer.findFirst({\n                where: {\n                    phone: customerData.phone.trim()\n                }\n            });\n\n            if (existingCustomer) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'A customer with this mobile number already exists',\n                        error: 'Duplicate mobile number'\n                    },\n                    { status: 400 }\n                );\n            }\n        }\n\n        // Create new customer using Prisma\n        const customer = await prisma.customer.create({\n            data: {\n                name: customerData.name,\n                email: customerData.email || null,\n                phone: customerData.phone || null,\n                address: customerData.address || null, // Store address as a simple string\n                customerType: type, // Changed from type to customerType\n                creditLimit: creditLimit,\n                creditPeriod: creditPeriod,\n                // taxId and notes are removed as they are not in the Customer model\n                // The JSON blob for address is removed\n            }\n        });\n\n        // Get token for audit logging\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        let userId: number | null = null;\n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                userId = decoded?.userId ? Number(decoded.userId) : null;\n            } catch (error) {\n                console.warn('Failed to get userId for audit logging');\n            }\n        }\n\n        // Log CREATE action\n        const auditService = AuditService.getInstance();\n        await auditService.logAction({\n            userId,\n            action: 'CREATE',\n            entity: 'Customer',\n            entityId: customer.id,\n            details: {\n                name: customer.name,\n                email: customer.email,\n                phone: customer.phone,\n                address: customer.address,\n                customerType: customer.customerType,\n                creditLimit: customer.creditLimit,\n                creditPeriod: customer.creditPeriod\n            }\n        });\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Customer created successfully',\n                data: customer\n            },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error creating customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error creating customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "auditService", "AuditService", "getInstance", "deletedCustomerIds", "getDeletedEntityIds", "customers", "prisma", "customer", "findMany", "where", "id", "notIn", "orderBy", "name", "include", "invoices", "createdAt", "take", "select", "enrichedCustomers", "map", "lastInvoice", "lastPurchaseDate", "undefined", "NextResponse", "json", "error", "console", "success", "message", "Error", "String", "status", "request", "permissionError", "requirePermission", "customerData", "type", "customerType", "creditLimit", "creditPeriod", "parseFloat", "parseInt", "phone", "trim", "existingCustomer", "findFirst", "create", "data", "email", "address", "token", "headers", "get", "replace", "userId", "decoded", "verifyToken", "Number", "warn", "logAction", "action", "entity", "entityId", "details"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2e6bc3f45799e6010a048cd5b74c59fc2532d256"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_224nkb6iqt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_224nkb6iqt();
cov_224nkb6iqt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_224nkb6iqt().f[0]++;
  cov_224nkb6iqt().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_224nkb6iqt().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_224nkb6iqt().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_224nkb6iqt().f[1]++;
    cov_224nkb6iqt().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_224nkb6iqt().f[2]++;
    cov_224nkb6iqt().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_224nkb6iqt().s[6]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_224nkb6iqt().s[7]++, require("../../../lib/utils/middleware"));
const _prisma =
/* istanbul ignore next */
(cov_224nkb6iqt().s[8]++, require("../../../lib/prisma"));
const _auditService =
/* istanbul ignore next */
(cov_224nkb6iqt().s[9]++, require("../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_224nkb6iqt().s[10]++, require("../../../lib/auth"));
async function GET() {
  /* istanbul ignore next */
  cov_224nkb6iqt().f[3]++;
  cov_224nkb6iqt().s[11]++;
  try {
    // Get IDs of soft-deleted customers
    const auditService =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[12]++, _auditService.AuditService.getInstance());
    const deletedCustomerIds =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[13]++, await auditService.getDeletedEntityIds("Customer"));
    // Fetch customers from database using Prisma
    const customers =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[14]++, await _prisma.prisma.customer.findMany({
      where: {
        id: {
          notIn: deletedCustomerIds
        }
      },
      orderBy: {
        name: "asc"
      },
      include: {
        invoices: {
          orderBy: {
            createdAt: "desc"
          },
          take: 1,
          select: {
            createdAt: true
          }
        }
      }
    }));
    // Add lastPurchaseDate field to each customer
    const enrichedCustomers =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[15]++, customers.map(customer => {
      /* istanbul ignore next */
      cov_224nkb6iqt().f[4]++;
      const lastInvoice =
      /* istanbul ignore next */
      (cov_224nkb6iqt().s[16]++, customer.invoices?.[0]);
      /* istanbul ignore next */
      cov_224nkb6iqt().s[17]++;
      return {
        ...customer,
        lastPurchaseDate: lastInvoice ?
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[0][0]++, lastInvoice.createdAt) :
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[0][1]++, null),
        // Remove the invoices array from the response to keep it clean
        invoices: undefined
      };
    }));
    /* istanbul ignore next */
    cov_224nkb6iqt().s[18]++;
    return _server.NextResponse.json(enrichedCustomers);
  } catch (error) {
    /* istanbul ignore next */
    cov_224nkb6iqt().s[19]++;
    console.error("Error fetching customers:", error);
    /* istanbul ignore next */
    cov_224nkb6iqt().s[20]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching customers",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[1][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_224nkb6iqt().f[5]++;
  // Check for 'customer:create' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_224nkb6iqt().s[21]++, await (0, _middleware.requirePermission)("customer:create")(request));
  /* istanbul ignore next */
  cov_224nkb6iqt().s[22]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_224nkb6iqt().b[2][0]++;
    cov_224nkb6iqt().s[23]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_224nkb6iqt().b[2][1]++;
  }
  cov_224nkb6iqt().s[24]++;
  try {
    const customerData =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[25]++, await request.json());
    // Validate and transform incoming data
    const type =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[26]++, customerData.customerType === "Wholesale" ?
    /* istanbul ignore next */
    (cov_224nkb6iqt().b[3][0]++, "wholesale") :
    /* istanbul ignore next */
    (cov_224nkb6iqt().b[3][1]++, "retail"));
    let creditLimit =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[27]++, null);
    let creditPeriod =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[28]++, null);
    /* istanbul ignore next */
    cov_224nkb6iqt().s[29]++;
    if (type === "wholesale") {
      /* istanbul ignore next */
      cov_224nkb6iqt().b[4][0]++;
      cov_224nkb6iqt().s[30]++;
      creditLimit =
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[5][0]++, parseFloat(customerData.creditLimit)) ||
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[5][1]++, 0);
      /* istanbul ignore next */
      cov_224nkb6iqt().s[31]++;
      creditPeriod =
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[6][0]++, parseInt(customerData.creditPeriod)) ||
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[6][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_224nkb6iqt().b[4][1]++;
    }
    // Check for duplicate mobile number if phone is provided
    cov_224nkb6iqt().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_224nkb6iqt().b[8][0]++, customerData.phone) &&
    /* istanbul ignore next */
    (cov_224nkb6iqt().b[8][1]++, customerData.phone.trim())) {
      /* istanbul ignore next */
      cov_224nkb6iqt().b[7][0]++;
      const existingCustomer =
      /* istanbul ignore next */
      (cov_224nkb6iqt().s[33]++, await _prisma.prisma.customer.findFirst({
        where: {
          phone: customerData.phone.trim()
        }
      }));
      /* istanbul ignore next */
      cov_224nkb6iqt().s[34]++;
      if (existingCustomer) {
        /* istanbul ignore next */
        cov_224nkb6iqt().b[9][0]++;
        cov_224nkb6iqt().s[35]++;
        return _server.NextResponse.json({
          success: false,
          message: "A customer with this mobile number already exists",
          error: "Duplicate mobile number"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_224nkb6iqt().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_224nkb6iqt().b[7][1]++;
    }
    // Create new customer using Prisma
    const customer =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[36]++, await _prisma.prisma.customer.create({
      data: {
        name: customerData.name,
        email:
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[10][0]++, customerData.email) ||
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[10][1]++, null),
        phone:
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[11][0]++, customerData.phone) ||
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[11][1]++, null),
        address:
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[12][0]++, customerData.address) ||
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[12][1]++, null),
        customerType: type,
        creditLimit: creditLimit,
        creditPeriod: creditPeriod
      }
    }));
    // Get token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[37]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    let userId =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[38]++, null);
    /* istanbul ignore next */
    cov_224nkb6iqt().s[39]++;
    if (token) {
      /* istanbul ignore next */
      cov_224nkb6iqt().b[13][0]++;
      cov_224nkb6iqt().s[40]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_224nkb6iqt().s[41]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_224nkb6iqt().s[42]++;
        userId = decoded?.userId ?
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[14][0]++, Number(decoded.userId)) :
        /* istanbul ignore next */
        (cov_224nkb6iqt().b[14][1]++, null);
      } catch (error) {
        /* istanbul ignore next */
        cov_224nkb6iqt().s[43]++;
        console.warn("Failed to get userId for audit logging");
      }
    } else
    /* istanbul ignore next */
    {
      cov_224nkb6iqt().b[13][1]++;
    }
    // Log CREATE action
    const auditService =
    /* istanbul ignore next */
    (cov_224nkb6iqt().s[44]++, _auditService.AuditService.getInstance());
    /* istanbul ignore next */
    cov_224nkb6iqt().s[45]++;
    await auditService.logAction({
      userId,
      action: "CREATE",
      entity: "Customer",
      entityId: customer.id,
      details: {
        name: customer.name,
        email: customer.email,
        phone: customer.phone,
        address: customer.address,
        customerType: customer.customerType,
        creditLimit: customer.creditLimit,
        creditPeriod: customer.creditPeriod
      }
    });
    /* istanbul ignore next */
    cov_224nkb6iqt().s[46]++;
    return _server.NextResponse.json({
      success: true,
      message: "Customer created successfully",
      data: customer
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_224nkb6iqt().s[47]++;
    console.error("Error creating customer:", error);
    /* istanbul ignore next */
    cov_224nkb6iqt().s[48]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_224nkb6iqt().b[15][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,