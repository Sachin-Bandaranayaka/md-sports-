4dc73e18e8f555ca20ffbb47566eab46
"use strict";

/* istanbul ignore next */
function cov_1tvxh8ne70() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/suppliers/route.ts";
  var hash = "1d8b4bb5ebc9dfd2671831a5b971f17894d6afcd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/suppliers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "8": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 63
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 61
        }
      },
      "13": {
        start: {
          line: 32,
          column: 35
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "14": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 58
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "18": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "19": {
        start: {
          line: 59,
          column: 21
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "20": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "21": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 55
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 57
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 57,
            column: 19
          }
        },
        loc: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 57
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 38
          }
        }, {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 14
          }
        }, {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 32
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/suppliers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag } from 'next/cache';\nimport prisma from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\n\n// GET /api/suppliers - Get all suppliers\nexport async function GET(_request: NextRequest) {\n    try {\n        // Get IDs of soft-deleted suppliers\n        const auditService = new AuditService();\n        const deletedSupplierIds = await auditService.getDeletedEntityIds('Supplier');\n\n        const suppliers = await prisma.supplier.findMany({\n            where: {\n                id: {\n                    notIn: deletedSupplierIds\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(suppliers, {\n            headers: {\n                'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600'\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching suppliers:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch suppliers' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/suppliers - Create a new supplier\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        const supplier = await prisma.supplier.create({\n            data: body\n        });\n\n        // Invalidate suppliers cache to ensure fresh data\n        revalidateTag('suppliers');\n        \n        // Also invalidate purchase invoice pages that might cache supplier data\n        revalidateTag('purchase-invoices');\n\n        return NextResponse.json(supplier, { status: 201 });\n    } catch (error) {\n        console.error('Error creating supplier:', error);\n        return NextResponse.json(\n            { error: 'Failed to create supplier' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "_request", "auditService", "AuditService", "deletedSupplierIds", "getDeletedEntityIds", "suppliers", "prisma", "supplier", "findMany", "where", "id", "notIn", "orderBy", "createdAt", "NextResponse", "json", "headers", "error", "console", "status", "request", "body", "create", "data", "revalidateTag"],
      mappings: ";;;;;;;;;;;IAMsBA,GAAG;eAAHA;;IAgCAC,IAAI;eAAJA;;;wBAtCoB;uBACZ;+DACX;8BACU;;;;;;AAGtB,eAAeD,IAAIE,QAAqB;IAC3C,IAAI;QACA,oCAAoC;QACpC,MAAMC,eAAe,IAAIC,0BAAY;QACrC,MAAMC,qBAAqB,MAAMF,aAAaG,mBAAmB,CAAC;QAElE,MAAMC,YAAY,MAAMC,eAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;YAC7CC,OAAO;gBACHC,IAAI;oBACAC,OAAOR;gBACX;YACJ;YACAS,SAAS;gBACLC,WAAW;YACf;QACJ;QAEA,OAAOC,oBAAY,CAACC,IAAI,CAACV,WAAW;YAChCW,SAAS;gBACL,iBAAiB;YACrB;QACJ;IACJ,EAAE,OAAOC,OAAO;QACZC,QAAQD,KAAK,CAAC,6BAA6BA;QAC3C,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEE,OAAO;QAA4B,GACrC;YAAEE,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAepB,KAAKqB,OAAoB;IAC3C,IAAI;QACA,MAAMC,OAAO,MAAMD,QAAQL,IAAI;QAE/B,MAAMR,WAAW,MAAMD,eAAM,CAACC,QAAQ,CAACe,MAAM,CAAC;YAC1CC,MAAMF;QACV;QAEA,kDAAkD;QAClDG,IAAAA,oBAAa,EAAC;QAEd,wEAAwE;QACxEA,IAAAA,oBAAa,EAAC;QAEd,OAAOV,oBAAY,CAACC,IAAI,CAACR,UAAU;YAAEY,QAAQ;QAAI;IACrD,EAAE,OAAOF,OAAO;QACZC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEE,OAAO;QAA4B,GACrC;YAAEE,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1d8b4bb5ebc9dfd2671831a5b971f17894d6afcd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1tvxh8ne70 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tvxh8ne70();
cov_1tvxh8ne70().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1tvxh8ne70().f[0]++;
  cov_1tvxh8ne70().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1tvxh8ne70().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1tvxh8ne70().f[1]++;
    cov_1tvxh8ne70().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1tvxh8ne70().f[2]++;
    cov_1tvxh8ne70().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1tvxh8ne70().s[6]++, require("next/server"));
const _cache =
/* istanbul ignore next */
(cov_1tvxh8ne70().s[7]++, require("next/cache"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_1tvxh8ne70().s[8]++, _interop_require_default(require("../../../lib/prisma")));
const _auditService =
/* istanbul ignore next */
(cov_1tvxh8ne70().s[9]++, require("../../../services/auditService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1tvxh8ne70().f[3]++;
  cov_1tvxh8ne70().s[10]++;
  return /* istanbul ignore next */(cov_1tvxh8ne70().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1tvxh8ne70().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1tvxh8ne70().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1tvxh8ne70().b[0][1]++, {
    default: obj
  });
}
async function GET(_request) {
  /* istanbul ignore next */
  cov_1tvxh8ne70().f[4]++;
  cov_1tvxh8ne70().s[11]++;
  try {
    // Get IDs of soft-deleted suppliers
    const auditService =
    /* istanbul ignore next */
    (cov_1tvxh8ne70().s[12]++, new _auditService.AuditService());
    const deletedSupplierIds =
    /* istanbul ignore next */
    (cov_1tvxh8ne70().s[13]++, await auditService.getDeletedEntityIds("Supplier"));
    const suppliers =
    /* istanbul ignore next */
    (cov_1tvxh8ne70().s[14]++, await _prisma.default.supplier.findMany({
      where: {
        id: {
          notIn: deletedSupplierIds
        }
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[15]++;
    return _server.NextResponse.json(suppliers, {
      headers: {
        "Cache-Control": "public, s-maxage=300, stale-while-revalidate=600"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[16]++;
    console.error("Error fetching suppliers:", error);
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[17]++;
    return _server.NextResponse.json({
      error: "Failed to fetch suppliers"
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1tvxh8ne70().f[5]++;
  cov_1tvxh8ne70().s[18]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1tvxh8ne70().s[19]++, await request.json());
    const supplier =
    /* istanbul ignore next */
    (cov_1tvxh8ne70().s[20]++, await _prisma.default.supplier.create({
      data: body
    }));
    // Invalidate suppliers cache to ensure fresh data
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[21]++;
    (0, _cache.revalidateTag)("suppliers");
    // Also invalidate purchase invoice pages that might cache supplier data
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[22]++;
    (0, _cache.revalidateTag)("purchase-invoices");
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[23]++;
    return _server.NextResponse.json(supplier, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[24]++;
    console.error("Error creating supplier:", error);
    /* istanbul ignore next */
    cov_1tvxh8ne70().s[25]++;
    return _server.NextResponse.json({
      error: "Failed to create supplier"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMXR2eGg4bmU3MCIsImYiLCJzIiwiUE9TVCIsIl9yZXF1ZXN0IiwiYXVkaXRTZXJ2aWNlIiwiX2F1ZGl0U2VydmljZSIsIkF1ZGl0U2VydmljZSIsImRlbGV0ZWRTdXBwbGllcklkcyIsImdldERlbGV0ZWRFbnRpdHlJZHMiLCJzdXBwbGllcnMiLCJfcHJpc21hIiwiZGVmYXVsdCIsInN1cHBsaWVyIiwiZmluZE1hbnkiLCJ3aGVyZSIsImlkIiwibm90SW4iLCJvcmRlckJ5IiwiY3JlYXRlZEF0IiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJoZWFkZXJzIiwiZXJyb3IiLCJjb25zb2xlIiwic3RhdHVzIiwicmVxdWVzdCIsImJvZHkiLCJjcmVhdGUiLCJkYXRhIiwiX2NhY2hlIiwicmV2YWxpZGF0ZVRhZyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2FwcC9hcGkvc3VwcGxpZXJzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyByZXZhbGlkYXRlVGFnIH0gZnJvbSAnbmV4dC9jYWNoZSc7XG5pbXBvcnQgcHJpc21hIGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyBBdWRpdFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2F1ZGl0U2VydmljZSc7XG5cbi8vIEdFVCAvYXBpL3N1cHBsaWVycyAtIEdldCBhbGwgc3VwcGxpZXJzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKF9yZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCBJRHMgb2Ygc29mdC1kZWxldGVkIHN1cHBsaWVyc1xuICAgICAgICBjb25zdCBhdWRpdFNlcnZpY2UgPSBuZXcgQXVkaXRTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IGRlbGV0ZWRTdXBwbGllcklkcyA9IGF3YWl0IGF1ZGl0U2VydmljZS5nZXREZWxldGVkRW50aXR5SWRzKCdTdXBwbGllcicpO1xuXG4gICAgICAgIGNvbnN0IHN1cHBsaWVycyA9IGF3YWl0IHByaXNtYS5zdXBwbGllci5maW5kTWFueSh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgICAgICAgIG5vdEluOiBkZWxldGVkU3VwcGxpZXJJZHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogJ2Rlc2MnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihzdXBwbGllcnMsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIHMtbWF4YWdlPTMwMCwgc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZT02MDAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN1cHBsaWVyczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggc3VwcGxpZXJzJyB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vLyBQT1NUIC9hcGkvc3VwcGxpZXJzIC0gQ3JlYXRlIGEgbmV3IHN1cHBsaWVyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgICAgICBjb25zdCBzdXBwbGllciA9IGF3YWl0IHByaXNtYS5zdXBwbGllci5jcmVhdGUoe1xuICAgICAgICAgICAgZGF0YTogYm9keVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJbnZhbGlkYXRlIHN1cHBsaWVycyBjYWNoZSB0byBlbnN1cmUgZnJlc2ggZGF0YVxuICAgICAgICByZXZhbGlkYXRlVGFnKCdzdXBwbGllcnMnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFsc28gaW52YWxpZGF0ZSBwdXJjaGFzZSBpbnZvaWNlIHBhZ2VzIHRoYXQgbWlnaHQgY2FjaGUgc3VwcGxpZXIgZGF0YVxuICAgICAgICByZXZhbGlkYXRlVGFnKCdwdXJjaGFzZS1pbnZvaWNlcycpO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihzdXBwbGllciwgeyBzdGF0dXM6IDIwMSB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBzdXBwbGllcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHN1cHBsaWVyJyB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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