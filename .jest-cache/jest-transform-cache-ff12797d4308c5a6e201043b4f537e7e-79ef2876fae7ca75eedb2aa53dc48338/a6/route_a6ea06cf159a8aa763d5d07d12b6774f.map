{"version":3,"names":["GET","cov_224nkb6iqt","f","s","POST","auditService","_auditService","AuditService","getInstance","deletedCustomerIds","getDeletedEntityIds","customers","_prisma","prisma","customer","findMany","where","id","notIn","orderBy","name","include","invoices","createdAt","take","select","enrichedCustomers","map","lastInvoice","lastPurchaseDate","b","undefined","_server","NextResponse","json","error","console","success","message","Error","String","status","request","permissionError","_middleware","requirePermission","customerData","type","customerType","creditLimit","creditPeriod","parseFloat","parseInt","phone","trim","existingCustomer","findFirst","create","data","email","address","token","headers","get","replace","userId","decoded","_auth","verifyToken","Number","warn","logAction","action","entity","entityId","details"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/customers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\nexport async function GET() {\n    try {\n        // Get IDs of soft-deleted customers\n        const auditService = AuditService.getInstance();\n        const deletedCustomerIds = await auditService.getDeletedEntityIds('Customer');\n\n        // Fetch customers from database using Prisma\n        const customers = await prisma.customer.findMany({\n            where: {\n                id: {\n                    notIn: deletedCustomerIds\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            },\n            include: {\n                invoices: {\n                    orderBy: {\n                        createdAt: 'desc'\n                    },\n                    take: 1,\n                    select: {\n                        createdAt: true\n                    }\n                }\n            }\n        });\n\n        // Add lastPurchaseDate field to each customer\n        const enrichedCustomers = customers.map(customer => {\n            const lastInvoice = customer.invoices?.[0];\n            return {\n                ...customer,\n                lastPurchaseDate: lastInvoice ? lastInvoice.createdAt : null,\n                // Remove the invoices array from the response to keep it clean\n                invoices: undefined\n            };\n        });\n\n        return NextResponse.json(enrichedCustomers);\n    } catch (error) {\n        console.error('Error fetching customers:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching customers',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function POST(request: NextRequest) {\n    // Check for 'customer:create' permission\n    const permissionError = await requirePermission('customer:create')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const customerData = await request.json();\n\n        // Validate and transform incoming data\n        const type = customerData.customerType === 'Wholesale' ? 'wholesale' : 'retail';\n        let creditLimit = null;\n        let creditPeriod = null;\n\n        if (type === 'wholesale') {\n            creditLimit = parseFloat(customerData.creditLimit) || 0;\n            creditPeriod = parseInt(customerData.creditPeriod) || null;\n        }\n\n        // Check for duplicate mobile number if phone is provided\n        if (customerData.phone && customerData.phone.trim()) {\n            const existingCustomer = await prisma.customer.findFirst({\n                where: {\n                    phone: customerData.phone.trim()\n                }\n            });\n\n            if (existingCustomer) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'A customer with this mobile number already exists',\n                        error: 'Duplicate mobile number'\n                    },\n                    { status: 400 }\n                );\n            }\n        }\n\n        // Create new customer using Prisma\n        const customer = await prisma.customer.create({\n            data: {\n                name: customerData.name,\n                email: customerData.email || null,\n                phone: customerData.phone || null,\n                address: customerData.address || null, // Store address as a simple string\n                customerType: type, // Changed from type to customerType\n                creditLimit: creditLimit,\n                creditPeriod: creditPeriod,\n                // taxId and notes are removed as they are not in the Customer model\n                // The JSON blob for address is removed\n            }\n        });\n\n        // Get token for audit logging\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        let userId: number | null = null;\n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                userId = decoded?.userId ? Number(decoded.userId) : null;\n            } catch (error) {\n                console.warn('Failed to get userId for audit logging');\n            }\n        }\n\n        // Log CREATE action\n        const auditService = AuditService.getInstance();\n        await auditService.logAction({\n            userId,\n            action: 'CREATE',\n            entity: 'Customer',\n            entityId: customer.id,\n            details: {\n                name: customer.name,\n                email: customer.email,\n                phone: customer.phone,\n                address: customer.address,\n                customerType: customer.customerType,\n                creditLimit: customer.creditLimit,\n                creditPeriod: customer.creditPeriod\n            }\n        });\n\n        return NextResponse.json(\n            {\n                success: true,\n                message: 'Customer created successfully',\n                data: customer\n            },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error creating customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error creating customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],"mappingssBA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EAsDAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;kCA5DoB;;;kCACR;;;kCACX;;;kCACM;;;mCACD;AAErB,eAAeJ,IAAA;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAClB,IAAI;IACA;IACA,MAAME,YAAA;IAAA;IAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAeG,aAAA,CAAAC,YAAY,CAACC,WAAW;IAC7C,MAAMC,kBAAA;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,QAAqB,MAAME,YAAA,CAAaK,mBAAmB,CAAC;IAElE;IACA,MAAMC,SAAA;IAAA;IAAA,CAAAV,cAAA,GAAAE,CAAA,QAAY,MAAMS,OAAA,CAAAC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;MAC7CC,KAAA,EAAO;QACHC,EAAA,EAAI;UACAC,KAAA,EAAOT;QACX;MACJ;MACAU,OAAA,EAAS;QACLC,IAAA,EAAM;MACV;MACAC,OAAA,EAAS;QACLC,QAAA,EAAU;UACNH,OAAA,EAAS;YACLI,SAAA,EAAW;UACf;UACAC,IAAA,EAAM;UACNC,MAAA,EAAQ;YACJF,SAAA,EAAW;UACf;QACJ;MACJ;IACJ;IAEA;IACA,MAAMG,iBAAA;IAAA;IAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAoBQ,SAAA,CAAUgB,GAAG,CAACb,QAAA;MAAA;MAAAb,cAAA,GAAAC,CAAA;MACpC,MAAM0B,WAAA;MAAA;MAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAcW,QAAA,CAASQ,QAAQ,GAAG,EAAE;MAAA;MAAArB,cAAA,GAAAE,CAAA;MAC1C,OAAO;QACH,GAAGW,QAAQ;QACXe,gBAAA,EAAkBD,WAAA;QAAA;QAAA,CAAA3B,cAAA,GAAA6B,CAAA,UAAcF,WAAA,CAAYL,SAAS;QAAA;QAAA,CAAAtB,cAAA,GAAA6B,CAAA,UAAG;QACxD;QACAR,QAAA,EAAUS;MACd;IACJ;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAEA,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACR,iBAAA;EAC7B,EAAE,OAAOS,KAAA,EAAO;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IACZiC,OAAA,CAAQD,KAAK,CAAC,6BAA6BA,KAAA;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IAC3C,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIG,OAAA,EAAS;MACTC,OAAA,EAAS;MACTH,KAAA,EAAOA,KAAA,YAAiBI,KAAA;MAAA;MAAA,CAAAtC,cAAA,GAAA6B,CAAA,UAAQK,KAAA,CAAMG,OAAO;MAAA;MAAA,CAAArC,cAAA,GAAA6B,CAAA,UAAGU,MAAA,CAAOL,KAAA;IAC3D,GACA;MAAEM,MAAA,EAAQ;IAAI;EAEtB;AACJ;AAEO,eAAerC,KAAKsC,OAAoB;EAAA;EAAAzC,cAAA,GAAAC,CAAA;EAC3C;EACA,MAAMyC,eAAA;EAAA;EAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAkB,MAAM,IAAAyC,WAAA,CAAAC,iBAAiB,EAAC,mBAAmBH,OAAA;EAAA;EAAAzC,cAAA,GAAAE,CAAA;EACnE,IAAIwC,eAAA,EAAiB;IAAA;IAAA1C,cAAA,GAAA6B,CAAA;IAAA7B,cAAA,GAAAE,CAAA;IACjB,OAAOwC,eAAA;EACX;EAAA;EAAA;IAAA1C,cAAA,GAAA6B,CAAA;EAAA;EAAA7B,cAAA,GAAAE,CAAA;EAEA,IAAI;IACA,MAAM2C,YAAA;IAAA;IAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAe,MAAMuC,OAAA,CAAQR,IAAI;IAEvC;IACA,MAAMa,IAAA;IAAA;IAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAO2C,YAAA,CAAaE,YAAY,KAAK;IAAA;IAAA,CAAA/C,cAAA,GAAA6B,CAAA,UAAc;IAAA;IAAA,CAAA7B,cAAA,GAAA6B,CAAA,UAAc;IACvE,IAAImB,WAAA;IAAA;IAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAc;IAClB,IAAI+C,YAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAe;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnB,IAAI4C,IAAA,KAAS,aAAa;MAAA;MAAA9C,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAE,CAAA;MACtB8C,WAAA;MAAc;MAAA,CAAAhD,cAAA,GAAA6B,CAAA,UAAAqB,UAAA,CAAWL,YAAA,CAAaG,WAAW;MAAA;MAAA,CAAAhD,cAAA,GAAA6B,CAAA,UAAK;MAAA;MAAA7B,cAAA,GAAAE,CAAA;MACtD+C,YAAA;MAAe;MAAA,CAAAjD,cAAA,GAAA6B,CAAA,UAAAsB,QAAA,CAASN,YAAA,CAAaI,YAAY;MAAA;MAAA,CAAAjD,cAAA,GAAA6B,CAAA,UAAK;IAC1D;IAAA;IAAA;MAAA7B,cAAA,GAAA6B,CAAA;IAAA;IAEA;IAAA7B,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAA6B,CAAA,UAAAgB,YAAA,CAAaO,KAAK;IAAA;IAAA,CAAApD,cAAA,GAAA6B,CAAA,UAAIgB,YAAA,CAAaO,KAAK,CAACC,IAAI,KAAI;MAAA;MAAArD,cAAA,GAAA6B,CAAA;MACjD,MAAMyB,gBAAA;MAAA;MAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAmB,MAAMS,OAAA,CAAAC,MAAM,CAACC,QAAQ,CAAC0C,SAAS,CAAC;QACrDxC,KAAA,EAAO;UACHqC,KAAA,EAAOP,YAAA,CAAaO,KAAK,CAACC,IAAI;QAClC;MACJ;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAEA,IAAIoD,gBAAA,EAAkB;QAAA;QAAAtD,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAE,CAAA;QAClB,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;UACIG,OAAA,EAAS;UACTC,OAAA,EAAS;UACTH,KAAA,EAAO;QACX,GACA;UAAEM,MAAA,EAAQ;QAAI;MAEtB;MAAA;MAAA;QAAAxC,cAAA,GAAA6B,CAAA;MAAA;IACJ;IAAA;IAAA;MAAA7B,cAAA,GAAA6B,CAAA;IAAA;IAEA;IACA,MAAMhB,QAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAW,MAAMS,OAAA,CAAAC,MAAM,CAACC,QAAQ,CAAC2C,MAAM,CAAC;MAC1CC,IAAA,EAAM;QACFtC,IAAA,EAAM0B,YAAA,CAAa1B,IAAI;QACvBuC,KAAA;QAAO;QAAA,CAAA1D,cAAA,GAAA6B,CAAA,WAAAgB,YAAA,CAAaa,KAAK;QAAA;QAAA,CAAA1D,cAAA,GAAA6B,CAAA,WAAI;QAC7BuB,KAAA;QAAO;QAAA,CAAApD,cAAA,GAAA6B,CAAA,WAAAgB,YAAA,CAAaO,KAAK;QAAA;QAAA,CAAApD,cAAA,GAAA6B,CAAA,WAAI;QAC7B8B,OAAA;QAAS;QAAA,CAAA3D,cAAA,GAAA6B,CAAA,WAAAgB,YAAA,CAAac,OAAO;QAAA;QAAA,CAAA3D,cAAA,GAAA6B,CAAA,WAAI;QACjCkB,YAAA,EAAcD,IAAA;QACdE,WAAA,EAAaA,WAAA;QACbC,YAAA,EAAcA;MAGlB;IACJ;IAEA;IACA,MAAMW,KAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAQuC,OAAA,CAAQoB,OAAO,CAACC,GAAG,CAAC,kBAAkBC,OAAA,CAAQ,WAAW;IACvE,IAAIC,MAAA;IAAA;IAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAwB;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAC5B,IAAI0D,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAE,CAAA;MACP,IAAI;QACA,MAAM+D,OAAA;QAAA;QAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAgE,KAAA,CAAAC,WAAW,EAACP,KAAA;QAAA;QAAA5D,cAAA,GAAAE,CAAA;QAClC8D,MAAA,GAASC,OAAA,EAASD,MAAA;QAAA;QAAA,CAAAhE,cAAA,GAAA6B,CAAA,WAASuC,MAAA,CAAOH,OAAA,CAAQD,MAAM;QAAA;QAAA,CAAAhE,cAAA,GAAA6B,CAAA,WAAI;MACxD,EAAE,OAAOK,KAAA,EAAO;QAAA;QAAAlC,cAAA,GAAAE,CAAA;QACZiC,OAAA,CAAQkC,IAAI,CAAC;MACjB;IACJ;IAAA;IAAA;MAAArE,cAAA,GAAA6B,CAAA;IAAA;IAEA;IACA,MAAMzB,YAAA;IAAA;IAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAeG,aAAA,CAAAC,YAAY,CAACC,WAAW;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC7C,MAAME,YAAA,CAAakE,SAAS,CAAC;MACzBN,MAAA;MACAO,MAAA,EAAQ;MACRC,MAAA,EAAQ;MACRC,QAAA,EAAU5D,QAAA,CAASG,EAAE;MACrB0D,OAAA,EAAS;QACLvD,IAAA,EAAMN,QAAA,CAASM,IAAI;QACnBuC,KAAA,EAAO7C,QAAA,CAAS6C,KAAK;QACrBN,KAAA,EAAOvC,QAAA,CAASuC,KAAK;QACrBO,OAAA,EAAS9C,QAAA,CAAS8C,OAAO;QACzBZ,YAAA,EAAclC,QAAA,CAASkC,YAAY;QACnCC,WAAA,EAAanC,QAAA,CAASmC,WAAW;QACjCC,YAAA,EAAcpC,QAAA,CAASoC;MAC3B;IACJ;IAAA;IAAAjD,cAAA,GAAAE,CAAA;IAEA,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIG,OAAA,EAAS;MACTC,OAAA,EAAS;MACToB,IAAA,EAAM5C;IACV,GACA;MAAE2B,MAAA,EAAQ;IAAI;EAEtB,EAAE,OAAON,KAAA,EAAO;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IACZiC,OAAA,CAAQD,KAAK,CAAC,4BAA4BA,KAAA;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IAC1C,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIG,OAAA,EAAS;MACTC,OAAA,EAAS;MACTH,KAAA,EAAOA,KAAA,YAAiBI,KAAA;MAAA;MAAA,CAAAtC,cAAA,GAAA6B,CAAA,WAAQK,KAAA,CAAMG,OAAO;MAAA;MAAA,CAAArC,cAAA,GAAA6B,CAAA,WAAGU,MAAA,CAAOL,KAAA;IAC3D,GACA;MAAEM,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}