853eb4930a68946c1700af5563b39250
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Button: function() {
        return Button;
    },
    buttonVariants: function() {
        return buttonVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _cn = require("../../lib/utils/cn");
const _lucidereact = require("lucide-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const buttonVariants = (props = {})=>{
    const { variant = "primary", size = "md" } = props;
    const baseClasses = "inline-flex items-center justify-center font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none";
    const variants = {
        primary: "bg-primary hover:bg-primary-700 text-tertiary",
        secondary: "bg-secondary hover:bg-gray-800 text-tertiary",
        outline: "border border-primary text-primary hover:bg-primary hover:text-tertiary",
        ghost: "bg-transparent hover:bg-primary-50 text-primary",
        link: "bg-transparent underline-offset-4 hover:underline text-primary hover:bg-transparent",
        info: "bg-blue-500 hover:bg-blue-600 text-white",
        success: "bg-green-500 hover:bg-green-600 text-white",
        destructive: "bg-red-500 hover:bg-red-600 text-white",
        default: "bg-primary hover:bg-primary-700 text-tertiary"
    };
    const sizes = {
        sm: "h-9 px-3 text-sm rounded-md",
        md: "h-10 px-4 py-2 rounded-md",
        lg: "h-12 px-6 py-3 rounded-lg text-lg",
        icon: "h-10 w-10 rounded-full p-0",
        default: "h-10 px-4 py-2 rounded-md"
    };
    const variantClass = variants[variant] || variants.default;
    const sizeClass = sizes[size] || sizes.default;
    return (0, _cn.cn)(baseClasses, variantClass, sizeClass);
};
const Button = /*#__PURE__*/ (0, _react.forwardRef)(({ className, children, isLoading = false, variant = "primary", size = "md", disabled, ...props }, ref)=>{
    const baseClasses = "inline-flex items-center justify-center font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none";
    const variants = {
        primary: "bg-primary hover:bg-primary-700 text-tertiary",
        secondary: "bg-secondary hover:bg-gray-800 text-tertiary",
        outline: "border border-primary text-primary hover:bg-primary hover:text-tertiary",
        ghost: "bg-transparent hover:bg-primary-50 text-primary",
        link: "bg-transparent underline-offset-4 hover:underline text-primary hover:bg-transparent",
        info: "bg-blue-500 hover:bg-blue-600 text-white",
        success: "bg-green-500 hover:bg-green-600 text-white",
        destructive: "bg-red-500 hover:bg-red-600 text-white",
        default: "bg-primary hover:bg-primary-700 text-tertiary"
    };
    const sizes = {
        sm: "h-9 px-3 text-sm rounded-md",
        md: "h-10 px-4 py-2 rounded-md",
        lg: "h-12 px-6 py-3 rounded-lg text-lg",
        icon: "h-10 w-10 rounded-full p-0",
        default: "h-10 px-4 py-2 rounded-md"
    };
    // Ensure isLoading is a boolean
    const isLoadingState = Boolean(isLoading);
    // Safe access to variants and sizes with fallbacks
    const variantClass = variants[variant] || variants.default;
    const sizeClass = sizes[size] || sizes.default;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        ref: ref,
        className: (0, _cn.cn)(baseClasses, variantClass, sizeClass, isLoadingState && "opacity-70", className),
        disabled: isLoadingState || disabled,
        ...props,
        children: isLoadingState ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                    className: "mr-2 h-4 w-4 animate-spin"
                }),
                children
            ]
        }) : children
    });
});
Button.displayName = "Button";

//# sourceMappingURL=data:application/json;base64,