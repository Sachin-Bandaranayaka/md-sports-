{"version":3,"names":["cov_2g8rkm9m8q","actualCoverage","s","POST","COOKIE_SECURE","process","env","NODE_ENV","req","f","console","log","refreshTokenFromCookie","cookies","get","value","userId","_auth","getUserIdFromToken","error","b","_refreshTokenService","revokeRefreshToken","substring","_cache","cacheService","invalidateAllUserAuth","response","_server","NextResponse","json","success","message","set","name","httpOnly","secure","sameSite","maxAge","path","errorResponse","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/logout/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { revokeRefreshToken } from '@/services/refreshTokenService';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\nimport { getUserIdFromToken } from '@/lib/auth';\n\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    console.log('Logout request received');\n    try {\n        const refreshTokenFromCookie = req.cookies.get('refreshToken')?.value;\n\n        // Get the user ID to clear their cache\n        let userId: string | null = null;\n        try {\n            userId = await getUserIdFromToken(req);\n        } catch (error) {\n            console.log('Could not get user ID from token during logout:', error);\n        }\n\n        if (refreshTokenFromCookie) {\n            try {\n                await revokeRefreshToken(refreshTokenFromCookie);\n                console.log('Refresh token revoked successfully:', refreshTokenFromCookie.substring(0, 10) + '...');\n            } catch (error) {\n                // Log the error but continue to clear cookies as a best effort\n                console.error('Error revoking refresh token:', error);\n            }\n        } else {\n            console.log('No refresh token cookie found to revoke.');\n        }\n\n        // Clear user's cached session data if we have the user ID\n        if (userId) {\n            console.log('Clearing cached session data for user:', userId);\n            await cacheService.invalidateAllUserAuth(userId);\n        }\n\n        const response = NextResponse.json({ success: true, message: 'Logged out successfully' });\n\n        // Clear accessToken cookie\n        response.cookies.set({\n            name: 'accessToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1, // Expire immediately\n            path: '/'\n        });\n\n        // Clear refreshToken cookie\n        response.cookies.set({\n            name: 'refreshToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1, // Expire immediately\n            path: '/'\n        });\n\n        console.log('Auth cookies cleared.');\n        return response;\n    } catch (error: any) {\n        console.error('Logout error:', error);\n        // Still attempt to clear cookies in the response even if an unexpected error occurs\n        const errorResponse = NextResponse.json(\n            { success: false, message: 'Logout failed' },\n            { status: 500 }\n        );\n        errorResponse.cookies.set({\n            name: 'accessToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1,\n            path: '/'\n        });\n        errorResponse.cookies.set({\n            name: 'refreshToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1,\n            path: '/'\n        });\n        return errorResponse;\n    }\n} "],"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","ignoreList":[]}