{"version":3,"names":["POST","cov_22e3dojtpp","s","executeWithRetry","operation","maxRetries","b","f","attempt","error","code","console","log","Promise","resolve","setTimeout","Math","pow","Error","req","body","json","email","password","_server","NextResponse","success","message","status","user","_prisma","default","findFirst","where","isActive","storedHash","isMatch","_bcryptjs","compare","salt","genSalt","newHash","hash","userFound","passwordMatch","userInfo","id","name","storedPasswordHash","newGeneratedHash","passwordCompareResult"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Try to find the user directly from the database with retry logic\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                }\n            })\n        );\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found',\n                email\n            });\n        }\n\n        // Get stored password hash\n        const storedHash = user.password;\n\n        // Test with the provided password\n        const isMatch = await bcrypt.compare(password, storedHash);\n\n        // Hash a new password for comparison\n        const salt = await bcrypt.genSalt(10);\n        const newHash = await bcrypt.hash('password', salt);\n\n        return NextResponse.json({\n            success: true,\n            userFound: true,\n            passwordMatch: isMatch,\n            userInfo: {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                storedPasswordHash: storedHash,\n                newGeneratedHash: newHash,\n                passwordCompareResult: isMatch\n            }\n        });\n    } catch (error) {\n        console.error('Verify login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Verification failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}