87ef8d89f72f0202f3a2c236c52a7be2
"use strict";

/* istanbul ignore next */
function cov_2g8rkm9m8q() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/logout/route.ts";
  var hash = "30d93045f6f35f8e577deab1dae4f55ff99f9711";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/logout/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 12,
          column: 80
        }
      },
      "5": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "6": {
        start: {
          line: 14,
          column: 14
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "7": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 59
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 43
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "10": {
        start: {
          line: 19,
          column: 39
        },
        end: {
          line: 19,
          column: 77
        }
      },
      "11": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 25
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "14": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 82
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "16": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "17": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 91
        }
      },
      "18": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 116
        }
      },
      "19": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 70
        }
      },
      "20": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 68
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 74
        }
      },
      "23": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 68
        }
      },
      "24": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 46,
          column: 10
        }
      },
      "25": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "26": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 45
        }
      },
      "28": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "29": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "30": {
        start: {
          line: 72,
          column: 30
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "31": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "33": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: 35,
            column: 15
          },
          end: {
            line: 37,
            column: 9
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/logout/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { revokeRefreshToken } from '@/services/refreshTokenService';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\nimport { getUserIdFromToken } from '@/lib/auth';\n\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    console.log('Logout request received');\n    try {\n        const refreshTokenFromCookie = req.cookies.get('refreshToken')?.value;\n\n        // Get the user ID to clear their cache\n        let userId: string | null = null;\n        try {\n            userId = await getUserIdFromToken(req);\n        } catch (error) {\n            console.log('Could not get user ID from token during logout:', error);\n        }\n\n        if (refreshTokenFromCookie) {\n            try {\n                await revokeRefreshToken(refreshTokenFromCookie);\n                console.log('Refresh token revoked successfully:', refreshTokenFromCookie.substring(0, 10) + '...');\n            } catch (error) {\n                // Log the error but continue to clear cookies as a best effort\n                console.error('Error revoking refresh token:', error);\n            }\n        } else {\n            console.log('No refresh token cookie found to revoke.');\n        }\n\n        // Clear user's cached session data if we have the user ID\n        if (userId) {\n            console.log('Clearing cached session data for user:', userId);\n            await cacheService.invalidateAllUserAuth(userId);\n        }\n\n        const response = NextResponse.json({ success: true, message: 'Logged out successfully' });\n\n        // Clear accessToken cookie\n        response.cookies.set({\n            name: 'accessToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1, // Expire immediately\n            path: '/'\n        });\n\n        // Clear refreshToken cookie\n        response.cookies.set({\n            name: 'refreshToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1, // Expire immediately\n            path: '/'\n        });\n\n        console.log('Auth cookies cleared.');\n        return response;\n    } catch (error: any) {\n        console.error('Logout error:', error);\n        // Still attempt to clear cookies in the response even if an unexpected error occurs\n        const errorResponse = NextResponse.json(\n            { success: false, message: 'Logout failed' },\n            { status: 500 }\n        );\n        errorResponse.cookies.set({\n            name: 'accessToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1,\n            path: '/'\n        });\n        errorResponse.cookies.set({\n            name: 'refreshToken',\n            value: '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: -1,\n            path: '/'\n        });\n        return errorResponse;\n    }\n} "],
      names: ["POST", "COOKIE_SECURE", "process", "env", "NODE_ENV", "req", "console", "log", "refreshTokenFromCookie", "cookies", "get", "value", "userId", "getUserIdFromToken", "error", "revokeRefreshToken", "substring", "cacheService", "invalidateAllUserAuth", "response", "NextResponse", "json", "success", "message", "set", "name", "httpOnly", "secure", "sameSite", "maxAge", "path", "errorResponse", "status"],
      mappings: ";;;;+BAOsBA;;;eAAAA;;;wBAPoB;qCACP;uBACQ;sBACR;AAEnC,MAAMC,gBAAgBC,QAAQC,GAAG,CAACC,QAAQ,KAAK;AAExC,eAAeJ,KAAKK,GAAgB;IACvCC,QAAQC,GAAG,CAAC;IACZ,IAAI;QACA,MAAMC,yBAAyBH,IAAII,OAAO,CAACC,GAAG,CAAC,iBAAiBC;QAEhE,uCAAuC;QACvC,IAAIC,SAAwB;QAC5B,IAAI;YACAA,SAAS,MAAMC,IAAAA,wBAAkB,EAACR;QACtC,EAAE,OAAOS,OAAO;YACZR,QAAQC,GAAG,CAAC,mDAAmDO;QACnE;QAEA,IAAIN,wBAAwB;YACxB,IAAI;gBACA,MAAMO,IAAAA,uCAAkB,EAACP;gBACzBF,QAAQC,GAAG,CAAC,uCAAuCC,uBAAuBQ,SAAS,CAAC,GAAG,MAAM;YACjG,EAAE,OAAOF,OAAO;gBACZ,+DAA+D;gBAC/DR,QAAQQ,KAAK,CAAC,iCAAiCA;YACnD;QACJ,OAAO;YACHR,QAAQC,GAAG,CAAC;QAChB;QAEA,0DAA0D;QAC1D,IAAIK,QAAQ;YACRN,QAAQC,GAAG,CAAC,0CAA0CK;YACtD,MAAMK,mBAAY,CAACC,qBAAqB,CAACN;QAC7C;QAEA,MAAMO,WAAWC,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAMC,SAAS;QAA0B;QAEvF,2BAA2B;QAC3BJ,SAASV,OAAO,CAACe,GAAG,CAAC;YACjBC,MAAM;YACNd,OAAO;YACPe,UAAU;YACVC,QAAQ1B;YACR2B,UAAU;YACVC,QAAQ,CAAC;YACTC,MAAM;QACV;QAEA,4BAA4B;QAC5BX,SAASV,OAAO,CAACe,GAAG,CAAC;YACjBC,MAAM;YACNd,OAAO;YACPe,UAAU;YACVC,QAAQ1B;YACR2B,UAAU;YACVC,QAAQ,CAAC;YACTC,MAAM;QACV;QAEAxB,QAAQC,GAAG,CAAC;QACZ,OAAOY;IACX,EAAE,OAAOL,OAAY;QACjBR,QAAQQ,KAAK,CAAC,iBAAiBA;QAC/B,oFAAoF;QACpF,MAAMiB,gBAAgBX,oBAAY,CAACC,IAAI,CACnC;YAAEC,SAAS;YAAOC,SAAS;QAAgB,GAC3C;YAAES,QAAQ;QAAI;QAElBD,cAActB,OAAO,CAACe,GAAG,CAAC;YACtBC,MAAM;YACNd,OAAO;YACPe,UAAU;YACVC,QAAQ1B;YACR2B,UAAU;YACVC,QAAQ,CAAC;YACTC,MAAM;QACV;QACAC,cAActB,OAAO,CAACe,GAAG,CAAC;YACtBC,MAAM;YACNd,OAAO;YACPe,UAAU;YACVC,QAAQ1B;YACR2B,UAAU;YACVC,QAAQ,CAAC;YACTC,MAAM;QACV;QACA,OAAOC;IACX;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "30d93045f6f35f8e577deab1dae4f55ff99f9711"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2g8rkm9m8q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2g8rkm9m8q();
cov_2g8rkm9m8q().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2g8rkm9m8q().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2g8rkm9m8q().f[0]++;
    cov_2g8rkm9m8q().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2g8rkm9m8q().s[3]++, require("next/server"));
const _refreshTokenService =
/* istanbul ignore next */
(cov_2g8rkm9m8q().s[4]++, require("../../../../services/refreshTokenService"));
const _cache =
/* istanbul ignore next */
(cov_2g8rkm9m8q().s[5]++, require("../../../../lib/cache"));
const _auth =
/* istanbul ignore next */
(cov_2g8rkm9m8q().s[6]++, require("../../../../lib/auth"));
const COOKIE_SECURE =
/* istanbul ignore next */
(cov_2g8rkm9m8q().s[7]++, process.env.NODE_ENV === "production");
async function POST(req) {
  /* istanbul ignore next */
  cov_2g8rkm9m8q().f[1]++;
  cov_2g8rkm9m8q().s[8]++;
  console.log("Logout request received");
  /* istanbul ignore next */
  cov_2g8rkm9m8q().s[9]++;
  try {
    const refreshTokenFromCookie =
    /* istanbul ignore next */
    (cov_2g8rkm9m8q().s[10]++, req.cookies.get("refreshToken")?.value);
    // Get the user ID to clear their cache
    let userId =
    /* istanbul ignore next */
    (cov_2g8rkm9m8q().s[11]++, null);
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[12]++;
    try {
      /* istanbul ignore next */
      cov_2g8rkm9m8q().s[13]++;
      userId = await (0, _auth.getUserIdFromToken)(req);
    } catch (error) {
      /* istanbul ignore next */
      cov_2g8rkm9m8q().s[14]++;
      console.log("Could not get user ID from token during logout:", error);
    }
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[15]++;
    if (refreshTokenFromCookie) {
      /* istanbul ignore next */
      cov_2g8rkm9m8q().b[0][0]++;
      cov_2g8rkm9m8q().s[16]++;
      try {
        /* istanbul ignore next */
        cov_2g8rkm9m8q().s[17]++;
        await (0, _refreshTokenService.revokeRefreshToken)(refreshTokenFromCookie);
        /* istanbul ignore next */
        cov_2g8rkm9m8q().s[18]++;
        console.log("Refresh token revoked successfully:", refreshTokenFromCookie.substring(0, 10) + "...");
      } catch (error) {
        /* istanbul ignore next */
        cov_2g8rkm9m8q().s[19]++;
        // Log the error but continue to clear cookies as a best effort
        console.error("Error revoking refresh token:", error);
      }
    } else {
      /* istanbul ignore next */
      cov_2g8rkm9m8q().b[0][1]++;
      cov_2g8rkm9m8q().s[20]++;
      console.log("No refresh token cookie found to revoke.");
    }
    // Clear user's cached session data if we have the user ID
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[21]++;
    if (userId) {
      /* istanbul ignore next */
      cov_2g8rkm9m8q().b[1][0]++;
      cov_2g8rkm9m8q().s[22]++;
      console.log("Clearing cached session data for user:", userId);
      /* istanbul ignore next */
      cov_2g8rkm9m8q().s[23]++;
      await _cache.cacheService.invalidateAllUserAuth(userId);
    } else
    /* istanbul ignore next */
    {
      cov_2g8rkm9m8q().b[1][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_2g8rkm9m8q().s[24]++, _server.NextResponse.json({
      success: true,
      message: "Logged out successfully"
    }));
    // Clear accessToken cookie
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[25]++;
    response.cookies.set({
      name: "accessToken",
      value: "",
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: -1,
      path: "/"
    });
    // Clear refreshToken cookie
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[26]++;
    response.cookies.set({
      name: "refreshToken",
      value: "",
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: -1,
      path: "/"
    });
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[27]++;
    console.log("Auth cookies cleared.");
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[28]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[29]++;
    console.error("Logout error:", error);
    // Still attempt to clear cookies in the response even if an unexpected error occurs
    const errorResponse =
    /* istanbul ignore next */
    (cov_2g8rkm9m8q().s[30]++, _server.NextResponse.json({
      success: false,
      message: "Logout failed"
    }, {
      status: 500
    }));
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[31]++;
    errorResponse.cookies.set({
      name: "accessToken",
      value: "",
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: -1,
      path: "/"
    });
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[32]++;
    errorResponse.cookies.set({
      name: "refreshToken",
      value: "",
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: -1,
      path: "/"
    });
    /* istanbul ignore next */
    cov_2g8rkm9m8q().s[33]++;
    return errorResponse;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,