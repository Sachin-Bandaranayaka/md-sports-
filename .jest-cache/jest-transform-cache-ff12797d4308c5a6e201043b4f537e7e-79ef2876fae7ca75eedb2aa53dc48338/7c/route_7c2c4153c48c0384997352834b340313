4d7ff8e0edb8804e89998b63d181e166
"use strict";

/* istanbul ignore next */
function cov_22e3dojtpp() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts";
  var hash = "1f5a0707bb874f115313c898b2a7d09476ed52e7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 12,
          column: 78
        }
      },
      "5": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 89
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "8": {
        start: {
          line: 20,
          column: 39
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "9": {
        start: {
          line: 21,
          column: 28
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "10": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 20
        }
      },
      "12": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "13": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 19
        }
      },
      "15": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 10
        }
      },
      "17": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "18": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "20": {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "21": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 88
        }
      },
      "22": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "23": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "24": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 95
        }
      },
      "25": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "26": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 57
        }
      },
      "27": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 39
        }
      },
      "28": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "29": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "30": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 31
        }
      },
      "31": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 18
        }
      },
      "32": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 79,
          column: 1
        }
      },
      "33": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "34": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 23
        }
      },
      "35": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "36": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "37": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "38": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 116
        }
      },
      "39": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 94
        }
      },
      "40": {
        start: {
          line: 71,
          column: 45
        },
        end: {
          line: 71,
          column: 92
        }
      },
      "41": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 25
        }
      },
      "42": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 24
        }
      },
      "43": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 44
        }
      },
      "44": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "45": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 82,
          column: 37
        }
      },
      "46": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "47": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "48": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "49": {
        start: {
          line: 93,
          column: 21
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "50": {
        start: {
          line: 93,
          column: 48
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "51": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "52": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "53": {
        start: {
          line: 107,
          column: 27
        },
        end: {
          line: 107,
          column: 40
        }
      },
      "54": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 109,
          column: 69
        }
      },
      "55": {
        start: {
          line: 111,
          column: 21
        },
        end: {
          line: 111,
          column: 48
        }
      },
      "56": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "57": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "58": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 52
        }
      },
      "59": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 23,
            column: 40
          }
        },
        loc: {
          start: {
            line: 23,
            column: 61
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 34
          }
        },
        loc: {
          start: {
            line: 27,
            column: 53
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 30
          }
        },
        loc: {
          start: {
            line: 62,
            column: 64
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 62
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 34
          },
          end: {
            line: 71,
            column: 35
          }
        },
        loc: {
          start: {
            line: 71,
            column: 45
          },
          end: {
            line: 71,
            column: 92
          }
        },
        line: 71
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 80,
            column: 19
          }
        },
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 93,
            column: 44
          },
          end: {
            line: 93,
            column: 45
          }
        },
        loc: {
          start: {
            line: 93,
            column: 48
          },
          end: {
            line: 98,
            column: 14
          }
        },
        line: 93
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 24,
            column: 45
          }
        }, {
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 65
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 20
          }
        }, {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 27
          }
        }, {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 28,
            column: 45
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 20
          }
        }, {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 47
          }
        }, {
          start: {
            line: 31,
            column: 51
          },
          end: {
            line: 31,
            column: 76
          }
        }],
        line: 31
      },
      "8": {
        loc: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "9": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 37,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 37,
            column: 31
          }
        }],
        line: 37
      },
      "10": {
        loc: {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 53
          }
        }, {
          start: {
            line: 43,
            column: 57
          },
          end: {
            line: 43,
            column: 88
          }
        }],
        line: 43
      },
      "11": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "12": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 29
          }
        }, {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 45,
            column: 79
          }
        }],
        line: 45
      },
      "13": {
        loc: {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 88
          }
        }, {
          start: {
            line: 46,
            column: 91
          },
          end: {
            line: 46,
            column: 95
          }
        }],
        line: 46
      },
      "14": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 51,
            column: 13
          }
        }],
        line: 47
      },
      "15": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 20
          }
        }, {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 47,
            column: 33
          }
        }, {
          start: {
            line: 47,
            column: 37
          },
          end: {
            line: 47,
            column: 45
          }
        }],
        line: 47
      },
      "16": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "17": {
        loc: {
          start: {
            line: 62,
            column: 47
          },
          end: {
            line: 62,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 60
          },
          end: {
            line: 62,
            column: 61
          }
        }],
        line: 62
      },
      "18": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "19": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 68,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 68,
            column: 39
          }
        }, {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 68,
            column: 63
          }
        }],
        line: 68
      },
      "20": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "21": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 18
          }
        }, {
          start: {
            line: 84,
            column: 22
          },
          end: {
            line: 84,
            column: 31
          }
        }],
        line: 84
      },
      "22": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Try to find the user directly from the database with retry logic\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                }\n            })\n        );\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found',\n                email\n            });\n        }\n\n        // Get stored password hash\n        const storedHash = user.password;\n\n        // Test with the provided password\n        const isMatch = await bcrypt.compare(password, storedHash);\n\n        // Hash a new password for comparison\n        const salt = await bcrypt.genSalt(10);\n        const newHash = await bcrypt.hash('password', salt);\n\n        return NextResponse.json({\n            success: true,\n            userFound: true,\n            passwordMatch: isMatch,\n            userInfo: {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                storedPasswordHash: storedHash,\n                newGeneratedHash: newHash,\n                passwordCompareResult: isMatch\n            }\n        });\n    } catch (error) {\n        console.error('Verify login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Verification failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["POST", "executeWithRetry", "operation", "maxRetries", "attempt", "error", "code", "console", "log", "Promise", "resolve", "setTimeout", "Math", "pow", "Error", "req", "body", "json", "email", "password", "NextResponse", "success", "message", "status", "user", "prisma", "findFirst", "where", "isActive", "storedHash", "isMatch", "bcrypt", "compare", "salt", "genSalt", "newHash", "hash", "userFound", "passwordMatch", "userInfo", "id", "name", "storedPasswordHash", "newGeneratedHash", "passwordCompareResult"],
      mappings: ";;;;+BA0BsBA;;;eAAAA;;;wBA1BoB;kEAClB;+DACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnB;;CAEC,GACD,MAAMC,mBAAmB,OAAUC,WAA6BC,aAAa,CAAC;IAC1E,IAAK,IAAIC,UAAU,GAAGA,WAAWD,YAAYC,UAAW;QACpD,IAAI;YACA,OAAO,MAAMF;QACjB,EAAE,OAAOG,OAAY;YACjB,uDAAuD;YACvD,IAAIA,OAAOC,SAAS,WAAWF,UAAUD,YAAY;gBACjDI,QAAQC,GAAG,CAAC,CAAC,2DAA2D,EAAEJ,QAAQ,CAAC,EAAED,WAAW,CAAC,CAAC;gBAClG,mDAAmD;gBACnD,MAAM,IAAIM,QAAQC,CAAAA,UAAWC,WAAWD,SAASE,KAAKC,GAAG,CAAC,GAAGT,WAAW;gBACxE;YACJ;YACA,4EAA4E;YAC5E,MAAMC;QACV;IACJ;IACA,MAAM,IAAIS,MAAM;AACpB;AAEO,eAAed,KAAKe,GAAgB;IACvC,IAAI;QACA,MAAMC,OAAO,MAAMD,IAAIE,IAAI;QAC3B,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAE5B,IAAI,CAACE,SAAS,CAACC,UAAU;YACrB,OAAOC,oBAAY,CAACH,IAAI,CACpB;gBAAEI,SAAS;gBAAOC,SAAS;YAAkC,GAC7D;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,mEAAmE;QACnE,MAAMC,OAAO,MAAMvB,iBAAiB,IAChCwB,eAAM,CAACD,IAAI,CAACE,SAAS,CAAC;gBAClBC,OAAO;oBACHT,OAAOA;oBACPU,UAAU;gBACd;YACJ;QAGJ,IAAI,CAACJ,MAAM;YACP,OAAOJ,oBAAY,CAACH,IAAI,CAAC;gBACrBI,SAAS;gBACTC,SAAS;gBACTJ;YACJ;QACJ;QAEA,2BAA2B;QAC3B,MAAMW,aAAaL,KAAKL,QAAQ;QAEhC,kCAAkC;QAClC,MAAMW,UAAU,MAAMC,UAAOC,OAAO,CAACb,UAAUU;QAE/C,qCAAqC;QACrC,MAAMI,OAAO,MAAMF,UAAOG,OAAO,CAAC;QAClC,MAAMC,UAAU,MAAMJ,UAAOK,IAAI,CAAC,YAAYH;QAE9C,OAAOb,oBAAY,CAACH,IAAI,CAAC;YACrBI,SAAS;YACTgB,WAAW;YACXC,eAAeR;YACfS,UAAU;gBACNC,IAAIhB,KAAKgB,EAAE;gBACXC,MAAMjB,KAAKiB,IAAI;gBACfvB,OAAOM,KAAKN,KAAK;gBACjBwB,oBAAoBb;gBACpBc,kBAAkBR;gBAClBS,uBAAuBd;YAC3B;QACJ;IACJ,EAAE,OAAOzB,OAAO;QACZE,QAAQF,KAAK,CAAC,uBAAuBA;QACrC,OAAOe,oBAAY,CAACH,IAAI,CACpB;YAAEI,SAAS;YAAOC,SAAS;YAAuBjB,OAAO,AAACA,MAAgBiB,OAAO;QAAC,GAClF;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1f5a0707bb874f115313c898b2a7d09476ed52e7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22e3dojtpp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22e3dojtpp();
cov_22e3dojtpp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22e3dojtpp().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_22e3dojtpp().f[0]++;
    cov_22e3dojtpp().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_22e3dojtpp().s[3]++, require("next/server"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[4]++, _interop_require_wildcard(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[5]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[1]++;
  cov_22e3dojtpp().s[6]++;
  return /* istanbul ignore next */(cov_22e3dojtpp().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[0][1]++, {
    default: obj
  });
}
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[2]++;
  cov_22e3dojtpp().s[7]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[2][0]++;
    cov_22e3dojtpp().s[8]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[2][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[9]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[10]++, new WeakMap());
  /* istanbul ignore next */
  cov_22e3dojtpp().s[11]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_22e3dojtpp().f[3]++;
    cov_22e3dojtpp().s[12]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[3][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[3][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[4]++;
  cov_22e3dojtpp().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][1]++, obj) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[4][0]++;
    cov_22e3dojtpp().s[14]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[4][1]++;
  }
  cov_22e3dojtpp().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[7][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[7][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[7][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[6][0]++;
    cov_22e3dojtpp().s[16]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[6][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[17]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_22e3dojtpp().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[9][0]++, cache) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[9][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[8][0]++;
    cov_22e3dojtpp().s[19]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[8][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[20]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[21]++,
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[10][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[10][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_22e3dojtpp().s[22]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[12][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[12][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[11][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_22e3dojtpp().s[24]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[13][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[13][1]++, null));
      /* istanbul ignore next */
      cov_22e3dojtpp().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[15][0]++, desc) && (
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[15][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[15][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_22e3dojtpp().b[14][0]++;
        cov_22e3dojtpp().s[26]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_22e3dojtpp().b[14][1]++;
        cov_22e3dojtpp().s[27]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[11][1]++;
    }
  }
  /* istanbul ignore next */
  cov_22e3dojtpp().s[28]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_22e3dojtpp().s[29]++;
  if (cache) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[16][0]++;
    cov_22e3dojtpp().s[30]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[16][1]++;
  }
  cov_22e3dojtpp().s[31]++;
  return newObj;
}
/**
 * Helper function to execute Prisma queries with retry logic for prepared statement conflicts
 */
/* istanbul ignore next */
cov_22e3dojtpp().s[32]++;
const executeWithRetry = async (operation, maxRetries =
/* istanbul ignore next */
(cov_22e3dojtpp().b[17][0]++, 3)) => {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[5]++;
  cov_22e3dojtpp().s[33]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[34]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[35]++;
    try {
      /* istanbul ignore next */
      cov_22e3dojtpp().s[36]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_22e3dojtpp().s[37]++;
      // Check if this is a prepared statement conflict error
      if (
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[19][0]++, error?.code === "42P05") &&
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[19][1]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_22e3dojtpp().b[18][0]++;
        cov_22e3dojtpp().s[38]++;
        console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);
        // Exponential backoff: wait longer between retries
        /* istanbul ignore next */
        cov_22e3dojtpp().s[39]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_22e3dojtpp().f[6]++;
          cov_22e3dojtpp().s[40]++;
          return setTimeout(resolve, Math.pow(2, attempt) * 100);
        });
        /* istanbul ignore next */
        cov_22e3dojtpp().s[41]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_22e3dojtpp().b[18][1]++;
      }
      // If it's not a retryable error or we've exhausted retries, throw the error
      cov_22e3dojtpp().s[42]++;
      throw error;
    }
  }
  /* istanbul ignore next */
  cov_22e3dojtpp().s[43]++;
  throw new Error("Max retries exceeded");
};
async function POST(req) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[7]++;
  cov_22e3dojtpp().s[44]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[45]++, await req.json());
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[46]++, body);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[21][0]++, !email) ||
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[21][1]++, !password)) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[20][0]++;
      cov_22e3dojtpp().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email and password are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[20][1]++;
    }
    // Try to find the user directly from the database with retry logic
    const user =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[49]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_22e3dojtpp().f[8]++;
      cov_22e3dojtpp().s[50]++;
      return _prisma.default.user.findFirst({
        where: {
          email: email,
          isActive: true
        }
      });
    }));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[51]++;
    if (!user) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[22][0]++;
      cov_22e3dojtpp().s[52]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found",
        email
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[22][1]++;
    }
    // Get stored password hash
    const storedHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[53]++, user.password);
    // Test with the provided password
    const isMatch =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[54]++, await _bcryptjs.compare(password, storedHash));
    // Hash a new password for comparison
    const salt =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[55]++, await _bcryptjs.genSalt(10));
    const newHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[56]++, await _bcryptjs.hash("password", salt));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[57]++;
    return _server.NextResponse.json({
      success: true,
      userFound: true,
      passwordMatch: isMatch,
      userInfo: {
        id: user.id,
        name: user.name,
        email: user.email,
        storedPasswordHash: storedHash,
        newGeneratedHash: newHash,
        passwordCompareResult: isMatch
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[58]++;
    console.error("Verify login error:", error);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[59]++;
    return _server.NextResponse.json({
      success: false,
      message: "Verification failed",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,