{"version":3,"names":["GET","cov_1mz236g7zl","f","s","fetchSalesData","fetchSalesDataFiltered","startDate","endDate","shopId","userId","monthNames","b","start","Date","end","setHours","months","current","getFullYear","getMonth","monthStart","monthEnd","actualEnd","actualStart","monthlyInvoices","_prisma","safeQuery","prisma","invoice","aggregate","where","createdAt","gte","lte","createdBy","_sum","total","push","month","sales","setMonth","success","data","periodDays","now","currentYear","currentMonth","i","monthIndex","yearToUse","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","getUserIdFromToken","user","findUnique","id","select","roleName","permissions","isAdmin","includes","filterUserId","console","log","isFiltered","userShopId","userRole","userContext","cacheKey","cachedData","_cache","cacheService","get","meta","shopFiltered","fromCache","salesResult","undefined","set","emptyMonths","Array","fill","map","_","reverse","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/sales/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Filtered version of fetchSalesData with date range and shop support\nexport async function fetchSalesDataFiltered(startDate?: string | null, endDate?: string | null, shopId?: number | null, userId?: string | null) {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    if (startDate && endDate) {\n        // Custom date range - generate monthly data within the range\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        end.setHours(23, 59, 59, 999);\n\n        const months = [];\n        const current = new Date(start.getFullYear(), start.getMonth(), 1);\n\n        while (current <= end) {\n            const monthStart = new Date(current.getFullYear(), current.getMonth(), 1);\n            const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0, 23, 59, 59, 999);\n\n            // Ensure we don't go beyond the specified end date\n            const actualEnd = monthEnd > end ? end : monthEnd;\n            const actualStart = monthStart < start ? start : monthStart;\n\n            const monthlyInvoices = await safeQuery(\n                () => prisma.invoice.aggregate({\n                    where: {\n                        createdAt: {\n                            gte: actualStart,\n                            lte: actualEnd\n                        },\n                        ...(shopId ? { shopId } : {}),\n                        ...(userId ? { createdBy: userId } : {})\n                    },\n                    _sum: {\n                        total: true\n                    }\n                }),\n                { _sum: { total: null } },\n                `Failed to fetch invoice data for ${monthNames[current.getMonth()]} ${current.getFullYear()}`\n            );\n\n            months.push({\n                month: `${monthNames[current.getMonth()]} ${current.getFullYear()}`,\n                sales: monthlyInvoices._sum.total || 0\n            });\n\n            // Move to next month\n            current.setMonth(current.getMonth() + 1);\n        }\n\n        return {\n            success: true,\n            data: months\n        };\n    } else {\n        // Default behavior - last 6 months\n        return fetchSalesData();\n    }\n}\n\nexport async function fetchSalesData(shopId?: number | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    // Get current month and year\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = now.getMonth(); // 0-indexed (0 = January)\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    // Prepare the result array with 6 months of data (current month and 5 previous months)\n    const months = [];\n\n    for (let i = 5; i >= 0; i--) {\n        // Calculate month index (handle wrapping to previous year)\n        let monthIndex = currentMonth - i;\n        let yearToUse = currentYear;\n\n        if (monthIndex < 0) {\n            monthIndex += 12;\n            yearToUse -= 1;\n        }\n\n        // Create start and end date for this month\n        const startDate = new Date(yearToUse, monthIndex, 1);\n        const endDate = new Date(yearToUse, monthIndex + 1, 0, 23, 59, 59, 999);\n\n        // Query actual invoices for this month\n        const monthlyInvoices = await safeQuery(\n            () => prisma.invoice.aggregate({\n                where: {\n                    createdAt: {\n                        gte: startDate,\n                        lte: endDate\n                    },\n                    ...(shopId ? { shopId } : {}),\n                    ...(userId ? { createdBy: userId } : {})\n                },\n                _sum: {\n                    total: true\n                }\n            }),\n            { _sum: { total: null } }, // Default to null if query fails\n            `Failed to fetch invoice data for ${monthNames[monthIndex]} ${yearToUse}`\n        );\n\n        // Add the month data to our result array\n        months.push({\n            month: monthNames[monthIndex],\n            sales: monthlyInvoices._sum.total || 0 // Use 0 if no sales data\n        });\n    }\n    return {\n        success: true,\n        data: months\n    };\n}\n\n// GET: Fetch monthly sales data with shop-based filtering\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_sales');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                roleName: true,\n                permissions: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       (user.permissions && user.permissions.includes('admin:all'));\n\n        // Determine user filtering\n        let filterUserId: string | null = null;\n        if (!isAdmin) {\n            filterUserId = userId;\n        }\n\n        console.log('Sales API - Shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            isAdmin: context.isAdmin,\n            userShopId: context.userShopId,\n            userId: userId,\n            userRole: user.roleName,\n            filterUserId: filterUserId\n        });\n\n        // Create cache key that includes shop context and user context\n        const userContext = isAdmin ? 'admin' : userId;\n        const cacheKey = context.isFiltered ? \n            `dashboard:sales:shop:${context.shopId}:user:${userContext}` : \n            `dashboard:sales:all:user:${userContext}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Sales data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh sales data');\n        const salesResult = await fetchSalesData(\n            context.isFiltered ? context.shopId : null,\n            undefined,\n            undefined,\n            undefined,\n            filterUserId\n        );\n\n        // Cache for 5 minutes (sales data changes less frequently)\n        await cacheService.set(cacheKey, salesResult, 300);\n        console.log('ðŸ’¾ Sales data cached for 5 minutes');\n\n        return NextResponse.json({\n            ...salesResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        });\n    } catch (error) {\n        console.error('Error generating sales data:', error);\n\n        // Return months with zero values on error, consistent with original logic\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const now = new Date();\n        const currentMonth = now.getMonth();\n\n        const emptyMonths = Array(6).fill(0).map((_, i) => {\n            let monthIndex = currentMonth - i;\n            if (monthIndex < 0) monthIndex += 12;\n\n            return {\n                month: monthNames[monthIndex],\n                sales: 0\n            };\n        }).reverse();\n\n        return NextResponse.json({\n            success: true, // Or false\n            data: emptyMonths,\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                error: true\n            }\n        });\n    }\n});"],"mappingswHaA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EAxDSI,cAAc,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdC,cAAA;;EAzDAC,sBAAsB,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAtBE,sBAAA;;;;;kCAPoB;;;kCACR;;;kCACL;;;mCACK;;;mCAC0B;AAGrD,eAAeA,uBAAuBC,SAAyB,EAAEC,OAAuB,EAAEC,MAAsB,EAAEC,MAAsB;EAAA;EAAAR,cAAA,GAAAC,CAAA;EAC3I,MAAMQ,UAAA;EAAA;EAAA,CAAAT,cAAA,GAAAE,CAAA,QAAa,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAEvG;EAAI;EAAA,CAAAF,cAAA,GAAAU,CAAA,UAAAL,SAAA;EAAA;EAAA,CAAAL,cAAA,GAAAU,CAAA,UAAaJ,OAAA,GAAS;IAAA;IAAAN,cAAA,GAAAU,CAAA;IACtB;IACA,MAAMC,KAAA;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA,QAAQ,IAAIU,IAAA,CAAKP,SAAA;IACvB,MAAMQ,GAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAM,IAAIU,IAAA,CAAKN,OAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IACrBW,GAAA,CAAIC,QAAQ,CAAC,IAAI,IAAI,IAAI;IAEzB,MAAMC,MAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAS,EAAE;IACjB,MAAMc,OAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAU,IAAIU,IAAA,CAAKD,KAAA,CAAMM,WAAW,IAAIN,KAAA,CAAMO,QAAQ,IAAI;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAEhE,OAAOc,OAAA,IAAWH,GAAA,EAAK;MACnB,MAAMM,UAAA;MAAA;MAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAa,IAAIU,IAAA,CAAKI,OAAA,CAAQC,WAAW,IAAID,OAAA,CAAQE,QAAQ,IAAI;MACvE,MAAME,QAAA;MAAA;MAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,IAAIU,IAAA,CAAKI,OAAA,CAAQC,WAAW,IAAID,OAAA,CAAQE,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI;MAExF;MACA,MAAMG,SAAA;MAAA;MAAA,CAAArB,cAAA,GAAAE,CAAA,QAAYkB,QAAA,GAAWP,GAAA;MAAA;MAAA,CAAAb,cAAA,GAAAU,CAAA,UAAMG,GAAA;MAAA;MAAA,CAAAb,cAAA,GAAAU,CAAA,UAAMU,QAAA;MACzC,MAAME,WAAA;MAAA;MAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAciB,UAAA,GAAaR,KAAA;MAAA;MAAA,CAAAX,cAAA,GAAAU,CAAA,UAAQC,KAAA;MAAA;MAAA,CAAAX,cAAA,GAAAU,CAAA,UAAQS,UAAA;MAEjD,MAAMI,eAAA;MAAA;MAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAkB,MAAM,IAAAsB,OAAA,CAAAC,SAAS,EACnC,MAAM;QAAA;QAAAzB,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsB,OAAA,CAAAE,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC;UAC3BC,KAAA,EAAO;YACHC,SAAA,EAAW;cACPC,GAAA,EAAKT,WAAA;cACLU,GAAA,EAAKX;YACT;YACA,IAAId,MAAA;YAAA;YAAA,CAAAP,cAAA,GAAAU,CAAA,UAAS;cAAEH;YAAO;YAAA;YAAA,CAAAP,cAAA,GAAAU,CAAA,UAAI,CAAC,CAAC;YAC5B,IAAIF,MAAA;YAAA;YAAA,CAAAR,cAAA,GAAAU,CAAA,UAAS;cAAEuB,SAAA,EAAWzB;YAAO;YAAA;YAAA,CAAAR,cAAA,GAAAU,CAAA,UAAI,CAAC,CAAC;UAC3C;UACAwB,IAAA,EAAM;YACFC,KAAA,EAAO;UACX;QACJ;MAAA,GACA;QAAED,IAAA,EAAM;UAAEC,KAAA,EAAO;QAAK;MAAE,GACxB,oCAAoC1B,UAAU,CAACO,OAAA,CAAQE,QAAQ,GAAG,IAAIF,OAAA,CAAQC,WAAW,IAAI;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MAGjGa,MAAA,CAAOqB,IAAI,CAAC;QACRC,KAAA,EAAO,GAAG5B,UAAU,CAACO,OAAA,CAAQE,QAAQ,GAAG,IAAIF,OAAA,CAAQC,WAAW,IAAI;QACnEqB,KAAA;QAAO;QAAA,CAAAtC,cAAA,GAAAU,CAAA,UAAAa,eAAA,CAAgBW,IAAI,CAACC,KAAK;QAAA;QAAA,CAAAnC,cAAA,GAAAU,CAAA,UAAI;MACzC;MAEA;MAAA;MAAAV,cAAA,GAAAE,CAAA;MACAc,OAAA,CAAQuB,QAAQ,CAACvB,OAAA,CAAQE,QAAQ,KAAK;IAC1C;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAEA,OAAO;MACHsC,OAAA,EAAS;MACTC,IAAA,EAAM1B;IACV;EACJ,OAAO;IAAA;IAAAf,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACH;IACA,OAAOC,cAAA;EACX;AACJ;AAEO,eAAeA,eAAeI,MAAsB,EAAEmC,UAAmB,EAAErC,SAAgB,EAAEC,OAAc,EAAEE,MAAsB;EAAA;EAAAR,cAAA,GAAAC,CAAA;EACtI;EACA,MAAM0C,GAAA;EAAA;EAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAM,IAAIU,IAAA;EAChB,MAAMgC,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAcyC,GAAA,CAAI1B,WAAW;EACnC,MAAM4B,YAAA;EAAA;EAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAeyC,GAAA,CAAIzB,QAAQ,KAAI;EACrC,MAAMT,UAAA;EAAA;EAAA,CAAAT,cAAA,GAAAE,CAAA,QAAa,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;EAEvG;EACA,MAAMa,MAAA;EAAA;EAAA,CAAAf,cAAA,GAAAE,CAAA,QAAS,EAAE;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAEjB,KAAK,IAAI4C,CAAA;EAAA;EAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAI,IAAG4C,CAAA,IAAK,GAAGA,CAAA,IAAK;IACzB;IACA,IAAIC,UAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAa2C,YAAA,GAAeC,CAAA;IAChC,IAAIE,SAAA;IAAA;IAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAY0C,WAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEhB,IAAI6C,UAAA,GAAa,GAAG;MAAA;MAAA/C,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MAChB6C,UAAA,IAAc;MAAA;MAAA/C,cAAA,GAAAE,CAAA;MACd8C,SAAA,IAAa;IACjB;IAAA;IAAA;MAAAhD,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA,MAAML,SAAA;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,QAAY,IAAIU,IAAA,CAAKoC,SAAA,EAAWD,UAAA,EAAY;IAClD,MAAMzC,OAAA;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,QAAU,IAAIU,IAAA,CAAKoC,SAAA,EAAWD,UAAA,GAAa,GAAG,GAAG,IAAI,IAAI,IAAI;IAEnE;IACA,MAAMxB,eAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAkB,MAAM,IAAAsB,OAAA,CAAAC,SAAS,EACnC,MAAM;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsB,OAAA,CAAAE,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC;QAC3BC,KAAA,EAAO;UACHC,SAAA,EAAW;YACPC,GAAA,EAAK1B,SAAA;YACL2B,GAAA,EAAK1B;UACT;UACA,IAAIC,MAAA;UAAA;UAAA,CAAAP,cAAA,GAAAU,CAAA,UAAS;YAAEH;UAAO;UAAA;UAAA,CAAAP,cAAA,GAAAU,CAAA,UAAI,CAAC,CAAC;UAC5B,IAAIF,MAAA;UAAA;UAAA,CAAAR,cAAA,GAAAU,CAAA,UAAS;YAAEuB,SAAA,EAAWzB;UAAO;UAAA;UAAA,CAAAR,cAAA,GAAAU,CAAA,UAAI,CAAC,CAAC;QAC3C;QACAwB,IAAA,EAAM;UACFC,KAAA,EAAO;QACX;MACJ;IAAA,GACA;MAAED,IAAA,EAAM;QAAEC,KAAA,EAAO;MAAK;IAAE,GACxB,oCAAoC1B,UAAU,CAACsC,UAAA,CAAW,IAAIC,SAAA,EAAW;IAG7E;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IACAa,MAAA,CAAOqB,IAAI,CAAC;MACRC,KAAA,EAAO5B,UAAU,CAACsC,UAAA,CAAW;MAC7BT,KAAA;MAAO;MAAA,CAAAtC,cAAA,GAAAU,CAAA,WAAAa,eAAA,CAAgBW,IAAI,CAACC,KAAK;MAAA;MAAA,CAAAnC,cAAA,GAAAU,CAAA,WAAI,GAAE;IAC3C;EACJ;EAAA;EAAAV,cAAA,GAAAE,CAAA;EACA,OAAO;IACHsC,OAAA,EAAS;IACTC,IAAA,EAAM1B;EACV;AACJ;AAGO,MAAMhB,GAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAM+C,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAArD,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7E,IAAI;IACA;IACA,MAAMoD,UAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAqD,KAAA,CAAAC,uBAAuB,EAACJ,OAAA,EAAS;IAAA;IAAApD,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACoD,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAzD,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACrB,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAOP,UAAA,CAAWQ;MAAQ,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC1E;IAAA;IAAA;MAAA/D,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA,MAAMF,MAAA;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,QAAS,MAAM,IAAAqD,KAAA,CAAAS,kBAAkB,EAACZ,OAAA;IAAA;IAAApD,cAAA,GAAAE,CAAA;IACxC,IAAI,CAACM,MAAA,EAAQ;MAAA;MAAAR,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACT,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAA6B,GAAG;QAAEE,MAAA,EAAQ;MAAI;IACpF;IAAA;IAAA;MAAA/D,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA,MAAMuD,IAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAO,MAAMsB,OAAA,CAAAE,MAAM,CAACuC,IAAI,CAACC,UAAU,CAAC;MACtCrC,KAAA,EAAO;QAAEsC,EAAA,EAAI3D;MAAO;MACpB4D,MAAA,EAAQ;QACJD,EAAA,EAAI;QACJE,QAAA,EAAU;QACVC,WAAA,EAAa;MACjB;IACJ;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAEA,IAAI,CAAC+D,IAAA,EAAM;MAAA;MAAAjE,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACP,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAiB,GAAG;QAAEE,MAAA,EAAQ;MAAI;IACxE;IAAA;IAAA;MAAA/D,cAAA,GAAAU,CAAA;IAAA;IAEA;IACA,MAAM6D,OAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAE,CAAA;IAAU;IAAA,CAAAF,cAAA,GAAAU,CAAA,WAAAuD,IAAA,CAAKI,QAAQ,KAAK;IAAA;IAAA,CAAArE,cAAA,GAAAU,CAAA,WAAWuD,IAAA,CAAKI,QAAQ,KAAK;IAC/C;IAAA,CAAArE,cAAA,GAAAU,CAAA,WAAAuD,IAAA,CAAKK,WAAW;IAAA;IAAA,CAAAtE,cAAA,GAAAU,CAAA,WAAIuD,IAAA,CAAKK,WAAW,CAACE,QAAQ,CAAC;IAE9D;IACA,IAAIC,YAAA;IAAA;IAAA,CAAAzE,cAAA,GAAAE,CAAA,QAA8B;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACqE,OAAA,EAAS;MAAA;MAAAvE,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACVuE,YAAA,GAAejE,MAAA;IACnB;IAAA;IAAA;MAAAR,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAEAwE,OAAA,CAAQC,GAAG,CAAC,6BAA6B;MACrCpE,MAAA,EAAQ8C,OAAA,CAAQ9C,MAAM;MACtBqE,UAAA,EAAYvB,OAAA,CAAQuB,UAAU;MAC9BL,OAAA,EAASlB,OAAA,CAAQkB,OAAO;MACxBM,UAAA,EAAYxB,OAAA,CAAQwB,UAAU;MAC9BrE,MAAA,EAAQA,MAAA;MACRsE,QAAA,EAAUb,IAAA,CAAKI,QAAQ;MACvBI,YAAA,EAAcA;IAClB;IAEA;IACA,MAAMM,WAAA;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAcqE,OAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAU,CAAA,WAAU;IAAA;IAAA,CAAAV,cAAA,GAAAU,CAAA,WAAUF,MAAA;IACxC,MAAMwE,QAAA;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,QAAWmD,OAAA,CAAQuB,UAAU;IAAA;IAAA,CAAA5E,cAAA,GAAAU,CAAA,WAC/B,wBAAwB2C,OAAA,CAAQ9C,MAAM,SAASwE,WAAA,EAAa;IAAA;IAAA,CAAA/E,cAAA,GAAAU,CAAA,WAC5D,4BAA4BqE,WAAA,EAAa;IAC7C,MAAME,UAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAa,MAAMgF,MAAA,CAAAC,YAAY,CAACC,GAAG,CAACJ,QAAA;IAAA;IAAAhF,cAAA,GAAAE,CAAA;IAE1C,IAAI+E,UAAA,EAAY;MAAA;MAAAjF,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACZwE,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAA3E,cAAA,GAAAE,CAAA;MACZ,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrB,GAAGqB,UAAU;QACbI,IAAA,EAAM;UACFC,YAAA,EAAcjC,OAAA,CAAQuB,UAAU;UAChCrE,MAAA,EAAQ8C,OAAA,CAAQ9C,MAAM;UACtBgF,SAAA,EAAW;QACf;MACJ;IACJ;IAAA;IAAA;MAAAvF,cAAA,GAAAU,CAAA;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAEAwE,OAAA,CAAQC,GAAG,CAAC;IACZ,MAAMa,WAAA;IAAA;IAAA,CAAAxF,cAAA,GAAAE,CAAA,QAAc,MAAMC,cAAA,CACtBkD,OAAA,CAAQuB,UAAU;IAAA;IAAA,CAAA5E,cAAA,GAAAU,CAAA,WAAG2C,OAAA,CAAQ9C,MAAM;IAAA;IAAA,CAAAP,cAAA,GAAAU,CAAA,WAAG,OACtC+E,SAAA,EACAA,SAAA,EACAA,SAAA,EACAhB,YAAA;IAGJ;IAAA;IAAAzE,cAAA,GAAAE,CAAA;IACA,MAAMgF,MAAA,CAAAC,YAAY,CAACO,GAAG,CAACV,QAAA,EAAUQ,WAAA,EAAa;IAAA;IAAAxF,cAAA,GAAAE,CAAA;IAC9CwE,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAA3E,cAAA,GAAAE,CAAA;IAEZ,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrB,GAAG4B,WAAW;MACdH,IAAA,EAAM;QACFC,YAAA,EAAcjC,OAAA,CAAQuB,UAAU;QAChCrE,MAAA,EAAQ8C,OAAA,CAAQ9C,MAAM;QACtBgF,SAAA,EAAW;MACf;IACJ;EACJ,EAAE,OAAO1B,KAAA,EAAO;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IACZwE,OAAA,CAAQb,KAAK,CAAC,gCAAgCA,KAAA;IAE9C;IACA,MAAMpD,UAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAa,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;IACvG,MAAMyC,GAAA;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAM,IAAIU,IAAA;IAChB,MAAMiC,YAAA;IAAA;IAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAeyC,GAAA,CAAIzB,QAAQ;IAEjC,MAAMyE,WAAA;IAAA;IAAA,CAAA3F,cAAA,GAAAE,CAAA,QAAc0F,KAAA,CAAM,GAAGC,IAAI,CAAC,GAAGC,GAAG,CAAC,CAACC,CAAA,EAAGjD,CAAA;MAAA;MAAA9C,cAAA,GAAAC,CAAA;MACzC,IAAI8C,UAAA;MAAA;MAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAa2C,YAAA,GAAeC,CAAA;MAAA;MAAA9C,cAAA,GAAAE,CAAA;MAChC,IAAI6C,UAAA,GAAa,GAAG;QAAA;QAAA/C,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAE,CAAA;QAAA6C,UAAA,IAAc;MAAA;MAAA;MAAA;QAAA/C,cAAA,GAAAU,CAAA;MAAA;MAAAV,cAAA,GAAAE,CAAA;MAElC,OAAO;QACHmC,KAAA,EAAO5B,UAAU,CAACsC,UAAA,CAAW;QAC7BT,KAAA,EAAO;MACX;IACJ,GAAG0D,OAAO;IAAA;IAAAhG,cAAA,GAAAE,CAAA;IAEV,OAAOwD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBpB,OAAA,EAAS;MACTC,IAAA,EAAMkD,WAAA;MACN7B,OAAA,EAASD,KAAA,YAAiBoC,KAAA;MAAA;MAAA,CAAAjG,cAAA,GAAAU,CAAA,WAAQmD,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAA9D,cAAA,GAAAU,CAAA,WAAG;MAClD2E,IAAA,EAAM;QACFC,YAAA,EAAcjC,OAAA,CAAQuB,UAAU;QAChCrE,MAAA,EAAQ8C,OAAA,CAAQ9C,MAAM;QACtBsD,KAAA,EAAO;MACX;IACJ;EACJ;AACJ","ignoreList":[]}