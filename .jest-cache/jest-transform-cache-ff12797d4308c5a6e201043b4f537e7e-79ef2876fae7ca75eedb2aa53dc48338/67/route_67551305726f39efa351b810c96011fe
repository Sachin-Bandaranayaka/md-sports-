5ad50076bf99f3a457b13f69bb7e903e
"use strict";

/* istanbul ignore next */
function cov_17drwboyvr() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/test/inventory/route.ts";
  var hash = "ceb650f789debab4422062c42ae6eb7e1d0bea49";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/test/inventory/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "6": {
        start: {
          line: 16,
          column: 31
        },
        end: {
          line: 16,
          column: 84
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "8": {
        start: {
          line: 19,
          column: 31
        },
        end: {
          line: 19,
          column: 73
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 61
        }
      },
      "10": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "11": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "13": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "14": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 47
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 43
        }
      },
      "16": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "18": {
        start: {
          line: 45,
          column: 53
        },
        end: {
          line: 52,
          column: 17
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 48
        }
      },
      "20": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 44
          },
          end: {
            line: 45,
            column: 45
          }
        },
        loc: {
          start: {
            line: 45,
            column: 53
          },
          end: {
            line: 52,
            column: 17
          }
        },
        line: 45
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 58
          }
        }, {
          start: {
            line: 31,
            column: 62
          },
          end: {
            line: 31,
            column: 63
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 32,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 32,
            column: 42
          }
        }, {
          start: {
            line: 32,
            column: 46
          },
          end: {
            line: 32,
            column: 47
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 51,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 51,
            column: 41
          }
        }, {
          start: {
            line: 51,
            column: 45
          },
          end: {
            line: 51,
            column: 46
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 51
          },
          end: {
            line: 51,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 51
          },
          end: {
            line: 51,
            column: 84
          }
        }, {
          start: {
            line: 51,
            column: 88
          },
          end: {
            line: 51,
            column: 89
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 19
          },
          end: {
            line: 60,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 57
          }
        }, {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 60,
            column: 73
          }
        }],
        line: 60
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/test/inventory/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n    try {\n        // Test database connection\n        const testConnection = await prisma.$queryRaw`SELECT 1 as connected`;\n        console.log('Database connection test:', testConnection);\n\n        // Count inventory items\n        const inventoryCount = await prisma.inventoryItem.count();\n        console.log('Inventory item count:', inventoryCount);\n\n        // Get all inventory items with products\n        const inventoryItems = await prisma.inventoryItem.findMany({\n            include: {\n                product: true\n            },\n            take: 5 // Limit to 5 items for testing\n        });\n\n        // Calculate inventory value manually\n        let manualTotal = 0;\n        for (const item of inventoryItems) {\n            const cost = item.product?.weightedaveragecost || 0;\n            const quantity = item.quantity || 0;\n            manualTotal += cost * quantity;\n        }\n\n        // Direct SQL query to calculate total value\n        const sqlResult = await prisma.$queryRaw`\n            SELECT SUM(i.quantity * p.weightedaveragecost) as total_value\n            FROM \"InventoryItem\" i\n            JOIN \"Product\" p ON i.\"productId\" = p.id\n        `;\n\n        return NextResponse.json({\n            success: true,\n            connection: testConnection,\n            inventoryCount,\n            sampleItems: inventoryItems.map(item => ({\n                id: item.id,\n                productId: item.productId,\n                productName: item.product?.name,\n                quantity: item.quantity,\n                cost: item.product?.weightedaveragecost,\n                value: (item.quantity || 0) * (item.product?.weightedaveragecost || 0)\n            })),\n            manualTotal,\n            sqlResult\n        });\n    } catch (error) {\n        console.error('Test API error:', error);\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["GET", "testConnection", "prisma", "$queryRaw", "console", "log", "inventoryCount", "inventoryItem", "count", "inventoryItems", "findMany", "include", "product", "take", "manualTotal", "item", "cost", "weightedaveragecost", "quantity", "sqlResult", "NextResponse", "json", "success", "connection", "sampleItems", "map", "id", "productId", "productName", "name", "value", "error", "Error", "message", "String", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA;IAClB,IAAI;QACA,2BAA2B;QAC3B,MAAMC,iBAAiB,MAAMC,cAAM,CAACC,SAAS,CAAC,qBAAqB,CAAC;QACpEC,QAAQC,GAAG,CAAC,6BAA6BJ;QAEzC,wBAAwB;QACxB,MAAMK,iBAAiB,MAAMJ,cAAM,CAACK,aAAa,CAACC,KAAK;QACvDJ,QAAQC,GAAG,CAAC,yBAAyBC;QAErC,wCAAwC;QACxC,MAAMG,iBAAiB,MAAMP,cAAM,CAACK,aAAa,CAACG,QAAQ,CAAC;YACvDC,SAAS;gBACLC,SAAS;YACb;YACAC,MAAM,EAAE,+BAA+B;QAC3C;QAEA,qCAAqC;QACrC,IAAIC,cAAc;QAClB,KAAK,MAAMC,QAAQN,eAAgB;YAC/B,MAAMO,OAAOD,KAAKH,OAAO,EAAEK,uBAAuB;YAClD,MAAMC,WAAWH,KAAKG,QAAQ,IAAI;YAClCJ,eAAeE,OAAOE;QAC1B;QAEA,4CAA4C;QAC5C,MAAMC,YAAY,MAAMjB,cAAM,CAACC,SAAS,CAAC;;;;QAIzC,CAAC;QAED,OAAOiB,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,YAAYtB;YACZK;YACAkB,aAAaf,eAAegB,GAAG,CAACV,CAAAA,OAAS,CAAA;oBACrCW,IAAIX,KAAKW,EAAE;oBACXC,WAAWZ,KAAKY,SAAS;oBACzBC,aAAab,KAAKH,OAAO,EAAEiB;oBAC3BX,UAAUH,KAAKG,QAAQ;oBACvBF,MAAMD,KAAKH,OAAO,EAAEK;oBACpBa,OAAO,AAACf,CAAAA,KAAKG,QAAQ,IAAI,CAAA,IAAMH,CAAAA,KAAKH,OAAO,EAAEK,uBAAuB,CAAA;gBACxE,CAAA;YACAH;YACAK;QACJ;IACJ,EAAE,OAAOY,OAAO;QACZ3B,QAAQ2B,KAAK,CAAC,mBAAmBA;QACjC,OAAOX,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTS,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;QAC3D,GAAG;YAAEI,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ceb650f789debab4422062c42ae6eb7e1d0bea49"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17drwboyvr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17drwboyvr();
cov_17drwboyvr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_17drwboyvr().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_17drwboyvr().f[0]++;
    cov_17drwboyvr().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_17drwboyvr().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_17drwboyvr().s[4]++, require("../../../../lib/prisma"));
async function GET() {
  /* istanbul ignore next */
  cov_17drwboyvr().f[1]++;
  cov_17drwboyvr().s[5]++;
  try {
    // Test database connection
    const testConnection =
    /* istanbul ignore next */
    (cov_17drwboyvr().s[6]++, await _prisma.prisma.$queryRaw`SELECT 1 as connected`);
    /* istanbul ignore next */
    cov_17drwboyvr().s[7]++;
    console.log("Database connection test:", testConnection);
    // Count inventory items
    const inventoryCount =
    /* istanbul ignore next */
    (cov_17drwboyvr().s[8]++, await _prisma.prisma.inventoryItem.count());
    /* istanbul ignore next */
    cov_17drwboyvr().s[9]++;
    console.log("Inventory item count:", inventoryCount);
    // Get all inventory items with products
    const inventoryItems =
    /* istanbul ignore next */
    (cov_17drwboyvr().s[10]++, await _prisma.prisma.inventoryItem.findMany({
      include: {
        product: true
      },
      take: 5 // Limit to 5 items for testing
    }));
    // Calculate inventory value manually
    let manualTotal =
    /* istanbul ignore next */
    (cov_17drwboyvr().s[11]++, 0);
    /* istanbul ignore next */
    cov_17drwboyvr().s[12]++;
    for (const item of inventoryItems) {
      const cost =
      /* istanbul ignore next */
      (cov_17drwboyvr().s[13]++,
      /* istanbul ignore next */
      (cov_17drwboyvr().b[0][0]++, item.product?.weightedaveragecost) ||
      /* istanbul ignore next */
      (cov_17drwboyvr().b[0][1]++, 0));
      const quantity =
      /* istanbul ignore next */
      (cov_17drwboyvr().s[14]++,
      /* istanbul ignore next */
      (cov_17drwboyvr().b[1][0]++, item.quantity) ||
      /* istanbul ignore next */
      (cov_17drwboyvr().b[1][1]++, 0));
      /* istanbul ignore next */
      cov_17drwboyvr().s[15]++;
      manualTotal += cost * quantity;
    }
    // Direct SQL query to calculate total value
    const sqlResult =
    /* istanbul ignore next */
    (cov_17drwboyvr().s[16]++, await _prisma.prisma.$queryRaw`
            SELECT SUM(i.quantity * p.weightedaveragecost) as total_value
            FROM "InventoryItem" i
            JOIN "Product" p ON i."productId" = p.id
        `);
    /* istanbul ignore next */
    cov_17drwboyvr().s[17]++;
    return _server.NextResponse.json({
      success: true,
      connection: testConnection,
      inventoryCount,
      sampleItems: inventoryItems.map(item => {
        /* istanbul ignore next */
        cov_17drwboyvr().f[2]++;
        cov_17drwboyvr().s[18]++;
        return {
          id: item.id,
          productId: item.productId,
          productName: item.product?.name,
          quantity: item.quantity,
          cost: item.product?.weightedaveragecost,
          value: (
          /* istanbul ignore next */
          (cov_17drwboyvr().b[2][0]++, item.quantity) ||
          /* istanbul ignore next */
          (cov_17drwboyvr().b[2][1]++, 0)) * (
          /* istanbul ignore next */
          (cov_17drwboyvr().b[3][0]++, item.product?.weightedaveragecost) ||
          /* istanbul ignore next */
          (cov_17drwboyvr().b[3][1]++, 0))
        };
      }),
      manualTotal,
      sqlResult
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17drwboyvr().s[19]++;
    console.error("Test API error:", error);
    /* istanbul ignore next */
    cov_17drwboyvr().s[20]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_17drwboyvr().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_17drwboyvr().b[4][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTdkcndib3l2ciIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsImYiLCJ0ZXN0Q29ubmVjdGlvbiIsIl9wcmlzbWEiLCJwcmlzbWEiLCIkcXVlcnlSYXciLCJjb25zb2xlIiwibG9nIiwiaW52ZW50b3J5Q291bnQiLCJpbnZlbnRvcnlJdGVtIiwiY291bnQiLCJpbnZlbnRvcnlJdGVtcyIsImZpbmRNYW55IiwiaW5jbHVkZSIsInByb2R1Y3QiLCJ0YWtlIiwibWFudWFsVG90YWwiLCJpdGVtIiwiY29zdCIsImIiLCJ3ZWlnaHRlZGF2ZXJhZ2Vjb3N0IiwicXVhbnRpdHkiLCJzcWxSZXN1bHQiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN1Y2Nlc3MiLCJjb25uZWN0aW9uIiwic2FtcGxlSXRlbXMiLCJtYXAiLCJpZCIsInByb2R1Y3RJZCIsInByb2R1Y3ROYW1lIiwibmFtZSIsInZhbHVlIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJTdHJpbmciLCJzdGF0dXMiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL3Rlc3QvaW52ZW50b3J5L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVGVzdCBkYXRhYmFzZSBjb25uZWN0aW9uXG4gICAgICAgIGNvbnN0IHRlc3RDb25uZWN0aW9uID0gYXdhaXQgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgMSBhcyBjb25uZWN0ZWRgO1xuICAgICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdGlvbiB0ZXN0OicsIHRlc3RDb25uZWN0aW9uKTtcblxuICAgICAgICAvLyBDb3VudCBpbnZlbnRvcnkgaXRlbXNcbiAgICAgICAgY29uc3QgaW52ZW50b3J5Q291bnQgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5jb3VudCgpO1xuICAgICAgICBjb25zb2xlLmxvZygnSW52ZW50b3J5IGl0ZW0gY291bnQ6JywgaW52ZW50b3J5Q291bnQpO1xuXG4gICAgICAgIC8vIEdldCBhbGwgaW52ZW50b3J5IGl0ZW1zIHdpdGggcHJvZHVjdHNcbiAgICAgICAgY29uc3QgaW52ZW50b3J5SXRlbXMgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kTWFueSh7XG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgcHJvZHVjdDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRha2U6IDUgLy8gTGltaXQgdG8gNSBpdGVtcyBmb3IgdGVzdGluZ1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgaW52ZW50b3J5IHZhbHVlIG1hbnVhbGx5XG4gICAgICAgIGxldCBtYW51YWxUb3RhbCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpbnZlbnRvcnlJdGVtcykge1xuICAgICAgICAgICAgY29uc3QgY29zdCA9IGl0ZW0ucHJvZHVjdD8ud2VpZ2h0ZWRhdmVyYWdlY29zdCB8fCAwO1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBpdGVtLnF1YW50aXR5IHx8IDA7XG4gICAgICAgICAgICBtYW51YWxUb3RhbCArPSBjb3N0ICogcXVhbnRpdHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXJlY3QgU1FMIHF1ZXJ5IHRvIGNhbGN1bGF0ZSB0b3RhbCB2YWx1ZVxuICAgICAgICBjb25zdCBzcWxSZXN1bHQgPSBhd2FpdCBwcmlzbWEuJHF1ZXJ5UmF3YFxuICAgICAgICAgICAgU0VMRUNUIFNVTShpLnF1YW50aXR5ICogcC53ZWlnaHRlZGF2ZXJhZ2Vjb3N0KSBhcyB0b3RhbF92YWx1ZVxuICAgICAgICAgICAgRlJPTSBcIkludmVudG9yeUl0ZW1cIiBpXG4gICAgICAgICAgICBKT0lOIFwiUHJvZHVjdFwiIHAgT04gaS5cInByb2R1Y3RJZFwiID0gcC5pZFxuICAgICAgICBgO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgY29ubmVjdGlvbjogdGVzdENvbm5lY3Rpb24sXG4gICAgICAgICAgICBpbnZlbnRvcnlDb3VudCxcbiAgICAgICAgICAgIHNhbXBsZUl0ZW1zOiBpbnZlbnRvcnlJdGVtcy5tYXAoaXRlbSA9PiAoe1xuICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogaXRlbS5wcm9kdWN0SWQsXG4gICAgICAgICAgICAgICAgcHJvZHVjdE5hbWU6IGl0ZW0ucHJvZHVjdD8ubmFtZSxcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICBjb3N0OiBpdGVtLnByb2R1Y3Q/LndlaWdodGVkYXZlcmFnZWNvc3QsXG4gICAgICAgICAgICAgICAgdmFsdWU6IChpdGVtLnF1YW50aXR5IHx8IDApICogKGl0ZW0ucHJvZHVjdD8ud2VpZ2h0ZWRhdmVyYWdlY29zdCB8fCAwKVxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgbWFudWFsVG90YWwsXG4gICAgICAgICAgICBzcWxSZXN1bHRcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVGVzdCBBUEkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNUTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUhjOzs7Ozs7V0FBQUMsR0FBQTs7Ozs7a0NBSE87OztrQ0FDTjtBQUVoQixlQUFlQSxJQUFBO0VBQUE7RUFBQUgsY0FBQSxHQUFBSSxDQUFBO0VBQUFKLGNBQUEsR0FBQUUsQ0FBQTtFQUNsQixJQUFJO0lBQ0E7SUFDQSxNQUFNRyxjQUFBO0lBQUE7SUFBQSxDQUFBTCxjQUFBLEdBQUFFLENBQUEsT0FBaUIsTUFBTUksT0FBQSxDQUFBQyxNQUFNLENBQUNDLFNBQVMsdUJBQXVCO0lBQUE7SUFBQVIsY0FBQSxHQUFBRSxDQUFBO0lBQ3BFTyxPQUFBLENBQVFDLEdBQUcsQ0FBQyw2QkFBNkJMLGNBQUE7SUFFekM7SUFDQSxNQUFNTSxjQUFBO0lBQUE7SUFBQSxDQUFBWCxjQUFBLEdBQUFFLENBQUEsT0FBaUIsTUFBTUksT0FBQSxDQUFBQyxNQUFNLENBQUNLLGFBQWEsQ0FBQ0MsS0FBSztJQUFBO0lBQUFiLGNBQUEsR0FBQUUsQ0FBQTtJQUN2RE8sT0FBQSxDQUFRQyxHQUFHLENBQUMseUJBQXlCQyxjQUFBO0lBRXJDO0lBQ0EsTUFBTUcsY0FBQTtJQUFBO0lBQUEsQ0FBQWQsY0FBQSxHQUFBRSxDQUFBLFFBQWlCLE1BQU1JLE9BQUEsQ0FBQUMsTUFBTSxDQUFDSyxhQUFhLENBQUNHLFFBQVEsQ0FBQztNQUN2REMsT0FBQSxFQUFTO1FBQ0xDLE9BQUEsRUFBUztNQUNiO01BQ0FDLElBQUEsRUFBTSxFQUFFO0lBQ1o7SUFFQTtJQUNBLElBQUlDLFdBQUE7SUFBQTtJQUFBLENBQUFuQixjQUFBLEdBQUFFLENBQUEsUUFBYztJQUFBO0lBQUFGLGNBQUEsR0FBQUUsQ0FBQTtJQUNsQixLQUFLLE1BQU1rQixJQUFBLElBQVFOLGNBQUEsRUFBZ0I7TUFDL0IsTUFBTU8sSUFBQTtNQUFBO01BQUEsQ0FBQXJCLGNBQUEsR0FBQUUsQ0FBQTtNQUFPO01BQUEsQ0FBQUYsY0FBQSxHQUFBc0IsQ0FBQSxVQUFBRixJQUFBLENBQUtILE9BQU8sRUFBRU0sbUJBQUE7TUFBQTtNQUFBLENBQUF2QixjQUFBLEdBQUFzQixDQUFBLFVBQXVCO01BQ2xELE1BQU1FLFFBQUE7TUFBQTtNQUFBLENBQUF4QixjQUFBLEdBQUFFLENBQUE7TUFBVztNQUFBLENBQUFGLGNBQUEsR0FBQXNCLENBQUEsVUFBQUYsSUFBQSxDQUFLSSxRQUFRO01BQUE7TUFBQSxDQUFBeEIsY0FBQSxHQUFBc0IsQ0FBQSxVQUFJO01BQUE7TUFBQXRCLGNBQUEsR0FBQUUsQ0FBQTtNQUNsQ2lCLFdBQUEsSUFBZUUsSUFBQSxHQUFPRyxRQUFBO0lBQzFCO0lBRUE7SUFDQSxNQUFNQyxTQUFBO0lBQUE7SUFBQSxDQUFBekIsY0FBQSxHQUFBRSxDQUFBLFFBQVksTUFBTUksT0FBQSxDQUFBQyxNQUFNLENBQUNDLFNBQVM7Ozs7U0FJdkM7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFFRCxPQUFPd0IsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztNQUNyQkMsT0FBQSxFQUFTO01BQ1RDLFVBQUEsRUFBWXpCLGNBQUE7TUFDWk0sY0FBQTtNQUNBb0IsV0FBQSxFQUFhakIsY0FBQSxDQUFla0IsR0FBRyxDQUFDWixJQUFBLElBQVM7UUFBQTtRQUFBcEIsY0FBQSxHQUFBSSxDQUFBO1FBQUFKLGNBQUEsR0FBQUUsQ0FBQTtRQUFBO1VBQ3JDK0IsRUFBQSxFQUFJYixJQUFBLENBQUthLEVBQUU7VUFDWEMsU0FBQSxFQUFXZCxJQUFBLENBQUtjLFNBQVM7VUFDekJDLFdBQUEsRUFBYWYsSUFBQSxDQUFLSCxPQUFPLEVBQUVtQixJQUFBO1VBQzNCWixRQUFBLEVBQVVKLElBQUEsQ0FBS0ksUUFBUTtVQUN2QkgsSUFBQSxFQUFNRCxJQUFBLENBQUtILE9BQU8sRUFBRU0sbUJBQUE7VUFDcEJjLEtBQUEsRUFBTztVQUFDO1VBQUEsQ0FBQXJDLGNBQUEsR0FBQXNCLENBQUEsVUFBQUYsSUFBQSxDQUFLSSxRQUFRO1VBQUE7VUFBQSxDQUFBeEIsY0FBQSxHQUFBc0IsQ0FBQSxVQUFJO1VBQU07VUFBQSxDQUFBdEIsY0FBQSxHQUFBc0IsQ0FBQSxVQUFBRixJQUFBLENBQUtILE9BQU8sRUFBRU0sbUJBQUE7VUFBQTtVQUFBLENBQUF2QixjQUFBLEdBQUFzQixDQUFBLFVBQXVCO1FBQ3hFO01BQUE7TUFDQUgsV0FBQTtNQUNBTTtJQUNKO0VBQ0osRUFBRSxPQUFPYSxLQUFBLEVBQU87SUFBQTtJQUFBdEMsY0FBQSxHQUFBRSxDQUFBO0lBQ1pPLE9BQUEsQ0FBUTZCLEtBQUssQ0FBQyxtQkFBbUJBLEtBQUE7SUFBQTtJQUFBdEMsY0FBQSxHQUFBRSxDQUFBO0lBQ2pDLE9BQU93QixPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQ3JCQyxPQUFBLEVBQVM7TUFDVFMsS0FBQSxFQUFPQSxLQUFBLFlBQWlCQyxLQUFBO01BQUE7TUFBQSxDQUFBdkMsY0FBQSxHQUFBc0IsQ0FBQSxVQUFRZ0IsS0FBQSxDQUFNRSxPQUFPO01BQUE7TUFBQSxDQUFBeEMsY0FBQSxHQUFBc0IsQ0FBQSxVQUFHbUIsTUFBQSxDQUFPSCxLQUFBO0lBQzNELEdBQUc7TUFBRUksTUFBQSxFQUFRO0lBQUk7RUFDckI7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==