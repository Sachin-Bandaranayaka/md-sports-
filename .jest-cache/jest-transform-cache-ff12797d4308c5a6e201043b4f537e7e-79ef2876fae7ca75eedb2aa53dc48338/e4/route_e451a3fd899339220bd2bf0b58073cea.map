{"version":3,"names":["cov_200eng09pa","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","GET","POST","dynamic","maxDuration","runtime","REALTIME_CACHE_KEYS","UPDATES","LAST_POLL","NOTIFICATIONS","request","userId","_auth","getUserIdFromToken","_server","NextResponse","json","error","status","url","URL","types","searchParams","get","split","hasAnyPermission","requiredPermission","hasPermission","validateTokenPermission","isValid","shopId","getShopIdFromToken","lastPoll","since","parseInt","Date","now","updates","includes","inventoryUpdates","getInventoryUpdates","push","invoiceUpdates","getInvoiceUpdates","purchaseUpdates","getPurchaseInvoiceUpdates","transferUpdates","getTransferUpdates","notifications","getNotifications","supplierUpdates","getSupplierUpdates","sort","a","timestamp","hasMore","length","headers","console","body","data","update","cacheKey","existingUpdates","_cachevercel","cache","updatedList","slice","set","success","whereClause","updatedAt","gte","products","_prisma","prisma","product","findMany","where","select","id","inventoryItems","quantity","take","map","productId","reduce","total","item","action","getTime","createdAt","invoices","invoice","invoiceNumber","totalAmount","invoiceId","OR","fromShopId","toShopId","transfers","inventoryTransfer","transfer","transferId","purchaseInvoices","purchaseInvoice","supplier","orderBy","supplierName","Math","max","notification","title","message","isRead","notificationId","notificationType","suppliers","email","phone","supplierId"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/realtime/route.ts"],"sourcesContent":["/**\n * Real-time updates API for Vercel serverless deployment\n * Replaces Socket.IO with polling-based approach\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { cache } from '@/lib/cache-vercel';\nimport { validateTokenPermission, getUserIdFromToken, getShopIdFromToken } from '@/lib/auth';\n\n// Vercel serverless optimizations\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const maxDuration = 10;\n\n// Real-time data types\ninterface RealtimeUpdate {\n  type: 'inventory' | 'invoice' | 'transfer' | 'notification' | 'purchase' | 'supplier';\n  data: any;\n  timestamp: number;\n  shopId?: string;\n}\n\n// Cache keys for real-time updates\nconst REALTIME_CACHE_KEYS = {\n  UPDATES: 'realtime:updates',\n  LAST_POLL: 'realtime:last_poll',\n  NOTIFICATIONS: 'realtime:notifications'\n};\n\n// Get latest updates since last poll\nexport async function GET(request: NextRequest) {\n  try {\n    // Validate authentication - check for any view permission since realtime provides updates for multiple modules\n    const userId = await getUserIdFromToken(request);\n    if (!userId) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    // Check if user has any view permissions for the requested data types\n    const url = new URL(request.url);\n    const types = url.searchParams.get('types')?.split(',') || ['inventory', 'invoice', 'transfer', 'notification', 'supplier'];\n    \n    // Check permissions based on requested types\n    let hasAnyPermission = false;\n    for (const type of types) {\n      let requiredPermission = '';\n      switch (type) {\n        case 'inventory':\n          requiredPermission = 'inventory:view';\n          break;\n        case 'invoice':\n        case 'sales':\n          requiredPermission = 'sales:view';\n          break;\n        case 'purchase':\n          requiredPermission = 'purchases:view';\n          break;\n        case 'transfer':\n          requiredPermission = 'inventory:view'; // transfers are part of inventory\n          break;\n        case 'notification':\n          requiredPermission = 'view_dashboard'; // notifications are general\n          break;\n        case 'supplier':\n          requiredPermission = 'purchases:view'; // suppliers are part of purchases\n          break;\n        default:\n          continue;\n      }\n      \n      const hasPermission = await validateTokenPermission(request, requiredPermission);\n      if (hasPermission.isValid) {\n        hasAnyPermission = true;\n        break;\n      }\n    }\n    \n    if (!hasAnyPermission) {\n      return NextResponse.json(\n        { error: 'Unauthorized - No view permissions for requested data types' },\n        { status: 401 }\n      );\n    }\n\n    const shopId = await getShopIdFromToken(request);\n    const lastPoll = url.searchParams.get('lastPoll');\n\n    const since = lastPoll ? parseInt(lastPoll) : Date.now() - 60000; // Default to last minute\n    const updates: RealtimeUpdate[] = [];\n\n    // Get inventory updates\n    if (types.includes('inventory')) {\n      const inventoryUpdates = await getInventoryUpdates(shopId, since);\n      updates.push(...inventoryUpdates);\n    }\n\n    // Get invoice updates\n    if (types.includes('invoice')) {\n      const invoiceUpdates = await getInvoiceUpdates(shopId, since);\n      updates.push(...invoiceUpdates);\n    }\n\n    // Get purchase invoice updates\n    if (types.includes('purchase') || types.includes('invoice')) {\n      const purchaseUpdates = await getPurchaseInvoiceUpdates(shopId, since);\n      updates.push(...purchaseUpdates);\n    }\n\n    // Get transfer updates\n    if (types.includes('transfer')) {\n      const transferUpdates = await getTransferUpdates(shopId, since);\n      updates.push(...transferUpdates);\n    }\n\n    // Get notifications\n    if (types.includes('notification')) {\n      const notifications = await getNotifications(userId, since);\n      updates.push(...notifications);\n    }\n\n    // Get supplier updates\n    if (types.includes('supplier')) {\n      const supplierUpdates = await getSupplierUpdates(since);\n      updates.push(...supplierUpdates);\n    }\n\n    // Sort by timestamp\n    updates.sort((a, b) => b.timestamp - a.timestamp);\n\n    return NextResponse.json({\n      updates,\n      timestamp: Date.now(),\n      hasMore: updates.length > 0\n    }, {\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Content-Type': 'application/json'\n      }\n    });\n\n  } catch (error) {\n    console.error('Realtime API error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Publish an update (called by other API routes)\nexport async function POST(request: NextRequest) {\n  try {\n    const hasPermission = await validateTokenPermission(request, 'write');\n    if (!hasPermission) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { type, data, shopId } = body;\n\n    const update: RealtimeUpdate = {\n      type,\n      data,\n      timestamp: Date.now(),\n      shopId\n    };\n\n    // Store update in cache for polling clients\n    const cacheKey = `${REALTIME_CACHE_KEYS.UPDATES}:${shopId || 'global'}`;\n    const existingUpdates = await cache.get<RealtimeUpdate[]>(cacheKey) || [];\n    \n    // Keep only last 100 updates\n    const updatedList = [update, ...existingUpdates].slice(0, 100);\n    await cache.set(cacheKey, updatedList, 300); // 5 minutes TTL\n\n    return NextResponse.json({ success: true });\n\n  } catch (error) {\n    console.error('Realtime publish error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper functions to get updates from different sources\nasync function getInventoryUpdates(shopId: string | null, since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const whereClause = {\n      updatedAt: {\n        gte: new Date(since)\n      },\n      ...(shopId && { shopId })\n    };\n\n    const products = await prisma.product.findMany({\n      where: whereClause,\n      select: {\n        id: true,\n        name: true,\n        updatedAt: true,\n        shopId: true,\n        inventoryItems: {\n          select: {\n            quantity: true\n          }\n        }\n      },\n      take: 20\n    });\n\n    return products.map(product => ({\n      type: 'inventory' as const,\n      data: {\n        productId: product.id,\n        name: product.name,\n        quantity: product.inventoryItems.reduce((total, item) => total + item.quantity, 0),\n        action: 'updated'\n      },\n      timestamp: product.updatedAt.getTime(),\n      shopId: product.shopId || undefined\n    }));\n  } catch (error) {\n    console.error('Error fetching inventory updates:', error);\n    return [];\n  }\n}\n\nasync function getInvoiceUpdates(shopId: string | null, since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const whereClause = {\n      createdAt: {\n        gte: new Date(since)\n      },\n      ...(shopId && { shopId })\n    };\n\n    const invoices = await prisma.invoice.findMany({\n      where: whereClause,\n      select: {\n        id: true,\n        invoiceNumber: true,\n        totalAmount: true,\n        status: true,\n        createdAt: true,\n        shopId: true\n      },\n      take: 10\n    });\n\n    return invoices.map(invoice => ({\n      type: 'invoice' as const,\n      data: {\n        invoiceId: invoice.id,\n        invoiceNumber: invoice.invoiceNumber,\n        totalAmount: invoice.totalAmount,\n        status: invoice.status,\n        action: 'created'\n      },\n      timestamp: invoice.createdAt.getTime(),\n      shopId: invoice.shopId || undefined\n    }));\n  } catch (error) {\n    console.error('Error fetching invoice updates:', error);\n    return [];\n  }\n}\n\nasync function getTransferUpdates(shopId: string | null, since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const whereClause = {\n      updatedAt: {\n        gte: new Date(since)\n      },\n      ...(shopId && {\n        OR: [\n          { fromShopId: shopId },\n          { toShopId: shopId }\n        ]\n      })\n    };\n\n    const transfers = await prisma.inventoryTransfer.findMany({\n      where: whereClause,\n      select: {\n        id: true,\n        status: true,\n        fromShopId: true,\n        toShopId: true,\n        updatedAt: true\n      },\n      take: 10\n    });\n\n    return transfers.map(transfer => ({\n      type: 'transfer' as const,\n      data: {\n        transferId: transfer.id,\n        status: transfer.status,\n        fromShopId: transfer.fromShopId,\n        toShopId: transfer.toShopId,\n        action: 'updated'\n      },\n      timestamp: transfer.updatedAt.getTime(),\n      shopId: shopId || undefined\n    }));\n  } catch (error) {\n    console.error('Error fetching transfer updates:', error);\n    return [];\n  }\n}\n\nasync function getPurchaseInvoiceUpdates(shopId: string | null, since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const whereClause = {\n      OR: [\n        {\n          createdAt: {\n            gte: new Date(since)\n          }\n        },\n        {\n          updatedAt: {\n            gte: new Date(since)\n          }\n        }\n      ],\n      ...(shopId && { shopId })\n    };\n\n    const purchaseInvoices = await prisma.purchaseInvoice.findMany({\n      where: whereClause,\n      select: {\n        id: true,\n        invoiceNumber: true,\n        total: true,\n        status: true,\n        createdAt: true,\n        updatedAt: true,\n        shopId: true,\n        supplier: {\n          select: {\n            name: true\n          }\n        }\n      },\n      orderBy: {\n        updatedAt: 'desc'\n      },\n      take: 10\n    });\n\n    return purchaseInvoices.map(invoice => ({\n      type: 'purchase' as const,\n      data: {\n        invoiceId: invoice.id,\n        invoiceNumber: invoice.invoiceNumber,\n        total: invoice.total,\n        status: invoice.status,\n        supplierName: invoice.supplier?.name,\n        action: invoice.createdAt.getTime() >= since ? 'created' : 'updated'\n      },\n      timestamp: Math.max(invoice.createdAt.getTime(), invoice.updatedAt.getTime()),\n      shopId: invoice.shopId || undefined\n    }));\n  } catch (error) {\n    console.error('Error fetching purchase invoice updates:', error);\n    return [];\n  }\n}\n\nasync function getNotifications(userId: number, since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const notifications = await prisma.notification.findMany({\n      where: {\n        userId,\n        createdAt: {\n          gte: new Date(since)\n        }\n      },\n      select: {\n        id: true,\n        title: true,\n        message: true,\n        type: true,\n        isRead: true,\n        createdAt: true\n      },\n      take: 10\n    });\n\n    return notifications.map(notification => ({\n      type: 'notification' as const,\n      data: {\n        notificationId: notification.id,\n        title: notification.title,\n        message: notification.message,\n        notificationType: notification.type,\n        isRead: notification.isRead,\n        action: 'created'\n      },\n      timestamp: notification.createdAt.getTime()\n    }));\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    return [];\n  }\n}\n\nasync function getSupplierUpdates(since: number): Promise<RealtimeUpdate[]> {\n  try {\n    const suppliers = await prisma.supplier.findMany({\n      where: {\n        OR: [\n          {\n            createdAt: {\n              gte: new Date(since)\n            }\n          },\n          {\n            updatedAt: {\n              gte: new Date(since)\n            }\n          }\n        ]\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        phone: true,\n        createdAt: true,\n        updatedAt: true\n      },\n      orderBy: {\n        updatedAt: 'desc'\n      },\n      take: 10\n    });\n\n    return suppliers.map(supplier => ({\n      type: 'supplier' as const,\n      data: {\n        supplierId: supplier.id,\n        name: supplier.name,\n        email: supplier.email,\n        phone: supplier.phone,\n        action: supplier.createdAt.getTime() >= since ? 'created' : 'updated'\n      },\n      timestamp: Math.max(supplier.createdAt.getTime(), supplier.updatedAt.getTime())\n    }));\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    return [];\n  }\n}"],"mappings":"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","ignoreList":[]}