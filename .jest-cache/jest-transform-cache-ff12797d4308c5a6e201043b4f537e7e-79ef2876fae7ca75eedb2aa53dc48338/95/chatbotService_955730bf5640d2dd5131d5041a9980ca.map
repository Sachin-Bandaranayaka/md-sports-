{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/chatbotService.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\n\nexport interface ChatMessage {\n    role: 'user' | 'assistant' | 'system';\n    content: string;\n}\n\nexport interface ChatResponse {\n    role: string;\n    content: string;\n}\n\n// Helper function to get a cookie by name\nfunction getCookie(name: string): string | undefined {\n    if (typeof document === 'undefined') {\n        return undefined; // Cookies are not available in non-browser environments\n    }\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\n    return undefined;\n}\n\nexport const chatbotService = {\n    /**\n     * Send a message to the chatbot API\n     */\n    async sendMessage(messages: ChatMessage[]): Promise<ChatResponse> {\n        console.log('[ChatbotService] Attempting to send message...');\n        try {\n            console.log('[ChatbotService] Step 1: Checking API key configuration via /api/test-settings...');\n            try {\n                const configResponse = await axios.get('/api/test-settings');\n                const configData = configResponse.data;\n                console.log('[ChatbotService] /api/test-settings response:', configData);\n\n                if (!configData.success || configData.isEmpty || configData.valueLength === 0) {\n                    console.error('[ChatbotService] API key not configured per /api/test-settings.', configData);\n                    throw new Error('Deepseek API key is not configured. Please set it in the AI Assistant settings page.');\n                }\n                console.log('[ChatbotService] API key seems configured according to /api/test-settings.');\n            } catch (configError: any) {\n                console.error('[ChatbotService] Error during /api/test-settings check:', configError.response?.data || configError.message);\n                throw new Error(configError.response?.data?.message || configError.message || 'Failed to verify API key configuration. Please check AI Assistant settings.');\n            }\n\n            // Get CSRF token from cookie\n            const csrfToken = getCookie('csrfToken');\n            if (!csrfToken) {\n                console.warn('[ChatbotService] CSRF token cookie not found. POST request might fail.');\n            }\n            console.log(`[ChatbotService] CSRF Token from cookie: ${csrfToken ? 'found' : 'not found'}`);\n\n            console.log('[ChatbotService] Step 2: API key configured, proceeding to POST /api/chatbot...');\n            const response = await axios.post('/api/chatbot',\n                { messages },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...(csrfToken && { 'X-CSRF-Token': csrfToken }), // Include CSRF token if found\n                    }\n                }\n            );\n            console.log('[ChatbotService] Successfully received response from /api/chatbot.');\n            return response.data;\n\n        } catch (error: any) {\n            console.error('[ChatbotService] Error sending message:', error.isAxiosError ? error.toJSON() : error);\n\n            if (axios.isAxiosError(error)) {\n                const axiosError = error as AxiosError<{ error?: string, message?: string }>;\n                console.error('[ChatbotService] Axios error details. Status:', axiosError.response?.status, 'Data:', axiosError.response?.data);\n\n                let serviceErrorMessage = 'Failed to communicate with the chatbot service.';\n\n                if (axiosError.response) {\n                    const responseData = axiosError.response.data;\n                    if (responseData && (responseData.error || responseData.message)) {\n                        serviceErrorMessage = responseData.error || responseData.message || serviceErrorMessage;\n                    } else if (axiosError.response.status === 403) {\n                        serviceErrorMessage = 'Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.';\n                    } else {\n                        serviceErrorMessage = `Chatbot service request failed with status ${axiosError.response.status}.`;\n                    }\n                } else if (axiosError.request) {\n                    serviceErrorMessage = 'No response received from the chatbot service. Please check your network connection and server status.';\n                } else {\n                    serviceErrorMessage = `Error setting up chatbot request: ${axiosError.message}`;\n                }\n                console.error('[ChatbotService] Throwing error with message:', serviceErrorMessage);\n                throw new Error(serviceErrorMessage);\n            }\n\n            // Fallback for non-Axios errors or errors from the initial config check that weren't AxiosErrors\n            console.error('[ChatbotService] Non-Axios error, throwing original or generic message.');\n            throw new Error(error.message || 'An unexpected error occurred with the chatbot service.');\n        }\n    },\n\n    /**\n     * Get business-specific information for the chatbot\n     * This function can be expanded to fetch real data from your database\n     */\n    async getBusinessInfo(): Promise<Record<string, any>> {\n        // This could be expanded to fetch real data from your database\n        return {\n            businessName: 'MS Sports',\n            inventoryCount: 'Over 1,000 items',\n            topSellingProducts: ['Sports Shoes', 'Jerseys', 'Training Equipment'],\n            customerCount: 'Over 500 registered customers',\n            supplierCount: '50+ active suppliers',\n            // Add more business-specific information\n        };\n    },\n\n    /**\n     * Check if the chatbot is properly configured\n     */\n    async checkConfiguration(): Promise<{ isConfigured: boolean; message?: string }> {\n        try {\n            const csrfToken = getCookie('csrfToken');\n            const response = await axios.get('/api/test-settings', {\n                headers: {\n                    ...(csrfToken && { 'X-CSRF-Token': csrfToken }),\n                }\n            });\n            const data = response.data;\n\n            if (!data.success || !data.exists) {\n                return {\n                    isConfigured: false,\n                    message: 'API key setting not found in database'\n                };\n            }\n\n            if (data.isEmpty) {\n                return {\n                    isConfigured: false,\n                    message: 'API key is empty. Please configure it in settings.'\n                };\n            }\n\n            return { isConfigured: true };\n        } catch (error) {\n            console.error('Error checking chatbot configuration:', error);\n            return {\n                isConfigured: false,\n                message: 'Failed to check configuration. Please try again.'\n            };\n        }\n    }\n}; "],"names":["chatbotService","getCookie","name","document","undefined","value","cookie","parts","split","length","pop","shift","sendMessage","messages","console","log","configResponse","axios","get","configData","data","success","isEmpty","valueLength","error","Error","configError","response","message","csrfToken","warn","post","headers","isAxiosError","toJSON","axiosError","status","serviceErrorMessage","responseData","request","getBusinessInfo","businessName","inventoryCount","topSellingProducts","customerCount","supplierCount","checkConfiguration","exists","isConfigured"],"mappings":"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"}