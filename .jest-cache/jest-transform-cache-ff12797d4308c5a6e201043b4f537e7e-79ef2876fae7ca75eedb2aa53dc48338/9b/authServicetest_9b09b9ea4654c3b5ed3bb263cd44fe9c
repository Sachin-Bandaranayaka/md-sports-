1148101c92a59f05859df615e525457c
"use strict";
// Mock dependencies
jest.mock("@/lib/prisma", ()=>({
        user: {
            findFirst: jest.fn()
        },
        refreshToken: {
            create: jest.fn()
        }
    }));
jest.mock("bcryptjs");
jest.mock("jsonwebtoken");
jest.mock("@/services/refreshTokenService");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _authService = require("../../src/services/authService");
const _refreshTokenService = require("../../src/services/refreshTokenService");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockPrisma = _prisma.default;
const mockBcrypt = _bcryptjs.default;
const mockJwt = _jsonwebtoken.default;
const mockRefreshTokenService = _refreshTokenService.refreshTokenService;
describe("AuthService", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        process.env.JWT_SECRET = "test-secret";
        process.env.JWT_EXPIRES_IN = "1h";
        process.env.REFRESH_TOKEN_EXPIRES_IN = "7d";
    });
    describe("parseTimeStringToSeconds", ()=>{
        test("should parse seconds correctly", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("30s")).toBe(30);
        });
        test("should parse minutes correctly", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("5m")).toBe(300);
        });
        test("should parse hours correctly", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("2h")).toBe(7200);
        });
        test("should parse days correctly", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("1d")).toBe(86400);
        });
        test("should return 0 for invalid input", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("")).toBe(0);
            expect((0, _authService.parseTimeStringToSeconds)("invalid")).toBe(0);
            expect((0, _authService.parseTimeStringToSeconds)("abc")).toBe(0);
        });
        test("should handle edge cases", ()=>{
            expect((0, _authService.parseTimeStringToSeconds)("0s")).toBe(0);
            expect((0, _authService.parseTimeStringToSeconds)("100x")).toBe(0);
        });
    });
    describe("authenticateUser", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            username: "testuser",
            passwordHash: "hashedpassword",
            isActive: true,
            roleId: 1,
            shopId: 1,
            role: {
                id: 1,
                name: "admin",
                permissions: [
                    {
                        name: "read_products"
                    },
                    {
                        name: "write_products"
                    }
                ]
            }
        };
        test("should authenticate valid user credentials", async ()=>{
            mockPrisma.user.findFirst.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(true);
            const result = await (0, _authService.authenticateUser)("test@example.com", "password123");
            expect(result.success).toBe(true);
            expect(result.user).toEqual({
                id: 1,
                email: "test@example.com",
                username: "testuser",
                roleId: 1,
                shopId: 1,
                permissions: [
                    "read_products",
                    "write_products"
                ]
            });
            expect(mockPrisma.user.findFirst).toHaveBeenCalledWith({
                where: {
                    email: "test@example.com",
                    isActive: true
                },
                include: {
                    role: {
                        include: {
                            permissions: {
                                select: {
                                    name: true
                                }
                            }
                        }
                    }
                }
            });
        });
        test("should reject invalid email", async ()=>{
            mockPrisma.user.findFirst.mockResolvedValue(null);
            const result = await (0, _authService.authenticateUser)("invalid@example.com", "password123");
            expect(result.success).toBe(false);
            expect(result.message).toBe("Invalid email or password");
            expect(result.user).toBeNull();
        });
        test("should reject invalid password", async ()=>{
            mockPrisma.user.findFirst.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(false);
            const result = await (0, _authService.authenticateUser)("test@example.com", "wrongpassword");
            expect(result.success).toBe(false);
            expect(result.message).toBe("Invalid email or password");
            expect(result.user).toBeNull();
        });
        test("should reject inactive user", async ()=>{
            const inactiveUser = {
                ...mockUser,
                isActive: false
            };
            mockPrisma.user.findFirst.mockResolvedValue(null); // findFirst with isActive: true returns null
            const result = await (0, _authService.authenticateUser)("test@example.com", "password123");
            expect(result.success).toBe(false);
            expect(result.message).toBe("Invalid email or password");
        });
        test("should handle database errors gracefully", async ()=>{
            mockPrisma.user.findFirst.mockRejectedValue(new Error("Database connection failed"));
            const result = await (0, _authService.authenticateUser)("test@example.com", "password123");
            expect(result.success).toBe(false);
            expect(result.message).toBe("Authentication failed");
            expect(result.user).toBeNull();
        });
        test("should handle bcrypt errors gracefully", async ()=>{
            mockPrisma.user.findFirst.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockRejectedValue(new Error("Bcrypt error"));
            const result = await (0, _authService.authenticateUser)("test@example.com", "password123");
            expect(result.success).toBe(false);
            expect(result.message).toBe("Authentication failed");
        });
    });
    describe("generateTokens", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            username: "testuser",
            roleId: 1,
            shopId: 1,
            permissions: [
                "read_products",
                "write_products"
            ]
        };
        test("should generate access and refresh tokens", async ()=>{
            const mockAccessToken = "mock-access-token";
            const mockRefreshToken = "mock-refresh-token";
            mockJwt.sign.mockReturnValueOnce(mockAccessToken);
            mockRefreshTokenService.createRefreshToken.mockResolvedValue(mockRefreshToken);
            const result = await (0, _authService.generateTokens)(mockUser);
            expect(result.accessToken).toBe(mockAccessToken);
            expect(result.refreshToken).toBe(mockRefreshToken);
            expect(mockJwt.sign).toHaveBeenCalledWith({
                sub: 1,
                username: "testuser",
                email: "test@example.com",
                roleId: 1,
                shopId: 1,
                permissions: [
                    "read_products",
                    "write_products"
                ]
            }, "test-secret", {
                expiresIn: "1h"
            });
            expect(mockRefreshTokenService.createRefreshToken).toHaveBeenCalledWith(1);
        });
        test("should handle refresh token creation failure", async ()=>{
            const mockAccessToken = "mock-access-token";
            mockJwt.sign.mockReturnValueOnce(mockAccessToken);
            mockRefreshTokenService.createRefreshToken.mockRejectedValue(new Error("Refresh token creation failed"));
            await expect((0, _authService.generateTokens)(mockUser)).rejects.toThrow("Refresh token creation failed");
        });
    });
    describe("verifyToken", ()=>{
        test("should verify valid token", async ()=>{
            const mockPayload = {
                sub: 1,
                username: "testuser",
                email: "test@example.com",
                roleId: 1,
                iat: Math.floor(Date.now() / 1000),
                exp: Math.floor(Date.now() / 1000) + 3600
            };
            mockJwt.verify.mockReturnValue(mockPayload);
            const result = await (0, _authService.verifyToken)("valid-token");
            expect(result).toEqual(mockPayload);
            expect(mockJwt.verify).toHaveBeenCalledWith("valid-token", "test-secret");
        });
        test("should return null for invalid token", async ()=>{
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("Invalid token");
            });
            const result = await (0, _authService.verifyToken)("invalid-token");
            expect(result).toBeNull();
        });
        test("should return null for expired token", async ()=>{
            mockJwt.verify.mockImplementation(()=>{
                const error = new Error("Token expired");
                error.name = "TokenExpiredError";
                throw error;
            });
            const result = await (0, _authService.verifyToken)("expired-token");
            expect(result).toBeNull();
        });
    });
    describe("getUserFromDecodedPayload", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            username: "testuser",
            isActive: true,
            roleId: 1,
            shopId: 1,
            role: {
                id: 1,
                name: "admin",
                permissions: [
                    {
                        name: "read_products"
                    },
                    {
                        name: "write_products"
                    }
                ]
            }
        };
        test("should return user from valid payload", async ()=>{
            const payload = {
                sub: 1,
                username: "testuser",
                email: "test@example.com",
                roleId: 1
            };
            mockPrisma.user.findFirst.mockResolvedValue(mockUser);
            const result = await (0, _authService.getUserFromDecodedPayload)(payload);
            expect(result).toEqual({
                id: 1,
                email: "test@example.com",
                username: "testuser",
                roleId: 1,
                shopId: 1,
                permissions: [
                    "read_products",
                    "write_products"
                ]
            });
        });
        test("should return null for null payload", async ()=>{
            const result = await (0, _authService.getUserFromDecodedPayload)(null);
            expect(result).toBeNull();
        });
        test("should return null for invalid payload", async ()=>{
            const result = await (0, _authService.getUserFromDecodedPayload)({});
            expect(result).toBeNull();
        });
        test("should return null when user not found", async ()=>{
            const payload = {
                sub: 999,
                username: "nonexistent",
                email: "nonexistent@example.com",
                roleId: 1
            };
            mockPrisma.user.findFirst.mockResolvedValue(null);
            const result = await (0, _authService.getUserFromDecodedPayload)(payload);
            expect(result).toBeNull();
        });
    });
    describe("getUserFromToken", ()=>{
        test("should return user from valid token", async ()=>{
            const mockPayload = {
                sub: 1,
                username: "testuser",
                email: "test@example.com",
                roleId: 1
            };
            const mockUser = {
                id: 1,
                email: "test@example.com",
                username: "testuser",
                roleId: 1,
                shopId: 1,
                permissions: [
                    "read_products"
                ]
            };
            mockJwt.verify.mockReturnValue(mockPayload);
            mockPrisma.user.findFirst.mockResolvedValue({
                id: 1,
                email: "test@example.com",
                username: "testuser",
                isActive: true,
                roleId: 1,
                shopId: 1,
                role: {
                    id: 1,
                    name: "admin",
                    permissions: [
                        {
                            name: "read_products"
                        }
                    ]
                }
            });
            const result = await (0, _authService.getUserFromToken)("valid-token");
            expect(result).toEqual(mockUser);
        });
        test("should return null for invalid token", async ()=>{
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("Invalid token");
            });
            const result = await (0, _authService.getUserFromToken)("invalid-token");
            expect(result).toBeNull();
        });
    });
    describe("Error Handling", ()=>{
        test("should handle missing JWT_SECRET", async ()=>{
            delete process.env.JWT_SECRET;
            const result = await (0, _authService.verifyToken)("any-token");
            expect(result).toBeNull();
        });
        test("should handle malformed tokens gracefully", async ()=>{
            const result = await (0, _authService.verifyToken)("not.a.valid.jwt.token");
            expect(result).toBeNull();
        });
        test("should handle empty token", async ()=>{
            const result = await (0, _authService.verifyToken)("");
            expect(result).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,