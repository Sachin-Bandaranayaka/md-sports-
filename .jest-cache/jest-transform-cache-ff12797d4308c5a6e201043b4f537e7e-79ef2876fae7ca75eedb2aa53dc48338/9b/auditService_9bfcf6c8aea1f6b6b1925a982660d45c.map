{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],"sourcesContent":["// @ts-nocheck\nimport { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: string | null;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: string;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: string;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: string;\n  deletedByUser?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      console.log('DEBUG: AuditService.logAction called with:', JSON.stringify(entry, null, 2));\n      \n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      const result = await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n      \n      console.log('DEBUG: Audit log created successfully with ID:', result.id);\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: string, // Changed to string\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId, // No toString needed\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0,\n    dateFrom?: string,\n    dateTo?: string\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where: any = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    // Add date filtering\n    if (dateFrom || dateTo) {\n      where.createdAt = {};\n      if (dateFrom) {\n        where.createdAt.gte = new Date(dateFrom);\n      }\n      if (dateTo) {\n        // Add one day to include the entire end date\n        const endDate = new Date(dateTo);\n        endDate.setDate(endDate.getDate() + 1);\n        where.createdAt.lt = endDate;\n      }\n    }\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || (item.userId as string),\n          deletedByUser: undefined,\n          canRecover: details?.canRecover || false,\n        } as RecycleBinItem;\n      });\n\n    // Fetch user details for deletedBy users if any\n    const userIds = Array.from(new Set(recycleBinItems.map((i) => i.deletedBy).filter(Boolean)));\n    if (userIds.length) {\n      const users = await this.prisma.user.findMany({\n        where: {\n          id: { in: userIds.map((id) => id.toString()) },\n        },\n        select: { id: true, name: true, email: true },\n      });\n      const userMap = Object.fromEntries(users.map((u) => [u.id, u]));\n      recycleBinItems.forEach((item) => {\n        if (item.deletedBy && userMap[item.deletedBy]) {\n          item.deletedByUser = userMap[item.deletedBy];\n        }\n      });\n    }\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Get paginated list of ALL audit entries (create/update/delete etc)\n   */\n  async getAuditEntries(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0,\n    dateFrom?: string,\n    dateTo?: string\n  ): Promise<{ items: AuditLogEntry[]; total: number }> {\n    const where: any = {};\n    if (entity) {\n      where.entity = entity;\n    }\n\n    // Add date filtering\n    if (dateFrom || dateTo) {\n      where.createdAt = {};\n      if (dateFrom) {\n        where.createdAt.gte = new Date(dateFrom);\n      }\n      if (dateTo) {\n        // Add one day to include the entire end date\n        const endDate = new Date(dateTo);\n        endDate.setDate(endDate.getDate() + 1);\n        where.createdAt.lt = endDate;\n      }\n    }\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    return { items: items as AuditLogEntry[], total };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId.toString(),\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              paymentId: originalData.paymentId,\n              receiptDate: originalData.receiptDate ? new Date(originalData.receiptDate) : new Date(),\n              bankName: originalData.bankName,\n              accountNumber: originalData.accountNumber,\n              chequeNumber: originalData.chequeNumber,\n              transactionId: originalData.transactionId,\n              notes: originalData.notes,\n              confirmedBy: originalData.confirmedBy,\n            },\n          });\n          break;\n\n        case 'user':\n          restoredData = await this.prisma.user.create({\n            data: {\n              id: originalData.id,\n              name: originalData.name,\n              email: originalData.email,\n              password: originalData.password,\n              phone: originalData.phone,\n              roleId: originalData.roleId,\n              roleName: originalData.roleName,\n              shopId: originalData.shopId,\n              permissions: originalData.permissions,\n              allowedAccounts: originalData.allowedAccounts,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'shop':\n          restoredData = await this.prisma.shop.create({\n            data: {\n              id: originalData.id,\n              name: originalData.name,\n              location: originalData.location,\n              contact_person: originalData.contact_person,\n              phone: originalData.phone,\n              email: originalData.email,\n              is_active: originalData.is_active ?? true,\n              opening_time: originalData.opening_time,\n              closing_time: originalData.closing_time,\n              manager_id: originalData.manager_id,\n              opening_date: originalData.opening_date ? new Date(originalData.opening_date) : null,\n              status: originalData.status,\n              address_line1: originalData.address_line1,\n              address_line2: originalData.address_line2,\n              city: originalData.city,\n              state: originalData.state,\n              postal_code: originalData.postal_code,\n              country: originalData.country,\n              latitude: originalData.latitude,\n              longitude: originalData.longitude,\n              tax_rate: originalData.tax_rate,\n            },\n          });\n          break;\n\n        case 'inventoryitem':\n          restoredData = await this.prisma.inventoryItem.create({\n            data: {\n              productId: originalData.productId,\n              shopId: originalData.shopId,\n              quantity: originalData.quantity,\n              shopSpecificCost: originalData.shopSpecificCost,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n            },\n          });\n          break;\n\n        case 'inventorytransfer':\n          restoredData = await this.prisma.inventoryTransfer.create({\n            data: {\n              fromShopId: originalData.fromShopId,\n              toShopId: originalData.toShopId,\n              fromUserId: originalData.fromUserId,\n              toUserId: originalData.toUserId,\n              status: originalData.status || 'pending',\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        case 'purchaseinvoice':\n          restoredData = await this.prisma.purchaseInvoice.create({\n            data: {\n              invoiceNumber: originalData.invoiceNumber,\n              supplierId: originalData.supplierId,\n              total: originalData.total,\n              status: originalData.status,\n              distributions: originalData.distributions,\n              date: originalData.date ? new Date(originalData.date) : null,\n              dueDate: originalData.dueDate ? new Date(originalData.dueDate) : null,\n            },\n          });\n          break;\n\n        case 'payment':\n          restoredData = await this.prisma.payment.create({\n            data: {\n              invoiceId: originalData.invoiceId,\n              customerId: originalData.customerId,\n              amount: originalData.amount,\n              paymentMethod: originalData.paymentMethod,\n              referenceNumber: originalData.referenceNumber,\n              accountId: originalData.accountId,\n            },\n          });\n          break;\n\n        case 'notification':\n          restoredData = await this.prisma.notification.create({\n            data: {\n              userId: originalData.userId,\n              title: originalData.title,\n              message: originalData.message,\n              isRead: originalData.isRead ?? false,\n            },\n          });\n          break;\n\n        case 'systemsettings':\n          restoredData = await this.prisma.systemSettings.create({\n            data: {\n              key: originalData.key,\n              value: originalData.value,\n              description: originalData.description,\n            },\n          });\n          break;\n\n        case 'account':\n          restoredData = await this.prisma.account.create({\n            data: {\n              name: originalData.name,\n              type: originalData.type,\n              balance: originalData.balance,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n              parentId: originalData.parentId,\n            },\n          });\n          break;\n\n        case 'transaction':\n          restoredData = await this.prisma.transaction.create({\n            data: {\n              date: originalData.date ? new Date(originalData.date) : new Date(),\n              description: originalData.description,\n              accountId: originalData.accountId,\n              toAccountId: originalData.toAccountId,\n              type: originalData.type,\n              amount: originalData.amount,\n              reference: originalData.reference,\n              category: originalData.category,\n            },\n          });\n          break;\n\n        case 'quotation':\n          restoredData = await this.prisma.quotation.create({\n            data: {\n              quotationNumber: originalData.quotationNumber,\n              customerId: originalData.customerId,\n              total: originalData.total,\n              validUntil: originalData.validUntil ? new Date(originalData.validUntil) : null,\n              shopId: originalData.shopId,\n            },\n          });\n          break;\n\n        case 'invoice':\n          restoredData = await this.prisma.invoice.create({\n            data: {\n              invoiceNumber: originalData.invoiceNumber,\n              customerId: originalData.customerId,\n              total: originalData.total,\n              discountType: originalData.discountType,\n              discountValue: originalData.discountValue,\n              totalProfit: originalData.totalProfit,\n              profitMargin: originalData.profitMargin,\n              status: originalData.status,\n              paymentMethod: originalData.paymentMethod,\n              invoiceDate: originalData.invoiceDate ? new Date(originalData.invoiceDate) : null,\n              dueDate: originalData.dueDate ? new Date(originalData.dueDate) : null,\n              notes: originalData.notes,\n              shopId: originalData.shopId,\n              createdBy: originalData.createdBy,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20,\n    dateFrom?: string,\n    dateTo?: string\n  ): Promise<AuditLogEntry[]> {\n    const where: any = {\n      entity,\n      entityId,\n    };\n\n    // Add date filtering\n    if (dateFrom || dateTo) {\n      where.createdAt = {};\n      if (dateFrom) {\n        where.createdAt.gte = new Date(dateFrom);\n      }\n      if (dateTo) {\n        // Add one day to include the entire end date\n        const endDate = new Date(dateTo);\n        endDate.setDate(endDate.getDate() + 1);\n        where.createdAt.lt = endDate;\n      }\n    }\n\n    const entries = await this.prisma.auditLog.findMany({\n      where,\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    // Permanently remove audit log entries (DELETE actions)\n    await this.prisma.auditLog.deleteMany({\n      where: {\n        id: { in: auditLogIds },\n        action: 'DELETE',\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],"names":["AuditService","auditService","prisma","getInstance","instance","logAction","entry","console","log","JSON","stringify","details","originalData","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","result","auditLog","create","data","userId","action","entity","entityId","id","error","softDelete","Date","type","recoverable","getRecycleBinItems","limit","offset","dateFrom","dateTo","where","createdAt","gte","endDate","setDate","getDate","lt","items","total","Promise","all","findMany","orderBy","take","skip","count","recycleBinItems","filter","item","map","deletedByUser","undefined","userIds","Array","from","Set","i","Boolean","length","users","user","in","toString","select","name","email","userMap","Object","fromEntries","u","forEach","getAuditEntries","recoverItem","auditLogId","auditEntry","findUnique","success","message","restoredData","restoreEntityData","updatedDetails","update","originalAuditLogId","recoveredData","toLowerCase","product","description","price","cost","sku","barcode","categoryId","supplierId","minStockLevel","maxStockLevel","unit","weight","dimensions","isActive","customer","phone","address","city","postalCode","country","taxNumber","creditLimit","paymentTerms","supplier","category","receipt","receiptNumber","paymentId","receiptDate","bankName","accountNumber","chequeNumber","transactionId","notes","confirmedBy","password","roleId","roleName","shopId","permissions","allowedAccounts","shop","location","contact_person","is_active","opening_time","closing_time","manager_id","opening_date","status","address_line1","address_line2","state","postal_code","latitude","longitude","tax_rate","inventoryItem","productId","quantity","shopSpecificCost","inventoryTransfer","fromShopId","toShopId","fromUserId","toUserId","purchaseInvoice","invoiceNumber","distributions","date","dueDate","payment","invoiceId","customerId","amount","paymentMethod","referenceNumber","accountId","notification","title","isRead","systemSettings","key","value","account","balance","parentId","transaction","toAccountId","reference","quotation","quotationNumber","validUntil","invoice","discountType","discountValue","totalProfit","profitMargin","invoiceDate","createdBy","Error","getEntityHistory","entries","include","recoveredByUser","permanentlyDelete","auditLogIds","deleteMany","cleanupOldDeletedItems","daysOld","cutoffDate","updateMany","getDeletedEntityIds","deletedEntries","deletedIds"],"mappings":"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"}