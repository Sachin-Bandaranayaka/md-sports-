36e0345996533c932f8a0381d48317ba
"use strict";

/* istanbul ignore next */
function cov_baw0gpe8a() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/purchases/route.ts";
  var hash = "07ce15558f5d06def93aebe1100fa52550a6cfc4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/purchases/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "11": {
        start: {
          line: 29,
          column: 33
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 55
        }
      },
      "13": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "14": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 57
        }
      },
      "15": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 55
        }
      },
      "16": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 51
        }
      },
      "17": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "18": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 65
        }
      },
      "19": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 39
        }
      },
      "20": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "22": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 40
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "29": {
        start: {
          line: 70,
          column: 15
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "30": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "31": {
        start: {
          line: 74,
          column: 15
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "32": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "33": {
        start: {
          line: 79,
          column: 40
        },
        end: {
          line: 112,
          column: 10
        }
      },
      "34": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 66
        }
      },
      "36": {
        start: {
          line: 124,
          column: 24
        },
        end: {
          line: 124,
          column: 92
        }
      },
      "37": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "38": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 487,
          column: 5
        }
      },
      "39": {
        start: {
          line: 137,
          column: 21
        },
        end: {
          line: 137,
          column: 41
        }
      },
      "40": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "41": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 36
        }
      },
      "42": {
        start: {
          line: 141,
          column: 25
        },
        end: {
          line: 141,
          column: 65
        }
      },
      "43": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 142,
          column: 76
        }
      },
      "44": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 67
        }
      },
      "45": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 91
        }
      },
      "46": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 74
        }
      },
      "47": {
        start: {
          line: 151,
          column: 106
        },
        end: {
          line: 151,
          column: 110
        }
      },
      "48": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "49": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 159,
          column: 15
        }
      },
      "50": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "51": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "52": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "53": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "54": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 33
        }
      },
      "55": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 171,
          column: 41
        }
      },
      "56": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "57": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "58": {
        start: {
          line: 180,
          column: 35
        },
        end: {
          line: 180,
          column: 36
        }
      },
      "59": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "60": {
        start: {
          line: 182,
          column: 28
        },
        end: {
          line: 182,
          column: 39
        }
      },
      "61": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "62": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 189,
          column: 23
        }
      },
      "63": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 40
        }
      },
      "64": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "65": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "66": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "67": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "68": {
        start: {
          line: 216,
          column: 35
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "69": {
        start: {
          line: 219,
          column: 37
        },
        end: {
          line: 219,
          column: 39
        }
      },
      "70": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 415,
          column: 13
        }
      },
      "71": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 414,
          column: 17
        }
      },
      "72": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 29
        }
      },
      "73": {
        start: {
          line: 223,
          column: 33
        },
        end: {
          line: 223,
          column: 41
        }
      },
      "74": {
        start: {
          line: 224,
          column: 45
        },
        end: {
          line: 224,
          column: 104
        }
      },
      "75": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 234,
          column: 23
        }
      },
      "76": {
        start: {
          line: 236,
          column: 36
        },
        end: {
          line: 244,
          column: 22
        }
      },
      "77": {
        start: {
          line: 246,
          column: 43
        },
        end: {
          line: 250,
          column: 22
        }
      },
      "78": {
        start: {
          line: 251,
          column: 49
        },
        end: {
          line: 251,
          column: 105
        }
      },
      "79": {
        start: {
          line: 251,
          column: 83
        },
        end: {
          line: 251,
          column: 101
        }
      },
      "80": {
        start: {
          line: 252,
          column: 40
        },
        end: {
          line: 252,
          column: 53
        }
      },
      "81": {
        start: {
          line: 253,
          column: 40
        },
        end: {
          line: 253,
          column: 73
        }
      },
      "82": {
        start: {
          line: 254,
          column: 36
        },
        end: {
          line: 254,
          column: 46
        }
      },
      "83": {
        start: {
          line: 257,
          column: 49
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "84": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 264,
          column: 21
        }
      },
      "85": {
        start: {
          line: 259,
          column: 50
        },
        end: {
          line: 259,
          column: 84
        }
      },
      "86": {
        start: {
          line: 260,
          column: 49
        },
        end: {
          line: 260,
          column: 70
        }
      },
      "87": {
        start: {
          line: 261,
          column: 43
        },
        end: {
          line: 261,
          column: 79
        }
      },
      "88": {
        start: {
          line: 262,
          column: 46
        },
        end: {
          line: 262,
          column: 80
        }
      },
      "89": {
        start: {
          line: 263,
          column: 24
        },
        end: {
          line: 263,
          column: 76
        }
      },
      "90": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 268,
          column: 21
        }
      },
      "91": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 267,
          column: 57
        }
      },
      "92": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "93": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 413,
          column: 21
        }
      },
      "94": {
        start: {
          line: 281,
          column: 47
        },
        end: {
          line: 281,
          column: 49
        }
      },
      "95": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "96": {
        start: {
          line: 284,
          column: 28
        },
        end: {
          line: 289,
          column: 29
        }
      },
      "97": {
        start: {
          line: 285,
          column: 44
        },
        end: {
          line: 285,
          column: 60
        }
      },
      "98": {
        start: {
          line: 286,
          column: 32
        },
        end: {
          line: 288,
          column: 33
        }
      },
      "99": {
        start: {
          line: 287,
          column: 36
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "100": {
        start: {
          line: 292,
          column: 24
        },
        end: {
          line: 341,
          column: 25
        }
      },
      "101": {
        start: {
          line: 293,
          column: 43
        },
        end: {
          line: 293,
          column: 52
        }
      },
      "102": {
        start: {
          line: 294,
          column: 40
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "103": {
        start: {
          line: 295,
          column: 28
        },
        end: {
          line: 295,
          column: 51
        }
      },
      "104": {
        start: {
          line: 295,
          column: 42
        },
        end: {
          line: 295,
          column: 51
        }
      },
      "105": {
        start: {
          line: 296,
          column: 54
        },
        end: {
          line: 301,
          column: 30
        }
      },
      "106": {
        start: {
          line: 302,
          column: 48
        },
        end: {
          line: 302,
          column: 49
        }
      },
      "107": {
        start: {
          line: 303,
          column: 28
        },
        end: {
          line: 335,
          column: 29
        }
      },
      "108": {
        start: {
          line: 304,
          column: 56
        },
        end: {
          line: 304,
          column: 82
        }
      },
      "109": {
        start: {
          line: 305,
          column: 52
        },
        end: {
          line: 305,
          column: 91
        }
      },
      "110": {
        start: {
          line: 306,
          column: 57
        },
        end: {
          line: 306,
          column: 78
        }
      },
      "111": {
        start: {
          line: 307,
          column: 58
        },
        end: {
          line: 307,
          column: 65
        }
      },
      "112": {
        start: {
          line: 308,
          column: 32
        },
        end: {
          line: 314,
          column: 33
        }
      },
      "113": {
        start: {
          line: 309,
          column: 62
        },
        end: {
          line: 309,
          column: 91
        }
      },
      "114": {
        start: {
          line: 310,
          column: 58
        },
        end: {
          line: 310,
          column: 71
        }
      },
      "115": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 113
        }
      },
      "116": {
        start: {
          line: 312,
          column: 39
        },
        end: {
          line: 314,
          column: 33
        }
      },
      "117": {
        start: {
          line: 313,
          column: 36
        },
        end: {
          line: 313,
          column: 66
        }
      },
      "118": {
        start: {
          line: 315,
          column: 32
        },
        end: {
          line: 315,
          column: 65
        }
      },
      "119": {
        start: {
          line: 316,
          column: 32
        },
        end: {
          line: 324,
          column: 35
        }
      },
      "120": {
        start: {
          line: 326,
          column: 32
        },
        end: {
          line: 326,
          column: 52
        }
      },
      "121": {
        start: {
          line: 327,
          column: 32
        },
        end: {
          line: 334,
          column: 35
        }
      },
      "122": {
        start: {
          line: 336,
          column: 28
        },
        end: {
          line: 340,
          column: 31
        }
      },
      "123": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 344,
          column: 125
        }
      },
      "124": {
        start: {
          line: 345,
          column: 62
        },
        end: {
          line: 349,
          column: 26
        }
      },
      "125": {
        start: {
          line: 350,
          column: 45
        },
        end: {
          line: 350,
          column: 49
        }
      },
      "126": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "127": {
        start: {
          line: 352,
          column: 28
        },
        end: {
          line: 352,
          column: 85
        }
      },
      "128": {
        start: {
          line: 353,
          column: 28
        },
        end: {
          line: 353,
          column: 128
        }
      },
      "129": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "130": {
        start: {
          line: 355,
          column: 28
        },
        end: {
          line: 355,
          column: 202
        }
      },
      "131": {
        start: {
          line: 357,
          column: 28
        },
        end: {
          line: 357,
          column: 183
        }
      },
      "132": {
        start: {
          line: 359,
          column: 24
        },
        end: {
          line: 412,
          column: 25
        }
      },
      "133": {
        start: {
          line: 360,
          column: 40
        },
        end: {
          line: 360,
          column: 53
        }
      },
      "134": {
        start: {
          line: 361,
          column: 28
        },
        end: {
          line: 411,
          column: 29
        }
      },
      "135": {
        start: {
          line: 362,
          column: 64
        },
        end: {
          line: 367,
          column: 34
        }
      },
      "136": {
        start: {
          line: 368,
          column: 52
        },
        end: {
          line: 368,
          column: 53
        }
      },
      "137": {
        start: {
          line: 369,
          column: 32
        },
        end: {
          line: 403,
          column: 33
        }
      },
      "138": {
        start: {
          line: 370,
          column: 60
        },
        end: {
          line: 370,
          column: 92
        }
      },
      "139": {
        start: {
          line: 371,
          column: 60
        },
        end: {
          line: 371,
          column: 105
        }
      },
      "140": {
        start: {
          line: 372,
          column: 61
        },
        end: {
          line: 372,
          column: 82
        }
      },
      "141": {
        start: {
          line: 373,
          column: 62
        },
        end: {
          line: 373,
          column: 69
        }
      },
      "142": {
        start: {
          line: 374,
          column: 36
        },
        end: {
          line: 380,
          column: 37
        }
      },
      "143": {
        start: {
          line: 375,
          column: 66
        },
        end: {
          line: 375,
          column: 99
        }
      },
      "144": {
        start: {
          line: 376,
          column: 62
        },
        end: {
          line: 376,
          column: 75
        }
      },
      "145": {
        start: {
          line: 377,
          column: 40
        },
        end: {
          line: 377,
          column: 117
        }
      },
      "146": {
        start: {
          line: 378,
          column: 43
        },
        end: {
          line: 380,
          column: 37
        }
      },
      "147": {
        start: {
          line: 379,
          column: 40
        },
        end: {
          line: 379,
          column: 70
        }
      },
      "148": {
        start: {
          line: 381,
          column: 36
        },
        end: {
          line: 381,
          column: 69
        }
      },
      "149": {
        start: {
          line: 382,
          column: 36
        },
        end: {
          line: 390,
          column: 39
        }
      },
      "150": {
        start: {
          line: 394,
          column: 36
        },
        end: {
          line: 394,
          column: 56
        }
      },
      "151": {
        start: {
          line: 395,
          column: 36
        },
        end: {
          line: 402,
          column: 39
        }
      },
      "152": {
        start: {
          line: 404,
          column: 32
        },
        end: {
          line: 408,
          column: 35
        }
      },
      "153": {
        start: {
          line: 410,
          column: 32
        },
        end: {
          line: 410,
          column: 164
        }
      },
      "154": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "155": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 428,
          column: 19
        }
      },
      "156": {
        start: {
          line: 431,
          column: 32
        },
        end: {
          line: 443,
          column: 14
        }
      },
      "157": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 447,
          column: 14
        }
      },
      "158": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "159": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 60
        }
      },
      "160": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 65
        }
      },
      "161": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 71
        }
      },
      "162": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 61
        }
      },
      "163": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 59
        }
      },
      "164": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 63
        }
      },
      "165": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 80
        }
      },
      "166": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 75
        }
      },
      "167": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 80
        }
      },
      "168": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 92
        }
      },
      "169": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 475,
          column: 11
        }
      },
      "170": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 65
        }
      },
      "171": {
        start: {
          line: 478,
          column: 24
        },
        end: {
          line: 478,
          column: 92
        }
      },
      "172": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 486,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 134,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 135,
            column: 19
          }
        },
        loc: {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 488,
            column: 1
          }
        },
        line: 135
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 214,
            column: 60
          },
          end: {
            line: 214,
            column: 61
          }
        },
        loc: {
          start: {
            line: 214,
            column: 72
          },
          end: {
            line: 448,
            column: 9
          }
        },
        line: 214
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 251,
            column: 71
          },
          end: {
            line: 251,
            column: 72
          }
        },
        loc: {
          start: {
            line: 251,
            column: 83
          },
          end: {
            line: 251,
            column: 101
          }
        },
        line: 251
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 49
          }
        }, {
          start: {
            line: 30,
            column: 53
          },
          end: {
            line: 30,
            column: 55
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 35,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 35,
            column: 54
          }
        }, {
          start: {
            line: 35,
            column: 58
          },
          end: {
            line: 35,
            column: 61
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 56
          }
        }, {
          start: {
            line: 36,
            column: 60
          },
          end: {
            line: 36,
            column: 64
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        }],
        line: 65
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 21
          }
        }, {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 65,
            column: 32
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        }],
        line: 70
      },
      "11": {
        loc: {
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "12": {
        loc: {
          start: {
            line: 124,
            column: 24
          },
          end: {
            line: 124,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 49
          },
          end: {
            line: 124,
            column: 62
          }
        }, {
          start: {
            line: 124,
            column: 65
          },
          end: {
            line: 124,
            column: 92
          }
        }],
        line: 124
      },
      "13": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 18
          }
        }, {
          start: {
            line: 153,
            column: 22
          },
          end: {
            line: 153,
            column: 43
          }
        }, {
          start: {
            line: 153,
            column: 47
          },
          end: {
            line: 153,
            column: 65
          }
        }],
        line: 153
      },
      "16": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "17": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 26
          }
        }, {
          start: {
            line: 161,
            column: 30
          },
          end: {
            line: 161,
            column: 59
          }
        }, {
          start: {
            line: 161,
            column: 63
          },
          end: {
            line: 161,
            column: 100
          }
        }],
        line: 161
      },
      "18": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "19": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 21
          }
        }, {
          start: {
            line: 172,
            column: 25
          },
          end: {
            line: 172,
            column: 49
          }
        }, {
          start: {
            line: 172,
            column: 53
          },
          end: {
            line: 172,
            column: 83
          }
        }],
        line: 172
      },
      "20": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "21": {
        loc: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 30
          }
        }, {
          start: {
            line: 183,
            column: 34
          },
          end: {
            line: 183,
            column: 41
          }
        }],
        line: 183
      },
      "22": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "23": {
        loc: {
          start: {
            line: 206,
            column: 24
          },
          end: {
            line: 206,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 24
          },
          end: {
            line: 206,
            column: 49
          }
        }, {
          start: {
            line: 206,
            column: 53
          },
          end: {
            line: 206,
            column: 54
          }
        }],
        line: 206
      },
      "24": {
        loc: {
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 207,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 207,
            column: 30
          }
        }, {
          start: {
            line: 207,
            column: 34
          },
          end: {
            line: 207,
            column: 35
          }
        }],
        line: 207
      },
      "25": {
        loc: {
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 208,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 208,
            column: 31
          }
        }, {
          start: {
            line: 208,
            column: 35
          },
          end: {
            line: 208,
            column: 43
          }
        }],
        line: 208
      },
      "26": {
        loc: {
          start: {
            line: 209,
            column: 18
          },
          end: {
            line: 209,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 25
          },
          end: {
            line: 209,
            column: 39
          }
        }, {
          start: {
            line: 209,
            column: 42
          },
          end: {
            line: 209,
            column: 46
          }
        }],
        line: 209
      },
      "27": {
        loc: {
          start: {
            line: 210,
            column: 21
          },
          end: {
            line: 210,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 210,
            column: 48
          }
        }, {
          start: {
            line: 210,
            column: 51
          },
          end: {
            line: 210,
            column: 55
          }
        }],
        line: 210
      },
      "28": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 415,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 415,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "29": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 221,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: 221,
            column: 25
          },
          end: {
            line: 221,
            column: 45
          }
        }],
        line: 221
      },
      "30": {
        loc: {
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 224,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 81
          },
          end: {
            line: 224,
            column: 97
          }
        }, {
          start: {
            line: 224,
            column: 100
          },
          end: {
            line: 224,
            column: 104
          }
        }],
        line: 224
      },
      "31": {
        loc: {
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 224,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 224,
            column: 58
          }
        }, {
          start: {
            line: 224,
            column: 62
          },
          end: {
            line: 224,
            column: 78
          }
        }],
        line: 224
      },
      "32": {
        loc: {
          start: {
            line: 231,
            column: 35
          },
          end: {
            line: 231,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 35
          },
          end: {
            line: 231,
            column: 45
          }
        }, {
          start: {
            line: 231,
            column: 49
          },
          end: {
            line: 231,
            column: 50
          }
        }],
        line: 231
      },
      "33": {
        loc: {
          start: {
            line: 232,
            column: 35
          },
          end: {
            line: 232,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 35
          },
          end: {
            line: 232,
            column: 61
          }
        }, {
          start: {
            line: 232,
            column: 65
          },
          end: {
            line: 232,
            column: 66
          }
        }],
        line: 232
      },
      "34": {
        loc: {
          start: {
            line: 253,
            column: 40
          },
          end: {
            line: 253,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 40
          },
          end: {
            line: 253,
            column: 68
          }
        }, {
          start: {
            line: 253,
            column: 72
          },
          end: {
            line: 253,
            column: 73
          }
        }],
        line: 253
      },
      "35": {
        loc: {
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "36": {
        loc: {
          start: {
            line: 258,
            column: 24
          },
          end: {
            line: 258,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 24
          },
          end: {
            line: 258,
            column: 48
          }
        }, {
          start: {
            line: 258,
            column: 52
          },
          end: {
            line: 258,
            column: 67
          }
        }],
        line: 258
      },
      "37": {
        loc: {
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 268,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 268,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "38": {
        loc: {
          start: {
            line: 266,
            column: 24
          },
          end: {
            line: 266,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 24
          },
          end: {
            line: 266,
            column: 51
          }
        }, {
          start: {
            line: 266,
            column: 55
          },
          end: {
            line: 266,
            column: 84
          }
        }],
        line: 266
      },
      "39": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 413,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 413,
            column: 21
          }
        }, {
          start: {
            line: 342,
            column: 27
          },
          end: {
            line: 413,
            column: 21
          }
        }],
        line: 279
      },
      "40": {
        loc: {
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 40
          }
        }, {
          start: {
            line: 279,
            column: 44
          },
          end: {
            line: 279,
            column: 84
          }
        }],
        line: 279
      },
      "41": {
        loc: {
          start: {
            line: 283,
            column: 24
          },
          end: {
            line: 290,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 24
          },
          end: {
            line: 290,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "42": {
        loc: {
          start: {
            line: 283,
            column: 28
          },
          end: {
            line: 283,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 28
          },
          end: {
            line: 283,
            column: 44
          }
        }, {
          start: {
            line: 283,
            column: 48
          },
          end: {
            line: 283,
            column: 84
          }
        }],
        line: 283
      },
      "43": {
        loc: {
          start: {
            line: 286,
            column: 32
          },
          end: {
            line: 288,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 32
          },
          end: {
            line: 288,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "44": {
        loc: {
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 286,
            column: 43
          }
        }, {
          start: {
            line: 286,
            column: 47
          },
          end: {
            line: 286,
            column: 58
          }
        }],
        line: 286
      },
      "45": {
        loc: {
          start: {
            line: 295,
            column: 28
          },
          end: {
            line: 295,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 28
          },
          end: {
            line: 295,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "46": {
        loc: {
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 335,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 335,
            column: 29
          }
        }, {
          start: {
            line: 325,
            column: 35
          },
          end: {
            line: 335,
            column: 29
          }
        }],
        line: 303
      },
      "47": {
        loc: {
          start: {
            line: 305,
            column: 52
          },
          end: {
            line: 305,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 52
          },
          end: {
            line: 305,
            column: 86
          }
        }, {
          start: {
            line: 305,
            column: 90
          },
          end: {
            line: 305,
            column: 91
          }
        }],
        line: 305
      },
      "48": {
        loc: {
          start: {
            line: 308,
            column: 32
          },
          end: {
            line: 314,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 32
          },
          end: {
            line: 314,
            column: 33
          }
        }, {
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 314,
            column: 33
          }
        }],
        line: 308
      },
      "49": {
        loc: {
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 308,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 308,
            column: 55
          }
        }, {
          start: {
            line: 308,
            column: 59
          },
          end: {
            line: 308,
            column: 74
          }
        }],
        line: 308
      },
      "50": {
        loc: {
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 314,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 314,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "51": {
        loc: {
          start: {
            line: 312,
            column: 43
          },
          end: {
            line: 312,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 43
          },
          end: {
            line: 312,
            column: 64
          }
        }, {
          start: {
            line: 312,
            column: 68
          },
          end: {
            line: 312,
            column: 88
          }
        }],
        line: 312
      },
      "52": {
        loc: {
          start: {
            line: 322,
            column: 58
          },
          end: {
            line: 322,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 85
          },
          end: {
            line: 322,
            column: 104
          }
        }, {
          start: {
            line: 322,
            column: 107
          },
          end: {
            line: 322,
            column: 108
          }
        }],
        line: 322
      },
      "53": {
        loc: {
          start: {
            line: 332,
            column: 58
          },
          end: {
            line: 332,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 73
          },
          end: {
            line: 332,
            column: 80
          }
        }, {
          start: {
            line: 332,
            column: 83
          },
          end: {
            line: 332,
            column: 84
          }
        }],
        line: 332
      },
      "54": {
        loc: {
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: 354,
            column: 31
          },
          end: {
            line: 358,
            column: 25
          }
        }],
        line: 351
      },
      "55": {
        loc: {
          start: {
            line: 354,
            column: 31
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 31
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: 356,
            column: 31
          },
          end: {
            line: 358,
            column: 25
          }
        }],
        line: 354
      },
      "56": {
        loc: {
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 412,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 412,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "57": {
        loc: {
          start: {
            line: 361,
            column: 28
          },
          end: {
            line: 411,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 28
          },
          end: {
            line: 411,
            column: 29
          }
        }, {
          start: {
            line: 409,
            column: 35
          },
          end: {
            line: 411,
            column: 29
          }
        }],
        line: 361
      },
      "58": {
        loc: {
          start: {
            line: 369,
            column: 32
          },
          end: {
            line: 403,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 32
          },
          end: {
            line: 403,
            column: 33
          }
        }, {
          start: {
            line: 391,
            column: 39
          },
          end: {
            line: 403,
            column: 33
          }
        }],
        line: 369
      },
      "59": {
        loc: {
          start: {
            line: 371,
            column: 60
          },
          end: {
            line: 371,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 60
          },
          end: {
            line: 371,
            column: 100
          }
        }, {
          start: {
            line: 371,
            column: 104
          },
          end: {
            line: 371,
            column: 105
          }
        }],
        line: 371
      },
      "60": {
        loc: {
          start: {
            line: 374,
            column: 36
          },
          end: {
            line: 380,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 36
          },
          end: {
            line: 380,
            column: 37
          }
        }, {
          start: {
            line: 378,
            column: 43
          },
          end: {
            line: 380,
            column: 37
          }
        }],
        line: 374
      },
      "61": {
        loc: {
          start: {
            line: 374,
            column: 40
          },
          end: {
            line: 374,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 40
          },
          end: {
            line: 374,
            column: 59
          }
        }, {
          start: {
            line: 374,
            column: 63
          },
          end: {
            line: 374,
            column: 82
          }
        }],
        line: 374
      },
      "62": {
        loc: {
          start: {
            line: 378,
            column: 43
          },
          end: {
            line: 380,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 43
          },
          end: {
            line: 380,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "63": {
        loc: {
          start: {
            line: 378,
            column: 47
          },
          end: {
            line: 378,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 47
          },
          end: {
            line: 378,
            column: 68
          }
        }, {
          start: {
            line: 378,
            column: 72
          },
          end: {
            line: 378,
            column: 92
          }
        }],
        line: 378
      },
      "64": {
        loc: {
          start: {
            line: 388,
            column: 62
          },
          end: {
            line: 388,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 89
          },
          end: {
            line: 388,
            column: 108
          }
        }, {
          start: {
            line: 388,
            column: 111
          },
          end: {
            line: 388,
            column: 112
          }
        }],
        line: 388
      },
      "65": {
        loc: {
          start: {
            line: 400,
            column: 62
          },
          end: {
            line: 400,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 400,
            column: 77
          },
          end: {
            line: 400,
            column: 84
          }
        }, {
          start: {
            line: 400,
            column: 87
          },
          end: {
            line: 400,
            column: 88
          }
        }],
        line: 400
      },
      "66": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "67": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 31
          }
        }, {
          start: {
            line: 417,
            column: 35
          },
          end: {
            line: 417,
            column: 54
          }
        }],
        line: 417
      },
      "68": {
        loc: {
          start: {
            line: 420,
            column: 32
          },
          end: {
            line: 420,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 32
          },
          end: {
            line: 420,
            column: 59
          }
        }, {
          start: {
            line: 420,
            column: 63
          },
          end: {
            line: 420,
            column: 64
          }
        }],
        line: 420
      },
      "69": {
        loc: {
          start: {
            line: 421,
            column: 39
          },
          end: {
            line: 421,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 39
          },
          end: {
            line: 421,
            column: 57
          }
        }, {
          start: {
            line: 421,
            column: 61
          },
          end: {
            line: 421,
            column: 67
          }
        }],
        line: 421
      },
      "70": {
        loc: {
          start: {
            line: 478,
            column: 24
          },
          end: {
            line: 478,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 49
          },
          end: {
            line: 478,
            column: 62
          }
        }, {
          start: {
            line: 478,
            column: 65
          },
          end: {
            line: 478,
            column: 92
          }
        }],
        line: 478
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/purchases/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { getToken } from 'next-auth/jwt';\nimport { cacheService } from '@/lib/cache';\n\n// GET /api/purchases - Get all purchase invoices\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('search') || '';\n        const status = searchParams.get('status');\n        const supplierId = searchParams.get('supplierId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n        const page = parseInt(searchParams.get('page') || '1');\n        const limit = parseInt(searchParams.get('limit') || '10');\n        const skip = (page - 1) * limit;\n\n        // Build the where clause for Prisma\n        const whereClause: any = {};\n\n        if (search) {\n            // Search across multiple fields: invoiceNumber, supplier name, item product name\n            whereClause.OR = [\n                {\n                    invoiceNumber: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    supplier: {\n                        name: {\n                            contains: search,\n                            mode: 'insensitive'\n                        }\n                    }\n                },\n                // Searching by item product name requires a more complex query if we want to keep it efficient.\n                // For simplicity now, we'll stick to invoiceNumber and supplier name for the main search.\n                // If product name search is critical, it might need a separate handling or different data structure.\n            ];\n        }\n\n        if (status) {\n            whereClause.status = status;\n        }\n\n        if (supplierId) {\n            whereClause.supplierId = parseInt(supplierId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.date = { // Assuming filter by invoice date, not createdAt\n                gte: new Date(startDate),\n                lte: new Date(endDate)\n            };\n        } else if (startDate) {\n            whereClause.date = {\n                gte: new Date(startDate)\n            };\n        } else if (endDate) {\n            whereClause.date = {\n                lte: new Date(endDate)\n            };\n        }\n\n        const [purchases, totalCount] = await prisma.$transaction([\n            prisma.purchaseInvoice.findMany({\n                where: whereClause,\n                include: {\n                    supplier: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true,\n                            phone: true\n                        }\n                    },\n                    items: {\n                        include: {\n                            product: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    sku: true\n                                }\n                            }\n                        }\n                    }\n                },\n                orderBy: {\n                    date: 'desc' // More common to sort by invoice date\n                },\n                skip: skip,\n                take: limit\n            }),\n            prisma.purchaseInvoice.count({ where: whereClause })\n        ]);\n\n        return NextResponse.json({\n            data: purchases,\n            pagination: {\n                total: totalCount,\n                page,\n                limit,\n                totalPages: Math.ceil(totalCount / limit)\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching purchase invoices:', error);\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json(\n            { error: { message: 'Failed to fetch purchase invoices', details: message } },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/purchases - Create a new purchase invoice\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        // Generate a more robust invoice number\n        if (!body.invoiceNumber) {\n            const today = new Date();\n            const year = today.getFullYear().toString().slice(-2); // Last 2 digits of year\n            const month = (today.getMonth() + 1).toString().padStart(2, '0'); // Month (01-12)\n            const day = today.getDate().toString().padStart(2, '0'); // Day (01-31)\n            // Get count of invoices for today to make it sequential, or use a random part\n            // For simplicity, using a timestamp fragment for uniqueness here.\n            // In a real app, a dedicated sequence generator per day/month is better.\n            const randomPart = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n            body.invoiceNumber = `PI-${year}${month}${day}-${randomPart}`;\n        }\n\n        // Extract items and distributions from the request\n        const { items, distributions, totalAmount, paidAmount, date, dueDate, notes: _notes, ..._rest } = body;\n\n        // ===================== VALIDATION =====================\n        if (!items || !Array.isArray(items) || items.length === 0) {\n            return NextResponse.json({ success: false, message: 'At least one purchase item is required' }, { status: 400 });\n        }\n\n        if (!distributions || !Array.isArray(distributions) || distributions.length !== items.length) {\n            return NextResponse.json({ success: false, message: 'Distribution for each item is required' }, { status: 400 });\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const dist = distributions[i];\n\n            if (!dist || typeof dist !== 'object' || Object.keys(dist).length === 0) {\n                return NextResponse.json({ success: false, message: `Distribution for product ${item.productId} is missing` }, { status: 400 });\n            }\n\n            let totalDistributed = 0;\n            for (const qty of Object.values(dist)) {\n                const num = Number(qty);\n                if (isNaN(num) || num < 0) {\n                    return NextResponse.json({ success: false, message: `Invalid distributed quantity for product ${item.productId}` }, { status: 400 });\n                }\n                totalDistributed += num;\n            }\n\n            if (totalDistributed !== item.quantity) {\n                return NextResponse.json({ success: false, message: `Distributed quantity (${totalDistributed}) does not match purchased quantity (${item.quantity}) for product ${item.productId}` }, { status: 400 });\n            }\n        }\n        // =======================================================\n\n        // Only include fields that exist in the Prisma schema\n        const invoiceData: any = {\n            invoiceNumber: body.invoiceNumber,\n            supplierId: parseInt(body.supplierId as unknown as string) || 0,\n            total: totalAmount || 0,\n            status: body.status || 'unpaid',\n            date: date ? new Date(date) : null,\n            dueDate: dueDate ? new Date(dueDate) : null,\n            distributions: distributions\n        };\n\n        // Create the purchase invoice with items in a transaction\n        const purchase = await prisma.$transaction(\n            async (tx) => {\n                // Create the purchase invoice\n                const createdInvoice = await tx.purchaseInvoice.create({\n                    data: invoiceData\n                });\n\n                const inventoryUpdates: Array<{ productId: number, shopId: number, newQuantity: number }> = [];\n\n                // Create the purchase invoice items and update inventory\n                if (items && Array.isArray(items)) {\n                    for (let i = 0; i < items.length; i++) {\n                        const item = items[i];\n                        const itemDistribution = distributions && distributions[i] ? distributions[i] : null;\n\n                        // Create purchase invoice item\n                        await tx.purchaseInvoiceItem.create({\n                            data: {\n                                purchaseInvoiceId: createdInvoice.id,\n                                productId: parseInt(item.productId),\n                                quantity: item.quantity,\n                                price: item.price || 0,\n                                total: (item.quantity * item.price) || 0\n                            }\n                        });\n\n                        // Get current product data\n                        const product = await tx.product.findUnique({\n                            where: { id: parseInt(item.productId) },\n                            select: { id: true, weightedAverageCost: true }\n                        });\n\n                        // Get current inventory quantity for this product across all shops\n                        const inventoryItems = await tx.inventoryItem.findMany({\n                            where: { productId: parseInt(item.productId) }\n                        });\n\n                        const currentTotalQuantity = inventoryItems.reduce((sum, inv) => sum + inv.quantity, 0);\n                        const newQuantity = item.quantity;\n                        const currentCost = product?.weightedAverageCost || 0;\n                        const newCost = item.price;\n\n                        // Calculate new weighted average cost using proper formula\n                        // WAC = (Current Total Value + New Purchase Value) / (Current Quantity + New Quantity)\n                        let newWeightedAverageCost = newCost; // Default to new cost if there's no existing inventory\n\n                        if (currentTotalQuantity > 0 && currentCost > 0) {\n                            const currentTotalValue = currentTotalQuantity * currentCost;\n                            const newPurchaseValue = newQuantity * newCost;\n                            const totalValue = currentTotalValue + newPurchaseValue;\n                            const totalQuantity = currentTotalQuantity + newQuantity;\n\n                            newWeightedAverageCost = totalValue / totalQuantity;\n                        }\n\n                        // Ensure WAC is valid and positive\n                        if (newWeightedAverageCost <= 0 || isNaN(newWeightedAverageCost)) {\n                            newWeightedAverageCost = newCost;\n                        }\n\n                        // Update product with new weighted average cost\n                        await tx.product.update({\n                            where: { id: parseInt(item.productId) },\n                            data: { weightedAverageCost: newWeightedAverageCost }\n                        });\n\n                        // Handle distribution across shops\n                        if (itemDistribution && Object.keys(itemDistribution).length > 0) {\n                            // Process only the current item's distribution object\n                            const shopQuantities: Record<string, number> = {};\n                            \n                            // Process only the distribution object for this specific item (at index i)\n                            if (itemDistribution && typeof itemDistribution === 'object') {\n                                for (const [shopIdStr, quantity] of Object.entries(itemDistribution)) {\n                                    const qty = Number(quantity);\n                                    if (qty > 0 && !isNaN(qty)) {\n                                        shopQuantities[shopIdStr] = qty; // Use the exact quantity, not accumulated\n                                    }\n                                }\n                            }\n                            \n                            // Distribute to specific shops as aggregated\n                            for (const [shopIdStr, totalQty] of Object.entries(shopQuantities)) {\n                                const shopId = shopIdStr; // Keep shopId as string\n                                const qty = totalQty;\n\n                                if (qty <= 0) continue;\n\n                                const existingInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        productId: parseInt(item.productId),\n                                        shopId: shopId\n                                    }\n                                });\n\n                                let finalQuantity = 0;\n                                if (existingInventory) {\n                                    const currentQuantity = existingInventory.quantity;\n                                    const currentCost = existingInventory.shopSpecificCost || 0;\n                                    const newTotalQuantity = currentQuantity + qty;\n                                    let newShopSpecificCost = newCost; // item.price\n                                    if (currentQuantity > 0 && currentCost > 0) { // ensure currentCost is also positive\n                                        const currentTotalValue = currentQuantity * currentCost;\n                                        const newTotalValue = qty * newCost;\n                                        newShopSpecificCost = (currentTotalValue + newTotalValue) / newTotalQuantity;\n                                    } else if (currentQuantity === 0 && newTotalQuantity > 0) { // First stock for this item in this shop\n                                        newShopSpecificCost = newCost;\n                                    }\n\n\n                                    finalQuantity = newTotalQuantity;\n                                    await tx.inventoryItem.update({\n                                        where: { id: existingInventory.id },\n                                        data: {\n                                            quantity: finalQuantity,\n                                            shopSpecificCost: newShopSpecificCost >= 0 ? newShopSpecificCost : 0\n                                        }\n                                    });\n                                } else {\n                                    finalQuantity = qty;\n                                    await tx.inventoryItem.create({\n                                        data: {\n                                            productId: parseInt(item.productId),\n                                            shopId: shopId,\n                                            quantity: finalQuantity,\n                                            shopSpecificCost: newCost >= 0 ? newCost : 0\n                                        }\n                                    });\n                                }\n                                inventoryUpdates.push({ productId: parseInt(item.productId), shopId: parseInt(shopId), newQuantity: finalQuantity });\n                            }\n                        } else {\n                            // No explicit distribution: attempt to infer shop\n                            console.warn(`No distribution for product ${item.productId} in purchase. Attempting to infer shop.`);\n                            const existingInventoriesForProduct = await tx.inventoryItem.findMany({\n                                where: { productId: parseInt(item.productId) }\n                            });\n\n                            let inferredShopId: string | null = null;\n                            if (existingInventoriesForProduct.length === 1) {\n                                inferredShopId = existingInventoriesForProduct[0].shopId;\n                                console.log(`Product ${item.productId} found in single shop ${inferredShopId}. Will update there.`);\n                            } else if (existingInventoriesForProduct.length === 0) {\n                                console.error(`Product ${item.productId} is new to inventory and no shop distribution provided. Cannot automatically assign to a shop. Inventory not updated for this item.`);\n                            } else { // More than 1 shop\n                                console.error(`Product ${item.productId} exists in multiple shops and no specific distribution provided. Ambiguous. Inventory not updated for this item.`);\n                            }\n\n                            if (inferredShopId) {\n                                const qty = item.quantity;\n                                if (qty > 0) {\n                                    const inventoryInInferredShop = await tx.inventoryItem.findFirst({\n                                        where: {\n                                            productId: parseInt(item.productId),\n                                            shopId: inferredShopId\n                                        }\n                                    });\n\n                                    let finalQuantity = 0;\n                                    if (inventoryInInferredShop) {\n                                        const currentQuantity = inventoryInInferredShop.quantity;\n                                        const currentShopCost = inventoryInInferredShop.shopSpecificCost || 0;\n                                        const newTotalQuantity = currentQuantity + qty;\n                                        let newShopSpecificCost = newCost; // item.price\n\n                                        if (currentQuantity > 0 && currentShopCost > 0) {\n                                            const currentTotalValue = currentQuantity * currentShopCost;\n                                            const newTotalValue = qty * newCost;\n                                            newShopSpecificCost = (currentTotalValue + newTotalValue) / newTotalQuantity;\n                                        } else if (currentQuantity === 0 && newTotalQuantity > 0) {\n                                            newShopSpecificCost = newCost;\n                                        }\n\n                                        finalQuantity = newTotalQuantity;\n                                        await tx.inventoryItem.update({\n                                            where: { id: inventoryInInferredShop.id },\n                                            data: {\n                                                quantity: finalQuantity,\n                                                shopSpecificCost: newShopSpecificCost >= 0 ? newShopSpecificCost : 0\n                                            }\n                                        });\n                                    } else {\n                                        // This case should ideally not be hit if existingInventoriesForProduct.length === 1\n                                        // because it means we found it in that list. But for safety:\n                                        finalQuantity = qty;\n                                        await tx.inventoryItem.create({\n                                            data: {\n                                                productId: parseInt(item.productId),\n                                                shopId: inferredShopId,\n                                                quantity: finalQuantity,\n                                                shopSpecificCost: newCost >= 0 ? newCost : 0\n                                            }\n                                        });\n                                    }\n                                    inventoryUpdates.push({ productId: parseInt(item.productId), shopId: parseInt(inferredShopId), newQuantity: finalQuantity });\n                                } else {\n                                    console.warn(`Quantity for product ${item.productId} in inferred shop ${inferredShopId} is zero or negative. No inventory update.`);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // If there's a paidAmount, create a payment record\n                if (body.paidAmount && body.paidAmount > 0) {\n                    await tx.payment.create({\n                        data: {\n                            amount: parseFloat(body.paidAmount as unknown as string) || 0,\n                            paymentMethod: body.paymentMethod || 'cash', // Default or from body\n                            invoice: { connect: { id: createdInvoice.id } }\n                        }\n                    });\n                }\n\n                // Fetch the complete invoice with items\n                const fullInvoice = await tx.purchaseInvoice.findUnique({\n                    where: { id: createdInvoice.id },\n                    include: {\n                        supplier: true,\n                        items: { include: { product: true } }\n                    }\n                });\n\n                return { invoice: fullInvoice, inventoryUpdates };\n            },\n            { timeout: 20000 } // 20 seconds timeout\n        );\n\n        // Real-time updates now handled by polling system\n\n        // After successful transaction, invalidate relevant caches\n        try {\n            await cacheService.invalidateInventory(); // Handles 'inventory:summary:*' and 'products:*'\n            await cacheService.del('dashboard:inventory');\n            await cacheService.del('dashboard:inventory-value');\n            await cacheService.del('dashboard:shops');\n            await cacheService.del('dashboard:all');\n            await cacheService.del('dashboard:summary'); // As per DASHBOARD_PERFORMANCE_OPTIMIZATIONS.md\n            // Invalidate purchases-specific caches\n            await cacheService.invalidatePattern('purchases-optimized*');\n            await cacheService.invalidatePattern('purchase-stats*');\n            console.log('Relevant caches invalidated after purchase creation.');\n        } catch (cacheError) {\n            console.error('Error invalidating caches after purchase creation:', cacheError);\n            // Do not let cache invalidation error fail the main operation\n        }\n\n        return NextResponse.json(\n            { success: true, message: 'Purchase invoice created successfully', data: purchase.invoice },\n            { status: 201 }\n        );\n    } catch (error) {\n        console.error('Error creating purchase invoice:', error);\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json(\n            { error: { message: 'Failed to create purchase invoice', details: message } },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "searchParams", "URL", "url", "search", "get", "status", "supplierId", "startDate", "endDate", "page", "parseInt", "limit", "skip", "whereClause", "OR", "invoiceNumber", "contains", "mode", "supplier", "name", "date", "gte", "Date", "lte", "purchases", "totalCount", "prisma", "$transaction", "purchaseInvoice", "findMany", "where", "include", "select", "id", "email", "phone", "items", "product", "sku", "orderBy", "take", "count", "NextResponse", "json", "data", "pagination", "total", "totalPages", "Math", "ceil", "error", "console", "message", "Error", "details", "body", "today", "year", "getFullYear", "toString", "slice", "month", "getMonth", "padStart", "day", "getDate", "randomPart", "floor", "random", "distributions", "totalAmount", "paidAmount", "dueDate", "notes", "_notes", "_rest", "Array", "isArray", "length", "success", "i", "item", "dist", "Object", "keys", "productId", "totalDistributed", "qty", "values", "num", "Number", "isNaN", "quantity", "invoiceData", "purchase", "tx", "createdInvoice", "create", "inventoryUpdates", "itemDistribution", "purchaseInvoiceItem", "purchaseInvoiceId", "price", "findUnique", "weightedAverageCost", "inventoryItems", "inventoryItem", "currentTotalQuantity", "reduce", "sum", "inv", "newQuantity", "currentCost", "newCost", "newWeightedAverageCost", "currentTotalValue", "newPurchaseValue", "totalValue", "totalQuantity", "update", "shopQuantities", "shopIdStr", "entries", "totalQty", "shopId", "existingInventory", "findFirst", "finalQuantity", "currentQuantity", "shopSpecificCost", "newTotalQuantity", "newShopSpecificCost", "newTotalValue", "push", "warn", "existingInventoriesForProduct", "inferredShopId", "log", "inventoryInInferredShop", "currentShopCost", "payment", "amount", "parseFloat", "paymentMethod", "invoice", "connect", "fullInvoice", "timeout", "cacheService", "invalidateInventory", "del", "invalidatePattern", "cacheError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "07ce15558f5d06def93aebe1100fa52550a6cfc4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_baw0gpe8a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_baw0gpe8a();
cov_baw0gpe8a().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_baw0gpe8a().f[0]++;
  cov_baw0gpe8a().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_baw0gpe8a().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_baw0gpe8a().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_baw0gpe8a().f[1]++;
    cov_baw0gpe8a().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_baw0gpe8a().f[2]++;
    cov_baw0gpe8a().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_baw0gpe8a().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_baw0gpe8a().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _cache =
/* istanbul ignore next */
(cov_baw0gpe8a().s[8]++, require("../../../lib/cache"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_baw0gpe8a().f[3]++;
  cov_baw0gpe8a().s[9]++;
  return /* istanbul ignore next */(cov_baw0gpe8a().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_baw0gpe8a().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_baw0gpe8a().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_baw0gpe8a().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_baw0gpe8a().f[4]++;
  cov_baw0gpe8a().s[10]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[11]++, new URL(request.url));
    const search =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[12]++,
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[2][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[2][1]++, ""));
    const status =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[13]++, searchParams.get("status"));
    const supplierId =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[14]++, searchParams.get("supplierId"));
    const startDate =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[15]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[16]++, searchParams.get("endDate"));
    const page =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[17]++, parseInt(
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[3][0]++, searchParams.get("page")) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[3][1]++, "1")));
    const limit =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[18]++, parseInt(
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[4][0]++, searchParams.get("limit")) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[4][1]++, "10")));
    const skip =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[19]++, (page - 1) * limit);
    // Build the where clause for Prisma
    const whereClause =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[20]++, {});
    /* istanbul ignore next */
    cov_baw0gpe8a().s[21]++;
    if (search) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[5][0]++;
      cov_baw0gpe8a().s[22]++;
      // Search across multiple fields: invoiceNumber, supplier name, item product name
      whereClause.OR = [{
        invoiceNumber: {
          contains: search,
          mode: "insensitive"
        }
      }, {
        supplier: {
          name: {
            contains: search,
            mode: "insensitive"
          }
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[5][1]++;
    }
    cov_baw0gpe8a().s[23]++;
    if (status) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[6][0]++;
      cov_baw0gpe8a().s[24]++;
      whereClause.status = status;
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[6][1]++;
    }
    cov_baw0gpe8a().s[25]++;
    if (supplierId) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[7][0]++;
      cov_baw0gpe8a().s[26]++;
      whereClause.supplierId = parseInt(supplierId);
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[7][1]++;
    }
    cov_baw0gpe8a().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[9][0]++, startDate) &&
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[9][1]++, endDate)) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[8][0]++;
      cov_baw0gpe8a().s[28]++;
      whereClause.date = {
        gte: new Date(startDate),
        lte: new Date(endDate)
      };
    } else {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[8][1]++;
      cov_baw0gpe8a().s[29]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[10][0]++;
        cov_baw0gpe8a().s[30]++;
        whereClause.date = {
          gte: new Date(startDate)
        };
      } else {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[10][1]++;
        cov_baw0gpe8a().s[31]++;
        if (endDate) {
          /* istanbul ignore next */
          cov_baw0gpe8a().b[11][0]++;
          cov_baw0gpe8a().s[32]++;
          whereClause.date = {
            lte: new Date(endDate)
          };
        } else
        /* istanbul ignore next */
        {
          cov_baw0gpe8a().b[11][1]++;
        }
      }
    }
    const [purchases, totalCount] =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[33]++, await _prisma.default.$transaction([_prisma.default.purchaseInvoice.findMany({
      where: whereClause,
      include: {
        supplier: {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                sku: true
              }
            }
          }
        }
      },
      orderBy: {
        date: "desc" // More common to sort by invoice date
      },
      skip: skip,
      take: limit
    }), _prisma.default.purchaseInvoice.count({
      where: whereClause
    })]));
    /* istanbul ignore next */
    cov_baw0gpe8a().s[34]++;
    return _server.NextResponse.json({
      data: purchases,
      pagination: {
        total: totalCount,
        page,
        limit,
        totalPages: Math.ceil(totalCount / limit)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_baw0gpe8a().s[35]++;
    console.error("Error fetching purchase invoices:", error);
    const message =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[36]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[12][0]++, error.message) :
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[12][1]++, "An unknown error occurred"));
    /* istanbul ignore next */
    cov_baw0gpe8a().s[37]++;
    return _server.NextResponse.json({
      error: {
        message: "Failed to fetch purchase invoices",
        details: message
      }
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_baw0gpe8a().f[5]++;
  cov_baw0gpe8a().s[38]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[39]++, await request.json());
    // Generate a more robust invoice number
    /* istanbul ignore next */
    cov_baw0gpe8a().s[40]++;
    if (!body.invoiceNumber) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[13][0]++;
      const today =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[41]++, new Date());
      const year =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[42]++, today.getFullYear().toString().slice(-2)); // Last 2 digits of year
      const month =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[43]++, (today.getMonth() + 1).toString().padStart(2, "0")); // Month (01-12)
      const day =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[44]++, today.getDate().toString().padStart(2, "0")); // Day (01-31)
      // Get count of invoices for today to make it sequential, or use a random part
      // For simplicity, using a timestamp fragment for uniqueness here.
      // In a real app, a dedicated sequence generator per day/month is better.
      const randomPart =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[45]++, Math.floor(Math.random() * 1000).toString().padStart(3, "0"));
      /* istanbul ignore next */
      cov_baw0gpe8a().s[46]++;
      body.invoiceNumber = `PI-${year}${month}${day}-${randomPart}`;
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[13][1]++;
    }
    // Extract items and distributions from the request
    const {
      items,
      distributions,
      totalAmount,
      paidAmount,
      date,
      dueDate,
      notes: _notes,
      ..._rest
    } =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[47]++, body);
    // ===================== VALIDATION =====================
    /* istanbul ignore next */
    cov_baw0gpe8a().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[15][0]++, !items) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[15][1]++, !Array.isArray(items)) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[15][2]++, items.length === 0)) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[14][0]++;
      cov_baw0gpe8a().s[49]++;
      return _server.NextResponse.json({
        success: false,
        message: "At least one purchase item is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[14][1]++;
    }
    cov_baw0gpe8a().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[17][0]++, !distributions) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[17][1]++, !Array.isArray(distributions)) ||
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[17][2]++, distributions.length !== items.length)) {
      /* istanbul ignore next */
      cov_baw0gpe8a().b[16][0]++;
      cov_baw0gpe8a().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: "Distribution for each item is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_baw0gpe8a().b[16][1]++;
    }
    cov_baw0gpe8a().s[52]++;
    for (let i =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[53]++, 0); i < items.length; i++) {
      const item =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[54]++, items[i]);
      const dist =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[55]++, distributions[i]);
      /* istanbul ignore next */
      cov_baw0gpe8a().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[19][0]++, !dist) ||
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[19][1]++, typeof dist !== "object") ||
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[19][2]++, Object.keys(dist).length === 0)) {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[18][0]++;
        cov_baw0gpe8a().s[57]++;
        return _server.NextResponse.json({
          success: false,
          message: `Distribution for product ${item.productId} is missing`
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_baw0gpe8a().b[18][1]++;
      }
      let totalDistributed =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[58]++, 0);
      /* istanbul ignore next */
      cov_baw0gpe8a().s[59]++;
      for (const qty of Object.values(dist)) {
        const num =
        /* istanbul ignore next */
        (cov_baw0gpe8a().s[60]++, Number(qty));
        /* istanbul ignore next */
        cov_baw0gpe8a().s[61]++;
        if (
        /* istanbul ignore next */
        (cov_baw0gpe8a().b[21][0]++, isNaN(num)) ||
        /* istanbul ignore next */
        (cov_baw0gpe8a().b[21][1]++, num < 0)) {
          /* istanbul ignore next */
          cov_baw0gpe8a().b[20][0]++;
          cov_baw0gpe8a().s[62]++;
          return _server.NextResponse.json({
            success: false,
            message: `Invalid distributed quantity for product ${item.productId}`
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_baw0gpe8a().b[20][1]++;
        }
        cov_baw0gpe8a().s[63]++;
        totalDistributed += num;
      }
      /* istanbul ignore next */
      cov_baw0gpe8a().s[64]++;
      if (totalDistributed !== item.quantity) {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[22][0]++;
        cov_baw0gpe8a().s[65]++;
        return _server.NextResponse.json({
          success: false,
          message: `Distributed quantity (${totalDistributed}) does not match purchased quantity (${item.quantity}) for product ${item.productId}`
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_baw0gpe8a().b[22][1]++;
      }
    }
    // =======================================================
    // Only include fields that exist in the Prisma schema
    const invoiceData =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[66]++, {
      invoiceNumber: body.invoiceNumber,
      supplierId:
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[23][0]++, parseInt(body.supplierId)) ||
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[23][1]++, 0),
      total:
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[24][0]++, totalAmount) ||
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[24][1]++, 0),
      status:
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[25][0]++, body.status) ||
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[25][1]++, "unpaid"),
      date: date ?
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[26][0]++, new Date(date)) :
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[26][1]++, null),
      dueDate: dueDate ?
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[27][0]++, new Date(dueDate)) :
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[27][1]++, null),
      distributions: distributions
    });
    // Create the purchase invoice with items in a transaction
    const purchase =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[67]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_baw0gpe8a().f[6]++;
      // Create the purchase invoice
      const createdInvoice =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[68]++, await tx.purchaseInvoice.create({
        data: invoiceData
      }));
      const inventoryUpdates =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[69]++, []);
      // Create the purchase invoice items and update inventory
      /* istanbul ignore next */
      cov_baw0gpe8a().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[29][0]++, items) &&
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[29][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[28][0]++;
        cov_baw0gpe8a().s[71]++;
        for (let i =
        /* istanbul ignore next */
        (cov_baw0gpe8a().s[72]++, 0); i < items.length; i++) {
          const item =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[73]++, items[i]);
          const itemDistribution =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[74]++,
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[31][0]++, distributions) &&
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[31][1]++, distributions[i]) ?
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[30][0]++, distributions[i]) :
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[30][1]++, null));
          // Create purchase invoice item
          /* istanbul ignore next */
          cov_baw0gpe8a().s[75]++;
          await tx.purchaseInvoiceItem.create({
            data: {
              purchaseInvoiceId: createdInvoice.id,
              productId: parseInt(item.productId),
              quantity: item.quantity,
              price:
              /* istanbul ignore next */
              (cov_baw0gpe8a().b[32][0]++, item.price) ||
              /* istanbul ignore next */
              (cov_baw0gpe8a().b[32][1]++, 0),
              total:
              /* istanbul ignore next */
              (cov_baw0gpe8a().b[33][0]++, item.quantity * item.price) ||
              /* istanbul ignore next */
              (cov_baw0gpe8a().b[33][1]++, 0)
            }
          });
          // Get current product data
          const product =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[76]++, await tx.product.findUnique({
            where: {
              id: parseInt(item.productId)
            },
            select: {
              id: true,
              weightedAverageCost: true
            }
          }));
          // Get current inventory quantity for this product across all shops
          const inventoryItems =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[77]++, await tx.inventoryItem.findMany({
            where: {
              productId: parseInt(item.productId)
            }
          }));
          const currentTotalQuantity =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[78]++, inventoryItems.reduce((sum, inv) => {
            /* istanbul ignore next */
            cov_baw0gpe8a().f[7]++;
            cov_baw0gpe8a().s[79]++;
            return sum + inv.quantity;
          }, 0));
          const newQuantity =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[80]++, item.quantity);
          const currentCost =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[81]++,
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[34][0]++, product?.weightedAverageCost) ||
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[34][1]++, 0));
          const newCost =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[82]++, item.price);
          // Calculate new weighted average cost using proper formula
          // WAC = (Current Total Value + New Purchase Value) / (Current Quantity + New Quantity)
          let newWeightedAverageCost =
          /* istanbul ignore next */
          (cov_baw0gpe8a().s[83]++, newCost); // Default to new cost if there's no existing inventory
          /* istanbul ignore next */
          cov_baw0gpe8a().s[84]++;
          if (
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[36][0]++, currentTotalQuantity > 0) &&
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[36][1]++, currentCost > 0)) {
            /* istanbul ignore next */
            cov_baw0gpe8a().b[35][0]++;
            const currentTotalValue =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[85]++, currentTotalQuantity * currentCost);
            const newPurchaseValue =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[86]++, newQuantity * newCost);
            const totalValue =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[87]++, currentTotalValue + newPurchaseValue);
            const totalQuantity =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[88]++, currentTotalQuantity + newQuantity);
            /* istanbul ignore next */
            cov_baw0gpe8a().s[89]++;
            newWeightedAverageCost = totalValue / totalQuantity;
          } else
          /* istanbul ignore next */
          {
            cov_baw0gpe8a().b[35][1]++;
          }
          // Ensure WAC is valid and positive
          cov_baw0gpe8a().s[90]++;
          if (
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[38][0]++, newWeightedAverageCost <= 0) ||
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[38][1]++, isNaN(newWeightedAverageCost))) {
            /* istanbul ignore next */
            cov_baw0gpe8a().b[37][0]++;
            cov_baw0gpe8a().s[91]++;
            newWeightedAverageCost = newCost;
          } else
          /* istanbul ignore next */
          {
            cov_baw0gpe8a().b[37][1]++;
          }
          // Update product with new weighted average cost
          cov_baw0gpe8a().s[92]++;
          await tx.product.update({
            where: {
              id: parseInt(item.productId)
            },
            data: {
              weightedAverageCost: newWeightedAverageCost
            }
          });
          // Handle distribution across shops
          /* istanbul ignore next */
          cov_baw0gpe8a().s[93]++;
          if (
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[40][0]++, itemDistribution) &&
          /* istanbul ignore next */
          (cov_baw0gpe8a().b[40][1]++, Object.keys(itemDistribution).length > 0)) {
            /* istanbul ignore next */
            cov_baw0gpe8a().b[39][0]++;
            // Process only the current item's distribution object
            const shopQuantities =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[94]++, {});
            // Process only the distribution object for this specific item (at index i)
            /* istanbul ignore next */
            cov_baw0gpe8a().s[95]++;
            if (
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[42][0]++, itemDistribution) &&
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[42][1]++, typeof itemDistribution === "object")) {
              /* istanbul ignore next */
              cov_baw0gpe8a().b[41][0]++;
              cov_baw0gpe8a().s[96]++;
              for (const [shopIdStr, quantity] of Object.entries(itemDistribution)) {
                const qty =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[97]++, Number(quantity));
                /* istanbul ignore next */
                cov_baw0gpe8a().s[98]++;
                if (
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[44][0]++, qty > 0) &&
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[44][1]++, !isNaN(qty))) {
                  /* istanbul ignore next */
                  cov_baw0gpe8a().b[43][0]++;
                  cov_baw0gpe8a().s[99]++;
                  shopQuantities[shopIdStr] = qty; // Use the exact quantity, not accumulated
                } else
                /* istanbul ignore next */
                {
                  cov_baw0gpe8a().b[43][1]++;
                }
              }
            } else
            /* istanbul ignore next */
            {
              cov_baw0gpe8a().b[41][1]++;
            }
            // Distribute to specific shops as aggregated
            cov_baw0gpe8a().s[100]++;
            for (const [shopIdStr, totalQty] of Object.entries(shopQuantities)) {
              const shopId =
              /* istanbul ignore next */
              (cov_baw0gpe8a().s[101]++, shopIdStr); // Keep shopId as string
              const qty =
              /* istanbul ignore next */
              (cov_baw0gpe8a().s[102]++, totalQty);
              /* istanbul ignore next */
              cov_baw0gpe8a().s[103]++;
              if (qty <= 0) {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[45][0]++;
                cov_baw0gpe8a().s[104]++;
                continue;
              } else
              /* istanbul ignore next */
              {
                cov_baw0gpe8a().b[45][1]++;
              }
              const existingInventory =
              /* istanbul ignore next */
              (cov_baw0gpe8a().s[105]++, await tx.inventoryItem.findFirst({
                where: {
                  productId: parseInt(item.productId),
                  shopId: shopId
                }
              }));
              let finalQuantity =
              /* istanbul ignore next */
              (cov_baw0gpe8a().s[106]++, 0);
              /* istanbul ignore next */
              cov_baw0gpe8a().s[107]++;
              if (existingInventory) {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[46][0]++;
                const currentQuantity =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[108]++, existingInventory.quantity);
                const currentCost =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[109]++,
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[47][0]++, existingInventory.shopSpecificCost) ||
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[47][1]++, 0));
                const newTotalQuantity =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[110]++, currentQuantity + qty);
                let newShopSpecificCost =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[111]++, newCost); // item.price
                /* istanbul ignore next */
                cov_baw0gpe8a().s[112]++;
                if (
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[49][0]++, currentQuantity > 0) &&
                /* istanbul ignore next */
                (cov_baw0gpe8a().b[49][1]++, currentCost > 0)) {
                  /* istanbul ignore next */
                  cov_baw0gpe8a().b[48][0]++;
                  const currentTotalValue =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[113]++, currentQuantity * currentCost);
                  const newTotalValue =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[114]++, qty * newCost);
                  /* istanbul ignore next */
                  cov_baw0gpe8a().s[115]++;
                  newShopSpecificCost = (currentTotalValue + newTotalValue) / newTotalQuantity;
                } else {
                  /* istanbul ignore next */
                  cov_baw0gpe8a().b[48][1]++;
                  cov_baw0gpe8a().s[116]++;
                  if (
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[51][0]++, currentQuantity === 0) &&
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[51][1]++, newTotalQuantity > 0)) {
                    /* istanbul ignore next */
                    cov_baw0gpe8a().b[50][0]++;
                    cov_baw0gpe8a().s[117]++;
                    newShopSpecificCost = newCost;
                  } else
                  /* istanbul ignore next */
                  {
                    cov_baw0gpe8a().b[50][1]++;
                  }
                }
                /* istanbul ignore next */
                cov_baw0gpe8a().s[118]++;
                finalQuantity = newTotalQuantity;
                /* istanbul ignore next */
                cov_baw0gpe8a().s[119]++;
                await tx.inventoryItem.update({
                  where: {
                    id: existingInventory.id
                  },
                  data: {
                    quantity: finalQuantity,
                    shopSpecificCost: newShopSpecificCost >= 0 ?
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[52][0]++, newShopSpecificCost) :
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[52][1]++, 0)
                  }
                });
              } else {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[46][1]++;
                cov_baw0gpe8a().s[120]++;
                finalQuantity = qty;
                /* istanbul ignore next */
                cov_baw0gpe8a().s[121]++;
                await tx.inventoryItem.create({
                  data: {
                    productId: parseInt(item.productId),
                    shopId: shopId,
                    quantity: finalQuantity,
                    shopSpecificCost: newCost >= 0 ?
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[53][0]++, newCost) :
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[53][1]++, 0)
                  }
                });
              }
              /* istanbul ignore next */
              cov_baw0gpe8a().s[122]++;
              inventoryUpdates.push({
                productId: parseInt(item.productId),
                shopId: parseInt(shopId),
                newQuantity: finalQuantity
              });
            }
          } else {
            /* istanbul ignore next */
            cov_baw0gpe8a().b[39][1]++;
            cov_baw0gpe8a().s[123]++;
            // No explicit distribution: attempt to infer shop
            console.warn(`No distribution for product ${item.productId} in purchase. Attempting to infer shop.`);
            const existingInventoriesForProduct =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[124]++, await tx.inventoryItem.findMany({
              where: {
                productId: parseInt(item.productId)
              }
            }));
            let inferredShopId =
            /* istanbul ignore next */
            (cov_baw0gpe8a().s[125]++, null);
            /* istanbul ignore next */
            cov_baw0gpe8a().s[126]++;
            if (existingInventoriesForProduct.length === 1) {
              /* istanbul ignore next */
              cov_baw0gpe8a().b[54][0]++;
              cov_baw0gpe8a().s[127]++;
              inferredShopId = existingInventoriesForProduct[0].shopId;
              /* istanbul ignore next */
              cov_baw0gpe8a().s[128]++;
              console.log(`Product ${item.productId} found in single shop ${inferredShopId}. Will update there.`);
            } else {
              /* istanbul ignore next */
              cov_baw0gpe8a().b[54][1]++;
              cov_baw0gpe8a().s[129]++;
              if (existingInventoriesForProduct.length === 0) {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[55][0]++;
                cov_baw0gpe8a().s[130]++;
                console.error(`Product ${item.productId} is new to inventory and no shop distribution provided. Cannot automatically assign to a shop. Inventory not updated for this item.`);
              } else {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[55][1]++;
                cov_baw0gpe8a().s[131]++;
                console.error(`Product ${item.productId} exists in multiple shops and no specific distribution provided. Ambiguous. Inventory not updated for this item.`);
              }
            }
            /* istanbul ignore next */
            cov_baw0gpe8a().s[132]++;
            if (inferredShopId) {
              /* istanbul ignore next */
              cov_baw0gpe8a().b[56][0]++;
              const qty =
              /* istanbul ignore next */
              (cov_baw0gpe8a().s[133]++, item.quantity);
              /* istanbul ignore next */
              cov_baw0gpe8a().s[134]++;
              if (qty > 0) {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[57][0]++;
                const inventoryInInferredShop =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[135]++, await tx.inventoryItem.findFirst({
                  where: {
                    productId: parseInt(item.productId),
                    shopId: inferredShopId
                  }
                }));
                let finalQuantity =
                /* istanbul ignore next */
                (cov_baw0gpe8a().s[136]++, 0);
                /* istanbul ignore next */
                cov_baw0gpe8a().s[137]++;
                if (inventoryInInferredShop) {
                  /* istanbul ignore next */
                  cov_baw0gpe8a().b[58][0]++;
                  const currentQuantity =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[138]++, inventoryInInferredShop.quantity);
                  const currentShopCost =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[139]++,
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[59][0]++, inventoryInInferredShop.shopSpecificCost) ||
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[59][1]++, 0));
                  const newTotalQuantity =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[140]++, currentQuantity + qty);
                  let newShopSpecificCost =
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().s[141]++, newCost); // item.price
                  /* istanbul ignore next */
                  cov_baw0gpe8a().s[142]++;
                  if (
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[61][0]++, currentQuantity > 0) &&
                  /* istanbul ignore next */
                  (cov_baw0gpe8a().b[61][1]++, currentShopCost > 0)) {
                    /* istanbul ignore next */
                    cov_baw0gpe8a().b[60][0]++;
                    const currentTotalValue =
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().s[143]++, currentQuantity * currentShopCost);
                    const newTotalValue =
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().s[144]++, qty * newCost);
                    /* istanbul ignore next */
                    cov_baw0gpe8a().s[145]++;
                    newShopSpecificCost = (currentTotalValue + newTotalValue) / newTotalQuantity;
                  } else {
                    /* istanbul ignore next */
                    cov_baw0gpe8a().b[60][1]++;
                    cov_baw0gpe8a().s[146]++;
                    if (
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[63][0]++, currentQuantity === 0) &&
                    /* istanbul ignore next */
                    (cov_baw0gpe8a().b[63][1]++, newTotalQuantity > 0)) {
                      /* istanbul ignore next */
                      cov_baw0gpe8a().b[62][0]++;
                      cov_baw0gpe8a().s[147]++;
                      newShopSpecificCost = newCost;
                    } else
                    /* istanbul ignore next */
                    {
                      cov_baw0gpe8a().b[62][1]++;
                    }
                  }
                  /* istanbul ignore next */
                  cov_baw0gpe8a().s[148]++;
                  finalQuantity = newTotalQuantity;
                  /* istanbul ignore next */
                  cov_baw0gpe8a().s[149]++;
                  await tx.inventoryItem.update({
                    where: {
                      id: inventoryInInferredShop.id
                    },
                    data: {
                      quantity: finalQuantity,
                      shopSpecificCost: newShopSpecificCost >= 0 ?
                      /* istanbul ignore next */
                      (cov_baw0gpe8a().b[64][0]++, newShopSpecificCost) :
                      /* istanbul ignore next */
                      (cov_baw0gpe8a().b[64][1]++, 0)
                    }
                  });
                } else {
                  /* istanbul ignore next */
                  cov_baw0gpe8a().b[58][1]++;
                  cov_baw0gpe8a().s[150]++;
                  // This case should ideally not be hit if existingInventoriesForProduct.length === 1
                  // because it means we found it in that list. But for safety:
                  finalQuantity = qty;
                  /* istanbul ignore next */
                  cov_baw0gpe8a().s[151]++;
                  await tx.inventoryItem.create({
                    data: {
                      productId: parseInt(item.productId),
                      shopId: inferredShopId,
                      quantity: finalQuantity,
                      shopSpecificCost: newCost >= 0 ?
                      /* istanbul ignore next */
                      (cov_baw0gpe8a().b[65][0]++, newCost) :
                      /* istanbul ignore next */
                      (cov_baw0gpe8a().b[65][1]++, 0)
                    }
                  });
                }
                /* istanbul ignore next */
                cov_baw0gpe8a().s[152]++;
                inventoryUpdates.push({
                  productId: parseInt(item.productId),
                  shopId: parseInt(inferredShopId),
                  newQuantity: finalQuantity
                });
              } else {
                /* istanbul ignore next */
                cov_baw0gpe8a().b[57][1]++;
                cov_baw0gpe8a().s[153]++;
                console.warn(`Quantity for product ${item.productId} in inferred shop ${inferredShopId} is zero or negative. No inventory update.`);
              }
            } else
            /* istanbul ignore next */
            {
              cov_baw0gpe8a().b[56][1]++;
            }
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_baw0gpe8a().b[28][1]++;
      }
      // If there's a paidAmount, create a payment record
      cov_baw0gpe8a().s[154]++;
      if (
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[67][0]++, body.paidAmount) &&
      /* istanbul ignore next */
      (cov_baw0gpe8a().b[67][1]++, body.paidAmount > 0)) {
        /* istanbul ignore next */
        cov_baw0gpe8a().b[66][0]++;
        cov_baw0gpe8a().s[155]++;
        await tx.payment.create({
          data: {
            amount:
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[68][0]++, parseFloat(body.paidAmount)) ||
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[68][1]++, 0),
            paymentMethod:
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[69][0]++, body.paymentMethod) ||
            /* istanbul ignore next */
            (cov_baw0gpe8a().b[69][1]++, "cash"),
            invoice: {
              connect: {
                id: createdInvoice.id
              }
            }
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_baw0gpe8a().b[66][1]++;
      }
      // Fetch the complete invoice with items
      const fullInvoice =
      /* istanbul ignore next */
      (cov_baw0gpe8a().s[156]++, await tx.purchaseInvoice.findUnique({
        where: {
          id: createdInvoice.id
        },
        include: {
          supplier: true,
          items: {
            include: {
              product: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_baw0gpe8a().s[157]++;
      return {
        invoice: fullInvoice,
        inventoryUpdates
      };
    }, {
      timeout: 20000
    } // 20 seconds timeout
    ));
    // Real-time updates now handled by polling system
    // After successful transaction, invalidate relevant caches
    /* istanbul ignore next */
    cov_baw0gpe8a().s[158]++;
    try {
      /* istanbul ignore next */
      cov_baw0gpe8a().s[159]++;
      await _cache.cacheService.invalidateInventory(); // Handles 'inventory:summary:*' and 'products:*'
      /* istanbul ignore next */
      cov_baw0gpe8a().s[160]++;
      await _cache.cacheService.del("dashboard:inventory");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[161]++;
      await _cache.cacheService.del("dashboard:inventory-value");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[162]++;
      await _cache.cacheService.del("dashboard:shops");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[163]++;
      await _cache.cacheService.del("dashboard:all");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[164]++;
      await _cache.cacheService.del("dashboard:summary"); // As per DASHBOARD_PERFORMANCE_OPTIMIZATIONS.md
      // Invalidate purchases-specific caches
      /* istanbul ignore next */
      cov_baw0gpe8a().s[165]++;
      await _cache.cacheService.invalidatePattern("purchases-optimized*");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[166]++;
      await _cache.cacheService.invalidatePattern("purchase-stats*");
      /* istanbul ignore next */
      cov_baw0gpe8a().s[167]++;
      console.log("Relevant caches invalidated after purchase creation.");
    } catch (cacheError) {
      /* istanbul ignore next */
      cov_baw0gpe8a().s[168]++;
      console.error("Error invalidating caches after purchase creation:", cacheError);
      // Do not let cache invalidation error fail the main operation
    }
    /* istanbul ignore next */
    cov_baw0gpe8a().s[169]++;
    return _server.NextResponse.json({
      success: true,
      message: "Purchase invoice created successfully",
      data: purchase.invoice
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_baw0gpe8a().s[170]++;
    console.error("Error creating purchase invoice:", error);
    const message =
    /* istanbul ignore next */
    (cov_baw0gpe8a().s[171]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[70][0]++, error.message) :
    /* istanbul ignore next */
    (cov_baw0gpe8a().b[70][1]++, "An unknown error occurred"));
    /* istanbul ignore next */
    cov_baw0gpe8a().s[172]++;
    return _server.NextResponse.json({
      error: {
        message: "Failed to create purchase invoice",
        details: message
      }
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,