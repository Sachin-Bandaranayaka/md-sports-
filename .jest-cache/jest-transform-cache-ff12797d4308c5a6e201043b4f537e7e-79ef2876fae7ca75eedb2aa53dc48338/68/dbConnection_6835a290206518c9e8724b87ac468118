2545f9949a2a6d1084b2b91d170de6d4
"use strict";

/* istanbul ignore next */
function cov_j4dv8cye5() {
  var path = "/Users/sachin/Documents/md-sports-/src/lib/dbConnection.ts";
  var hash = "4b56cf3fcbb34f8a6adb82544120d974e9d99ad0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/lib/dbConnection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 25
        }
      },
      "9": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "10": {
        start: {
          line: 29,
          column: 13
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "11": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "12": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 21
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "19": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "20": {
        start: {
          line: 48,
          column: 14
        },
        end: {
          line: 63,
          column: 1
        }
      },
      "21": {
        start: {
          line: 49,
          column: 18
        },
        end: {
          line: 49,
          column: 28
        }
      },
      "22": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "23": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 53
        }
      },
      "24": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 43
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "26": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 22
        }
      },
      "27": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 45
        }
      },
      "28": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 20
        }
      },
      "29": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 78,
          column: 1
        }
      },
      "30": {
        start: {
          line: 65,
          column: 19
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "31": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "32": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "33": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 45
        }
      },
      "34": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 37
        }
      },
      "35": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 22
        }
      },
      "36": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 39
        }
      },
      "37": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 51
        }
      },
      "38": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 20
        }
      },
      "39": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 25
        }
      },
      "40": {
        start: {
          line: 79,
          column: 17
        },
        end: {
          line: 84,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 13
          },
          end: {
            line: 12,
            column: 14
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 12
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 21
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 18
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 24
          }
        },
        loc: {
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 48,
            column: 14
          },
          end: {
            line: 48,
            column: 15
          }
        },
        loc: {
          start: {
            line: 48,
            column: 36
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 48
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 64,
            column: 21
          }
        },
        loc: {
          start: {
            line: 64,
            column: 38
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 64
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 49
          }
        }, {
          start: {
            line: 27,
            column: 53
          },
          end: {
            line: 27,
            column: 88
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 33,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 17
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/lib/dbConnection.ts"],
      sourcesContent: ["import { Pool } from 'pg';\n\n// Get database URL from environment variable or use default\nconst connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/mssport';\n\n// Create a pool of connections\nconst pool = new Pool({\n    connectionString,\n    ssl: process.env.NODE_ENV === 'production' ? {\n        rejectUnauthorized: false\n    } : undefined\n});\n\n// Test database connection\nexport const testConnection = async (): Promise<boolean> => {\n    let client;\n    try {\n        client = await pool.connect();\n        console.log('Database connection successful');\n        return true;\n    } catch (error) {\n        console.error('Database connection error:', error);\n        return false;\n    } finally {\n        if (client) client.release();\n    }\n};\n\n// Execute a single query\nexport const query = async (text: string, params?: any[]): Promise<any> => {\n    const start = Date.now();\n    try {\n        const result = await pool.query(text, params);\n        const duration = Date.now() - start;\n        console.log('Executed query', { text, duration, rows: result.rowCount });\n        return result;\n    } catch (error) {\n        console.error('Query error:', error);\n        throw error;\n    }\n};\n\n// Execute multiple queries in a transaction\nexport const transaction = async (callback: (client: any) => Promise<any>): Promise<any> => {\n    const client = await pool.connect();\n    try {\n        await client.query('BEGIN');\n        const result = await callback(client);\n        await client.query('COMMIT');\n        return result;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        console.error('Transaction error:', error);\n        throw error;\n    } finally {\n        client.release();\n    }\n};\n\nexport default {\n    pool,\n    query,\n    transaction,\n    testConnection\n}; "],
      names: ["query", "testConnection", "transaction", "connectionString", "process", "env", "DATABASE_URL", "pool", "Pool", "ssl", "NODE_ENV", "rejectUnauthorized", "undefined", "client", "connect", "console", "log", "error", "release", "text", "params", "start", "Date", "now", "result", "duration", "rows", "rowCount", "callback"],
      mappings: ";;;;;;;;;;;IA2DA,OAKE;eALF;;IA9BaA,KAAK;eAALA;;IAfAC,cAAc;eAAdA;;IA6BAC,WAAW;eAAXA;;;oBA3CQ;AAErB,4DAA4D;AAC5D,MAAMC,mBAAmBC,QAAQC,GAAG,CAACC,YAAY,IAAI;AAErD,+BAA+B;AAC/B,MAAMC,OAAO,IAAIC,QAAI,CAAC;IAClBL;IACAM,KAAKL,QAAQC,GAAG,CAACK,QAAQ,KAAK,eAAe;QACzCC,oBAAoB;IACxB,IAAIC;AACR;AAGO,MAAMX,iBAAiB;IAC1B,IAAIY;IACJ,IAAI;QACAA,SAAS,MAAMN,KAAKO,OAAO;QAC3BC,QAAQC,GAAG,CAAC;QACZ,OAAO;IACX,EAAE,OAAOC,OAAO;QACZF,QAAQE,KAAK,CAAC,8BAA8BA;QAC5C,OAAO;IACX,SAAU;QACN,IAAIJ,QAAQA,OAAOK,OAAO;IAC9B;AACJ;AAGO,MAAMlB,QAAQ,OAAOmB,MAAcC;IACtC,MAAMC,QAAQC,KAAKC,GAAG;IACtB,IAAI;QACA,MAAMC,SAAS,MAAMjB,KAAKP,KAAK,CAACmB,MAAMC;QACtC,MAAMK,WAAWH,KAAKC,GAAG,KAAKF;QAC9BN,QAAQC,GAAG,CAAC,kBAAkB;YAAEG;YAAMM;YAAUC,MAAMF,OAAOG,QAAQ;QAAC;QACtE,OAAOH;IACX,EAAE,OAAOP,OAAO;QACZF,QAAQE,KAAK,CAAC,gBAAgBA;QAC9B,MAAMA;IACV;AACJ;AAGO,MAAMf,cAAc,OAAO0B;IAC9B,MAAMf,SAAS,MAAMN,KAAKO,OAAO;IACjC,IAAI;QACA,MAAMD,OAAOb,KAAK,CAAC;QACnB,MAAMwB,SAAS,MAAMI,SAASf;QAC9B,MAAMA,OAAOb,KAAK,CAAC;QACnB,OAAOwB;IACX,EAAE,OAAOP,OAAO;QACZ,MAAMJ,OAAOb,KAAK,CAAC;QACnBe,QAAQE,KAAK,CAAC,sBAAsBA;QACpC,MAAMA;IACV,SAAU;QACNJ,OAAOK,OAAO;IAClB;AACJ;MAEA,WAAe;IACXX;IACAP;IACAE;IACAD;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b56cf3fcbb34f8a6adb82544120d974e9d99ad0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_j4dv8cye5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j4dv8cye5();
cov_j4dv8cye5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_j4dv8cye5().f[0]++;
  cov_j4dv8cye5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_j4dv8cye5().s[3]++;
_export(exports, {
  default: function () {
    /* istanbul ignore next */
    cov_j4dv8cye5().f[1]++;
    cov_j4dv8cye5().s[4]++;
    return _default;
  },
  query: function () {
    /* istanbul ignore next */
    cov_j4dv8cye5().f[2]++;
    cov_j4dv8cye5().s[5]++;
    return query;
  },
  testConnection: function () {
    /* istanbul ignore next */
    cov_j4dv8cye5().f[3]++;
    cov_j4dv8cye5().s[6]++;
    return testConnection;
  },
  transaction: function () {
    /* istanbul ignore next */
    cov_j4dv8cye5().f[4]++;
    cov_j4dv8cye5().s[7]++;
    return transaction;
  }
});
const _pg =
/* istanbul ignore next */
(cov_j4dv8cye5().s[8]++, require("pg"));
// Get database URL from environment variable or use default
const connectionString =
/* istanbul ignore next */
(cov_j4dv8cye5().s[9]++,
/* istanbul ignore next */
(cov_j4dv8cye5().b[0][0]++, process.env.DATABASE_URL) ||
/* istanbul ignore next */
(cov_j4dv8cye5().b[0][1]++, "postgres://localhost:5432/mssport"));
// Create a pool of connections
const pool =
/* istanbul ignore next */
(cov_j4dv8cye5().s[10]++, new _pg.Pool({
  connectionString,
  ssl: process.env.NODE_ENV === "production" ?
  /* istanbul ignore next */
  (cov_j4dv8cye5().b[1][0]++, {
    rejectUnauthorized: false
  }) :
  /* istanbul ignore next */
  (cov_j4dv8cye5().b[1][1]++, undefined)
}));
/* istanbul ignore next */
cov_j4dv8cye5().s[11]++;
const testConnection = async () => {
  /* istanbul ignore next */
  cov_j4dv8cye5().f[5]++;
  let client;
  /* istanbul ignore next */
  cov_j4dv8cye5().s[12]++;
  try {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[13]++;
    client = await pool.connect();
    /* istanbul ignore next */
    cov_j4dv8cye5().s[14]++;
    console.log("Database connection successful");
    /* istanbul ignore next */
    cov_j4dv8cye5().s[15]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[16]++;
    console.error("Database connection error:", error);
    /* istanbul ignore next */
    cov_j4dv8cye5().s[17]++;
    return false;
  } finally {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[18]++;
    if (client) {
      /* istanbul ignore next */
      cov_j4dv8cye5().b[2][0]++;
      cov_j4dv8cye5().s[19]++;
      client.release();
    } else
    /* istanbul ignore next */
    {
      cov_j4dv8cye5().b[2][1]++;
    }
  }
};
/* istanbul ignore next */
cov_j4dv8cye5().s[20]++;
const query = async (text, params) => {
  /* istanbul ignore next */
  cov_j4dv8cye5().f[6]++;
  const start =
  /* istanbul ignore next */
  (cov_j4dv8cye5().s[21]++, Date.now());
  /* istanbul ignore next */
  cov_j4dv8cye5().s[22]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_j4dv8cye5().s[23]++, await pool.query(text, params));
    const duration =
    /* istanbul ignore next */
    (cov_j4dv8cye5().s[24]++, Date.now() - start);
    /* istanbul ignore next */
    cov_j4dv8cye5().s[25]++;
    console.log("Executed query", {
      text,
      duration,
      rows: result.rowCount
    });
    /* istanbul ignore next */
    cov_j4dv8cye5().s[26]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[27]++;
    console.error("Query error:", error);
    /* istanbul ignore next */
    cov_j4dv8cye5().s[28]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_j4dv8cye5().s[29]++;
const transaction = async callback => {
  /* istanbul ignore next */
  cov_j4dv8cye5().f[7]++;
  const client =
  /* istanbul ignore next */
  (cov_j4dv8cye5().s[30]++, await pool.connect());
  /* istanbul ignore next */
  cov_j4dv8cye5().s[31]++;
  try {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[32]++;
    await client.query("BEGIN");
    const result =
    /* istanbul ignore next */
    (cov_j4dv8cye5().s[33]++, await callback(client));
    /* istanbul ignore next */
    cov_j4dv8cye5().s[34]++;
    await client.query("COMMIT");
    /* istanbul ignore next */
    cov_j4dv8cye5().s[35]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[36]++;
    await client.query("ROLLBACK");
    /* istanbul ignore next */
    cov_j4dv8cye5().s[37]++;
    console.error("Transaction error:", error);
    /* istanbul ignore next */
    cov_j4dv8cye5().s[38]++;
    throw error;
  } finally {
    /* istanbul ignore next */
    cov_j4dv8cye5().s[39]++;
    client.release();
  }
};
const _default =
/* istanbul ignore next */
(cov_j4dv8cye5().s[40]++, {
  pool,
  query,
  transaction,
  testConnection
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,