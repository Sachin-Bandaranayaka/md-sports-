{"version":3,"names":["GET","cov_1pujughijs","f","s","POST","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","searchParams","URL","url","productId","get","categoryId","lowStock","console","log","shopId","isFiltered","isAdmin","userShopId","query","params","paramIndex","b","push","parseInt","result","_db","default","_server","NextResponse","json","success","data","rows","meta","shopFiltered","totalItems","length","error","message","Error","String","status","quantity","reorderLevel","undefined","shopAccessResult","validateShopAccess","hasAccess","createAccessDeniedResponse","shopResult","productResult","inventoryResult","inventoryItem"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport db from '@/utils/db';\n\n\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\n// GET: Fetch all inventory items with shop-based filtering\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Parse query parameters\n        const { searchParams } = new URL(request.url);\n        const productId = searchParams.get('productId');\n        const categoryId = searchParams.get('categoryId');\n        const lowStock = searchParams.get('lowStock') === 'true';\n\n        console.log('Inventory API - Shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            isAdmin: context.isAdmin,\n            userShopId: context.userShopId\n        });\n\n        // Build the query with possible filters\n        let query = `\n            SELECT \n                i.id as inventory_id,\n                i.shop_id,\n                s.name as shop_name,\n                s.location as shop_location,\n                i.product_id,\n                p.name as product_name,\n                p.sku as product_sku,\n                p.barcode as product_barcode,\n                p.price,\n                p.weightedAverageCost,\n                i.shopspecificcost as shop_specific_cost,\n                c.id as category_id,\n                c.name as category_name,\n                i.quantity,\n                i.reorder_level,\n                i.last_updated\n            FROM \n                inventory_items i\n            JOIN \n                products p ON i.product_id = p.id\n            JOIN \n                shops s ON i.shop_id = s.id\n            LEFT JOIN \n                categories c ON p.category_id = c.id\n            WHERE \n                p.is_active = true \n                AND s.is_active = true\n        `;\n\n        // Add filters based on query parameters and shop access\n        const params: any[] = [];\n        let paramIndex = 1;\n\n        // Apply shop filtering based on user permissions\n        if (context.isFiltered && context.shopId) {\n            query += ` AND i.shop_id = $${paramIndex}`;\n            params.push(context.shopId);\n            paramIndex++;\n        }\n\n        if (productId) {\n            query += ` AND i.product_id = $${paramIndex}`;\n            params.push(parseInt(productId));\n            paramIndex++;\n        }\n\n        if (categoryId) {\n            query += ` AND p.category_id = $${paramIndex}`;\n            params.push(parseInt(categoryId));\n            paramIndex++;\n        }\n\n        if (lowStock) {\n            query += ` AND i.quantity <= i.reorder_level`;\n        }\n\n        // Add sorting\n        query += ` ORDER BY s.name, p.name`;\n\n        console.log('Inventory query:', query);\n        console.log('Inventory params:', params);\n\n        // Execute the query\n        const result = await db.query(query, params);\n\n        return NextResponse.json({\n            success: true,\n            data: result.rows,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                totalItems: result.rows.length\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching inventory items:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching inventory items',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});\n\n// POST: Create or update inventory items with shop validation\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const { shopId, productId, quantity, reorderLevel } = await request.json();\n\n        // Validate required fields\n        if (!shopId || !productId || quantity === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields: shopId, productId, and quantity are required'\n            }, { status: 400 });\n        }\n\n        // Validate shop access for the target shop\n        const shopAccessResult = await ShopAccessControl.validateShopAccess(request, shopId);\n        if (!shopAccessResult.hasAccess) {\n            return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n        }\n\n        // Check if shop exists\n        const shopResult = await db.query(`\n            SELECT id FROM shops WHERE id = $1 AND is_active = true\n        `, [shopId]);\n\n        if (shopResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if product exists\n        const productResult = await db.query(`\n            SELECT id FROM products WHERE id = $1 AND is_active = true\n        `, [productId]);\n\n        if (productResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if inventory item already exists\n        const inventoryResult = await db.query(`\n            SELECT id FROM inventory_items \n            WHERE shop_id = $1 AND product_id = $2\n        `, [shopId, productId]);\n\n        let result;\n\n        if (inventoryResult.rows.length > 0) {\n            // Update existing inventory item\n            result = await db.query(`\n                UPDATE inventory_items \n                SET \n                    quantity = $1, \n                    reorder_level = $2,\n                    last_updated = CURRENT_TIMESTAMP\n                WHERE \n                    shop_id = $3 AND product_id = $4\n                RETURNING *\n            `, [quantity, reorderLevel || 0, shopId, productId]);\n        } else {\n            // Create new inventory item\n            result = await db.query(`\n                INSERT INTO inventory_items (\n                    shop_id, \n                    product_id, \n                    quantity, \n                    reorder_level\n                ) VALUES ($1, $2, $3, $4)\n                RETURNING *\n            `, [shopId, productId, quantity, reorderLevel || 0]);\n        }\n\n        // Real-time updates now handled by polling system\n        const inventoryItem = result.rows[0];\n\n        return NextResponse.json({\n            success: true,\n            message: inventoryResult.rows.length > 0\n                ? 'Inventory item updated successfully'\n                : 'Inventory item created successfully',\n            data: inventoryItem\n        });\n    } catch (error) {\n        console.error('Error creating/updating inventory item:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating/updating inventory item',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});"],"mappingsaA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EAuGAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;kCA9G6B;;;wEAC3B;;;kCAGmB;;;;;;;;;;;;;;;AAG3B,MAAMJ,GAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAME,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAAR,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7E,IAAI;IACA;IACA,MAAM;MAAEO;IAAY,CAAE;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAG,IAAIQ,GAAA,CAAIH,OAAA,CAAQI,GAAG;IAC5C,MAAMC,SAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAYO,YAAA,CAAaI,GAAG,CAAC;IACnC,MAAMC,UAAA;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAaO,YAAA,CAAaI,GAAG,CAAC;IACpC,MAAME,QAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAWO,YAAA,CAAaI,GAAG,CAAC,gBAAgB;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAElDc,OAAA,CAAQC,GAAG,CAAC,iCAAiC;MACzCC,MAAA,EAAQV,OAAA,CAAQU,MAAM;MACtBC,UAAA,EAAYX,OAAA,CAAQW,UAAU;MAC9BC,OAAA,EAASZ,OAAA,CAAQY,OAAO;MACxBC,UAAA,EAAYb,OAAA,CAAQa;IACxB;IAEA;IACA,IAAIC,KAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6BX;IAED;IACA,MAAMqB,MAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAgB,EAAE;IACxB,IAAIsB,UAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAa;IAEjB;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAyB,CAAA,UAAAjB,OAAA,CAAQW,UAAU;IAAA;IAAA,CAAAnB,cAAA,GAAAyB,CAAA,UAAIjB,OAAA,CAAQU,MAAM,GAAE;MAAA;MAAAlB,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACtCoB,KAAA,IAAS,qBAAqBE,UAAA,EAAY;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC1CqB,MAAA,CAAOG,IAAI,CAAClB,OAAA,CAAQU,MAAM;MAAA;MAAAlB,cAAA,GAAAE,CAAA;MAC1BsB,UAAA;IACJ;IAAA;IAAA;MAAAxB,cAAA,GAAAyB,CAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAEA,IAAIU,SAAA,EAAW;MAAA;MAAAZ,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACXoB,KAAA,IAAS,wBAAwBE,UAAA,EAAY;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC7CqB,MAAA,CAAOG,IAAI,CAACC,QAAA,CAASf,SAAA;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACrBsB,UAAA;IACJ;IAAA;IAAA;MAAAxB,cAAA,GAAAyB,CAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAEA,IAAIY,UAAA,EAAY;MAAA;MAAAd,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACZoB,KAAA,IAAS,yBAAyBE,UAAA,EAAY;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC9CqB,MAAA,CAAOG,IAAI,CAACC,QAAA,CAASb,UAAA;MAAA;MAAAd,cAAA,GAAAE,CAAA;MACrBsB,UAAA;IACJ;IAAA;IAAA;MAAAxB,cAAA,GAAAyB,CAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAEA,IAAIa,QAAA,EAAU;MAAA;MAAAf,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACVoB,KAAA,IAAS,oCAAoC;IACjD;IAAA;IAAA;MAAAtB,cAAA,GAAAyB,CAAA;IAAA;IAEA;IAAAzB,cAAA,GAAAE,CAAA;IACAoB,KAAA,IAAS,0BAA0B;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAEnCc,OAAA,CAAQC,GAAG,CAAC,oBAAoBK,KAAA;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAChCc,OAAA,CAAQC,GAAG,CAAC,qBAAqBM,MAAA;IAEjC;IACA,MAAMK,MAAA;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAS,MAAM2B,GAAA,CAAAC,OAAE,CAACR,KAAK,CAACA,KAAA,EAAOC,MAAA;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IAErC,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,IAAA,EAAMP,MAAA,CAAOQ,IAAI;MACjBC,IAAA,EAAM;QACFC,YAAA,EAAc9B,OAAA,CAAQW,UAAU;QAChCD,MAAA,EAAQV,OAAA,CAAQU,MAAM;QACtBqB,UAAA,EAAYX,MAAA,CAAOQ,IAAI,CAACI;MAC5B;IACJ;EACJ,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IACZc,OAAA,CAAQyB,KAAK,CAAC,mCAAmCA,KAAA;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IACjD,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTQ,OAAA,EAAS;MACTD,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAyB,CAAA,UAAQgB,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAA1C,cAAA,GAAAyB,CAAA,UAAGmB,MAAA,CAAOH,KAAA;IAC3D,GAAG;MAAEI,MAAA,EAAQ;IAAI;EACrB;AACJ;AAGO,MAAM1C,IAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,QAAOE,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAAR,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC9E,IAAI;IACA,MAAM;MAAEgB,MAAM;MAAEN,SAAS;MAAEkC,QAAQ;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAG,MAAMK,OAAA,CAAQ0B,IAAI;IAExE;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAyB,CAAA,WAACP,MAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAyB,CAAA,UAAU,CAACb,SAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAyB,CAAA,UAAaqB,QAAA,KAAaE,SAAA,GAAW;MAAA;MAAAhD,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACjD,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrBC,OAAA,EAAS;QACTQ,OAAA,EAAS;MACb,GAAG;QAAEG,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA7C,cAAA,GAAAyB,CAAA;IAAA;IAEA;IACA,MAAMwB,gBAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAmB,MAAME,eAAA,CAAAC,iBAAiB,CAAC6C,kBAAkB,CAAC3C,OAAA,EAASW,MAAA;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAC7E,IAAI,CAAC+C,gBAAA,CAAiBE,SAAS,EAAE;MAAA;MAAAnD,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC7B,OAAOE,eAAA,CAAAC,iBAAiB,CAAC+C,0BAA0B,CAACH,gBAAA,CAAiBR,KAAK;IAC9E;IAAA;IAAA;MAAAzC,cAAA,GAAAyB,CAAA;IAAA;IAEA;IACA,MAAM4B,UAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAa,MAAM2B,GAAA,CAAAC,OAAE,CAACR,KAAK,CAAC;;SAEjC,EAAE,CAACJ,MAAA,CAAO;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAEX,IAAImD,UAAA,CAAWjB,IAAI,CAACI,MAAM,KAAK,GAAG;MAAA;MAAAxC,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC9B,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrBC,OAAA,EAAS;QACTQ,OAAA,EAAS,gBAAgBxB,MAAA;MAC7B,GAAG;QAAE2B,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA7C,cAAA,GAAAyB,CAAA;IAAA;IAEA;IACA,MAAM6B,aAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAgB,MAAM2B,GAAA,CAAAC,OAAE,CAACR,KAAK,CAAC;;SAEpC,EAAE,CAACV,SAAA,CAAU;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEd,IAAIoD,aAAA,CAAclB,IAAI,CAACI,MAAM,KAAK,GAAG;MAAA;MAAAxC,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACjC,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrBC,OAAA,EAAS;QACTQ,OAAA,EAAS,mBAAmB9B,SAAA;MAChC,GAAG;QAAEiC,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA7C,cAAA,GAAAyB,CAAA;IAAA;IAEA;IACA,MAAM8B,eAAA;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAkB,MAAM2B,GAAA,CAAAC,OAAE,CAACR,KAAK,CAAC;;;SAGtC,EAAE,CAACJ,MAAA,EAAQN,SAAA,CAAU;IAEtB,IAAIgB,MAAA;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IAEJ,IAAIqD,eAAA,CAAgBnB,IAAI,CAACI,MAAM,GAAG,GAAG;MAAA;MAAAxC,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACjC;MACA0B,MAAA,GAAS,MAAMC,GAAA,CAAAC,OAAE,CAACR,KAAK,CAAC;;;;;;;;;aASvB,EAAE,CAACwB,QAAA;MAAU;MAAA,CAAA9C,cAAA,GAAAyB,CAAA,WAAAsB,YAAA;MAAA;MAAA,CAAA/C,cAAA,GAAAyB,CAAA,WAAgB,IAAGP,MAAA,EAAQN,SAAA,CAAU;IACvD,OAAO;MAAA;MAAAZ,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACH;MACA0B,MAAA,GAAS,MAAMC,GAAA,CAAAC,OAAE,CAACR,KAAK,CAAC;;;;;;;;aAQvB,EAAE,CAACJ,MAAA,EAAQN,SAAA,EAAWkC,QAAA;MAAU;MAAA,CAAA9C,cAAA,GAAAyB,CAAA,WAAAsB,YAAA;MAAA;MAAA,CAAA/C,cAAA,GAAAyB,CAAA,WAAgB,GAAE;IACvD;IAEA;IACA,MAAM+B,aAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAgB0B,MAAA,CAAOQ,IAAI,CAAC,EAAE;IAAA;IAAApC,cAAA,GAAAE,CAAA;IAEpC,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTQ,OAAA,EAASa,eAAA,CAAgBnB,IAAI,CAACI,MAAM,GAAG;MAAA;MAAA,CAAAxC,cAAA,GAAAyB,CAAA,WACjC;MAAA;MAAA,CAAAzB,cAAA,GAAAyB,CAAA,WACA;MACNU,IAAA,EAAMqB;IACV;EACJ,EAAE,OAAOf,KAAA,EAAO;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IACZc,OAAA,CAAQyB,KAAK,CAAC,2CAA2CA,KAAA;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IACzD,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTQ,OAAA,EAAS;MACTD,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAyB,CAAA,WAAQgB,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAA1C,cAAA,GAAAyB,CAAA,WAAGmB,MAAA,CAAOH,KAAA;IAC3D,GAAG;MAAEI,MAAA,EAAQ;IAAI;EACrB;AACJ","ignoreList":[]}