{"version":3,"names":["default","cov_1a4e5qp1b4","f","s","_default","usePerformanceMonitor","metrics","setMetrics","_react","useState","measurements","setMeasurements","Map","apiCalls","setApiCalls","startMeasurement","useCallback","name","startTime","performance","now","prev","set","endMeasurement","endTime","get","b","duration","newMap","delete","trackApiCall","url","responseTime","fromCache","time","cached","allCalls","avgResponseTime","reduce","sum","call","length","cacheHitRate","filter","apiResponseTime","getPerformanceGrade","lcp","fcp","cls","pageLoadTime","score","totalChecks","undefined","avgScore","useEffect","updateNavigationMetrics","window","navigation","getEntriesByType","ttfb","responseStart","requestStart","domContentLoaded","domContentLoadedEventEnd","loadComplete","loadEventEnd","updateResourceMetrics","resources","totalSize","resource","transferSize","totalResources","totalResourceSize","observeWebVitals","lcpObserver","PerformanceObserver","list","entries","getEntries","lastEntry","observe","entryTypes","fcpObserver","fcpEntry","find","entry","clsObserver","clsValue","hadRecentInput","value","fidObserver","firstInput","fid","processingStart","error","console","warn","document","readyState","addEventListener","setTimeout"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/usePerformanceMonitor.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\n\ninterface PerformanceMetrics {\n  // Web Vitals\n  lcp?: number; // Largest Contentful Paint\n  fcp?: number; // First Contentful Paint\n  cls?: number; // Cumulative Layout Shift\n  fid?: number; // First Input Delay\n  ttfb?: number; // Time to First Byte\n  \n  // Custom metrics\n  pageLoadTime?: number;\n  apiResponseTime?: number;\n  cacheHitRate?: number;\n  \n  // Navigation timing\n  domContentLoaded?: number;\n  loadComplete?: number;\n  \n  // Resource timing\n  totalResources?: number;\n  totalResourceSize?: number;\n}\n\ninterface PerformanceHookResult {\n  metrics: PerformanceMetrics;\n  startMeasurement: (name: string) => void;\n  endMeasurement: (name: string) => number;\n  trackApiCall: (url: string, responseTime: number, fromCache?: boolean) => void;\n  getPerformanceGrade: () => 'excellent' | 'good' | 'needs-improvement' | 'poor';\n}\n\nexport const usePerformanceMonitor = (): PerformanceHookResult => {\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({});\n  const [measurements, setMeasurements] = useState<Map<string, number>>(new Map());\n  const [apiCalls, setApiCalls] = useState<Array<{ url: string; time: number; cached: boolean }>>([]);\n\n  // Start a performance measurement\n  const startMeasurement = useCallback((name: string) => {\n    const startTime = performance.now();\n    setMeasurements(prev => new Map(prev).set(name, startTime));\n  }, []);\n\n  // End a performance measurement and return duration\n  const endMeasurement = useCallback((name: string): number => {\n    const endTime = performance.now();\n    const startTime = measurements.get(name);\n    \n    if (startTime) {\n      const duration = endTime - startTime;\n      setMeasurements(prev => {\n        const newMap = new Map(prev);\n        newMap.delete(name);\n        return newMap;\n      });\n      return duration;\n    }\n    \n    return 0;\n  }, [measurements]);\n\n  // Track API call performance\n  const trackApiCall = useCallback((url: string, responseTime: number, fromCache = false) => {\n    setApiCalls(prev => [...prev, { url, time: responseTime, cached: fromCache }]);\n    \n    // Update average API response time\n    setMetrics(prev => {\n      const allCalls = [...apiCalls, { url, time: responseTime, cached: fromCache }];\n      const avgResponseTime = allCalls.reduce((sum, call) => sum + call.time, 0) / allCalls.length;\n      const cacheHitRate = (allCalls.filter(call => call.cached).length / allCalls.length) * 100;\n      \n      return {\n        ...prev,\n        apiResponseTime: avgResponseTime,\n        cacheHitRate\n      };\n    });\n  }, [apiCalls]);\n\n  // Get performance grade based on metrics\n  const getPerformanceGrade = useCallback((): 'excellent' | 'good' | 'needs-improvement' | 'poor' => {\n    const { lcp, fcp, cls, pageLoadTime } = metrics;\n    \n    let score = 0;\n    let totalChecks = 0;\n    \n    // LCP scoring (2.5s excellent, 4s good)\n    if (lcp !== undefined) {\n      totalChecks++;\n      if (lcp <= 2500) score += 4;\n      else if (lcp <= 4000) score += 3;\n      else if (lcp <= 6000) score += 2;\n      else score += 1;\n    }\n    \n    // FCP scoring (1.8s excellent, 3s good)\n    if (fcp !== undefined) {\n      totalChecks++;\n      if (fcp <= 1800) score += 4;\n      else if (fcp <= 3000) score += 3;\n      else if (fcp <= 4500) score += 2;\n      else score += 1;\n    }\n    \n    // CLS scoring (0.1 excellent, 0.25 good)\n    if (cls !== undefined) {\n      totalChecks++;\n      if (cls <= 0.1) score += 4;\n      else if (cls <= 0.25) score += 3;\n      else if (cls <= 0.4) score += 2;\n      else score += 1;\n    }\n    \n    // Page load time scoring (1s excellent, 3s good)\n    if (pageLoadTime !== undefined) {\n      totalChecks++;\n      if (pageLoadTime <= 1000) score += 4;\n      else if (pageLoadTime <= 3000) score += 3;\n      else if (pageLoadTime <= 5000) score += 2;\n      else score += 1;\n    }\n    \n    if (totalChecks === 0) return 'poor';\n    \n    const avgScore = score / totalChecks;\n    \n    if (avgScore >= 3.5) return 'excellent';\n    if (avgScore >= 2.5) return 'good';\n    if (avgScore >= 1.5) return 'needs-improvement';\n    return 'poor';\n  }, [metrics]);\n\n  // Collect Web Vitals and navigation timing\n  useEffect(() => {\n    // Navigation Timing API\n    const updateNavigationMetrics = () => {\n      if (typeof window !== 'undefined' && window.performance) {\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n        \n        if (navigation) {\n          setMetrics(prev => ({\n            ...prev,\n            ttfb: navigation.responseStart - navigation.requestStart,\n            domContentLoaded: navigation.domContentLoadedEventEnd - navigation.startTime,\n            loadComplete: navigation.loadEventEnd - navigation.startTime,\n            pageLoadTime: navigation.loadEventEnd - navigation.startTime\n          }));\n        }\n      }\n    };\n\n    // Resource Timing API\n    const updateResourceMetrics = () => {\n      if (typeof window !== 'undefined' && window.performance) {\n        const resources = performance.getEntriesByType('resource');\n        const totalSize = resources.reduce((sum, resource: any) => {\n          return sum + (resource.transferSize || 0);\n        }, 0);\n        \n        setMetrics(prev => ({\n          ...prev,\n          totalResources: resources.length,\n          totalResourceSize: totalSize\n        }));\n      }\n    };\n\n    // Web Vitals (simplified implementation)\n    const observeWebVitals = () => {\n      if (typeof window !== 'undefined') {\n        // Largest Contentful Paint\n        if ('PerformanceObserver' in window) {\n          try {\n            const lcpObserver = new PerformanceObserver((list) => {\n              const entries = list.getEntries();\n              const lastEntry = entries[entries.length - 1];\n              setMetrics(prev => ({ ...prev, lcp: lastEntry.startTime }));\n            });\n            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n\n            // First Contentful Paint\n            const fcpObserver = new PerformanceObserver((list) => {\n              const entries = list.getEntries();\n              const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n              if (fcpEntry) {\n                setMetrics(prev => ({ ...prev, fcp: fcpEntry.startTime }));\n              }\n            });\n            fcpObserver.observe({ entryTypes: ['paint'] });\n\n            // Cumulative Layout Shift\n            const clsObserver = new PerformanceObserver((list) => {\n              let clsValue = 0;\n              for (const entry of list.getEntries()) {\n                if (!(entry as any).hadRecentInput) {\n                  clsValue += (entry as any).value;\n                }\n              }\n              setMetrics(prev => ({ ...prev, cls: clsValue }));\n            });\n            clsObserver.observe({ entryTypes: ['layout-shift'] });\n\n            // First Input Delay\n            const fidObserver = new PerformanceObserver((list) => {\n              const entries = list.getEntries();\n              const firstInput = entries[0];\n              if (firstInput) {\n                const fid = (firstInput as any).processingStart - firstInput.startTime;\n                setMetrics(prev => ({ ...prev, fid }));\n              }\n            });\n            fidObserver.observe({ entryTypes: ['first-input'] });\n          } catch (error) {\n            console.warn('PerformanceObserver not fully supported:', error);\n          }\n        }\n      }\n    };\n\n    // Wait for page load to collect metrics\n    if (document.readyState === 'complete') {\n      updateNavigationMetrics();\n      updateResourceMetrics();\n    } else {\n      window.addEventListener('load', () => {\n        setTimeout(() => {\n          updateNavigationMetrics();\n          updateResourceMetrics();\n        }, 0);\n      });\n    }\n\n    observeWebVitals();\n  }, []);\n\n  return {\n    metrics,\n    startMeasurement,\n    endMeasurement,\n    trackApiCall,\n    getPerformanceGrade\n  };\n};\n\nexport default usePerformanceMonitor; "],"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","ignoreList":[]}