{"version":3,"names":["GET","cov_2jach28gt1","f","s","POST","roles","_prisma","default","role","findMany","include","permissions","orderBy","name","_server","NextResponse","json","success","message","data","error","console","Error","b","String","status","request","description","existingRole","findUnique","where","create","length","connect","map","id"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/users/roles/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n/**\n * GET: Fetch all roles\n */\nexport async function GET() {\n    try {\n        const roles = await prisma.role.findMany({\n            include: {\n                permissions: true\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Roles retrieved successfully',\n            data: roles\n        });\n    } catch (error) {\n        console.error('Error fetching roles:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to retrieve roles',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n/**\n * POST: Create a new role\n */\nexport async function POST(request: Request) {\n    try {\n        const { name, description, permissions } = await request.json();\n\n        // Validate required fields\n        if (!name) {\n            return NextResponse.json({\n                success: false,\n                message: 'Role name is required'\n            }, { status: 400 });\n        }\n\n        // Check if role already exists\n        const existingRole = await prisma.role.findUnique({\n            where: { name }\n        });\n\n        if (existingRole) {\n            return NextResponse.json({\n                success: false,\n                message: 'Role with this name already exists'\n            }, { status: 409 });\n        }\n\n        // Create the role with permissions if provided\n        const role = await prisma.role.create({\n            data: {\n                name,\n                description,\n                ...(permissions && permissions.length > 0 && {\n                    permissions: {\n                        connect: permissions.map((id: number) => ({ id }))\n                    }\n                })\n            },\n            include: {\n                permissions: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Role created successfully',\n            data: role\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating role:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating role',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],"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","ignoreList":[]}