5cc296ad76044f6d5e8bb0f0a27ee28f
"use client";
"use strict";

/* istanbul ignore next */
function cov_2nnkk9tup4() {
  var path = "/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx";
  var hash = "0f1a37c664f67def2f55ffd14345851fe315d6ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "8": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "9": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "10": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 46
        }
      },
      "11": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 56
        }
      },
      "12": {
        start: {
          line: 28,
          column: 13
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "14": {
        start: {
          line: 35,
          column: 34
        },
        end: {
          line: 35,
          column: 70
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "16": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 247,
          column: 1
        }
      },
      "17": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 44,
          column: 54
        }
      },
      "18": {
        start: {
          line: 45,
          column: 42
        },
        end: {
          line: 45,
          column: 68
        }
      },
      "19": {
        start: {
          line: 46,
          column: 38
        },
        end: {
          line: 46,
          column: 64
        }
      },
      "20": {
        start: {
          line: 47,
          column: 19
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "21": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 53,
          column: 7
        }
      },
      "22": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 52
        }
      },
      "23": {
        start: {
          line: 50,
          column: 39
        },
        end: {
          line: 50,
          column: 50
        }
      },
      "24": {
        start: {
          line: 55,
          column: 19
        },
        end: {
          line: 71,
          column: 6
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 27
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 22
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 29
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "29": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 47
        }
      },
      "30": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 75
        }
      },
      "31": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 60
        }
      },
      "32": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 30
        }
      },
      "33": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "34": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 142,
          column: 7
        }
      },
      "35": {
        start: {
          line: 74,
          column: 35
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "36": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 44
        }
      },
      "37": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "38": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 72
        }
      },
      "39": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 52
        }
      },
      "40": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "41": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "42": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 26
        }
      },
      "43": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 41
        }
      },
      "44": {
        start: {
          line: 86,
          column: 36
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "45": {
        start: {
          line: 86,
          column: 78
        },
        end: {
          line: 86,
          column: 86
        }
      },
      "46": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 87,
          column: 48
        }
      },
      "47": {
        start: {
          line: 89,
          column: 38
        },
        end: {
          line: 89,
          column: 89
        }
      },
      "48": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "49": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "50": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "51": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 115
        }
      },
      "52": {
        start: {
          line: 96,
          column: 44
        },
        end: {
          line: 99,
          column: 22
        }
      },
      "53": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 111,
          column: 21
        }
      },
      "54": {
        start: {
          line: 101,
          column: 47
        },
        end: {
          line: 101,
          column: 79
        }
      },
      "55": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 59
        }
      },
      "56": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "57": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 127
        }
      },
      "58": {
        start: {
          line: 105,
          column: 24
        },
        end: {
          line: 105,
          column: 91
        }
      },
      "59": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "60": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 111
        }
      },
      "61": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 109,
          column: 39
        }
      },
      "62": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 53
        }
      },
      "63": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 92
        }
      },
      "64": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "65": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 96
        }
      },
      "66": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 118,
          column: 53
        }
      },
      "67": {
        start: {
          line: 119,
          column: 27
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "68": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 144
        }
      },
      "69": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 126,
          column: 25
        }
      },
      "70": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 43
        }
      },
      "71": {
        start: {
          line: 125,
          column: 28
        },
        end: {
          line: 125,
          column: 93
        }
      },
      "72": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 39
        }
      },
      "73": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 56
        }
      },
      "74": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 41
        }
      },
      "75": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 138,
          column: 10
        }
      },
      "76": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 63
        }
      },
      "77": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 65
        }
      },
      "78": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "79": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "80": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 31
        }
      },
      "81": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "82": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 78
        }
      },
      "83": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "84": {
        start: {
          line: 152,
          column: 37
        },
        end: {
          line: 154,
          column: 22
        }
      },
      "85": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 168,
          column: 21
        }
      },
      "86": {
        start: {
          line: 156,
          column: 41
        },
        end: {
          line: 156,
          column: 59
        }
      },
      "87": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 162,
          column: 27
        }
      },
      "88": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 42
        }
      },
      "89": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 164,
          column: 66
        }
      },
      "90": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 82
        }
      },
      "91": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 62
        }
      },
      "92": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 180,
          column: 21
        }
      },
      "93": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 81
        }
      },
      "94": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 180,
          column: 21
        }
      },
      "95": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 83
        }
      },
      "96": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 38
        }
      },
      "97": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 45
        }
      },
      "98": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 84
        }
      },
      "99": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 74
        }
      },
      "100": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 36
        }
      },
      "101": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 23
        }
      },
      "102": {
        start: {
          line: 190,
          column: 18
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "103": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 27
        }
      },
      "104": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "105": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "106": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "107": {
        start: {
          line: 198,
          column: 72
        },
        end: {
          line: 198,
          column: 85
        }
      },
      "108": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 34
        }
      },
      "109": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 47
        }
      },
      "110": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 109
        }
      },
      "111": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 36
        }
      },
      "112": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 28
        }
      },
      "113": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 91
        }
      },
      "114": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 28
        }
      },
      "115": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 22
        }
      },
      "116": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 29
        }
      },
      "117": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 21
        }
      },
      "118": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "119": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 53
        }
      },
      "120": {
        start: {
          line: 216,
          column: 40
        },
        end: {
          line: 216,
          column: 53
        }
      },
      "121": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 77
        }
      },
      "122": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "123": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 50
        }
      },
      "124": {
        start: {
          line: 221,
          column: 40
        },
        end: {
          line: 221,
          column: 50
        }
      },
      "125": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 10
        }
      },
      "126": {
        start: {
          line: 227,
          column: 22
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "127": {
        start: {
          line: 228,
          column: 22
        },
        end: {
          line: 228,
          column: 44
        }
      },
      "128": {
        start: {
          line: 229,
          column: 22
        },
        end: {
          line: 229,
          column: 47
        }
      },
      "129": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 71
        }
      },
      "130": {
        start: {
          line: 230,
          column: 32
        },
        end: {
          line: 230,
          column: 71
        }
      },
      "131": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 25
        }
      },
      "132": {
        start: {
          line: 233,
          column: 18
        },
        end: {
          line: 242,
          column: 5
        }
      },
      "133": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 246,
          column: 7
        }
      },
      "134": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 254,
          column: 1
        }
      },
      "135": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 55
        }
      },
      "136": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 252,
          column: 5
        }
      },
      "137": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 71
        }
      },
      "138": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 253,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 10
          }
        },
        loc: {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 13
          },
          end: {
            line: 19,
            column: 14
          }
        },
        loc: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 43,
            column: 22
          }
        },
        loc: {
          start: {
            line: 43,
            column: 37
          },
          end: {
            line: 247,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 26
          },
          end: {
            line: 49,
            column: 27
          }
        },
        loc: {
          start: {
            line: 49,
            column: 30
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 49
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 50,
            column: 35
          },
          end: {
            line: 50,
            column: 36
          }
        },
        loc: {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 50,
            column: 50
          }
        },
        line: 50
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 55,
            column: 43
          },
          end: {
            line: 55,
            column: 44
          }
        },
        loc: {
          start: {
            line: 55,
            column: 53
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 55
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 73,
            column: 26
          },
          end: {
            line: 73,
            column: 27
          }
        },
        loc: {
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 73
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 74,
            column: 64
          },
          end: {
            line: 74,
            column: 65
          }
        },
        loc: {
          start: {
            line: 74,
            column: 74
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 74
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 85,
            column: 11
          },
          end: {
            line: 85,
            column: 12
          }
        },
        loc: {
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 85,
            column: 41
          }
        },
        line: 85
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 86,
            column: 66
          },
          end: {
            line: 86,
            column: 67
          }
        },
        loc: {
          start: {
            line: 86,
            column: 78
          },
          end: {
            line: 86,
            column: 86
          }
        },
        line: 86
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 86,
            column: 88
          },
          end: {
            line: 86,
            column: 89
          }
        },
        loc: {
          start: {
            line: 86,
            column: 103
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 86
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 135,
            column: 16
          }
        },
        loc: {
          start: {
            line: 135,
            column: 19
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 135
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 143,
            column: 26
          },
          end: {
            line: 143,
            column: 27
          }
        },
        loc: {
          start: {
            line: 143,
            column: 30
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 143
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 30
          }
        },
        loc: {
          start: {
            line: 144,
            column: 39
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 144
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 190,
            column: 18
          },
          end: {
            line: 190,
            column: 19
          }
        },
        loc: {
          start: {
            line: 190,
            column: 43
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 190
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 215,
            column: 26
          },
          end: {
            line: 215,
            column: 27
          }
        },
        loc: {
          start: {
            line: 215,
            column: 40
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 215
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 220,
            column: 31
          },
          end: {
            line: 220,
            column: 32
          }
        },
        loc: {
          start: {
            line: 220,
            column: 35
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 220
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 227,
            column: 22
          },
          end: {
            line: 227,
            column: 23
          }
        },
        loc: {
          start: {
            line: 227,
            column: 30
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 227
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        },
        loc: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 248
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 14
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 25
          }
        }, {
          start: {
            line: 81,
            column: 29
          },
          end: {
            line: 81,
            column: 52
          }
        }, {
          start: {
            line: 81,
            column: 56
          },
          end: {
            line: 81,
            column: 80
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 46
          }
        }, {
          start: {
            line: 90,
            column: 50
          },
          end: {
            line: 90,
            column: 73
          }
        }, {
          start: {
            line: 90,
            column: 77
          },
          end: {
            line: 90,
            column: 95
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 111,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 111,
            column: 21
          }
        }, {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 111,
            column: 21
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        }, {
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 129,
            column: 21
          }
        }],
        line: 115
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 24
          },
          end: {
            line: 115,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 24
          },
          end: {
            line: 115,
            column: 60
          }
        }, {
          start: {
            line: 115,
            column: 64
          },
          end: {
            line: 115,
            column: 101
          }
        }, {
          start: {
            line: 115,
            column: 105
          },
          end: {
            line: 115,
            column: 127
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 129,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 129,
            column: 21
          }
        }, {
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 129,
            column: 21
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 126,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 126,
            column: 25
          }
        }, {
          start: {
            line: 124,
            column: 31
          },
          end: {
            line: 126,
            column: 25
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 64
          }
        }, {
          start: {
            line: 122,
            column: 68
          },
          end: {
            line: 122,
            column: 104
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 20
          },
          end: {
            line: 168,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 20
          },
          end: {
            line: 168,
            column: 21
          }
        }, {
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 168,
            column: 21
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 69
          }
        }, {
          start: {
            line: 161,
            column: 73
          },
          end: {
            line: 161,
            column: 74
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 180,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 180,
            column: 21
          }
        }, {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 180,
            column: 21
          }
        }],
        line: 171
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 171,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 171,
            column: 53
          }
        }, {
          start: {
            line: 171,
            column: 57
          },
          end: {
            line: 171,
            column: 87
          }
        }, {
          start: {
            line: 171,
            column: 91
          },
          end: {
            line: 171,
            column: 106
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 180,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 180,
            column: 21
          }
        }, {
          start: {
            line: 178,
            column: 27
          },
          end: {
            line: 180,
            column: 21
          }
        }],
        line: 173
      },
      "18": {
        loc: {
          start: {
            line: 173,
            column: 31
          },
          end: {
            line: 173,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 31
          },
          end: {
            line: 173,
            column: 61
          }
        }, {
          start: {
            line: 173,
            column: 65
          },
          end: {
            line: 173,
            column: 95
          }
        }],
        line: 173
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 207,
            column: 43
          },
          end: {
            line: 207,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 43
          },
          end: {
            line: 207,
            column: 72
          }
        }, {
          start: {
            line: 207,
            column: 76
          },
          end: {
            line: 207,
            column: 89
          }
        }],
        line: 207
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 216,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 216,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 17
          }
        }, {
          start: {
            line: 216,
            column: 21
          },
          end: {
            line: 216,
            column: 38
          }
        }],
        line: 216
      },
      "23": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 221,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 221,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "24": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 221,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: 221,
            column: 21
          },
          end: {
            line: 221,
            column: 38
          }
        }],
        line: 221
      },
      "25": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 230,
            column: 71
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 230,
            column: 71
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "26": {
        loc: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],
      sourcesContent: ["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\nimport { hasPermission as checkPermission } from '@/lib/utils/permissions';\nimport { AuthenticatedUser as User } from '@/types/auth';\nimport { setTokenProvider } from '@/utils/api';\n\n// Types\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Set up the token provider for the API utility\n    useEffect(() => {\n        setTokenProvider(() => accessToken);\n    }, [accessToken]);\n\n    // Define logout function first to avoid hoisting issues\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken;\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                // Avoid infinite loop: do NOT attempt to refresh if the failed request *is* the refresh endpoint itself\n                const isRefreshEndpoint = originalRequest?.url?.includes('/api/auth/refresh');\n\n                if ((error.response?.status === 401) && !originalRequest._retry && !isRefreshEndpoint) { // Only retry on 401 for token refresh and not already retried, and skip if refresh itself failed\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        // Use api instance to ensure CSRF token is included\n                        const refreshResponse = await api.post('/api/auth/refresh', {}, {\n                            withCredentials: true,\n                            timeout: 10000 // 10 second timeout for refresh\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        \n                        // Be more lenient with network errors during refresh\n                        if (refreshError.code === 'ECONNABORTED' || refreshError.code === 'NETWORK_ERROR' || !refreshError.response) {\n                            console.log('Network error during token refresh, not logging out user');\n                            // Don't logout for network issues - let the user try again\n                            return Promise.reject(error); // Reject with original error, but don't logout\n                        } else if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                            // Only logout for actual authentication failures (401, 403)\n                            if (refreshError.response.status === 401 || refreshError.response.status === 403) {\n                                await logout();\n                            } else {\n                                console.log('Server error during refresh, not logging out user');\n                            }\n                        } else {\n                            await logout(); // Logout for other unexpected errors\n                        }\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken, logout]); // Added accessToken and logout to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                // Don't use localStorage for authentication\n                // Instead, try to validate using the cookie-based refresh token\n                console.log('Validating authentication via refresh token...');\n                \n                try {\n                    // Try to refresh the token using the httpOnly refresh token cookie\n                    const response = await api.post('/api/auth/refresh', {}, {\n                        timeout: 10000, // 10 second timeout\n                    });\n                    \n                    if (response.data.success) {\n                        const userData = response.data.user;\n                        console.log('Auth validation - User data received:', {\n                            id: userData.id,\n                            username: userData.username,\n                            roleName: userData.roleName,\n                            permissions: userData.permissions?.length || 0\n                        });\n                        \n                        setUser(userData);\n                        setAccessToken(response.data.accessToken);\n                        console.log('Authentication validated via refresh token');\n                    } else {\n                        console.log('No valid session found');\n                    }\n                } catch (error: any) {\n                    // Network error during validation\n                    if (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR' || !error.response) {\n                        console.log('Network error during validation, skipping');\n                    } else if (error.response?.status === 401 || error.response?.status === 400) {\n                        console.log('No valid refresh token, user needs to login');\n                        // Clear any cached user data\n                        setUser(null);\n                        setAccessToken(null);\n                    } else {\n                        console.error('Unexpected error during validation:', error);\n                    }\n                }\n            } catch (error) {\n                console.error('Unexpected error in validateAuth:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, []); // Empty dependency array as no dependencies are used in this useEffect\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        return false;\n    };\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return checkPermission(user.permissions, permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    const value: AuthContextType = {\n        user,\n        accessToken,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        logout,\n        hasPermission,\n        getUserPermissions\n    };\n\n    return (\n        <AuthContext.Provider\n            value={value}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],
      names: ["AuthProvider", "api", "useAuth", "AuthContext", "createContext", "undefined", "axios", "create", "baseURL", "headers", "children", "user", "setUser", "useState", "accessToken", "setAccessToken", "isLoading", "setIsLoading", "router", "useRouter", "useEffect", "setTokenProvider", "logout", "useCallback", "post", "console", "log", "error", "push", "requestInterceptor", "interceptors", "request", "use", "config", "currentToken", "Authorization", "csrfToken", "getCookie", "method", "Promise", "reject", "responseInterceptor", "response", "originalRequest", "isRefreshEndpoint", "url", "includes", "status", "_retry", "refreshResponse", "withCredentials", "timeout", "data", "success", "newAccessToken", "substring", "message", "refreshError", "code", "eject", "validateAuth", "userData", "id", "username", "roleName", "permissions", "length", "login", "email", "password", "hasPermission", "permission", "checkPermission", "getUserPermissions", "name", "value", "document", "cookie", "parts", "split", "pop", "shift", "isAuthenticated", "Provider", "context", "useContext", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0f1a37c664f67def2f55ffd14345851fe315d6ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nnkk9tup4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nnkk9tup4();
cov_2nnkk9tup4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[0]++;
  cov_2nnkk9tup4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2nnkk9tup4().s[3]++;
_export(exports, {
  AuthProvider: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[1]++;
    cov_2nnkk9tup4().s[4]++;
    return AuthProvider;
  },
  api: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[2]++;
    cov_2nnkk9tup4().s[5]++;
    return api;
  },
  useAuth: function () {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[3]++;
    cov_2nnkk9tup4().s[6]++;
    return useAuth;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[7]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[8]++, require("react"));
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_2nnkk9tup4().s[9]++, _interop_require_default(require("axios")));
const _navigation =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[10]++, require("next/navigation"));
const _permissions =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[11]++, require("../lib/utils/permissions"));
const _api =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[12]++, require("../utils/api"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[4]++;
  cov_2nnkk9tup4().s[13]++;
  return /* istanbul ignore next */(cov_2nnkk9tup4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2nnkk9tup4().b[0][1]++, {
    default: obj
  });
}
// Create context
const AuthContext =
/* istanbul ignore next */
(/*#__PURE__*/cov_2nnkk9tup4().s[14]++, (0, _react.createContext)(undefined));
// Create axios instance with interceptors
const api =
/* istanbul ignore next */
(cov_2nnkk9tup4().s[15]++, _axios.default.create({
  baseURL: "/",
  headers: {
    "Content-Type": "application/json"
  }
}));
/* istanbul ignore next */
cov_2nnkk9tup4().s[16]++;
const AuthProvider = ({
  children
}) => {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[5]++;
  const [user, setUser] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[17]++, (0, _react.useState)(null));
  const [accessToken, setAccessToken] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[18]++, (0, _react.useState)(null));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[19]++, (0, _react.useState)(true));
  const router =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[20]++, (0, _navigation.useRouter)());
  // Set up the token provider for the API utility
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[21]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[6]++;
    cov_2nnkk9tup4().s[22]++;
    (0, _api.setTokenProvider)(() => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[7]++;
      cov_2nnkk9tup4().s[23]++;
      return accessToken;
    });
  }, [accessToken]);
  // Define logout function first to avoid hoisting issues
  const logout =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[24]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[8]++;
    cov_2nnkk9tup4().s[25]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[26]++;
    setUser(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[27]++;
    setAccessToken(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[28]++;
    try {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[29]++;
      // Call the backend to invalidate the refresh token and clear cookies
      await api.post("/api/auth/logout");
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[30]++;
      console.log("Logout successful, server-side session cleared.");
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[31]++;
      console.error("Logout API call failed:", error);
      // Still clear client-side, even if server call fails
    }
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[32]++;
    router.push("/login"); // Redirect to login page
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[33]++;
    setIsLoading(false);
  }, [router]));
  // Setup axios interceptors for token refresh
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[34]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[9]++;
    const requestInterceptor =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[35]++, api.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[10]++;
      const currentToken =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[36]++, accessToken);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[37]++;
      if (currentToken) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[2][0]++;
        cov_2nnkk9tup4().s[38]++;
        config.headers.Authorization = `Bearer ${currentToken}`;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[2][1]++;
      }
      // CSRF token logic remains unchanged
      const csrfToken =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[39]++, getCookie("csrfToken"));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[4][0]++, csrfToken) &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[4][1]++, config.method !== "get") &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[4][2]++, config.method !== "head")) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[3][0]++;
        cov_2nnkk9tup4().s[41]++;
        config.headers["X-CSRF-Token"] = csrfToken;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[3][1]++;
      }
      cov_2nnkk9tup4().s[42]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[11]++;
      cov_2nnkk9tup4().s[43]++;
      return Promise.reject(error);
    }));
    const responseInterceptor =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[44]++, api.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[12]++;
      cov_2nnkk9tup4().s[45]++;
      return response;
    }, async error => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[13]++;
      const originalRequest =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[46]++, error.config);
      // Avoid infinite loop: do NOT attempt to refresh if the failed request *is* the refresh endpoint itself
      const isRefreshEndpoint =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[47]++, originalRequest?.url?.includes("/api/auth/refresh"));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[6][0]++, error.response?.status === 401) &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[6][1]++, !originalRequest._retry) &&
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[6][2]++, !isRefreshEndpoint)) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[5][0]++;
        cov_2nnkk9tup4().s[49]++;
        originalRequest._retry = true;
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[50]++;
        try {
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[51]++;
          console.log("Access Token expired or invalid, attempting to refresh via /api/auth/refresh...");
          // Send an empty object or no body. Relies on httpOnly refreshToken cookie.
          // Use api instance to ensure CSRF token is included
          const refreshResponse =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[52]++, await api.post("/api/auth/refresh", {}, {
            withCredentials: true,
            timeout: 10000 // 10 second timeout for refresh
          }));
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[53]++;
          if (refreshResponse.data.success) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[7][0]++;
            const newAccessToken =
            /* istanbul ignore next */
            (cov_2nnkk9tup4().s[54]++, refreshResponse.data.accessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[55]++;
            setUser(refreshResponse.data.user);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[56]++;
            setAccessToken(newAccessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[57]++;
            console.log("Token refreshed successfully. New accessToken:", newAccessToken.substring(0, 10) + "...");
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[58]++;
            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[59]++;
            return api(originalRequest);
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[7][1]++;
            cov_2nnkk9tup4().s[60]++;
            console.error("Token refresh explicitly failed by API:", refreshResponse.data.message);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[61]++;
            await logout(); // Logout if refresh attempt itself fails
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[62]++;
            return Promise.reject(error); // Reject with original error
          }
        } catch (refreshError) {
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[63]++;
          console.error("Full error during token refresh attempt:", refreshError);
          // Be more lenient with network errors during refresh
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[64]++;
          if (
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[9][0]++, refreshError.code === "ECONNABORTED") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[9][1]++, refreshError.code === "NETWORK_ERROR") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[9][2]++, !refreshError.response)) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[8][0]++;
            cov_2nnkk9tup4().s[65]++;
            console.log("Network error during token refresh, not logging out user");
            // Don't logout for network issues - let the user try again
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[66]++;
            return Promise.reject(error); // Reject with original error, but don't logout
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[8][1]++;
            cov_2nnkk9tup4().s[67]++;
            if (refreshError.response) {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[10][0]++;
              cov_2nnkk9tup4().s[68]++;
              console.error("Refresh attempt failed with status:", refreshError.response.status, "data:", refreshError.response.data);
              // Only logout for actual authentication failures (401, 403)
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[69]++;
              if (
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[12][0]++, refreshError.response.status === 401) ||
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[12][1]++, refreshError.response.status === 403)) {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[11][0]++;
                cov_2nnkk9tup4().s[70]++;
                await logout();
              } else {
                /* istanbul ignore next */
                cov_2nnkk9tup4().b[11][1]++;
                cov_2nnkk9tup4().s[71]++;
                console.log("Server error during refresh, not logging out user");
              }
            } else {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[10][1]++;
              cov_2nnkk9tup4().s[72]++;
              await logout(); // Logout for other unexpected errors
            }
          }
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[73]++;
          return Promise.reject(refreshError); // Reject with refresh error
        }
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[5][1]++;
      }
      cov_2nnkk9tup4().s[74]++;
      return Promise.reject(error);
    }));
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[75]++;
    return () => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[14]++;
      cov_2nnkk9tup4().s[76]++;
      api.interceptors.request.eject(requestInterceptor);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[77]++;
      api.interceptors.response.eject(responseInterceptor);
    };
  }, [accessToken, logout]); // Added accessToken and logout to dependency array
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[78]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[15]++;
    cov_2nnkk9tup4().s[79]++;
    const validateAuth = async () => {
      /* istanbul ignore next */
      cov_2nnkk9tup4().f[16]++;
      cov_2nnkk9tup4().s[80]++;
      setIsLoading(true);
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[81]++;
      try {
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[82]++;
        // Don't use localStorage for authentication
        // Instead, try to validate using the cookie-based refresh token
        console.log("Validating authentication via refresh token...");
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[83]++;
        try {
          // Try to refresh the token using the httpOnly refresh token cookie
          const response =
          /* istanbul ignore next */
          (cov_2nnkk9tup4().s[84]++, await api.post("/api/auth/refresh", {}, {
            timeout: 10000
          }));
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[85]++;
          if (response.data.success) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[13][0]++;
            const userData =
            /* istanbul ignore next */
            (cov_2nnkk9tup4().s[86]++, response.data.user);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[87]++;
            console.log("Auth validation - User data received:", {
              id: userData.id,
              username: userData.username,
              roleName: userData.roleName,
              permissions:
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[14][0]++, userData.permissions?.length) ||
              /* istanbul ignore next */
              (cov_2nnkk9tup4().b[14][1]++, 0)
            });
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[88]++;
            setUser(userData);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[89]++;
            setAccessToken(response.data.accessToken);
            /* istanbul ignore next */
            cov_2nnkk9tup4().s[90]++;
            console.log("Authentication validated via refresh token");
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[13][1]++;
            cov_2nnkk9tup4().s[91]++;
            console.log("No valid session found");
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2nnkk9tup4().s[92]++;
          // Network error during validation
          if (
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[16][0]++, error.code === "ECONNABORTED") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[16][1]++, error.code === "NETWORK_ERROR") ||
          /* istanbul ignore next */
          (cov_2nnkk9tup4().b[16][2]++, !error.response)) {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[15][0]++;
            cov_2nnkk9tup4().s[93]++;
            console.log("Network error during validation, skipping");
          } else {
            /* istanbul ignore next */
            cov_2nnkk9tup4().b[15][1]++;
            cov_2nnkk9tup4().s[94]++;
            if (
            /* istanbul ignore next */
            (cov_2nnkk9tup4().b[18][0]++, error.response?.status === 401) ||
            /* istanbul ignore next */
            (cov_2nnkk9tup4().b[18][1]++, error.response?.status === 400)) {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[17][0]++;
              cov_2nnkk9tup4().s[95]++;
              console.log("No valid refresh token, user needs to login");
              // Clear any cached user data
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[96]++;
              setUser(null);
              /* istanbul ignore next */
              cov_2nnkk9tup4().s[97]++;
              setAccessToken(null);
            } else {
              /* istanbul ignore next */
              cov_2nnkk9tup4().b[17][1]++;
              cov_2nnkk9tup4().s[98]++;
              console.error("Unexpected error during validation:", error);
            }
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[99]++;
        console.error("Unexpected error in validateAuth:", error);
      } finally {
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[100]++;
        setIsLoading(false);
      }
    };
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[101]++;
    validateAuth();
  }, []); // Empty dependency array as no dependencies are used in this useEffect
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[102]++;
  const login = async (email, password) => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[17]++;
    cov_2nnkk9tup4().s[103]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[104]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2nnkk9tup4().s[105]++, await _axios.default.post("/api/auth/login", {
        email,
        password
      }));
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[106]++;
      if (response.data.success) {
        /* istanbul ignore next */
        cov_2nnkk9tup4().b[19][0]++;
        const {
          accessToken: newAccessToken,
          user: userData
        } =
        /* istanbul ignore next */
        (cov_2nnkk9tup4().s[107]++, response.data);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[108]++;
        setUser(userData);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[109]++;
        setAccessToken(newAccessToken);
        // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[110]++;
        console.log("Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.");
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[111]++;
        setIsLoading(false);
        /* istanbul ignore next */
        cov_2nnkk9tup4().s[112]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2nnkk9tup4().b[19][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().s[113]++;
      console.error("Login failed:",
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[20][0]++, error.response?.data?.message) ||
      /* istanbul ignore next */
      (cov_2nnkk9tup4().b[20][1]++, error.message));
    }
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[114]++;
    setIsLoading(false);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[115]++;
    setUser(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[116]++;
    setAccessToken(null);
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[117]++;
    return false;
  };
  // Check if user has a specific permission
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[118]++;
  const hasPermission = permission => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[18]++;
    cov_2nnkk9tup4().s[119]++;
    if (
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[22][0]++, !user) ||
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[22][1]++, !user.permissions)) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[21][0]++;
      cov_2nnkk9tup4().s[120]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[21][1]++;
    }
    cov_2nnkk9tup4().s[121]++;
    return (0, _permissions.hasPermission)(user.permissions, permission);
  };
  // Get all user permissions
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[122]++;
  const getUserPermissions = () => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[19]++;
    cov_2nnkk9tup4().s[123]++;
    if (
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[24][0]++, !user) ||
    /* istanbul ignore next */
    (cov_2nnkk9tup4().b[24][1]++, !user.permissions)) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[23][0]++;
      cov_2nnkk9tup4().s[124]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[23][1]++;
    }
    cov_2nnkk9tup4().s[125]++;
    return [...user.permissions];
  };
  // Helper function to get cookie value
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[126]++;
  const getCookie = name => {
    /* istanbul ignore next */
    cov_2nnkk9tup4().f[20]++;
    const value =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[127]++, `; ${document.cookie}`);
    const parts =
    /* istanbul ignore next */
    (cov_2nnkk9tup4().s[128]++, value.split(`; ${name}=`));
    /* istanbul ignore next */
    cov_2nnkk9tup4().s[129]++;
    if (parts.length === 2) {
      /* istanbul ignore next */
      cov_2nnkk9tup4().b[25][0]++;
      cov_2nnkk9tup4().s[130]++;
      return parts.pop()?.split(";").shift();
    } else
    /* istanbul ignore next */
    {
      cov_2nnkk9tup4().b[25][1]++;
    }
    cov_2nnkk9tup4().s[131]++;
    return undefined;
  };
  const value =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[132]++, {
    user,
    accessToken,
    isLoading,
    isAuthenticated: !!user,
    login,
    logout,
    hasPermission,
    getUserPermissions
  });
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[133]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)(AuthContext.Provider, {
    value: value,
    children: children
  });
};
/* istanbul ignore next */
cov_2nnkk9tup4().s[134]++;
const useAuth = () => {
  /* istanbul ignore next */
  cov_2nnkk9tup4().f[21]++;
  const context =
  /* istanbul ignore next */
  (cov_2nnkk9tup4().s[135]++, (0, _react.useContext)(AuthContext));
  /* istanbul ignore next */
  cov_2nnkk9tup4().s[136]++;
  if (context === undefined) {
    /* istanbul ignore next */
    cov_2nnkk9tup4().b[26][0]++;
    cov_2nnkk9tup4().s[137]++;
    throw new Error("useAuth must be used within an AuthProvider");
  } else
  /* istanbul ignore next */
  {
    cov_2nnkk9tup4().b[26][1]++;
  }
  cov_2nnkk9tup4().s[138]++;
  return context;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,