{"version":3,"names":["cov_2nnkk9tup4","actualCoverage","s","AuthProvider","f","api","useAuth","AuthContext","_react","createContext","undefined","_axios","default","create","baseURL","headers","children","user","setUser","useState","accessToken","setAccessToken","isLoading","setIsLoading","router","_navigation","useRouter","useEffect","_api","setTokenProvider","logout","useCallback","post","console","log","error","push","requestInterceptor","interceptors","request","use","config","currentToken","b","Authorization","csrfToken","getCookie","method","Promise","reject","responseInterceptor","response","originalRequest","isRefreshEndpoint","url","includes","status","_retry","refreshResponse","withCredentials","timeout","data","success","newAccessToken","substring","message","refreshError","code","eject","validateAuth","userData","id","username","roleName","permissions","length","login","email","password","hasPermission","permission","_permissions","getUserPermissions","name","value","document","cookie","parts","split","pop","shift","isAuthenticated","_jsxruntime","jsx","Provider","context","useContext","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\nimport { hasPermission as checkPermission } from '@/lib/utils/permissions';\nimport { AuthenticatedUser as User } from '@/types/auth';\nimport { setTokenProvider } from '@/utils/api';\n\n// Types\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Set up the token provider for the API utility\n    useEffect(() => {\n        setTokenProvider(() => accessToken);\n    }, [accessToken]);\n\n    // Define logout function first to avoid hoisting issues\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken;\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                // Avoid infinite loop: do NOT attempt to refresh if the failed request *is* the refresh endpoint itself\n                const isRefreshEndpoint = originalRequest?.url?.includes('/api/auth/refresh');\n\n                if ((error.response?.status === 401) && !originalRequest._retry && !isRefreshEndpoint) { // Only retry on 401 for token refresh and not already retried, and skip if refresh itself failed\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        // Use api instance to ensure CSRF token is included\n                        const refreshResponse = await api.post('/api/auth/refresh', {}, {\n                            withCredentials: true,\n                            timeout: 10000 // 10 second timeout for refresh\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        \n                        // Be more lenient with network errors during refresh\n                        if (refreshError.code === 'ECONNABORTED' || refreshError.code === 'NETWORK_ERROR' || !refreshError.response) {\n                            console.log('Network error during token refresh, not logging out user');\n                            // Don't logout for network issues - let the user try again\n                            return Promise.reject(error); // Reject with original error, but don't logout\n                        } else if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                            // Only logout for actual authentication failures (401, 403)\n                            if (refreshError.response.status === 401 || refreshError.response.status === 403) {\n                                await logout();\n                            } else {\n                                console.log('Server error during refresh, not logging out user');\n                            }\n                        } else {\n                            await logout(); // Logout for other unexpected errors\n                        }\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken, logout]); // Added accessToken and logout to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                // Don't use localStorage for authentication\n                // Instead, try to validate using the cookie-based refresh token\n                console.log('Validating authentication via refresh token...');\n                \n                try {\n                    // Try to refresh the token using the httpOnly refresh token cookie\n                    const response = await api.post('/api/auth/refresh', {}, {\n                        timeout: 10000, // 10 second timeout\n                    });\n                    \n                    if (response.data.success) {\n                        const userData = response.data.user;\n                        console.log('Auth validation - User data received:', {\n                            id: userData.id,\n                            username: userData.username,\n                            roleName: userData.roleName,\n                            permissions: userData.permissions?.length || 0\n                        });\n                        \n                        setUser(userData);\n                        setAccessToken(response.data.accessToken);\n                        console.log('Authentication validated via refresh token');\n                    } else {\n                        console.log('No valid session found');\n                    }\n                } catch (error: any) {\n                    // Network error during validation\n                    if (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR' || !error.response) {\n                        console.log('Network error during validation, skipping');\n                    } else if (error.response?.status === 401 || error.response?.status === 400) {\n                        console.log('No valid refresh token, user needs to login');\n                        // Clear any cached user data\n                        setUser(null);\n                        setAccessToken(null);\n                    } else {\n                        console.error('Unexpected error during validation:', error);\n                    }\n                }\n            } catch (error) {\n                console.error('Unexpected error in validateAuth:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, []); // Empty dependency array as no dependencies are used in this useEffect\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        return false;\n    };\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return checkPermission(user.permissions, permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    const value: AuthContextType = {\n        user,\n        accessToken,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        logout,\n        hasPermission,\n        getUserPermissions\n    };\n\n    return (\n        <AuthContext.Provider\n            value={value}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}