ced6110ffaccefe3e807419ec684c299
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cleanupRefreshTokens: function() {
        return cleanupRefreshTokens;
    },
    generateRefreshToken: function() {
        return generateRefreshToken;
    },
    revokeAllUserRefreshTokens: function() {
        return revokeAllUserRefreshTokens;
    },
    revokeRefreshToken: function() {
        return revokeRefreshToken;
    },
    verifyRefreshToken: function() {
        return verifyRefreshToken;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_wildcard(require("../lib/prisma"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Configuration
const REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;
// Generate a secure random token using Web Crypto API
const generateSecureToken = (length = 40)=>{
    // Use Web Crypto API which is supported in Edge Runtime
    if (typeof crypto !== "undefined") {
        const bytes = new Uint8Array(length);
        crypto.getRandomValues(bytes);
        return Array.from(bytes).map((byte)=>byte.toString(16).padStart(2, "0")).join("");
    }
    // Fallback (less secure but works everywhere)
    return Array.from({
        length
    }, ()=>Math.floor(Math.random() * 16).toString(16)).join("");
};
const generateRefreshToken = async (userId)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            throw new Error("Database client not initialized correctly");
        }
        // Log for debugging
        console.log("Generating refresh token for user ID:", userId);
        // IMPORTANT: Revoke all existing non-expired refresh tokens for this user
        // This ensures only one active session per user at a time
        console.log("Revoking all existing refresh tokens for user before creating new one");
        await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.updateMany({
                where: {
                    userId,
                    isRevoked: false,
                    expiresAt: {
                        gt: new Date()
                    }
                },
                data: {
                    isRevoked: true
                }
            }), null, "Failed to revoke existing refresh tokens");
        // Generate a random token
        const token = generateSecureToken(40);
        // Calculate expiration date (30 days from now)
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);
        // Log the token details before creating
        console.log("Preparing to create refresh token with:", {
            userId,
            token: token.substring(0, 10) + "...",
            expiresAt
        });
        // Store the token in the database with retry logic
        const createdToken = await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.create({
                data: {
                    userId,
                    token,
                    expiresAt,
                    updatedAt: new Date()
                }
            }), null, "Failed to create refresh token");
        if (!createdToken) {
            throw new Error("Failed to create refresh token in database");
        }
        console.log("Successfully created refresh token with ID:", createdToken.id);
        return token;
    } catch (error) {
        // More detailed error logging
        console.error("Error generating refresh token:", error);
        if (error instanceof Error) {
            console.error("Error message:", error.message);
            console.error("Error stack:", error.stack);
        }
        throw new Error("Failed to generate refresh token");
    }
};
const verifyRefreshToken = async (token)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return null;
        }
        // Find the token in the database with retry logic
        const refreshToken = await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.findUnique({
                where: {
                    token
                }
            }), null, "Failed to find refresh token");
        // Check if token exists and is not revoked
        if (!refreshToken || refreshToken.isRevoked) {
            console.log("Token not found or revoked:", token.substring(0, 10) + "...");
            return null;
        }
        // Check if token is expired
        if (new Date() > refreshToken.expiresAt) {
            console.log("Token expired:", token.substring(0, 10) + "...");
            // Revoke expired token with retry logic
            await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.update({
                    where: {
                        id: refreshToken.id
                    },
                    data: {
                        isRevoked: true
                    }
                }), null, "Failed to revoke expired refresh token");
            return null;
        }
        return refreshToken.userId;
    } catch (error) {
        console.error("Error verifying refresh token:", error);
        return null;
    }
};
const revokeRefreshToken = async (token)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return false;
        }
        await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.updateMany({
                where: {
                    token
                },
                data: {
                    isRevoked: true
                }
            }), null, "Failed to revoke refresh token");
        return true;
    } catch (error) {
        console.error("Error revoking refresh token:", error);
        return false;
    }
};
const revokeAllUserRefreshTokens = async (userId)=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return false;
        }
        await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.updateMany({
                where: {
                    userId
                },
                data: {
                    isRevoked: true
                }
            }), null, "Failed to revoke all user refresh tokens");
        return true;
    } catch (error) {
        console.error("Error revoking user refresh tokens:", error);
        return false;
    }
};
const cleanupRefreshTokens = async ()=>{
    try {
        // Verify prisma client is initialized
        if (!_prisma.default || !_prisma.default.refreshToken) {
            console.error("Prisma client or RefreshToken model not available");
            return;
        }
        const now = new Date();
        await (0, _prisma.safeQuery)(()=>_prisma.default.refreshToken.deleteMany({
                where: {
                    OR: [
                        {
                            expiresAt: {
                                lt: now
                            }
                        },
                        {
                            isRevoked: true
                        }
                    ]
                }
            }), null, "Failed to cleanup expired refresh tokens");
    } catch (error) {
        console.error("Error cleaning up refresh tokens:", error);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL3NlcnZpY2VzL3JlZnJlc2hUb2tlblNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByaXNtYSwgeyBzYWZlUXVlcnkgfSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuXG4vLyBDb25maWd1cmF0aW9uXG5jb25zdCBSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU5fREFZUyA9IDMwO1xuXG4vLyBHZW5lcmF0ZSBhIHNlY3VyZSByYW5kb20gdG9rZW4gdXNpbmcgV2ViIENyeXB0byBBUElcbmNvbnN0IGdlbmVyYXRlU2VjdXJlVG9rZW4gPSAobGVuZ3RoID0gNDApOiBzdHJpbmcgPT4ge1xuICAgIC8vIFVzZSBXZWIgQ3J5cHRvIEFQSSB3aGljaCBpcyBzdXBwb3J0ZWQgaW4gRWRnZSBSdW50aW1lXG4gICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGJ5dGVzKVxuICAgICAgICAgICAgLm1hcChieXRlID0+IGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAgICAgICAuam9pbignJyk7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgKGxlc3Mgc2VjdXJlIGJ1dCB3b3JrcyBldmVyeXdoZXJlKVxuICAgIHJldHVybiBBcnJheS5mcm9tKFxuICAgICAgICB7IGxlbmd0aCB9LFxuICAgICAgICAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpXG4gICAgKS5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSBuZXcgcmVmcmVzaCB0b2tlbiBmb3IgYSB1c2VyXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVJlZnJlc2hUb2tlbiA9IGFzeW5jICh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gVmVyaWZ5IHByaXNtYSBjbGllbnQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgaWYgKCFwcmlzbWEgfHwgIXByaXNtYS5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1ByaXNtYSBjbGllbnQgb3IgUmVmcmVzaFRva2VuIG1vZGVsIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgY2xpZW50IG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvZyBmb3IgZGVidWdnaW5nXG4gICAgICAgIGNvbnNvbGUubG9nKCdHZW5lcmF0aW5nIHJlZnJlc2ggdG9rZW4gZm9yIHVzZXIgSUQ6JywgdXNlcklkKTtcblxuICAgICAgICAvLyBJTVBPUlRBTlQ6IFJldm9rZSBhbGwgZXhpc3Rpbmcgbm9uLWV4cGlyZWQgcmVmcmVzaCB0b2tlbnMgZm9yIHRoaXMgdXNlclxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgb25seSBvbmUgYWN0aXZlIHNlc3Npb24gcGVyIHVzZXIgYXQgYSB0aW1lXG4gICAgICAgIGNvbnNvbGUubG9nKCdSZXZva2luZyBhbGwgZXhpc3RpbmcgcmVmcmVzaCB0b2tlbnMgZm9yIHVzZXIgYmVmb3JlIGNyZWF0aW5nIG5ldyBvbmUnKTtcbiAgICAgICAgYXdhaXQgc2FmZVF1ZXJ5KFxuICAgICAgICAgICAgKCkgPT4gcHJpc21hLnJlZnJlc2hUb2tlbi51cGRhdGVNYW55KHtcbiAgICAgICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIGlzUmV2b2tlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNBdDogeyBndDogbmV3IERhdGUoKSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGlzUmV2b2tlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byByZXZva2UgZXhpc3RpbmcgcmVmcmVzaCB0b2tlbnMnXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgYSByYW5kb20gdG9rZW5cbiAgICAgICAgY29uc3QgdG9rZW4gPSBnZW5lcmF0ZVNlY3VyZVRva2VuKDQwKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgZXhwaXJhdGlvbiBkYXRlICgzMCBkYXlzIGZyb20gbm93KVxuICAgICAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBleHBpcmVzQXQuc2V0RGF0ZShleHBpcmVzQXQuZ2V0RGF0ZSgpICsgUkVGUkVTSF9UT0tFTl9FWFBJUkVTX0lOX0RBWVMpO1xuXG4gICAgICAgIC8vIExvZyB0aGUgdG9rZW4gZGV0YWlscyBiZWZvcmUgY3JlYXRpbmdcbiAgICAgICAgY29uc29sZS5sb2coJ1ByZXBhcmluZyB0byBjcmVhdGUgcmVmcmVzaCB0b2tlbiB3aXRoOicsIHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbi5zdWJzdHJpbmcoMCwgMTApICsgJy4uLicsXG4gICAgICAgICAgICBleHBpcmVzQXQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSB0b2tlbiBpbiB0aGUgZGF0YWJhc2Ugd2l0aCByZXRyeSBsb2dpY1xuICAgICAgICBjb25zdCBjcmVhdGVkVG9rZW4gPSBhd2FpdCBzYWZlUXVlcnkoXG4gICAgICAgICAgICAoKSA9PiBwcmlzbWEucmVmcmVzaFRva2VuLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzQXQsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byBjcmVhdGUgcmVmcmVzaCB0b2tlbidcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIWNyZWF0ZWRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHJlZnJlc2ggdG9rZW4gaW4gZGF0YWJhc2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgY3JlYXRlZCByZWZyZXNoIHRva2VuIHdpdGggSUQ6JywgY3JlYXRlZFRva2VuLmlkKTtcblxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gTW9yZSBkZXRhaWxlZCBlcnJvciBsb2dnaW5nXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgcmVmcmVzaCB0b2tlbjonLCBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBtZXNzYWdlOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RhY2s6JywgZXJyb3Iuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHJlZnJlc2ggdG9rZW4nKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhIHJlZnJlc2ggdG9rZW4gYW5kIHJldHVybiB0aGUgYXNzb2NpYXRlZCB1c2VyIElEIGlmIHZhbGlkXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJpZnlSZWZyZXNoVG9rZW4gPSBhc3luYyAodG9rZW46IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFZlcmlmeSBwcmlzbWEgY2xpZW50IGlzIGluaXRpYWxpemVkXG4gICAgICAgIGlmICghcHJpc21hIHx8ICFwcmlzbWEucmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcmlzbWEgY2xpZW50IG9yIFJlZnJlc2hUb2tlbiBtb2RlbCBub3QgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgdGhlIHRva2VuIGluIHRoZSBkYXRhYmFzZSB3aXRoIHJldHJ5IGxvZ2ljXG4gICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGF3YWl0IHNhZmVRdWVyeShcbiAgICAgICAgICAgICgpID0+IHByaXNtYS5yZWZyZXNoVG9rZW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICAgICAgd2hlcmU6IHsgdG9rZW4gfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdGYWlsZWQgdG8gZmluZCByZWZyZXNoIHRva2VuJ1xuICAgICAgICApO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRva2VuIGV4aXN0cyBhbmQgaXMgbm90IHJldm9rZWRcbiAgICAgICAgaWYgKCFyZWZyZXNoVG9rZW4gfHwgcmVmcmVzaFRva2VuLmlzUmV2b2tlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Rva2VuIG5vdCBmb3VuZCBvciByZXZva2VkOicsIHRva2VuLnN1YnN0cmluZygwLCAxMCkgKyAnLi4uJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRva2VuIGlzIGV4cGlyZWRcbiAgICAgICAgaWYgKG5ldyBEYXRlKCkgPiByZWZyZXNoVG9rZW4uZXhwaXJlc0F0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVG9rZW4gZXhwaXJlZDonLCB0b2tlbi5zdWJzdHJpbmcoMCwgMTApICsgJy4uLicpO1xuXG4gICAgICAgICAgICAvLyBSZXZva2UgZXhwaXJlZCB0b2tlbiB3aXRoIHJldHJ5IGxvZ2ljXG4gICAgICAgICAgICBhd2FpdCBzYWZlUXVlcnkoXG4gICAgICAgICAgICAgICAgKCkgPT4gcHJpc21hLnJlZnJlc2hUb2tlbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcmVmcmVzaFRva2VuLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgaXNSZXZva2VkOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIHJldm9rZSBleHBpcmVkIHJlZnJlc2ggdG9rZW4nXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWZyZXNoVG9rZW4udXNlcklkO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHZlcmlmeWluZyByZWZyZXNoIHRva2VuOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXZva2UgYSBzcGVjaWZpYyByZWZyZXNoIHRva2VuXG4gKi9cbmV4cG9ydCBjb25zdCByZXZva2VSZWZyZXNoVG9rZW4gPSBhc3luYyAodG9rZW46IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFZlcmlmeSBwcmlzbWEgY2xpZW50IGlzIGluaXRpYWxpemVkXG4gICAgICAgIGlmICghcHJpc21hIHx8ICFwcmlzbWEucmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcmlzbWEgY2xpZW50IG9yIFJlZnJlc2hUb2tlbiBtb2RlbCBub3QgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBzYWZlUXVlcnkoXG4gICAgICAgICAgICAoKSA9PiBwcmlzbWEucmVmcmVzaFRva2VuLnVwZGF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IHRva2VuIH0sXG4gICAgICAgICAgICAgICAgZGF0YTogeyBpc1Jldm9rZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdGYWlsZWQgdG8gcmV2b2tlIHJlZnJlc2ggdG9rZW4nXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmV2b2tpbmcgcmVmcmVzaCB0b2tlbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldm9rZSBhbGwgcmVmcmVzaCB0b2tlbnMgZm9yIGEgc3BlY2lmaWMgdXNlclxuICovXG5leHBvcnQgY29uc3QgcmV2b2tlQWxsVXNlclJlZnJlc2hUb2tlbnMgPSBhc3luYyAodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBWZXJpZnkgcHJpc21hIGNsaWVudCBpcyBpbml0aWFsaXplZFxuICAgICAgICBpZiAoIXByaXNtYSB8fCAhcHJpc21hLnJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignUHJpc21hIGNsaWVudCBvciBSZWZyZXNoVG9rZW4gbW9kZWwgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2FmZVF1ZXJ5KFxuICAgICAgICAgICAgKCkgPT4gcHJpc21hLnJlZnJlc2hUb2tlbi51cGRhdGVNYW55KHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyB1c2VySWQgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGlzUmV2b2tlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byByZXZva2UgYWxsIHVzZXIgcmVmcmVzaCB0b2tlbnMnXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmV2b2tpbmcgdXNlciByZWZyZXNoIHRva2VuczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGV4cGlyZWQgYW5kIHJldm9rZWQgdG9rZW5zXG4gKiBOb3RlOiBUaGlzIHNob3VsZCBiZSBydW4gcGVyaW9kaWNhbGx5IHZpYSBhIGNyb24gam9iXG4gKi9cbmV4cG9ydCBjb25zdCBjbGVhbnVwUmVmcmVzaFRva2VucyA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBWZXJpZnkgcHJpc21hIGNsaWVudCBpcyBpbml0aWFsaXplZFxuICAgICAgICBpZiAoIXByaXNtYSB8fCAhcHJpc21hLnJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignUHJpc21hIGNsaWVudCBvciBSZWZyZXNoVG9rZW4gbW9kZWwgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblxuICAgICAgICBhd2FpdCBzYWZlUXVlcnkoXG4gICAgICAgICAgICAoKSA9PiBwcmlzbWEucmVmcmVzaFRva2VuLmRlbGV0ZU1hbnkoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICAgIE9SOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGV4cGlyZXNBdDogeyBsdDogbm93IH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgaXNSZXZva2VkOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdGYWlsZWQgdG8gY2xlYW51cCBleHBpcmVkIHJlZnJlc2ggdG9rZW5zJ1xuICAgICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFuaW5nIHVwIHJlZnJlc2ggdG9rZW5zOicsIGVycm9yKTtcbiAgICB9XG59OyJdLCJuYW1lcyI6WyJjbGVhbnVwUmVmcmVzaFRva2VucyIsImdlbmVyYXRlUmVmcmVzaFRva2VuIiwicmV2b2tlQWxsVXNlclJlZnJlc2hUb2tlbnMiLCJyZXZva2VSZWZyZXNoVG9rZW4iLCJ2ZXJpZnlSZWZyZXNoVG9rZW4iLCJSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU5fREFZUyIsImdlbmVyYXRlU2VjdXJlVG9rZW4iLCJsZW5ndGgiLCJjcnlwdG8iLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJnZXRSYW5kb21WYWx1ZXMiLCJBcnJheSIsImZyb20iLCJtYXAiLCJieXRlIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ1c2VySWQiLCJwcmlzbWEiLCJyZWZyZXNoVG9rZW4iLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsImxvZyIsInNhZmVRdWVyeSIsInVwZGF0ZU1hbnkiLCJ3aGVyZSIsImlzUmV2b2tlZCIsImV4cGlyZXNBdCIsImd0IiwiRGF0ZSIsImRhdGEiLCJ0b2tlbiIsInNldERhdGUiLCJnZXREYXRlIiwic3Vic3RyaW5nIiwiY3JlYXRlZFRva2VuIiwiY3JlYXRlIiwidXBkYXRlZEF0IiwiaWQiLCJtZXNzYWdlIiwic3RhY2siLCJmaW5kVW5pcXVlIiwidXBkYXRlIiwibm93IiwiZGVsZXRlTWFueSIsIk9SIiwibHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBK01hQSxvQkFBb0I7ZUFBcEJBOztJQXJMQUMsb0JBQW9CO2VBQXBCQTs7SUF5SkFDLDBCQUEwQjtlQUExQkE7O0lBM0JBQyxrQkFBa0I7ZUFBbEJBOztJQWxEQUMsa0JBQWtCO2VBQWxCQTs7O2dFQXRHcUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVsQyxnQkFBZ0I7QUFDaEIsTUFBTUMsZ0NBQWdDO0FBRXRDLHNEQUFzRDtBQUN0RCxNQUFNQyxzQkFBc0IsQ0FBQ0MsU0FBUyxFQUFFO0lBQ3BDLHdEQUF3RDtJQUN4RCxJQUFJLE9BQU9DLFdBQVcsYUFBYTtRQUMvQixNQUFNQyxRQUFRLElBQUlDLFdBQVdIO1FBQzdCQyxPQUFPRyxlQUFlLENBQUNGO1FBQ3ZCLE9BQU9HLE1BQU1DLElBQUksQ0FBQ0osT0FDYkssR0FBRyxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUcsTUFDMUNDLElBQUksQ0FBQztJQUNkO0lBRUEsOENBQThDO0lBQzlDLE9BQU9OLE1BQU1DLElBQUksQ0FDYjtRQUFFTjtJQUFPLEdBQ1QsSUFBTVksS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUssSUFBSUwsUUFBUSxDQUFDLEtBQ2hERSxJQUFJLENBQUM7QUFDWDtBQUtPLE1BQU1qQix1QkFBdUIsT0FBT3FCO0lBQ3ZDLElBQUk7UUFDQSxzQ0FBc0M7UUFDdEMsSUFBSSxDQUFDQyxlQUFNLElBQUksQ0FBQ0EsZUFBTSxDQUFDQyxZQUFZLEVBQUU7WUFDakNDLFFBQVFDLEtBQUssQ0FBQztZQUNkLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUVBLG9CQUFv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