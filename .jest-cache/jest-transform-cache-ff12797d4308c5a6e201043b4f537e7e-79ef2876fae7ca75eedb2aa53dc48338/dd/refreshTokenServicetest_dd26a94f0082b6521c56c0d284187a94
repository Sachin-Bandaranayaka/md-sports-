80dc83db3e17c489c2da05e012a34e26
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _refreshTokenService = require("../../src/services/refreshTokenService");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock prisma
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: {
            refreshToken: {
                create: _globals.jest.fn(),
                findUnique: _globals.jest.fn(),
                update: _globals.jest.fn(),
                updateMany: _globals.jest.fn(),
                deleteMany: _globals.jest.fn()
            }
        }
    }));
const mockPrisma = _prisma.default;
// Mock crypto for consistent testing
const mockCrypto = {
    getRandomValues: _globals.jest.fn()
};
// Store original crypto
const originalCrypto = global.crypto;
(0, _globals.describe)("RefreshTokenService", ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        // Mock crypto.getRandomValues to return predictable values
        global.crypto = mockCrypto;
        mockCrypto.getRandomValues.mockImplementation((array)=>{
            for(let i = 0; i < array.length; i++){
                array[i] = i % 256; // Predictable pattern
            }
            return array;
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
        global.crypto = originalCrypto;
    });
    (0, _globals.describe)("generateRefreshToken", ()=>{
        (0, _globals.it)("should generate a refresh token successfully", async ()=>{
            const userId = "user-123";
            const mockCreatedToken = {
                id: "token-id-123",
                userId,
                token: "generated-token",
                expiresAt: new Date(),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken);
            const result = await (0, _refreshTokenService.generateRefreshToken)(userId);
            (0, _globals.expect)(mockPrisma.refreshToken.create).toHaveBeenCalledWith({
                data: {
                    userId,
                    token: _globals.expect.any(String),
                    expiresAt: _globals.expect.any(Date),
                    updatedAt: _globals.expect.any(Date)
                }
            });
            (0, _globals.expect)(result).toBe("generated-token");
        });
        (0, _globals.it)("should generate a token using crypto.getRandomValues when available", async ()=>{
            const userId = "user-123";
            const mockCreatedToken = {
                id: "token-id-123",
                userId,
                token: "crypto-generated-token",
                expiresAt: new Date(),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken);
            await (0, _refreshTokenService.generateRefreshToken)(userId);
            (0, _globals.expect)(mockCrypto.getRandomValues).toHaveBeenCalled();
            (0, _globals.expect)(mockPrisma.refreshToken.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
                data: _globals.expect.objectContaining({
                    token: _globals.expect.any(String)
                })
            }));
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            const userId = "user-123";
            mockPrisma.refreshToken.create.mockRejectedValue(new Error("Database error"));
            await (0, _globals.expect)((0, _refreshTokenService.generateRefreshToken)(userId)).rejects.toThrow("Failed to generate refresh token");
        });
        (0, _globals.it)("should handle prisma client not being available", async ()=>{
            const userId = "user-123";
            // Mock prisma as undefined
            prisma = undefined;
            await (0, _globals.expect)((0, _refreshTokenService.generateRefreshToken)(userId)).rejects.toThrow("Failed to generate refresh token");
            // Restore prisma mock
            prisma = mockPrisma;
        });
        (0, _globals.it)("should retry on prepared statement conflicts", async ()=>{
            const userId = "user-123";
            const preparedStatementError = {
                code: "42P05",
                message: "prepared statement conflict"
            };
            const mockCreatedToken = {
                id: "token-id-123",
                userId,
                token: "generated-token",
                expiresAt: new Date(),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.create.mockRejectedValueOnce(preparedStatementError).mockResolvedValue(mockCreatedToken);
            const result = await (0, _refreshTokenService.generateRefreshToken)(userId);
            (0, _globals.expect)(mockPrisma.refreshToken.create).toHaveBeenCalledTimes(2);
            (0, _globals.expect)(result).toBe("generated-token");
        });
    });
    (0, _globals.describe)("verifyRefreshToken", ()=>{
        (0, _globals.it)("should verify a valid refresh token and return user ID", async ()=>{
            const token = "valid-token";
            const userId = "user-123";
            const mockRefreshToken = {
                id: "token-id-123",
                userId,
                token,
                expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({
                where: {
                    token
                }
            });
            (0, _globals.expect)(result).toBe(userId);
        });
        (0, _globals.it)("should return null for non-existent token", async ()=>{
            const token = "non-existent-token";
            mockPrisma.refreshToken.findUnique.mockResolvedValue(null);
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(result).toBeNull();
        });
        (0, _globals.it)("should return null for revoked token", async ()=>{
            const token = "revoked-token";
            const mockRefreshToken = {
                id: "token-id-123",
                userId: "user-123",
                token,
                expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
                isRevoked: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(result).toBeNull();
        });
        (0, _globals.it)("should return null and revoke expired token", async ()=>{
            const token = "expired-token";
            const mockRefreshToken = {
                id: "token-id-123",
                userId: "user-123",
                token,
                expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);
            mockPrisma.refreshToken.update.mockResolvedValue(mockRefreshToken);
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(mockPrisma.refreshToken.update).toHaveBeenCalledWith({
                where: {
                    id: mockRefreshToken.id
                },
                data: {
                    isRevoked: true
                }
            });
            (0, _globals.expect)(result).toBeNull();
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            const token = "error-token";
            mockPrisma.refreshToken.findUnique.mockRejectedValue(new Error("Database error"));
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(result).toBeNull();
        });
        (0, _globals.it)("should handle prisma client not being available", async ()=>{
            const token = "test-token";
            // Mock prisma as undefined
            prisma = undefined;
            const result = await (0, _refreshTokenService.verifyRefreshToken)(token);
            (0, _globals.expect)(result).toBeNull();
            // Restore prisma mock
            prisma = mockPrisma;
        });
    });
    (0, _globals.describe)("revokeRefreshToken", ()=>{
        (0, _globals.it)("should revoke a refresh token successfully", async ()=>{
            const token = "token-to-revoke";
            mockPrisma.refreshToken.updateMany.mockResolvedValue({
                count: 1
            });
            const result = await (0, _refreshTokenService.revokeRefreshToken)(token);
            (0, _globals.expect)(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({
                where: {
                    token
                },
                data: {
                    isRevoked: true
                }
            });
            (0, _globals.expect)(result).toBe(true);
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            const token = "error-token";
            mockPrisma.refreshToken.updateMany.mockRejectedValue(new Error("Database error"));
            const result = await (0, _refreshTokenService.revokeRefreshToken)(token);
            (0, _globals.expect)(result).toBe(false);
        });
        (0, _globals.it)("should handle prisma client not being available", async ()=>{
            const token = "test-token";
            // Mock prisma as undefined
            prisma = undefined;
            const result = await (0, _refreshTokenService.revokeRefreshToken)(token);
            (0, _globals.expect)(result).toBe(false);
            // Restore prisma mock
            prisma = mockPrisma;
        });
    });
    (0, _globals.describe)("revokeAllUserRefreshTokens", ()=>{
        (0, _globals.it)("should revoke all refresh tokens for a user successfully", async ()=>{
            const userId = "user-123";
            mockPrisma.refreshToken.updateMany.mockResolvedValue({
                count: 3
            });
            const result = await (0, _refreshTokenService.revokeAllUserRefreshTokens)(userId);
            (0, _globals.expect)(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({
                where: {
                    userId
                },
                data: {
                    isRevoked: true
                }
            });
            (0, _globals.expect)(result).toBe(true);
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            const userId = "user-123";
            mockPrisma.refreshToken.updateMany.mockRejectedValue(new Error("Database error"));
            const result = await (0, _refreshTokenService.revokeAllUserRefreshTokens)(userId);
            (0, _globals.expect)(result).toBe(false);
        });
        (0, _globals.it)("should handle prisma client not being available", async ()=>{
            const userId = "user-123";
            // Mock prisma as undefined
            prisma = undefined;
            const result = await (0, _refreshTokenService.revokeAllUserRefreshTokens)(userId);
            (0, _globals.expect)(result).toBe(false);
            // Restore prisma mock
            prisma = mockPrisma;
        });
    });
    (0, _globals.describe)("cleanupRefreshTokens", ()=>{
        (0, _globals.it)("should clean up expired and revoked tokens successfully", async ()=>{
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 5
            });
            await (0, _refreshTokenService.cleanupRefreshTokens)();
            (0, _globals.expect)(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                where: {
                    OR: [
                        {
                            expiresAt: {
                                lt: _globals.expect.any(Date)
                            }
                        },
                        {
                            isRevoked: true
                        }
                    ]
                }
            });
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            mockPrisma.refreshToken.deleteMany.mockRejectedValue(new Error("Database error"));
            // Should not throw an error
            await (0, _globals.expect)((0, _refreshTokenService.cleanupRefreshTokens)()).resolves.toBeUndefined();
        });
        (0, _globals.it)("should handle prisma client not being available", async ()=>{
            // Mock prisma as undefined
            prisma = undefined;
            // Should not throw an error
            await (0, _globals.expect)((0, _refreshTokenService.cleanupRefreshTokens)()).resolves.toBeUndefined();
            // Restore prisma mock
            prisma = mockPrisma;
        });
    });
    (0, _globals.describe)("generateSecureToken fallback", ()=>{
        (0, _globals.it)("should use Math.random fallback when crypto is not available", async ()=>{
            const userId = "user-123";
            const mockCreatedToken = {
                id: "token-id-123",
                userId,
                token: "fallback-generated-token",
                expiresAt: new Date(),
                isRevoked: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            // Remove crypto to test fallback
            global.crypto = undefined;
            mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken);
            const result = await (0, _refreshTokenService.generateRefreshToken)(userId);
            (0, _globals.expect)(mockPrisma.refreshToken.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
                data: _globals.expect.objectContaining({
                    token: _globals.expect.any(String)
                })
            }));
            (0, _globals.expect)(result).toBe("fallback-generated-token");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,