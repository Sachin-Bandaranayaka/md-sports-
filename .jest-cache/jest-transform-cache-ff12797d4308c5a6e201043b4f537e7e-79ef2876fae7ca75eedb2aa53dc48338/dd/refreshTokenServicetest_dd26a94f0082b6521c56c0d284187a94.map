{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/refreshTokenService.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport {\n  generateRefreshToken,\n  verifyRefreshToken,\n  revokeRefreshToken,\n  revokeAllUserRefreshTokens,\n  cleanupRefreshTokens,\n} from '@/services/refreshTokenService';\nimport prisma from '@/lib/prisma';\n\n// Mock prisma\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: {\n    refreshToken: {\n      create: jest.fn(),\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      updateMany: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n  },\n}));\n\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\n\n// Mock crypto for consistent testing\nconst mockCrypto = {\n  getRandomValues: jest.fn(),\n};\n\n// Store original crypto\nconst originalCrypto = global.crypto;\n\ndescribe('RefreshTokenService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock crypto.getRandomValues to return predictable values\n    global.crypto = mockCrypto as any;\n    mockCrypto.getRandomValues.mockImplementation((array: Uint8Array) => {\n      for (let i = 0; i < array.length; i++) {\n        array[i] = i % 256; // Predictable pattern\n      }\n      return array;\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n    global.crypto = originalCrypto;\n  });\n\n  describe('generateRefreshToken', () => {\n    it('should generate a refresh token successfully', async () => {\n      const userId = 'user-123';\n      const mockCreatedToken = {\n        id: 'token-id-123',\n        userId,\n        token: 'generated-token',\n        expiresAt: new Date(),\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken as any);\n\n      const result = await generateRefreshToken(userId);\n\n      expect(mockPrisma.refreshToken.create).toHaveBeenCalledWith({\n        data: {\n          userId,\n          token: expect.any(String),\n          expiresAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        },\n      });\n      expect(result).toBe('generated-token');\n    });\n\n    it('should generate a token using crypto.getRandomValues when available', async () => {\n      const userId = 'user-123';\n      const mockCreatedToken = {\n        id: 'token-id-123',\n        userId,\n        token: 'crypto-generated-token',\n        expiresAt: new Date(),\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken as any);\n\n      await generateRefreshToken(userId);\n\n      expect(mockCrypto.getRandomValues).toHaveBeenCalled();\n      expect(mockPrisma.refreshToken.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          data: expect.objectContaining({\n            token: expect.any(String),\n          }),\n        })\n      );\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const userId = 'user-123';\n      mockPrisma.refreshToken.create.mockRejectedValue(new Error('Database error'));\n\n      await expect(generateRefreshToken(userId)).rejects.toThrow(\n        'Failed to generate refresh token'\n      );\n    });\n\n    it('should handle prisma client not being available', async () => {\n      const userId = 'user-123';\n      // Mock prisma as undefined\n      (prisma as any) = undefined;\n\n      await expect(generateRefreshToken(userId)).rejects.toThrow(\n        'Failed to generate refresh token'\n      );\n\n      // Restore prisma mock\n      (prisma as any) = mockPrisma;\n    });\n\n    it('should retry on prepared statement conflicts', async () => {\n      const userId = 'user-123';\n      const preparedStatementError = {\n        code: '42P05',\n        message: 'prepared statement conflict',\n      };\n      const mockCreatedToken = {\n        id: 'token-id-123',\n        userId,\n        token: 'generated-token',\n        expiresAt: new Date(),\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.create\n        .mockRejectedValueOnce(preparedStatementError)\n        .mockResolvedValue(mockCreatedToken as any);\n\n      const result = await generateRefreshToken(userId);\n\n      expect(mockPrisma.refreshToken.create).toHaveBeenCalledTimes(2);\n      expect(result).toBe('generated-token');\n    });\n  });\n\n  describe('verifyRefreshToken', () => {\n    it('should verify a valid refresh token and return user ID', async () => {\n      const token = 'valid-token';\n      const userId = 'user-123';\n      const mockRefreshToken = {\n        id: 'token-id-123',\n        userId,\n        token,\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 1 day from now\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken as any);\n\n      const result = await verifyRefreshToken(token);\n\n      expect(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({\n        where: { token },\n      });\n      expect(result).toBe(userId);\n    });\n\n    it('should return null for non-existent token', async () => {\n      const token = 'non-existent-token';\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(null);\n\n      const result = await verifyRefreshToken(token);\n\n      expect(result).toBeNull();\n    });\n\n    it('should return null for revoked token', async () => {\n      const token = 'revoked-token';\n      const mockRefreshToken = {\n        id: 'token-id-123',\n        userId: 'user-123',\n        token,\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        isRevoked: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken as any);\n\n      const result = await verifyRefreshToken(token);\n\n      expect(result).toBeNull();\n    });\n\n    it('should return null and revoke expired token', async () => {\n      const token = 'expired-token';\n      const mockRefreshToken = {\n        id: 'token-id-123',\n        userId: 'user-123',\n        token,\n        expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken as any);\n      mockPrisma.refreshToken.update.mockResolvedValue(mockRefreshToken as any);\n\n      const result = await verifyRefreshToken(token);\n\n      expect(mockPrisma.refreshToken.update).toHaveBeenCalledWith({\n        where: { id: mockRefreshToken.id },\n        data: { isRevoked: true },\n      });\n      expect(result).toBeNull();\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const token = 'error-token';\n      mockPrisma.refreshToken.findUnique.mockRejectedValue(new Error('Database error'));\n\n      const result = await verifyRefreshToken(token);\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle prisma client not being available', async () => {\n      const token = 'test-token';\n      // Mock prisma as undefined\n      (prisma as any) = undefined;\n\n      const result = await verifyRefreshToken(token);\n\n      expect(result).toBeNull();\n\n      // Restore prisma mock\n      (prisma as any) = mockPrisma;\n    });\n  });\n\n  describe('revokeRefreshToken', () => {\n    it('should revoke a refresh token successfully', async () => {\n      const token = 'token-to-revoke';\n      mockPrisma.refreshToken.updateMany.mockResolvedValue({ count: 1 } as any);\n\n      const result = await revokeRefreshToken(token);\n\n      expect(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({\n        where: { token },\n        data: { isRevoked: true },\n      });\n      expect(result).toBe(true);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const token = 'error-token';\n      mockPrisma.refreshToken.updateMany.mockRejectedValue(new Error('Database error'));\n\n      const result = await revokeRefreshToken(token);\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle prisma client not being available', async () => {\n      const token = 'test-token';\n      // Mock prisma as undefined\n      (prisma as any) = undefined;\n\n      const result = await revokeRefreshToken(token);\n\n      expect(result).toBe(false);\n\n      // Restore prisma mock\n      (prisma as any) = mockPrisma;\n    });\n  });\n\n  describe('revokeAllUserRefreshTokens', () => {\n    it('should revoke all refresh tokens for a user successfully', async () => {\n      const userId = 'user-123';\n      mockPrisma.refreshToken.updateMany.mockResolvedValue({ count: 3 } as any);\n\n      const result = await revokeAllUserRefreshTokens(userId);\n\n      expect(mockPrisma.refreshToken.updateMany).toHaveBeenCalledWith({\n        where: { userId },\n        data: { isRevoked: true },\n      });\n      expect(result).toBe(true);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const userId = 'user-123';\n      mockPrisma.refreshToken.updateMany.mockRejectedValue(new Error('Database error'));\n\n      const result = await revokeAllUserRefreshTokens(userId);\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle prisma client not being available', async () => {\n      const userId = 'user-123';\n      // Mock prisma as undefined\n      (prisma as any) = undefined;\n\n      const result = await revokeAllUserRefreshTokens(userId);\n\n      expect(result).toBe(false);\n\n      // Restore prisma mock\n      (prisma as any) = mockPrisma;\n    });\n  });\n\n  describe('cleanupRefreshTokens', () => {\n    it('should clean up expired and revoked tokens successfully', async () => {\n      mockPrisma.refreshToken.deleteMany.mockResolvedValue({ count: 5 } as any);\n\n      await cleanupRefreshTokens();\n\n      expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({\n        where: {\n          OR: [\n            { expiresAt: { lt: expect.any(Date) } },\n            { isRevoked: true },\n          ],\n        },\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      mockPrisma.refreshToken.deleteMany.mockRejectedValue(new Error('Database error'));\n\n      // Should not throw an error\n      await expect(cleanupRefreshTokens()).resolves.toBeUndefined();\n    });\n\n    it('should handle prisma client not being available', async () => {\n      // Mock prisma as undefined\n      (prisma as any) = undefined;\n\n      // Should not throw an error\n      await expect(cleanupRefreshTokens()).resolves.toBeUndefined();\n\n      // Restore prisma mock\n      (prisma as any) = mockPrisma;\n    });\n  });\n\n  describe('generateSecureToken fallback', () => {\n    it('should use Math.random fallback when crypto is not available', async () => {\n      const userId = 'user-123';\n      const mockCreatedToken = {\n        id: 'token-id-123',\n        userId,\n        token: 'fallback-generated-token',\n        expiresAt: new Date(),\n        isRevoked: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Remove crypto to test fallback\n      global.crypto = undefined as any;\n      mockPrisma.refreshToken.create.mockResolvedValue(mockCreatedToken as any);\n\n      const result = await generateRefreshToken(userId);\n\n      expect(mockPrisma.refreshToken.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          data: expect.objectContaining({\n            token: expect.any(String),\n          }),\n        })\n      );\n      expect(result).toBe('fallback-generated-token');\n    });\n  });\n});"],"names":["jest","mock","__esModule","default","refreshToken","create","fn","findUnique","update","updateMany","deleteMany","mockPrisma","prisma","mockCrypto","getRandomValues","originalCrypto","global","crypto","describe","beforeEach","clearAllMocks","mockImplementation","array","i","length","afterEach","resetAllMocks","it","userId","mockCreatedToken","id","token","expiresAt","Date","isRevoked","createdAt","updatedAt","mockResolvedValue","result","generateRefreshToken","expect","toHaveBeenCalledWith","data","any","String","toBe","toHaveBeenCalled","objectContaining","mockRejectedValue","Error","rejects","toThrow","undefined","preparedStatementError","code","message","mockRejectedValueOnce","toHaveBeenCalledTimes","mockRefreshToken","now","verifyRefreshToken","where","toBeNull","count","revokeRefreshToken","revokeAllUserRefreshTokens","cleanupRefreshTokens","OR","lt","resolves","toBeUndefined"],"mappings":"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"}