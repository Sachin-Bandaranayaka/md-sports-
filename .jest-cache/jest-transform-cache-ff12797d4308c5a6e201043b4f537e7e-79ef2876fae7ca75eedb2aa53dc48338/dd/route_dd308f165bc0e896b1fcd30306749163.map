{"version":3,"names":["GET","cov_1pujughijs","f","s","POST","inventoryGetHandler","request","_shopMiddleware","ShopAccessControl","withShopAccess","context","searchParams","URL","url","productId","get","categoryId","lowStock","console","log","shopId","isFiltered","isAdmin","userShopId","query","params","paramIndex","b","push","parseInt","result","_db","default","_server","NextResponse","json","success","data","rows","meta","shopFiltered","totalItems","length","error","message","Error","String","status","_apioptimizer","withApiOptimization","cacheTTL","enableCompression","enableCaching","quantity","reorderLevel","undefined","shopAccessResult","validateShopAccess","hasAccess","createAccessDeniedResponse","shopResult","productResult","inventoryResult","inventoryItem"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport db from '@/utils/db';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { withApiOptimization } from '@/lib/middleware/api-optimizer';\n\n// GET: Fetch all inventory items with shop-based filtering\nasync function inventoryGetHandler(request: NextRequest) {\n    return ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n        try {\n            // Parse query parameters\n            const { searchParams } = new URL(request.url);\n            const productId = searchParams.get('productId');\n            const categoryId = searchParams.get('categoryId');\n            const lowStock = searchParams.get('lowStock') === 'true';\n\n            console.log('Inventory API - Shop context:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                isAdmin: context.isAdmin,\n                userShopId: context.userShopId\n            });\n\n            // Build the query with possible filters\n            let query = `\n                SELECT \n                    i.id as inventory_id,\n                    i.shop_id,\n                    s.name as shop_name,\n                    s.location as shop_location,\n                    i.product_id,\n                    p.name as product_name,\n                    p.sku as product_sku,\n                    p.barcode as product_barcode,\n                    p.price,\n                    p.weightedAverageCost,\n                    i.shopspecificcost as shop_specific_cost,\n                    c.id as category_id,\n                    c.name as category_name,\n                    i.quantity,\n                    i.reorder_level,\n                    i.last_updated\n                FROM \n                    inventory_items i\n                JOIN \n                    products p ON i.product_id = p.id\n                JOIN \n                    shops s ON i.shop_id = s.id\n                LEFT JOIN \n                    categories c ON p.category_id = c.id\n                WHERE \n                    p.is_active = true \n                    AND s.is_active = true\n            `;\n\n            // Add filters based on query parameters and shop access\n            const params: any[] = [];\n            let paramIndex = 1;\n\n            // Apply shop filtering based on user permissions\n            if (context.isFiltered && context.shopId) {\n                query += ` AND i.shop_id = $${paramIndex}`;\n                params.push(context.shopId);\n                paramIndex++;\n            }\n\n            if (productId) {\n                query += ` AND i.product_id = $${paramIndex}`;\n                params.push(parseInt(productId));\n                paramIndex++;\n            }\n\n            if (categoryId) {\n                query += ` AND p.category_id = $${paramIndex}`;\n                params.push(parseInt(categoryId));\n                paramIndex++;\n            }\n\n            if (lowStock) {\n                query += ` AND i.quantity <= i.reorder_level`;\n            }\n\n            // Add sorting\n            query += ` ORDER BY s.name, p.name`;\n\n            console.log('Inventory query:', query);\n            console.log('Inventory params:', params);\n\n            // Execute the query\n            const result = await db.query(query, params);\n\n            return NextResponse.json({\n                success: true,\n                data: result.rows,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    totalItems: result.rows.length\n                }\n            });\n        } catch (error) {\n            console.error('Error fetching inventory items:', error);\n            return NextResponse.json({\n                success: false,\n                message: 'Error fetching inventory items',\n                error: error instanceof Error ? error.message : String(error)\n            }, { status: 500 });\n        }\n    })(request);\n}\n\n// Apply optimization middleware to GET\nexport const GET = withApiOptimization(inventoryGetHandler, {\n    cacheTTL: 180, // 3 minutes cache for inventory data\n    enableCompression: true,\n    enableCaching: true\n});\n\n// POST: Create or update inventory items with shop validation\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const { shopId, productId, quantity, reorderLevel } = await request.json();\n\n        // Validate required fields\n        if (!shopId || !productId || quantity === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields: shopId, productId, and quantity are required'\n            }, { status: 400 });\n        }\n\n        // Validate shop access for the target shop\n        const shopAccessResult = await ShopAccessControl.validateShopAccess(request, shopId);\n        if (!shopAccessResult.hasAccess) {\n            return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n        }\n\n        // Check if shop exists\n        const shopResult = await db.query(`\n            SELECT id FROM shops WHERE id = $1 AND is_active = true\n        `, [shopId]);\n\n        if (shopResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if product exists\n        const productResult = await db.query(`\n            SELECT id FROM products WHERE id = $1 AND is_active = true\n        `, [productId]);\n\n        if (productResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if inventory item already exists\n        const inventoryResult = await db.query(`\n            SELECT id FROM inventory_items \n            WHERE shop_id = $1 AND product_id = $2\n        `, [shopId, productId]);\n\n        let result;\n\n        if (inventoryResult.rows.length > 0) {\n            // Update existing inventory item\n            result = await db.query(`\n                UPDATE inventory_items \n                SET \n                    quantity = $1, \n                    reorder_level = $2,\n                    last_updated = CURRENT_TIMESTAMP\n                WHERE \n                    shop_id = $3 AND product_id = $4\n                RETURNING *\n            `, [quantity, reorderLevel || 0, shopId, productId]);\n        } else {\n            // Create new inventory item\n            result = await db.query(`\n                INSERT INTO inventory_items (\n                    shop_id, \n                    product_id, \n                    quantity, \n                    reorder_level\n                ) VALUES ($1, $2, $3, $4)\n                RETURNING *\n            `, [shopId, productId, quantity, reorderLevel || 0]);\n        }\n\n        // Real-time updates now handled by polling system\n        const inventoryItem = result.rows[0];\n\n        return NextResponse.json({\n            success: true,\n            message: inventoryResult.rows.length > 0\n                ? 'Inventory item updated successfully'\n                : 'Inventory item created successfully',\n            data: inventoryItem\n        });\n    } catch (error) {\n        console.error('Error creating/updating inventory item:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating/updating inventory item',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});"],"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","ignoreList":[]}