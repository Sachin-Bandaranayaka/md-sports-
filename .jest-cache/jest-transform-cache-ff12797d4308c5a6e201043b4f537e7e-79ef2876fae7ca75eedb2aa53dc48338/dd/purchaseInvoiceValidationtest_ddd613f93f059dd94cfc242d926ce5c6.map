{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/purchaseInvoiceValidation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock data types\ninterface FormItem {\n  productId: string;\n  productName: string;\n  quantity: number;\n  price: number;\n}\n\ninterface Shop {\n  id: string;\n  name: string;\n}\n\n// Validation functions extracted from the components for testing\nconst validateDistributions = (\n  items: FormItem[], \n  itemDistributions: Array<Record<string, number> | {}>, \n  shops: Shop[]\n) => {\n  if (!items || items.length === 0) return { isValid: false, error: 'No items to validate' };\n  \n  if (shops.length === 0) {\n    return { isValid: false, error: 'No shops available for distribution. Please configure at least one shop before creating purchase invoices.' };\n  }\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const distribution = itemDistributions[i] || {};\n    \n    // Calculate total distributed quantity for this item\n    const totalDistributed = Object.values(distribution).reduce((sum: number, qty) => {\n      const num = Number(qty) || 0;\n      return sum + num;\n    }, 0);\n    \n    const requiredQuantity = Number(item.quantity);\n    \n    if (totalDistributed === 0) {\n      return { \n        isValid: false, \n        error: `Product \"${item.productName || `Product ${item.productId}`}\" has no distribution set. Please distribute all quantities to shops.` \n      };\n    }\n    \n    if (totalDistributed !== requiredQuantity) {\n      return { \n        isValid: false, \n        error: `Product \"${item.productName || `Product ${item.productId}`}\" distribution mismatch. Required: ${requiredQuantity}, Distributed: ${totalDistributed}` \n      };\n    }\n  }\n  \n  return { isValid: true, error: null };\n};\n\nconst getItemDistributionStatus = (\n  itemIndex: number,\n  items: FormItem[],\n  itemDistributions: Array<Record<string, number>>\n) => {\n  if (!items || !items[itemIndex]) return { status: 'none', message: 'No item' };\n  \n  const item = items[itemIndex];\n  const requiredQty = Number(item.quantity);\n  \n  // Calculate distributed quantity\n  const distribution = itemDistributions[itemIndex] || {};\n  const distributedQty = Object.values(distribution).reduce((sum, qty) => sum + (Number(qty) || 0), 0);\n  \n  if (distributedQty === 0) {\n    return { status: 'none', message: 'Not distributed' };\n  } else if (distributedQty < requiredQty) {\n    return { status: 'partial', message: `${distributedQty}/${requiredQty} distributed` };\n  } else if (distributedQty === requiredQty) {\n    return { status: 'complete', message: 'Fully distributed' };\n  } else {\n    return { status: 'over', message: `Over-distributed: ${distributedQty}/${requiredQty}` };\n  }\n};\n\ndescribe('Purchase Invoice Distribution Validation', () => {\n  let mockItems: FormItem[];\n  let mockShops: Shop[];\n  let mockDistributions: Array<Record<string, number>>;\n\n  beforeEach(() => {\n    mockItems = [\n      {\n        productId: '1',\n        productName: 'Test Product 1',\n        quantity: 10,\n        price: 100\n      },\n      {\n        productId: '2', \n        productName: 'Test Product 2',\n        quantity: 5,\n        price: 50\n      }\n    ];\n\n    mockShops = [\n      { id: 'shop1', name: 'Shop 1' },\n      { id: 'shop2', name: 'Shop 2' }\n    ];\n\n    mockDistributions = [\n      { 'shop1': 6, 'shop2': 4 }, // Total: 10 (matches item 1)\n      { 'shop1': 5 }              // Total: 5 (matches item 2)\n    ];\n  });\n\n  describe('validateDistributions', () => {\n    it('should return valid when all items are properly distributed', () => {\n      const result = validateDistributions(mockItems, mockDistributions, mockShops);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.error).toBeNull();\n    });\n\n    it('should return invalid when no items exist', () => {\n      const result = validateDistributions([], [], mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('No items to validate');\n    });\n\n    it('should return invalid when no shops are configured', () => {\n      const result = validateDistributions(mockItems, mockDistributions, []);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('No shops available for distribution. Please configure at least one shop before creating purchase invoices.');\n    });\n\n    it('should return invalid when item has no distribution', () => {\n      const emptyDistributions = [\n        {},  // Empty distribution for first item\n        { 'shop1': 5 }\n      ];\n      \n      const result = validateDistributions(mockItems, emptyDistributions, mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('Product \"Test Product 1\" has no distribution set. Please distribute all quantities to shops.');\n    });\n\n    it('should return invalid when distributed quantity is less than required', () => {\n      const partialDistributions = [\n        { 'shop1': 6, 'shop2': 2 }, // Total: 8, but required: 10\n        { 'shop1': 5 }\n      ];\n      \n      const result = validateDistributions(mockItems, partialDistributions, mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('Product \"Test Product 1\" distribution mismatch. Required: 10, Distributed: 8');\n    });\n\n    it('should return invalid when distributed quantity exceeds required', () => {\n      const overDistributions = [\n        { 'shop1': 6, 'shop2': 6 }, // Total: 12, but required: 10\n        { 'shop1': 5 }\n      ];\n      \n      const result = validateDistributions(mockItems, overDistributions, mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('Product \"Test Product 1\" distribution mismatch. Required: 10, Distributed: 12');\n    });\n\n    it('should handle missing distribution arrays gracefully', () => {\n      const incompleteDistributions = [\n        { 'shop1': 10 }\n        // Missing distribution for second item\n      ];\n      \n      const result = validateDistributions(mockItems, incompleteDistributions, mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('Product \"Test Product 2\" has no distribution set. Please distribute all quantities to shops.');\n    });\n\n    it('should handle string quantities in distributions', () => {\n      const stringDistributions = [\n        { 'shop1': '6', 'shop2': '4' } as any, // String values\n        { 'shop1': '5' } as any\n      ];\n      \n      const result = validateDistributions(mockItems, stringDistributions, mockShops);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.error).toBeNull();\n    });\n\n    it('should handle invalid/NaN quantities in distributions', () => {\n      const invalidDistributions = [\n        { 'shop1': 'invalid', 'shop2': 4 } as any, // Invalid value should be treated as 0\n        { 'shop1': 5 }\n      ];\n      \n      const result = validateDistributions(mockItems, invalidDistributions, mockShops);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.error).toBe('Product \"Test Product 1\" distribution mismatch. Required: 10, Distributed: 4');\n    });\n  });\n\n  describe('getItemDistributionStatus', () => {\n    it('should return \"complete\" when item is fully distributed', () => {\n      const result = getItemDistributionStatus(0, mockItems, mockDistributions);\n      \n      expect(result.status).toBe('complete');\n      expect(result.message).toBe('Fully distributed');\n    });\n\n    it('should return \"none\" when item has no distribution', () => {\n      const emptyDistributions = [{}];\n      const result = getItemDistributionStatus(0, mockItems, emptyDistributions);\n      \n      expect(result.status).toBe('none');\n      expect(result.message).toBe('Not distributed');\n    });\n\n    it('should return \"partial\" when item is partially distributed', () => {\n      const partialDistributions = [{ 'shop1': 6 }]; // 6 out of 10\n      const result = getItemDistributionStatus(0, mockItems, partialDistributions);\n      \n      expect(result.status).toBe('partial');\n      expect(result.message).toBe('6/10 distributed');\n    });\n\n    it('should return \"over\" when item is over-distributed', () => {\n      const overDistributions = [{ 'shop1': 12 }]; // 12 out of 10\n      const result = getItemDistributionStatus(0, mockItems, overDistributions);\n      \n      expect(result.status).toBe('over');\n      expect(result.message).toBe('Over-distributed: 12/10');\n    });\n\n    it('should return \"none\" when item index is invalid', () => {\n      const result = getItemDistributionStatus(999, mockItems, mockDistributions);\n      \n      expect(result.status).toBe('none');\n      expect(result.message).toBe('No item');\n    });\n\n    it('should handle missing distribution for item index', () => {\n      const incompleteDistributions = [{ 'shop1': 10 }]; // Missing index 1\n      const result = getItemDistributionStatus(1, mockItems, incompleteDistributions);\n      \n      expect(result.status).toBe('none');\n      expect(result.message).toBe('Not distributed');\n    });\n\n    it('should handle zero quantity items', () => {\n      const zeroQuantityItems = [{ ...mockItems[0], quantity: 0 }];\n      const zeroDistributions = [{ 'shop1': 0 }];\n      const result = getItemDistributionStatus(0, zeroQuantityItems, zeroDistributions);\n      \n      expect(result.status).toBe('complete');\n      expect(result.message).toBe('Fully distributed');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty arrays', () => {\n      const result = validateDistributions([], [], []);\n      expect(result.isValid).toBe(false);\n    });\n\n    it('should handle null/undefined inputs gracefully', () => {\n      const result = validateDistributions(null as any, null as any, null as any);\n      expect(result.isValid).toBe(false);\n    });\n\n    it('should handle items with missing productName', () => {\n      const itemsNoName = [{ \n        productId: '1', \n        productName: '', \n        quantity: 5, \n        price: 100 \n      }];\n      const emptyDist = [{}];\n      \n      const result = validateDistributions(itemsNoName, emptyDist, mockShops);\n      expect(result.error).toContain('Product 1');\n    });\n  });\n}); "],"names":["validateDistributions","items","itemDistributions","shops","length","isValid","error","i","item","distribution","totalDistributed","Object","values","reduce","sum","qty","num","Number","requiredQuantity","quantity","productName","productId","getItemDistributionStatus","itemIndex","status","message","requiredQty","distributedQty","describe","mockItems","mockShops","mockDistributions","beforeEach","price","id","name","it","result","expect","toBe","toBeNull","emptyDistributions","partialDistributions","overDistributions","incompleteDistributions","stringDistributions","invalidDistributions","zeroQuantityItems","zeroDistributions","itemsNoName","emptyDist","toContain"],"mappings":"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"}