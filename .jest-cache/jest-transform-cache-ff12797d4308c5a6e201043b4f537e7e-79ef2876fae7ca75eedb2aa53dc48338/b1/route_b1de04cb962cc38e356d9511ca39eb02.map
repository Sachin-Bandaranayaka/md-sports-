{"version":3,"names":["POST","createTablesSQL","cov_17a5i90kvd","s","_request","f","console","log","_db","default","query","categoryCheck","parseInt","rows","count","b","sportingGoodsResult","sportingGoodsId","id","categoriesResult","equipmentId","find","c","name","apparelId","productsResult","basketballId","p","jerseyId","shopsResult","mainStoreId","kandyStoreId","_server","NextResponse","json","success","message","error","Error","String","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/db-setup/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport db from '@/utils/db';\n\n// SQL to create tables\nconst createTablesSQL = `\n-- Create categories table\nCREATE TABLE IF NOT EXISTS categories (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  parent_id INTEGER REFERENCES categories(id),\n  is_active BOOLEAN NOT NULL DEFAULT TRUE,\n  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create products table\nCREATE TABLE IF NOT EXISTS products (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  sku VARCHAR(50) NOT NULL UNIQUE,\n  barcode VARCHAR(50),\n  description TEXT,\n  base_price DECIMAL(10, 2) NOT NULL,\n  retail_price DECIMAL(10, 2) NOT NULL,\n  category_id INTEGER REFERENCES categories(id),\n  image_url VARCHAR(255),\n  is_active BOOLEAN NOT NULL DEFAULT TRUE,\n  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create shops table\nCREATE TABLE IF NOT EXISTS shops (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  location VARCHAR(255) NOT NULL,\n  contact_person VARCHAR(255),\n  phone VARCHAR(50),\n  email VARCHAR(255),\n  is_active BOOLEAN NOT NULL DEFAULT TRUE,\n  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create inventory_items table\nCREATE TABLE IF NOT EXISTS inventory_items (\n  id SERIAL PRIMARY KEY,\n  shop_id INTEGER NOT NULL REFERENCES shops(id),\n  product_id INTEGER NOT NULL REFERENCES products(id),\n  quantity INTEGER NOT NULL DEFAULT 0,\n  reorder_level INTEGER,\n  last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  UNIQUE(shop_id, product_id)\n);\n`;\n\nexport async function POST(_request: Request) {\n  try {\n    // Create tables\n    console.log('Creating tables...');\n    await db.query(createTablesSQL);\n\n    // Check if we already have data\n    const categoryCheck = await db.query('SELECT COUNT(*) as count FROM categories');\n\n    if (parseInt(categoryCheck.rows[0].count) === 0) {\n      console.log('Seeding data...');\n\n      // Create main category\n      const sportingGoodsResult = await db.query(`\n        INSERT INTO categories (name, description) \n        VALUES ('Sporting Goods', 'All sporting equipment and accessories')\n        RETURNING id\n      `);\n      const sportingGoodsId = sportingGoodsResult.rows[0].id;\n\n      // Create subcategories\n      const categoriesResult = await db.query(`\n        INSERT INTO categories (name, description, parent_id) \n        VALUES \n          ('Apparel', 'Clothing and uniforms', $1),\n          ('Equipment', 'Sports equipment', $1)\n        RETURNING id, name\n      `, [sportingGoodsId]);\n\n      // Get category IDs\n      const equipmentId = categoriesResult.rows.find(c => c.name === 'Equipment').id;\n      const apparelId = categoriesResult.rows.find(c => c.name === 'Apparel').id;\n\n      // Create products\n      const productsResult = await db.query(`\n        INSERT INTO products (name, sku, barcode, description, base_price, retail_price, category_id) \n        VALUES \n          ('Professional Basketball', 'BB-PRO-001', '123456789012', 'Official size and weight basketball', 25.00, 39.99, $1),\n          ('Team Jersey', 'APP-JRS-001', '123456789013', 'Official team jersey', 35.00, 59.99, $2)\n        RETURNING id, name\n      `, [equipmentId, apparelId]);\n\n      // Get product IDs\n      const basketballId = productsResult.rows.find(p => p.name === 'Professional Basketball').id;\n      const jerseyId = productsResult.rows.find(p => p.name === 'Team Jersey').id;\n\n      // Create shops\n      const shopsResult = await db.query(`\n        INSERT INTO shops (name, location, contact_person, phone, email) \n        VALUES \n          ('MS Sport Main Store', 'Colombo', 'John Doe', '+94123456789', 'main@mssport.lk'),\n          ('MS Sport Kandy Branch', 'Kandy', 'Jane Smith', '+94123456790', 'kandy@mssport.lk')\n        RETURNING id, name\n      `);\n\n      // Get shop IDs\n      const mainStoreId = shopsResult.rows.find(s => s.name === 'MS Sport Main Store').id;\n      const kandyStoreId = shopsResult.rows.find(s => s.name === 'MS Sport Kandy Branch').id;\n\n      // Create inventory items\n      await db.query(`\n        INSERT INTO inventory_items (shop_id, product_id, quantity, reorder_level) \n        VALUES \n          ($1, $3, 50, 10),\n          ($1, $4, 30, 5),\n          ($2, $3, 25, 8),\n          ($2, $4, 15, 3)\n      `, [mainStoreId, kandyStoreId, basketballId, jerseyId]);\n\n      console.log('Data seeded successfully!');\n    } else {\n      console.log('Data already exists, skipping seed.');\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Database setup completed successfully.'\n    });\n  } catch (error) {\n    console.error('Error setting up database:', error);\n    return NextResponse.json({\n      success: false,\n      message: 'Error setting up database',\n      error: error instanceof Error ? error.message : String(error)\n    }, { status: 500 });\n  }\n} "],"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","ignoreList":[]}