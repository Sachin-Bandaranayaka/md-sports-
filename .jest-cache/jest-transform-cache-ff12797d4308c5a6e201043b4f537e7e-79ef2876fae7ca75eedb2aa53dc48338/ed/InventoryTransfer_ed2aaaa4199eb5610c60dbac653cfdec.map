{"version":3,"names":["_default","InventoryTransfer","_sequelize","Model","addTransferItem","productId","quantity","notes","cov_214sn763f2","b","f","TransferItem","s","_db","default","model","create","transferId","id","completeTransfer","status","transaction","InventoryItem","items","findAll","where","item","get","sourceInventory","findOne","shopId","sourceShopId","Error","decrement","by","destInventory","_created","findOrCreate","destinationShopId","defaults","reorderLevel","increment","update","completedAt","Date","commit","error","rollback","console","cancelTransfer","init","type","DataTypes","INTEGER","autoIncrement","primaryKey","allowNull","initiatedByUserId","ENUM","defaultValue","DATE","sequelize","modelName","tableName","timestamps","validate","differentShops"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/models/InventoryTransfer.ts"],"sourcesContent":["import { Model, DataTypes } from 'sequelize';\nimport sequelize from '../db';\n\nclass InventoryTransfer extends Model {\n    public id!: number;\n    public sourceShopId!: number;\n    public destinationShopId!: number;\n    public initiatedByUserId!: number;\n    public status!: string;\n    public readonly createdAt!: Date;\n    public completedAt!: Date | null;\n\n    // Custom instance methods\n    public async addTransferItem(productId: number, quantity: number, notes: string = ''): Promise<void> {\n        const TransferItem = sequelize.model('transfer_item');\n        await TransferItem.create({\n            transferId: this.id,\n            productId,\n            quantity,\n            notes\n        });\n    }\n\n    public async completeTransfer(): Promise<boolean> {\n        // Check if transfer is in pending status\n        if (this.status !== 'pending') {\n            return false;\n        }\n\n        // Start transaction\n        const transaction = await sequelize.transaction();\n\n        try {\n            const TransferItem = sequelize.model('transfer_item');\n            const InventoryItem = sequelize.model('inventory_item');\n\n            // Get all transfer items\n            const items = await TransferItem.findAll({\n                where: { transferId: this.id }\n            });\n\n            // Process each item in the transfer\n            for (const item of items) {\n                const productId = item.get('productId');\n                const quantity = item.get('quantity');\n\n                // Decrement source inventory\n                const sourceInventory = await InventoryItem.findOne({\n                    where: {\n                        shopId: this.sourceShopId,\n                        productId\n                    },\n                    transaction\n                });\n\n                if (!sourceInventory || sourceInventory.get('quantity') < quantity) {\n                    throw new Error(`Insufficient inventory for product ${productId} in source shop`);\n                }\n\n                await sourceInventory.decrement('quantity', {\n                    by: quantity,\n                    transaction\n                });\n\n                // Increment destination inventory (or create if not exists)\n                const [destInventory, _created] = await InventoryItem.findOrCreate({\n                    where: {\n                        shopId: this.destinationShopId,\n                        productId\n                    },\n                    defaults: {\n                        shopId: this.destinationShopId,\n                        productId,\n                        quantity: 0,\n                        reorderLevel: sourceInventory.get('reorderLevel')\n                    },\n                    transaction\n                });\n\n                await destInventory.increment('quantity', {\n                    by: quantity,\n                    transaction\n                });\n            }\n\n            // Update transfer status\n            await this.update({\n                status: 'completed',\n                completedAt: new Date()\n            }, { transaction });\n\n            // Commit transaction\n            await transaction.commit();\n            return true;\n        } catch (error) {\n            // Rollback transaction on error\n            await transaction.rollback();\n            console.error('Transfer completion failed:', error);\n            return false;\n        }\n    }\n\n    public async cancelTransfer(): Promise<boolean> {\n        // Only pending transfers can be cancelled\n        if (this.status !== 'pending') {\n            return false;\n        }\n\n        // Update transfer status\n        await this.update({\n            status: 'cancelled'\n        });\n\n        return true;\n    }\n}\n\nInventoryTransfer.init({\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    sourceShopId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    destinationShopId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    initiatedByUserId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    status: {\n        type: DataTypes.ENUM('pending', 'completed', 'cancelled'),\n        allowNull: false,\n        defaultValue: 'pending'\n    },\n    completedAt: {\n        type: DataTypes.DATE,\n        allowNull: true\n    }\n}, {\n    sequelize,\n    modelName: 'inventory_transfer',\n    tableName: 'inventory_transfers',\n    timestamps: true,\n    validate: {\n        differentShops() {\n            if (this.sourceShopId === this.destinationShopId) {\n                throw new Error('Source and destination shops must be different');\n            }\n        }\n    }\n});\n\nexport default InventoryTransfer;\n\n/**\n * Represents an inventory transfer between shops\n */\nexport interface InventoryTransfer {\n    id: number;\n    sourceShopId: number;\n    destinationShopId: number;\n    initiatedByUserId: number;\n    status: 'pending' | 'completed' | 'cancelled';\n    createdAt: string;\n    updatedAt: string;\n    completedAt: string | null;\n}\n\n/**\n * Represents an item in an inventory transfer\n */\nexport interface TransferItem {\n    id: number;\n    transferId: number;\n    productId: number;\n    quantity: number;\n    notes: string | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\n/**\n * Represents a transfer with additional details for display\n */\nexport interface TransferWithDetails extends InventoryTransfer {\n    sourceShopName: string;\n    destinationShopName: string;\n    initiatedBy: string;\n    items: TransferItemWithDetails[];\n}\n\n/**\n * Represents a transfer item with additional details for display\n */\nexport interface TransferItemWithDetails extends TransferItem {\n    productName: string;\n    sku: string;\n    retailPrice: string;\n}"],"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","ignoreList":[]}