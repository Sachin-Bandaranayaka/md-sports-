fa6377062d5d00707ac45f9499286198
"use strict";

/* istanbul ignore next */
function cov_56chlrg6k() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/[id]/route.ts";
  var hash = "1af2f6c5372998afa2eb97371661455217d0dc91";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 92
        }
      },
      "9": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "10": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 69
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "13": {
        start: {
          line: 33,
          column: 28
        },
        end: {
          line: 33,
          column: 91
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 31
        }
      },
      "16": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "17": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "20": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "21": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "22": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 77
        }
      },
      "25": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "26": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 93
        }
      },
      "27": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "28": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 31
        }
      },
      "29": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "30": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 45
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "32": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "33": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "34": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "35": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "36": {
        start: {
          line: 110,
          column: 21
        },
        end: {
          line: 110,
          column: 37
        }
      },
      "37": {
        start: {
          line: 111,
          column: 92
        },
        end: {
          line: 111,
          column: 96
        }
      },
      "38": {
        start: {
          line: 113,
          column: 31
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "39": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "40": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 77
        }
      },
      "41": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "42": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 150,
          column: 93
        }
      },
      "43": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 31
        }
      },
      "45": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "46": {
        start: {
          line: 156,
          column: 22
        },
        end: {
          line: 156,
          column: 78
        }
      },
      "47": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "48": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "49": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 59
        }
      },
      "50": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "51": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "52": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 45
        }
      },
      "53": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "54": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "55": {
        start: {
          line: 183,
          column: 24
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "56": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "57": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "58": {
        start: {
          line: 201,
          column: 29
        },
        end: {
          line: 201,
          column: 61
        }
      },
      "59": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 203,
          column: 10
        }
      },
      "60": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "61": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 77
        }
      },
      "62": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 18
          }
        },
        loc: {
          start: {
            line: 32,
            column: 36
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 32
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 18
          }
        },
        loc: {
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 82
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 149,
            column: 15
          },
          end: {
            line: 149,
            column: 21
          }
        },
        loc: {
          start: {
            line: 149,
            column: 39
          },
          end: {
            line: 217,
            column: 1
          }
        },
        line: 149
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 118,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 43
          },
          end: {
            line: 118,
            column: 47
          }
        }, {
          start: {
            line: 118,
            column: 50
          },
          end: {
            line: 118,
            column: 70
          }
        }],
        line: 118
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 119,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 41
          },
          end: {
            line: 119,
            column: 44
          }
        }, {
          start: {
            line: 119,
            column: 47
          },
          end: {
            line: 119,
            column: 66
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 49
          },
          end: {
            line: 120,
            column: 56
          }
        }, {
          start: {
            line: 120,
            column: 59
          },
          end: {
            line: 120,
            column: 82
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 29
          },
          end: {
            line: 121,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 57
          },
          end: {
            line: 121,
            column: 68
          }
        }, {
          start: {
            line: 121,
            column: 71
          },
          end: {
            line: 121,
            column: 98
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 23
          },
          end: {
            line: 122,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 45
          },
          end: {
            line: 122,
            column: 50
          }
        }, {
          start: {
            line: 122,
            column: 53
          },
          end: {
            line: 122,
            column: 74
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 123,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 73
          },
          end: {
            line: 123,
            column: 92
          }
        }, {
          start: {
            line: 123,
            column: 95
          },
          end: {
            line: 123,
            column: 130
          }
        }],
        line: 123
      },
      "14": {
        loc: {
          start: {
            line: 124,
            column: 28
          },
          end: {
            line: 124,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 55
          },
          end: {
            line: 124,
            column: 65
          }
        }, {
          start: {
            line: 124,
            column: 68
          },
          end: {
            line: 124,
            column: 94
          }
        }],
        line: 124
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "17": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "18": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "19": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// GET: Get product by ID\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const product = await prisma.product.findUnique({\n            where: {\n                id: productId\n            },\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        if (!product) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json({\n            success: true,\n            product\n        });\n    } catch (error) {\n        console.error(`Error fetching product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch product' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT: Update product\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const existingProduct = await prisma.product.findUnique({\n            where: {\n                id: productId\n            }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price,\n            weightedAverageCost,  // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Update product\n        const updatedProduct = await prisma.product.update({\n            where: {\n                id: productId\n            },\n            data: {\n                name: name !== undefined ? name : existingProduct.name,\n                sku: sku !== undefined ? sku : existingProduct.sku,\n                barcode: barcode !== undefined ? barcode : existingProduct.barcode,\n                description: description !== undefined ? description : existingProduct.description,\n                price: price !== undefined ? price : existingProduct.price,\n                weightedAverageCost: weightedAverageCost !== undefined ? weightedAverageCost : existingProduct.weightedAverageCost,\n                categoryId: categoryId !== undefined ? categoryId : existingProduct.categoryId\n            },\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update product' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete product\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Get user from token for audit logging\n        const token = req.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json(\n                { success: false, message: 'No token provided' },\n                { status: 401 }\n            );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid token' },\n                { status: 401 }\n            );\n        }\n\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const product = await prisma.product.findUnique({\n            where: {\n                id: productId\n            },\n            include: {\n                category: true,\n                inventoryItems: true\n            }\n        });\n\n        if (!product) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        // Use audit service for soft delete\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Product',\n            productId,\n            decoded.userId,\n            product,\n            true // canRecover\n        );\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product moved to recycle bin successfully'\n        });\n    } catch (error) {\n        console.error(`Error deleting product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete product' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "req", "params", "permissionError", "requirePermission", "productId", "parseInt", "id", "isNaN", "NextResponse", "json", "success", "message", "status", "product", "prisma", "findUnique", "where", "include", "category", "select", "name", "error", "console", "existingProduct", "body", "sku", "barcode", "description", "price", "weightedAverageCost", "categoryId", "updatedProduct", "update", "data", "undefined", "token", "headers", "get", "replace", "decoded", "verifyToken", "inventoryItems", "auditService", "AuditService", "softDelete", "userId"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1af2f6c5372998afa2eb97371661455217d0dc91"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_56chlrg6k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_56chlrg6k();
cov_56chlrg6k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_56chlrg6k().f[0]++;
  cov_56chlrg6k().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_56chlrg6k().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_56chlrg6k().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_56chlrg6k().f[1]++;
    cov_56chlrg6k().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_56chlrg6k().f[2]++;
    cov_56chlrg6k().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_56chlrg6k().f[3]++;
    cov_56chlrg6k().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_56chlrg6k().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_56chlrg6k().s[8]++, _interop_require_default(require("../../../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_56chlrg6k().s[9]++, require("../../../../../lib/utils/middleware"));
const _auditService =
/* istanbul ignore next */
(cov_56chlrg6k().s[10]++, require("../../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_56chlrg6k().s[11]++, require("../../../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_56chlrg6k().f[4]++;
  cov_56chlrg6k().s[12]++;
  return /* istanbul ignore next */(cov_56chlrg6k().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_56chlrg6k().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_56chlrg6k().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_56chlrg6k().b[0][1]++, {
    default: obj
  });
}
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_56chlrg6k().f[5]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_56chlrg6k().s[13]++, await (0, _middleware.requirePermission)("inventory:view")(req));
  /* istanbul ignore next */
  cov_56chlrg6k().s[14]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_56chlrg6k().b[2][0]++;
    cov_56chlrg6k().s[15]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_56chlrg6k().b[2][1]++;
  }
  cov_56chlrg6k().s[16]++;
  try {
    const productId =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[17]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_56chlrg6k().s[18]++;
    if (isNaN(productId)) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[3][0]++;
      cov_56chlrg6k().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[3][1]++;
    }
    const product =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[20]++, await _prisma.default.product.findUnique({
      where: {
        id: productId
      },
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_56chlrg6k().s[21]++;
    if (!product) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[4][0]++;
      cov_56chlrg6k().s[22]++;
      return _server.NextResponse.json({
        success: false,
        message: "Product not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[4][1]++;
    }
    cov_56chlrg6k().s[23]++;
    return _server.NextResponse.json({
      success: true,
      product
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_56chlrg6k().s[24]++;
    console.error(`Error fetching product with ID ${params.id}:`, error);
    /* istanbul ignore next */
    cov_56chlrg6k().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch product"
    }, {
      status: 500
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_56chlrg6k().f[6]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_56chlrg6k().s[26]++, await (0, _middleware.requirePermission)("inventory:manage")(req));
  /* istanbul ignore next */
  cov_56chlrg6k().s[27]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_56chlrg6k().b[5][0]++;
    cov_56chlrg6k().s[28]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_56chlrg6k().b[5][1]++;
  }
  cov_56chlrg6k().s[29]++;
  try {
    const productId =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[30]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_56chlrg6k().s[31]++;
    if (isNaN(productId)) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[6][0]++;
      cov_56chlrg6k().s[32]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[6][1]++;
    }
    const existingProduct =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[33]++, await _prisma.default.product.findUnique({
      where: {
        id: productId
      }
    }));
    /* istanbul ignore next */
    cov_56chlrg6k().s[34]++;
    if (!existingProduct) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[7][0]++;
      cov_56chlrg6k().s[35]++;
      return _server.NextResponse.json({
        success: false,
        message: "Product not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[7][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[36]++, await req.json());
    const {
      name,
      sku,
      barcode,
      description,
      price,
      weightedAverageCost,
      categoryId
    } =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[37]++, body);
    // Update product
    const updatedProduct =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[38]++, await _prisma.default.product.update({
      where: {
        id: productId
      },
      data: {
        name: name !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[8][0]++, name) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[8][1]++, existingProduct.name),
        sku: sku !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[9][0]++, sku) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[9][1]++, existingProduct.sku),
        barcode: barcode !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[10][0]++, barcode) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[10][1]++, existingProduct.barcode),
        description: description !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[11][0]++, description) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[11][1]++, existingProduct.description),
        price: price !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[12][0]++, price) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[12][1]++, existingProduct.price),
        weightedAverageCost: weightedAverageCost !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[13][0]++, weightedAverageCost) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[13][1]++, existingProduct.weightedAverageCost),
        categoryId: categoryId !== undefined ?
        /* istanbul ignore next */
        (cov_56chlrg6k().b[14][0]++, categoryId) :
        /* istanbul ignore next */
        (cov_56chlrg6k().b[14][1]++, existingProduct.categoryId)
      },
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_56chlrg6k().s[39]++;
    return _server.NextResponse.json({
      success: true,
      product: updatedProduct
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_56chlrg6k().s[40]++;
    console.error(`Error updating product with ID ${params.id}:`, error);
    /* istanbul ignore next */
    cov_56chlrg6k().s[41]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to update product"
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_56chlrg6k().f[7]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_56chlrg6k().s[42]++, await (0, _middleware.requirePermission)("inventory:manage")(req));
  /* istanbul ignore next */
  cov_56chlrg6k().s[43]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_56chlrg6k().b[15][0]++;
    cov_56chlrg6k().s[44]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_56chlrg6k().b[15][1]++;
  }
  cov_56chlrg6k().s[45]++;
  try {
    // Get user from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[46]++, req.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_56chlrg6k().s[47]++;
    if (!token) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[16][0]++;
      cov_56chlrg6k().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[16][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[49]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_56chlrg6k().s[50]++;
    if (!decoded) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[17][0]++;
      cov_56chlrg6k().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[17][1]++;
    }
    const productId =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[52]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_56chlrg6k().s[53]++;
    if (isNaN(productId)) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[18][0]++;
      cov_56chlrg6k().s[54]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[18][1]++;
    }
    const product =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[55]++, await _prisma.default.product.findUnique({
      where: {
        id: productId
      },
      include: {
        category: true,
        inventoryItems: true
      }
    }));
    /* istanbul ignore next */
    cov_56chlrg6k().s[56]++;
    if (!product) {
      /* istanbul ignore next */
      cov_56chlrg6k().b[19][0]++;
      cov_56chlrg6k().s[57]++;
      return _server.NextResponse.json({
        success: false,
        message: "Product not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_56chlrg6k().b[19][1]++;
    }
    // Use audit service for soft delete
    const auditService =
    /* istanbul ignore next */
    (cov_56chlrg6k().s[58]++, new _auditService.AuditService());
    /* istanbul ignore next */
    cov_56chlrg6k().s[59]++;
    await auditService.softDelete("Product", productId, decoded.userId, product, true // canRecover
    );
    /* istanbul ignore next */
    cov_56chlrg6k().s[60]++;
    return _server.NextResponse.json({
      success: true,
      message: "Product moved to recycle bin successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_56chlrg6k().s[61]++;
    console.error(`Error deleting product with ID ${params.id}:`, error);
    /* istanbul ignore next */
    cov_56chlrg6k().s[62]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to delete product"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,