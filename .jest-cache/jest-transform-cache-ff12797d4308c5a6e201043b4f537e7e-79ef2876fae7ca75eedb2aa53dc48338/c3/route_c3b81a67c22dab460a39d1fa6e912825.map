{"version":3,"names":["DELETE","cov_56chlrg6k","f","s","GET","PUT","req","params","permissionError","_middleware","requirePermission","b","productId","parseInt","id","isNaN","_server","NextResponse","json","success","message","status","product","_prisma","default","findUnique","where","include","category","select","name","error","console","existingProduct","body","sku","barcode","description","price","weightedAverageCost","categoryId","updatedProduct","update","data","undefined","token","headers","get","replace","decoded","_auth","verifyToken","inventoryItems","auditService","_auditService","AuditService","softDelete","userId"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// GET: Get product by ID\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const product = await prisma.product.findUnique({\n            where: {\n                id: productId\n            },\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        if (!product) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json({\n            success: true,\n            product\n        });\n    } catch (error) {\n        console.error(`Error fetching product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch product' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT: Update product\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const existingProduct = await prisma.product.findUnique({\n            where: {\n                id: productId\n            }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price,\n            weightedAverageCost,  // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Update product\n        const updatedProduct = await prisma.product.update({\n            where: {\n                id: productId\n            },\n            data: {\n                name: name !== undefined ? name : existingProduct.name,\n                sku: sku !== undefined ? sku : existingProduct.sku,\n                barcode: barcode !== undefined ? barcode : existingProduct.barcode,\n                description: description !== undefined ? description : existingProduct.description,\n                price: price !== undefined ? price : existingProduct.price,\n                weightedAverageCost: weightedAverageCost !== undefined ? weightedAverageCost : existingProduct.weightedAverageCost,\n                categoryId: categoryId !== undefined ? categoryId : existingProduct.categoryId\n            },\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update product' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete product\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Get user from token for audit logging\n        const token = req.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json(\n                { success: false, message: 'No token provided' },\n                { status: 401 }\n            );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid token' },\n                { status: 401 }\n            );\n        }\n\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        const product = await prisma.product.findUnique({\n            where: {\n                id: productId\n            },\n            include: {\n                category: true,\n                inventoryItems: true\n            }\n        });\n\n        if (!product) {\n            return NextResponse.json(\n                { success: false, message: 'Product not found' },\n                { status: 404 }\n            );\n        }\n\n        // Use audit service for soft delete\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Product',\n            productId,\n            decoded.userId,\n            product,\n            true // canRecover\n        );\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product moved to recycle bin successfully'\n        });\n    } catch (error) {\n        console.error(`Error deleting product with ID ${params.id}:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete product' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}