{"version":3,"names":["cov_2olsk8ksg4","actualCoverage","s","GET","request","f","now","Date","firstDayOfMonth","getFullYear","getMonth","lastDayOfMonth","invoiceItems","_prisma","prisma","invoiceItem","findMany","where","invoice","status","createdAt","gte","lte","include","product","category","length","b","_server","NextResponse","json","success","details","summary","month","toLocaleString","year","overallTotalRevenue","overallTotalProductsSold","numberOfCategoriesWithSales","generatedAt","toISOString","message","productPerformance","forEach","item","productIdString","productId","toString","productName","name","sku","categoryId","categoryName","totalQuantitySold","totalSalesAmount","quantity","total","categoryPerformanceIntermediate","Object","values","categoryNameKey","products","totalCategorySales","totalCategoryQuantity","push","catName","sort","a","reportDetails","reduce","sum","cat","error","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/reports/product-performance/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const invoiceItems = await prisma.invoiceItem.findMany({\n            where: {\n                invoice: {\n                    status: 'paid', // Consider only paid invoices for sales performance\n                    createdAt: {\n                        gte: firstDayOfMonth,\n                        lte: lastDayOfMonth,\n                    },\n                },\n            },\n            include: {\n                product: {\n                    include: {\n                        category: true, // Include category information\n                    },\n                },\n                invoice: true, // To confirm invoice date and status if needed for double check\n            },\n        });\n\n        if (invoiceItems.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [], // Will be an array of categories, each with a products array\n                summary: {\n                    month: now.toLocaleString('default', { month: 'long' }),\n                    year: now.getFullYear(),\n                    overallTotalRevenue: 0,\n                    overallTotalProductsSold: 0,\n                    numberOfCategoriesWithSales: 0\n                },\n                generatedAt: new Date().toISOString(),\n                message: 'No sales data found for products in the current month.'\n            });\n        }\n\n        // Aggregate data by product\n        const productPerformance: Record<string, {\n            productId: number;\n            productName: string;\n            sku: string | null;\n            categoryId: number | null;\n            categoryName: string;\n            totalQuantitySold: number;\n            totalSalesAmount: number;\n        }> = {};\n\n        invoiceItems.forEach(item => {\n            const productIdString = item.productId.toString(); // Use string for object key\n            if (!productPerformance[productIdString]) {\n                productPerformance[productIdString] = {\n                    productId: item.productId,\n                    productName: item.product.name,\n                    sku: item.product.sku,\n                    categoryId: item.product.categoryId,\n                    categoryName: item.product.category?.name || 'Uncategorized',\n                    totalQuantitySold: 0,\n                    totalSalesAmount: 0,\n                };\n            }\n            productPerformance[productIdString].totalQuantitySold += item.quantity;\n            productPerformance[productIdString].totalSalesAmount += item.total;\n        });\n\n        // Further group by category\n        const categoryPerformanceIntermediate: Record<string, { categoryName: string; products: any[]; totalCategorySales: number; totalCategoryQuantity: number; }> = {};\n        Object.values(productPerformance).forEach(product => {\n            const categoryNameKey = product.categoryName; // Use category name as key\n\n            if (!categoryPerformanceIntermediate[categoryNameKey]) {\n                categoryPerformanceIntermediate[categoryNameKey] = {\n                    categoryName: product.categoryName,\n                    products: [],\n                    totalCategorySales: 0,\n                    totalCategoryQuantity: 0,\n                };\n            }\n            categoryPerformanceIntermediate[categoryNameKey].products.push(product);\n            categoryPerformanceIntermediate[categoryNameKey].totalCategorySales += product.totalSalesAmount;\n            categoryPerformanceIntermediate[categoryNameKey].totalCategoryQuantity += product.totalQuantitySold;\n        });\n\n        // Sort products within each category by sales amount\n        for (const catName in categoryPerformanceIntermediate) {\n            categoryPerformanceIntermediate[catName].products.sort((a, b) => b.totalSalesAmount - a.totalSalesAmount);\n        }\n\n        // Convert intermediate object to array and sort categories by sales amount\n        const reportDetails = Object.values(categoryPerformanceIntermediate).sort((a, b) => b.totalCategorySales - a.totalCategorySales);\n\n        const overallTotalRevenue = reportDetails.reduce((sum, cat) => sum + cat.totalCategorySales, 0);\n        const overallTotalProductsSold = reportDetails.reduce((sum, cat) => sum + cat.totalCategoryQuantity, 0);\n\n        return NextResponse.json({\n            success: true,\n            details: reportDetails, // Array of categories, each with products array\n            summary: {\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n                overallTotalRevenue: overallTotalRevenue,\n                overallTotalProductsSold: overallTotalProductsSold,\n                numberOfCategoriesWithSales: reportDetails.length,\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching product performance report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch product performance report', error: error.message },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}