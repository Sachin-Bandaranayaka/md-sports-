539155784935096d8975bcedff0790b5
"use strict";

/* istanbul ignore next */
function cov_hg7xun5ii() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/reset-password/route.ts";
  var hash = "bec7f6b48fb87f1f108c01a788d9aced9d0dcd53";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/reset-password/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 66
        }
      },
      "5": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 77
        }
      },
      "6": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 92
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 28
        },
        end: {
          line: 21,
          column: 88
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 42
        }
      },
      "13": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "15": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "16": {
        start: {
          line: 38,
          column: 31
        },
        end: {
          line: 38,
          column: 76
        }
      },
      "17": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "19": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "21": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 58
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "23": {
        start: {
          line: 73,
          column: 19
        },
        end: {
          line: 73,
          column: 21
        }
      },
      "24": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 92
        }
      },
      "25": {
        start: {
          line: 75,
          column: 19
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "26": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 77
        }
      },
      "27": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "28": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 61
        }
      },
      "29": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 58
        }
      },
      "30": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "31": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 31
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 72
        }
      },
      "33": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 69
        }
      },
      "34": {
        start: {
          line: 86,
          column: 39
        },
        end: {
          line: 86,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 19
          }
        },
        loc: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "generateTemporaryPassword",
        decl: {
          start: {
            line: 72,
            column: 9
          },
          end: {
            line: 72,
            column: 34
          }
        },
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 36
          }
        },
        loc: {
          start: {
            line: 86,
            column: 39
          },
          end: {
            line: 86,
            column: 58
          }
        },
        line: 86
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/reset-password/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\n\n// POST: Reset user password\nexport async function POST(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Parse the ID as a number\n        const userId = parseInt(params.id);\n\n        if (isNaN(userId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid user ID' },\n                { status: 400 }\n            );\n        }\n\n        // Generate a new temporary password\n        const newPassword = generateTemporaryPassword();\n        const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n        // Update user password using Prisma\n        const updatedUser = await prisma.user.update({\n            where: { id: userId },\n            data: { password: hashedPassword }\n        });\n\n        if (!updatedUser) {\n            return NextResponse.json(\n                { success: false, message: 'User not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: 'Password reset successfully',\n            newPassword: newPassword // In production, this should be sent via email instead\n        });\n    } catch (error) {\n        console.error('Error resetting password:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to reset password' },\n            { status: 500 }\n        );\n    }\n}\n\n// Generate a temporary password\nfunction generateTemporaryPassword(): string {\n    const length = 12;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n\n    // Ensure at least one of each type\n    password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];\n    password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];\n    password += '0123456789'[Math.floor(Math.random() * 10)];\n    password += '!@#$%^&*'[Math.floor(Math.random() * 8)];\n\n    // Fill the rest randomly\n    for (let i = password.length; i < length; i++) {\n        password += charset[Math.floor(Math.random() * charset.length)];\n    }\n\n    // Shuffle the password\n    return password.split('').sort(() => Math.random() - 0.5).join('');\n}"],
      names: ["POST", "req", "params", "permissionError", "requirePermission", "userId", "parseInt", "id", "isNaN", "NextResponse", "json", "success", "message", "status", "newPassword", "generateTemporaryPassword", "hashedPassword", "bcrypt", "hash", "updatedUser", "prisma", "user", "update", "where", "data", "password", "error", "console", "length", "charset", "Math", "floor", "random", "i", "split", "sort", "join"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;4BACR;iEACf;+DACA;;;;;;AAGZ,eAAeA,KAClBC,GAAgB,EAChB,EAAEC,MAAM,EAA8B;IAEtC,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeH;IAC/D,IAAIE,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,2BAA2B;QAC3B,MAAME,SAASC,SAASJ,OAAOK,EAAE;QAEjC,IAAIC,MAAMH,SAAS;YACf,OAAOI,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAkB,GAC7C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,oCAAoC;QACpC,MAAMC,cAAcC;QACpB,MAAMC,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACJ,aAAa;QAEtD,oCAAoC;QACpC,MAAMK,cAAc,MAAMC,eAAM,CAACC,IAAI,CAACC,MAAM,CAAC;YACzCC,OAAO;gBAAEhB,IAAIF;YAAO;YACpBmB,MAAM;gBAAEC,UAAUT;YAAe;QACrC;QAEA,IAAI,CAACG,aAAa;YACd,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAiB,GAC5C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTE,aAAaA,YAAY,uDAAuD;QACpF;IACJ,EAAE,OAAOY,OAAO;QACZC,QAAQD,KAAK,CAAC,6BAA6BA;QAC3C,OAAOjB,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA2B,GACtD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAEA,gCAAgC;AAChC,SAASE;IACL,MAAMa,SAAS;IACf,MAAMC,UAAU;IAChB,IAAIJ,WAAW;IAEf,mCAAmC;IACnCA,YAAY,4BAA4B,CAACK,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK,IAAI;IACxEP,YAAY,4BAA4B,CAACK,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK,IAAI;IACxEP,YAAY,YAAY,CAACK,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK,IAAI;IACxDP,YAAY,UAAU,CAACK,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK,GAAG;IAErD,yBAAyB;IACzB,IAAK,IAAIC,IAAIR,SAASG,MAAM,EAAEK,IAAIL,QAAQK,IAAK;QAC3CR,YAAYI,OAAO,CAACC,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAKH,QAAQD,MAAM,EAAE;IACnE;IAEA,uBAAuB;IACvB,OAAOH,SAASS,KAAK,CAAC,IAAIC,IAAI,CAAC,IAAML,KAAKE,MAAM,KAAK,KAAKI,IAAI,CAAC;AACnE"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bec7f6b48fb87f1f108c01a788d9aced9d0dcd53"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hg7xun5ii = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hg7xun5ii();
cov_hg7xun5ii().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hg7xun5ii().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_hg7xun5ii().f[0]++;
    cov_hg7xun5ii().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_hg7xun5ii().s[3]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_hg7xun5ii().s[4]++, require("../../../../../lib/utils/middleware"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_hg7xun5ii().s[5]++, _interop_require_default(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_hg7xun5ii().s[6]++, _interop_require_default(require("../../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_hg7xun5ii().f[1]++;
  cov_hg7xun5ii().s[7]++;
  return /* istanbul ignore next */(cov_hg7xun5ii().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_hg7xun5ii().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_hg7xun5ii().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_hg7xun5ii().b[0][1]++, {
    default: obj
  });
}
async function POST(req, {
  params
}) {
  /* istanbul ignore next */
  cov_hg7xun5ii().f[2]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_hg7xun5ii().s[8]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_hg7xun5ii().s[9]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_hg7xun5ii().b[2][0]++;
    cov_hg7xun5ii().s[10]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_hg7xun5ii().b[2][1]++;
  }
  cov_hg7xun5ii().s[11]++;
  try {
    // Parse the ID as a number
    const userId =
    /* istanbul ignore next */
    (cov_hg7xun5ii().s[12]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_hg7xun5ii().s[13]++;
    if (isNaN(userId)) {
      /* istanbul ignore next */
      cov_hg7xun5ii().b[3][0]++;
      cov_hg7xun5ii().s[14]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid user ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_hg7xun5ii().b[3][1]++;
    }
    // Generate a new temporary password
    const newPassword =
    /* istanbul ignore next */
    (cov_hg7xun5ii().s[15]++, generateTemporaryPassword());
    const hashedPassword =
    /* istanbul ignore next */
    (cov_hg7xun5ii().s[16]++, await _bcryptjs.default.hash(newPassword, 12));
    // Update user password using Prisma
    const updatedUser =
    /* istanbul ignore next */
    (cov_hg7xun5ii().s[17]++, await _prisma.default.user.update({
      where: {
        id: userId
      },
      data: {
        password: hashedPassword
      }
    }));
    /* istanbul ignore next */
    cov_hg7xun5ii().s[18]++;
    if (!updatedUser) {
      /* istanbul ignore next */
      cov_hg7xun5ii().b[4][0]++;
      cov_hg7xun5ii().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_hg7xun5ii().b[4][1]++;
    }
    cov_hg7xun5ii().s[20]++;
    return _server.NextResponse.json({
      success: true,
      message: "Password reset successfully",
      newPassword: newPassword // In production, this should be sent via email instead
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hg7xun5ii().s[21]++;
    console.error("Error resetting password:", error);
    /* istanbul ignore next */
    cov_hg7xun5ii().s[22]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to reset password"
    }, {
      status: 500
    });
  }
}
// Generate a temporary password
function generateTemporaryPassword() {
  /* istanbul ignore next */
  cov_hg7xun5ii().f[3]++;
  const length =
  /* istanbul ignore next */
  (cov_hg7xun5ii().s[23]++, 12);
  const charset =
  /* istanbul ignore next */
  (cov_hg7xun5ii().s[24]++, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*");
  let password =
  /* istanbul ignore next */
  (cov_hg7xun5ii().s[25]++, "");
  // Ensure at least one of each type
  /* istanbul ignore next */
  cov_hg7xun5ii().s[26]++;
  password += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random() * 26)];
  /* istanbul ignore next */
  cov_hg7xun5ii().s[27]++;
  password += "abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random() * 26)];
  /* istanbul ignore next */
  cov_hg7xun5ii().s[28]++;
  password += "0123456789"[Math.floor(Math.random() * 10)];
  /* istanbul ignore next */
  cov_hg7xun5ii().s[29]++;
  password += "!@#$%^&*"[Math.floor(Math.random() * 8)];
  // Fill the rest randomly
  /* istanbul ignore next */
  cov_hg7xun5ii().s[30]++;
  for (let i =
  /* istanbul ignore next */
  (cov_hg7xun5ii().s[31]++, password.length); i < length; i++) {
    /* istanbul ignore next */
    cov_hg7xun5ii().s[32]++;
    password += charset[Math.floor(Math.random() * charset.length)];
  }
  // Shuffle the password
  /* istanbul ignore next */
  cov_hg7xun5ii().s[33]++;
  return password.split("").sort(() => {
    /* istanbul ignore next */
    cov_hg7xun5ii().f[4]++;
    cov_hg7xun5ii().s[34]++;
    return Math.random() - 0.5;
  }).join("");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,