b0035492d5c7a4b27a6cdc6bd3ac910f
"use strict";

/* istanbul ignore next */
function cov_1o8z6llikg() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/categories/route.ts";
  var hash = "be701945be97841e4bed4e627b36bec9effb387e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/categories/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 45
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 51
        }
      },
      "10": {
        start: {
          line: 23,
          column: 39
        },
        end: {
          line: 23,
          column: 51
        }
      },
      "11": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 24,
          column: 41
        }
      },
      "12": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "13": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 20
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "15": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "17": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "18": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "19": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 53
        }
      },
      "20": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 30
        }
      },
      "22": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "23": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 46,
          column: 88
        }
      },
      "24": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "25": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "26": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 95
        }
      },
      "27": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "28": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 57
        }
      },
      "29": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 39
        }
      },
      "30": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 25
        }
      },
      "31": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "32": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 31
        }
      },
      "33": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 18
        }
      },
      "34": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 100,
          column: 1
        }
      },
      "35": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "36": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 124,
          column: 71
        }
      },
      "37": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 110,
          column: 14
        }
      },
      "38": {
        start: {
          line: 112,
          column: 36
        },
        end: {
          line: 115,
          column: 19
        }
      },
      "39": {
        start: {
          line: 112,
          column: 69
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "40": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 20
        }
      },
      "41": {
        start: {
          line: 117,
          column: 50
        },
        end: {
          line: 123,
          column: 17
        }
      },
      "42": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "43": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 67
        }
      },
      "44": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 135,
          column: 11
        }
      },
      "45": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 214,
          column: 5
        }
      },
      "46": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 63
        }
      },
      "47": {
        start: {
          line: 142,
          column: 22
        },
        end: {
          line: 142,
          column: 84
        }
      },
      "48": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "50": {
        start: {
          line: 150,
          column: 34
        },
        end: {
          line: 150,
          column: 102
        }
      },
      "51": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "52": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 157,
          column: 19
        }
      },
      "53": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 80
        }
      },
      "54": {
        start: {
          line: 163,
          column: 21
        },
        end: {
          line: 163,
          column: 41
        }
      },
      "55": {
        start: {
          line: 164,
          column: 48
        },
        end: {
          line: 164,
          column: 52
        }
      },
      "56": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "57": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "58": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "59": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "60": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "61": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 197,
          column: 10
        }
      },
      "62": {
        start: {
          line: 199,
          column: 33
        },
        end: {
          line: 199,
          column: 140
        }
      },
      "63": {
        start: {
          line: 199,
          column: 80
        },
        end: {
          line: 199,
          column: 139
        }
      },
      "64": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 53
        }
      },
      "65": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "66": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 57
        }
      },
      "67": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 26,
            column: 40
          }
        },
        loc: {
          start: {
            line: 26,
            column: 61
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 34
          }
        },
        loc: {
          start: {
            line: 30,
            column: 53
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 101,
            column: 15
          },
          end: {
            line: 101,
            column: 18
          }
        },
        loc: {
          start: {
            line: 101,
            column: 21
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 101
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 104,
            column: 56
          },
          end: {
            line: 104,
            column: 57
          }
        },
        loc: {
          start: {
            line: 104,
            column: 66
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 104
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 112,
            column: 62
          },
          end: {
            line: 112,
            column: 63
          }
        },
        loc: {
          start: {
            line: 112,
            column: 69
          },
          end: {
            line: 115,
            column: 17
          }
        },
        line: 112
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 117,
            column: 37
          },
          end: {
            line: 117,
            column: 38
          }
        },
        loc: {
          start: {
            line: 117,
            column: 50
          },
          end: {
            line: 123,
            column: 17
          }
        },
        line: 117
      },
      "10": {
        name: "POST",
        decl: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 138,
            column: 19
          }
        },
        loc: {
          start: {
            line: 138,
            column: 29
          },
          end: {
            line: 215,
            column: 1
          }
        },
        line: 138
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 199,
            column: 62
          },
          end: {
            line: 199,
            column: 63
          }
        },
        loc: {
          start: {
            line: 199,
            column: 80
          },
          end: {
            line: 199,
            column: 139
          }
        },
        line: 199
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 27,
            column: 45
          }
        }, {
          start: {
            line: 27,
            column: 48
          },
          end: {
            line: 27,
            column: 65
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 20
          }
        }, {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 27
          }
        }, {
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 45
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 20
          }
        }, {
          start: {
            line: 34,
            column: 24
          },
          end: {
            line: 34,
            column: 47
          }
        }, {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 76
          }
        }],
        line: 34
      },
      "6": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "7": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 31
          }
        }],
        line: 40
      },
      "8": {
        loc: {
          start: {
            line: 46,
            column: 32
          },
          end: {
            line: 46,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 32
          },
          end: {
            line: 46,
            column: 53
          }
        }, {
          start: {
            line: 46,
            column: 57
          },
          end: {
            line: 46,
            column: 88
          }
        }],
        line: 46
      },
      "9": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "10": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 29
          }
        }, {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 48,
            column: 79
          }
        }],
        line: 48
      },
      "11": {
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 49,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 88
          }
        }, {
          start: {
            line: 49,
            column: 91
          },
          end: {
            line: 49,
            column: 95
          }
        }],
        line: 49
      },
      "12": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 54,
            column: 13
          }
        }],
        line: 50
      },
      "13": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 20
          }
        }, {
          start: {
            line: 50,
            column: 25
          },
          end: {
            line: 50,
            column: 33
          }
        }, {
          start: {
            line: 50,
            column: 37
          },
          end: {
            line: 50,
            column: 45
          }
        }],
        line: 50
      },
      "14": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 53
          },
          end: {
            line: 122,
            column: 91
          }
        }, {
          start: {
            line: 122,
            column: 94
          },
          end: {
            line: 122,
            column: 98
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 22
          },
          end: {
            line: 142,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 58
          },
          end: {
            line: 142,
            column: 77
          }
        }, {
          start: {
            line: 142,
            column: 80
          },
          end: {
            line: 142,
            column: 84
          }
        }],
        line: 142
      },
      "17": {
        loc: {
          start: {
            line: 145,
            column: 19
          },
          end: {
            line: 145,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 27
          },
          end: {
            line: 145,
            column: 57
          }
        }, {
          start: {
            line: 145,
            column: 60
          },
          end: {
            line: 145,
            column: 64
          }
        }],
        line: 145
      },
      "18": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 159,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 148
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "21": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "22": {
        loc: {
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 194,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 194,
            column: 40
          }
        }, {
          start: {
            line: 194,
            column: 44
          },
          end: {
            line: 194,
            column: 48
          }
        }],
        line: 194
      },
      "23": {
        loc: {
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 34
          }
        }, {
          start: {
            line: 195,
            column: 38
          },
          end: {
            line: 195,
            column: 42
          }
        }],
        line: 195
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/categories/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for categories\nconst defaultCategoriesData = [\n    { id: 1, name: 'Sports Equipment', description: 'All sports equipment', parent_id: null, parent_name: null },\n    { id: 2, name: 'Cricket', description: 'Cricket equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 3, name: 'Football', description: 'Football equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 4, name: 'Basketball', description: 'Basketball equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 5, name: 'Tennis', description: 'Tennis equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n];\n\n// GET: Fetch all product categories\nexport async function GET() {\n    try {\n        // Query to get all categories with their parent information\n        const categories = await safeQuery(\n            async () => {\n                // First fetch all categories\n                const allCategories = await prisma.category.findMany({\n                    orderBy: {\n                        name: 'asc'\n                    }\n                });\n\n                // Map of category IDs to names for parent lookup\n                const categoryNameMap = new Map(\n                    allCategories.map(cat => [cat.id, cat.name])\n                );\n\n                // Return formatted categories with parent names\n                return allCategories.map(category => ({\n                    id: category.id,\n                    name: category.name,\n                    description: category.description,\n                    parent_id: category.parentId,\n                    parent_name: category.parentId ? categoryNameMap.get(category.parentId) : null\n                }));\n            },\n            defaultCategoriesData,\n            'Failed to fetch product categories'\n        );\n\n        return NextResponse.json({\n            success: true,\n            data: categories\n        });\n    } catch (error) {\n        console.error('Error fetching product categories:', error);\n\n        // Return fallback data in case of error\n        return NextResponse.json({\n            success: true,\n            data: defaultCategoriesData\n        });\n    }\n}\n\n// POST: Create a new category\nexport async function POST(request: NextRequest) {\n    try {\n        // Check auth header for development token\n        const authHeader = request.headers.get('authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n        console.log('Create category request:', {\n            hasAuthHeader: !!authHeader,\n            token: token ? `${token.substring(0, 10)}...` : null\n        });\n\n        // Allow dev-token to bypass permission checks\n        if (token !== 'dev-token') {\n            // Verify permission\n            const hasPermission = await validateTokenPermission(request, 'category:create');\n            if (!hasPermission) {\n                return NextResponse.json(\n                    { success: false, message: 'Unauthorized: Insufficient permissions' },\n                    { status: 403 }\n                );\n            }\n        } else {\n            console.log('Using development token - bypassing permission check');\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        if (!name) {\n            return NextResponse.json(\n                { success: false, message: 'Category name is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if category with this name already exists\n        const existingCategory = await prisma.category.findFirst({\n            where: { name: { equals: name, mode: 'insensitive' } }\n        });\n\n        if (existingCategory) {\n            return NextResponse.json(\n                { success: false, message: 'A category with this name already exists' },\n                { status: 400 }\n            );\n        }\n\n        // Create the new category\n        const newCategory = await prisma.category.create({\n            data: {\n                name,\n                description: description || null,\n                parentId: parentId || null\n            }\n        });\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category created successfully',\n            data: newCategory\n        });\n    } catch (error) {\n        console.error('Error creating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create category' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "defaultCategoriesData", "id", "name", "description", "parent_id", "parent_name", "categories", "safeQuery", "allCategories", "prisma", "category", "findMany", "orderBy", "categoryNameMap", "Map", "map", "cat", "parentId", "get", "NextResponse", "json", "success", "data", "error", "console", "request", "authHeader", "headers", "token", "startsWith", "slice", "log", "hasAuthHeader", "substring", "hasPermission", "validateTokenPermission", "message", "status", "existingCategory", "findFirst", "where", "equals", "mode", "newCategory", "create", "cacheService", "invalidateReferenceData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "be701945be97841e4bed4e627b36bec9effb387e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o8z6llikg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o8z6llikg();
cov_1o8z6llikg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1o8z6llikg().f[0]++;
  cov_1o8z6llikg().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1o8z6llikg().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1o8z6llikg().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1o8z6llikg().f[1]++;
    cov_1o8z6llikg().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1o8z6llikg().f[2]++;
    cov_1o8z6llikg().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1o8z6llikg().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1o8z6llikg().s[7]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_1o8z6llikg().s[8]++, require("../../../../lib/auth"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1o8z6llikg().f[3]++;
  cov_1o8z6llikg().s[9]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1o8z6llikg().b[0][0]++;
    cov_1o8z6llikg().s[10]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1o8z6llikg().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1o8z6llikg().s[11]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1o8z6llikg().s[12]++, new WeakMap());
  /* istanbul ignore next */
  cov_1o8z6llikg().s[13]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1o8z6llikg().f[4]++;
    cov_1o8z6llikg().s[14]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1o8z6llikg().f[5]++;
  cov_1o8z6llikg().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1o8z6llikg().b[2][0]++;
    cov_1o8z6llikg().s[16]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1o8z6llikg().b[2][1]++;
  }
  cov_1o8z6llikg().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1o8z6llikg().b[4][0]++;
    cov_1o8z6llikg().s[18]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1o8z6llikg().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1o8z6llikg().s[19]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1o8z6llikg().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1o8z6llikg().b[6][0]++;
    cov_1o8z6llikg().s[21]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1o8z6llikg().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1o8z6llikg().s[22]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1o8z6llikg().s[23]++,
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1o8z6llikg().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1o8z6llikg().s[24]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1o8z6llikg().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1o8z6llikg().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1o8z6llikg().s[26]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1o8z6llikg().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1o8z6llikg().b[12][0]++;
        cov_1o8z6llikg().s[28]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1o8z6llikg().b[12][1]++;
        cov_1o8z6llikg().s[29]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o8z6llikg().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1o8z6llikg().s[30]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1o8z6llikg().s[31]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1o8z6llikg().b[14][0]++;
    cov_1o8z6llikg().s[32]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1o8z6llikg().b[14][1]++;
  }
  cov_1o8z6llikg().s[33]++;
  return newObj;
}
// Default fallback data for categories
const defaultCategoriesData =
/* istanbul ignore next */
(cov_1o8z6llikg().s[34]++, [{
  id: 1,
  name: "Sports Equipment",
  description: "All sports equipment",
  parent_id: null,
  parent_name: null
}, {
  id: 2,
  name: "Cricket",
  description: "Cricket equipment",
  parent_id: 1,
  parent_name: "Sports Equipment"
}, {
  id: 3,
  name: "Football",
  description: "Football equipment",
  parent_id: 1,
  parent_name: "Sports Equipment"
}, {
  id: 4,
  name: "Basketball",
  description: "Basketball equipment",
  parent_id: 1,
  parent_name: "Sports Equipment"
}, {
  id: 5,
  name: "Tennis",
  description: "Tennis equipment",
  parent_id: 1,
  parent_name: "Sports Equipment"
}]);
async function GET() {
  /* istanbul ignore next */
  cov_1o8z6llikg().f[6]++;
  cov_1o8z6llikg().s[35]++;
  try {
    // Query to get all categories with their parent information
    const categories =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[36]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_1o8z6llikg().f[7]++;
      // First fetch all categories
      const allCategories =
      /* istanbul ignore next */
      (cov_1o8z6llikg().s[37]++, await _prisma.prisma.category.findMany({
        orderBy: {
          name: "asc"
        }
      }));
      // Map of category IDs to names for parent lookup
      const categoryNameMap =
      /* istanbul ignore next */
      (cov_1o8z6llikg().s[38]++, new Map(allCategories.map(cat => {
        /* istanbul ignore next */
        cov_1o8z6llikg().f[8]++;
        cov_1o8z6llikg().s[39]++;
        return [cat.id, cat.name];
      })));
      // Return formatted categories with parent names
      /* istanbul ignore next */
      cov_1o8z6llikg().s[40]++;
      return allCategories.map(category => {
        /* istanbul ignore next */
        cov_1o8z6llikg().f[9]++;
        cov_1o8z6llikg().s[41]++;
        return {
          id: category.id,
          name: category.name,
          description: category.description,
          parent_id: category.parentId,
          parent_name: category.parentId ?
          /* istanbul ignore next */
          (cov_1o8z6llikg().b[15][0]++, categoryNameMap.get(category.parentId)) :
          /* istanbul ignore next */
          (cov_1o8z6llikg().b[15][1]++, null)
        };
      });
    }, defaultCategoriesData, "Failed to fetch product categories"));
    /* istanbul ignore next */
    cov_1o8z6llikg().s[42]++;
    return _server.NextResponse.json({
      success: true,
      data: categories
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1o8z6llikg().s[43]++;
    console.error("Error fetching product categories:", error);
    // Return fallback data in case of error
    /* istanbul ignore next */
    cov_1o8z6llikg().s[44]++;
    return _server.NextResponse.json({
      success: true,
      data: defaultCategoriesData
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1o8z6llikg().f[10]++;
  cov_1o8z6llikg().s[45]++;
  try {
    // Check auth header for development token
    const authHeader =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[46]++, request.headers.get("authorization"));
    const token =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[47]++, authHeader?.startsWith("Bearer ") ?
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[16][0]++, authHeader.slice(7)) :
    /* istanbul ignore next */
    (cov_1o8z6llikg().b[16][1]++, null));
    /* istanbul ignore next */
    cov_1o8z6llikg().s[48]++;
    console.log("Create category request:", {
      hasAuthHeader: !!authHeader,
      token: token ?
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[17][0]++, `${token.substring(0, 10)}...`) :
      /* istanbul ignore next */
      (cov_1o8z6llikg().b[17][1]++, null)
    });
    // Allow dev-token to bypass permission checks
    /* istanbul ignore next */
    cov_1o8z6llikg().s[49]++;
    if (token !== "dev-token") {
      /* istanbul ignore next */
      cov_1o8z6llikg().b[18][0]++;
      // Verify permission
      const hasPermission =
      /* istanbul ignore next */
      (cov_1o8z6llikg().s[50]++, await (0, _auth.validateTokenPermission)(request, "category:create"));
      /* istanbul ignore next */
      cov_1o8z6llikg().s[51]++;
      if (!hasPermission) {
        /* istanbul ignore next */
        cov_1o8z6llikg().b[19][0]++;
        cov_1o8z6llikg().s[52]++;
        return _server.NextResponse.json({
          success: false,
          message: "Unauthorized: Insufficient permissions"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_1o8z6llikg().b[19][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1o8z6llikg().b[18][1]++;
      cov_1o8z6llikg().s[53]++;
      console.log("Using development token - bypassing permission check");
    }
    // Parse request body
    const data =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[54]++, await request.json());
    const {
      name,
      description,
      parentId
    } =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[55]++, data);
    /* istanbul ignore next */
    cov_1o8z6llikg().s[56]++;
    if (!name) {
      /* istanbul ignore next */
      cov_1o8z6llikg().b[20][0]++;
      cov_1o8z6llikg().s[57]++;
      return _server.NextResponse.json({
        success: false,
        message: "Category name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o8z6llikg().b[20][1]++;
    }
    // Check if category with this name already exists
    const existingCategory =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[58]++, await _prisma.prisma.category.findFirst({
      where: {
        name: {
          equals: name,
          mode: "insensitive"
        }
      }
    }));
    /* istanbul ignore next */
    cov_1o8z6llikg().s[59]++;
    if (existingCategory) {
      /* istanbul ignore next */
      cov_1o8z6llikg().b[21][0]++;
      cov_1o8z6llikg().s[60]++;
      return _server.NextResponse.json({
        success: false,
        message: "A category with this name already exists"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o8z6llikg().b[21][1]++;
    }
    // Create the new category
    const newCategory =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[61]++, await _prisma.prisma.category.create({
      data: {
        name,
        description:
        /* istanbul ignore next */
        (cov_1o8z6llikg().b[22][0]++, description) ||
        /* istanbul ignore next */
        (cov_1o8z6llikg().b[22][1]++, null),
        parentId:
        /* istanbul ignore next */
        (cov_1o8z6llikg().b[23][0]++, parentId) ||
        /* istanbul ignore next */
        (cov_1o8z6llikg().b[23][1]++, null)
      }
    }));
    // Invalidate reference data cache
    const {
      cacheService
    } =
    /* istanbul ignore next */
    (cov_1o8z6llikg().s[62]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_1o8z6llikg().f[11]++;
      cov_1o8z6llikg().s[63]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../lib/cache"));
    }));
    /* istanbul ignore next */
    cov_1o8z6llikg().s[64]++;
    await cacheService.invalidateReferenceData();
    /* istanbul ignore next */
    cov_1o8z6llikg().s[65]++;
    return _server.NextResponse.json({
      success: true,
      message: "Category created successfully",
      data: newCategory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1o8z6llikg().s[66]++;
    console.error("Error creating category:", error);
    /* istanbul ignore next */
    cov_1o8z6llikg().s[67]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create category"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,