{"version":3,"names":["cov_torxfj5iv","actualCoverage","s","usePermission","routePermissions","_permissions","PERMISSIONS","SALES_VIEW","INVENTORY_VIEW","QUOTATIONS_VIEW","REPORTS_VIEW","SETTINGS_VIEW","USERS_VIEW","f","user","_useAuth","useAuth","_router","_navigation","useRouter","pathname","usePathname","hasPermission","requiredPermission","context","_PermissionService","permissionService","hasAnyPermission","requiredPermissions","hasAllPermissions","isAdmin","hasShopAccess","shopId","permission","getAccessibleShopIds","canCreateInvoices","b","SALES_MANAGE","INVOICE_CREATE","canManageInvoices","roleName","toLowerCase","SALES_EDIT","SALES_DELETE","canDeleteInvoices","canManageUsers","USERS_CREATE","USERS_EDIT","USERS_DELETE","canManageInventory","INVENTORY_CREATE","INVENTORY_EDIT","INVENTORY_DELETE","INVENTORY_MANAGE","canViewReports","canViewDashboard","DASHBOARD_VIEW","canAccessRoute","route","canViewQuotations","QUOTATION_VIEW","canCreateQuotations","QUOTATION_MANAGE","QUOTATION_CREATE","canEditQuotations","canViewCosts","canRecordPaymentToAccount","accountId","allowedAccounts","length","includes","toString","getAllowedAccountIds","checkRoutePermission","undefined","startsWith"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/usePermission.ts"],"sourcesContent":["'use client';\n\n\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from './useAuth';\nimport { PERMISSIONS, Permission } from '@/lib/constants/permissions';\nimport { permissionService } from '@/lib/services/PermissionService';\n\n// Define route permissions mapping using constants\nconst routePermissions: Record<string, Permission> = {\n    '/dashboard': PERMISSIONS.SALES_VIEW, // Dashboard requires at least sales view\n    '/inventory': PERMISSIONS.INVENTORY_VIEW,\n    '/sales': PERMISSIONS.SALES_VIEW,\n    '/quotations': PERMISSIONS.QUOTATIONS_VIEW,\n    '/reports': PERMISSIONS.REPORTS_VIEW,\n    '/settings': PERMISSIONS.SETTINGS_VIEW,\n    '/users': PERMISSIONS.USERS_VIEW,\n};\n\ninterface PermissionContext {\n    shopId?: string;\n    userId?: string;\n    resourceId?: string;\n}\n\nexport function usePermission() {\n    const { user } = useAuth();\n    const _router = useRouter();\n    const pathname = usePathname();\n\n    const hasPermission = (\n        requiredPermission: Permission | string,\n        context?: PermissionContext\n    ): boolean => {\n        return permissionService.hasPermission(user, requiredPermission, context);\n    };\n\n    const hasAnyPermission = (\n        requiredPermissions: (Permission | string)[],\n        context?: PermissionContext\n    ): boolean => {\n        return permissionService.hasAnyPermission(user, requiredPermissions, context);\n    };\n\n    const hasAllPermissions = (\n        requiredPermissions: (Permission | string)[],\n        context?: PermissionContext\n    ): boolean => {\n        return permissionService.hasAllPermissions(user, requiredPermissions, context);\n    };\n\n    const isAdmin = (): boolean => {\n        return permissionService.isAdmin(user);\n    };\n\n    const hasShopAccess = (shopId: string, permission: Permission | string): boolean => {\n        return permissionService.hasShopAccess(user, shopId, permission);\n    };\n\n    const getAccessibleShopIds = (): string[] => {\n        return permissionService.getAccessibleShopIds(user);\n    };\n\n    // Check if user can create invoices\n    const canCreateInvoices = (): boolean => {\n        if (!user) return false;\n        // A user can create an invoice if they have general sales management permission\n        // or the specific permission to create invoices for their own shop.\n        return hasPermission(PERMISSIONS.SALES_MANAGE) || hasPermission(PERMISSIONS.INVOICE_CREATE);\n    };\n\n    // Check if user can edit/delete invoices\n    const canManageInvoices = (): boolean => {\n        if (!user) return false;\n        \n        // Shop staff role cannot edit/delete invoices, this is a business rule.\n        if (user.roleName?.toLowerCase() === 'shop staff') {\n            return false;\n        }\n        \n        // For other roles, check for the required permissions\n        return hasAnyPermission([\n            'invoice:manage',\n            PERMISSIONS.SALES_EDIT, \n            PERMISSIONS.SALES_DELETE\n        ]);\n    };\n\n    const canDeleteInvoices = (): boolean => {\n        if (!user) return false;\n        \n        // Shop staff role cannot edit/delete invoices\n        if (user.roleName?.toLowerCase() === 'shop staff') {\n            return false;\n        }\n        \n        return hasAnyPermission(['invoice:manage', PERMISSIONS.SALES_DELETE]);\n    };\n\n    const canManageUsers = (): boolean => {\n        return hasAnyPermission([\n            PERMISSIONS.USERS_CREATE,\n            PERMISSIONS.USERS_EDIT,\n            PERMISSIONS.USERS_DELETE\n        ]);\n    };\n\n    const canManageInventory = (): boolean => {\n        return hasAnyPermission([\n            PERMISSIONS.INVENTORY_CREATE,\n            PERMISSIONS.INVENTORY_EDIT,\n            PERMISSIONS.INVENTORY_DELETE,\n            PERMISSIONS.INVENTORY_MANAGE\n        ]);\n    };\n\n    const canViewReports = (): boolean => {\n        return hasPermission(PERMISSIONS.REPORTS_VIEW);\n    };\n\n    const canViewDashboard = (): boolean => {\n        if (!user) return false;\n\n        // Shop staff are not allowed to see the main dashboard\n        if (user.roleName?.toLowerCase() === 'shop staff') {\n            return false;\n        }\n\n        // For other roles, check for the required permission\n        return hasPermission(PERMISSIONS.DASHBOARD_VIEW);\n    };\n\n    const canAccessRoute = (route: string): boolean => {\n        const requiredPermission = routePermissions[route];\n        if (!requiredPermission) {\n            return true; // No specific permission required\n        }\n        return hasPermission(requiredPermission);\n    };\n\n    // Check if user can view quotations\n    const canViewQuotations = (): boolean => {\n        if (!user) return false;\n        // Allow viewing if user has general sales view, specific quotation view permission, or is a Shop Staff\n        return hasPermission(PERMISSIONS.SALES_VIEW) || \n               hasPermission(PERMISSIONS.QUOTATION_VIEW) || \n               user.roleName?.toLowerCase() === 'shop staff';\n    };\n\n    // Check if user can create quotations\n    const canCreateQuotations = (): boolean => {\n        if (!user) return false;\n        // Allow creation if user has manage or create permission\n        return hasPermission(PERMISSIONS.QUOTATION_MANAGE) || hasPermission(PERMISSIONS.QUOTATION_CREATE);\n    };\n\n    // Check if user can edit/delete quotations\n    const canEditQuotations = (): boolean => {\n        if (!user) return false;\n        return hasPermission('quotation:manage') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can view cost data\n    const canViewCosts = (): boolean => {\n        return hasPermission('shop:view_costs') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can record payments to specific accounts\n    const canRecordPaymentToAccount = (accountId: number): boolean => {\n        // Admin can record to any account\n        if (hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*')) {\n            return true;\n        }\n        \n        // Check if user has payment:record permission\n        if (!hasPermission('payment:record') && !hasPermission('invoice:create')) {\n            return false;\n        }\n        \n        // Check if user has specific account permissions\n        if (user?.allowedAccounts && user.allowedAccounts.length > 0) {\n            return user.allowedAccounts.includes(accountId.toString());\n        }\n        \n        // For users without specific account restrictions, allow all income/asset accounts\n        // This maintains backward compatibility\n        return true;\n    };\n\n    // Get list of accounts user can record payments to\n    const getAllowedAccountIds = (): string[] => {\n        // Admin can use any account\n        if (hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*')) {\n            return [];\n        }\n        \n        // Return user's allowed accounts or empty array if no restrictions\n        return user?.allowedAccounts || [];\n    };\n\n    // Check if user has permission to access the current route\n    const checkRoutePermission = (): boolean => {\n        // Default to dashboard for root path\n        if (pathname === '/') return true;\n\n        // Login page is always accessible\n        if (pathname === '/login') return true;\n\n        // For exact route matches\n        const requiredPermission = routePermissions[pathname];\n        if (requiredPermission !== undefined) {\n            return hasPermission(requiredPermission);\n        }\n\n        // For routes that don't have an exact match, check parent routes\n        for (const route in routePermissions) {\n            if (pathname.startsWith(route + '/')) {\n                return hasPermission(routePermissions[route]);\n            }\n        }\n\n        // If no matching route found, allow access by default\n        return true;\n    };\n\n    return {\n        // Core permission functions\n        hasPermission,\n        hasAnyPermission,\n        hasAllPermissions,\n        isAdmin,\n        hasShopAccess,\n        getAccessibleShopIds,\n        \n        // Specific business logic functions\n        canCreateInvoices,\n        canManageInvoices,\n        canDeleteInvoices,\n        canManageUsers,\n        canManageInventory,\n        canViewReports,\n        canViewDashboard,\n        canAccessRoute,\n        checkRoutePermission,\n        canViewQuotations,\n        canCreateQuotations,\n        canEditQuotations,\n        canViewCosts,\n        canRecordPaymentToAccount,\n        getAllowedAccountIds,\n        \n        // Legacy support\n        routePermissions,\n    };\n}"],"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","ignoreList":[]}