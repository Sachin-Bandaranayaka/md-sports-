{"version":3,"names":["GET","cov_1o8z6llikg","f","s","POST","defaultCategoriesData","id","name","description","parent_id","parent_name","categories","_prisma","safeQuery","allCategories","prisma","category","findMany","orderBy","categoryNameMap","Map","map","cat","parentId","b","get","_server","NextResponse","json","success","data","error","console","request","authHeader","headers","token","startsWith","slice","log","hasAuthHeader","substring","hasPermission","_auth","validateTokenPermission","message","status","existingCategory","findFirst","where","equals","mode","newCategory","create","cacheService","Promise","resolve","then","_interop_require_wildcard","require","invalidateReferenceData"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/categories/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for categories\nconst defaultCategoriesData = [\n    { id: 1, name: 'Sports Equipment', description: 'All sports equipment', parent_id: null, parent_name: null },\n    { id: 2, name: 'Cricket', description: 'Cricket equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 3, name: 'Football', description: 'Football equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 4, name: 'Basketball', description: 'Basketball equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n    { id: 5, name: 'Tennis', description: 'Tennis equipment', parent_id: 1, parent_name: 'Sports Equipment' },\n];\n\n// GET: Fetch all product categories\nexport async function GET() {\n    try {\n        // Query to get all categories with their parent information\n        const categories = await safeQuery(\n            async () => {\n                // First fetch all categories\n                const allCategories = await prisma.category.findMany({\n                    orderBy: {\n                        name: 'asc'\n                    }\n                });\n\n                // Map of category IDs to names for parent lookup\n                const categoryNameMap = new Map(\n                    allCategories.map(cat => [cat.id, cat.name])\n                );\n\n                // Return formatted categories with parent names\n                return allCategories.map(category => ({\n                    id: category.id,\n                    name: category.name,\n                    description: category.description,\n                    parent_id: category.parentId,\n                    parent_name: category.parentId ? categoryNameMap.get(category.parentId) : null\n                }));\n            },\n            defaultCategoriesData,\n            'Failed to fetch product categories'\n        );\n\n        return NextResponse.json({\n            success: true,\n            data: categories\n        });\n    } catch (error) {\n        console.error('Error fetching product categories:', error);\n\n        // Return fallback data in case of error\n        return NextResponse.json({\n            success: true,\n            data: defaultCategoriesData\n        });\n    }\n}\n\n// POST: Create a new category\nexport async function POST(request: NextRequest) {\n    try {\n        // Check auth header for development token\n        const authHeader = request.headers.get('authorization');\n        const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n        console.log('Create category request:', {\n            hasAuthHeader: !!authHeader,\n            token: token ? `${token.substring(0, 10)}...` : null\n        });\n\n        // Allow dev-token to bypass permission checks\n        if (token !== 'dev-token') {\n            // Verify permission\n            const hasPermission = await validateTokenPermission(request, 'category:create');\n            if (!hasPermission) {\n                return NextResponse.json(\n                    { success: false, message: 'Unauthorized: Insufficient permissions' },\n                    { status: 403 }\n                );\n            }\n        } else {\n            console.log('Using development token - bypassing permission check');\n        }\n\n        // Parse request body\n        const data = await request.json();\n        const { name, description, parentId } = data;\n\n        if (!name) {\n            return NextResponse.json(\n                { success: false, message: 'Category name is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if category with this name already exists\n        const existingCategory = await prisma.category.findFirst({\n            where: { name: { equals: name, mode: 'insensitive' } }\n        });\n\n        if (existingCategory) {\n            return NextResponse.json(\n                { success: false, message: 'A category with this name already exists' },\n                { status: 400 }\n            );\n        }\n\n        // Create the new category\n        const newCategory = await prisma.category.create({\n            data: {\n                name,\n                description: description || null,\n                parentId: parentId || null\n            }\n        });\n\n        // Invalidate reference data cache\n        const { cacheService } = await import('@/lib/cache');\n        await cacheService.invalidateReferenceData();\n\n        return NextResponse.json({\n            success: true,\n            message: 'Category created successfully',\n            data: newCategory\n        });\n    } catch (error) {\n        console.error('Error creating category:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create category' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}