{"version":3,"names":["GET","cov_11omm1l759","s","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","f","_performance","measureAsync","authResult","_auth","validateTokenPermission","isValid","b","_server","NextResponse","json","error","status","searchParams","URL","url","startDateParam","get","endDateParam","endDate","Date","startDate","now","periodDays","Math","ceil","getTime","success","message","dateRangeKey","toISOString","split","cacheKey","isFiltered","shopId","console","time","cachedData","_cache","cacheService","timeEnd","log","meta","period","fromCache","userId","getUserIdFromToken","user","_prisma","safeQuery","prisma","findUnique","where","id","select","name","email","roleId","roleName","permissions","isAdmin","_PermissionService","permissionService","hasPermission","filterUserId","summaryResult","totalRetailValueResult","shopsResult","inventoryResult","salesResult","transfersResult","Promise","all","_route","fetchSummaryData","_route1","fetchTotalRetailValueData","_route2","fetchShopsData","_route3","fetchInventoryDistributionData","_route4","fetchSalesData","_route5","fetchTransfersData","data","map","item","title","value","formattedValue","trend","trendUp","responseData","summaryData","shopPerformance","inventoryDistribution","monthlySales","recentTransfers","shopFiltered","errors","filter","e","set","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/all/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { fetchSummaryData } from '../summary/route';\nimport { fetchTotalRetailValueData } from '../total-retail-value/route';\nimport { fetchShopsData } from '../shops/route';\nimport { fetchInventoryDistributionData } from '../inventory/route';\nimport { fetchSalesData } from '../sales/route';\nimport { fetchTransfersData } from '../transfers/route';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport { measureAsync } from '@/lib/performance';\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('dashboard-all-api', async () => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'dashboard:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n            }\n\n            // Extract date range from query parameters\n            const { searchParams } = new URL(request.url);\n            const startDateParam = searchParams.get('startDate');\n            const endDateParam = searchParams.get('endDate');\n            \n            // Default to last 7 days if no dates provided\n            const endDate = endDateParam ? new Date(endDateParam) : new Date();\n            const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n            \n            // Calculate period days for backward compatibility with existing functions\n            const periodDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n            // Validate that the date range is reasonable (not negative and not too large)\n            if (periodDays < 1) {\n                return NextResponse.json({ \n                    success: false, \n                    message: 'Invalid date range. Start date must be before end date.' \n                }, { status: 400 });\n            }\n\n            if (periodDays > 365) {\n                return NextResponse.json({ \n                    success: false, \n                    message: 'Date range too large. Maximum allowed range is 365 days.' \n                }, { status: 400 });\n            }\n\n            // Create cache key based on shop and date range\n            const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n            const cacheKey = `dashboard:all:${context.isFiltered ? context.shopId : 'all'}:${dateRangeKey}`;\n            console.time('cache check');\n            const cachedData = await cacheService.get(cacheKey);\n            console.timeEnd('cache check');\n\n            if (cachedData) {\n                console.log('âœ… Dashboard data served from cache for period:', periodDays, 'days');\n                return NextResponse.json({\n                    ...cachedData,\n                    meta: {\n                        ...cachedData.meta,\n                        period: periodDays,\n                        fromCache: true\n                    }\n                });\n            }\n\n            console.log('ðŸ”„ Fetching fresh dashboard data with shop context and period:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                period: periodDays\n            });\n\n            const shopId = context.isFiltered ? context.shopId : null;\n\n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n            }\n\n            // Fetch user details to check role and permissions\n            const user = await safeQuery(\n                () => prisma.user.findUnique({\n                    where: { id: userId },\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        roleId: true,\n                        roleName: true,\n                        permissions: true,\n                        shopId: true,\n                    }\n                }),\n                null,\n                'Failed to fetch user details'\n            );\n\n            if (!user) {\n                return NextResponse.json({ error: 'User not found' }, { status: 404 });\n            }\n\n            // Check if user is admin or has admin permissions\n            const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                           await permissionService.hasPermission(user, 'admin:all') || \n                           await permissionService.hasPermission(user, 'ALL');\n\n            // Determine user filtering\n            let filterUserId: string | null = null;\n            if (!isAdmin) {\n                filterUserId = userId;\n            }\n\n            console.time('Promise.all dashboard data');\n            const [\n                summaryResult,\n                totalRetailValueResult,\n                shopsResult,\n                inventoryResult,\n                salesResult,\n                transfersResult\n            ] = await Promise.all([\n                 fetchSummaryData(shopId, periodDays, startDate, endDate, filterUserId),\n                 fetchTotalRetailValueData(shopId),\n                 fetchShopsData(shopId, periodDays, startDate, endDate),\n                 fetchInventoryDistributionData(shopId),\n                 fetchSalesData(shopId, periodDays, startDate, endDate, filterUserId),\n                 fetchTransfersData(shopId, periodDays, startDate, endDate)\n             ]);\n            console.timeEnd('Promise.all dashboard data');\n\n            // The summaryData expects totalRetailValue to be part of its structure.\n            // Let's merge it here.\n            if (summaryResult.success && summaryResult.data && totalRetailValueResult.success) {\n                summaryResult.data = summaryResult.data.map(item => {\n                    if (item.title === 'Total Retail Value') {\n                        return {\n                            ...item,\n                            value: totalRetailValueResult.formattedValue,\n                            trend: totalRetailValueResult.trend,\n                            trendUp: totalRetailValueResult.trendUp\n                        };\n                    }\n                    return item;\n                });\n            }\n\n            const responseData = {\n                success: true,\n                summaryData: summaryResult.success ? summaryResult.data : null,\n                shopPerformance: shopsResult.success ? shopsResult.data : null,\n                inventoryDistribution: inventoryResult.success ? inventoryResult.data : null,\n                monthlySales: salesResult.success ? salesResult.data : null,\n                recentTransfers: transfersResult.success ? transfersResult.data : null,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    period: periodDays,\n                    fromCache: false\n                },\n                errors: [\n                    !summaryResult.success ? 'Failed to fetch summary data' : null,\n                    !totalRetailValueResult.success ? 'Failed to fetch total retail value' : null,\n                    !shopsResult.success ? 'Failed to fetch shops data' : null,\n                    !inventoryResult.success ? 'Failed to fetch inventory data' : null,\n                    !salesResult.success ? 'Failed to fetch sales data' : null,\n                    !transfersResult.success ? 'Failed to fetch transfers data' : null,\n                ].filter(e => e !== null)\n            };\n\n            // Cache the response for 2 minutes with period-specific key\n            console.time('cache set');\n            await cacheService.set(cacheKey, responseData, 120);\n            console.timeEnd('cache set');\n            console.log('ðŸ’¾ Dashboard data cached for 2 minutes with date range:', dateRangeKey);\n\n            return NextResponse.json(responseData);\n\n        } catch (error) {\n            console.error('Error fetching all dashboard data:', error);\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Failed to load all dashboard data',\n                    error: error instanceof Error ? error.message : String(error),\n                    meta: {\n                        shopFiltered: context.isFiltered,\n                        shopId: context.shopId\n                    }\n                },\n                { status: 500 }\n            );\n        }\n    });\n}); "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}