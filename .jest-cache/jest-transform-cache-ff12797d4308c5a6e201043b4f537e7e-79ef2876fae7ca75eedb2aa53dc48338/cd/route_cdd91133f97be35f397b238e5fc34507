df8da8d404bcf851750af09420892e72
"use strict";

/* istanbul ignore next */
function cov_11omm1l759() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/all/route.ts";
  var hash = "cd3baf8cc47e1457be33abae2d93f9e232e68c58";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/all/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "7": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "8": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "9": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "10": {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 47
        }
      },
      "11": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 71
        }
      },
      "12": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "13": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 49
        }
      },
      "14": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 80
        }
      },
      "15": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "16": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 191,
          column: 2
        }
      },
      "17": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 190,
          column: 7
        }
      },
      "18": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "19": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 98
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "21": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "22": {
        start: {
          line: 37,
          column: 37
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "23": {
        start: {
          line: 38,
          column: 35
        },
        end: {
          line: 38,
          column: 64
        }
      },
      "24": {
        start: {
          line: 39,
          column: 33
        },
        end: {
          line: 39,
          column: 60
        }
      },
      "25": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 78
        }
      },
      "26": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 120
        }
      },
      "27": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 107
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "29": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "30": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "31": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "32": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 63,
          column: 114
        }
      },
      "33": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 64,
          column: 107
        }
      },
      "34": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 40
        }
      },
      "35": {
        start: {
          line: 66,
          column: 31
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "36": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 43
        }
      },
      "37": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "38": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 98
        }
      },
      "39": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "40": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "41": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 69
        }
      },
      "42": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 71
        }
      },
      "43": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "44": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "45": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 108,
          column: 57
        }
      },
      "46": {
        start: {
          line: 95,
          column: 58
        },
        end: {
          line: 108,
          column: 18
        }
      },
      "47": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "48": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 114,
          column: 19
        }
      },
      "49": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 117,
          column: 240
        }
      },
      "50": {
        start: {
          line: 119,
          column: 31
        },
        end: {
          line: 119,
          column: 35
        }
      },
      "51": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "52": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 38
        }
      },
      "53": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "54": {
        start: {
          line: 124,
          column: 120
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "55": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 58
        }
      },
      "56": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "58": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 144,
          column: 21
        }
      },
      "59": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 143,
          column: 26
        }
      },
      "60": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 32
        }
      },
      "61": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "62": {
        start: {
          line: 168,
          column: 30
        },
        end: {
          line: 168,
          column: 40
        }
      },
      "63": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 38
        }
      },
      "64": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 71
        }
      },
      "65": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 41
        }
      },
      "66": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 107
        }
      },
      "67": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 59
        }
      },
      "68": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 71
        }
      },
      "69": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 61
          },
          end: {
            line: 24,
            column: 62
          }
        },
        loc: {
          start: {
            line: 24,
            column: 87
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 63
          },
          end: {
            line: 25,
            column: 64
          }
        },
        loc: {
          start: {
            line: 25,
            column: 73
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 95,
            column: 54
          },
          end: {
            line: 95,
            column: 55
          }
        },
        loc: {
          start: {
            line: 95,
            column: 58
          },
          end: {
            line: 108,
            column: 18
          }
        },
        line: 95
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 136,
            column: 60
          },
          end: {
            line: 136,
            column: 61
          }
        },
        loc: {
          start: {
            line: 136,
            column: 68
          },
          end: {
            line: 146,
            column: 17
          }
        },
        line: 136
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 26
          }
        },
        loc: {
          start: {
            line: 168,
            column: 30
          },
          end: {
            line: 168,
            column: 40
          }
        },
        line: 168
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 41,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 43
          },
          end: {
            line: 41,
            column: 65
          }
        }, {
          start: {
            line: 41,
            column: 68
          },
          end: {
            line: 41,
            column: 78
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 42,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 42,
            column: 47
          },
          end: {
            line: 42,
            column: 71
          }
        }, {
          start: {
            line: 42,
            column: 74
          },
          end: {
            line: 42,
            column: 120
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 67
          },
          end: {
            line: 64,
            column: 81
          }
        }, {
          start: {
            line: 64,
            column: 84
          },
          end: {
            line: 64,
            column: 89
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 27
          },
          end: {
            line: 84,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 48
          },
          end: {
            line: 84,
            column: 62
          }
        }, {
          start: {
            line: 84,
            column: 65
          },
          end: {
            line: 84,
            column: 69
          }
        }],
        line: 84
      },
      "8": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 28
          },
          end: {
            line: 117,
            column: 240
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 28
          },
          end: {
            line: 117,
            column: 53
          }
        }, {
          start: {
            line: 117,
            column: 57
          },
          end: {
            line: 117,
            column: 88
          }
        }, {
          start: {
            line: 117,
            column: 92
          },
          end: {
            line: 117,
            column: 167
          }
        }, {
          start: {
            line: 117,
            column: 171
          },
          end: {
            line: 117,
            column: 240
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 37
          }
        }, {
          start: {
            line: 135,
            column: 41
          },
          end: {
            line: 135,
            column: 59
          }
        }, {
          start: {
            line: 135,
            column: 63
          },
          end: {
            line: 135,
            column: 93
          }
        }],
        line: 135
      },
      "14": {
        loc: {
          start: {
            line: 137,
            column: 20
          },
          end: {
            line: 144,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 20
          },
          end: {
            line: 144,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 150,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 53
          },
          end: {
            line: 150,
            column: 71
          }
        }, {
          start: {
            line: 150,
            column: 74
          },
          end: {
            line: 150,
            column: 78
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 151,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 55
          },
          end: {
            line: 151,
            column: 71
          }
        }, {
          start: {
            line: 151,
            column: 74
          },
          end: {
            line: 151,
            column: 78
          }
        }],
        line: 151
      },
      "17": {
        loc: {
          start: {
            line: 152,
            column: 39
          },
          end: {
            line: 152,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 65
          },
          end: {
            line: 152,
            column: 85
          }
        }, {
          start: {
            line: 152,
            column: 88
          },
          end: {
            line: 152,
            column: 92
          }
        }],
        line: 152
      },
      "18": {
        loc: {
          start: {
            line: 153,
            column: 30
          },
          end: {
            line: 153,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 52
          },
          end: {
            line: 153,
            column: 68
          }
        }, {
          start: {
            line: 153,
            column: 71
          },
          end: {
            line: 153,
            column: 75
          }
        }],
        line: 153
      },
      "19": {
        loc: {
          start: {
            line: 154,
            column: 33
          },
          end: {
            line: 154,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 59
          },
          end: {
            line: 154,
            column: 79
          }
        }, {
          start: {
            line: 154,
            column: 82
          },
          end: {
            line: 154,
            column: 86
          }
        }],
        line: 154
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 45
          },
          end: {
            line: 162,
            column: 75
          }
        }, {
          start: {
            line: 162,
            column: 78
          },
          end: {
            line: 162,
            column: 82
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 163,
            column: 20
          },
          end: {
            line: 163,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 54
          },
          end: {
            line: 163,
            column: 90
          }
        }, {
          start: {
            line: 163,
            column: 93
          },
          end: {
            line: 163,
            column: 97
          }
        }],
        line: 163
      },
      "22": {
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 164,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 43
          },
          end: {
            line: 164,
            column: 71
          }
        }, {
          start: {
            line: 164,
            column: 74
          },
          end: {
            line: 164,
            column: 78
          }
        }],
        line: 164
      },
      "23": {
        loc: {
          start: {
            line: 165,
            column: 20
          },
          end: {
            line: 165,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 47
          },
          end: {
            line: 165,
            column: 79
          }
        }, {
          start: {
            line: 165,
            column: 82
          },
          end: {
            line: 165,
            column: 86
          }
        }],
        line: 165
      },
      "24": {
        loc: {
          start: {
            line: 166,
            column: 20
          },
          end: {
            line: 166,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 43
          },
          end: {
            line: 166,
            column: 71
          }
        }, {
          start: {
            line: 166,
            column: 74
          },
          end: {
            line: 166,
            column: 78
          }
        }],
        line: 166
      },
      "25": {
        loc: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 47
          },
          end: {
            line: 167,
            column: 79
          }
        }, {
          start: {
            line: 167,
            column: 82
          },
          end: {
            line: 167,
            column: 86
          }
        }],
        line: 167
      },
      "26": {
        loc: {
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 48
          },
          end: {
            line: 181,
            column: 61
          }
        }, {
          start: {
            line: 181,
            column: 64
          },
          end: {
            line: 181,
            column: 77
          }
        }],
        line: 181
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/all/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { fetchSummaryData } from '../summary/route';\nimport { fetchTotalRetailValueData } from '../total-retail-value/route';\nimport { fetchShopsData } from '../shops/route';\nimport { fetchInventoryDistributionData } from '../inventory/route';\nimport { fetchSalesData } from '../sales/route';\nimport { fetchTransfersData } from '../transfers/route';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport { measureAsync } from '@/lib/performance';\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('dashboard-all-api', async () => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'dashboard:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n            }\n\n            // Extract date range from query parameters\n            const { searchParams } = new URL(request.url);\n            const startDateParam = searchParams.get('startDate');\n            const endDateParam = searchParams.get('endDate');\n            \n            // Default to last 7 days if no dates provided\n            const endDate = endDateParam ? new Date(endDateParam) : new Date();\n            const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n            \n            // Calculate period days for backward compatibility with existing functions\n            const periodDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n            // Validate that the date range is reasonable (not negative and not too large)\n            if (periodDays < 1) {\n                return NextResponse.json({ \n                    success: false, \n                    message: 'Invalid date range. Start date must be before end date.' \n                }, { status: 400 });\n            }\n\n            if (periodDays > 365) {\n                return NextResponse.json({ \n                    success: false, \n                    message: 'Date range too large. Maximum allowed range is 365 days.' \n                }, { status: 400 });\n            }\n\n            // Create cache key based on shop and date range\n            const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n            const cacheKey = `dashboard:all:${context.isFiltered ? context.shopId : 'all'}:${dateRangeKey}`;\n            console.time('cache check');\n            const cachedData = await cacheService.get(cacheKey);\n            console.timeEnd('cache check');\n\n            if (cachedData) {\n                console.log('\u2705 Dashboard data served from cache for period:', periodDays, 'days');\n                return NextResponse.json({\n                    ...cachedData,\n                    meta: {\n                        ...cachedData.meta,\n                        period: periodDays,\n                        fromCache: true\n                    }\n                });\n            }\n\n            console.log('\uD83D\uDD04 Fetching fresh dashboard data with shop context and period:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                period: periodDays\n            });\n\n            const shopId = context.isFiltered ? context.shopId : null;\n\n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n            }\n\n            // Fetch user details to check role and permissions\n            const user = await safeQuery(\n                () => prisma.user.findUnique({\n                    where: { id: userId },\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        roleId: true,\n                        roleName: true,\n                        permissions: true,\n                        shopId: true,\n                    }\n                }),\n                null,\n                'Failed to fetch user details'\n            );\n\n            if (!user) {\n                return NextResponse.json({ error: 'User not found' }, { status: 404 });\n            }\n\n            // Check if user is admin or has admin permissions\n            const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                           await permissionService.hasPermission(user, 'admin:all') || \n                           await permissionService.hasPermission(user, 'ALL');\n\n            // Determine user filtering\n            let filterUserId: string | null = null;\n            if (!isAdmin) {\n                filterUserId = userId;\n            }\n\n            console.time('Promise.all dashboard data');\n            const [\n                summaryResult,\n                totalRetailValueResult,\n                shopsResult,\n                inventoryResult,\n                salesResult,\n                transfersResult\n            ] = await Promise.all([\n                 fetchSummaryData(shopId, periodDays, startDate, endDate, filterUserId),\n                 fetchTotalRetailValueData(shopId),\n                 fetchShopsData(shopId, periodDays, startDate, endDate),\n                 fetchInventoryDistributionData(shopId),\n                 fetchSalesData(shopId, periodDays, startDate, endDate, filterUserId),\n                 fetchTransfersData(shopId, periodDays, startDate, endDate)\n             ]);\n            console.timeEnd('Promise.all dashboard data');\n\n            // The summaryData expects totalRetailValue to be part of its structure.\n            // Let's merge it here.\n            if (summaryResult.success && summaryResult.data && totalRetailValueResult.success) {\n                summaryResult.data = summaryResult.data.map(item => {\n                    if (item.title === 'Total Retail Value') {\n                        return {\n                            ...item,\n                            value: totalRetailValueResult.formattedValue,\n                            trend: totalRetailValueResult.trend,\n                            trendUp: totalRetailValueResult.trendUp\n                        };\n                    }\n                    return item;\n                });\n            }\n\n            const responseData = {\n                success: true,\n                summaryData: summaryResult.success ? summaryResult.data : null,\n                shopPerformance: shopsResult.success ? shopsResult.data : null,\n                inventoryDistribution: inventoryResult.success ? inventoryResult.data : null,\n                monthlySales: salesResult.success ? salesResult.data : null,\n                recentTransfers: transfersResult.success ? transfersResult.data : null,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    period: periodDays,\n                    fromCache: false\n                },\n                errors: [\n                    !summaryResult.success ? 'Failed to fetch summary data' : null,\n                    !totalRetailValueResult.success ? 'Failed to fetch total retail value' : null,\n                    !shopsResult.success ? 'Failed to fetch shops data' : null,\n                    !inventoryResult.success ? 'Failed to fetch inventory data' : null,\n                    !salesResult.success ? 'Failed to fetch sales data' : null,\n                    !transfersResult.success ? 'Failed to fetch transfers data' : null,\n                ].filter(e => e !== null)\n            };\n\n            // Cache the response for 2 minutes with period-specific key\n            console.time('cache set');\n            await cacheService.set(cacheKey, responseData, 120);\n            console.timeEnd('cache set');\n            console.log('\uD83D\uDCBE Dashboard data cached for 2 minutes with date range:', dateRangeKey);\n\n            return NextResponse.json(responseData);\n\n        } catch (error) {\n            console.error('Error fetching all dashboard data:', error);\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Failed to load all dashboard data',\n                    error: error instanceof Error ? error.message : String(error),\n                    meta: {\n                        shopFiltered: context.isFiltered,\n                        shopId: context.shopId\n                    }\n                },\n                { status: 500 }\n            );\n        }\n    });\n}); "],
      names: ["GET", "ShopAccessControl", "withShopAccess", "request", "context", "measureAsync", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "startDateParam", "get", "endDateParam", "endDate", "Date", "startDate", "now", "periodDays", "Math", "ceil", "getTime", "success", "message", "dateRangeKey", "toISOString", "split", "cacheKey", "isFiltered", "shopId", "console", "time", "cachedData", "cacheService", "timeEnd", "log", "meta", "period", "fromCache", "userId", "getUserIdFromToken", "user", "safeQuery", "prisma", "findUnique", "where", "id", "select", "name", "email", "roleId", "roleName", "permissions", "isAdmin", "permissionService", "hasPermission", "filterUserId", "summaryResult", "totalRetailValueResult", "shopsResult", "inventoryResult", "salesResult", "transfersResult", "Promise", "all", "fetchSummaryData", "fetchTotalRetailValueData", "fetchShopsData", "fetchInventoryDistributionData", "fetchSalesData", "fetchTransfersData", "data", "map", "item", "title", "value", "formattedValue", "trend", "trendUp", "responseData", "summaryData", "shopPerformance", "inventoryDistribution", "monthlySales", "recentTransfers", "shopFiltered", "errors", "filter", "e", "set", "Error", "String"],
      mappings: ";;;;+BAcaA;;;eAAAA;;;wBAd6B;uBACT;wBACS;wBACX;wBACgB;wBAChB;wBACI;uBACN;gCACK;sBAC0B;wBAC1B;mCACA;6BACL;AAEtB,MAAMA,MAAMC,iCAAiB,CAACC,cAAc,CAAC,OAAOC,SAAsBC;IAC7E,OAAOC,IAAAA,yBAAY,EAAC,qBAAqB;QACrC,IAAI;YACA,iCAAiC;YACjC,MAAMC,aAAa,MAAMC,IAAAA,6BAAuB,EAACJ,SAAS;YAC1D,IAAI,CAACG,WAAWE,OAAO,EAAE;gBACrB,OAAOC,oBAAY,CAACC,IAAI,CAAC;oBAAEC,OAAO;gBAAY,GAAG;oBAAEC,QAAQ;gBAAI;YACnE;YAEA,2CAA2C;YAC3C,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIX,QAAQY,GAAG;YAC5C,MAAMC,iBAAiBH,aAAaI,GAAG,CAAC;YACxC,MAAMC,eAAeL,aAAaI,GAAG,CAAC;YAEtC,8CAA8C;YAC9C,MAAME,UAAUD,eAAe,IAAIE,KAAKF,gBAAgB,IAAIE;YAC5D,MAAMC,YAAYL,iBAAiB,IAAII,KAAKJ,kBAAkB,IAAII,KAAKA,KAAKE,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YAEvG,2EAA2E;YAC3E,MAAMC,aAAaC,KAAKC,IAAI,CAAC,AAACN,CAAAA,QAAQO,OAAO,KAAKL,UAAUK,OAAO,EAAC,IAAM,CAAA,OAAO,KAAK,KAAK,EAAC;YAE5F,8EAA8E;YAC9E,IAAIH,aAAa,GAAG;gBAChB,OAAOd,oBAAY,CAACC,IAAI,CAAC;oBACrBiB,SAAS;oBACTC,SAAS;gBACb,GAAG;oBAAEhB,QAAQ;gBAAI;YACrB;YAEA,IAAIW,aAAa,KAAK;gBAClB,OAAOd,oBAAY,CAACC,IAAI,CAAC;oBACrBiB,SAAS;oBACTC,SAAS;gBACb,GAAG;oBAAEhB,QAAQ;gBAAI;YACrB;YAEA,gDAAgD;YAChD,MAAMiB,eAAe,CAAC,EAAER,UAAUS,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAEZ,QAAQW,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtG,MAAMC,WAAW,CAAC,cAAc,EAAE5B,QAAQ6B,UAAU,GAAG7B,QAAQ8B,MAAM,GAAG,MAAM,CAAC,EAAEL,aAAa,CAAC;YAC/FM,QAAQC,IAAI,CAAC;YACb,MAAMC,aAAa,MAAMC,mBAAY,CAACrB,GAAG,CAACe;YAC1CG,QAAQI,OAAO,CAAC;YAEhB,IAAIF,YAAY;gBACZF,QAAQK,GAAG,CAAC,kDAAkDjB,YAAY;gBAC1E,OAAOd,oBAAY,CAACC,IAAI,CAAC;oBACrB,GAAG2B,UAAU;oBACbI,MAAM;wBACF,GAAGJ,WAAWI,IAAI;wBAClBC,QAAQnB;wBACRoB,WAAW;oBACf;gBACJ;YACJ;YAEAR,QAAQK,GAAG,CAAC,4EAAkE;gBAC1EN,QAAQ9B,QAAQ8B,MAAM;gBACtBD,YAAY7B,QAAQ6B,UAAU;gBAC9BS,QAAQnB;YACZ;YAEA,MAAMW,SAAS9B,QAAQ6B,UAAU,GAAG7B,QAAQ8B,MAAM,GAAG;YAErD,yBAAyB;YACzB,MAAMU,SAAS,MAAMC,IAAAA,wBAAkB,EAAC1C;YACxC,IAAI,CAACyC,QAAQ;gBACT,OAAOnC,oBAAY,CAACC,IAAI,CAAC;oBAAEC,OAAO;gBAA6B,GAAG;oBAAEC,QAAQ;gBAAI;YACpF;YAEA,mDAAmD;YACnD,MAAMkC,OAAO,MAAMC,IAAAA,iBAAS,EACxB,IAAMC,cAAM,CAACF,IAAI,CAACG,UAAU,CAAC;oBACzBC,OAAO;wBAAEC,IAAIP;oBAAO;oBACpBQ,QAAQ;wBACJD,IAAI;wBACJE,MAAM;wBACNC,OAAO;wBACPC,QAAQ;wBACRC,UAAU;wBACVC,aAAa;wBACbvB,QAAQ;oBACZ;gBACJ,IACA,MACA;YAGJ,IAAI,CAACY,MAAM;gBACP,OAAOrC,oBAAY,CAACC,IAAI,CAAC;oBAAEC,OAAO;gBAAiB,GAAG;oBAAEC,QAAQ;gBAAI;YACxE;YAEA,kDAAkD;YAClD,MAAM8C,UAAUZ,KAAKU,QAAQ,KAAK,WAAWV,KAAKU,QAAQ,KAAK,iBAChD,MAAMG,oCAAiB,CAACC,aAAa,CAACd,MAAM,gBAC5C,MAAMa,oCAAiB,CAACC,aAAa,CAACd,MAAM;YAE3D,2BAA2B;YAC3B,IAAIe,eAA8B;YAClC,IAAI,CAACH,SAAS;gBACVG,eAAejB;YACnB;YAEAT,QAAQC,IAAI,CAAC;YACb,MAAM,CACF0B,eACAC,wBACAC,aACAC,iBACAC,aACAC,gBACH,GAAG,MAAMC,QAAQC,GAAG,CAAC;gBACjBC,IAAAA,uBAAgB,EAACpC,QAAQX,YAAYF,WAAWF,SAAS0C;gBACzDU,IAAAA,iCAAyB,EAACrC;gBAC1BsC,IAAAA,sBAAc,EAACtC,QAAQX,YAAYF,WAAWF;gBAC9CsD,IAAAA,sCAA8B,EAACvC;gBAC/BwC,IAAAA,sBAAc,EAACxC,QAAQX,YAAYF,WAAWF,SAAS0C;gBACvDc,IAAAA,0BAAkB,EAACzC,QAAQX,YAAYF,WAAWF;aACrD;YACFgB,QAAQI,OAAO,CAAC;YAEhB,wEAAwE;YACxE,uBAAuB;YACvB,IAAIuB,cAAcnC,OAAO,IAAImC,cAAcc,IAAI,IAAIb,uBAAuBpC,OAAO,EAAE;gBAC/EmC,cAAcc,IAAI,GAAGd,cAAcc,IAAI,CAACC,GAAG,CAACC,CAAAA;oBACxC,IAAIA,KAAKC,KAAK,KAAK,sBAAsB;wBACrC,OAAO;4BACH,GAAGD,IAAI;4BACPE,OAAOjB,uBAAuBkB,cAAc;4BAC5CC,OAAOnB,uBAAuBmB,KAAK;4BACnCC,SAASpB,uBAAuBoB,OAAO;wBAC3C;oBACJ;oBACA,OAAOL;gBACX;YACJ;YAEA,MAAMM,eAAe;gBACjBzD,SAAS;gBACT0D,aAAavB,cAAcnC,OAAO,GAAGmC,cAAcc,IAAI,GAAG;gBAC1DU,iBAAiBtB,YAAYrC,OAAO,GAAGqC,YAAYY,IAAI,GAAG;gBAC1DW,uBAAuBtB,gBAAgBtC,OAAO,GAAGsC,gBAAgBW,IAAI,GAAG;gBACxEY,cAActB,YAAYvC,OAAO,GAAGuC,YAAYU,IAAI,GAAG;gBACvDa,iBAAiBtB,gBAAgBxC,OAAO,GAAGwC,gBAAgBS,IAAI,GAAG;gBAClEnC,MAAM;oBACFiD,cAActF,QAAQ6B,UAAU;oBAChCC,QAAQ9B,QAAQ8B,MAAM;oBACtBQ,QAAQnB;oBACRoB,WAAW;gBACf;gBACAgD,QAAQ;oBACJ,CAAC7B,cAAcnC,OAAO,GAAG,iCAAiC;oBAC1D,CAACoC,uBAAuBpC,OAAO,GAAG,uCAAuC;oBACzE,CAACqC,YAAYrC,OAAO,GAAG,+BAA+B;oBACtD,CAACsC,gBAAgBtC,OAAO,GAAG,mCAAmC;oBAC9D,CAACuC,YAAYvC,OAAO,GAAG,+BAA+B;oBACtD,CAACwC,gBAAgBxC,OAAO,GAAG,mCAAmC;iBACjE,CAACiE,MAAM,CAACC,CAAAA,IAAKA,MAAM;YACxB;YAEA,4DAA4D;YAC5D1D,QAAQC,IAAI,CAAC;YACb,MAAME,mBAAY,CAACwD,GAAG,CAAC9D,UAAUoD,cAAc;YAC/CjD,QAAQI,OAAO,CAAC;YAChBJ,QAAQK,GAAG,CAAC,qEAA2DX;YAEvE,OAAOpB,oBAAY,CAACC,IAAI,CAAC0E;QAE7B,EAAE,OAAOzE,OAAO;YACZwB,QAAQxB,KAAK,CAAC,sCAAsCA;YACpD,OAAOF,oBAAY,CAACC,IAAI,CACpB;gBACIiB,SAAS;gBACTC,SAAS;gBACTjB,OAAOA,iBAAiBoF,QAAQpF,MAAMiB,OAAO,GAAGoE,OAAOrF;gBACvD8B,MAAM;oBACFiD,cAActF,QAAQ6B,UAAU;oBAChCC,QAAQ9B,QAAQ8B,MAAM;gBAC1B;YACJ,GACA;gBAAEtB,QAAQ;YAAI;QAEtB;IACJ;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cd3baf8cc47e1457be33abae2d93f9e232e68c58"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11omm1l759 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11omm1l759();
cov_11omm1l759().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_11omm1l759().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_11omm1l759().f[0]++;
    cov_11omm1l759().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_11omm1l759().s[3]++, require("next/server"));
const _route =
/* istanbul ignore next */
(cov_11omm1l759().s[4]++, require("../summary/route"));
const _route1 =
/* istanbul ignore next */
(cov_11omm1l759().s[5]++, require("../total-retail-value/route"));
const _route2 =
/* istanbul ignore next */
(cov_11omm1l759().s[6]++, require("../shops/route"));
const _route3 =
/* istanbul ignore next */
(cov_11omm1l759().s[7]++, require("../inventory/route"));
const _route4 =
/* istanbul ignore next */
(cov_11omm1l759().s[8]++, require("../sales/route"));
const _route5 =
/* istanbul ignore next */
(cov_11omm1l759().s[9]++, require("../transfers/route"));
const _cache =
/* istanbul ignore next */
(cov_11omm1l759().s[10]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_11omm1l759().s[11]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_11omm1l759().s[12]++, require("../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_11omm1l759().s[13]++, require("../../../../lib/prisma"));
const _PermissionService =
/* istanbul ignore next */
(cov_11omm1l759().s[14]++, require("../../../../lib/services/PermissionService"));
const _performance =
/* istanbul ignore next */
(cov_11omm1l759().s[15]++, require("../../../../lib/performance"));
const GET =
/* istanbul ignore next */
(cov_11omm1l759().s[16]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_11omm1l759().f[1]++;
  cov_11omm1l759().s[17]++;
  return (0, _performance.measureAsync)("dashboard-all-api", async () => {
    /* istanbul ignore next */
    cov_11omm1l759().f[2]++;
    cov_11omm1l759().s[18]++;
    try {
      // Validate token and permissions
      const authResult =
      /* istanbul ignore next */
      (cov_11omm1l759().s[19]++, await (0, _auth.validateTokenPermission)(request, "dashboard:view"));
      /* istanbul ignore next */
      cov_11omm1l759().s[20]++;
      if (!authResult.isValid) {
        /* istanbul ignore next */
        cov_11omm1l759().b[0][0]++;
        cov_11omm1l759().s[21]++;
        return _server.NextResponse.json({
          error: "Forbidden"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[0][1]++;
      }
      // Extract date range from query parameters
      const {
        searchParams
      } =
      /* istanbul ignore next */
      (cov_11omm1l759().s[22]++, new URL(request.url));
      const startDateParam =
      /* istanbul ignore next */
      (cov_11omm1l759().s[23]++, searchParams.get("startDate"));
      const endDateParam =
      /* istanbul ignore next */
      (cov_11omm1l759().s[24]++, searchParams.get("endDate"));
      // Default to last 7 days if no dates provided
      const endDate =
      /* istanbul ignore next */
      (cov_11omm1l759().s[25]++, endDateParam ?
      /* istanbul ignore next */
      (cov_11omm1l759().b[1][0]++, new Date(endDateParam)) :
      /* istanbul ignore next */
      (cov_11omm1l759().b[1][1]++, new Date()));
      const startDate =
      /* istanbul ignore next */
      (cov_11omm1l759().s[26]++, startDateParam ?
      /* istanbul ignore next */
      (cov_11omm1l759().b[2][0]++, new Date(startDateParam)) :
      /* istanbul ignore next */
      (cov_11omm1l759().b[2][1]++, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)));
      // Calculate period days for backward compatibility with existing functions
      const periodDays =
      /* istanbul ignore next */
      (cov_11omm1l759().s[27]++, Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)));
      // Validate that the date range is reasonable (not negative and not too large)
      /* istanbul ignore next */
      cov_11omm1l759().s[28]++;
      if (periodDays < 1) {
        /* istanbul ignore next */
        cov_11omm1l759().b[3][0]++;
        cov_11omm1l759().s[29]++;
        return _server.NextResponse.json({
          success: false,
          message: "Invalid date range. Start date must be before end date."
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[3][1]++;
      }
      cov_11omm1l759().s[30]++;
      if (periodDays > 365) {
        /* istanbul ignore next */
        cov_11omm1l759().b[4][0]++;
        cov_11omm1l759().s[31]++;
        return _server.NextResponse.json({
          success: false,
          message: "Date range too large. Maximum allowed range is 365 days."
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[4][1]++;
      }
      // Create cache key based on shop and date range
      const dateRangeKey =
      /* istanbul ignore next */
      (cov_11omm1l759().s[32]++, `${startDate.toISOString().split("T")[0]}-${endDate.toISOString().split("T")[0]}`);
      const cacheKey =
      /* istanbul ignore next */
      (cov_11omm1l759().s[33]++, `dashboard:all:${context.isFiltered ?
      /* istanbul ignore next */
      (cov_11omm1l759().b[5][0]++, context.shopId) :
      /* istanbul ignore next */
      (cov_11omm1l759().b[5][1]++, "all")}:${dateRangeKey}`);
      /* istanbul ignore next */
      cov_11omm1l759().s[34]++;
      console.time("cache check");
      const cachedData =
      /* istanbul ignore next */
      (cov_11omm1l759().s[35]++, await _cache.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_11omm1l759().s[36]++;
      console.timeEnd("cache check");
      /* istanbul ignore next */
      cov_11omm1l759().s[37]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_11omm1l759().b[6][0]++;
        cov_11omm1l759().s[38]++;
        console.log("✅ Dashboard data served from cache for period:", periodDays, "days");
        /* istanbul ignore next */
        cov_11omm1l759().s[39]++;
        return _server.NextResponse.json({
          ...cachedData,
          meta: {
            ...cachedData.meta,
            period: periodDays,
            fromCache: true
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[6][1]++;
      }
      cov_11omm1l759().s[40]++;
      console.log("\uD83D\uDD04 Fetching fresh dashboard data with shop context and period:", {
        shopId: context.shopId,
        isFiltered: context.isFiltered,
        period: periodDays
      });
      const shopId =
      /* istanbul ignore next */
      (cov_11omm1l759().s[41]++, context.isFiltered ?
      /* istanbul ignore next */
      (cov_11omm1l759().b[7][0]++, context.shopId) :
      /* istanbul ignore next */
      (cov_11omm1l759().b[7][1]++, null));
      // Get user ID from token
      const userId =
      /* istanbul ignore next */
      (cov_11omm1l759().s[42]++, await (0, _auth.getUserIdFromToken)(request));
      /* istanbul ignore next */
      cov_11omm1l759().s[43]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_11omm1l759().b[8][0]++;
        cov_11omm1l759().s[44]++;
        return _server.NextResponse.json({
          error: "User ID not found in token"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[8][1]++;
      }
      // Fetch user details to check role and permissions
      const user =
      /* istanbul ignore next */
      (cov_11omm1l759().s[45]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_11omm1l759().f[3]++;
        cov_11omm1l759().s[46]++;
        return _prisma.prisma.user.findUnique({
          where: {
            id: userId
          },
          select: {
            id: true,
            name: true,
            email: true,
            roleId: true,
            roleName: true,
            permissions: true,
            shopId: true
          }
        });
      }, null, "Failed to fetch user details"));
      /* istanbul ignore next */
      cov_11omm1l759().s[47]++;
      if (!user) {
        /* istanbul ignore next */
        cov_11omm1l759().b[9][0]++;
        cov_11omm1l759().s[48]++;
        return _server.NextResponse.json({
          error: "User not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[9][1]++;
      }
      // Check if user is admin or has admin permissions
      const isAdmin =
      /* istanbul ignore next */
      (cov_11omm1l759().s[49]++,
      /* istanbul ignore next */
      (cov_11omm1l759().b[10][0]++, user.roleName === "Admin") ||
      /* istanbul ignore next */
      (cov_11omm1l759().b[10][1]++, user.roleName === "Super Admin") ||
      /* istanbul ignore next */
      (cov_11omm1l759().b[10][2]++, await _PermissionService.permissionService.hasPermission(user, "admin:all")) ||
      /* istanbul ignore next */
      (cov_11omm1l759().b[10][3]++, await _PermissionService.permissionService.hasPermission(user, "ALL")));
      // Determine user filtering
      let filterUserId =
      /* istanbul ignore next */
      (cov_11omm1l759().s[50]++, null);
      /* istanbul ignore next */
      cov_11omm1l759().s[51]++;
      if (!isAdmin) {
        /* istanbul ignore next */
        cov_11omm1l759().b[11][0]++;
        cov_11omm1l759().s[52]++;
        filterUserId = userId;
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[11][1]++;
      }
      cov_11omm1l759().s[53]++;
      console.time("Promise.all dashboard data");
      const [summaryResult, totalRetailValueResult, shopsResult, inventoryResult, salesResult, transfersResult] =
      /* istanbul ignore next */
      (cov_11omm1l759().s[54]++, await Promise.all([(0, _route.fetchSummaryData)(shopId, periodDays, startDate, endDate, filterUserId), (0, _route1.fetchTotalRetailValueData)(shopId), (0, _route2.fetchShopsData)(shopId, periodDays, startDate, endDate), (0, _route3.fetchInventoryDistributionData)(shopId), (0, _route4.fetchSalesData)(shopId, periodDays, startDate, endDate, filterUserId), (0, _route5.fetchTransfersData)(shopId, periodDays, startDate, endDate)]));
      /* istanbul ignore next */
      cov_11omm1l759().s[55]++;
      console.timeEnd("Promise.all dashboard data");
      // The summaryData expects totalRetailValue to be part of its structure.
      // Let's merge it here.
      /* istanbul ignore next */
      cov_11omm1l759().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_11omm1l759().b[13][0]++, summaryResult.success) &&
      /* istanbul ignore next */
      (cov_11omm1l759().b[13][1]++, summaryResult.data) &&
      /* istanbul ignore next */
      (cov_11omm1l759().b[13][2]++, totalRetailValueResult.success)) {
        /* istanbul ignore next */
        cov_11omm1l759().b[12][0]++;
        cov_11omm1l759().s[57]++;
        summaryResult.data = summaryResult.data.map(item => {
          /* istanbul ignore next */
          cov_11omm1l759().f[4]++;
          cov_11omm1l759().s[58]++;
          if (item.title === "Total Retail Value") {
            /* istanbul ignore next */
            cov_11omm1l759().b[14][0]++;
            cov_11omm1l759().s[59]++;
            return {
              ...item,
              value: totalRetailValueResult.formattedValue,
              trend: totalRetailValueResult.trend,
              trendUp: totalRetailValueResult.trendUp
            };
          } else
          /* istanbul ignore next */
          {
            cov_11omm1l759().b[14][1]++;
          }
          cov_11omm1l759().s[60]++;
          return item;
        });
      } else
      /* istanbul ignore next */
      {
        cov_11omm1l759().b[12][1]++;
      }
      const responseData =
      /* istanbul ignore next */
      (cov_11omm1l759().s[61]++, {
        success: true,
        summaryData: summaryResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[15][0]++, summaryResult.data) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[15][1]++, null),
        shopPerformance: shopsResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[16][0]++, shopsResult.data) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[16][1]++, null),
        inventoryDistribution: inventoryResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[17][0]++, inventoryResult.data) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[17][1]++, null),
        monthlySales: salesResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[18][0]++, salesResult.data) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[18][1]++, null),
        recentTransfers: transfersResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[19][0]++, transfersResult.data) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[19][1]++, null),
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          period: periodDays,
          fromCache: false
        },
        errors: [!summaryResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[20][0]++, "Failed to fetch summary data") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[20][1]++, null), !totalRetailValueResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[21][0]++, "Failed to fetch total retail value") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[21][1]++, null), !shopsResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[22][0]++, "Failed to fetch shops data") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[22][1]++, null), !inventoryResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[23][0]++, "Failed to fetch inventory data") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[23][1]++, null), !salesResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[24][0]++, "Failed to fetch sales data") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[24][1]++, null), !transfersResult.success ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[25][0]++, "Failed to fetch transfers data") :
        /* istanbul ignore next */
        (cov_11omm1l759().b[25][1]++, null)].filter(e => {
          /* istanbul ignore next */
          cov_11omm1l759().f[5]++;
          cov_11omm1l759().s[62]++;
          return e !== null;
        })
      });
      // Cache the response for 2 minutes with period-specific key
      /* istanbul ignore next */
      cov_11omm1l759().s[63]++;
      console.time("cache set");
      /* istanbul ignore next */
      cov_11omm1l759().s[64]++;
      await _cache.cacheService.set(cacheKey, responseData, 120);
      /* istanbul ignore next */
      cov_11omm1l759().s[65]++;
      console.timeEnd("cache set");
      /* istanbul ignore next */
      cov_11omm1l759().s[66]++;
      console.log("\uD83D\uDCBE Dashboard data cached for 2 minutes with date range:", dateRangeKey);
      /* istanbul ignore next */
      cov_11omm1l759().s[67]++;
      return _server.NextResponse.json(responseData);
    } catch (error) {
      /* istanbul ignore next */
      cov_11omm1l759().s[68]++;
      console.error("Error fetching all dashboard data:", error);
      /* istanbul ignore next */
      cov_11omm1l759().s[69]++;
      return _server.NextResponse.json({
        success: false,
        message: "Failed to load all dashboard data",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_11omm1l759().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11omm1l759().b[26][1]++, String(error)),
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId
        }
      }, {
        status: 500
      });
    }
  });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,