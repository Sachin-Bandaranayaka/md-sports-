{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/inventoryManagement.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('Inventory Management System', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with inventory permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Inventory Manager',\n        email: 'inventory@test.com',\n        permissions: ['inventory:view', 'inventory:manage', 'inventory:create', 'inventory:edit', 'inventory:delete']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      hasPermission: jest.fn((permission) => {\n        const userPermissions = ['inventory:view', 'inventory:manage', 'inventory:create', 'inventory:edit', 'inventory:delete'];\n        return userPermissions.includes(permission);\n      })\n    });\n  });\n\n  describe('Product Creation and Management', () => {\n    test('should validate product data correctly', () => {\n      const productData = {\n        name: 'Test Product',\n        categoryId: 1,\n        cost: 100,\n        sellingPrice: 150,\n        barcode: '1234567890',\n        description: 'Test product description'\n      };\n\n      // Test product validation logic\n      const validateProduct = (product: any) => {\n        const errors: string[] = [];\n        \n        if (!product.name || product.name.trim().length === 0) {\n          errors.push('Product name is required');\n        }\n        \n        if (!product.categoryId) {\n          errors.push('Category is required');\n        }\n        \n        if (!product.cost || product.cost <= 0) {\n          errors.push('Cost must be greater than 0');\n        }\n        \n        if (!product.sellingPrice || product.sellingPrice <= 0) {\n          errors.push('Selling price must be greater than 0');\n        }\n        \n        if (product.sellingPrice <= product.cost) {\n          errors.push('Selling price must be greater than cost');\n        }\n        \n        return errors;\n      };\n\n      expect(validateProduct(productData)).toEqual([]);\n      expect(validateProduct({ ...productData, name: '' })).toContain('Product name is required');\n      expect(validateProduct({ ...productData, cost: 0 })).toContain('Cost must be greater than 0');\n      expect(validateProduct({ ...productData, sellingPrice: 50 })).toContain('Selling price must be greater than cost');\n    });\n\n    test('should calculate weighted average cost correctly', () => {\n      const calculateWeightedAverageCost = (currentStock: number, currentCost: number, newStock: number, newCost: number) => {\n        if (currentStock === 0) return newCost;\n        \n        const totalValue = (currentStock * currentCost) + (newStock * newCost);\n        const totalStock = currentStock + newStock;\n        \n        return totalValue / totalStock;\n      };\n\n      // Test scenarios\n      expect(calculateWeightedAverageCost(0, 0, 10, 100)).toBe(100); // First purchase\n      expect(calculateWeightedAverageCost(10, 100, 10, 120)).toBe(110); // Equal quantities\n      expect(calculateWeightedAverageCost(5, 100, 15, 120)).toBe(115); // Different quantities\n    });\n\n    test('should handle barcode uniqueness validation', async () => {\n      const checkBarcodeUniqueness = async (barcode: string, productId?: string) => {\n        // Mock API call to check barcode\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ exists: false })\n        });\n\n        const response = await fetch('/api/products/check-barcode', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ barcode, excludeId: productId })\n        });\n\n        const data = await response.json();\n        return !data.exists;\n      };\n\n      const isUnique = await checkBarcodeUniqueness('1234567890');\n      expect(isUnique).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith('/api/products/check-barcode', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ barcode: '1234567890', excludeId: undefined })\n      });\n    });\n  });\n\n  describe('Stock Level Management', () => {\n    test('should track stock levels correctly', () => {\n      const stockOperations = {\n        add: (currentStock: number, quantity: number) => currentStock + quantity,\n        remove: (currentStock: number, quantity: number) => Math.max(0, currentStock - quantity),\n        set: (currentStock: number, quantity: number) => quantity\n      };\n\n      expect(stockOperations.add(10, 5)).toBe(15);\n      expect(stockOperations.remove(10, 3)).toBe(7);\n      expect(stockOperations.remove(5, 10)).toBe(0); // Cannot go negative\n      expect(stockOperations.set(10, 25)).toBe(25);\n    });\n\n    test('should calculate stock alerts correctly', () => {\n      const checkStockAlert = (currentStock: number, minStock: number, maxStock: number) => {\n        if (currentStock <= minStock) return 'low';\n        if (currentStock >= maxStock) return 'high';\n        return 'normal';\n      };\n\n      expect(checkStockAlert(5, 10, 100)).toBe('low');\n      expect(checkStockAlert(50, 10, 100)).toBe('normal');\n      expect(checkStockAlert(150, 10, 100)).toBe('high');\n    });\n\n    test('should handle stock distribution across shops', () => {\n      const distributeStock = (totalStock: number, distributions: Record<string, number>) => {\n        const totalDistributed = Object.values(distributions).reduce((sum, qty) => sum + qty, 0);\n        \n        if (totalDistributed > totalStock) {\n          throw new Error('Cannot distribute more stock than available');\n        }\n        \n        return {\n          distributed: distributions,\n          remaining: totalStock - totalDistributed\n        };\n      };\n\n      const result = distributeStock(100, { 'shop1': 30, 'shop2': 40 });\n      expect(result.distributed).toEqual({ 'shop1': 30, 'shop2': 40 });\n      expect(result.remaining).toBe(30);\n\n      expect(() => distributeStock(50, { 'shop1': 30, 'shop2': 40 })).toThrow('Cannot distribute more stock than available');\n    });\n  });\n\n  describe('Inventory Transfers', () => {\n    test('should validate transfer data', () => {\n      const validateTransfer = (transfer: any) => {\n        const errors: string[] = [];\n        \n        if (!transfer.fromShopId) {\n          errors.push('Source shop is required');\n        }\n        \n        if (!transfer.toShopId) {\n          errors.push('Destination shop is required');\n        }\n        \n        if (transfer.fromShopId === transfer.toShopId) {\n          errors.push('Source and destination shops must be different');\n        }\n        \n        if (!transfer.items || transfer.items.length === 0) {\n          errors.push('At least one item is required');\n        }\n        \n        transfer.items?.forEach((item: any, index: number) => {\n          if (!item.productId) {\n            errors.push(`Product is required for item ${index + 1}`);\n          }\n          \n          if (!item.quantity || item.quantity <= 0) {\n            errors.push(`Quantity must be greater than 0 for item ${index + 1}`);\n          }\n        });\n        \n        return errors;\n      };\n\n      const validTransfer = {\n        fromShopId: 'shop1',\n        toShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 5 }]\n      };\n\n      expect(validateTransfer(validTransfer)).toEqual([]);\n      expect(validateTransfer({ ...validTransfer, fromShopId: validTransfer.toShopId })).toContain('Source and destination shops must be different');\n      expect(validateTransfer({ ...validTransfer, items: [] })).toContain('At least one item is required');\n    });\n\n    test('should process transfer correctly', async () => {\n      const processTransfer = async (transferData: any) => {\n        // Mock API call for transfer\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            success: true,\n            transferId: 'transfer123',\n            message: 'Transfer completed successfully'\n          })\n        });\n\n        const response = await fetch('/api/inventory/transfers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(transferData)\n        });\n\n        return response.json();\n      };\n\n      const transferData = {\n        fromShopId: 'shop1',\n        toShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 5 }],\n        notes: 'Test transfer'\n      };\n\n      const result = await processTransfer(transferData);\n      expect(result.success).toBe(true);\n      expect(result.transferId).toBe('transfer123');\n    });\n  });\n\n  describe('Category Management', () => {\n    test('should validate category data', () => {\n      const validateCategory = (category: any) => {\n        const errors: string[] = [];\n        \n        if (!category.name || category.name.trim().length === 0) {\n          errors.push('Category name is required');\n        }\n        \n        if (category.name && category.name.length > 50) {\n          errors.push('Category name must be 50 characters or less');\n        }\n        \n        return errors;\n      };\n\n      expect(validateCategory({ name: 'Electronics' })).toEqual([]);\n      expect(validateCategory({ name: '' })).toContain('Category name is required');\n      expect(validateCategory({ name: 'A'.repeat(51) })).toContain('Category name must be 50 characters or less');\n    });\n\n    test('should handle category hierarchy', () => {\n      const buildCategoryTree = (categories: any[]) => {\n        const categoryMap = new Map();\n        const rootCategories: any[] = [];\n        \n        // First pass: create map\n        categories.forEach(cat => {\n          categoryMap.set(cat.id, { ...cat, children: [] });\n        });\n        \n        // Second pass: build tree\n        categories.forEach(cat => {\n          if (cat.parentId) {\n            const parent = categoryMap.get(cat.parentId);\n            if (parent) {\n              parent.children.push(categoryMap.get(cat.id));\n            }\n          } else {\n            rootCategories.push(categoryMap.get(cat.id));\n          }\n        });\n        \n        return rootCategories;\n      };\n\n      const categories = [\n        { id: 1, name: 'Electronics', parentId: null },\n        { id: 2, name: 'Phones', parentId: 1 },\n        { id: 3, name: 'Laptops', parentId: 1 },\n        { id: 4, name: 'Clothing', parentId: null }\n      ];\n\n      const tree = buildCategoryTree(categories);\n      expect(tree).toHaveLength(2); // Electronics and Clothing\n      expect(tree[0].children).toHaveLength(2); // Phones and Laptops under Electronics\n    });\n  });\n\n  describe('Inventory Value Calculations', () => {\n    test('should calculate total inventory value', () => {\n      const calculateInventoryValue = (items: any[]) => {\n        return items.reduce((total, item) => {\n          return total + (item.quantity * item.weightedAverageCost);\n        }, 0);\n      };\n\n      const inventoryItems = [\n        { quantity: 10, weightedAverageCost: 100 },\n        { quantity: 5, weightedAverageCost: 200 },\n        { quantity: 20, weightedAverageCost: 50 }\n      ];\n\n      expect(calculateInventoryValue(inventoryItems)).toBe(3000); // 1000 + 1000 + 1000\n    });\n\n    test('should calculate profit margins', () => {\n      const calculateProfitMargin = (cost: number, sellingPrice: number) => {\n        if (cost === 0) return 0;\n        return ((sellingPrice - cost) / cost) * 100;\n      };\n\n      expect(calculateProfitMargin(100, 150)).toBe(50); // 50% margin\n      expect(calculateProfitMargin(100, 120)).toBe(20); // 20% margin\n      expect(calculateProfitMargin(0, 100)).toBe(0); // Handle zero cost\n    });\n  });\n\n  describe('Permission-based Access', () => {\n    test('should restrict access based on permissions', () => {\n      const checkInventoryAccess = (userPermissions: string[], action: string) => {\n        const permissionMap: Record<string, string> = {\n          'view': 'inventory:view',\n          'create': 'inventory:create',\n          'edit': 'inventory:edit',\n          'delete': 'inventory:delete',\n          'manage': 'inventory:manage'\n        };\n        \n        const requiredPermission = permissionMap[action];\n        return userPermissions.includes(requiredPermission) || userPermissions.includes('inventory:manage');\n      };\n\n      const userPermissions = ['inventory:view', 'inventory:create'];\n      \n      expect(checkInventoryAccess(userPermissions, 'view')).toBe(true);\n      expect(checkInventoryAccess(userPermissions, 'create')).toBe(true);\n      expect(checkInventoryAccess(userPermissions, 'edit')).toBe(false);\n      expect(checkInventoryAccess(userPermissions, 'delete')).toBe(false);\n      \n      const adminPermissions = ['inventory:manage'];\n      expect(checkInventoryAccess(adminPermissions, 'delete')).toBe(true); // Admin can do everything\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","mockFetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","hasPermission","permission","userPermissions","includes","test","productData","categoryId","cost","sellingPrice","barcode","description","validateProduct","product","errors","trim","length","expect","toEqual","toContain","calculateWeightedAverageCost","currentStock","currentCost","newStock","newCost","totalValue","totalStock","toBe","checkBarcodeUniqueness","productId","mockResolvedValueOnce","ok","json","exists","response","method","headers","body","JSON","stringify","excludeId","data","isUnique","toHaveBeenCalledWith","undefined","stockOperations","add","quantity","remove","Math","max","set","checkStockAlert","minStock","maxStock","distributeStock","distributions","totalDistributed","values","reduce","sum","qty","Error","distributed","remaining","result","toThrow","validateTransfer","transfer","fromShopId","toShopId","items","forEach","item","index","validTransfer","processTransfer","transferData","success","transferId","message","notes","validateCategory","category","repeat","buildCategoryTree","categories","categoryMap","Map","rootCategories","cat","children","parentId","parent","get","tree","toHaveLength","calculateInventoryValue","total","weightedAverageCost","inventoryItems","calculateProfitMargin","checkInventoryAccess","action","permissionMap","requiredPermission","adminPermissions"],"mappings":"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"}