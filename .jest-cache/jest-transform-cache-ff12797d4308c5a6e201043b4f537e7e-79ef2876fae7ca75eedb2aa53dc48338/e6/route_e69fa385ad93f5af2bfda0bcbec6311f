29f1f83551723d8092001469a90c3a6b
"use strict";

/* istanbul ignore next */
function cov_99w0kl2h2() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts";
  var hash = "df702a93136594cd37539ed3a9dc08489c82751f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 42
        }
      },
      "8": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 68
        }
      },
      "10": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "11": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "12": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 63
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "15": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 23
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "18": {
        start: {
          line: 37,
          column: 45
        },
        end: {
          line: 39,
          column: 104
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "20": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 113
        }
      },
      "21": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 81
        }
      },
      "22": {
        start: {
          line: 43,
          column: 45
        },
        end: {
          line: 43,
          column: 79
        }
      },
      "23": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 25
        }
      },
      "24": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 24
        }
      },
      "25": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 44
        }
      },
      "26": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "27": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "28": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 309,
          column: 2
        }
      },
      "29": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 308,
          column: 7
        }
      },
      "30": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "31": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 94
        }
      },
      "32": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "33": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "34": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 66,
          column: 71
        }
      },
      "35": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "36": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "37": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "38": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "39": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 94,
          column: 19
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "41": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 61
        }
      },
      "42": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 70
        }
      },
      "43": {
        start: {
          line: 106,
          column: 26
        },
        end: {
          line: 106,
          column: 108
        }
      },
      "44": {
        start: {
          line: 107,
          column: 27
        },
        end: {
          line: 107,
          column: 59
        }
      },
      "45": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 108,
          column: 73
        }
      },
      "46": {
        start: {
          line: 109,
          column: 32
        },
        end: {
          line: 109,
          column: 64
        }
      },
      "47": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 110,
          column: 53
        }
      },
      "48": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 43
        }
      },
      "49": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "50": {
        start: {
          line: 123,
          column: 31
        },
        end: {
          line: 123,
          column: 70
        }
      },
      "51": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "52": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 70
        }
      },
      "53": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 55
        }
      },
      "54": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 119
        }
      },
      "55": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 32
        }
      },
      "56": {
        start: {
          line: 131,
          column: 30
        },
        end: {
          line: 131,
          column: 88
        }
      },
      "57": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "58": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "59": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 73
        }
      },
      "60": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 134,
          column: 73
        }
      },
      "61": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "62": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 44
        }
      },
      "63": {
        start: {
          line: 139,
          column: 19
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "64": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 52
        }
      },
      "65": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 88
        }
      },
      "66": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "67": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 160,
          column: 18
        }
      },
      "68": {
        start: {
          line: 162,
          column: 37
        },
        end: {
          line: 162,
          column: 60
        }
      },
      "69": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "70": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 166,
          column: 23
        }
      },
      "71": {
        start: {
          line: 170,
          column: 58
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "72": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 220,
          column: 22
        }
      },
      "73": {
        start: {
          line: 222,
          column: 75
        },
        end: {
          line: 224,
          column: 22
        }
      },
      "74": {
        start: {
          line: 226,
          column: 75
        },
        end: {
          line: 260,
          column: 22
        }
      },
      "75": {
        start: {
          line: 262,
          column: 68
        },
        end: {
          line: 262,
          column: 78
        }
      },
      "76": {
        start: {
          line: 264,
          column: 38
        },
        end: {
          line: 274,
          column: 14
        }
      },
      "77": {
        start: {
          line: 265,
          column: 60
        },
        end: {
          line: 265,
          column: 67
        }
      },
      "78": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 273,
          column: 18
        }
      },
      "79": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "80": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 100
        }
      },
      "81": {
        start: {
          line: 292,
          column: 29
        },
        end: {
          line: 292,
          column: 68
        }
      },
      "82": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 52
        }
      },
      "83": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 101
        }
      },
      "84": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 28
        }
      },
      "85": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 61
        }
      },
      "86": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "87": {
        start: {
          line: 310,
          column: 13
        },
        end: {
          line: 750,
          column: 2
        }
      },
      "88": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 749,
          column: 7
        }
      },
      "89": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 746,
          column: 9
        }
      },
      "90": {
        start: {
          line: 314,
          column: 38
        },
        end: {
          line: 314,
          column: 103
        }
      },
      "91": {
        start: {
          line: 315,
          column: 42
        },
        end: {
          line: 315,
          column: 112
        }
      },
      "92": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 322,
          column: 13
        }
      },
      "93": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 321,
          column: 19
        }
      },
      "94": {
        start: {
          line: 324,
          column: 27
        },
        end: {
          line: 324,
          column: 71
        }
      },
      "95": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "96": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 330,
          column: 19
        }
      },
      "97": {
        start: {
          line: 332,
          column: 32
        },
        end: {
          line: 332,
          column: 52
        }
      },
      "98": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "99": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 343,
          column: 17
        }
      },
      "100": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 342,
          column: 23
        }
      },
      "101": {
        start: {
          line: 345,
          column: 41
        },
        end: {
          line: 345,
          column: 128
        }
      },
      "102": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 357,
          column: 17
        }
      },
      "103": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 355,
          column: 21
        }
      },
      "104": {
        start: {
          line: 349,
          column: 24
        },
        end: {
          line: 354,
          column: 27
        }
      },
      "105": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 151
        }
      },
      "106": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 88
        }
      },
      "107": {
        start: {
          line: 360,
          column: 66
        },
        end: {
          line: 360,
          column: 77
        }
      },
      "108": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 105
        }
      },
      "109": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 71
        }
      },
      "110": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 372,
          column: 13
        }
      },
      "111": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 371,
          column: 19
        }
      },
      "112": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 407,
          column: 13
        }
      },
      "113": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 25
        }
      },
      "114": {
        start: {
          line: 375,
          column: 29
        },
        end: {
          line: 375,
          column: 52
        }
      },
      "115": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 383,
          column: 19
        }
      },
      "116": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 406,
          column: 17
        }
      },
      "117": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 390,
          column: 23
        }
      },
      "118": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 405,
          column: 23
        }
      },
      "119": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 411,
          column: 13
        }
      },
      "120": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 68
        }
      },
      "121": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "122": {
        start: {
          line: 414,
          column: 33
        },
        end: {
          line: 423,
          column: 23
        }
      },
      "123": {
        start: {
          line: 414,
          column: 73
        },
        end: {
          line: 423,
          column: 22
        }
      },
      "124": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 463,
          column: 17
        }
      },
      "125": {
        start: {
          line: 426,
          column: 40
        },
        end: {
          line: 430,
          column: 25
        }
      },
      "126": {
        start: {
          line: 427,
          column: 38
        },
        end: {
          line: 427,
          column: 97
        }
      },
      "127": {
        start: {
          line: 428,
          column: 41
        },
        end: {
          line: 428,
          column: 73
        }
      },
      "128": {
        start: {
          line: 429,
          column: 24
        },
        end: {
          line: 429,
          column: 54
        }
      },
      "129": {
        start: {
          line: 432,
          column: 48
        },
        end: {
          line: 445,
          column: 27
        }
      },
      "130": {
        start: {
          line: 432,
          column: 88
        },
        end: {
          line: 445,
          column: 26
        }
      },
      "131": {
        start: {
          line: 446,
          column: 43
        },
        end: {
          line: 446,
          column: 78
        }
      },
      "132": {
        start: {
          line: 447,
          column: 44
        },
        end: {
          line: 447,
          column: 72
        }
      },
      "133": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 462,
          column: 21
        }
      },
      "134": {
        start: {
          line: 449,
          column: 24
        },
        end: {
          line: 461,
          column: 27
        }
      },
      "135": {
        start: {
          line: 466,
          column: 39
        },
        end: {
          line: 466,
          column: 111
        }
      },
      "136": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 76
        }
      },
      "137": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "138": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 470,
          column: 89
        }
      },
      "139": {
        start: {
          line: 471,
          column: 41
        },
        end: {
          line: 471,
          column: 131
        }
      },
      "140": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 69
        }
      },
      "141": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 476,
          column: 17
        }
      },
      "142": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 474,
          column: 79
        }
      },
      "143": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 112
        }
      },
      "144": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 477,
          column: 51
        }
      },
      "145": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 83
        }
      },
      "146": {
        start: {
          line: 481,
          column: 45
        },
        end: {
          line: 481,
          column: 47
        }
      },
      "147": {
        start: {
          line: 482,
          column: 28
        },
        end: {
          line: 684,
          column: 19
        }
      },
      "148": {
        start: {
          line: 482,
          column: 92
        },
        end: {
          line: 684,
          column: 18
        }
      },
      "149": {
        start: {
          line: 483,
          column: 43
        },
        end: {
          line: 498,
          column: 22
        }
      },
      "150": {
        start: {
          line: 501,
          column: 20
        },
        end: {
          line: 591,
          column: 21
        }
      },
      "151": {
        start: {
          line: 503,
          column: 43
        },
        end: {
          line: 503,
          column: 105
        }
      },
      "152": {
        start: {
          line: 503,
          column: 76
        },
        end: {
          line: 503,
          column: 104
        }
      },
      "153": {
        start: {
          line: 504,
          column: 47
        },
        end: {
          line: 515,
          column: 26
        }
      },
      "154": {
        start: {
          line: 517,
          column: 47
        },
        end: {
          line: 520,
          column: 31
        }
      },
      "155": {
        start: {
          line: 517,
          column: 82
        },
        end: {
          line: 520,
          column: 29
        }
      },
      "156": {
        start: {
          line: 522,
          column: 50
        },
        end: {
          line: 522,
          column: 98
        }
      },
      "157": {
        start: {
          line: 522,
          column: 74
        },
        end: {
          line: 522,
          column: 97
        }
      },
      "158": {
        start: {
          line: 523,
          column: 24
        },
        end: {
          line: 538,
          column: 25
        }
      },
      "159": {
        start: {
          line: 524,
          column: 53
        },
        end: {
          line: 534,
          column: 30
        }
      },
      "160": {
        start: {
          line: 535,
          column: 28
        },
        end: {
          line: 537,
          column: 31
        }
      },
      "161": {
        start: {
          line: 536,
          column: 32
        },
        end: {
          line: 536,
          column: 85
        }
      },
      "162": {
        start: {
          line: 539,
          column: 59
        },
        end: {
          line: 539,
          column: 60
        }
      },
      "163": {
        start: {
          line: 541,
          column: 49
        },
        end: {
          line: 557,
          column: 26
        }
      },
      "164": {
        start: {
          line: 542,
          column: 46
        },
        end: {
          line: 542,
          column: 74
        }
      },
      "165": {
        start: {
          line: 543,
          column: 46
        },
        end: {
          line: 543,
          column: 80
        }
      },
      "166": {
        start: {
          line: 544,
          column: 53
        },
        end: {
          line: 544,
          column: 79
        }
      },
      "167": {
        start: {
          line: 545,
          column: 50
        },
        end: {
          line: 545,
          column: 75
        }
      },
      "168": {
        start: {
          line: 546,
          column: 47
        },
        end: {
          line: 546,
          column: 79
        }
      },
      "169": {
        start: {
          line: 547,
          column: 28
        },
        end: {
          line: 547,
          column: 77
        }
      },
      "170": {
        start: {
          line: 548,
          column: 28
        },
        end: {
          line: 556,
          column: 30
        }
      },
      "171": {
        start: {
          line: 559,
          column: 24
        },
        end: {
          line: 561,
          column: 27
        }
      },
      "172": {
        start: {
          line: 563,
          column: 44
        },
        end: {
          line: 570,
          column: 29
        }
      },
      "173": {
        start: {
          line: 564,
          column: 46
        },
        end: {
          line: 564,
          column: 74
        }
      },
      "174": {
        start: {
          line: 565,
          column: 46
        },
        end: {
          line: 565,
          column: 80
        }
      },
      "175": {
        start: {
          line: 566,
          column: 53
        },
        end: {
          line: 566,
          column: 79
        }
      },
      "176": {
        start: {
          line: 567,
          column: 50
        },
        end: {
          line: 567,
          column: 75
        }
      },
      "177": {
        start: {
          line: 568,
          column: 47
        },
        end: {
          line: 568,
          column: 79
        }
      },
      "178": {
        start: {
          line: 569,
          column: 28
        },
        end: {
          line: 569,
          column: 52
        }
      },
      "179": {
        start: {
          line: 571,
          column: 45
        },
        end: {
          line: 571,
          column: 132
        }
      },
      "180": {
        start: {
          line: 573,
          column: 39
        },
        end: {
          line: 573,
          column: 67
        }
      },
      "181": {
        start: {
          line: 574,
          column: 45
        },
        end: {
          line: 574,
          column: 46
        }
      },
      "182": {
        start: {
          line: 575,
          column: 24
        },
        end: {
          line: 577,
          column: 25
        }
      },
      "183": {
        start: {
          line: 576,
          column: 28
        },
        end: {
          line: 576,
          column: 166
        }
      },
      "184": {
        start: {
          line: 578,
          column: 39
        },
        end: {
          line: 578,
          column: 64
        }
      },
      "185": {
        start: {
          line: 579,
          column: 24
        },
        end: {
          line: 590,
          column: 27
        }
      },
      "186": {
        start: {
          line: 593,
          column: 20
        },
        end: {
          line: 672,
          column: 21
        }
      },
      "187": {
        start: {
          line: 595,
          column: 43
        },
        end: {
          line: 595,
          column: 105
        }
      },
      "188": {
        start: {
          line: 595,
          column: 76
        },
        end: {
          line: 595,
          column: 104
        }
      },
      "189": {
        start: {
          line: 596,
          column: 50
        },
        end: {
          line: 613,
          column: 26
        }
      },
      "190": {
        start: {
          line: 615,
          column: 51
        },
        end: {
          line: 615,
          column: 60
        }
      },
      "191": {
        start: {
          line: 616,
          column: 24
        },
        end: {
          line: 621,
          column: 27
        }
      },
      "192": {
        start: {
          line: 617,
          column: 28
        },
        end: {
          line: 619,
          column: 29
        }
      },
      "193": {
        start: {
          line: 618,
          column: 32
        },
        end: {
          line: 618,
          column: 75
        }
      },
      "194": {
        start: {
          line: 620,
          column: 28
        },
        end: {
          line: 620,
          column: 78
        }
      },
      "195": {
        start: {
          line: 623,
          column: 24
        },
        end: {
          line: 633,
          column: 25
        }
      },
      "196": {
        start: {
          line: 624,
          column: 46
        },
        end: {
          line: 624,
          column: 74
        }
      },
      "197": {
        start: {
          line: 625,
          column: 51
        },
        end: {
          line: 625,
          column: 90
        }
      },
      "198": {
        start: {
          line: 626,
          column: 28
        },
        end: {
          line: 628,
          column: 29
        }
      },
      "199": {
        start: {
          line: 627,
          column: 32
        },
        end: {
          line: 627,
          column: 113
        }
      },
      "200": {
        start: {
          line: 629,
          column: 51
        },
        end: {
          line: 629,
          column: 107
        }
      },
      "201": {
        start: {
          line: 629,
          column: 85
        },
        end: {
          line: 629,
          column: 103
        }
      },
      "202": {
        start: {
          line: 630,
          column: 28
        },
        end: {
          line: 632,
          column: 29
        }
      },
      "203": {
        start: {
          line: 631,
          column: 32
        },
        end: {
          line: 631,
          column: 181
        }
      },
      "204": {
        start: {
          line: 635,
          column: 49
        },
        end: {
          line: 635,
          column: 51
        }
      },
      "205": {
        start: {
          line: 636,
          column: 24
        },
        end: {
          line: 659,
          column: 25
        }
      },
      "206": {
        start: {
          line: 637,
          column: 46
        },
        end: {
          line: 637,
          column: 74
        }
      },
      "207": {
        start: {
          line: 638,
          column: 51
        },
        end: {
          line: 638,
          column: 90
        }
      },
      "208": {
        start: {
          line: 639,
          column: 52
        },
        end: {
          line: 639,
          column: 65
        }
      },
      "209": {
        start: {
          line: 640,
          column: 28
        },
        end: {
          line: 658,
          column: 29
        }
      },
      "210": {
        start: {
          line: 641,
          column: 32
        },
        end: {
          line: 641,
          column: 66
        }
      },
      "211": {
        start: {
          line: 641,
          column: 60
        },
        end: {
          line: 641,
          column: 66
        }
      },
      "212": {
        start: {
          line: 642,
          column: 32
        },
        end: {
          line: 657,
          column: 33
        }
      },
      "213": {
        start: {
          line: 643,
          column: 57
        },
        end: {
          line: 643,
          column: 108
        }
      },
      "214": {
        start: {
          line: 644,
          column: 60
        },
        end: {
          line: 644,
          column: 82
        }
      },
      "215": {
        start: {
          line: 645,
          column: 60
        },
        end: {
          line: 645,
          column: 97
        }
      },
      "216": {
        start: {
          line: 646,
          column: 36
        },
        end: {
          line: 649,
          column: 39
        }
      },
      "217": {
        start: {
          line: 650,
          column: 36
        },
        end: {
          line: 655,
          column: 39
        }
      },
      "218": {
        start: {
          line: 656,
          column: 36
        },
        end: {
          line: 656,
          column: 70
        }
      },
      "219": {
        start: {
          line: 661,
          column: 24
        },
        end: {
          line: 671,
          column: 25
        }
      },
      "220": {
        start: {
          line: 662,
          column: 28
        },
        end: {
          line: 670,
          column: 37
        }
      },
      "221": {
        start: {
          line: 662,
          column: 77
        },
        end: {
          line: 670,
          column: 34
        }
      },
      "222": {
        start: {
          line: 673,
          column: 20
        },
        end: {
          line: 681,
          column: 23
        }
      },
      "223": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 71
        }
      },
      "224": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 709,
          column: 13
        }
      },
      "225": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 708,
          column: 17
        }
      },
      "226": {
        start: {
          line: 690,
          column: 20
        },
        end: {
          line: 690,
          column: 91
        }
      },
      "227": {
        start: {
          line: 707,
          column: 20
        },
        end: {
          line: 707,
          column: 71
        }
      },
      "228": {
        start: {
          line: 711,
          column: 12
        },
        end: {
          line: 714,
          column: 15
        }
      },
      "229": {
        start: {
          line: 715,
          column: 33
        },
        end: {
          line: 715,
          column: 73
        }
      },
      "230": {
        start: {
          line: 716,
          column: 12
        },
        end: {
          line: 729,
          column: 15
        }
      },
      "231": {
        start: {
          line: 730,
          column: 12
        },
        end: {
          line: 736,
          column: 15
        }
      },
      "232": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 738,
          column: 60
        }
      },
      "233": {
        start: {
          line: 739,
          column: 12
        },
        end: {
          line: 745,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "retryOnPreparedStatementError",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 44
          }
        },
        loc: {
          start: {
            line: 32,
            column: 70
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 34
          },
          end: {
            line: 43,
            column: 35
          }
        },
        loc: {
          start: {
            line: 43,
            column: 45
          },
          end: {
            line: 43,
            column: 79
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 53,
            column: 61
          },
          end: {
            line: 53,
            column: 62
          }
        },
        loc: {
          start: {
            line: 53,
            column: 87
          },
          end: {
            line: 309,
            column: 1
          }
        },
        line: 53
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 54,
            column: 58
          },
          end: {
            line: 54,
            column: 59
          }
        },
        loc: {
          start: {
            line: 54,
            column: 68
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 54
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 171,
            column: 70
          },
          end: {
            line: 171,
            column: 71
          }
        },
        loc: {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 220,
            column: 22
          }
        },
        line: 172
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 222,
            column: 71
          },
          end: {
            line: 222,
            column: 72
          }
        },
        loc: {
          start: {
            line: 222,
            column: 75
          },
          end: {
            line: 224,
            column: 22
          }
        },
        line: 222
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 226,
            column: 71
          },
          end: {
            line: 226,
            column: 72
          }
        },
        loc: {
          start: {
            line: 226,
            column: 75
          },
          end: {
            line: 260,
            column: 22
          }
        },
        line: 226
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 264,
            column: 51
          },
          end: {
            line: 264,
            column: 52
          }
        },
        loc: {
          start: {
            line: 264,
            column: 62
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 264
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 310,
            column: 62
          },
          end: {
            line: 310,
            column: 63
          }
        },
        loc: {
          start: {
            line: 310,
            column: 88
          },
          end: {
            line: 750,
            column: 1
          }
        },
        line: 310
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 311,
            column: 64
          },
          end: {
            line: 311,
            column: 65
          }
        },
        loc: {
          start: {
            line: 311,
            column: 74
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 311
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 414,
            column: 69
          },
          end: {
            line: 414,
            column: 70
          }
        },
        loc: {
          start: {
            line: 414,
            column: 73
          },
          end: {
            line: 423,
            column: 22
          }
        },
        line: 414
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 426,
            column: 68
          },
          end: {
            line: 426,
            column: 69
          }
        },
        loc: {
          start: {
            line: 426,
            column: 81
          },
          end: {
            line: 430,
            column: 21
          }
        },
        line: 426
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 432,
            column: 84
          },
          end: {
            line: 432,
            column: 85
          }
        },
        loc: {
          start: {
            line: 432,
            column: 88
          },
          end: {
            line: 445,
            column: 26
          }
        },
        line: 432
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 482,
            column: 88
          },
          end: {
            line: 482,
            column: 89
          }
        },
        loc: {
          start: {
            line: 482,
            column: 92
          },
          end: {
            line: 684,
            column: 18
          }
        },
        line: 482
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 482,
            column: 121
          },
          end: {
            line: 482,
            column: 122
          }
        },
        loc: {
          start: {
            line: 482,
            column: 133
          },
          end: {
            line: 682,
            column: 17
          }
        },
        line: 482
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 503,
            column: 68
          },
          end: {
            line: 503,
            column: 69
          }
        },
        loc: {
          start: {
            line: 503,
            column: 76
          },
          end: {
            line: 503,
            column: 104
          }
        },
        line: 503
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 517,
            column: 74
          },
          end: {
            line: 517,
            column: 75
          }
        },
        loc: {
          start: {
            line: 517,
            column: 82
          },
          end: {
            line: 520,
            column: 29
          }
        },
        line: 517
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 522,
            column: 68
          },
          end: {
            line: 522,
            column: 69
          }
        },
        loc: {
          start: {
            line: 522,
            column: 74
          },
          end: {
            line: 522,
            column: 97
          }
        },
        line: 522
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 535,
            column: 53
          },
          end: {
            line: 535,
            column: 54
          }
        },
        loc: {
          start: {
            line: 535,
            column: 58
          },
          end: {
            line: 537,
            column: 29
          }
        },
        line: 535
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 541,
            column: 74
          },
          end: {
            line: 541,
            column: 75
          }
        },
        loc: {
          start: {
            line: 541,
            column: 82
          },
          end: {
            line: 557,
            column: 25
          }
        },
        line: 541
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 563,
            column: 72
          },
          end: {
            line: 563,
            column: 73
          }
        },
        loc: {
          start: {
            line: 563,
            column: 85
          },
          end: {
            line: 570,
            column: 25
          }
        },
        line: 563
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 595,
            column: 68
          },
          end: {
            line: 595,
            column: 69
          }
        },
        loc: {
          start: {
            line: 595,
            column: 76
          },
          end: {
            line: 595,
            column: 104
          }
        },
        line: 595
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 616,
            column: 50
          },
          end: {
            line: 616,
            column: 51
          }
        },
        loc: {
          start: {
            line: 616,
            column: 58
          },
          end: {
            line: 621,
            column: 25
          }
        },
        line: 616
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 629,
            column: 73
          },
          end: {
            line: 629,
            column: 74
          }
        },
        loc: {
          start: {
            line: 629,
            column: 85
          },
          end: {
            line: 629,
            column: 103
          }
        },
        line: 629
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 662,
            column: 67
          },
          end: {
            line: 662,
            column: 68
          }
        },
        loc: {
          start: {
            line: 662,
            column: 77
          },
          end: {
            line: 670,
            column: 34
          }
        },
        line: 662
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 54
          },
          end: {
            line: 32,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 67
          },
          end: {
            line: 32,
            column: 68
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 39,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 37,
            column: 68
          }
        }, {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 35
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 58
          }
        }, {
          start: {
            line: 39,
            column: 62
          },
          end: {
            line: 39,
            column: 104
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 40
          }
        }, {
          start: {
            line: 40,
            column: 44
          },
          end: {
            line: 40,
            column: 64
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 34
          },
          end: {
            line: 105,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 34
          },
          end: {
            line: 105,
            column: 58
          }
        }, {
          start: {
            line: 105,
            column: 62
          },
          end: {
            line: 105,
            column: 65
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 69
          }
        }, {
          start: {
            line: 106,
            column: 73
          },
          end: {
            line: 106,
            column: 98
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 53
          }
        }, {
          start: {
            line: 107,
            column: 57
          },
          end: {
            line: 107,
            column: 59
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 108,
            column: 34
          },
          end: {
            line: 108,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 34
          },
          end: {
            line: 108,
            column: 67
          }
        }, {
          start: {
            line: 108,
            column: 71
          },
          end: {
            line: 108,
            column: 73
          }
        }],
        line: 108
      },
      "13": {
        loc: {
          start: {
            line: 109,
            column: 32
          },
          end: {
            line: 109,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 32
          },
          end: {
            line: 109,
            column: 58
          }
        }, {
          start: {
            line: 109,
            column: 62
          },
          end: {
            line: 109,
            column: 64
          }
        }],
        line: 109
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 34
          },
          end: {
            line: 119,
            column: 40
          }
        }, {
          start: {
            line: 119,
            column: 43
          },
          end: {
            line: 119,
            column: 57
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 120,
            column: 24
          },
          end: {
            line: 120,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 120,
            column: 41
          }
        }, {
          start: {
            line: 120,
            column: 44
          },
          end: {
            line: 120,
            column: 51
          }
        }],
        line: 120
      },
      "16": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "17": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "18": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "19": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 142,
            column: 13
          }
        }],
        line: 137
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 23
          }
        }, {
          start: {
            line: 137,
            column: 27
          },
          end: {
            line: 137,
            column: 33
          }
        }, {
          start: {
            line: 137,
            column: 37
          },
          end: {
            line: 137,
            column: 53
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "22": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "23": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "24": {
        loc: {
          start: {
            line: 270,
            column: 34
          },
          end: {
            line: 270,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 34
          },
          end: {
            line: 270,
            column: 48
          }
        }, {
          start: {
            line: 270,
            column: 52
          },
          end: {
            line: 270,
            column: 70
          }
        }],
        line: 270
      },
      "25": {
        loc: {
          start: {
            line: 281,
            column: 38
          },
          end: {
            line: 281,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 38
          },
          end: {
            line: 281,
            column: 65
          }
        }, {
          start: {
            line: 281,
            column: 69
          },
          end: {
            line: 281,
            column: 70
          }
        }],
        line: 281
      },
      "26": {
        loc: {
          start: {
            line: 282,
            column: 35
          },
          end: {
            line: 282,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 35
          },
          end: {
            line: 282,
            column: 59
          }
        }, {
          start: {
            line: 282,
            column: 63
          },
          end: {
            line: 282,
            column: 64
          }
        }],
        line: 282
      },
      "27": {
        loc: {
          start: {
            line: 301,
            column: 23
          },
          end: {
            line: 301,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 61
          }
        }, {
          start: {
            line: 301,
            column: 64
          },
          end: {
            line: 301,
            column: 77
          }
        }],
        line: 301
      },
      "28": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 322,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 322,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "29": {
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 316,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 316,
            column: 42
          }
        }, {
          start: {
            line: 316,
            column: 46
          },
          end: {
            line: 316,
            column: 76
          }
        }],
        line: 316
      },
      "30": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "31": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "32": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 42
          }
        }, {
          start: {
            line: 334,
            column: 46
          },
          end: {
            line: 334,
            column: 75
          }
        }],
        line: 334
      },
      "33": {
        loc: {
          start: {
            line: 336,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "34": {
        loc: {
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "35": {
        loc: {
          start: {
            line: 346,
            column: 20
          },
          end: {
            line: 346,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 20
          },
          end: {
            line: 346,
            column: 47
          }
        }, {
          start: {
            line: 346,
            column: 51
          },
          end: {
            line: 346,
            column: 75
          }
        }],
        line: 346
      },
      "36": {
        loc: {
          start: {
            line: 348,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "37": {
        loc: {
          start: {
            line: 356,
            column: 88
          },
          end: {
            line: 356,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 88
          },
          end: {
            line: 356,
            column: 110
          }
        }, {
          start: {
            line: 356,
            column: 114
          },
          end: {
            line: 356,
            column: 149
          }
        }],
        line: 356
      },
      "38": {
        loc: {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "39": {
        loc: {
          start: {
            line: 364,
            column: 16
          },
          end: {
            line: 364,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 16
          },
          end: {
            line: 364,
            column: 37
          }
        }, {
          start: {
            line: 364,
            column: 41
          },
          end: {
            line: 364,
            column: 77
          }
        }, {
          start: {
            line: 364,
            column: 81
          },
          end: {
            line: 364,
            column: 114
          }
        }],
        line: 364
      },
      "40": {
        loc: {
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 406,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 406,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "41": {
        loc: {
          start: {
            line: 384,
            column: 20
          },
          end: {
            line: 384,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 20
          },
          end: {
            line: 384,
            column: 35
          }
        }, {
          start: {
            line: 384,
            column: 39
          },
          end: {
            line: 384,
            column: 53
          }
        }, {
          start: {
            line: 384,
            column: 57
          },
          end: {
            line: 384,
            column: 75
          }
        }],
        line: 384
      },
      "42": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "43": {
        loc: {
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "44": {
        loc: {
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 463,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 463,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "45": {
        loc: {
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 424,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 424,
            column: 28
          }
        }, {
          start: {
            line: 424,
            column: 32
          },
          end: {
            line: 424,
            column: 69
          }
        }, {
          start: {
            line: 424,
            column: 73
          },
          end: {
            line: 424,
            column: 93
          }
        }],
        line: 424
      },
      "46": {
        loc: {
          start: {
            line: 427,
            column: 38
          },
          end: {
            line: 427,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 38
          },
          end: {
            line: 427,
            column: 66
          }
        }, {
          start: {
            line: 427,
            column: 70
          },
          end: {
            line: 427,
            column: 92
          }
        }, {
          start: {
            line: 427,
            column: 96
          },
          end: {
            line: 427,
            column: 97
          }
        }],
        line: 427
      },
      "47": {
        loc: {
          start: {
            line: 428,
            column: 41
          },
          end: {
            line: 428,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 428,
            column: 41
          },
          end: {
            line: 428,
            column: 68
          }
        }, {
          start: {
            line: 428,
            column: 72
          },
          end: {
            line: 428,
            column: 73
          }
        }],
        line: 428
      },
      "48": {
        loc: {
          start: {
            line: 446,
            column: 43
          },
          end: {
            line: 446,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 446,
            column: 43
          },
          end: {
            line: 446,
            column: 73
          }
        }, {
          start: {
            line: 446,
            column: 77
          },
          end: {
            line: 446,
            column: 78
          }
        }],
        line: 446
      },
      "49": {
        loc: {
          start: {
            line: 448,
            column: 20
          },
          end: {
            line: 462,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 20
          },
          end: {
            line: 462,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "50": {
        loc: {
          start: {
            line: 466,
            column: 39
          },
          end: {
            line: 466,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 39
          },
          end: {
            line: 466,
            column: 52
          }
        }, {
          start: {
            line: 466,
            column: 56
          },
          end: {
            line: 466,
            column: 111
          }
        }],
        line: 466
      },
      "51": {
        loc: {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: 478,
            column: 19
          },
          end: {
            line: 480,
            column: 13
          }
        }],
        line: 469
      },
      "52": {
        loc: {
          start: {
            line: 473,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "53": {
        loc: {
          start: {
            line: 486,
            column: 40
          },
          end: {
            line: 486,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 40
          },
          end: {
            line: 486,
            column: 65
          }
        }, {
          start: {
            line: 486,
            column: 69
          },
          end: {
            line: 486,
            column: 73
          }
        }],
        line: 486
      },
      "54": {
        loc: {
          start: {
            line: 489,
            column: 43
          },
          end: {
            line: 489,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 43
          },
          end: {
            line: 489,
            column: 71
          }
        }, {
          start: {
            line: 489,
            column: 75
          },
          end: {
            line: 489,
            column: 81
          }
        }],
        line: 489
      },
      "55": {
        loc: {
          start: {
            line: 490,
            column: 41
          },
          end: {
            line: 490,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 490,
            column: 70
          },
          end: {
            line: 490,
            column: 106
          }
        }, {
          start: {
            line: 490,
            column: 109
          },
          end: {
            line: 490,
            column: 119
          }
        }],
        line: 490
      },
      "56": {
        loc: {
          start: {
            line: 491,
            column: 37
          },
          end: {
            line: 491,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 62
          },
          end: {
            line: 491,
            column: 94
          }
        }, {
          start: {
            line: 491,
            column: 97
          },
          end: {
            line: 491,
            column: 101
          }
        }],
        line: 491
      },
      "57": {
        loc: {
          start: {
            line: 492,
            column: 35
          },
          end: {
            line: 492,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 35
          },
          end: {
            line: 492,
            column: 55
          }
        }, {
          start: {
            line: 492,
            column: 59
          },
          end: {
            line: 492,
            column: 61
          }
        }],
        line: 492
      },
      "58": {
        loc: {
          start: {
            line: 493,
            column: 36
          },
          end: {
            line: 493,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 493,
            column: 36
          },
          end: {
            line: 493,
            column: 57
          }
        }, {
          start: {
            line: 493,
            column: 61
          },
          end: {
            line: 493,
            column: 65
          }
        }],
        line: 493
      },
      "59": {
        loc: {
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 591,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 591,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "60": {
        loc: {
          start: {
            line: 501,
            column: 24
          },
          end: {
            line: 501,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 24
          },
          end: {
            line: 501,
            column: 44
          }
        }, {
          start: {
            line: 501,
            column: 48
          },
          end: {
            line: 501,
            column: 83
          }
        }],
        line: 501
      },
      "61": {
        loc: {
          start: {
            line: 519,
            column: 32
          },
          end: {
            line: 519,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 32
          },
          end: {
            line: 519,
            column: 53
          }
        }, {
          start: {
            line: 519,
            column: 57
          },
          end: {
            line: 519,
            column: 58
          }
        }],
        line: 519
      },
      "62": {
        loc: {
          start: {
            line: 523,
            column: 24
          },
          end: {
            line: 538,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 24
          },
          end: {
            line: 538,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "63": {
        loc: {
          start: {
            line: 536,
            column: 57
          },
          end: {
            line: 536,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 536,
            column: 57
          },
          end: {
            line: 536,
            column: 78
          }
        }, {
          start: {
            line: 536,
            column: 82
          },
          end: {
            line: 536,
            column: 83
          }
        }],
        line: 536
      },
      "64": {
        loc: {
          start: {
            line: 543,
            column: 46
          },
          end: {
            line: 543,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 543,
            column: 46
          },
          end: {
            line: 543,
            column: 75
          }
        }, {
          start: {
            line: 543,
            column: 79
          },
          end: {
            line: 543,
            column: 80
          }
        }],
        line: 543
      },
      "65": {
        loc: {
          start: {
            line: 565,
            column: 46
          },
          end: {
            line: 565,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 565,
            column: 46
          },
          end: {
            line: 565,
            column: 75
          }
        }, {
          start: {
            line: 565,
            column: 79
          },
          end: {
            line: 565,
            column: 80
          }
        }],
        line: 565
      },
      "66": {
        loc: {
          start: {
            line: 571,
            column: 45
          },
          end: {
            line: 571,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 571,
            column: 80
          },
          end: {
            line: 571,
            column: 128
          }
        }, {
          start: {
            line: 571,
            column: 131
          },
          end: {
            line: 571,
            column: 132
          }
        }],
        line: 571
      },
      "67": {
        loc: {
          start: {
            line: 575,
            column: 24
          },
          end: {
            line: 577,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 24
          },
          end: {
            line: 577,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "68": {
        loc: {
          start: {
            line: 575,
            column: 28
          },
          end: {
            line: 575,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 28
          },
          end: {
            line: 575,
            column: 55
          }
        }, {
          start: {
            line: 575,
            column: 59
          },
          end: {
            line: 575,
            column: 91
          }
        }],
        line: 575
      },
      "69": {
        loc: {
          start: {
            line: 576,
            column: 45
          },
          end: {
            line: 576,
            column: 165
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 576,
            column: 89
          },
          end: {
            line: 576,
            column: 134
          }
        }, {
          start: {
            line: 576,
            column: 137
          },
          end: {
            line: 576,
            column: 165
          }
        }],
        line: 576
      },
      "70": {
        loc: {
          start: {
            line: 593,
            column: 20
          },
          end: {
            line: 672,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 593,
            column: 20
          },
          end: {
            line: 672,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 593
      },
      "71": {
        loc: {
          start: {
            line: 593,
            column: 24
          },
          end: {
            line: 593,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 593,
            column: 24
          },
          end: {
            line: 593,
            column: 45
          }
        }, {
          start: {
            line: 593,
            column: 49
          },
          end: {
            line: 593,
            column: 69
          }
        }, {
          start: {
            line: 593,
            column: 73
          },
          end: {
            line: 593,
            column: 108
          }
        }],
        line: 593
      },
      "72": {
        loc: {
          start: {
            line: 617,
            column: 28
          },
          end: {
            line: 619,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 617,
            column: 28
          },
          end: {
            line: 619,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 617
      },
      "73": {
        loc: {
          start: {
            line: 625,
            column: 51
          },
          end: {
            line: 625,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 625,
            column: 51
          },
          end: {
            line: 625,
            column: 84
          }
        }, {
          start: {
            line: 625,
            column: 88
          },
          end: {
            line: 625,
            column: 90
          }
        }],
        line: 625
      },
      "74": {
        loc: {
          start: {
            line: 626,
            column: 28
          },
          end: {
            line: 628,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 626,
            column: 28
          },
          end: {
            line: 628,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 626
      },
      "75": {
        loc: {
          start: {
            line: 630,
            column: 28
          },
          end: {
            line: 632,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 630,
            column: 28
          },
          end: {
            line: 632,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 630
      },
      "76": {
        loc: {
          start: {
            line: 638,
            column: 51
          },
          end: {
            line: 638,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 638,
            column: 51
          },
          end: {
            line: 638,
            column: 84
          }
        }, {
          start: {
            line: 638,
            column: 88
          },
          end: {
            line: 638,
            column: 90
          }
        }],
        line: 638
      },
      "77": {
        loc: {
          start: {
            line: 641,
            column: 32
          },
          end: {
            line: 641,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 641,
            column: 32
          },
          end: {
            line: 641,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 641
      },
      "78": {
        loc: {
          start: {
            line: 642,
            column: 32
          },
          end: {
            line: 657,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 642,
            column: 32
          },
          end: {
            line: 657,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 642
      },
      "79": {
        loc: {
          start: {
            line: 661,
            column: 24
          },
          end: {
            line: 671,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 661,
            column: 24
          },
          end: {
            line: 671,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 661
      },
      "80": {
        loc: {
          start: {
            line: 687,
            column: 12
          },
          end: {
            line: 709,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 687,
            column: 12
          },
          end: {
            line: 709,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 687
      },
      "81": {
        loc: {
          start: {
            line: 742,
            column: 23
          },
          end: {
            line: 742,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 742,
            column: 48
          },
          end: {
            line: 742,
            column: 61
          }
        }, {
          start: {
            line: 742,
            column: 64
          },
          end: {
            line: 742,
            column: 77
          }
        }],
        line: 742
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { revalidateTag } from 'next/cache';\nimport prisma, { executeQuery } from '@/lib/prisma';\n\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { measureAsync } from '@/lib/performance';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n// Note: smsService import commented out as it may not be available\n// import { smsService } from '@/lib/sms';\nimport { AuditService } from '@/services/auditService';\n\n// Helper function to retry on prepared statement errors\nasync function retryOnPreparedStatementError<T>(queryFn: () => Promise<T>, maxRetries: number = 3): Promise<T> {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await queryFn();\n        } catch (error: any) {\n            const isPreparedStatementError = \n                error?.code === '26000' ||  // prepared statement does not exist\n                error?.code === '42P05' ||  // prepared statement already exists\n                error?.message?.includes('prepared statement') ||\n                error?.message?.includes('does not exist');\n            \n            if (isPreparedStatementError && attempt < maxRetries) {\n                console.log(`Prepared statement error detected (attempt ${attempt}/${maxRetries}), retrying...`);\n                // Wait a bit before retrying\n                await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n}\nconst CACHE_DURATION = 60; // 60 seconds\n\nconst ITEMS_PER_PAGE = 15;\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('invoices-api', async () => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'sales:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: authResult.message }, { status: 401 });\n            }\n\n            // Get user ID from token for filtering\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            // Get user details to check role\n            const user = await prisma.user.findUnique({\n                where: { id: userId },\n                select: {\n                    id: true,\n                    shopId: true,\n                    role: {\n                        select: { name: true }\n                    }\n                }\n            });\n\n            if (!user) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            console.log('Invoices API - Shop context:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                isAdmin: context.isAdmin,\n                userShopId: context.userShopId,\n                userId: user.id,\n                userRole: user.role?.name\n            });\n\n            const searchParams = request.nextUrl.searchParams;\n            const page = parseInt(searchParams.get('page') || '1', 10);\n            const limit = Math.min(parseInt(searchParams.get('limit') || ITEMS_PER_PAGE.toString(), 10), 50); // Cap at 50\n            const status = searchParams.get('status') || '';\n            const paymentMethod = searchParams.get('paymentMethod') || '';\n            const searchQuery = searchParams.get('search') || '';\n            const shopId = searchParams.get('shopId');\n\n            // Use the admin status from the shop access control middleware for consistency\n            const isAdmin = context.isAdmin;\n            \n            const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.INVOICES, {\n                page,\n                limit,\n                status,\n                paymentMethod,\n                search: searchQuery,\n                shopId: isAdmin ? shopId : context.shopId, // Use context's shopId for non-admins\n                userId: isAdmin ? 'admin' : user.id // Admin sees all, others see user-specific\n            });\n\n            // Try to get from cache first\n            const cachedData = await cacheService.get(cacheKey);\n            if (cachedData) {\n                const response = NextResponse.json(cachedData);\n                response.headers.set('X-Cache', 'HIT');\n                response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n                return response;\n            }\n\n            // Build optimized where clause with shop filtering\n            let whereClause: any = ShopAccessControl.buildShopFilter(context);\n\n            // Shop filtering is now primarily handled by the middleware.\n            if (status) whereClause.status = status;\n            if (paymentMethod) whereClause.paymentMethod = paymentMethod;\n            \n            // For non-admins, the shopId from their token is already applied by buildShopFilter.\n            // We only allow an admin to override it with a query parameter.\n            if (isAdmin && shopId && shopId !== 'all') {\n                whereClause.shopId = shopId;\n            } else if (!isAdmin) {\n                // Enforce the user's shopId from the token context for all non-admin users\n                whereClause.shopId = context.shopId;\n            }\n\n            console.log('Invoices where clause:', JSON.stringify(whereClause, null, 2));\n            if (searchQuery) {\n                whereClause.OR = [\n                    { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                    { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n                ];\n\n                // Handle numeric search for total amount\n                const numericQuery = parseFloat(searchQuery);\n                if (!isNaN(numericQuery)) {\n                    whereClause.OR.push({ total: numericQuery });\n                }\n            }\n\n            // Execute queries in parallel for better performance\n            const [invoices, totalInvoices, statistics] = await Promise.all([\n                measureAsync('invoices-main-query', () =>\n                    // Main invoices query with optimized select\n                    prisma.invoice.findMany({\n                        where: whereClause,\n                        select: {\n                            id: true,\n                            invoiceNumber: true,\n                            total: true,\n                            status: true,\n                            paymentMethod: true,\n                            invoiceDate: true,\n                            dueDate: true,\n                            notes: true,\n                            createdAt: true,\n                            updatedAt: true,\n                            customer: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    email: true,\n                                    phone: true\n                                }\n                            },\n                            shop: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    location: true,\n                                    contact_person: true,\n                                    phone: true,\n                                    email: true,\n                                    address_line1: true,\n                                    address_line2: true,\n                                    city: true,\n                                    state: true,\n                                    postal_code: true,\n                                    country: true\n                                }\n                            },\n                            _count: {\n                                select: { items: true }\n                            }\n                        },\n                        orderBy: {\n                            createdAt: 'desc',\n                        },\n                        skip: (page - 1) * limit,\n                        take: limit,\n                    })\n                ),\n\n                // Total count query\n                measureAsync('invoices-count-query', () =>\n                    prisma.invoice.count({ where: whereClause })\n                ),\n\n                // Statistics queries in parallel\n                measureAsync('invoices-stats-query', () =>\n                    Promise.all([\n                        // Total outstanding (pending invoices)\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'pending'\n                            }\n                        }),\n\n                        // Paid this month\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'paid',\n                                createdAt: {\n                                    gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n                                }\n                            }\n                        }),\n\n                        // Overdue count\n                        prisma.invoice.count({\n                            where: {\n                                ...whereClause,\n                                status: 'pending',\n                                dueDate: {\n                                    lt: new Date()\n                                }\n                            }\n                        })\n                    ])\n                )\n            ]);\n\n            const [totalOutstanding, paidThisMonth, overdueCount] = statistics;\n\n            // Format response with optimized data structure\n            const formattedInvoices = invoices.map(invoice => {\n                const { _count, customer, shop, ...rest } = invoice;\n                return {\n                    ...rest,\n                    customer,\n                    shop,\n                    customerName: customer?.name || 'Unknown Customer',\n                    customerId: customer?.id,\n                    itemCount: _count.items,\n                };\n            });\n\n            const responseData = {\n                invoices: formattedInvoices,\n                totalPages: Math.ceil(totalInvoices / limit),\n                currentPage: page,\n                total: totalInvoices,\n                statistics: {\n                    totalOutstanding: totalOutstanding._sum.total || 0,\n                    paidThisMonth: paidThisMonth._sum.total || 0,\n                    overdueCount\n                },\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            };\n\n            // Cache the response\n            await cacheService.set(cacheKey, responseData, CACHE_CONFIG.TTL.INVOICES);\n\n            const response = NextResponse.json(responseData);\n            response.headers.set('X-Cache', 'MISS');\n            response.headers.set('Cache-Control', 'public, s-maxage=60, stale-while-revalidate=120');\n\n            return response;\n\n        } catch (error) {\n            console.error('Error fetching invoices:', error);\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Error fetching invoices',\n                    error: error instanceof Error ? error.message : String(error),\n                },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'invoices' });\n});\n\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('create-invoice-api', async () => {\n        try {\n            // Validate token and permissions\n            const salesManageResult = await validateTokenPermission(request, 'sales:manage');\n            const salesCreateShopResult = await validateTokenPermission(request, 'sales:create:shop');\n            \n            if (!salesManageResult.isValid && !salesCreateShopResult.isValid) {\n                return NextResponse.json({ \n                    error: 'Permission denied: sales:manage or sales:create:shop required' \n                }, { status: 403 });\n            }\n\n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ \n                    error: 'Unable to get user information from token' \n                }, { status: 401 });\n            }\n\n            const invoiceData = await request.json();\n            \n            // If user only has sales:create:shop permission, validate shop restriction\n            if (!salesManageResult.isValid && salesCreateShopResult.isValid) {\n                // User can only create sales for their assigned shop\n                if (!invoiceData.shopId) {\n                    return NextResponse.json({\n                        success: false,\n                        message: 'Shop ID is required for sales creation'\n                    }, { status: 400 });\n                }\n\n                // Validate that the user can only create invoices for their shop\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceData.shopId);\n                if (!shopAccessResult.hasAccess || shopAccessResult.isAdmin) {\n                    // If user is admin, they should have sales:manage, not sales:create:shop\n                    if (shopAccessResult.isAdmin) {\n                        return NextResponse.json({\n                            success: false,\n                            message: 'Admin users should use sales:manage permission'\n                        }, { status: 403 });\n                    }\n                    return ShopAccessControl.createAccessDeniedResponse(\n                        shopAccessResult.error || 'Cannot create sales for this shop'\n                    );\n                }\n            }\n            console.log('Invoice data received:', JSON.stringify(invoiceData, null, 2));\n            const { sendSms, invoiceNumber, ...invoiceDetails } = invoiceData;\n            console.log('Invoice details after destructuring:', JSON.stringify(invoiceDetails, null, 2));\n            console.log('Invoice number from request:', invoiceNumber);\n            \n            // Server-side validation to prevent empty invoices\n            if (!invoiceDetails.items || !Array.isArray(invoiceDetails.items) || invoiceDetails.items.length === 0) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'Invoice must contain at least one item',\n                        error: 'No items provided'\n                    },\n                    { status: 400 }\n                );\n            }\n\n            // Validate that all items have required fields\n            for (let i = 0; i < invoiceDetails.items.length; i++) {\n                const item = invoiceDetails.items[i];\n                console.log(`Validating item ${i}:`, {\n                    productId: item.productId,\n                    productIdType: typeof item.productId,\n                    quantity: item.quantity,\n                    quantityType: typeof item.quantity,\n                    price: item.price,\n                    priceType: typeof item.price\n                });\n                \n                if (!item.productId || !item.quantity || item.quantity <= 0) {\n                    console.log(`Item validation failed for item ${i}:`, {\n                        hasProductId: !!item.productId,\n                        hasQuantity: !!item.quantity,\n                        quantityValue: item.quantity,\n                        quantityCheck: item.quantity <= 0\n                    });\n                    return NextResponse.json(\n                        {\n                            success: false,\n                            message: `Item ${i + 1}: All items must have valid productId and quantity greater than 0`,\n                            error: 'Invalid item data',\n                            itemDetails: {\n                                index: i,\n                                productId: item.productId,\n                                quantity: item.quantity,\n                                hasProductId: !!item.productId,\n                                hasQuantity: !!item.quantity,\n                                quantityPositive: item.quantity > 0\n                            }\n                        },\n                        { status: 400 }\n                    );\n                }\n            }\n\n            // Validate customer is provided (optional but recommended)\n            if (!invoiceDetails.customerId) {\n                console.warn('Invoice created without customer ID');\n            }\n\n            // Credit limit validation for wholesale customers\n            if (invoiceDetails.customerId) {\n                const customer = await retryOnPreparedStatementError(() => \n                    prisma.customer.findUnique({\n                        where: { id: invoiceDetails.customerId },\n                        select: { \n                            customerType: true, \n                            creditLimit: true,\n                            name: true\n                        }\n                    })\n                );\n\n                if (customer && customer.customerType === 'wholesale' && customer.creditLimit) {\n                    // Calculate total invoice amount\n                    const totalAmount = invoiceDetails.items.reduce((sum: number, item: any) => {\n                        const price = parseFloat(item.customPrice) || parseFloat(item.price) || 0;\n                        const quantity = parseInt(item.quantity, 10) || 0;\n                        return sum + (price * quantity);\n                    }, 0);\n\n                    // Get customer's current outstanding balance\n                    const outstandingInvoices = await retryOnPreparedStatementError(() =>\n                        prisma.invoice.aggregate({\n                            where: {\n                                customerId: invoiceDetails.customerId,\n                                status: { in: ['pending', 'overdue'] }\n                            },\n                            _sum: { total: true }\n                        })\n                    );\n\n                    const currentBalance = outstandingInvoices._sum.total || 0;\n                    const newTotalBalance = currentBalance + totalAmount;\n\n                    if (newTotalBalance > customer.creditLimit) {\n                        return NextResponse.json(\n                            {\n                                success: false,\n                                message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,\n                                error: 'Credit limit exceeded',\n                                details: {\n                                    currentBalance,\n                                    invoiceAmount: totalAmount,\n                                    creditLimit: customer.creditLimit,\n                                    exceedAmount: newTotalBalance - customer.creditLimit\n                                }\n                            },\n                            { status: 400 }\n                        );\n                    }\n                }\n            }\n            \n            // Generate invoice number if missing\n            const finalInvoiceNumber = invoiceNumber || `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n            console.log('Final invoice number to use:', finalInvoiceNumber);\n\n            // Validate shop access for the target shop (only if shopId is provided)\n            if (invoiceDetails.shopId) {\n                console.log('Validating shop access for shopId:', invoiceDetails.shopId);\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceDetails.shopId);\n                console.log('Shop access result:', shopAccessResult);\n                if (!shopAccessResult.hasAccess) {\n                    console.log('Shop access denied:', shopAccessResult.error);\n                    return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n                }\n                console.log('Shop access granted');\n            } else {\n                console.log('No shopId provided, skipping shop access validation');\n            }\n\n            const inventoryUpdatesForEvent: Array<{ productId: number, shopId: string, newQuantity: number, oldQuantity: number }> = [];\n\n            const invoice = await measureAsync('invoice-transaction', () =>\n                prisma.$transaction(\n                    async (tx) => {\n                        const createdInvoice = await tx.invoice.create({\n                            data: {\n                                invoiceNumber: finalInvoiceNumber,\n                                customerId: invoiceDetails.customerId || null,\n                                total: 0, // Will be updated after items are processed\n                                status: 'pending',\n                                paymentMethod: invoiceDetails.paymentMethod || 'Cash',\n                                invoiceDate: invoiceDetails.invoiceDate ? new Date(invoiceDetails.invoiceDate) : new Date(),\n                                dueDate: invoiceDetails.dueDate ? new Date(invoiceDetails.dueDate) : null,\n                                notes: invoiceDetails.notes || '',\n                                shopId: invoiceDetails.shopId || null,\n                                createdBy: userId,\n                                totalProfit: 0, // Will be updated after items are processed\n                                profitMargin: 0 // Will be updated after items are processed\n                            },\n                        });\n\n                        // Removed automatic payment creation for cash invoices\n                        // Users will manually record payments when they actually receive them\n\n                        if (invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Get shop-specific costs for profit calculation instead of global weighted average\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const inventoryItems = await tx.inventoryItem.findMany({\n                                where: { \n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                select: { productId: true, shopSpecificCost: true }\n                            });\n\n                            // Create a map of productId to shop-specific cost\n                            const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                            \n                            // For products not found in inventory, fallback to global weighted average\n                            const missingProductIds = productIds.filter((id: any) => !productCostMap.has(id));\n                            if (missingProductIds.length > 0) {\n                                const fallbackProducts = await tx.product.findMany({\n                                    where: { id: { in: missingProductIds } },\n                                    select: { id: true, weightedAverageCost: true }\n                                });\n                                fallbackProducts.forEach(p => {\n                                    productCostMap.set(p.id, p.weightedAverageCost || 0);\n                                });\n                            }\n\n                            let calculatedTotalInvoiceAmount = 0;\n                            \n                            // Batch create invoice items for better performance\n                            const invoiceItemsData = invoiceDetails.items.map((item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                \n                                calculatedTotalInvoiceAmount += itemSellingTotal;\n                                \n                                return {\n                                    invoiceId: createdInvoice.id,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                };\n                            });\n                            \n                            // Batch insert all invoice items\n                            await tx.invoiceItem.createMany({\n                                data: invoiceItemsData\n                            });\n\n                            // Calculate and update total profit and profit margin\n                            const totalProfit = invoiceDetails.items.reduce((sum: number, item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                return sum + itemProfit;\n                            }, 0);\n\n                            const profitMargin = calculatedTotalInvoiceAmount > 0 ? (totalProfit / calculatedTotalInvoiceAmount) * 100 : 0;\n\n                            // Apply discount if provided\n                            let subtotal = calculatedTotalInvoiceAmount;\n                            let discountAmount = 0;\n                            if (invoiceDetails.discountType && invoiceDetails.discountValue > 0) {\n                                discountAmount = invoiceDetails.discountType === 'percent'\n                                    ? (subtotal * invoiceDetails.discountValue) / 100\n                                    : invoiceDetails.discountValue;\n                            }\n                            let netTotal = subtotal - discountAmount;\n\n                            await tx.invoice.update({\n                                where: { id: createdInvoice.id },\n                                data: {\n                                    discountType: invoiceDetails.discountType,\n                                    discountValue: invoiceDetails.discountValue,\n                                    total: netTotal,\n                                    totalProfit: totalProfit,\n                                    profitMargin: profitMargin\n                                }\n                            });\n                        }\n\n                        // Optimized inventory check and update for the selected shop\n                        if (invoiceDetails.shopId && invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Batch fetch all inventory items for all products in one query\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const allInventoryItems = await tx.inventoryItem.findMany({\n                                where: {\n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                orderBy: { updatedAt: 'asc' },\n                                select: { id: true, productId: true, quantity: true, updatedAt: true, shopId: true }\n                            });\n                            \n                            // Group inventory items by product ID\n                            const inventoryByProduct = new Map<number, typeof allInventoryItems>();\n                            allInventoryItems.forEach(item => {\n                                if (!inventoryByProduct.has(item.productId)) {\n                                    inventoryByProduct.set(item.productId, []);\n                                }\n                                inventoryByProduct.get(item.productId)!.push(item);\n                            });\n                            \n                            // Validate inventory availability for all items first\n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                if (inventoryItems.length === 0) {\n                                    throw new Error(`No inventory for product ID ${productId} in the selected shop`);\n                                }\n                                const totalInventory = inventoryItems.reduce((sum, inv) => sum + inv.quantity, 0);\n                                if (totalInventory < item.quantity) {\n                                    throw new Error(`Insufficient inventory for product ID ${productId} in the selected shop. Available: ${totalInventory}, Required: ${item.quantity}`);\n                                }\n                            }\n                            \n                            // Process inventory updates using FIFO\n                            const inventoryUpdates: Array<{ id: number; quantity: number }> = [];\n                            \n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                let remainingQuantity = item.quantity;\n\n                                for (const inventoryItem of inventoryItems) {\n                                    if (remainingQuantity <= 0) break;\n                                    if (inventoryItem.quantity > 0) {\n                                        const deductAmount = Math.min(remainingQuantity, inventoryItem.quantity);\n                                        const oldShopQuantity = inventoryItem.quantity;\n                                        const newShopQuantity = inventoryItem.quantity - deductAmount;\n\n                                        inventoryUpdates.push({\n                                            id: inventoryItem.id,\n                                            quantity: newShopQuantity\n                                        });\n\n                                        inventoryUpdatesForEvent.push({\n                                            productId: productId,\n                                            shopId: inventoryItem.shopId,\n                                            newQuantity: newShopQuantity,\n                                            oldQuantity: oldShopQuantity\n                                        });\n                                        remainingQuantity -= deductAmount;\n                                    }\n                                }\n                            }\n\n                            // Batch update inventory items\n                            if (inventoryUpdates.length > 0) {\n                                await Promise.all(\n                                    inventoryUpdates.map(update =>\n                                        tx.inventoryItem.update({\n                                            where: { id: update.id },\n                                            data: { quantity: update.quantity, updatedAt: new Date() }\n                                        })\n                                    )\n                                );\n                            }\n                        }\n                        return tx.invoice.findUnique({\n                            where: { id: createdInvoice.id },\n                            include: { customer: true, items: true }\n                        });\n                    },\n                    { timeout: 30000 }\n                )\n            );\n\n            // Real-time updates now handled by polling system\n            console.log(`Invoice ${invoice?.id} created successfully`);\n\n            if (sendSms) {\n                try {\n                    // SMS service temporarily disabled\n                    console.log('SMS notification requested but service is not available');\n                    // TODO: Implement SMS service\n                    // await smsService.init();\n                    // if (smsService.isConfigured()) {\n                    //     smsService.sendInvoiceNotification(invoice!.id)\n                    //         .then((result: any) => {\n                    //             if (result.status >= 200 && result.status < 300) {\n                    //                 console.log('SMS notification sent successfully');\n                    //             } else {\n                    //                 console.warn('Failed to send SMS notification:', result.message);\n                    //             }\n                    //         })\n                    //         .catch((error: any) => {\n                    //             console.error('Error sending SMS notification:', error);\n                    //         });\n                    // }\n                } catch (smsError) {\n                    console.error('SMS notification error:', smsError);\n                }\n            }\n\n            // Invalidate related caches\n            await Promise.all([\n                cacheService.invalidateInvoices(),\n                cacheService.invalidateInventory()\n            ]);\n\n            const auditService = AuditService.getInstance();\n            await auditService.logAction({\n                userId,\n                action: 'CREATE',\n                entity: 'Invoice',\n                entityId: invoice!.id,\n                details: {\n                    invoiceNumber: invoice!.invoiceNumber,\n                    customerId: invoice!.customerId,\n                    total: invoice!.total,\n                    status: invoice!.status,\n                    shopId: invoice!.shopId,\n                    itemsCount: invoice!.items.length\n                }\n            });\n\n            return NextResponse.json(\n                { success: true, message: 'Invoice created successfully', data: invoice },\n                { status: 201 }\n            );\n        } catch (error) {\n            console.error('Error creating invoice:', error);\n            return NextResponse.json(\n                { success: false, message: 'Error creating invoice', error: error instanceof Error ? error.message : String(error) },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'create-invoice' });\n});"],
      names: ["GET", "POST", "retryOnPreparedStatementError", "queryFn", "maxRetries", "attempt", "error", "isPreparedStatementError", "code", "message", "includes", "console", "log", "Promise", "resolve", "setTimeout", "Error", "CACHE_DURATION", "ITEMS_PER_PAGE", "ShopAccessControl", "withShopAccess", "request", "context", "measureAsync", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "status", "userId", "getUserIdFromToken", "user", "prisma", "findUnique", "where", "id", "select", "shopId", "role", "name", "isFiltered", "isAdmin", "userShopId", "userRole", "searchParams", "nextUrl", "page", "parseInt", "get", "limit", "Math", "min", "toString", "paymentMethod", "searchQuery", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "INVOICES", "search", "cachedData", "response", "headers", "set", "whereClause", "buildShopFilter", "JSON", "stringify", "OR", "invoiceNumber", "contains", "mode", "customer", "numericQuery", "parseFloat", "isNaN", "push", "total", "invoices", "totalInvoices", "statistics", "all", "invoice", "findMany", "invoiceDate", "dueDate", "notes", "createdAt", "updatedAt", "email", "phone", "shop", "location", "contact_person", "address_line1", "address_line2", "city", "state", "postal_code", "country", "_count", "items", "orderBy", "skip", "take", "count", "aggregate", "_sum", "gte", "Date", "getFullYear", "getMonth", "lt", "totalOutstanding", "paidThisMonth", "overdueCount", "formattedInvoices", "map", "rest", "customerName", "customerId", "itemCount", "responseData", "totalPages", "ceil", "currentPage", "meta", "shopFiltered", "TTL", "success", "String", "endpoint", "salesManageResult", "salesCreateShopResult", "invoiceData", "shopAccessResult", "validateShopAccess", "hasAccess", "createAccessDeniedResponse", "sendSms", "invoiceDetails", "Array", "isArray", "length", "i", "item", "productId", "productIdType", "quantity", "quantityType", "price", "priceType", "hasProductId", "hasQuantity", "quantityValue", "quantityCheck", "itemDetails", "index", "quantityPositive", "warn", "customerType", "creditLimit", "totalAmount", "reduce", "sum", "customPrice", "outstandingInvoices", "in", "currentBalance", "newTotalBalance", "toLocaleString", "details", "invoiceAmount", "exceedAmount", "finalInvoiceNumber", "now", "floor", "random", "inventoryUpdatesForEvent", "$transaction", "tx", "createdInvoice", "create", "data", "createdBy", "totalProfit", "profitMargin", "productIds", "inventoryItems", "inventoryItem", "shopSpecificCost", "productCostMap", "Map", "missingProductIds", "filter", "has", "fallbackProducts", "product", "weightedAverageCost", "forEach", "p", "calculatedTotalInvoiceAmount", "invoiceItemsData", "costPrice", "itemSellingTotal", "totalItemCost", "itemProfit", "invoiceId", "profit", "invoiceItem", "createMany", "subtotal", "discountAmount", "discountType", "discountValue", "netTotal", "update", "allInventoryItems", "inventoryByProduct", "totalInventory", "inv", "inventoryUpdates", "remainingQuantity", "deductAmount", "oldShopQuantity", "newShopQuantity", "newQuantity", "oldQuantity", "include", "timeout", "smsError", "invalidateInvoices", "invalidateInventory", "auditService", "AuditService", "getInstance", "logAction", "action", "entity", "entityId", "itemsCount"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "df702a93136594cd37539ed3a9dc08489c82751f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_99w0kl2h2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_99w0kl2h2();
cov_99w0kl2h2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[0]++;
  cov_99w0kl2h2().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_99w0kl2h2().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_99w0kl2h2().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[1]++;
    cov_99w0kl2h2().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[2]++;
    cov_99w0kl2h2().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_99w0kl2h2().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_99w0kl2h2().s[7]++, require("../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_99w0kl2h2().s[8]++, _interop_require_default(require("../../../lib/prisma")));
const _shopMiddleware =
/* istanbul ignore next */
(cov_99w0kl2h2().s[9]++, require("../../../lib/utils/shopMiddleware"));
const _performance =
/* istanbul ignore next */
(cov_99w0kl2h2().s[10]++, require("../../../lib/performance"));
const _cache =
/* istanbul ignore next */
(cov_99w0kl2h2().s[11]++, require("../../../lib/cache"));
const _auditService =
/* istanbul ignore next */
(cov_99w0kl2h2().s[12]++, require("../../../services/auditService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[3]++;
  cov_99w0kl2h2().s[13]++;
  return /* istanbul ignore next */(cov_99w0kl2h2().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_99w0kl2h2().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_99w0kl2h2().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_99w0kl2h2().b[0][1]++, {
    default: obj
  });
}
// Helper function to retry on prepared statement errors
async function retryOnPreparedStatementError(queryFn, maxRetries =
/* istanbul ignore next */
(cov_99w0kl2h2().b[2][0]++, 3)) {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[4]++;
  cov_99w0kl2h2().s[14]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_99w0kl2h2().s[15]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_99w0kl2h2().s[16]++;
    try {
      /* istanbul ignore next */
      cov_99w0kl2h2().s[17]++;
      return await queryFn();
    } catch (error) {
      const isPreparedStatementError =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[18]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][0]++, error?.code === "26000") ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][1]++,
      // prepared statement does not exist
      error?.code === "42P05") ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][2]++,
      // prepared statement already exists
      error?.message?.includes("prepared statement")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][3]++, error?.message?.includes("does not exist")));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[19]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[5][0]++, isPreparedStatementError) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[5][1]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[4][0]++;
        cov_99w0kl2h2().s[20]++;
        console.log(`Prepared statement error detected (attempt ${attempt}/${maxRetries}), retrying...`);
        // Wait a bit before retrying
        /* istanbul ignore next */
        cov_99w0kl2h2().s[21]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_99w0kl2h2().f[5]++;
          cov_99w0kl2h2().s[22]++;
          return setTimeout(resolve, 100 * attempt);
        });
        /* istanbul ignore next */
        cov_99w0kl2h2().s[23]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[4][1]++;
      }
      cov_99w0kl2h2().s[24]++;
      throw error;
    }
  }
  /* istanbul ignore next */
  cov_99w0kl2h2().s[25]++;
  throw new Error("Max retries exceeded");
}
const CACHE_DURATION =
/* istanbul ignore next */
(cov_99w0kl2h2().s[26]++, 60); // 60 seconds
const ITEMS_PER_PAGE =
/* istanbul ignore next */
(cov_99w0kl2h2().s[27]++, 15);
const GET =
/* istanbul ignore next */
(cov_99w0kl2h2().s[28]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[6]++;
  cov_99w0kl2h2().s[29]++;
  return (0, _performance.measureAsync)("invoices-api", async () => {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[7]++;
    cov_99w0kl2h2().s[30]++;
    try {
      // Validate token and permissions
      const authResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[31]++, await (0, _auth.validateTokenPermission)(request, "sales:view"));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[32]++;
      if (!authResult.isValid) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[6][0]++;
        cov_99w0kl2h2().s[33]++;
        return _server.NextResponse.json({
          error: authResult.message
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[6][1]++;
      }
      // Get user ID from token for filtering
      const userId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[34]++, await (0, _auth.getUserIdFromToken)(request));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[35]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[7][0]++;
        cov_99w0kl2h2().s[36]++;
        return _server.NextResponse.json({
          error: "User not found"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[7][1]++;
      }
      // Get user details to check role
      const user =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[37]++, await _prisma.default.user.findUnique({
        where: {
          id: userId
        },
        select: {
          id: true,
          shopId: true,
          role: {
            select: {
              name: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[38]++;
      if (!user) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[8][0]++;
        cov_99w0kl2h2().s[39]++;
        return _server.NextResponse.json({
          error: "User not found"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[8][1]++;
      }
      cov_99w0kl2h2().s[40]++;
      console.log("Invoices API - Shop context:", {
        shopId: context.shopId,
        isFiltered: context.isFiltered,
        isAdmin: context.isAdmin,
        userShopId: context.userShopId,
        userId: user.id,
        userRole: user.role?.name
      });
      const searchParams =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[41]++, request.nextUrl.searchParams);
      const page =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[42]++, parseInt(
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[9][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[9][1]++, "1"), 10));
      const limit =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[43]++, Math.min(parseInt(
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[10][0]++, searchParams.get("limit")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[10][1]++, ITEMS_PER_PAGE.toString()), 10), 50)); // Cap at 50
      const status =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[44]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[11][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[11][1]++, ""));
      const paymentMethod =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[45]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[12][0]++, searchParams.get("paymentMethod")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[12][1]++, ""));
      const searchQuery =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[46]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[13][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[13][1]++, ""));
      const shopId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[47]++, searchParams.get("shopId"));
      // Use the admin status from the shop access control middleware for consistency
      const isAdmin =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[48]++, context.isAdmin);
      const cacheKey =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[49]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.INVOICES, {
        page,
        limit,
        status,
        paymentMethod,
        search: searchQuery,
        shopId: isAdmin ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[14][0]++, shopId) :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[14][1]++, context.shopId),
        userId: isAdmin ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[15][0]++, "admin") :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[15][1]++, user.id) // Admin sees all, others see user-specific
      }));
      // Try to get from cache first
      const cachedData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[50]++, await _cache.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[51]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[16][0]++;
        const response =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[52]++, _server.NextResponse.json(cachedData));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[53]++;
        response.headers.set("X-Cache", "HIT");
        /* istanbul ignore next */
        cov_99w0kl2h2().s[54]++;
        response.headers.set("Cache-Control", `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[55]++;
        return response;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[16][1]++;
      }
      // Build optimized where clause with shop filtering
      let whereClause =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[56]++, _shopMiddleware.ShopAccessControl.buildShopFilter(context));
      // Shop filtering is now primarily handled by the middleware.
      /* istanbul ignore next */
      cov_99w0kl2h2().s[57]++;
      if (status) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[17][0]++;
        cov_99w0kl2h2().s[58]++;
        whereClause.status = status;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[17][1]++;
      }
      cov_99w0kl2h2().s[59]++;
      if (paymentMethod) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[18][0]++;
        cov_99w0kl2h2().s[60]++;
        whereClause.paymentMethod = paymentMethod;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[18][1]++;
      }
      // For non-admins, the shopId from their token is already applied by buildShopFilter.
      // We only allow an admin to override it with a query parameter.
      cov_99w0kl2h2().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[20][0]++, isAdmin) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[20][1]++, shopId) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[20][2]++, shopId !== "all")) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[19][0]++;
        cov_99w0kl2h2().s[62]++;
        whereClause.shopId = shopId;
      } else {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[19][1]++;
        cov_99w0kl2h2().s[63]++;
        if (!isAdmin) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[21][0]++;
          cov_99w0kl2h2().s[64]++;
          // Enforce the user's shopId from the token context for all non-admin users
          whereClause.shopId = context.shopId;
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[21][1]++;
        }
      }
      /* istanbul ignore next */
      cov_99w0kl2h2().s[65]++;
      console.log("Invoices where clause:", JSON.stringify(whereClause, null, 2));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[66]++;
      if (searchQuery) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[22][0]++;
        cov_99w0kl2h2().s[67]++;
        whereClause.OR = [{
          invoiceNumber: {
            contains: searchQuery,
            mode: "insensitive"
          }
        }, {
          customer: {
            name: {
              contains: searchQuery,
              mode: "insensitive"
            }
          }
        }];
        // Handle numeric search for total amount
        const numericQuery =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[68]++, parseFloat(searchQuery));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[69]++;
        if (!isNaN(numericQuery)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[23][0]++;
          cov_99w0kl2h2().s[70]++;
          whereClause.OR.push({
            total: numericQuery
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[23][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[22][1]++;
      }
      // Execute queries in parallel for better performance
      const [invoices, totalInvoices, statistics] =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[71]++, await Promise.all([(0, _performance.measureAsync)("invoices-main-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[8]++;
        cov_99w0kl2h2().s[72]++;
        return (
          // Main invoices query with optimized select
          _prisma.default.invoice.findMany({
            where: whereClause,
            select: {
              id: true,
              invoiceNumber: true,
              total: true,
              status: true,
              paymentMethod: true,
              invoiceDate: true,
              dueDate: true,
              notes: true,
              createdAt: true,
              updatedAt: true,
              customer: {
                select: {
                  id: true,
                  name: true,
                  email: true,
                  phone: true
                }
              },
              shop: {
                select: {
                  id: true,
                  name: true,
                  location: true,
                  contact_person: true,
                  phone: true,
                  email: true,
                  address_line1: true,
                  address_line2: true,
                  city: true,
                  state: true,
                  postal_code: true,
                  country: true
                }
              },
              _count: {
                select: {
                  items: true
                }
              }
            },
            orderBy: {
              createdAt: "desc"
            },
            skip: (page - 1) * limit,
            take: limit
          })
        );
      }),
      // Total count query
      (0, _performance.measureAsync)("invoices-count-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[9]++;
        cov_99w0kl2h2().s[73]++;
        return _prisma.default.invoice.count({
          where: whereClause
        });
      }),
      // Statistics queries in parallel
      (0, _performance.measureAsync)("invoices-stats-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[10]++;
        cov_99w0kl2h2().s[74]++;
        return Promise.all([
        // Total outstanding (pending invoices)
        _prisma.default.invoice.aggregate({
          _sum: {
            total: true
          },
          where: {
            ...whereClause,
            status: "pending"
          }
        }),
        // Paid this month
        _prisma.default.invoice.aggregate({
          _sum: {
            total: true
          },
          where: {
            ...whereClause,
            status: "paid",
            createdAt: {
              gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
            }
          }
        }),
        // Overdue count
        _prisma.default.invoice.count({
          where: {
            ...whereClause,
            status: "pending",
            dueDate: {
              lt: new Date()
            }
          }
        })]);
      })]));
      const [totalOutstanding, paidThisMonth, overdueCount] =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[75]++, statistics);
      // Format response with optimized data structure
      const formattedInvoices =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[76]++, invoices.map(invoice => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[11]++;
        const {
          _count,
          customer,
          shop,
          ...rest
        } =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[77]++, invoice);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[78]++;
        return {
          ...rest,
          customer,
          shop,
          customerName:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[24][0]++, customer?.name) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[24][1]++, "Unknown Customer"),
          customerId: customer?.id,
          itemCount: _count.items
        };
      }));
      const responseData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[79]++, {
        invoices: formattedInvoices,
        totalPages: Math.ceil(totalInvoices / limit),
        currentPage: page,
        total: totalInvoices,
        statistics: {
          totalOutstanding:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[25][0]++, totalOutstanding._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[25][1]++, 0),
          paidThisMonth:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[26][0]++, paidThisMonth._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[26][1]++, 0),
          overdueCount
        },
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId
        }
      });
      // Cache the response
      /* istanbul ignore next */
      cov_99w0kl2h2().s[80]++;
      await _cache.cacheService.set(cacheKey, responseData, _cache.CACHE_CONFIG.TTL.INVOICES);
      const response =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[81]++, _server.NextResponse.json(responseData));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[82]++;
      response.headers.set("X-Cache", "MISS");
      /* istanbul ignore next */
      cov_99w0kl2h2().s[83]++;
      response.headers.set("Cache-Control", "public, s-maxage=60, stale-while-revalidate=120");
      /* istanbul ignore next */
      cov_99w0kl2h2().s[84]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_99w0kl2h2().s[85]++;
      console.error("Error fetching invoices:", error);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[86]++;
      return _server.NextResponse.json({
        success: false,
        message: "Error fetching invoices",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[27][1]++, String(error))
      }, {
        status: 500
      });
    }
  }, {
    endpoint: "invoices"
  });
}));
const POST =
/* istanbul ignore next */
(cov_99w0kl2h2().s[87]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[12]++;
  cov_99w0kl2h2().s[88]++;
  return (0, _performance.measureAsync)("create-invoice-api", async () => {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[13]++;
    cov_99w0kl2h2().s[89]++;
    try {
      // Validate token and permissions
      const salesManageResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[90]++, await (0, _auth.validateTokenPermission)(request, "sales:manage"));
      const salesCreateShopResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[91]++, await (0, _auth.validateTokenPermission)(request, "sales:create:shop"));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[92]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[29][0]++, !salesManageResult.isValid) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[29][1]++, !salesCreateShopResult.isValid)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[28][0]++;
        cov_99w0kl2h2().s[93]++;
        return _server.NextResponse.json({
          error: "Permission denied: sales:manage or sales:create:shop required"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[28][1]++;
      }
      // Get user ID from token
      const userId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[94]++, await (0, _auth.getUserIdFromToken)(request));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[95]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[30][0]++;
        cov_99w0kl2h2().s[96]++;
        return _server.NextResponse.json({
          error: "Unable to get user information from token"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[30][1]++;
      }
      const invoiceData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[97]++, await request.json());
      // If user only has sales:create:shop permission, validate shop restriction
      /* istanbul ignore next */
      cov_99w0kl2h2().s[98]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[32][0]++, !salesManageResult.isValid) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[32][1]++, salesCreateShopResult.isValid)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[31][0]++;
        cov_99w0kl2h2().s[99]++;
        // User can only create sales for their assigned shop
        if (!invoiceData.shopId) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[33][0]++;
          cov_99w0kl2h2().s[100]++;
          return _server.NextResponse.json({
            success: false,
            message: "Shop ID is required for sales creation"
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[33][1]++;
        }
        // Validate that the user can only create invoices for their shop
        const shopAccessResult =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[101]++, await _shopMiddleware.ShopAccessControl.validateShopAccess(request, invoiceData.shopId));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[102]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[35][0]++, !shopAccessResult.hasAccess) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[35][1]++, shopAccessResult.isAdmin)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[34][0]++;
          cov_99w0kl2h2().s[103]++;
          // If user is admin, they should have sales:manage, not sales:create:shop
          if (shopAccessResult.isAdmin) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[36][0]++;
            cov_99w0kl2h2().s[104]++;
            return _server.NextResponse.json({
              success: false,
              message: "Admin users should use sales:manage permission"
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[36][1]++;
          }
          cov_99w0kl2h2().s[105]++;
          return _shopMiddleware.ShopAccessControl.createAccessDeniedResponse(
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[37][0]++, shopAccessResult.error) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[37][1]++, "Cannot create sales for this shop"));
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[34][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[31][1]++;
      }
      cov_99w0kl2h2().s[106]++;
      console.log("Invoice data received:", JSON.stringify(invoiceData, null, 2));
      const {
        sendSms,
        invoiceNumber,
        ...invoiceDetails
      } =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[107]++, invoiceData);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[108]++;
      console.log("Invoice details after destructuring:", JSON.stringify(invoiceDetails, null, 2));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[109]++;
      console.log("Invoice number from request:", invoiceNumber);
      // Server-side validation to prevent empty invoices
      /* istanbul ignore next */
      cov_99w0kl2h2().s[110]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[39][0]++, !invoiceDetails.items) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[39][1]++, !Array.isArray(invoiceDetails.items)) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[39][2]++, invoiceDetails.items.length === 0)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[38][0]++;
        cov_99w0kl2h2().s[111]++;
        return _server.NextResponse.json({
          success: false,
          message: "Invoice must contain at least one item",
          error: "No items provided"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[38][1]++;
      }
      // Validate that all items have required fields
      cov_99w0kl2h2().s[112]++;
      for (let i =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[113]++, 0); i < invoiceDetails.items.length; i++) {
        const item =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[114]++, invoiceDetails.items[i]);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[115]++;
        console.log(`Validating item ${i}:`, {
          productId: item.productId,
          productIdType: typeof item.productId,
          quantity: item.quantity,
          quantityType: typeof item.quantity,
          price: item.price,
          priceType: typeof item.price
        });
        /* istanbul ignore next */
        cov_99w0kl2h2().s[116]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[41][0]++, !item.productId) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[41][1]++, !item.quantity) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[41][2]++, item.quantity <= 0)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[40][0]++;
          cov_99w0kl2h2().s[117]++;
          console.log(`Item validation failed for item ${i}:`, {
            hasProductId: !!item.productId,
            hasQuantity: !!item.quantity,
            quantityValue: item.quantity,
            quantityCheck: item.quantity <= 0
          });
          /* istanbul ignore next */
          cov_99w0kl2h2().s[118]++;
          return _server.NextResponse.json({
            success: false,
            message: `Item ${i + 1}: All items must have valid productId and quantity greater than 0`,
            error: "Invalid item data",
            itemDetails: {
              index: i,
              productId: item.productId,
              quantity: item.quantity,
              hasProductId: !!item.productId,
              hasQuantity: !!item.quantity,
              quantityPositive: item.quantity > 0
            }
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[40][1]++;
        }
      }
      // Validate customer is provided (optional but recommended)
      /* istanbul ignore next */
      cov_99w0kl2h2().s[119]++;
      if (!invoiceDetails.customerId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[42][0]++;
        cov_99w0kl2h2().s[120]++;
        console.warn("Invoice created without customer ID");
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[42][1]++;
      }
      // Credit limit validation for wholesale customers
      cov_99w0kl2h2().s[121]++;
      if (invoiceDetails.customerId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[43][0]++;
        const customer =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[122]++, await retryOnPreparedStatementError(() => {
          /* istanbul ignore next */
          cov_99w0kl2h2().f[14]++;
          cov_99w0kl2h2().s[123]++;
          return _prisma.default.customer.findUnique({
            where: {
              id: invoiceDetails.customerId
            },
            select: {
              customerType: true,
              creditLimit: true,
              name: true
            }
          });
        }));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[124]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[45][0]++, customer) &&
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[45][1]++, customer.customerType === "wholesale") &&
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[45][2]++, customer.creditLimit)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[44][0]++;
          // Calculate total invoice amount
          const totalAmount =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[125]++, invoiceDetails.items.reduce((sum, item) => {
            /* istanbul ignore next */
            cov_99w0kl2h2().f[15]++;
            const price =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[126]++,
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[46][0]++, parseFloat(item.customPrice)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[46][1]++, parseFloat(item.price)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[46][2]++, 0));
            const quantity =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[127]++,
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[47][0]++, parseInt(item.quantity, 10)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[47][1]++, 0));
            /* istanbul ignore next */
            cov_99w0kl2h2().s[128]++;
            return sum + price * quantity;
          }, 0));
          // Get customer's current outstanding balance
          const outstandingInvoices =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[129]++, await retryOnPreparedStatementError(() => {
            /* istanbul ignore next */
            cov_99w0kl2h2().f[16]++;
            cov_99w0kl2h2().s[130]++;
            return _prisma.default.invoice.aggregate({
              where: {
                customerId: invoiceDetails.customerId,
                status: {
                  in: ["pending", "overdue"]
                }
              },
              _sum: {
                total: true
              }
            });
          }));
          const currentBalance =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[131]++,
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[48][0]++, outstandingInvoices._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[48][1]++, 0));
          const newTotalBalance =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[132]++, currentBalance + totalAmount);
          /* istanbul ignore next */
          cov_99w0kl2h2().s[133]++;
          if (newTotalBalance > customer.creditLimit) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[49][0]++;
            cov_99w0kl2h2().s[134]++;
            return _server.NextResponse.json({
              success: false,
              message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,
              error: "Credit limit exceeded",
              details: {
                currentBalance,
                invoiceAmount: totalAmount,
                creditLimit: customer.creditLimit,
                exceedAmount: newTotalBalance - customer.creditLimit
              }
            }, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[49][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[44][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[43][1]++;
      }
      // Generate invoice number if missing
      const finalInvoiceNumber =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[135]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[50][0]++, invoiceNumber) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[50][1]++, `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[136]++;
      console.log("Final invoice number to use:", finalInvoiceNumber);
      // Validate shop access for the target shop (only if shopId is provided)
      /* istanbul ignore next */
      cov_99w0kl2h2().s[137]++;
      if (invoiceDetails.shopId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[51][0]++;
        cov_99w0kl2h2().s[138]++;
        console.log("Validating shop access for shopId:", invoiceDetails.shopId);
        const shopAccessResult =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[139]++, await _shopMiddleware.ShopAccessControl.validateShopAccess(request, invoiceDetails.shopId));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[140]++;
        console.log("Shop access result:", shopAccessResult);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[141]++;
        if (!shopAccessResult.hasAccess) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[52][0]++;
          cov_99w0kl2h2().s[142]++;
          console.log("Shop access denied:", shopAccessResult.error);
          /* istanbul ignore next */
          cov_99w0kl2h2().s[143]++;
          return _shopMiddleware.ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[52][1]++;
        }
        cov_99w0kl2h2().s[144]++;
        console.log("Shop access granted");
      } else {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[51][1]++;
        cov_99w0kl2h2().s[145]++;
        console.log("No shopId provided, skipping shop access validation");
      }
      const inventoryUpdatesForEvent =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[146]++, []);
      const invoice =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[147]++, await (0, _performance.measureAsync)("invoice-transaction", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[17]++;
        cov_99w0kl2h2().s[148]++;
        return _prisma.default.$transaction(async tx => {
          /* istanbul ignore next */
          cov_99w0kl2h2().f[18]++;
          const createdInvoice =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[149]++, await tx.invoice.create({
            data: {
              invoiceNumber: finalInvoiceNumber,
              customerId:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[53][0]++, invoiceDetails.customerId) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[53][1]++, null),
              total: 0,
              status: "pending",
              paymentMethod:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[54][0]++, invoiceDetails.paymentMethod) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[54][1]++, "Cash"),
              invoiceDate: invoiceDetails.invoiceDate ?
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[55][0]++, new Date(invoiceDetails.invoiceDate)) :
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[55][1]++, new Date()),
              dueDate: invoiceDetails.dueDate ?
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[56][0]++, new Date(invoiceDetails.dueDate)) :
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[56][1]++, null),
              notes:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[57][0]++, invoiceDetails.notes) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[57][1]++, ""),
              shopId:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[58][0]++, invoiceDetails.shopId) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[58][1]++, null),
              createdBy: userId,
              totalProfit: 0,
              profitMargin: 0 // Will be updated after items are processed
            }
          }));
          // Removed automatic payment creation for cash invoices
          // Users will manually record payments when they actually receive them
          /* istanbul ignore next */
          cov_99w0kl2h2().s[150]++;
          if (
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[60][0]++, invoiceDetails.items) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[60][1]++, Array.isArray(invoiceDetails.items))) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[59][0]++;
            // Get shop-specific costs for profit calculation instead of global weighted average
            const productIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[151]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[19]++;
              cov_99w0kl2h2().s[152]++;
              return parseInt(item.productId, 10);
            }));
            const inventoryItems =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[153]++, await tx.inventoryItem.findMany({
              where: {
                productId: {
                  in: productIds
                },
                shopId: invoiceDetails.shopId
              },
              select: {
                productId: true,
                shopSpecificCost: true
              }
            }));
            // Create a map of productId to shop-specific cost
            const productCostMap =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[154]++, new Map(inventoryItems.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[20]++;
              cov_99w0kl2h2().s[155]++;
              return [item.productId,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[61][0]++, item.shopSpecificCost) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[61][1]++, 0)];
            })));
            // For products not found in inventory, fallback to global weighted average
            const missingProductIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[156]++, productIds.filter(id => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[21]++;
              cov_99w0kl2h2().s[157]++;
              return !productCostMap.has(id);
            }));
            /* istanbul ignore next */
            cov_99w0kl2h2().s[158]++;
            if (missingProductIds.length > 0) {
              /* istanbul ignore next */
              cov_99w0kl2h2().b[62][0]++;
              const fallbackProducts =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[159]++, await tx.product.findMany({
                where: {
                  id: {
                    in: missingProductIds
                  }
                },
                select: {
                  id: true,
                  weightedAverageCost: true
                }
              }));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[160]++;
              fallbackProducts.forEach(p => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[22]++;
                cov_99w0kl2h2().s[161]++;
                productCostMap.set(p.id,
                /* istanbul ignore next */
                (cov_99w0kl2h2().b[63][0]++, p.weightedAverageCost) ||
                /* istanbul ignore next */
                (cov_99w0kl2h2().b[63][1]++, 0));
              });
            } else
            /* istanbul ignore next */
            {
              cov_99w0kl2h2().b[62][1]++;
            }
            let calculatedTotalInvoiceAmount =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[162]++, 0);
            // Batch create invoice items for better performance
            const invoiceItemsData =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[163]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[23]++;
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[164]++, parseInt(item.productId, 10));
              const costPrice =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[165]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[64][0]++, productCostMap.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[64][1]++, 0));
              const itemSellingTotal =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[166]++, item.quantity * item.price);
              const totalItemCost =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[167]++, costPrice * item.quantity);
              const itemProfit =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[168]++, itemSellingTotal - totalItemCost);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[169]++;
              calculatedTotalInvoiceAmount += itemSellingTotal;
              /* istanbul ignore next */
              cov_99w0kl2h2().s[170]++;
              return {
                invoiceId: createdInvoice.id,
                productId: productId,
                quantity: item.quantity,
                price: item.price,
                total: itemSellingTotal,
                costPrice: costPrice,
                profit: itemProfit
              };
            }));
            // Batch insert all invoice items
            /* istanbul ignore next */
            cov_99w0kl2h2().s[171]++;
            await tx.invoiceItem.createMany({
              data: invoiceItemsData
            });
            // Calculate and update total profit and profit margin
            const totalProfit =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[172]++, invoiceDetails.items.reduce((sum, item) => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[24]++;
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[173]++, parseInt(item.productId, 10));
              const costPrice =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[174]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[65][0]++, productCostMap.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[65][1]++, 0));
              const itemSellingTotal =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[175]++, item.quantity * item.price);
              const totalItemCost =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[176]++, costPrice * item.quantity);
              const itemProfit =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[177]++, itemSellingTotal - totalItemCost);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[178]++;
              return sum + itemProfit;
            }, 0));
            const profitMargin =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[179]++, calculatedTotalInvoiceAmount > 0 ?
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[66][0]++, totalProfit / calculatedTotalInvoiceAmount * 100) :
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[66][1]++, 0));
            // Apply discount if provided
            let subtotal =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[180]++, calculatedTotalInvoiceAmount);
            let discountAmount =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[181]++, 0);
            /* istanbul ignore next */
            cov_99w0kl2h2().s[182]++;
            if (
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[68][0]++, invoiceDetails.discountType) &&
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[68][1]++, invoiceDetails.discountValue > 0)) {
              /* istanbul ignore next */
              cov_99w0kl2h2().b[67][0]++;
              cov_99w0kl2h2().s[183]++;
              discountAmount = invoiceDetails.discountType === "percent" ?
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[69][0]++, subtotal * invoiceDetails.discountValue / 100) :
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[69][1]++, invoiceDetails.discountValue);
            } else
            /* istanbul ignore next */
            {
              cov_99w0kl2h2().b[67][1]++;
            }
            let netTotal =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[184]++, subtotal - discountAmount);
            /* istanbul ignore next */
            cov_99w0kl2h2().s[185]++;
            await tx.invoice.update({
              where: {
                id: createdInvoice.id
              },
              data: {
                discountType: invoiceDetails.discountType,
                discountValue: invoiceDetails.discountValue,
                total: netTotal,
                totalProfit: totalProfit,
                profitMargin: profitMargin
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[59][1]++;
          }
          // Optimized inventory check and update for the selected shop
          cov_99w0kl2h2().s[186]++;
          if (
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[71][0]++, invoiceDetails.shopId) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[71][1]++, invoiceDetails.items) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[71][2]++, Array.isArray(invoiceDetails.items))) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[70][0]++;
            // Batch fetch all inventory items for all products in one query
            const productIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[187]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[25]++;
              cov_99w0kl2h2().s[188]++;
              return parseInt(item.productId, 10);
            }));
            const allInventoryItems =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[189]++, await tx.inventoryItem.findMany({
              where: {
                productId: {
                  in: productIds
                },
                shopId: invoiceDetails.shopId
              },
              orderBy: {
                updatedAt: "asc"
              },
              select: {
                id: true,
                productId: true,
                quantity: true,
                updatedAt: true,
                shopId: true
              }
            }));
            // Group inventory items by product ID
            const inventoryByProduct =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[190]++, new Map());
            /* istanbul ignore next */
            cov_99w0kl2h2().s[191]++;
            allInventoryItems.forEach(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[26]++;
              cov_99w0kl2h2().s[192]++;
              if (!inventoryByProduct.has(item.productId)) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[72][0]++;
                cov_99w0kl2h2().s[193]++;
                inventoryByProduct.set(item.productId, []);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[72][1]++;
              }
              cov_99w0kl2h2().s[194]++;
              inventoryByProduct.get(item.productId).push(item);
            });
            // Validate inventory availability for all items first
            /* istanbul ignore next */
            cov_99w0kl2h2().s[195]++;
            for (const item of invoiceDetails.items) {
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[196]++, parseInt(item.productId, 10));
              const inventoryItems =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[197]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[73][0]++, inventoryByProduct.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[73][1]++, []));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[198]++;
              if (inventoryItems.length === 0) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[74][0]++;
                cov_99w0kl2h2().s[199]++;
                throw new Error(`No inventory for product ID ${productId} in the selected shop`);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[74][1]++;
              }
              const totalInventory =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[200]++, inventoryItems.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[27]++;
                cov_99w0kl2h2().s[201]++;
                return sum + inv.quantity;
              }, 0));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[202]++;
              if (totalInventory < item.quantity) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[75][0]++;
                cov_99w0kl2h2().s[203]++;
                throw new Error(`Insufficient inventory for product ID ${productId} in the selected shop. Available: ${totalInventory}, Required: ${item.quantity}`);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[75][1]++;
              }
            }
            // Process inventory updates using FIFO
            const inventoryUpdates =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[204]++, []);
            /* istanbul ignore next */
            cov_99w0kl2h2().s[205]++;
            for (const item of invoiceDetails.items) {
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[206]++, parseInt(item.productId, 10));
              const inventoryItems =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[207]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[76][0]++, inventoryByProduct.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[76][1]++, []));
              let remainingQuantity =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[208]++, item.quantity);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[209]++;
              for (const inventoryItem of inventoryItems) {
                /* istanbul ignore next */
                cov_99w0kl2h2().s[210]++;
                if (remainingQuantity <= 0) {
                  /* istanbul ignore next */
                  cov_99w0kl2h2().b[77][0]++;
                  cov_99w0kl2h2().s[211]++;
                  break;
                } else
                /* istanbul ignore next */
                {
                  cov_99w0kl2h2().b[77][1]++;
                }
                cov_99w0kl2h2().s[212]++;
                if (inventoryItem.quantity > 0) {
                  /* istanbul ignore next */
                  cov_99w0kl2h2().b[78][0]++;
                  const deductAmount =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[213]++, Math.min(remainingQuantity, inventoryItem.quantity));
                  const oldShopQuantity =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[214]++, inventoryItem.quantity);
                  const newShopQuantity =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[215]++, inventoryItem.quantity - deductAmount);
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[216]++;
                  inventoryUpdates.push({
                    id: inventoryItem.id,
                    quantity: newShopQuantity
                  });
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[217]++;
                  inventoryUpdatesForEvent.push({
                    productId: productId,
                    shopId: inventoryItem.shopId,
                    newQuantity: newShopQuantity,
                    oldQuantity: oldShopQuantity
                  });
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[218]++;
                  remainingQuantity -= deductAmount;
                } else
                /* istanbul ignore next */
                {
                  cov_99w0kl2h2().b[78][1]++;
                }
              }
            }
            // Batch update inventory items
            /* istanbul ignore next */
            cov_99w0kl2h2().s[219]++;
            if (inventoryUpdates.length > 0) {
              /* istanbul ignore next */
              cov_99w0kl2h2().b[79][0]++;
              cov_99w0kl2h2().s[220]++;
              await Promise.all(inventoryUpdates.map(update => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[28]++;
                cov_99w0kl2h2().s[221]++;
                return tx.inventoryItem.update({
                  where: {
                    id: update.id
                  },
                  data: {
                    quantity: update.quantity,
                    updatedAt: new Date()
                  }
                });
              }));
            } else
            /* istanbul ignore next */
            {
              cov_99w0kl2h2().b[79][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[70][1]++;
          }
          cov_99w0kl2h2().s[222]++;
          return tx.invoice.findUnique({
            where: {
              id: createdInvoice.id
            },
            include: {
              customer: true,
              items: true
            }
          });
        }, {
          timeout: 30000
        });
      }));
      // Real-time updates now handled by polling system
      /* istanbul ignore next */
      cov_99w0kl2h2().s[223]++;
      console.log(`Invoice ${invoice?.id} created successfully`);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[224]++;
      if (sendSms) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[80][0]++;
        cov_99w0kl2h2().s[225]++;
        try {
          /* istanbul ignore next */
          cov_99w0kl2h2().s[226]++;
          // SMS service temporarily disabled
          console.log("SMS notification requested but service is not available");
          // TODO: Implement SMS service
          // await smsService.init();
          // if (smsService.isConfigured()) {
          //     smsService.sendInvoiceNotification(invoice!.id)
          //         .then((result: any) => {
          //             if (result.status >= 200 && result.status < 300) {
          //                 console.log('SMS notification sent successfully');
          //             } else {
          //                 console.warn('Failed to send SMS notification:', result.message);
          //             }
          //         })
          //         .catch((error: any) => {
          //             console.error('Error sending SMS notification:', error);
          //         });
          // }
        } catch (smsError) {
          /* istanbul ignore next */
          cov_99w0kl2h2().s[227]++;
          console.error("SMS notification error:", smsError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[80][1]++;
      }
      // Invalidate related caches
      cov_99w0kl2h2().s[228]++;
      await Promise.all([_cache.cacheService.invalidateInvoices(), _cache.cacheService.invalidateInventory()]);
      const auditService =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[229]++, _auditService.AuditService.getInstance());
      /* istanbul ignore next */
      cov_99w0kl2h2().s[230]++;
      await auditService.logAction({
        userId,
        action: "CREATE",
        entity: "Invoice",
        entityId: invoice.id,
        details: {
          invoiceNumber: invoice.invoiceNumber,
          customerId: invoice.customerId,
          total: invoice.total,
          status: invoice.status,
          shopId: invoice.shopId,
          itemsCount: invoice.items.length
        }
      });
      /* istanbul ignore next */
      cov_99w0kl2h2().s[231]++;
      return _server.NextResponse.json({
        success: true,
        message: "Invoice created successfully",
        data: invoice
      }, {
        status: 201
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_99w0kl2h2().s[232]++;
      console.error("Error creating invoice:", error);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[233]++;
      return _server.NextResponse.json({
        success: false,
        message: "Error creating invoice",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[81][0]++, error.message) :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[81][1]++, String(error))
      }, {
        status: 500
      });
    }
  }, {
    endpoint: "create-invoice"
  });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfOTl3MGtsMmgyIiwiZiIsInMiLCJQT1NUIiwicmV0cnlPblByZXBhcmVkU3RhdGVtZW50RXJyb3IiLCJxdWVyeUZuIiwibWF4UmV0cmllcyIsImIiLCJhdHRlbXB0IiwiZXJyb3IiLCJpc1ByZXBhcmVkU3RhdGVtZW50RXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiY29uc29sZSIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIkVycm9yIiwiQ0FDSEVfRFVSQVRJT04iLCJJVEVNU19QRVJfUEFHRSIsIl9zaG9wTWlkZGxld2FyZSIsIlNob3BBY2Nlc3NDb250cm9sIiwid2l0aFNob3BBY2Nlc3MiLCJyZXF1ZXN0IiwiY29udGV4dCIsIl9wZXJmb3JtYW5jZSIsIm1lYXN1cmVBc3luYyIsImF1dGhSZXN1bHQiLCJfYXV0aCIsInZhbGlkYXRlVG9rZW5QZXJtaXNzaW9uIiwiaXNWYWxpZCIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwidXNlcklkIiwiZ2V0VXNlcklkRnJvbVRva2VuIiwidXNlciIsIl9wcmlzbWEiLCJkZWZhdWx0IiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaWQiLCJzZWxlY3QiLCJzaG9wSWQiLCJyb2xlIiwibmFtZSIsImlzRmlsdGVyZWQiLCJpc0FkbWluIiwidXNlclNob3BJZCIsInVzZXJSb2xlIiwic2VhcmNoUGFyYW1zIiwibmV4dFVybCIsInBhZ2UiLCJwYXJzZUludCIsImdldCIsImxpbWl0IiwiTWF0aCIsIm1pbiIsInRvU3RyaW5nIiwicGF5bWVudE1ldGhvZCIsInNlYXJjaFF1ZXJ5IiwiY2FjaGVLZXkiLCJfY2FjaGUiLCJjYWNoZVNlcnZpY2UiLCJnZW5lcmF0ZUtleSIsIkNBQ0hFX0NPTkZJRyIsIktFWVMiLCJJTlZPSUNFUyIsInNlYXJjaCIsImNhY2hlZERhdGEiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJzZXQiLCJ3aGVyZUNsYXVzZSIsImJ1aWxkU2hvcEZpbHRlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJPUiIsImludm9pY2VOdW1iZXIiLCJjb250YWlucyIsIm1vZGUiLCJjdXN0b21lciIsIm51bWVyaWNRdWVyeSIsInBhcnNlRmxvYXQiLCJpc05hTiIsInB1c2giLCJ0b3RhbCIsImludm9pY2VzIiwidG90YWxJbnZvaWNlcyIsInN0YXRpc3RpY3MiLCJhbGwiLCJpbnZvaWNlIiwiZmluZE1hbnkiLCJpbnZvaWNlRGF0ZSIsImR1ZURhdGUiLCJub3RlcyIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsImVtYWlsIiwicGhvbmUiLCJzaG9wIiwibG9jYXRpb24iLCJjb250YWN0X3BlcnNvbiIsImFkZHJlc3NfbGluZTEiLCJhZGRyZXNzX2xpbmUyIiwiY2l0eSIsInN0YXRlIiwicG9zdGFsX2NvZGUiLCJjb3VudHJ5IiwiX2NvdW50IiwiaXRlbXMiLCJvcmRlckJ5Iiwic2tpcCIsInRha2UiLCJjb3VudCIsImFnZ3JlZ2F0ZSIsIl9zdW0iLCJndGUiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImx0IiwidG90YWxPdXRzdGFuZGluZyIsInBhaWRUaGlzTW9udGgiLCJvdmVyZHVlQ291bnQiLCJmb3JtYXR0ZWRJbnZvaWNlcyIsIm1hcCIsInJlc3QiLCJjdXN0b21lck5hbWUiLCJjdXN0b21lcklkIiwiaXRlbUNvdW50IiwicmVzcG9uc2VEYXRhIiwidG90YWxQYWdlcyIsImNlaWwiLCJjdXJyZW50UGFnZSIsIm1ldGEiLCJzaG9wRmlsdGVyZWQiLCJUVEwiLCJzdWNjZXNzIiwiU3RyaW5nIiwiZW5kcG9pbnQiLCJzYWxlc01hbmFnZVJlc3VsdCIsInNhbGVzQ3JlYXRlU2hvcFJlc3VsdCIsImludm9pY2VEYXRhIiwic2hvcEFjY2Vzc1Jlc3VsdCIsInZhbGlkYXRlU2hvcEFjY2VzcyIsImhhc0FjY2VzcyIsImNyZWF0ZUFjY2Vzc0RlbmllZFJlc3BvbnNlIiwic2VuZFNtcyIsImludm9pY2VEZXRhaWxzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaSIsIml0ZW0iLCJwcm9kdWN0SWQiLCJwcm9kdWN0SWRUeXBlIiwicXVhbnRpdHkiLCJxdWFudGl0eVR5cGUiLCJwcmljZSIsInByaWNlVHlwZSIsImhhc1Byb2R1Y3RJZCIsImhhc1F1YW50aXR5IiwicXVhbnRpdHlWYWx1ZSIsInF1YW50aXR5Q2hlY2siLCJpdGVtRGV0YWlscyIsImluZGV4IiwicXVhbnRpdHlQb3NpdGl2ZSIsIndhcm4iLCJjdXN0b21lclR5cGUiLCJjcmVkaXRMaW1pdCIsInRvdGFsQW1vdW50IiwicmVkdWNlIiwic3VtIiwiY3VzdG9tUHJpY2UiLCJvdXRzdGFuZGluZ0ludm9pY2VzIiwiaW4iLCJjdXJyZW50QmFsYW5jZSIsIm5ld1RvdGFsQmFsYW5jZSIsInRvTG9jYWxlU3RyaW5nIiwiZGV0YWlscyIsImludm9pY2VBbW91bnQiLCJleGNlZWRBbW91bnQiLCJmaW5hbEludm9pY2VOdW1iZXIiLCJub3ciLCJmbG9vciIsInJhbmRvbSIsImludmVudG9yeVVwZGF0ZXNGb3JFdmVudCIsIiR0cmFuc2FjdGlvbiIsInR4IiwiY3JlYXRlZEludm9pY2UiLCJjcmVhdGUiLCJkYXRhIiwiY3JlYXRlZEJ5IiwidG90YWxQcm9maXQiLCJwcm9maXRNYXJnaW4iLCJwcm9kdWN0SWRzIiwiaW52ZW50b3J5SXRlbXMiLCJpbnZlbnRvcnlJdGVtIiwic2hvcFNwZWNpZmljQ29zdCIsInByb2R1Y3RDb3N0TWFwIiwiTWFwIiwibWlzc2luZ1Byb2R1Y3RJZHMiLCJmaWx0ZXIiLCJoYXMiLCJmYWxsYmFja1Byb2R1Y3RzIiwicHJvZHVjdCIsIndlaWdodGVkQXZlcmFnZUNvc3QiLCJmb3JFYWNoIiwicCIsImNhbGN1bGF0ZWRUb3RhbEludm9pY2VBbW91bnQiLCJpbnZvaWNlSXRlbXNEYXRhIiwiY29zdFByaWNlIiwiaXRlbVNlbGxpbmdUb3RhbCIsInRvdGFsSXRlbUNvc3QiLCJpdGVtUHJvZml0IiwiaW52b2ljZUlkIiwicHJvZml0IiwiaW52b2ljZUl0ZW0iLCJjcmVhdGVNYW55Iiwic3VidG90YWwiLCJkaXNjb3VudEFtb3VudCIsImRpc2NvdW50VHlwZSIsImRpc2NvdW50VmFsdWUiLCJuZXRUb3RhbCIsInVwZGF0ZSIsImFsbEludmVudG9yeUl0ZW1zIiwiaW52ZW50b3J5QnlQcm9kdWN0IiwidG90YWxJbnZlbnRvcnkiLCJpbnYiLCJpbnZlbnRvcnlVcGRhdGVzIiwicmVtYWluaW5nUXVhbnRpdHkiLCJkZWR1Y3RBbW91bnQiLCJvbGRTaG9wUXVhbnRpdHkiLCJuZXdTaG9wUXVhbnRpdHkiLCJuZXdRdWFudGl0eSIsIm9sZFF1YW50aXR5IiwiaW5jbHVkZSIsInRpbWVvdXQiLCJzbXNFcnJvciIsImludmFsaWRhdGVJbnZvaWNlcyIsImludmFsaWRhdGVJbnZlbnRvcnkiLCJhdWRpdFNlcnZpY2UiLCJfYXVkaXRTZXJ2aWNlIiwiQXVkaXRTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJsb2dBY3Rpb24iLCJhY3Rpb24iLCJlbnRpdHkiLCJlbnRpdHlJZCIsIml0ZW1zQ291bnQiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL2ludm9pY2VzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVRva2VuUGVybWlzc2lvbiwgZ2V0VXNlcklkRnJvbVRva2VuIH0gZnJvbSAnQC9saWIvYXV0aCc7XG5pbXBvcnQgeyByZXZhbGlkYXRlVGFnIH0gZnJvbSAnbmV4dC9jYWNoZSc7XG5pbXBvcnQgcHJpc21hLCB7IGV4ZWN1dGVRdWVyeSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbmltcG9ydCB7IFNob3BBY2Nlc3NDb250cm9sIH0gZnJvbSAnQC9saWIvdXRpbHMvc2hvcE1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgbWVhc3VyZUFzeW5jIH0gZnJvbSAnQC9saWIvcGVyZm9ybWFuY2UnO1xuaW1wb3J0IHsgY2FjaGVTZXJ2aWNlLCBDQUNIRV9DT05GSUcgfSBmcm9tICdAL2xpYi9jYWNoZSc7XG4vLyBOb3RlOiBzbXNTZXJ2aWNlIGltcG9ydCBjb21tZW50ZWQgb3V0IGFzIGl0IG1heSBub3QgYmUgYXZhaWxhYmxlXG4vLyBpbXBvcnQgeyBzbXNTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc21zJztcbmltcG9ydCB7IEF1ZGl0U2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYXVkaXRTZXJ2aWNlJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJ5IG9uIHByZXBhcmVkIHN0YXRlbWVudCBlcnJvcnNcbmFzeW5jIGZ1bmN0aW9uIHJldHJ5T25QcmVwYXJlZFN0YXRlbWVudEVycm9yPFQ+KHF1ZXJ5Rm46ICgpID0+IFByb21pc2U8VD4sIG1heFJldHJpZXM6IG51bWJlciA9IDMpOiBQcm9taXNlPFQ+IHtcbiAgICBmb3IgKGxldCBhdHRlbXB0ID0gMTsgYXR0ZW1wdCA8PSBtYXhSZXRyaWVzOyBhdHRlbXB0KyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBxdWVyeUZuKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciA9IFxuICAgICAgICAgICAgICAgIGVycm9yPy5jb2RlID09PSAnMjYwMDAnIHx8ICAvLyBwcmVwYXJlZCBzdGF0ZW1lbnQgZG9lcyBub3QgZXhpc3RcbiAgICAgICAgICAgICAgICBlcnJvcj8uY29kZSA9PT0gJzQyUDA1JyB8fCAgLy8gcHJlcGFyZWQgc3RhdGVtZW50IGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgZXJyb3I/Lm1lc3NhZ2U/LmluY2x1ZGVzKCdwcmVwYXJlZCBzdGF0ZW1lbnQnKSB8fFxuICAgICAgICAgICAgICAgIGVycm9yPy5tZXNzYWdlPy5pbmNsdWRlcygnZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGlzUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciAmJiBhdHRlbXB0IDwgbWF4UmV0cmllcykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQcmVwYXJlZCBzdGF0ZW1lbnQgZXJyb3IgZGV0ZWN0ZWQgKGF0dGVtcHQgJHthdHRlbXB0fS8ke21heFJldHJpZXN9KSwgcmV0cnlpbmcuLi5gKTtcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGEgYml0IGJlZm9yZSByZXRyeWluZ1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAgKiBhdHRlbXB0KSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01heCByZXRyaWVzIGV4Y2VlZGVkJyk7XG59XG5jb25zdCBDQUNIRV9EVVJBVElPTiA9IDYwOyAvLyA2MCBzZWNvbmRzXG5cbmNvbnN0IElURU1TX1BFUl9QQUdFID0gMTU7XG5cbmV4cG9ydCBjb25zdCBHRVQgPSBTaG9wQWNjZXNzQ29udHJvbC53aXRoU2hvcEFjY2Vzcyhhc3luYyAocmVxdWVzdDogTmV4dFJlcXVlc3QsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gbWVhc3VyZUFzeW5jKCdpbnZvaWNlcy1hcGknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSB0b2tlbiBhbmQgcGVybWlzc2lvbnNcbiAgICAgICAgICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCB2YWxpZGF0ZVRva2VuUGVybWlzc2lvbihyZXF1ZXN0LCAnc2FsZXM6dmlldycpO1xuICAgICAgICAgICAgaWYgKCFhdXRoUmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogYXV0aFJlc3VsdC5tZXNzYWdlIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB1c2VyIElEIGZyb20gdG9rZW4gZm9yIGZpbHRlcmluZ1xuICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0VXNlcklkRnJvbVRva2VuKHJlcXVlc3QpO1xuICAgICAgICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdXNlciBkZXRhaWxzIHRvIGNoZWNrIHJvbGVcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzaG9wSWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW52b2ljZXMgQVBJIC0gU2hvcCBjb250ZXh0OicsIHtcbiAgICAgICAgICAgICAgICBzaG9wSWQ6IGNvbnRleHQuc2hvcElkLFxuICAgICAgICAgICAgICAgIGlzRmlsdGVyZWQ6IGNvbnRleHQuaXNGaWx0ZXJlZCxcbiAgICAgICAgICAgICAgICBpc0FkbWluOiBjb250ZXh0LmlzQWRtaW4sXG4gICAgICAgICAgICAgICAgdXNlclNob3BJZDogY29udGV4dC51c2VyU2hvcElkLFxuICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgICAgICAgICAgICB1c2VyUm9sZTogdXNlci5yb2xlPy5uYW1lXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcmVxdWVzdC5uZXh0VXJsLnNlYXJjaFBhcmFtcztcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJykgfHwgJzEnLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBsaW1pdCA9IE1hdGgubWluKHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykgfHwgSVRFTVNfUEVSX1BBR0UudG9TdHJpbmcoKSwgMTApLCA1MCk7IC8vIENhcCBhdCA1MFxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gc2VhcmNoUGFyYW1zLmdldCgnc3RhdHVzJykgfHwgJyc7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc2VhcmNoUGFyYW1zLmdldCgncGF5bWVudE1ldGhvZCcpIHx8ICcnO1xuICAgICAgICAgICAgY29uc3Qgc2VhcmNoUXVlcnkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzZWFyY2gnKSB8fCAnJztcbiAgICAgICAgICAgIGNvbnN0IHNob3BJZCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3Nob3BJZCcpO1xuXG4gICAgICAgICAgICAvLyBVc2UgdGhlIGFkbWluIHN0YXR1cyBmcm9tIHRoZSBzaG9wIGFjY2VzcyBjb250cm9sIG1pZGRsZXdhcmUgZm9yIGNvbnNpc3RlbmN5XG4gICAgICAgICAgICBjb25zdCBpc0FkbWluID0gY29udGV4dC5pc0FkbWluO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjYWNoZUtleSA9IGNhY2hlU2VydmljZS5nZW5lcmF0ZUtleShDQUNIRV9DT05GSUcuS0VZUy5JTlZPSUNFUywge1xuICAgICAgICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBzZWFyY2hRdWVyeSxcbiAgICAgICAgICAgICAgICBzaG9wSWQ6IGlzQWRtaW4gPyBzaG9wSWQgOiBjb250ZXh0LnNob3BJZCwgLy8gVXNlIGNvbnRleHQncyBzaG9wSWQgZm9yIG5vbi1hZG1pbnNcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGlzQWRtaW4gPyAnYWRtaW4nIDogdXNlci5pZCAvLyBBZG1pbiBzZWVzIGFsbCwgb3RoZXJzIHNlZSB1c2VyLXNwZWNpZmljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCBmcm9tIGNhY2hlIGZpcnN0XG4gICAgICAgICAgICBjb25zdCBjYWNoZWREYXRhID0gYXdhaXQgY2FjaGVTZXJ2aWNlLmdldChjYWNoZUtleSk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLmpzb24oY2FjaGVkRGF0YSk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtQ2FjaGUnLCAnSElUJyk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ0NhY2hlLUNvbnRyb2wnLCBgcHVibGljLCBzLW1heGFnZT0ke0NBQ0hFX0RVUkFUSU9OfSwgc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZT02MGApO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQnVpbGQgb3B0aW1pemVkIHdoZXJlIGNsYXVzZSB3aXRoIHNob3AgZmlsdGVyaW5nXG4gICAgICAgICAgICBsZXQgd2hlcmVDbGF1c2U6IGFueSA9IFNob3BBY2Nlc3NDb250cm9sLmJ1aWxkU2hvcEZpbHRlcihjb250ZXh0KTtcblxuICAgICAgICAgICAgLy8gU2hvcCBmaWx0ZXJpbmcgaXMgbm93IHByaW1hcmlseSBoYW5kbGVkIGJ5IHRoZSBtaWRkbGV3YXJlLlxuICAgICAgICAgICAgaWYgKHN0YXR1cykgd2hlcmVDbGF1c2Uuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgaWYgKHBheW1lbnRNZXRob2QpIHdoZXJlQ2xhdXNlLnBheW1lbnRNZXRob2QgPSBwYXltZW50TWV0aG9kO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3Igbm9uLWFkbWlucywgdGhlIHNob3BJZCBmcm9tIHRoZWlyIHRva2VuIGlzIGFscmVhZHkgYXBwbGllZCBieSBidWlsZFNob3BGaWx0ZXIuXG4gICAgICAgICAgICAvLyBXZSBvbmx5IGFsbG93IGFuIGFkbWluIHRvIG92ZXJyaWRlIGl0IHdpdGggYSBxdWVyeSBwYXJhbWV0ZXIuXG4gICAgICAgICAgICBpZiAoaXNBZG1pbiAmJiBzaG9wSWQgJiYgc2hvcElkICE9PSAnYWxsJykge1xuICAgICAgICAgICAgICAgIHdoZXJlQ2xhdXNlLnNob3BJZCA9IHNob3BJZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzQWRtaW4pIHtcbiAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHRoZSB1c2VyJ3Mgc2hvcElkIGZyb20gdGhlIHRva2VuIGNvbnRleHQgZm9yIGFsbCBub24tYWRtaW4gdXNlcnNcbiAgICAgICAgICAgICAgICB3aGVyZUNsYXVzZS5zaG9wSWQgPSBjb250ZXh0LnNob3BJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludm9pY2VzIHdoZXJlIGNsYXVzZTonLCBKU09OLnN0cmluZ2lmeSh3aGVyZUNsYXVzZSwgbnVsbCwgMikpO1xuICAgICAgICAgICAgaWYgKHNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgd2hlcmVDbGF1c2UuT1IgPSBbXG4gICAgICAgICAgICAgICAgICAgIHsgaW52b2ljZU51bWJlcjogeyBjb250YWluczogc2VhcmNoUXVlcnksIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGN1c3RvbWVyOiB7IG5hbWU6IHsgY29udGFpbnM6IHNlYXJjaFF1ZXJ5LCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSB9LFxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgbnVtZXJpYyBzZWFyY2ggZm9yIHRvdGFsIGFtb3VudFxuICAgICAgICAgICAgICAgIGNvbnN0IG51bWVyaWNRdWVyeSA9IHBhcnNlRmxvYXQoc2VhcmNoUXVlcnkpO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4obnVtZXJpY1F1ZXJ5KSkge1xuICAgICAgICAgICAgICAgICAgICB3aGVyZUNsYXVzZS5PUi5wdXNoKHsgdG90YWw6IG51bWVyaWNRdWVyeSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgcXVlcmllcyBpbiBwYXJhbGxlbCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICBjb25zdCBbaW52b2ljZXMsIHRvdGFsSW52b2ljZXMsIHN0YXRpc3RpY3NdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIG1lYXN1cmVBc3luYygnaW52b2ljZXMtbWFpbi1xdWVyeScsICgpID0+XG4gICAgICAgICAgICAgICAgICAgIC8vIE1haW4gaW52b2ljZXMgcXVlcnkgd2l0aCBvcHRpbWl6ZWQgc2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIHByaXNtYS5pbnZvaWNlLmZpbmRNYW55KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB3aGVyZUNsYXVzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2VOdW1iZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZURhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEF0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9wOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0X3BlcnNvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzX2xpbmUxOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc19saW5lMjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RhbF9jb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7IGl0ZW1zOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogJ2Rlc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXA6IChwYWdlIC0gMSkgKiBsaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2U6IGxpbWl0LFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgICAgICAvLyBUb3RhbCBjb3VudCBxdWVyeVxuICAgICAgICAgICAgICAgIG1lYXN1cmVBc3luYygnaW52b2ljZXMtY291bnQtcXVlcnknLCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICBwcmlzbWEuaW52b2ljZS5jb3VudCh7IHdoZXJlOiB3aGVyZUNsYXVzZSB9KVxuICAgICAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgICAgICAvLyBTdGF0aXN0aWNzIHF1ZXJpZXMgaW4gcGFyYWxsZWxcbiAgICAgICAgICAgICAgICBtZWFzdXJlQXN5bmMoJ2ludm9pY2VzLXN0YXRzLXF1ZXJ5JywgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG90YWwgb3V0c3RhbmRpbmcgKHBlbmRpbmcgaW52b2ljZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlzbWEuaW52b2ljZS5hZ2dyZWdhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdW06IHsgdG90YWw6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi53aGVyZUNsYXVzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAncGVuZGluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFpZCB0aGlzIG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlzbWEuaW52b2ljZS5hZ2dyZWdhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdW06IHsgdG90YWw6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi53aGVyZUNsYXVzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAncGFpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3RlOiBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksIG5ldyBEYXRlKCkuZ2V0TW9udGgoKSwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdmVyZHVlIGNvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlzbWEuaW52b2ljZS5jb3VudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ud2hlcmVDbGF1c2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdWVEYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdDogbmV3IERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgY29uc3QgW3RvdGFsT3V0c3RhbmRpbmcsIHBhaWRUaGlzTW9udGgsIG92ZXJkdWVDb3VudF0gPSBzdGF0aXN0aWNzO1xuXG4gICAgICAgICAgICAvLyBGb3JtYXQgcmVzcG9uc2Ugd2l0aCBvcHRpbWl6ZWQgZGF0YSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZEludm9pY2VzID0gaW52b2ljZXMubWFwKGludm9pY2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgX2NvdW50LCBjdXN0b21lciwgc2hvcCwgLi4ucmVzdCB9ID0gaW52b2ljZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21lcixcbiAgICAgICAgICAgICAgICAgICAgc2hvcCxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJOYW1lOiBjdXN0b21lcj8ubmFtZSB8fCAnVW5rbm93biBDdXN0b21lcicsXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVySWQ6IGN1c3RvbWVyPy5pZCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvdW50OiBfY291bnQuaXRlbXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgaW52b2ljZXM6IGZvcm1hdHRlZEludm9pY2VzLFxuICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbEludm9pY2VzIC8gbGltaXQpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbEludm9pY2VzLFxuICAgICAgICAgICAgICAgIHN0YXRpc3RpY3M6IHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxPdXRzdGFuZGluZzogdG90YWxPdXRzdGFuZGluZy5fc3VtLnRvdGFsIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhaWRUaGlzTW9udGg6IHBhaWRUaGlzTW9udGguX3N1bS50b3RhbCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZHVlQ291bnRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvcEZpbHRlcmVkOiBjb250ZXh0LmlzRmlsdGVyZWQsXG4gICAgICAgICAgICAgICAgICAgIHNob3BJZDogY29udGV4dC5zaG9wSWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDYWNoZSB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlU2VydmljZS5zZXQoY2FjaGVLZXksIHJlc3BvbnNlRGF0YSwgQ0FDSEVfQ09ORklHLlRUTC5JTlZPSUNFUyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLmpzb24ocmVzcG9uc2VEYXRhKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLUNhY2hlJywgJ01JU1MnKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdDYWNoZS1Db250cm9sJywgJ3B1YmxpYywgcy1tYXhhZ2U9NjAsIHN0YWxlLXdoaWxlLXJldmFsaWRhdGU9MTIwJyk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgaW52b2ljZXM6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBmZXRjaGluZyBpbnZvaWNlcycsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7IGVuZHBvaW50OiAnaW52b2ljZXMnIH0pO1xufSk7XG5cbmV4cG9ydCBjb25zdCBQT1NUID0gU2hvcEFjY2Vzc0NvbnRyb2wud2l0aFNob3BBY2Nlc3MoYXN5bmMgKHJlcXVlc3Q6IE5leHRSZXF1ZXN0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG1lYXN1cmVBc3luYygnY3JlYXRlLWludm9pY2UtYXBpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVmFsaWRhdGUgdG9rZW4gYW5kIHBlcm1pc3Npb25zXG4gICAgICAgICAgICBjb25zdCBzYWxlc01hbmFnZVJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlVG9rZW5QZXJtaXNzaW9uKHJlcXVlc3QsICdzYWxlczptYW5hZ2UnKTtcbiAgICAgICAgICAgIGNvbnN0IHNhbGVzQ3JlYXRlU2hvcFJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlVG9rZW5QZXJtaXNzaW9uKHJlcXVlc3QsICdzYWxlczpjcmVhdGU6c2hvcCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXNhbGVzTWFuYWdlUmVzdWx0LmlzVmFsaWQgJiYgIXNhbGVzQ3JlYXRlU2hvcFJlc3VsdC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnUGVybWlzc2lvbiBkZW5pZWQ6IHNhbGVzOm1hbmFnZSBvciBzYWxlczpjcmVhdGU6c2hvcCByZXF1aXJlZCcgXG4gICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHVzZXIgSUQgZnJvbSB0b2tlblxuICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgZ2V0VXNlcklkRnJvbVRva2VuKHJlcXVlc3QpO1xuICAgICAgICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdVbmFibGUgdG8gZ2V0IHVzZXIgaW5mb3JtYXRpb24gZnJvbSB0b2tlbicgXG4gICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW52b2ljZURhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSWYgdXNlciBvbmx5IGhhcyBzYWxlczpjcmVhdGU6c2hvcCBwZXJtaXNzaW9uLCB2YWxpZGF0ZSBzaG9wIHJlc3RyaWN0aW9uXG4gICAgICAgICAgICBpZiAoIXNhbGVzTWFuYWdlUmVzdWx0LmlzVmFsaWQgJiYgc2FsZXNDcmVhdGVTaG9wUmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2VyIGNhbiBvbmx5IGNyZWF0ZSBzYWxlcyBmb3IgdGhlaXIgYXNzaWduZWQgc2hvcFxuICAgICAgICAgICAgICAgIGlmICghaW52b2ljZURhdGEuc2hvcElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTaG9wIElEIGlzIHJlcXVpcmVkIGZvciBzYWxlcyBjcmVhdGlvbidcbiAgICAgICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSB1c2VyIGNhbiBvbmx5IGNyZWF0ZSBpbnZvaWNlcyBmb3IgdGhlaXIgc2hvcFxuICAgICAgICAgICAgICAgIGNvbnN0IHNob3BBY2Nlc3NSZXN1bHQgPSBhd2FpdCBTaG9wQWNjZXNzQ29udHJvbC52YWxpZGF0ZVNob3BBY2Nlc3MocmVxdWVzdCwgaW52b2ljZURhdGEuc2hvcElkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3BBY2Nlc3NSZXN1bHQuaGFzQWNjZXNzIHx8IHNob3BBY2Nlc3NSZXN1bHQuaXNBZG1pbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB1c2VyIGlzIGFkbWluLCB0aGV5IHNob3VsZCBoYXZlIHNhbGVzOm1hbmFnZSwgbm90IHNhbGVzOmNyZWF0ZTpzaG9wXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG9wQWNjZXNzUmVzdWx0LmlzQWRtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FkbWluIHVzZXJzIHNob3VsZCB1c2Ugc2FsZXM6bWFuYWdlIHBlcm1pc3Npb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7IHN0YXR1czogNDAzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaG9wQWNjZXNzQ29udHJvbC5jcmVhdGVBY2Nlc3NEZW5pZWRSZXNwb25zZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3BBY2Nlc3NSZXN1bHQuZXJyb3IgfHwgJ0Nhbm5vdCBjcmVhdGUgc2FsZXMgZm9yIHRoaXMgc2hvcCdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW52b2ljZSBkYXRhIHJlY2VpdmVkOicsIEpTT04uc3RyaW5naWZ5KGludm9pY2VEYXRhLCBudWxsLCAyKSk7XG4gICAgICAgICAgICBjb25zdCB7IHNlbmRTbXMsIGludm9pY2VOdW1iZXIsIC4uLmludm9pY2VEZXRhaWxzIH0gPSBpbnZvaWNlRGF0YTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZvaWNlIGRldGFpbHMgYWZ0ZXIgZGVzdHJ1Y3R1cmluZzonLCBKU09OLnN0cmluZ2lmeShpbnZvaWNlRGV0YWlscywgbnVsbCwgMikpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludm9pY2UgbnVtYmVyIGZyb20gcmVxdWVzdDonLCBpbnZvaWNlTnVtYmVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2VydmVyLXNpZGUgdmFsaWRhdGlvbiB0byBwcmV2ZW50IGVtcHR5IGludm9pY2VzXG4gICAgICAgICAgICBpZiAoIWludm9pY2VEZXRhaWxzLml0ZW1zIHx8ICFBcnJheS5pc0FycmF5KGludm9pY2VEZXRhaWxzLml0ZW1zKSB8fCBpbnZvaWNlRGV0YWlscy5pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludm9pY2UgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBpdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gaXRlbXMgcHJvdmlkZWQnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHRoYXQgYWxsIGl0ZW1zIGhhdmUgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGludm9pY2VEZXRhaWxzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGludm9pY2VEZXRhaWxzLml0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBWYWxpZGF0aW5nIGl0ZW0gJHtpfTpgLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogaXRlbS5wcm9kdWN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZFR5cGU6IHR5cGVvZiBpdGVtLnByb2R1Y3RJZCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IGl0ZW0ucXVhbnRpdHksXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5VHlwZTogdHlwZW9mIGl0ZW0ucXVhbnRpdHksXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBpdGVtLnByaWNlLFxuICAgICAgICAgICAgICAgICAgICBwcmljZVR5cGU6IHR5cGVvZiBpdGVtLnByaWNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtLnByb2R1Y3RJZCB8fCAhaXRlbS5xdWFudGl0eSB8fCBpdGVtLnF1YW50aXR5IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEl0ZW0gdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGl0ZW0gJHtpfTpgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNQcm9kdWN0SWQ6ICEhaXRlbS5wcm9kdWN0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNRdWFudGl0eTogISFpdGVtLnF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHlWYWx1ZTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5Q2hlY2s6IGl0ZW0ucXVhbnRpdHkgPD0gMFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJdGVtICR7aSArIDF9OiBBbGwgaXRlbXMgbXVzdCBoYXZlIHZhbGlkIHByb2R1Y3RJZCBhbmQgcXVhbnRpdHkgZ3JlYXRlciB0aGFuIDBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBpdGVtIGRhdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1EZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IGl0ZW0ucHJvZHVjdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvZHVjdElkOiAhIWl0ZW0ucHJvZHVjdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNRdWFudGl0eTogISFpdGVtLnF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eVBvc2l0aXZlOiBpdGVtLnF1YW50aXR5ID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGN1c3RvbWVyIGlzIHByb3ZpZGVkIChvcHRpb25hbCBidXQgcmVjb21tZW5kZWQpXG4gICAgICAgICAgICBpZiAoIWludm9pY2VEZXRhaWxzLmN1c3RvbWVySWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludm9pY2UgY3JlYXRlZCB3aXRob3V0IGN1c3RvbWVyIElEJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWRpdCBsaW1pdCB2YWxpZGF0aW9uIGZvciB3aG9sZXNhbGUgY3VzdG9tZXJzXG4gICAgICAgICAgICBpZiAoaW52b2ljZURldGFpbHMuY3VzdG9tZXJJZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbWVyID0gYXdhaXQgcmV0cnlPblByZXBhcmVkU3RhdGVtZW50RXJyb3IoKCkgPT4gXG4gICAgICAgICAgICAgICAgICAgIHByaXNtYS5jdXN0b21lci5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBpbnZvaWNlRGV0YWlscy5jdXN0b21lcklkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJUeXBlOiB0cnVlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkaXRMaW1pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXN0b21lciAmJiBjdXN0b21lci5jdXN0b21lclR5cGUgPT09ICd3aG9sZXNhbGUnICYmIGN1c3RvbWVyLmNyZWRpdExpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBpbnZvaWNlIGFtb3VudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbEFtb3VudCA9IGludm9pY2VEZXRhaWxzLml0ZW1zLnJlZHVjZSgoc3VtOiBudW1iZXIsIGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBwYXJzZUZsb2F0KGl0ZW0uY3VzdG9tUHJpY2UpIHx8IHBhcnNlRmxvYXQoaXRlbS5wcmljZSkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5ID0gcGFyc2VJbnQoaXRlbS5xdWFudGl0eSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtICsgKHByaWNlICogcXVhbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY3VzdG9tZXIncyBjdXJyZW50IG91dHN0YW5kaW5nIGJhbGFuY2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0c3RhbmRpbmdJbnZvaWNlcyA9IGF3YWl0IHJldHJ5T25QcmVwYXJlZFN0YXRlbWVudEVycm9yKCgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlzbWEuaW52b2ljZS5hZ2dyZWdhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVySWQ6IGludm9pY2VEZXRhaWxzLmN1c3RvbWVySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogeyBpbjogWydwZW5kaW5nJywgJ292ZXJkdWUnXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3VtOiB7IHRvdGFsOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJhbGFuY2UgPSBvdXRzdGFuZGluZ0ludm9pY2VzLl9zdW0udG90YWwgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VG90YWxCYWxhbmNlID0gY3VycmVudEJhbGFuY2UgKyB0b3RhbEFtb3VudDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VG90YWxCYWxhbmNlID4gY3VzdG9tZXIuY3JlZGl0TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQ3JlZGl0IGxpbWl0IGV4Y2VlZGVkIGZvciBjdXN0b21lciAke2N1c3RvbWVyLm5hbWV9LiBDdXJyZW50IGJhbGFuY2U6IFJzLiAke2N1cnJlbnRCYWxhbmNlLnRvTG9jYWxlU3RyaW5nKCl9LCBJbnZvaWNlIGFtb3VudDogUnMuICR7dG90YWxBbW91bnQudG9Mb2NhbGVTdHJpbmcoKX0sIENyZWRpdCBsaW1pdDogUnMuICR7Y3VzdG9tZXIuY3JlZGl0TGltaXQudG9Mb2NhbGVTdHJpbmcoKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ0NyZWRpdCBsaW1pdCBleGNlZWRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCYWxhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZUFtb3VudDogdG90YWxBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkaXRMaW1pdDogY3VzdG9tZXIuY3JlZGl0TGltaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlZWRBbW91bnQ6IG5ld1RvdGFsQmFsYW5jZSAtIGN1c3RvbWVyLmNyZWRpdExpbWl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW52b2ljZSBudW1iZXIgaWYgbWlzc2luZ1xuICAgICAgICAgICAgY29uc3QgZmluYWxJbnZvaWNlTnVtYmVyID0gaW52b2ljZU51bWJlciB8fCBgSU5WLSR7RGF0ZS5ub3coKX0tJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZpbmFsIGludm9pY2UgbnVtYmVyIHRvIHVzZTonLCBmaW5hbEludm9pY2VOdW1iZXIpO1xuXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBzaG9wIGFjY2VzcyBmb3IgdGhlIHRhcmdldCBzaG9wIChvbmx5IGlmIHNob3BJZCBpcyBwcm92aWRlZClcbiAgICAgICAgICAgIGlmIChpbnZvaWNlRGV0YWlscy5zaG9wSWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVmFsaWRhdGluZyBzaG9wIGFjY2VzcyBmb3Igc2hvcElkOicsIGludm9pY2VEZXRhaWxzLnNob3BJZCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvcEFjY2Vzc1Jlc3VsdCA9IGF3YWl0IFNob3BBY2Nlc3NDb250cm9sLnZhbGlkYXRlU2hvcEFjY2VzcyhyZXF1ZXN0LCBpbnZvaWNlRGV0YWlscy5zaG9wSWQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTaG9wIGFjY2VzcyByZXN1bHQ6Jywgc2hvcEFjY2Vzc1Jlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG9wQWNjZXNzUmVzdWx0Lmhhc0FjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU2hvcCBhY2Nlc3MgZGVuaWVkOicsIHNob3BBY2Nlc3NSZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2hvcEFjY2Vzc0NvbnRyb2wuY3JlYXRlQWNjZXNzRGVuaWVkUmVzcG9uc2Uoc2hvcEFjY2Vzc1Jlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTaG9wIGFjY2VzcyBncmFudGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBzaG9wSWQgcHJvdmlkZWQsIHNraXBwaW5nIHNob3AgYWNjZXNzIHZhbGlkYXRpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW52ZW50b3J5VXBkYXRlc0ZvckV2ZW50OiBBcnJheTx7IHByb2R1Y3RJZDogbnVtYmVyLCBzaG9wSWQ6IHN0cmluZywgbmV3UXVhbnRpdHk6IG51bWJlciwgb2xkUXVhbnRpdHk6IG51bWJlciB9PiA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBpbnZvaWNlID0gYXdhaXQgbWVhc3VyZUFzeW5jKCdpbnZvaWNlLXRyYW5zYWN0aW9uJywgKCkgPT5cbiAgICAgICAgICAgICAgICBwcmlzbWEuJHRyYW5zYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICBhc3luYyAodHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRJbnZvaWNlID0gYXdhaXQgdHguaW52b2ljZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZU51bWJlcjogZmluYWxJbnZvaWNlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcklkOiBpbnZvaWNlRGV0YWlscy5jdXN0b21lcklkIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiAwLCAvLyBXaWxsIGJlIHVwZGF0ZWQgYWZ0ZXIgaXRlbXMgYXJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZDogaW52b2ljZURldGFpbHMucGF5bWVudE1ldGhvZCB8fCAnQ2FzaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2VEYXRlOiBpbnZvaWNlRGV0YWlscy5pbnZvaWNlRGF0ZSA/IG5ldyBEYXRlKGludm9pY2VEZXRhaWxzLmludm9pY2VEYXRlKSA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1ZURhdGU6IGludm9pY2VEZXRhaWxzLmR1ZURhdGUgPyBuZXcgRGF0ZShpbnZvaWNlRGV0YWlscy5kdWVEYXRlKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzOiBpbnZvaWNlRGV0YWlscy5ub3RlcyB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcElkOiBpbnZvaWNlRGV0YWlscy5zaG9wSWQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEJ5OiB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUHJvZml0OiAwLCAvLyBXaWxsIGJlIHVwZGF0ZWQgYWZ0ZXIgaXRlbXMgYXJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maXRNYXJnaW46IDAgLy8gV2lsbCBiZSB1cGRhdGVkIGFmdGVyIGl0ZW1zIGFyZSBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZWQgYXV0b21hdGljIHBheW1lbnQgY3JlYXRpb24gZm9yIGNhc2ggaW52b2ljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXJzIHdpbGwgbWFudWFsbHkgcmVjb3JkIHBheW1lbnRzIHdoZW4gdGhleSBhY3R1YWxseSByZWNlaXZlIHRoZW1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludm9pY2VEZXRhaWxzLml0ZW1zICYmIEFycmF5LmlzQXJyYXkoaW52b2ljZURldGFpbHMuaXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHNob3Atc3BlY2lmaWMgY29zdHMgZm9yIHByb2ZpdCBjYWxjdWxhdGlvbiBpbnN0ZWFkIG9mIGdsb2JhbCB3ZWlnaHRlZCBhdmVyYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjdElkcyA9IGludm9pY2VEZXRhaWxzLml0ZW1zLm1hcCgoaXRlbTogYW55KSA9PiBwYXJzZUludChpdGVtLnByb2R1Y3RJZCwgMTApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZlbnRvcnlJdGVtcyA9IGF3YWl0IHR4LmludmVudG9yeUl0ZW0uZmluZE1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogeyBpbjogcHJvZHVjdElkcyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcElkOiBpbnZvaWNlRGV0YWlscy5zaG9wSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7IHByb2R1Y3RJZDogdHJ1ZSwgc2hvcFNwZWNpZmljQ29zdDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBtYXAgb2YgcHJvZHVjdElkIHRvIHNob3Atc3BlY2lmaWMgY29zdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RDb3N0TWFwID0gbmV3IE1hcChpbnZlbnRvcnlJdGVtcy5tYXAoaXRlbSA9PiBbaXRlbS5wcm9kdWN0SWQsIGl0ZW0uc2hvcFNwZWNpZmljQ29zdCB8fCAwXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBwcm9kdWN0cyBub3QgZm91bmQgaW4gaW52ZW50b3J5LCBmYWxsYmFjayB0byBnbG9iYWwgd2VpZ2h0ZWQgYXZlcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdQcm9kdWN0SWRzID0gcHJvZHVjdElkcy5maWx0ZXIoKGlkOiBhbnkpID0+ICFwcm9kdWN0Q29zdE1hcC5oYXMoaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlzc2luZ1Byb2R1Y3RJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmYWxsYmFja1Byb2R1Y3RzID0gYXdhaXQgdHgucHJvZHVjdC5maW5kTWFueSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogeyBpbjogbWlzc2luZ1Byb2R1Y3RJZHMgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCB3ZWlnaHRlZEF2ZXJhZ2VDb3N0OiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrUHJvZHVjdHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RDb3N0TWFwLnNldChwLmlkLCBwLndlaWdodGVkQXZlcmFnZUNvc3QgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWxjdWxhdGVkVG90YWxJbnZvaWNlQW1vdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYXRjaCBjcmVhdGUgaW52b2ljZSBpdGVtcyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW52b2ljZUl0ZW1zRGF0YSA9IGludm9pY2VEZXRhaWxzLml0ZW1zLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RJZCA9IHBhcnNlSW50KGl0ZW0ucHJvZHVjdElkLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvc3RQcmljZSA9IHByb2R1Y3RDb3N0TWFwLmdldChwcm9kdWN0SWQpIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1TZWxsaW5nVG90YWwgPSBpdGVtLnF1YW50aXR5ICogaXRlbS5wcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxJdGVtQ29zdCA9IGNvc3RQcmljZSAqIGl0ZW0ucXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Qcm9maXQgPSBpdGVtU2VsbGluZ1RvdGFsIC0gdG90YWxJdGVtQ29zdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRUb3RhbEludm9pY2VBbW91bnQgKz0gaXRlbVNlbGxpbmdUb3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlSWQ6IGNyZWF0ZWRJbnZvaWNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiBwcm9kdWN0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBpdGVtLnByaWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IGl0ZW1TZWxsaW5nVG90YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3N0UHJpY2U6IGNvc3RQcmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpdDogaXRlbVByb2ZpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhdGNoIGluc2VydCBhbGwgaW52b2ljZSBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHR4Lmludm9pY2VJdGVtLmNyZWF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpbnZvaWNlSXRlbXNEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgYW5kIHVwZGF0ZSB0b3RhbCBwcm9maXQgYW5kIHByb2ZpdCBtYXJnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbFByb2ZpdCA9IGludm9pY2VEZXRhaWxzLml0ZW1zLnJlZHVjZSgoc3VtOiBudW1iZXIsIGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSBwYXJzZUludChpdGVtLnByb2R1Y3RJZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3N0UHJpY2UgPSBwcm9kdWN0Q29zdE1hcC5nZXQocHJvZHVjdElkKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtU2VsbGluZ1RvdGFsID0gaXRlbS5xdWFudGl0eSAqIGl0ZW0ucHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsSXRlbUNvc3QgPSBjb3N0UHJpY2UgKiBpdGVtLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUHJvZml0ID0gaXRlbVNlbGxpbmdUb3RhbCAtIHRvdGFsSXRlbUNvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW0gKyBpdGVtUHJvZml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZml0TWFyZ2luID0gY2FsY3VsYXRlZFRvdGFsSW52b2ljZUFtb3VudCA+IDAgPyAodG90YWxQcm9maXQgLyBjYWxjdWxhdGVkVG90YWxJbnZvaWNlQW1vdW50KSAqIDEwMCA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBkaXNjb3VudCBpZiBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJ0b3RhbCA9IGNhbGN1bGF0ZWRUb3RhbEludm9pY2VBbW91bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpc2NvdW50QW1vdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW52b2ljZURldGFpbHMuZGlzY291bnRUeXBlICYmIGludm9pY2VEZXRhaWxzLmRpc2NvdW50VmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50QW1vdW50ID0gaW52b2ljZURldGFpbHMuZGlzY291bnRUeXBlID09PSAncGVyY2VudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHN1YnRvdGFsICogaW52b2ljZURldGFpbHMuZGlzY291bnRWYWx1ZSkgLyAxMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaW52b2ljZURldGFpbHMuZGlzY291bnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ldFRvdGFsID0gc3VidG90YWwgLSBkaXNjb3VudEFtb3VudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHR4Lmludm9pY2UudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IGNyZWF0ZWRJbnZvaWNlLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvdW50VHlwZTogaW52b2ljZURldGFpbHMuZGlzY291bnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY291bnRWYWx1ZTogaW52b2ljZURldGFpbHMuZGlzY291bnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBuZXRUb3RhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUHJvZml0OiB0b3RhbFByb2ZpdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpdE1hcmdpbjogcHJvZml0TWFyZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemVkIGludmVudG9yeSBjaGVjayBhbmQgdXBkYXRlIGZvciB0aGUgc2VsZWN0ZWQgc2hvcFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludm9pY2VEZXRhaWxzLnNob3BJZCAmJiBpbnZvaWNlRGV0YWlscy5pdGVtcyAmJiBBcnJheS5pc0FycmF5KGludm9pY2VEZXRhaWxzLml0ZW1zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhdGNoIGZldGNoIGFsbCBpbnZlbnRvcnkgaXRlbXMgZm9yIGFsbCBwcm9kdWN0cyBpbiBvbmUgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0SWRzID0gaW52b2ljZURldGFpbHMuaXRlbXMubWFwKChpdGVtOiBhbnkpID0+IHBhcnNlSW50KGl0ZW0ucHJvZHVjdElkLCAxMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEludmVudG9yeUl0ZW1zID0gYXdhaXQgdHguaW52ZW50b3J5SXRlbS5maW5kTWFueSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IHsgaW46IHByb2R1Y3RJZHMgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3BJZDogaW52b2ljZURldGFpbHMuc2hvcElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyQnk6IHsgdXBkYXRlZEF0OiAnYXNjJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIHByb2R1Y3RJZDogdHJ1ZSwgcXVhbnRpdHk6IHRydWUsIHVwZGF0ZWRBdDogdHJ1ZSwgc2hvcElkOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHcm91cCBpbnZlbnRvcnkgaXRlbXMgYnkgcHJvZHVjdCBJRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludmVudG9yeUJ5UHJvZHVjdCA9IG5ldyBNYXA8bnVtYmVyLCB0eXBlb2YgYWxsSW52ZW50b3J5SXRlbXM+KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsSW52ZW50b3J5SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnZlbnRvcnlCeVByb2R1Y3QuaGFzKGl0ZW0ucHJvZHVjdElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5QnlQcm9kdWN0LnNldChpdGVtLnByb2R1Y3RJZCwgW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVudG9yeUJ5UHJvZHVjdC5nZXQoaXRlbS5wcm9kdWN0SWQpIS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIGludmVudG9yeSBhdmFpbGFiaWxpdHkgZm9yIGFsbCBpdGVtcyBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpbnZvaWNlRGV0YWlscy5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSBwYXJzZUludChpdGVtLnByb2R1Y3RJZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZlbnRvcnlJdGVtcyA9IGludmVudG9yeUJ5UHJvZHVjdC5nZXQocHJvZHVjdElkKSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludmVudG9yeUl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBpbnZlbnRvcnkgZm9yIHByb2R1Y3QgSUQgJHtwcm9kdWN0SWR9IGluIHRoZSBzZWxlY3RlZCBzaG9wYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxJbnZlbnRvcnkgPSBpbnZlbnRvcnlJdGVtcy5yZWR1Y2UoKHN1bSwgaW52KSA9PiBzdW0gKyBpbnYucXVhbnRpdHksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxJbnZlbnRvcnkgPCBpdGVtLnF1YW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VmZmljaWVudCBpbnZlbnRvcnkgZm9yIHByb2R1Y3QgSUQgJHtwcm9kdWN0SWR9IGluIHRoZSBzZWxlY3RlZCBzaG9wLiBBdmFpbGFibGU6ICR7dG90YWxJbnZlbnRvcnl9LCBSZXF1aXJlZDogJHtpdGVtLnF1YW50aXR5fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgaW52ZW50b3J5IHVwZGF0ZXMgdXNpbmcgRklGT1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludmVudG9yeVVwZGF0ZXM6IEFycmF5PHsgaWQ6IG51bWJlcjsgcXVhbnRpdHk6IG51bWJlciB9PiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpbnZvaWNlRGV0YWlscy5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSBwYXJzZUludChpdGVtLnByb2R1Y3RJZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZlbnRvcnlJdGVtcyA9IGludmVudG9yeUJ5UHJvZHVjdC5nZXQocHJvZHVjdElkKSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbmluZ1F1YW50aXR5ID0gaXRlbS5xdWFudGl0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGludmVudG9yeUl0ZW0gb2YgaW52ZW50b3J5SXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmdRdWFudGl0eSA8PSAwKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnZlbnRvcnlJdGVtLnF1YW50aXR5ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZHVjdEFtb3VudCA9IE1hdGgubWluKHJlbWFpbmluZ1F1YW50aXR5LCBpbnZlbnRvcnlJdGVtLnF1YW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRTaG9wUXVhbnRpdHkgPSBpbnZlbnRvcnlJdGVtLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Nob3BRdWFudGl0eSA9IGludmVudG9yeUl0ZW0ucXVhbnRpdHkgLSBkZWR1Y3RBbW91bnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnlVcGRhdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaW52ZW50b3J5SXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IG5ld1Nob3BRdWFudGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5VXBkYXRlc0ZvckV2ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IHByb2R1Y3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcElkOiBpbnZlbnRvcnlJdGVtLnNob3BJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UXVhbnRpdHk6IG5ld1Nob3BRdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkUXVhbnRpdHk6IG9sZFNob3BRdWFudGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1F1YW50aXR5IC09IGRlZHVjdEFtb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhdGNoIHVwZGF0ZSBpbnZlbnRvcnkgaXRlbXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZW50b3J5VXBkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5VXBkYXRlcy5tYXAodXBkYXRlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguaW52ZW50b3J5SXRlbS51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogdXBkYXRlLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgcXVhbnRpdHk6IHVwZGF0ZS5xdWFudGl0eSwgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eC5pbnZvaWNlLmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBjcmVhdGVkSW52b2ljZS5pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6IHsgY3VzdG9tZXI6IHRydWUsIGl0ZW1zOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7IHRpbWVvdXQ6IDMwMDAwIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBSZWFsLXRpbWUgdXBkYXRlcyBub3cgaGFuZGxlZCBieSBwb2xsaW5nIHN5c3RlbVxuICAgICAgICAgICAgY29uc29sZS5sb2coYEludm9pY2UgJHtpbnZvaWNlPy5pZH0gY3JlYXRlZCBzdWNjZXNzZnVsbHlgKTtcblxuICAgICAgICAgICAgaWYgKHNlbmRTbXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTTVMgc2VydmljZSB0ZW1wb3JhcmlseSBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU01TIG5vdGlmaWNhdGlvbiByZXF1ZXN0ZWQgYnV0IHNlcnZpY2UgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgU01TIHNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gYXdhaXQgc21zU2VydmljZS5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChzbXNTZXJ2aWNlLmlzQ29uZmlndXJlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzbXNTZXJ2aWNlLnNlbmRJbnZvaWNlTm90aWZpY2F0aW9uKGludm9pY2UhLmlkKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA+PSAyMDAgJiYgcmVzdWx0LnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NNUyBub3RpZmljYXRpb24gc2VudCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNlbmQgU01TIG5vdGlmaWNhdGlvbjonLCByZXN1bHQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZW5kaW5nIFNNUyBub3RpZmljYXRpb246JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoc21zRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignU01TIG5vdGlmaWNhdGlvbiBlcnJvcjonLCBzbXNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHJlbGF0ZWQgY2FjaGVzXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgY2FjaGVTZXJ2aWNlLmludmFsaWRhdGVJbnZvaWNlcygpLFxuICAgICAgICAgICAgICAgIGNhY2hlU2VydmljZS5pbnZhbGlkYXRlSW52ZW50b3J5KClcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBjb25zdCBhdWRpdFNlcnZpY2UgPSBBdWRpdFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGF3YWl0IGF1ZGl0U2VydmljZS5sb2dBY3Rpb24oe1xuICAgICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdDUkVBVEUnLFxuICAgICAgICAgICAgICAgIGVudGl0eTogJ0ludm9pY2UnLFxuICAgICAgICAgICAgICAgIGVudGl0eUlkOiBpbnZvaWNlIS5pZCxcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGludm9pY2VOdW1iZXI6IGludm9pY2UhLmludm9pY2VOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVySWQ6IGludm9pY2UhLmN1c3RvbWVySWQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiBpbnZvaWNlIS50b3RhbCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBpbnZvaWNlIS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHNob3BJZDogaW52b2ljZSEuc2hvcElkLFxuICAgICAgICAgICAgICAgICAgICBpdGVtc0NvdW50OiBpbnZvaWNlIS5pdGVtcy5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ0ludm9pY2UgY3JlYXRlZCBzdWNjZXNzZnVsbHknLCBkYXRhOiBpbnZvaWNlIH0sXG4gICAgICAgICAgICAgICAgeyBzdGF0dXM6IDIwMSB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgaW52b2ljZTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0Vycm9yIGNyZWF0aW5nIGludm9pY2UnLCBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0sXG4gICAgICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgeyBlbmRwb2ludDogJ2NyZWF0ZS1pbnZvaWNlJyB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdUNhQSxHQUFHLFdBQUFBLENBQUE7SUFBQTtJQUFBQyxhQUFBLEdBQUFDLENBQUE7SUFBQUQsYUFBQSxHQUFBRSxDQUFBO1dBQUhILEdBQUE7O0VBMFBBSSxJQUFJLFdBQUFBLENBQUE7SUFBQTtJQUFBSCxhQUFBLEdBQUFDLENBQUE7SUFBQUQsYUFBQSxHQUFBRSxDQUFBO1dBQUpDLElBQUE7Ozs7O2lDQWpTNkI7Oztp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