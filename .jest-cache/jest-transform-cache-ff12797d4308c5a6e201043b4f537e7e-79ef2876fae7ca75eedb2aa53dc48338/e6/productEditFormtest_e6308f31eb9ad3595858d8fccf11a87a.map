{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/components/productEditForm.test.tsx"],"sourcesContent":["// Component tests for Product Edit Form - Low Stock Threshold feature\n// Tests the UI components and user interactions for editing minStockLevel\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport EditProductPage from '@/app/inventory/[productId]/edit/page';\n\n// Mock dependencies\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    refresh: jest.fn(),\n  }),\n  useParams: () => ({ productId: '1' }),\n}));\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => ({\n    user: {\n      id: '1',\n      name: 'Test User',\n      email: 'test@example.com',\n      permissions: ['inventory:edit'],\n    },\n    isAuthenticated: true,\n    loading: false,\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock product data\nconst mockProduct = {\n  id: 1,\n  name: 'Test Product',\n  sku: 'TEST-001',\n  barcode: '1234567890',\n  description: 'Test product description',\n  retailPrice: 100,\n  basePrice: 80,\n  minStockLevel: 10,\n  categoryId: 1,\n  category: {\n    id: 1,\n    name: 'Test Category',\n  },\n};\n\nconst mockCategories = [\n  { id: 1, name: 'Test Category' },\n  { id: 2, name: 'Another Category' },\n];\n\ndescribe('Product Edit Form - Low Stock Threshold', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful API responses\n    mockFetch.mockImplementation((url: string) => {\n      if (url.includes('/api/products/1')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true, product: mockProduct }),\n        });\n      }\n      if (url.includes('/api/categories')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true, categories: mockCategories }),\n        });\n      }\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({ success: true }),\n      });\n    });\n  });\n\n  test('should render low stock threshold input field', async () => {\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    expect(lowStockInput).toHaveAttribute('type', 'number');\n    expect(lowStockInput).toHaveAttribute('min', '0');\n  });\n\n  test('should display current minStockLevel value', async () => {\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n      expect(lowStockInput).toHaveValue(10);\n    });\n  });\n\n  test('should update minStockLevel when user types in input', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    \n    // Clear the input and type new value\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '25');\n\n    expect(lowStockInput).toHaveValue(25);\n  });\n\n  test('should accept zero as valid minStockLevel', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    \n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '0');\n\n    expect(lowStockInput).toHaveValue(0);\n  });\n\n  test('should prevent negative values', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    \n    // Try to enter negative value\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '-5');\n\n    // The input should not accept negative values due to min=\"0\" attribute\n    expect(lowStockInput).toHaveAttribute('min', '0');\n  });\n\n  test('should include minStockLevel in form submission', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    const submitButton = screen.getByRole('button', { name: /update product/i });\n\n    // Update the low stock threshold\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '30');\n\n    // Submit the form\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/products/1',\n        expect.objectContaining({\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: expect.stringContaining('\"minStockLevel\":30'),\n        })\n      );\n    });\n  });\n\n  test('should display helper text for low stock threshold', async () => {\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByText(/alert when stock falls below this level/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should handle form submission with only minStockLevel change', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    const submitButton = screen.getByRole('button', { name: /update product/i });\n\n    // Only change the low stock threshold\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '15');\n\n    // Submit the form\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/products/1',\n        expect.objectContaining({\n          method: 'PUT',\n          body: expect.stringContaining('\"minStockLevel\":15'),\n        })\n      );\n    });\n  });\n\n  test('should handle API error when updating minStockLevel', async () => {\n    const user = userEvent.setup();\n    \n    // Mock API error\n    mockFetch.mockImplementation((url: string) => {\n      if (url.includes('/api/products/1') && url.includes('PUT')) {\n        return Promise.resolve({\n          ok: false,\n          json: () => Promise.resolve({ success: false, message: 'Update failed' }),\n        });\n      }\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({ success: true, product: mockProduct }),\n      });\n    });\n\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    const submitButton = screen.getByRole('button', { name: /update product/i });\n\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '20');\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/update failed/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should maintain minStockLevel value during form validation errors', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const nameInput = screen.getByLabelText(/product name/i);\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    const submitButton = screen.getByRole('button', { name: /update product/i });\n\n    // Clear required field to trigger validation error\n    await user.clear(nameInput);\n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '35');\n\n    // Try to submit with invalid data\n    await user.click(submitButton);\n\n    // The minStockLevel should still be 35\n    expect(lowStockInput).toHaveValue(35);\n  });\n\n  test('should handle large minStockLevel values', async () => {\n    const user = userEvent.setup();\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    \n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '9999');\n\n    expect(lowStockInput).toHaveValue(9999);\n  });\n\n  test('should reset form when product data is reloaded', async () => {\n    render(<EditProductPage />);\n\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    expect(lowStockInput).toHaveValue(10); // Should show the original value\n  });\n});\n\n// Integration test for the complete flow\ndescribe('Product Edit Form - Low Stock Threshold Integration', () => {\n  test('should complete full edit flow with minStockLevel update', async () => {\n    const user = userEvent.setup();\n    \n    // Mock successful update response\n    mockFetch.mockImplementation((url: string, options: any) => {\n      if (url.includes('/api/products/1') && options?.method === 'PUT') {\n        const body = JSON.parse(options.body);\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({\n            success: true,\n            product: { ...mockProduct, minStockLevel: body.minStockLevel },\n          }),\n        });\n      }\n      if (url.includes('/api/products/1')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true, product: mockProduct }),\n        });\n      }\n      if (url.includes('/api/categories')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true, categories: mockCategories }),\n        });\n      }\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({ success: true }),\n      });\n    });\n\n    render(<EditProductPage />);\n\n    // Wait for form to load\n    await waitFor(() => {\n      expect(screen.getByLabelText(/low stock threshold/i)).toBeInTheDocument();\n    });\n\n    // Update multiple fields including minStockLevel\n    const nameInput = screen.getByLabelText(/product name/i);\n    const lowStockInput = screen.getByLabelText(/low stock threshold/i);\n    const priceInput = screen.getByLabelText(/retail price/i);\n    const submitButton = screen.getByRole('button', { name: /update product/i });\n\n    await user.clear(nameInput);\n    await user.type(nameInput, 'Updated Product Name');\n    \n    await user.clear(lowStockInput);\n    await user.type(lowStockInput, '50');\n    \n    await user.clear(priceInput);\n    await user.type(priceInput, '150');\n\n    // Submit the form\n    await user.click(submitButton);\n\n    // Verify the API call\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/products/1',\n        expect.objectContaining({\n          method: 'PUT',\n          body: expect.stringContaining('\"minStockLevel\":50'),\n        })\n      );\n    });\n\n    // Verify success message\n    await waitFor(() => {\n      expect(screen.getByText(/product updated successfully/i)).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","fn","replace","back","refresh","useParams","productId","useAuth","user","id","name","email","permissions","isAuthenticated","loading","mockFetch","global","fetch","mockProduct","sku","barcode","description","retailPrice","basePrice","minStockLevel","categoryId","category","mockCategories","describe","beforeEach","clearAllMocks","mockImplementation","url","includes","Promise","resolve","ok","json","success","product","categories","test","render","EditProductPage","waitFor","expect","screen","getByLabelText","toBeInTheDocument","lowStockInput","toHaveAttribute","toHaveValue","userEvent","setup","clear","type","submitButton","getByRole","click","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","getByText","message","nameInput","options","JSON","parse","priceInput"],"mappings":"AAAA,sEAAsE;AACtE,0EAA0E;;AAQ1E,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAW,IAAO,CAAA;gBAChBC,MAAMH,KAAKI,EAAE;gBACbC,SAASL,KAAKI,EAAE;gBAChBE,MAAMN,KAAKI,EAAE;gBACbG,SAASP,KAAKI,EAAE;YAClB,CAAA;QACAI,WAAW,IAAO,CAAA;gBAAEC,WAAW;YAAI,CAAA;IACrC,CAAA;AAEAT,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCS,SAAS,IAAO,CAAA;gBACdC,MAAM;oBACJC,IAAI;oBACJC,MAAM;oBACNC,OAAO;oBACPC,aAAa;wBAAC;qBAAiB;gBACjC;gBACAC,iBAAiB;gBACjBC,SAAS;YACX,CAAA;IACF,CAAA;;;;;8DA5BkB;wBACiC;kEAC7B;QACf;6DACqB;;;;;;AA0B5B,sBAAsB;AACtB,MAAMC,YAAYlB,KAAKI,EAAE;AACzBe,OAAOC,KAAK,GAAGF;AAEf,oBAAoB;AACpB,MAAMG,cAAc;IAClBT,IAAI;IACJC,MAAM;IACNS,KAAK;IACLC,SAAS;IACTC,aAAa;IACbC,aAAa;IACbC,WAAW;IACXC,eAAe;IACfC,YAAY;IACZC,UAAU;QACRjB,IAAI;QACJC,MAAM;IACR;AACF;AAEA,MAAMiB,iBAAiB;IACrB;QAAElB,IAAI;QAAGC,MAAM;IAAgB;IAC/B;QAAED,IAAI;QAAGC,MAAM;IAAmB;CACnC;AAEDkB,SAAS,2CAA2C;IAClDC,WAAW;QACThC,KAAKiC,aAAa;QAElB,gCAAgC;QAChCf,UAAUgB,kBAAkB,CAAC,CAACC;YAC5B,IAAIA,IAAIC,QAAQ,CAAC,oBAAoB;gBACnC,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAAEG,SAAS;4BAAMC,SAASrB;wBAAY;gBACpE;YACF;YACA,IAAIc,IAAIC,QAAQ,CAAC,oBAAoB;gBACnC,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAAEG,SAAS;4BAAME,YAAYb;wBAAe;gBAC1E;YACF;YACA,OAAOO,QAAQC,OAAO,CAAC;gBACrBC,IAAI;gBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;wBAAEG,SAAS;oBAAK;YAC9C;QACF;IACF;IAEAG,KAAK,iDAAiD;QACpDC,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5CF,OAAOI,eAAeC,eAAe,CAAC,QAAQ;QAC9CL,OAAOI,eAAeC,eAAe,CAAC,OAAO;IAC/C;IAEAT,KAAK,8CAA8C;QACjDC,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZ,MAAMK,gBAAgBH,cAAM,CAACC,cAAc,CAAC;YAC5CF,OAAOI,eAAeE,WAAW,CAAC;QACpC;IACF;IAEAV,KAAK,wDAAwD;QAC3D,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAE5C,qCAAqC;QACrC,MAAMvC,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/BJ,OAAOI,eAAeE,WAAW,CAAC;IACpC;IAEAV,KAAK,6CAA6C;QAChD,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAE5C,MAAMvC,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/BJ,OAAOI,eAAeE,WAAW,CAAC;IACpC;IAEAV,KAAK,kCAAkC;QACrC,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAE5C,8BAA8B;QAC9B,MAAMvC,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/B,uEAAuE;QACvEJ,OAAOI,eAAeC,eAAe,CAAC,OAAO;IAC/C;IAEAT,KAAK,mDAAmD;QACtD,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5C,MAAMS,eAAeV,cAAM,CAACW,SAAS,CAAC,UAAU;YAAE/C,MAAM;QAAkB;QAE1E,iCAAiC;QACjC,MAAMF,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/B,kBAAkB;QAClB,MAAMzC,KAAKkD,KAAK,CAACF;QAEjB,MAAMZ,IAAAA,eAAO,EAAC;YACZC,OAAO9B,WAAW4C,oBAAoB,CACpC,mBACAd,OAAOe,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMlB,OAAOmB,gBAAgB,CAAC;YAChC;QAEJ;IACF;IAEAvB,KAAK,sDAAsD;QACzDC,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACmB,SAAS,CAAC,6CAA6CjB,iBAAiB;QACxF;IACF;IAEAP,KAAK,gEAAgE;QACnE,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5C,MAAMS,eAAeV,cAAM,CAACW,SAAS,CAAC,UAAU;YAAE/C,MAAM;QAAkB;QAE1E,sCAAsC;QACtC,MAAMF,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/B,kBAAkB;QAClB,MAAMzC,KAAKkD,KAAK,CAACF;QAEjB,MAAMZ,IAAAA,eAAO,EAAC;YACZC,OAAO9B,WAAW4C,oBAAoB,CACpC,mBACAd,OAAOe,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRE,MAAMlB,OAAOmB,gBAAgB,CAAC;YAChC;QAEJ;IACF;IAEAvB,KAAK,uDAAuD;QAC1D,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAE5B,iBAAiB;QACjBtC,UAAUgB,kBAAkB,CAAC,CAACC;YAC5B,IAAIA,IAAIC,QAAQ,CAAC,sBAAsBD,IAAIC,QAAQ,CAAC,QAAQ;gBAC1D,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAAEG,SAAS;4BAAO4B,SAAS;wBAAgB;gBACzE;YACF;YACA,OAAOhC,QAAQC,OAAO,CAAC;gBACrBC,IAAI;gBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;wBAAEG,SAAS;wBAAMC,SAASrB;oBAAY;YACpE;QACF;QAEAwB,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5C,MAAMS,eAAeV,cAAM,CAACW,SAAS,CAAC,UAAU;YAAE/C,MAAM;QAAkB;QAE1E,MAAMF,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAC/B,MAAMzC,KAAKkD,KAAK,CAACF;QAEjB,MAAMZ,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACmB,SAAS,CAAC,mBAAmBjB,iBAAiB;QAC9D;IACF;IAEAP,KAAK,qEAAqE;QACxE,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMmB,YAAYrB,cAAM,CAACC,cAAc,CAAC;QACxC,MAAME,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5C,MAAMS,eAAeV,cAAM,CAACW,SAAS,CAAC,UAAU;YAAE/C,MAAM;QAAkB;QAE1E,mDAAmD;QACnD,MAAMF,KAAK8C,KAAK,CAACa;QACjB,MAAM3D,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/B,kCAAkC;QAClC,MAAMzC,KAAKkD,KAAK,CAACF;QAEjB,uCAAuC;QACvCX,OAAOI,eAAeE,WAAW,CAAC;IACpC;IAEAV,KAAK,4CAA4C;QAC/C,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAC5BX,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAE5C,MAAMvC,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/BJ,OAAOI,eAAeE,WAAW,CAAC;IACpC;IAEAV,KAAK,mDAAmD;QACtDC,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,MAAMC,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5CF,OAAOI,eAAeE,WAAW,CAAC,KAAK,iCAAiC;IAC1E;AACF;AAEA,yCAAyC;AACzCvB,SAAS,uDAAuD;IAC9Da,KAAK,4DAA4D;QAC/D,MAAMjC,OAAO4C,kBAAS,CAACC,KAAK;QAE5B,kCAAkC;QAClCtC,UAAUgB,kBAAkB,CAAC,CAACC,KAAaoC;YACzC,IAAIpC,IAAIC,QAAQ,CAAC,sBAAsBmC,SAASP,WAAW,OAAO;gBAChE,MAAME,OAAOM,KAAKC,KAAK,CAACF,QAAQL,IAAI;gBACpC,OAAO7B,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAC1BG,SAAS;4BACTC,SAAS;gCAAE,GAAGrB,WAAW;gCAAEM,eAAeuC,KAAKvC,aAAa;4BAAC;wBAC/D;gBACF;YACF;YACA,IAAIQ,IAAIC,QAAQ,CAAC,oBAAoB;gBACnC,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAAEG,SAAS;4BAAMC,SAASrB;wBAAY;gBACpE;YACF;YACA,IAAIc,IAAIC,QAAQ,CAAC,oBAAoB;gBACnC,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;4BAAEG,SAAS;4BAAME,YAAYb;wBAAe;gBAC1E;YACF;YACA,OAAOO,QAAQC,OAAO,CAAC;gBACrBC,IAAI;gBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;wBAAEG,SAAS;oBAAK;YAC9C;QACF;QAEAI,IAAAA,cAAM,gBAAC,qBAACC,aAAe;QAEvB,wBAAwB;QACxB,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,cAAc,CAAC,yBAAyBC,iBAAiB;QACzE;QAEA,iDAAiD;QACjD,MAAMmB,YAAYrB,cAAM,CAACC,cAAc,CAAC;QACxC,MAAME,gBAAgBH,cAAM,CAACC,cAAc,CAAC;QAC5C,MAAMwB,aAAazB,cAAM,CAACC,cAAc,CAAC;QACzC,MAAMS,eAAeV,cAAM,CAACW,SAAS,CAAC,UAAU;YAAE/C,MAAM;QAAkB;QAE1E,MAAMF,KAAK8C,KAAK,CAACa;QACjB,MAAM3D,KAAK+C,IAAI,CAACY,WAAW;QAE3B,MAAM3D,KAAK8C,KAAK,CAACL;QACjB,MAAMzC,KAAK+C,IAAI,CAACN,eAAe;QAE/B,MAAMzC,KAAK8C,KAAK,CAACiB;QACjB,MAAM/D,KAAK+C,IAAI,CAACgB,YAAY;QAE5B,kBAAkB;QAClB,MAAM/D,KAAKkD,KAAK,CAACF;QAEjB,sBAAsB;QACtB,MAAMZ,IAAAA,eAAO,EAAC;YACZC,OAAO9B,WAAW4C,oBAAoB,CACpC,mBACAd,OAAOe,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRE,MAAMlB,OAAOmB,gBAAgB,CAAC;YAChC;QAEJ;QAEA,yBAAyB;QACzB,MAAMpB,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACmB,SAAS,CAAC,kCAAkCjB,iBAAiB;QAC7E;IACF;AACF"}