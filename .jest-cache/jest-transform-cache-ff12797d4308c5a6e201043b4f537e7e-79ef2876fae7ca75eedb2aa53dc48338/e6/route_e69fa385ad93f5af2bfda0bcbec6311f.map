{"version":3,"names":["GET","cov_99w0kl2h2","f","s","POST","retryOnPreparedStatementError","queryFn","maxRetries","b","attempt","error","isPreparedStatementError","code","message","includes","console","log","Promise","resolve","setTimeout","Error","CACHE_DURATION","ITEMS_PER_PAGE","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","_performance","measureAsync","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","status","userId","getUserIdFromToken","user","_prisma","default","findUnique","where","id","select","shopId","role","name","isFiltered","isAdmin","userShopId","userRole","searchParams","nextUrl","page","parseInt","get","limit","Math","min","toString","paymentMethod","searchQuery","cacheKey","_cache","cacheService","generateKey","CACHE_CONFIG","KEYS","INVOICES","search","cachedData","response","headers","set","whereClause","buildShopFilter","JSON","stringify","OR","invoiceNumber","contains","mode","customer","numericQuery","parseFloat","isNaN","push","total","invoices","totalInvoices","statistics","all","invoice","findMany","invoiceDate","dueDate","notes","createdAt","updatedAt","email","phone","shop","location","contact_person","address_line1","address_line2","city","state","postal_code","country","_count","items","orderBy","skip","take","count","aggregate","_sum","gte","Date","getFullYear","getMonth","lt","totalOutstanding","paidThisMonth","overdueCount","formattedInvoices","map","rest","customerName","customerId","itemCount","responseData","totalPages","ceil","currentPage","meta","shopFiltered","TTL","success","String","endpoint","salesManageResult","salesCreateShopResult","invoiceData","shopAccessResult","validateShopAccess","hasAccess","createAccessDeniedResponse","sendSms","invoiceDetails","Array","isArray","length","i","item","productId","productIdType","quantity","quantityType","price","priceType","hasProductId","hasQuantity","quantityValue","quantityCheck","itemDetails","index","quantityPositive","warn","customerType","creditLimit","totalAmount","reduce","sum","customPrice","outstandingInvoices","in","currentBalance","newTotalBalance","toLocaleString","details","invoiceAmount","exceedAmount","finalInvoiceNumber","now","floor","random","inventoryUpdatesForEvent","$transaction","tx","createdInvoice","create","data","createdBy","totalProfit","profitMargin","productIds","inventoryItems","inventoryItem","shopSpecificCost","productCostMap","Map","missingProductIds","filter","has","fallbackProducts","product","weightedAverageCost","forEach","p","calculatedTotalInvoiceAmount","invoiceItemsData","costPrice","itemSellingTotal","totalItemCost","itemProfit","invoiceId","profit","invoiceItem","createMany","subtotal","discountAmount","discountType","discountValue","netTotal","update","allInventoryItems","inventoryByProduct","totalInventory","inv","inventoryUpdates","remainingQuantity","deductAmount","oldShopQuantity","newShopQuantity","newQuantity","oldQuantity","include","timeout","smsError","invalidateInvoices","invalidateInventory","auditService","_auditService","AuditService","getInstance","logAction","action","entity","entityId","itemsCount"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { revalidateTag } from 'next/cache';\nimport prisma, { executeQuery } from '@/lib/prisma';\n\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { measureAsync } from '@/lib/performance';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n// Note: smsService import commented out as it may not be available\n// import { smsService } from '@/lib/sms';\nimport { AuditService } from '@/services/auditService';\n\n// Helper function to retry on prepared statement errors\nasync function retryOnPreparedStatementError<T>(queryFn: () => Promise<T>, maxRetries: number = 3): Promise<T> {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await queryFn();\n        } catch (error: any) {\n            const isPreparedStatementError = \n                error?.code === '26000' ||  // prepared statement does not exist\n                error?.code === '42P05' ||  // prepared statement already exists\n                error?.message?.includes('prepared statement') ||\n                error?.message?.includes('does not exist');\n            \n            if (isPreparedStatementError && attempt < maxRetries) {\n                console.log(`Prepared statement error detected (attempt ${attempt}/${maxRetries}), retrying...`);\n                // Wait a bit before retrying\n                await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n}\nconst CACHE_DURATION = 60; // 60 seconds\n\nconst ITEMS_PER_PAGE = 15;\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('invoices-api', async () => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'sales:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: authResult.message }, { status: 401 });\n            }\n\n            // Get user ID from token for filtering\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            // Get user details to check role\n            const user = await prisma.user.findUnique({\n                where: { id: userId },\n                select: {\n                    id: true,\n                    shopId: true,\n                    role: {\n                        select: { name: true }\n                    }\n                }\n            });\n\n            if (!user) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            console.log('Invoices API - Shop context:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                isAdmin: context.isAdmin,\n                userShopId: context.userShopId,\n                userId: user.id,\n                userRole: user.role?.name\n            });\n\n            const searchParams = request.nextUrl.searchParams;\n            const page = parseInt(searchParams.get('page') || '1', 10);\n            const limit = Math.min(parseInt(searchParams.get('limit') || ITEMS_PER_PAGE.toString(), 10), 50); // Cap at 50\n            const status = searchParams.get('status') || '';\n            const paymentMethod = searchParams.get('paymentMethod') || '';\n            const searchQuery = searchParams.get('search') || '';\n            const shopId = searchParams.get('shopId');\n\n            // Use the admin status from the shop access control middleware for consistency\n            const isAdmin = context.isAdmin;\n            \n            const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.INVOICES, {\n                page,\n                limit,\n                status,\n                paymentMethod,\n                search: searchQuery,\n                shopId: isAdmin ? shopId : context.shopId, // Use context's shopId for non-admins\n                userId: isAdmin ? 'admin' : user.id // Admin sees all, others see user-specific\n            });\n\n            // Try to get from cache first\n            const cachedData = await cacheService.get(cacheKey);\n            if (cachedData) {\n                const response = NextResponse.json(cachedData);\n                response.headers.set('X-Cache', 'HIT');\n                response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n                return response;\n            }\n\n            // Build optimized where clause with shop filtering\n            let whereClause: any = ShopAccessControl.buildShopFilter(context);\n\n            // Shop filtering is now primarily handled by the middleware.\n            if (status) whereClause.status = status;\n            if (paymentMethod) whereClause.paymentMethod = paymentMethod;\n            \n            // For non-admins, the shopId from their token is already applied by buildShopFilter.\n            // We only allow an admin to override it with a query parameter.\n            if (isAdmin && shopId && shopId !== 'all') {\n                whereClause.shopId = shopId;\n            } else if (!isAdmin) {\n                // Enforce the user's shopId from the token context for all non-admin users\n                whereClause.shopId = context.shopId;\n            }\n\n            console.log('Invoices where clause:', JSON.stringify(whereClause, null, 2));\n            if (searchQuery) {\n                whereClause.OR = [\n                    { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                    { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n                ];\n\n                // Handle numeric search for total amount\n                const numericQuery = parseFloat(searchQuery);\n                if (!isNaN(numericQuery)) {\n                    whereClause.OR.push({ total: numericQuery });\n                }\n            }\n\n            // Execute queries in parallel for better performance\n            const [invoices, totalInvoices, statistics] = await Promise.all([\n                measureAsync('invoices-main-query', () =>\n                    // Main invoices query with optimized select\n                    prisma.invoice.findMany({\n                        where: whereClause,\n                        select: {\n                            id: true,\n                            invoiceNumber: true,\n                            total: true,\n                            status: true,\n                            paymentMethod: true,\n                            invoiceDate: true,\n                            dueDate: true,\n                            notes: true,\n                            createdAt: true,\n                            updatedAt: true,\n                            customer: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    email: true,\n                                    phone: true\n                                }\n                            },\n                            shop: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    location: true,\n                                    contact_person: true,\n                                    phone: true,\n                                    email: true,\n                                    address_line1: true,\n                                    address_line2: true,\n                                    city: true,\n                                    state: true,\n                                    postal_code: true,\n                                    country: true\n                                }\n                            },\n                            _count: {\n                                select: { items: true }\n                            }\n                        },\n                        orderBy: {\n                            createdAt: 'desc',\n                        },\n                        skip: (page - 1) * limit,\n                        take: limit,\n                    })\n                ),\n\n                // Total count query\n                measureAsync('invoices-count-query', () =>\n                    prisma.invoice.count({ where: whereClause })\n                ),\n\n                // Statistics queries in parallel\n                measureAsync('invoices-stats-query', () =>\n                    Promise.all([\n                        // Total outstanding (pending invoices)\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'pending'\n                            }\n                        }),\n\n                        // Paid this month\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'paid',\n                                createdAt: {\n                                    gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n                                }\n                            }\n                        }),\n\n                        // Overdue count\n                        prisma.invoice.count({\n                            where: {\n                                ...whereClause,\n                                status: 'pending',\n                                dueDate: {\n                                    lt: new Date()\n                                }\n                            }\n                        })\n                    ])\n                )\n            ]);\n\n            const [totalOutstanding, paidThisMonth, overdueCount] = statistics;\n\n            // Format response with optimized data structure\n            const formattedInvoices = invoices.map(invoice => {\n                const { _count, customer, shop, ...rest } = invoice;\n                return {\n                    ...rest,\n                    customer,\n                    shop,\n                    customerName: customer?.name || 'Unknown Customer',\n                    customerId: customer?.id,\n                    itemCount: _count.items,\n                };\n            });\n\n            const responseData = {\n                invoices: formattedInvoices,\n                totalPages: Math.ceil(totalInvoices / limit),\n                currentPage: page,\n                total: totalInvoices,\n                statistics: {\n                    totalOutstanding: totalOutstanding._sum.total || 0,\n                    paidThisMonth: paidThisMonth._sum.total || 0,\n                    overdueCount\n                },\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            };\n\n            // Cache the response\n            await cacheService.set(cacheKey, responseData, CACHE_CONFIG.TTL.INVOICES);\n\n            const response = NextResponse.json(responseData);\n            response.headers.set('X-Cache', 'MISS');\n            response.headers.set('Cache-Control', 'public, s-maxage=60, stale-while-revalidate=120');\n\n            return response;\n\n        } catch (error) {\n            console.error('Error fetching invoices:', error);\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Error fetching invoices',\n                    error: error instanceof Error ? error.message : String(error),\n                },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'invoices' });\n});\n\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('create-invoice-api', async () => {\n        try {\n            // Validate token and permissions\n            const salesManageResult = await validateTokenPermission(request, 'sales:manage');\n            const salesCreateShopResult = await validateTokenPermission(request, 'sales:create:shop');\n            \n            if (!salesManageResult.isValid && !salesCreateShopResult.isValid) {\n                return NextResponse.json({ \n                    error: 'Permission denied: sales:manage or sales:create:shop required' \n                }, { status: 403 });\n            }\n\n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ \n                    error: 'Unable to get user information from token' \n                }, { status: 401 });\n            }\n\n            const invoiceData = await request.json();\n            \n            // If user only has sales:create:shop permission, validate shop restriction\n            if (!salesManageResult.isValid && salesCreateShopResult.isValid) {\n                // User can only create sales for their assigned shop\n                if (!invoiceData.shopId) {\n                    return NextResponse.json({\n                        success: false,\n                        message: 'Shop ID is required for sales creation'\n                    }, { status: 400 });\n                }\n\n                // Validate that the user can only create invoices for their shop\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceData.shopId);\n                if (!shopAccessResult.hasAccess || shopAccessResult.isAdmin) {\n                    // If user is admin, they should have sales:manage, not sales:create:shop\n                    if (shopAccessResult.isAdmin) {\n                        return NextResponse.json({\n                            success: false,\n                            message: 'Admin users should use sales:manage permission'\n                        }, { status: 403 });\n                    }\n                    return ShopAccessControl.createAccessDeniedResponse(\n                        shopAccessResult.error || 'Cannot create sales for this shop'\n                    );\n                }\n            }\n            console.log('Invoice data received:', JSON.stringify(invoiceData, null, 2));\n            const { sendSms, invoiceNumber, ...invoiceDetails } = invoiceData;\n            console.log('Invoice details after destructuring:', JSON.stringify(invoiceDetails, null, 2));\n            console.log('Invoice number from request:', invoiceNumber);\n            \n            // Server-side validation to prevent empty invoices\n            if (!invoiceDetails.items || !Array.isArray(invoiceDetails.items) || invoiceDetails.items.length === 0) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'Invoice must contain at least one item',\n                        error: 'No items provided'\n                    },\n                    { status: 400 }\n                );\n            }\n\n            // Validate that all items have required fields\n            for (let i = 0; i < invoiceDetails.items.length; i++) {\n                const item = invoiceDetails.items[i];\n                console.log(`Validating item ${i}:`, {\n                    productId: item.productId,\n                    productIdType: typeof item.productId,\n                    quantity: item.quantity,\n                    quantityType: typeof item.quantity,\n                    price: item.price,\n                    priceType: typeof item.price\n                });\n                \n                if (!item.productId || !item.quantity || item.quantity <= 0) {\n                    console.log(`Item validation failed for item ${i}:`, {\n                        hasProductId: !!item.productId,\n                        hasQuantity: !!item.quantity,\n                        quantityValue: item.quantity,\n                        quantityCheck: item.quantity <= 0\n                    });\n                    return NextResponse.json(\n                        {\n                            success: false,\n                            message: `Item ${i + 1}: All items must have valid productId and quantity greater than 0`,\n                            error: 'Invalid item data',\n                            itemDetails: {\n                                index: i,\n                                productId: item.productId,\n                                quantity: item.quantity,\n                                hasProductId: !!item.productId,\n                                hasQuantity: !!item.quantity,\n                                quantityPositive: item.quantity > 0\n                            }\n                        },\n                        { status: 400 }\n                    );\n                }\n            }\n\n            // Validate customer is provided (optional but recommended)\n            if (!invoiceDetails.customerId) {\n                console.warn('Invoice created without customer ID');\n            }\n\n            // Credit limit validation for wholesale customers\n            if (invoiceDetails.customerId) {\n                const customer = await retryOnPreparedStatementError(() => \n                    prisma.customer.findUnique({\n                        where: { id: invoiceDetails.customerId },\n                        select: { \n                            customerType: true, \n                            creditLimit: true,\n                            name: true\n                        }\n                    })\n                );\n\n                if (customer && customer.customerType === 'wholesale' && customer.creditLimit) {\n                    // Calculate total invoice amount\n                    const totalAmount = invoiceDetails.items.reduce((sum: number, item: any) => {\n                        const price = parseFloat(item.customPrice) || parseFloat(item.price) || 0;\n                        const quantity = parseInt(item.quantity, 10) || 0;\n                        return sum + (price * quantity);\n                    }, 0);\n\n                    // Get customer's current outstanding balance\n                    const outstandingInvoices = await retryOnPreparedStatementError(() =>\n                        prisma.invoice.aggregate({\n                            where: {\n                                customerId: invoiceDetails.customerId,\n                                status: { in: ['pending', 'overdue'] }\n                            },\n                            _sum: { total: true }\n                        })\n                    );\n\n                    const currentBalance = outstandingInvoices._sum.total || 0;\n                    const newTotalBalance = currentBalance + totalAmount;\n\n                    if (newTotalBalance > customer.creditLimit) {\n                        return NextResponse.json(\n                            {\n                                success: false,\n                                message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,\n                                error: 'Credit limit exceeded',\n                                details: {\n                                    currentBalance,\n                                    invoiceAmount: totalAmount,\n                                    creditLimit: customer.creditLimit,\n                                    exceedAmount: newTotalBalance - customer.creditLimit\n                                }\n                            },\n                            { status: 400 }\n                        );\n                    }\n                }\n            }\n            \n            // Generate invoice number if missing\n            const finalInvoiceNumber = invoiceNumber || `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n            console.log('Final invoice number to use:', finalInvoiceNumber);\n\n            // Validate shop access for the target shop (only if shopId is provided)\n            if (invoiceDetails.shopId) {\n                console.log('Validating shop access for shopId:', invoiceDetails.shopId);\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceDetails.shopId);\n                console.log('Shop access result:', shopAccessResult);\n                if (!shopAccessResult.hasAccess) {\n                    console.log('Shop access denied:', shopAccessResult.error);\n                    return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n                }\n                console.log('Shop access granted');\n            } else {\n                console.log('No shopId provided, skipping shop access validation');\n            }\n\n            const inventoryUpdatesForEvent: Array<{ productId: number, shopId: string, newQuantity: number, oldQuantity: number }> = [];\n\n            const invoice = await measureAsync('invoice-transaction', () =>\n                prisma.$transaction(\n                    async (tx) => {\n                        const createdInvoice = await tx.invoice.create({\n                            data: {\n                                invoiceNumber: finalInvoiceNumber,\n                                customerId: invoiceDetails.customerId || null,\n                                total: 0, // Will be updated after items are processed\n                                status: 'pending',\n                                paymentMethod: invoiceDetails.paymentMethod || 'Cash',\n                                invoiceDate: invoiceDetails.invoiceDate ? new Date(invoiceDetails.invoiceDate) : new Date(),\n                                dueDate: invoiceDetails.dueDate ? new Date(invoiceDetails.dueDate) : null,\n                                notes: invoiceDetails.notes || '',\n                                shopId: invoiceDetails.shopId || null,\n                                createdBy: userId,\n                                totalProfit: 0, // Will be updated after items are processed\n                                profitMargin: 0 // Will be updated after items are processed\n                            },\n                        });\n\n                        // Removed automatic payment creation for cash invoices\n                        // Users will manually record payments when they actually receive them\n\n                        if (invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Get shop-specific costs for profit calculation instead of global weighted average\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const inventoryItems = await tx.inventoryItem.findMany({\n                                where: { \n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                select: { productId: true, shopSpecificCost: true }\n                            });\n\n                            // Create a map of productId to shop-specific cost\n                            const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                            \n                            // For products not found in inventory, fallback to global weighted average\n                            const missingProductIds = productIds.filter((id: any) => !productCostMap.has(id));\n                            if (missingProductIds.length > 0) {\n                                const fallbackProducts = await tx.product.findMany({\n                                    where: { id: { in: missingProductIds } },\n                                    select: { id: true, weightedAverageCost: true }\n                                });\n                                fallbackProducts.forEach(p => {\n                                    productCostMap.set(p.id, p.weightedAverageCost || 0);\n                                });\n                            }\n\n                            let calculatedTotalInvoiceAmount = 0;\n                            \n                            // Batch create invoice items for better performance\n                            const invoiceItemsData = invoiceDetails.items.map((item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                \n                                calculatedTotalInvoiceAmount += itemSellingTotal;\n                                \n                                return {\n                                    invoiceId: createdInvoice.id,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                };\n                            });\n                            \n                            // Batch insert all invoice items\n                            await tx.invoiceItem.createMany({\n                                data: invoiceItemsData\n                            });\n\n                            // Calculate and update total profit and profit margin\n                            const totalProfit = invoiceDetails.items.reduce((sum: number, item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                return sum + itemProfit;\n                            }, 0);\n\n                            const profitMargin = calculatedTotalInvoiceAmount > 0 ? (totalProfit / calculatedTotalInvoiceAmount) * 100 : 0;\n\n                            // Apply discount if provided\n                            let subtotal = calculatedTotalInvoiceAmount;\n                            let discountAmount = 0;\n                            if (invoiceDetails.discountType && invoiceDetails.discountValue > 0) {\n                                discountAmount = invoiceDetails.discountType === 'percent'\n                                    ? (subtotal * invoiceDetails.discountValue) / 100\n                                    : invoiceDetails.discountValue;\n                            }\n                            let netTotal = subtotal - discountAmount;\n\n                            await tx.invoice.update({\n                                where: { id: createdInvoice.id },\n                                data: {\n                                    discountType: invoiceDetails.discountType,\n                                    discountValue: invoiceDetails.discountValue,\n                                    total: netTotal,\n                                    totalProfit: totalProfit,\n                                    profitMargin: profitMargin\n                                }\n                            });\n                        }\n\n                        // Optimized inventory check and update for the selected shop\n                        if (invoiceDetails.shopId && invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Batch fetch all inventory items for all products in one query\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const allInventoryItems = await tx.inventoryItem.findMany({\n                                where: {\n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                orderBy: { updatedAt: 'asc' },\n                                select: { id: true, productId: true, quantity: true, updatedAt: true, shopId: true }\n                            });\n                            \n                            // Group inventory items by product ID\n                            const inventoryByProduct = new Map<number, typeof allInventoryItems>();\n                            allInventoryItems.forEach(item => {\n                                if (!inventoryByProduct.has(item.productId)) {\n                                    inventoryByProduct.set(item.productId, []);\n                                }\n                                inventoryByProduct.get(item.productId)!.push(item);\n                            });\n                            \n                            // Validate inventory availability for all items first\n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                if (inventoryItems.length === 0) {\n                                    throw new Error(`No inventory for product ID ${productId} in the selected shop`);\n                                }\n                                const totalInventory = inventoryItems.reduce((sum, inv) => sum + inv.quantity, 0);\n                                if (totalInventory < item.quantity) {\n                                    throw new Error(`Insufficient inventory for product ID ${productId} in the selected shop. Available: ${totalInventory}, Required: ${item.quantity}`);\n                                }\n                            }\n                            \n                            // Process inventory updates using FIFO\n                            const inventoryUpdates: Array<{ id: number; quantity: number }> = [];\n                            \n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                let remainingQuantity = item.quantity;\n\n                                for (const inventoryItem of inventoryItems) {\n                                    if (remainingQuantity <= 0) break;\n                                    if (inventoryItem.quantity > 0) {\n                                        const deductAmount = Math.min(remainingQuantity, inventoryItem.quantity);\n                                        const oldShopQuantity = inventoryItem.quantity;\n                                        const newShopQuantity = inventoryItem.quantity - deductAmount;\n\n                                        inventoryUpdates.push({\n                                            id: inventoryItem.id,\n                                            quantity: newShopQuantity\n                                        });\n\n                                        inventoryUpdatesForEvent.push({\n                                            productId: productId,\n                                            shopId: inventoryItem.shopId,\n                                            newQuantity: newShopQuantity,\n                                            oldQuantity: oldShopQuantity\n                                        });\n                                        remainingQuantity -= deductAmount;\n                                    }\n                                }\n                            }\n\n                            // Batch update inventory items\n                            if (inventoryUpdates.length > 0) {\n                                await Promise.all(\n                                    inventoryUpdates.map(update =>\n                                        tx.inventoryItem.update({\n                                            where: { id: update.id },\n                                            data: { quantity: update.quantity, updatedAt: new Date() }\n                                        })\n                                    )\n                                );\n                            }\n                        }\n                        return tx.invoice.findUnique({\n                            where: { id: createdInvoice.id },\n                            include: { customer: true, items: true }\n                        });\n                    },\n                    { timeout: 30000 }\n                )\n            );\n\n            // Real-time updates now handled by polling system\n            console.log(`Invoice ${invoice?.id} created successfully`);\n\n            if (sendSms) {\n                try {\n                    // SMS service temporarily disabled\n                    console.log('SMS notification requested but service is not available');\n                    // TODO: Implement SMS service\n                    // await smsService.init();\n                    // if (smsService.isConfigured()) {\n                    //     smsService.sendInvoiceNotification(invoice!.id)\n                    //         .then((result: any) => {\n                    //             if (result.status >= 200 && result.status < 300) {\n                    //                 console.log('SMS notification sent successfully');\n                    //             } else {\n                    //                 console.warn('Failed to send SMS notification:', result.message);\n                    //             }\n                    //         })\n                    //         .catch((error: any) => {\n                    //             console.error('Error sending SMS notification:', error);\n                    //         });\n                    // }\n                } catch (smsError) {\n                    console.error('SMS notification error:', smsError);\n                }\n            }\n\n            // Invalidate related caches\n            await Promise.all([\n                cacheService.invalidateInvoices(),\n                cacheService.invalidateInventory()\n            ]);\n\n            const auditService = AuditService.getInstance();\n            await auditService.logAction({\n                userId,\n                action: 'CREATE',\n                entity: 'Invoice',\n                entityId: invoice!.id,\n                details: {\n                    invoiceNumber: invoice!.invoiceNumber,\n                    customerId: invoice!.customerId,\n                    total: invoice!.total,\n                    status: invoice!.status,\n                    shopId: invoice!.shopId,\n                    itemsCount: invoice!.items.length\n                }\n            });\n\n            return NextResponse.json(\n                { success: true, message: 'Invoice created successfully', data: invoice },\n                { status: 201 }\n            );\n        } catch (error) {\n            console.error('Error creating invoice:', error);\n            return NextResponse.json(\n                { success: false, message: 'Error creating invoice', error: error instanceof Error ? error.message : String(error) },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'create-invoice' });\n});"],"mappingsuCaA,GAAG,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAHH,GAAA;;EA0PAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;iCAjS6B;;;iCACkB;;;uEAEvB;;;iCAEH;;;kCACL;;;kCACc;;;kCAGd;;;;;;;;;;;;;;;AAE7B;AACA,eAAeC,8BAAiCC,OAAyB,EAAEC,UAAA;AAAA;AAAA,CAAAN,aAAA,GAAAO,CAAA,UAAqB,CAAC;EAAA;EAAAP,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC7F,KAAK,IAAIM,OAAA;EAAA;EAAA,CAAAR,aAAA,GAAAE,CAAA,QAAU,IAAGM,OAAA,IAAWF,UAAA,EAAYE,OAAA,IAAW;IAAA;IAAAR,aAAA,GAAAE,CAAA;IACpD,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACA,OAAO,MAAMG,OAAA;IACjB,EAAE,OAAOI,KAAA,EAAY;MACjB,MAAMC,wBAAA;MAAA;MAAA,CAAAV,aAAA,GAAAE,CAAA;MACF;MAAA,CAAAF,aAAA,GAAAO,CAAA,UAAAE,KAAA,EAAOE,IAAA,KAAS;MAAA;MAAA,CAAAX,aAAA,GAAAO,CAAA;MAAY;MAC5BE,KAAA,EAAOE,IAAA,KAAS;MAAA;MAAA,CAAAX,aAAA,GAAAO,CAAA;MAAY;MAC5BE,KAAA,EAAOG,OAAA,EAASC,QAAA,CAAS;MAAA;MAAA,CAAAb,aAAA,GAAAO,CAAA,UACzBE,KAAA,EAAOG,OAAA,EAASC,QAAA,CAAS;MAAA;MAAAb,aAAA,GAAAE,CAAA;MAE7B;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,UAAAG,wBAAA;MAAA;MAAA,CAAAV,aAAA,GAAAO,CAAA,UAA4BC,OAAA,GAAUF,UAAA,GAAY;QAAA;QAAAN,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAClDY,OAAA,CAAQC,GAAG,CAAC,8CAA8CP,OAAA,IAAWF,UAAA,gBAA0B;QAC/F;QAAA;QAAAN,aAAA,GAAAE,CAAA;QACA,MAAM,IAAIc,OAAA,CAAQC,OAAA,IAAW;UAAA;UAAAjB,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAE,CAAA;UAAA,OAAAgB,UAAA,CAAWD,OAAA,EAAS,MAAMT,OAAA;QAAA;QAAA;QAAAR,aAAA,GAAAE,CAAA;QACvD;MACJ;MAAA;MAAA;QAAAF,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACA,MAAMO,KAAA;IACV;EACJ;EAAA;EAAAT,aAAA,GAAAE,CAAA;EACA,MAAM,IAAIiB,KAAA,CAAM;AACpB;AACA,MAAMC,cAAA;AAAA;AAAA,CAAApB,aAAA,GAAAE,CAAA,QAAiB,KAAI;AAE3B,MAAMmB,cAAA;AAAA;AAAA,CAAArB,aAAA,GAAAE,CAAA,QAAiB;AAEhB,MAAMH,GAAA;AAAA;AAAA,CAAAC,aAAA,GAAAE,CAAA,QAAMoB,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAA1B,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC7E,OAAO,IAAAyB,YAAA,CAAAC,YAAY,EAAC,gBAAgB;IAAA;IAAA5B,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAChC,IAAI;MACA;MACA,MAAM2B,UAAA;MAAA;MAAA,CAAA7B,aAAA,GAAAE,CAAA,QAAa,MAAM,IAAA4B,KAAA,CAAAC,uBAAuB,EAACN,OAAA,EAAS;MAAA;MAAAzB,aAAA,GAAAE,CAAA;MAC1D,IAAI,CAAC2B,UAAA,CAAWG,OAAO,EAAE;QAAA;QAAAhC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACrB,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UAAE1B,KAAA,EAAOoB,UAAA,CAAWjB;QAAQ,GAAG;UAAEwB,MAAA,EAAQ;QAAI;MAC1E;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,MAAM8B,MAAA;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAS,MAAM,IAAA4B,KAAA,CAAAQ,kBAAkB,EAACb,OAAA;MAAA;MAAAzB,aAAA,GAAAE,CAAA;MACxC,IAAI,CAACmC,MAAA,EAAQ;QAAA;QAAArC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACT,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UAAE1B,KAAA,EAAO;QAAiB,GAAG;UAAE2B,MAAA,EAAQ;QAAI;MACxE;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,MAAMgC,IAAA;MAAA;MAAA,CAAAvC,aAAA,GAAAE,CAAA,QAAO,MAAMsC,OAAA,CAAAC,OAAM,CAACF,IAAI,CAACG,UAAU,CAAC;QACtCC,KAAA,EAAO;UAAEC,EAAA,EAAIP;QAAO;QACpBQ,MAAA,EAAQ;UACJD,EAAA,EAAI;UACJE,MAAA,EAAQ;UACRC,IAAA,EAAM;YACFF,MAAA,EAAQ;cAAEG,IAAA,EAAM;YAAK;UACzB;QACJ;MACJ;MAAA;MAAAhD,aAAA,GAAAE,CAAA;MAEA,IAAI,CAACqC,IAAA,EAAM;QAAA;QAAAvC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACP,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UAAE1B,KAAA,EAAO;QAAiB,GAAG;UAAE2B,MAAA,EAAQ;QAAI;MACxE;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAEAY,OAAA,CAAQC,GAAG,CAAC,gCAAgC;QACxC+B,MAAA,EAAQpB,OAAA,CAAQoB,MAAM;QACtBG,UAAA,EAAYvB,OAAA,CAAQuB,UAAU;QAC9BC,OAAA,EAASxB,OAAA,CAAQwB,OAAO;QACxBC,UAAA,EAAYzB,OAAA,CAAQyB,UAAU;QAC9Bd,MAAA,EAAQE,IAAA,CAAKK,EAAE;QACfQ,QAAA,EAAUb,IAAA,CAAKQ,IAAI,EAAEC;MACzB;MAEA,MAAMK,YAAA;MAAA;MAAA,CAAArD,aAAA,GAAAE,CAAA,QAAeuB,OAAA,CAAQ6B,OAAO,CAACD,YAAY;MACjD,MAAME,IAAA;MAAA;MAAA,CAAAvD,aAAA,GAAAE,CAAA,QAAOsD,QAAA;MAAS;MAAA,CAAAxD,aAAA,GAAAO,CAAA,UAAA8C,YAAA,CAAaI,GAAG,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAO,CAAA,UAAW,MAAK;MACvD,MAAMmD,KAAA;MAAA;MAAA,CAAA1D,aAAA,GAAAE,CAAA,QAAQyD,IAAA,CAAKC,GAAG,CAACJ,QAAA;MAAS;MAAA,CAAAxD,aAAA,GAAAO,CAAA,WAAA8C,YAAA,CAAaI,GAAG,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAO,CAAA,WAAYc,cAAA,CAAewC,QAAQ,KAAI,KAAK,MAAK;MAClG,MAAMzB,MAAA;MAAA;MAAA,CAAApC,aAAA,GAAAE,CAAA;MAAS;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA8C,YAAA,CAAaI,GAAG,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAO,CAAA,WAAa;MAC7C,MAAMuD,aAAA;MAAA;MAAA,CAAA9D,aAAA,GAAAE,CAAA;MAAgB;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA8C,YAAA,CAAaI,GAAG,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAO,CAAA,WAAoB;MAC3D,MAAMwD,WAAA;MAAA;MAAA,CAAA/D,aAAA,GAAAE,CAAA;MAAc;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA8C,YAAA,CAAaI,GAAG,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAO,CAAA,WAAa;MAClD,MAAMuC,MAAA;MAAA;MAAA,CAAA9C,aAAA,GAAAE,CAAA,QAASmD,YAAA,CAAaI,GAAG,CAAC;MAEhC;MACA,MAAMP,OAAA;MAAA;MAAA,CAAAlD,aAAA,GAAAE,CAAA,QAAUwB,OAAA,CAAQwB,OAAO;MAE/B,MAAMc,QAAA;MAAA;MAAA,CAAAhE,aAAA,GAAAE,CAAA,QAAW+D,MAAA,CAAAC,YAAY,CAACC,WAAW,CAACF,MAAA,CAAAG,YAAY,CAACC,IAAI,CAACC,QAAQ,EAAE;QAClEf,IAAA;QACAG,KAAA;QACAtB,MAAA;QACA0B,aAAA;QACAS,MAAA,EAAQR,WAAA;QACRjB,MAAA,EAAQI,OAAA;QAAA;QAAA,CAAAlD,aAAA,GAAAO,CAAA,WAAUuC,MAAA;QAAA;QAAA,CAAA9C,aAAA,GAAAO,CAAA,WAASmB,OAAA,CAAQoB,MAAM;QACzCT,MAAA,EAAQa,OAAA;QAAA;QAAA,CAAAlD,aAAA,GAAAO,CAAA,WAAU;QAAA;QAAA,CAAAP,aAAA,GAAAO,CAAA,WAAUgC,IAAA,CAAKK,EAAE,EAAC;MACxC;MAEA;MACA,MAAM4B,UAAA;MAAA;MAAA,CAAAxE,aAAA,GAAAE,CAAA,QAAa,MAAM+D,MAAA,CAAAC,YAAY,CAACT,GAAG,CAACO,QAAA;MAAA;MAAAhE,aAAA,GAAAE,CAAA;MAC1C,IAAIsE,UAAA,EAAY;QAAA;QAAAxE,aAAA,GAAAO,CAAA;QACZ,MAAMkE,QAAA;QAAA;QAAA,CAAAzE,aAAA,GAAAE,CAAA,QAAW+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACqC,UAAA;QAAA;QAAAxE,aAAA,GAAAE,CAAA;QACnCuE,QAAA,CAASC,OAAO,CAACC,GAAG,CAAC,WAAW;QAAA;QAAA3E,aAAA,GAAAE,CAAA;QAChCuE,QAAA,CAASC,OAAO,CAACC,GAAG,CAAC,iBAAiB,oBAAoBvD,cAAA,6BAA2C;QAAA;QAAApB,aAAA,GAAAE,CAAA;QACrG,OAAOuE,QAAA;MACX;MAAA;MAAA;QAAAzE,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,IAAIqE,WAAA;MAAA;MAAA,CAAA5E,aAAA,GAAAE,CAAA,QAAmBoB,eAAA,CAAAC,iBAAiB,CAACsD,eAAe,CAACnD,OAAA;MAEzD;MAAA;MAAA1B,aAAA,GAAAE,CAAA;MACA,IAAIkC,MAAA,EAAQ;QAAA;QAAApC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA0E,WAAA,CAAYxC,MAAM,GAAGA,MAAA;MAAA;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACjC,IAAI4D,aAAA,EAAe;QAAA;QAAA9D,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA0E,WAAA,CAAYd,aAAa,GAAGA,aAAA;MAAA;MAAA;MAAA;QAAA9D,aAAA,GAAAO,CAAA;MAAA;MAE/C;MACA;MAAAP,aAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA2C,OAAA;MAAA;MAAA,CAAAlD,aAAA,GAAAO,CAAA,WAAWuC,MAAA;MAAA;MAAA,CAAA9C,aAAA,GAAAO,CAAA,WAAUuC,MAAA,KAAW,QAAO;QAAA;QAAA9C,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACvC0E,WAAA,CAAY9B,MAAM,GAAGA,MAAA;MACzB,OAAO;QAAA;QAAA9C,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA,IAAI,CAACgD,OAAA,EAAS;UAAA;UAAAlD,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACjB;UACA0E,WAAA,CAAY9B,MAAM,GAAGpB,OAAA,CAAQoB,MAAM;QACvC;QAAA;QAAA;UAAA9C,aAAA,GAAAO,CAAA;QAAA;MAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAEAY,OAAA,CAAQC,GAAG,CAAC,0BAA0B+D,IAAA,CAAKC,SAAS,CAACH,WAAA,EAAa,MAAM;MAAA;MAAA5E,aAAA,GAAAE,CAAA;MACxE,IAAI6D,WAAA,EAAa;QAAA;QAAA/D,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACb0E,WAAA,CAAYI,EAAE,GAAG,CACb;UAAEC,aAAA,EAAe;YAAEC,QAAA,EAAUnB,WAAA;YAAaoB,IAAA,EAAM;UAAc;QAAE,GAChE;UAAEC,QAAA,EAAU;YAAEpC,IAAA,EAAM;cAAEkC,QAAA,EAAUnB,WAAA;cAAaoB,IAAA,EAAM;YAAc;UAAE;QAAE,EACxE;QAED;QACA,MAAME,YAAA;QAAA;QAAA,CAAArF,aAAA,GAAAE,CAAA,QAAeoF,UAAA,CAAWvB,WAAA;QAAA;QAAA/D,aAAA,GAAAE,CAAA;QAChC,IAAI,CAACqF,KAAA,CAAMF,YAAA,GAAe;UAAA;UAAArF,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACtB0E,WAAA,CAAYI,EAAE,CAACQ,IAAI,CAAC;YAAEC,KAAA,EAAOJ;UAAa;QAC9C;QAAA;QAAA;UAAArF,aAAA,GAAAO,CAAA;QAAA;MACJ;MAAA;MAAA;QAAAP,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,MAAM,CAACmF,QAAA,EAAUC,aAAA,EAAeC,UAAA,CAAW;MAAA;MAAA,CAAA5F,aAAA,GAAAE,CAAA,QAAG,MAAMc,OAAA,CAAQ6E,GAAG,CAAC,CAC5D,IAAAlE,YAAA,CAAAC,YAAY,EAAC,uBAAuB,MAEhC;QAAA;QAAA5B,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QAAA;UADA;UACAsC,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACC,QAAQ,CAAC;YACpBpD,KAAA,EAAOiC,WAAA;YACP/B,MAAA,EAAQ;cACJD,EAAA,EAAI;cACJqC,aAAA,EAAe;cACfQ,KAAA,EAAO;cACPrD,MAAA,EAAQ;cACR0B,aAAA,EAAe;cACfkC,WAAA,EAAa;cACbC,OAAA,EAAS;cACTC,KAAA,EAAO;cACPC,SAAA,EAAW;cACXC,SAAA,EAAW;cACXhB,QAAA,EAAU;gBACNvC,MAAA,EAAQ;kBACJD,EAAA,EAAI;kBACJI,IAAA,EAAM;kBACNqD,KAAA,EAAO;kBACPC,KAAA,EAAO;gBACX;cACJ;cACAC,IAAA,EAAM;gBACF1D,MAAA,EAAQ;kBACJD,EAAA,EAAI;kBACJI,IAAA,EAAM;kBACNwD,QAAA,EAAU;kBACVC,cAAA,EAAgB;kBAChBH,KAAA,EAAO;kBACPD,KAAA,EAAO;kBACPK,aAAA,EAAe;kBACfC,aAAA,EAAe;kBACfC,IAAA,EAAM;kBACNC,KAAA,EAAO;kBACPC,WAAA,EAAa;kBACbC,OAAA,EAAS;gBACb;cACJ;cACAC,MAAA,EAAQ;gBACJnE,MAAA,EAAQ;kBAAEoE,KAAA,EAAO;gBAAK;cAC1B;YACJ;YACAC,OAAA,EAAS;cACLf,SAAA,EAAW;YACf;YACAgB,IAAA,EAAM,CAAC5D,IAAA,GAAO,KAAKG,KAAA;YACnB0D,IAAA,EAAM1D;UACV;QAAA;MAAA;MAGJ;MACA,IAAA/B,YAAA,CAAAC,YAAY,EAAC,wBAAwB,MACjC;QAAA;QAAA5B,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QAAA,OAAAsC,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACuB,KAAK,CAAC;UAAE1E,KAAA,EAAOiC;QAAY;MAAA;MAG9C;MACA,IAAAjD,YAAA,CAAAC,YAAY,EAAC,wBAAwB,MACjC;QAAA;QAAA5B,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QAAA,OAAAc,OAAA,CAAQ6E,GAAG,CAAC;QACR;QACArD,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACwB,SAAS,CAAC;UACrBC,IAAA,EAAM;YAAE9B,KAAA,EAAO;UAAK;UACpB9C,KAAA,EAAO;YACH,GAAGiC,WAAW;YACdxC,MAAA,EAAQ;UACZ;QACJ;QAEA;QACAI,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACwB,SAAS,CAAC;UACrBC,IAAA,EAAM;YAAE9B,KAAA,EAAO;UAAK;UACpB9C,KAAA,EAAO;YACH,GAAGiC,WAAW;YACdxC,MAAA,EAAQ;YACR+D,SAAA,EAAW;cACPqB,GAAA,EAAK,IAAIC,IAAA,CAAK,IAAIA,IAAA,GAAOC,WAAW,IAAI,IAAID,IAAA,GAAOE,QAAQ,IAAI;YACnE;UACJ;QACJ;QAEA;QACAnF,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACuB,KAAK,CAAC;UACjB1E,KAAA,EAAO;YACH,GAAGiC,WAAW;YACdxC,MAAA,EAAQ;YACR6D,OAAA,EAAS;cACL2B,EAAA,EAAI,IAAIH,IAAA;YACZ;UACJ;QACJ,GACH;MAAA,GAER;MAED,MAAM,CAACI,gBAAA,EAAkBC,aAAA,EAAeC,YAAA,CAAa;MAAA;MAAA,CAAA/H,aAAA,GAAAE,CAAA,QAAG0F,UAAA;MAExD;MACA,MAAMoC,iBAAA;MAAA;MAAA,CAAAhI,aAAA,GAAAE,CAAA,QAAoBwF,QAAA,CAASuC,GAAG,CAACnC,OAAA;QAAA;QAAA9F,aAAA,GAAAC,CAAA;QACnC,MAAM;UAAE+G,MAAM;UAAE5B,QAAQ;UAAEmB,IAAI;UAAE,GAAG2B;QAAA,CAAM;QAAA;QAAA,CAAAlI,aAAA,GAAAE,CAAA,QAAG4F,OAAA;QAAA;QAAA9F,aAAA,GAAAE,CAAA;QAC5C,OAAO;UACH,GAAGgI,IAAI;UACP9C,QAAA;UACAmB,IAAA;UACA4B,YAAA;UAAc;UAAA,CAAAnI,aAAA,GAAAO,CAAA,WAAA6E,QAAA,EAAUpC,IAAA;UAAA;UAAA,CAAAhD,aAAA,GAAAO,CAAA,WAAQ;UAChC6H,UAAA,EAAYhD,QAAA,EAAUxC,EAAA;UACtByF,SAAA,EAAWrB,MAAA,CAAOC;QACtB;MACJ;MAEA,MAAMqB,YAAA;MAAA;MAAA,CAAAtI,aAAA,GAAAE,CAAA,QAAe;QACjBwF,QAAA,EAAUsC,iBAAA;QACVO,UAAA,EAAY5E,IAAA,CAAK6E,IAAI,CAAC7C,aAAA,GAAgBjC,KAAA;QACtC+E,WAAA,EAAalF,IAAA;QACbkC,KAAA,EAAOE,aAAA;QACPC,UAAA,EAAY;UACRiC,gBAAA;UAAkB;UAAA,CAAA7H,aAAA,GAAAO,CAAA,WAAAsH,gBAAA,CAAiBN,IAAI,CAAC9B,KAAK;UAAA;UAAA,CAAAzF,aAAA,GAAAO,CAAA,WAAI;UACjDuH,aAAA;UAAe;UAAA,CAAA9H,aAAA,GAAAO,CAAA,WAAAuH,aAAA,CAAcP,IAAI,CAAC9B,KAAK;UAAA;UAAA,CAAAzF,aAAA,GAAAO,CAAA,WAAI;UAC3CwH;QACJ;QACAW,IAAA,EAAM;UACFC,YAAA,EAAcjH,OAAA,CAAQuB,UAAU;UAChCH,MAAA,EAAQpB,OAAA,CAAQoB;QACpB;MACJ;MAEA;MAAA;MAAA9C,aAAA,GAAAE,CAAA;MACA,MAAM+D,MAAA,CAAAC,YAAY,CAACS,GAAG,CAACX,QAAA,EAAUsE,YAAA,EAAcrE,MAAA,CAAAG,YAAY,CAACwE,GAAG,CAACtE,QAAQ;MAExE,MAAMG,QAAA;MAAA;MAAA,CAAAzE,aAAA,GAAAE,CAAA,QAAW+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACmG,YAAA;MAAA;MAAAtI,aAAA,GAAAE,CAAA;MACnCuE,QAAA,CAASC,OAAO,CAACC,GAAG,CAAC,WAAW;MAAA;MAAA3E,aAAA,GAAAE,CAAA;MAChCuE,QAAA,CAASC,OAAO,CAACC,GAAG,CAAC,iBAAiB;MAAA;MAAA3E,aAAA,GAAAE,CAAA;MAEtC,OAAOuE,QAAA;IAEX,EAAE,OAAOhE,KAAA,EAAO;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACZY,OAAA,CAAQL,KAAK,CAAC,4BAA4BA,KAAA;MAAA;MAAAT,aAAA,GAAAE,CAAA;MAC1C,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QACI0G,OAAA,EAAS;QACTjI,OAAA,EAAS;QACTH,KAAA,EAAOA,KAAA,YAAiBU,KAAA;QAAA;QAAA,CAAAnB,aAAA,GAAAO,CAAA,WAAQE,KAAA,CAAMG,OAAO;QAAA;QAAA,CAAAZ,aAAA,GAAAO,CAAA,WAAGuI,MAAA,CAAOrI,KAAA;MAC3D,GACA;QAAE2B,MAAA,EAAQ;MAAI;IAEtB;EACJ,GAAG;IAAE2G,QAAA,EAAU;EAAW;AAC9B;AAEO,MAAM5I,IAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,QAAOoB,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAA1B,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC9E,OAAO,IAAAyB,YAAA,CAAAC,YAAY,EAAC,sBAAsB;IAAA;IAAA5B,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACtC,IAAI;MACA;MACA,MAAM8I,iBAAA;MAAA;MAAA,CAAAhJ,aAAA,GAAAE,CAAA,QAAoB,MAAM,IAAA4B,KAAA,CAAAC,uBAAuB,EAACN,OAAA,EAAS;MACjE,MAAMwH,qBAAA;MAAA;MAAA,CAAAjJ,aAAA,GAAAE,CAAA,QAAwB,MAAM,IAAA4B,KAAA,CAAAC,uBAAuB,EAACN,OAAA,EAAS;MAAA;MAAAzB,aAAA,GAAAE,CAAA;MAErE;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,YAACyI,iBAAA,CAAkBhH,OAAO;MAAA;MAAA,CAAAhC,aAAA,GAAAO,CAAA,WAAI,CAAC0I,qBAAA,CAAsBjH,OAAO,GAAE;QAAA;QAAAhC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAC9D,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACrB1B,KAAA,EAAO;QACX,GAAG;UAAE2B,MAAA,EAAQ;QAAI;MACrB;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,MAAM8B,MAAA;MAAA;MAAA,CAAArC,aAAA,GAAAE,CAAA,QAAS,MAAM,IAAA4B,KAAA,CAAAQ,kBAAkB,EAACb,OAAA;MAAA;MAAAzB,aAAA,GAAAE,CAAA;MACxC,IAAI,CAACmC,MAAA,EAAQ;QAAA;QAAArC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACT,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACrB1B,KAAA,EAAO;QACX,GAAG;UAAE2B,MAAA,EAAQ;QAAI;MACrB;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAEA,MAAM2I,WAAA;MAAA;MAAA,CAAAlJ,aAAA,GAAAE,CAAA,QAAc,MAAMuB,OAAA,CAAQU,IAAI;MAEtC;MAAA;MAAAnC,aAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,YAACyI,iBAAA,CAAkBhH,OAAO;MAAA;MAAA,CAAAhC,aAAA,GAAAO,CAAA,WAAI0I,qBAAA,CAAsBjH,OAAO,GAAE;QAAA;QAAAhC,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAC7D;QACA,IAAI,CAACgJ,WAAA,CAAYpG,MAAM,EAAE;UAAA;UAAA9C,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACrB,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;YACrB0G,OAAA,EAAS;YACTjI,OAAA,EAAS;UACb,GAAG;YAAEwB,MAAA,EAAQ;UAAI;QACrB;QAAA;QAAA;UAAApC,aAAA,GAAAO,CAAA;QAAA;QAEA;QACA,MAAM4I,gBAAA;QAAA;QAAA,CAAAnJ,aAAA,GAAAE,CAAA,SAAmB,MAAMoB,eAAA,CAAAC,iBAAiB,CAAC6H,kBAAkB,CAAC3H,OAAA,EAASyH,WAAA,CAAYpG,MAAM;QAAA;QAAA9C,aAAA,GAAAE,CAAA;QAC/F;QAAI;QAAA,CAAAF,aAAA,GAAAO,CAAA,YAAC4I,gBAAA,CAAiBE,SAAS;QAAA;QAAA,CAAArJ,aAAA,GAAAO,CAAA,WAAI4I,gBAAA,CAAiBjG,OAAO,GAAE;UAAA;UAAAlD,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACzD;UACA,IAAIiJ,gBAAA,CAAiBjG,OAAO,EAAE;YAAA;YAAAlD,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YAC1B,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;cACrB0G,OAAA,EAAS;cACTjI,OAAA,EAAS;YACb,GAAG;cAAEwB,MAAA,EAAQ;YAAI;UACrB;UAAA;UAAA;YAAApC,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACA,OAAOoB,eAAA,CAAAC,iBAAiB,CAAC+H,0BAA0B;UAC/C;UAAA,CAAAtJ,aAAA,GAAAO,CAAA,WAAA4I,gBAAA,CAAiB1I,KAAK;UAAA;UAAA,CAAAT,aAAA,GAAAO,CAAA,WAAI;QAElC;QAAA;QAAA;UAAAP,aAAA,GAAAO,CAAA;QAAA;MACJ;MAAA;MAAA;QAAAP,aAAA,GAAAO,CAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACAY,OAAA,CAAQC,GAAG,CAAC,0BAA0B+D,IAAA,CAAKC,SAAS,CAACmE,WAAA,EAAa,MAAM;MACxE,MAAM;QAAEK,OAAO;QAAEtE,aAAa;QAAE,GAAGuE;MAAA,CAAgB;MAAA;MAAA,CAAAxJ,aAAA,GAAAE,CAAA,SAAGgJ,WAAA;MAAA;MAAAlJ,aAAA,GAAAE,CAAA;MACtDY,OAAA,CAAQC,GAAG,CAAC,wCAAwC+D,IAAA,CAAKC,SAAS,CAACyE,cAAA,EAAgB,MAAM;MAAA;MAAAxJ,aAAA,GAAAE,CAAA;MACzFY,OAAA,CAAQC,GAAG,CAAC,gCAAgCkE,aAAA;MAE5C;MAAA;MAAAjF,aAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,YAACiJ,cAAA,CAAevC,KAAK;MAAA;MAAA,CAAAjH,aAAA,GAAAO,CAAA,WAAI,CAACkJ,KAAA,CAAMC,OAAO,CAACF,cAAA,CAAevC,KAAK;MAAA;MAAA,CAAAjH,aAAA,GAAAO,CAAA,WAAKiJ,cAAA,CAAevC,KAAK,CAAC0C,MAAM,KAAK,IAAG;QAAA;QAAA3J,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACpG,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;UACI0G,OAAA,EAAS;UACTjI,OAAA,EAAS;UACTH,KAAA,EAAO;QACX,GACA;UAAE2B,MAAA,EAAQ;QAAI;MAEtB;MAAA;MAAA;QAAApC,aAAA,GAAAO,CAAA;MAAA;MAEA;MAAAP,aAAA,GAAAE,CAAA;MACA,KAAK,IAAI0J,CAAA;MAAA;MAAA,CAAA5J,aAAA,GAAAE,CAAA,SAAI,IAAG0J,CAAA,GAAIJ,cAAA,CAAevC,KAAK,CAAC0C,MAAM,EAAEC,CAAA,IAAK;QAClD,MAAMC,IAAA;QAAA;QAAA,CAAA7J,aAAA,GAAAE,CAAA,SAAOsJ,cAAA,CAAevC,KAAK,CAAC2C,CAAA,CAAE;QAAA;QAAA5J,aAAA,GAAAE,CAAA;QACpCY,OAAA,CAAQC,GAAG,CAAC,mBAAmB6I,CAAA,GAAI,EAAE;UACjCE,SAAA,EAAWD,IAAA,CAAKC,SAAS;UACzBC,aAAA,EAAe,OAAOF,IAAA,CAAKC,SAAS;UACpCE,QAAA,EAAUH,IAAA,CAAKG,QAAQ;UACvBC,YAAA,EAAc,OAAOJ,IAAA,CAAKG,QAAQ;UAClCE,KAAA,EAAOL,IAAA,CAAKK,KAAK;UACjBC,SAAA,EAAW,OAAON,IAAA,CAAKK;QAC3B;QAAA;QAAAlK,aAAA,GAAAE,CAAA;QAEA;QAAI;QAAA,CAAAF,aAAA,GAAAO,CAAA,YAACsJ,IAAA,CAAKC,SAAS;QAAA;QAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAI,CAACsJ,IAAA,CAAKG,QAAQ;QAAA;QAAA,CAAAhK,aAAA,GAAAO,CAAA,WAAIsJ,IAAA,CAAKG,QAAQ,IAAI,IAAG;UAAA;UAAAhK,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UACzDY,OAAA,CAAQC,GAAG,CAAC,mCAAmC6I,CAAA,GAAI,EAAE;YACjDQ,YAAA,EAAc,CAAC,CAACP,IAAA,CAAKC,SAAS;YAC9BO,WAAA,EAAa,CAAC,CAACR,IAAA,CAAKG,QAAQ;YAC5BM,aAAA,EAAeT,IAAA,CAAKG,QAAQ;YAC5BO,aAAA,EAAeV,IAAA,CAAKG,QAAQ,IAAI;UACpC;UAAA;UAAAhK,aAAA,GAAAE,CAAA;UACA,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;YACI0G,OAAA,EAAS;YACTjI,OAAA,EAAS,QAAQgJ,CAAA,GAAI,oEAAoE;YACzFnJ,KAAA,EAAO;YACP+J,WAAA,EAAa;cACTC,KAAA,EAAOb,CAAA;cACPE,SAAA,EAAWD,IAAA,CAAKC,SAAS;cACzBE,QAAA,EAAUH,IAAA,CAAKG,QAAQ;cACvBI,YAAA,EAAc,CAAC,CAACP,IAAA,CAAKC,SAAS;cAC9BO,WAAA,EAAa,CAAC,CAACR,IAAA,CAAKG,QAAQ;cAC5BU,gBAAA,EAAkBb,IAAA,CAAKG,QAAQ,GAAG;YACtC;UACJ,GACA;YAAE5H,MAAA,EAAQ;UAAI;QAEtB;QAAA;QAAA;UAAApC,aAAA,GAAAO,CAAA;QAAA;MACJ;MAEA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACA,IAAI,CAACsJ,cAAA,CAAepB,UAAU,EAAE;QAAA;QAAApI,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAC5BY,OAAA,CAAQ6J,IAAI,CAAC;MACjB;MAAA;MAAA;QAAA3K,aAAA,GAAAO,CAAA;MAAA;MAEA;MAAAP,aAAA,GAAAE,CAAA;MACA,IAAIsJ,cAAA,CAAepB,UAAU,EAAE;QAAA;QAAApI,aAAA,GAAAO,CAAA;QAC3B,MAAM6E,QAAA;QAAA;QAAA,CAAApF,aAAA,GAAAE,CAAA,SAAW,MAAME,6BAAA,CAA8B,MACjD;UAAA;UAAAJ,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAE,CAAA;UAAA,OAAAsC,OAAA,CAAAC,OAAM,CAAC2C,QAAQ,CAAC1C,UAAU,CAAC;YACvBC,KAAA,EAAO;cAAEC,EAAA,EAAI4G,cAAA,CAAepB;YAAW;YACvCvF,MAAA,EAAQ;cACJ+H,YAAA,EAAc;cACdC,WAAA,EAAa;cACb7H,IAAA,EAAM;YACV;UACJ;QAAA;QAAA;QAAAhD,aAAA,GAAAE,CAAA;QAGJ;QAAI;QAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA6E,QAAA;QAAA;QAAA,CAAApF,aAAA,GAAAO,CAAA,WAAY6E,QAAA,CAASwF,YAAY,KAAK;QAAA;QAAA,CAAA5K,aAAA,GAAAO,CAAA,WAAe6E,QAAA,CAASyF,WAAW,GAAE;UAAA;UAAA7K,aAAA,GAAAO,CAAA;UAC3E;UACA,MAAMuK,WAAA;UAAA;UAAA,CAAA9K,aAAA,GAAAE,CAAA,SAAcsJ,cAAA,CAAevC,KAAK,CAAC8D,MAAM,CAAC,CAACC,GAAA,EAAanB,IAAA;YAAA;YAAA7J,aAAA,GAAAC,CAAA;YAC1D,MAAMiK,KAAA;YAAA;YAAA,CAAAlK,aAAA,GAAAE,CAAA;YAAQ;YAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA+E,UAAA,CAAWuE,IAAA,CAAKoB,WAAW;YAAA;YAAA,CAAAjL,aAAA,GAAAO,CAAA,WAAK+E,UAAA,CAAWuE,IAAA,CAAKK,KAAK;YAAA;YAAA,CAAAlK,aAAA,GAAAO,CAAA,WAAK;YACxE,MAAMyJ,QAAA;YAAA;YAAA,CAAAhK,aAAA,GAAAE,CAAA;YAAW;YAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAiD,QAAA,CAASqG,IAAA,CAAKG,QAAQ,EAAE;YAAA;YAAA,CAAAhK,aAAA,GAAAO,CAAA,WAAO;YAAA;YAAAP,aAAA,GAAAE,CAAA;YAChD,OAAO8K,GAAA,GAAOd,KAAA,GAAQF,QAAA;UAC1B,GAAG;UAEH;UACA,MAAMkB,mBAAA;UAAA;UAAA,CAAAlL,aAAA,GAAAE,CAAA,SAAsB,MAAME,6BAAA,CAA8B,MAC5D;YAAA;YAAAJ,aAAA,GAAAC,CAAA;YAAAD,aAAA,GAAAE,CAAA;YAAA,OAAAsC,OAAA,CAAAC,OAAM,CAACqD,OAAO,CAACwB,SAAS,CAAC;cACrB3E,KAAA,EAAO;gBACHyF,UAAA,EAAYoB,cAAA,CAAepB,UAAU;gBACrChG,MAAA,EAAQ;kBAAE+I,EAAA,EAAI,CAAC,WAAW;gBAAW;cACzC;cACA5D,IAAA,EAAM;gBAAE9B,KAAA,EAAO;cAAK;YACxB;UAAA;UAGJ,MAAM2F,cAAA;UAAA;UAAA,CAAApL,aAAA,GAAAE,CAAA;UAAiB;UAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA2K,mBAAA,CAAoB3D,IAAI,CAAC9B,KAAK;UAAA;UAAA,CAAAzF,aAAA,GAAAO,CAAA,WAAI;UACzD,MAAM8K,eAAA;UAAA;UAAA,CAAArL,aAAA,GAAAE,CAAA,SAAkBkL,cAAA,GAAiBN,WAAA;UAAA;UAAA9K,aAAA,GAAAE,CAAA;UAEzC,IAAImL,eAAA,GAAkBjG,QAAA,CAASyF,WAAW,EAAE;YAAA;YAAA7K,aAAA,GAAAO,CAAA;YAAAP,aAAA,GAAAE,CAAA;YACxC,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;cACI0G,OAAA,EAAS;cACTjI,OAAA,EAAS,sCAAsCwE,QAAA,CAASpC,IAAI,0BAA0BoI,cAAA,CAAeE,cAAc,2BAA2BR,WAAA,CAAYQ,cAAc,yBAAyBlG,QAAA,CAASyF,WAAW,CAACS,cAAc,IAAI;cACxO7K,KAAA,EAAO;cACP8K,OAAA,EAAS;gBACLH,cAAA;gBACAI,aAAA,EAAeV,WAAA;gBACfD,WAAA,EAAazF,QAAA,CAASyF,WAAW;gBACjCY,YAAA,EAAcJ,eAAA,GAAkBjG,QAAA,CAASyF;cAC7C;YACJ,GACA;cAAEzI,MAAA,EAAQ;YAAI;UAEtB;UAAA;UAAA;YAAApC,aAAA,GAAAO,CAAA;UAAA;QACJ;QAAA;QAAA;UAAAP,aAAA,GAAAO,CAAA;QAAA;MACJ;MAAA;MAAA;QAAAP,aAAA,GAAAO,CAAA;MAAA;MAEA;MACA,MAAMmL,kBAAA;MAAA;MAAA,CAAA1L,aAAA,GAAAE,CAAA;MAAqB;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA0E,aAAA;MAAA;MAAA,CAAAjF,aAAA,GAAAO,CAAA,WAAiB,OAAOkH,IAAA,CAAKkE,GAAG,MAAMhI,IAAA,CAAKiI,KAAK,CAACjI,IAAA,CAAKkI,MAAM,KAAK,OAAO;MAAA;MAAA7L,aAAA,GAAAE,CAAA;MACnGY,OAAA,CAAQC,GAAG,CAAC,gCAAgC2K,kBAAA;MAE5C;MAAA;MAAA1L,aAAA,GAAAE,CAAA;MACA,IAAIsJ,cAAA,CAAe1G,MAAM,EAAE;QAAA;QAAA9C,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACvBY,OAAA,CAAQC,GAAG,CAAC,sCAAsCyI,cAAA,CAAe1G,MAAM;QACvE,MAAMqG,gBAAA;QAAA;QAAA,CAAAnJ,aAAA,GAAAE,CAAA,SAAmB,MAAMoB,eAAA,CAAAC,iBAAiB,CAAC6H,kBAAkB,CAAC3H,OAAA,EAAS+H,cAAA,CAAe1G,MAAM;QAAA;QAAA9C,aAAA,GAAAE,CAAA;QAClGY,OAAA,CAAQC,GAAG,CAAC,uBAAuBoI,gBAAA;QAAA;QAAAnJ,aAAA,GAAAE,CAAA;QACnC,IAAI,CAACiJ,gBAAA,CAAiBE,SAAS,EAAE;UAAA;UAAArJ,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UAC7BY,OAAA,CAAQC,GAAG,CAAC,uBAAuBoI,gBAAA,CAAiB1I,KAAK;UAAA;UAAAT,aAAA,GAAAE,CAAA;UACzD,OAAOoB,eAAA,CAAAC,iBAAiB,CAAC+H,0BAA0B,CAACH,gBAAA,CAAiB1I,KAAK;QAC9E;QAAA;QAAA;UAAAT,aAAA,GAAAO,CAAA;QAAA;QAAAP,aAAA,GAAAE,CAAA;QACAY,OAAA,CAAQC,GAAG,CAAC;MAChB,OAAO;QAAA;QAAAf,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACHY,OAAA,CAAQC,GAAG,CAAC;MAChB;MAEA,MAAM+K,wBAAA;MAAA;MAAA,CAAA9L,aAAA,GAAAE,CAAA,SAAmH,EAAE;MAE3H,MAAM4F,OAAA;MAAA;MAAA,CAAA9F,aAAA,GAAAE,CAAA,SAAU,MAAM,IAAAyB,YAAA,CAAAC,YAAY,EAAC,uBAAuB,MACtD;QAAA;QAAA5B,aAAA,GAAAC,CAAA;QAAAD,aAAA,GAAAE,CAAA;QAAA,OAAAsC,OAAA,CAAAC,OAAM,CAACsJ,YAAY,CACf,MAAOC,EAAA;UAAA;UAAAhM,aAAA,GAAAC,CAAA;UACH,MAAMgM,cAAA;UAAA;UAAA,CAAAjM,aAAA,GAAAE,CAAA,SAAiB,MAAM8L,EAAA,CAAGlG,OAAO,CAACoG,MAAM,CAAC;YAC3CC,IAAA,EAAM;cACFlH,aAAA,EAAeyG,kBAAA;cACftD,UAAA;cAAY;cAAA,CAAApI,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAepB,UAAU;cAAA;cAAA,CAAApI,aAAA,GAAAO,CAAA,WAAI;cACzCkF,KAAA,EAAO;cACPrD,MAAA,EAAQ;cACR0B,aAAA;cAAe;cAAA,CAAA9D,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAe1F,aAAa;cAAA;cAAA,CAAA9D,aAAA,GAAAO,CAAA,WAAI;cAC/CyF,WAAA,EAAawD,cAAA,CAAexD,WAAW;cAAA;cAAA,CAAAhG,aAAA,GAAAO,CAAA,WAAG,IAAIkH,IAAA,CAAK+B,cAAA,CAAexD,WAAW;cAAA;cAAA,CAAAhG,aAAA,GAAAO,CAAA,WAAI,IAAIkH,IAAA;cACrFxB,OAAA,EAASuD,cAAA,CAAevD,OAAO;cAAA;cAAA,CAAAjG,aAAA,GAAAO,CAAA,WAAG,IAAIkH,IAAA,CAAK+B,cAAA,CAAevD,OAAO;cAAA;cAAA,CAAAjG,aAAA,GAAAO,CAAA,WAAI;cACrE2F,KAAA;cAAO;cAAA,CAAAlG,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAetD,KAAK;cAAA;cAAA,CAAAlG,aAAA,GAAAO,CAAA,WAAI;cAC/BuC,MAAA;cAAQ;cAAA,CAAA9C,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAe1G,MAAM;cAAA;cAAA,CAAA9C,aAAA,GAAAO,CAAA,WAAI;cACjC6L,SAAA,EAAW/J,MAAA;cACXgK,WAAA,EAAa;cACbC,YAAA,EAAc,EAAE;YACpB;UACJ;UAEA;UACA;UAAA;UAAAtM,aAAA,GAAAE,CAAA;UAEA;UAAI;UAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAevC,KAAK;UAAA;UAAA,CAAAjH,aAAA,GAAAO,CAAA,WAAIkJ,KAAA,CAAMC,OAAO,CAACF,cAAA,CAAevC,KAAK,IAAG;YAAA;YAAAjH,aAAA,GAAAO,CAAA;YAC7D;YACA,MAAMgM,UAAA;YAAA;YAAA,CAAAvM,aAAA,GAAAE,CAAA,SAAasJ,cAAA,CAAevC,KAAK,CAACgB,GAAG,CAAE4B,IAAA,IAAc;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAAAD,aAAA,GAAAE,CAAA;cAAA,OAAAsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;YAAA;YACpF,MAAM0C,cAAA;YAAA;YAAA,CAAAxM,aAAA,GAAAE,CAAA,SAAiB,MAAM8L,EAAA,CAAGS,aAAa,CAAC1G,QAAQ,CAAC;cACnDpD,KAAA,EAAO;gBACHmH,SAAA,EAAW;kBAAEqB,EAAA,EAAIoB;gBAAW;gBAC5BzJ,MAAA,EAAQ0G,cAAA,CAAe1G;cAC3B;cACAD,MAAA,EAAQ;gBAAEiH,SAAA,EAAW;gBAAM4C,gBAAA,EAAkB;cAAK;YACtD;YAEA;YACA,MAAMC,cAAA;YAAA;YAAA,CAAA3M,aAAA,GAAAE,CAAA,SAAiB,IAAI0M,GAAA,CAAIJ,cAAA,CAAevE,GAAG,CAAC4B,IAAA,IAAQ;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAAAD,aAAA,GAAAE,CAAA;cAAA,QAAC2J,IAAA,CAAKC,SAAS;cAAE;cAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAAsJ,IAAA,CAAK6C,gBAAgB;cAAA;cAAA,CAAA1M,aAAA,GAAAO,CAAA,WAAI,GAAE;aAAA;YAEtG;YACA,MAAMsM,iBAAA;YAAA;YAAA,CAAA7M,aAAA,GAAAE,CAAA,SAAoBqM,UAAA,CAAWO,MAAM,CAAElK,EAAA,IAAY;cAAA;cAAA5C,aAAA,GAAAC,CAAA;cAAAD,aAAA,GAAAE,CAAA;cAAA,QAACyM,cAAA,CAAeI,GAAG,CAACnK,EAAA;YAAA;YAAA;YAAA5C,aAAA,GAAAE,CAAA;YAC7E,IAAI2M,iBAAA,CAAkBlD,MAAM,GAAG,GAAG;cAAA;cAAA3J,aAAA,GAAAO,CAAA;cAC9B,MAAMyM,gBAAA;cAAA;cAAA,CAAAhN,aAAA,GAAAE,CAAA,SAAmB,MAAM8L,EAAA,CAAGiB,OAAO,CAAClH,QAAQ,CAAC;gBAC/CpD,KAAA,EAAO;kBAAEC,EAAA,EAAI;oBAAEuI,EAAA,EAAI0B;kBAAkB;gBAAE;gBACvChK,MAAA,EAAQ;kBAAED,EAAA,EAAI;kBAAMsK,mBAAA,EAAqB;gBAAK;cAClD;cAAA;cAAAlN,aAAA,GAAAE,CAAA;cACA8M,gBAAA,CAAiBG,OAAO,CAACC,CAAA;gBAAA;gBAAApN,aAAA,GAAAC,CAAA;gBAAAD,aAAA,GAAAE,CAAA;gBACrByM,cAAA,CAAehI,GAAG,CAACyI,CAAA,CAAExK,EAAE;gBAAE;gBAAA,CAAA5C,aAAA,GAAAO,CAAA,WAAA6M,CAAA,CAAEF,mBAAmB;gBAAA;gBAAA,CAAAlN,aAAA,GAAAO,CAAA,WAAI;cACtD;YACJ;YAAA;YAAA;cAAAP,aAAA,GAAAO,CAAA;YAAA;YAEA,IAAI8M,4BAAA;YAAA;YAAA,CAAArN,aAAA,GAAAE,CAAA,SAA+B;YAEnC;YACA,MAAMoN,gBAAA;YAAA;YAAA,CAAAtN,aAAA,GAAAE,CAAA,SAAmBsJ,cAAA,CAAevC,KAAK,CAACgB,GAAG,CAAE4B,IAAA;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAC/C,MAAM6J,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAE,CAAA,SAAYsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;cAC3C,MAAMyD,SAAA;cAAA;cAAA,CAAAvN,aAAA,GAAAE,CAAA;cAAY;cAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAoM,cAAA,CAAelJ,GAAG,CAACqG,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAc;cACnD,MAAMiN,gBAAA;cAAA;cAAA,CAAAxN,aAAA,GAAAE,CAAA,SAAmB2J,IAAA,CAAKG,QAAQ,GAAGH,IAAA,CAAKK,KAAK;cACnD,MAAMuD,aAAA;cAAA;cAAA,CAAAzN,aAAA,GAAAE,CAAA,SAAgBqN,SAAA,GAAY1D,IAAA,CAAKG,QAAQ;cAC/C,MAAM0D,UAAA;cAAA;cAAA,CAAA1N,aAAA,GAAAE,CAAA,SAAasN,gBAAA,GAAmBC,aAAA;cAAA;cAAAzN,aAAA,GAAAE,CAAA;cAEtCmN,4BAAA,IAAgCG,gBAAA;cAAA;cAAAxN,aAAA,GAAAE,CAAA;cAEhC,OAAO;gBACHyN,SAAA,EAAW1B,cAAA,CAAerJ,EAAE;gBAC5BkH,SAAA,EAAWA,SAAA;gBACXE,QAAA,EAAUH,IAAA,CAAKG,QAAQ;gBACvBE,KAAA,EAAOL,IAAA,CAAKK,KAAK;gBACjBzE,KAAA,EAAO+H,gBAAA;gBACPD,SAAA,EAAWA,SAAA;gBACXK,MAAA,EAAQF;cACZ;YACJ;YAEA;YAAA;YAAA1N,aAAA,GAAAE,CAAA;YACA,MAAM8L,EAAA,CAAG6B,WAAW,CAACC,UAAU,CAAC;cAC5B3B,IAAA,EAAMmB;YACV;YAEA;YACA,MAAMjB,WAAA;YAAA;YAAA,CAAArM,aAAA,GAAAE,CAAA,SAAcsJ,cAAA,CAAevC,KAAK,CAAC8D,MAAM,CAAC,CAACC,GAAA,EAAanB,IAAA;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAC1D,MAAM6J,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAE,CAAA,SAAYsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;cAC3C,MAAMyD,SAAA;cAAA;cAAA,CAAAvN,aAAA,GAAAE,CAAA;cAAY;cAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAoM,cAAA,CAAelJ,GAAG,CAACqG,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAc;cACnD,MAAMiN,gBAAA;cAAA;cAAA,CAAAxN,aAAA,GAAAE,CAAA,SAAmB2J,IAAA,CAAKG,QAAQ,GAAGH,IAAA,CAAKK,KAAK;cACnD,MAAMuD,aAAA;cAAA;cAAA,CAAAzN,aAAA,GAAAE,CAAA,SAAgBqN,SAAA,GAAY1D,IAAA,CAAKG,QAAQ;cAC/C,MAAM0D,UAAA;cAAA;cAAA,CAAA1N,aAAA,GAAAE,CAAA,SAAasN,gBAAA,GAAmBC,aAAA;cAAA;cAAAzN,aAAA,GAAAE,CAAA;cACtC,OAAO8K,GAAA,GAAM0C,UAAA;YACjB,GAAG;YAEH,MAAMpB,YAAA;YAAA;YAAA,CAAAtM,aAAA,GAAAE,CAAA,SAAemN,4BAAA,GAA+B;YAAA;YAAA,CAAArN,aAAA,GAAAO,CAAA,WAAI8L,WAAC,GAAcgB,4BAAA,GAAgC;YAAA;YAAA,CAAArN,aAAA,GAAAO,CAAA,WAAM;YAE7G;YACA,IAAIwN,QAAA;YAAA;YAAA,CAAA/N,aAAA,GAAAE,CAAA,SAAWmN,4BAAA;YACf,IAAIW,cAAA;YAAA;YAAA,CAAAhO,aAAA,GAAAE,CAAA,SAAiB;YAAA;YAAAF,aAAA,GAAAE,CAAA;YACrB;YAAI;YAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAeyE,YAAY;YAAA;YAAA,CAAAjO,aAAA,GAAAO,CAAA,WAAIiJ,cAAA,CAAe0E,aAAa,GAAG,IAAG;cAAA;cAAAlO,aAAA,GAAAO,CAAA;cAAAP,aAAA,GAAAE,CAAA;cACjE8N,cAAA,GAAiBxE,cAAA,CAAeyE,YAAY,KAAK;cAAA;cAAA,CAAAjO,aAAA,GAAAO,CAAA,WAC3CwN,QAAC,GAAWvE,cAAA,CAAe0E,aAAa,GAAI;cAAA;cAAA,CAAAlO,aAAA,GAAAO,CAAA,WAC5CiJ,cAAA,CAAe0E,aAAa;YACtC;YAAA;YAAA;cAAAlO,aAAA,GAAAO,CAAA;YAAA;YACA,IAAI4N,QAAA;YAAA;YAAA,CAAAnO,aAAA,GAAAE,CAAA,SAAW6N,QAAA,GAAWC,cAAA;YAAA;YAAAhO,aAAA,GAAAE,CAAA;YAE1B,MAAM8L,EAAA,CAAGlG,OAAO,CAACsI,MAAM,CAAC;cACpBzL,KAAA,EAAO;gBAAEC,EAAA,EAAIqJ,cAAA,CAAerJ;cAAG;cAC/BuJ,IAAA,EAAM;gBACF8B,YAAA,EAAczE,cAAA,CAAeyE,YAAY;gBACzCC,aAAA,EAAe1E,cAAA,CAAe0E,aAAa;gBAC3CzI,KAAA,EAAO0I,QAAA;gBACP9B,WAAA,EAAaA,WAAA;gBACbC,YAAA,EAAcA;cAClB;YACJ;UACJ;UAAA;UAAA;YAAAtM,aAAA,GAAAO,CAAA;UAAA;UAEA;UAAAP,aAAA,GAAAE,CAAA;UACA;UAAI;UAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAiJ,cAAA,CAAe1G,MAAM;UAAA;UAAA,CAAA9C,aAAA,GAAAO,CAAA,WAAIiJ,cAAA,CAAevC,KAAK;UAAA;UAAA,CAAAjH,aAAA,GAAAO,CAAA,WAAIkJ,KAAA,CAAMC,OAAO,CAACF,cAAA,CAAevC,KAAK,IAAG;YAAA;YAAAjH,aAAA,GAAAO,CAAA;YACtF;YACA,MAAMgM,UAAA;YAAA;YAAA,CAAAvM,aAAA,GAAAE,CAAA,SAAasJ,cAAA,CAAevC,KAAK,CAACgB,GAAG,CAAE4B,IAAA,IAAc;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAAAD,aAAA,GAAAE,CAAA;cAAA,OAAAsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;YAAA;YACpF,MAAMuE,iBAAA;YAAA;YAAA,CAAArO,aAAA,GAAAE,CAAA,SAAoB,MAAM8L,EAAA,CAAGS,aAAa,CAAC1G,QAAQ,CAAC;cACtDpD,KAAA,EAAO;gBACHmH,SAAA,EAAW;kBAAEqB,EAAA,EAAIoB;gBAAW;gBAC5BzJ,MAAA,EAAQ0G,cAAA,CAAe1G;cAC3B;cACAoE,OAAA,EAAS;gBAAEd,SAAA,EAAW;cAAM;cAC5BvD,MAAA,EAAQ;gBAAED,EAAA,EAAI;gBAAMkH,SAAA,EAAW;gBAAME,QAAA,EAAU;gBAAM5D,SAAA,EAAW;gBAAMtD,MAAA,EAAQ;cAAK;YACvF;YAEA;YACA,MAAMwL,kBAAA;YAAA;YAAA,CAAAtO,aAAA,GAAAE,CAAA,SAAqB,IAAI0M,GAAA;YAAA;YAAA5M,aAAA,GAAAE,CAAA;YAC/BmO,iBAAA,CAAkBlB,OAAO,CAACtD,IAAA;cAAA;cAAA7J,aAAA,GAAAC,CAAA;cAAAD,aAAA,GAAAE,CAAA;cACtB,IAAI,CAACoO,kBAAA,CAAmBvB,GAAG,CAAClD,IAAA,CAAKC,SAAS,GAAG;gBAAA;gBAAA9J,aAAA,GAAAO,CAAA;gBAAAP,aAAA,GAAAE,CAAA;gBACzCoO,kBAAA,CAAmB3J,GAAG,CAACkF,IAAA,CAAKC,SAAS,EAAE,EAAE;cAC7C;cAAA;cAAA;gBAAA9J,aAAA,GAAAO,CAAA;cAAA;cAAAP,aAAA,GAAAE,CAAA;cACAoO,kBAAA,CAAmB7K,GAAG,CAACoG,IAAA,CAAKC,SAAS,EAAGtE,IAAI,CAACqE,IAAA;YACjD;YAEA;YAAA;YAAA7J,aAAA,GAAAE,CAAA;YACA,KAAK,MAAM2J,IAAA,IAAQL,cAAA,CAAevC,KAAK,EAAE;cACrC,MAAM6C,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAE,CAAA,SAAYsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;cAC3C,MAAM0C,cAAA;cAAA;cAAA,CAAAxM,aAAA,GAAAE,CAAA;cAAiB;cAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA+N,kBAAA,CAAmB7K,GAAG,CAACqG,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAc,EAAE;cAAA;cAAAP,aAAA,GAAAE,CAAA;cAC9D,IAAIsM,cAAA,CAAe7C,MAAM,KAAK,GAAG;gBAAA;gBAAA3J,aAAA,GAAAO,CAAA;gBAAAP,aAAA,GAAAE,CAAA;gBAC7B,MAAM,IAAIiB,KAAA,CAAM,+BAA+B2I,SAAA,uBAAgC;cACnF;cAAA;cAAA;gBAAA9J,aAAA,GAAAO,CAAA;cAAA;cACA,MAAMgO,cAAA;cAAA;cAAA,CAAAvO,aAAA,GAAAE,CAAA,SAAiBsM,cAAA,CAAezB,MAAM,CAAC,CAACC,GAAA,EAAKwD,GAAA,KAAQ;gBAAA;gBAAAxO,aAAA,GAAAC,CAAA;gBAAAD,aAAA,GAAAE,CAAA;gBAAA,OAAA8K,GAAA,GAAMwD,GAAA,CAAIxE,QAAQ;cAAR,CAAQ,EAAE;cAAA;cAAAhK,aAAA,GAAAE,CAAA;cAC/E,IAAIqO,cAAA,GAAiB1E,IAAA,CAAKG,QAAQ,EAAE;gBAAA;gBAAAhK,aAAA,GAAAO,CAAA;gBAAAP,aAAA,GAAAE,CAAA;gBAChC,MAAM,IAAIiB,KAAA,CAAM,yCAAyC2I,SAAA,qCAA8CyE,cAAA,eAA6B1E,IAAA,CAAKG,QAAQ,EAAE;cACvJ;cAAA;cAAA;gBAAAhK,aAAA,GAAAO,CAAA;cAAA;YACJ;YAEA;YACA,MAAMkO,gBAAA;YAAA;YAAA,CAAAzO,aAAA,GAAAE,CAAA,SAA4D,EAAE;YAAA;YAAAF,aAAA,GAAAE,CAAA;YAEpE,KAAK,MAAM2J,IAAA,IAAQL,cAAA,CAAevC,KAAK,EAAE;cACrC,MAAM6C,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAE,CAAA,SAAYsD,QAAA,CAASqG,IAAA,CAAKC,SAAS,EAAE;cAC3C,MAAM0C,cAAA;cAAA;cAAA,CAAAxM,aAAA,GAAAE,CAAA;cAAiB;cAAA,CAAAF,aAAA,GAAAO,CAAA,WAAA+N,kBAAA,CAAmB7K,GAAG,CAACqG,SAAA;cAAA;cAAA,CAAA9J,aAAA,GAAAO,CAAA,WAAc,EAAE;cAC9D,IAAImO,iBAAA;cAAA;cAAA,CAAA1O,aAAA,GAAAE,CAAA,SAAoB2J,IAAA,CAAKG,QAAQ;cAAA;cAAAhK,aAAA,GAAAE,CAAA;cAErC,KAAK,MAAMuM,aAAA,IAAiBD,cAAA,EAAgB;gBAAA;gBAAAxM,aAAA,GAAAE,CAAA;gBACxC,IAAIwO,iBAAA,IAAqB,GAAG;kBAAA;kBAAA1O,aAAA,GAAAO,CAAA;kBAAAP,aAAA,GAAAE,CAAA;kBAAA;gBAAA;gBAAA;gBAAA;kBAAAF,aAAA,GAAAO,CAAA;gBAAA;gBAAAP,aAAA,GAAAE,CAAA;gBAC5B,IAAIuM,aAAA,CAAczC,QAAQ,GAAG,GAAG;kBAAA;kBAAAhK,aAAA,GAAAO,CAAA;kBAC5B,MAAMoO,YAAA;kBAAA;kBAAA,CAAA3O,aAAA,GAAAE,CAAA,SAAeyD,IAAA,CAAKC,GAAG,CAAC8K,iBAAA,EAAmBjC,aAAA,CAAczC,QAAQ;kBACvE,MAAM4E,eAAA;kBAAA;kBAAA,CAAA5O,aAAA,GAAAE,CAAA,SAAkBuM,aAAA,CAAczC,QAAQ;kBAC9C,MAAM6E,eAAA;kBAAA;kBAAA,CAAA7O,aAAA,GAAAE,CAAA,SAAkBuM,aAAA,CAAczC,QAAQ,GAAG2E,YAAA;kBAAA;kBAAA3O,aAAA,GAAAE,CAAA;kBAEjDuO,gBAAA,CAAiBjJ,IAAI,CAAC;oBAClB5C,EAAA,EAAI6J,aAAA,CAAc7J,EAAE;oBACpBoH,QAAA,EAAU6E;kBACd;kBAAA;kBAAA7O,aAAA,GAAAE,CAAA;kBAEA4L,wBAAA,CAAyBtG,IAAI,CAAC;oBAC1BsE,SAAA,EAAWA,SAAA;oBACXhH,MAAA,EAAQ2J,aAAA,CAAc3J,MAAM;oBAC5BgM,WAAA,EAAaD,eAAA;oBACbE,WAAA,EAAaH;kBACjB;kBAAA;kBAAA5O,aAAA,GAAAE,CAAA;kBACAwO,iBAAA,IAAqBC,YAAA;gBACzB;gBAAA;gBAAA;kBAAA3O,aAAA,GAAAO,CAAA;gBAAA;cACJ;YACJ;YAEA;YAAA;YAAAP,aAAA,GAAAE,CAAA;YACA,IAAIuO,gBAAA,CAAiB9E,MAAM,GAAG,GAAG;cAAA;cAAA3J,aAAA,GAAAO,CAAA;cAAAP,aAAA,GAAAE,CAAA;cAC7B,MAAMc,OAAA,CAAQ6E,GAAG,CACb4I,gBAAA,CAAiBxG,GAAG,CAACmG,MAAA,IACjB;gBAAA;gBAAApO,aAAA,GAAAC,CAAA;gBAAAD,aAAA,GAAAE,CAAA;gBAAA,OAAA8L,EAAA,CAAGS,aAAa,CAAC2B,MAAM,CAAC;kBACpBzL,KAAA,EAAO;oBAAEC,EAAA,EAAIwL,MAAA,CAAOxL;kBAAG;kBACvBuJ,IAAA,EAAM;oBAAEnC,QAAA,EAAUoE,MAAA,CAAOpE,QAAQ;oBAAE5D,SAAA,EAAW,IAAIqB,IAAA;kBAAO;gBAC7D;cAAA;YAGZ;YAAA;YAAA;cAAAzH,aAAA,GAAAO,CAAA;YAAA;UACJ;UAAA;UAAA;YAAAP,aAAA,GAAAO,CAAA;UAAA;UAAAP,aAAA,GAAAE,CAAA;UACA,OAAO8L,EAAA,CAAGlG,OAAO,CAACpD,UAAU,CAAC;YACzBC,KAAA,EAAO;cAAEC,EAAA,EAAIqJ,cAAA,CAAerJ;YAAG;YAC/BoM,OAAA,EAAS;cAAE5J,QAAA,EAAU;cAAM6B,KAAA,EAAO;YAAK;UAC3C;QACJ,GACA;UAAEgI,OAAA,EAAS;QAAM;MAAA;MAIzB;MAAA;MAAAjP,aAAA,GAAAE,CAAA;MACAY,OAAA,CAAQC,GAAG,CAAC,WAAW+E,OAAA,EAASlD,EAAA,uBAAyB;MAAA;MAAA5C,aAAA,GAAAE,CAAA;MAEzD,IAAIqJ,OAAA,EAAS;QAAA;QAAAvJ,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QACT,IAAI;UAAA;UAAAF,aAAA,GAAAE,CAAA;UACA;UACAY,OAAA,CAAQC,GAAG,CAAC;UACZ;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACJ,EAAE,OAAOmO,QAAA,EAAU;UAAA;UAAAlP,aAAA,GAAAE,CAAA;UACfY,OAAA,CAAQL,KAAK,CAAC,2BAA2ByO,QAAA;QAC7C;MACJ;MAAA;MAAA;QAAAlP,aAAA,GAAAO,CAAA;MAAA;MAEA;MAAAP,aAAA,GAAAE,CAAA;MACA,MAAMc,OAAA,CAAQ6E,GAAG,CAAC,CACd5B,MAAA,CAAAC,YAAY,CAACiL,kBAAkB,IAC/BlL,MAAA,CAAAC,YAAY,CAACkL,mBAAmB,GACnC;MAED,MAAMC,YAAA;MAAA;MAAA,CAAArP,aAAA,GAAAE,CAAA,SAAeoP,aAAA,CAAAC,YAAY,CAACC,WAAW;MAAA;MAAAxP,aAAA,GAAAE,CAAA;MAC7C,MAAMmP,YAAA,CAAaI,SAAS,CAAC;QACzBpN,MAAA;QACAqN,MAAA,EAAQ;QACRC,MAAA,EAAQ;QACRC,QAAA,EAAU9J,OAAA,CAASlD,EAAE;QACrB2I,OAAA,EAAS;UACLtG,aAAA,EAAea,OAAA,CAASb,aAAa;UACrCmD,UAAA,EAAYtC,OAAA,CAASsC,UAAU;UAC/B3C,KAAA,EAAOK,OAAA,CAASL,KAAK;UACrBrD,MAAA,EAAQ0D,OAAA,CAAS1D,MAAM;UACvBU,MAAA,EAAQgD,OAAA,CAAShD,MAAM;UACvB+M,UAAA,EAAY/J,OAAA,CAASmB,KAAK,CAAC0C;QAC/B;MACJ;MAAA;MAAA3J,aAAA,GAAAE,CAAA;MAEA,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAE0G,OAAA,EAAS;QAAMjI,OAAA,EAAS;QAAgCuL,IAAA,EAAMrG;MAAQ,GACxE;QAAE1D,MAAA,EAAQ;MAAI;IAEtB,EAAE,OAAO3B,KAAA,EAAO;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACZY,OAAA,CAAQL,KAAK,CAAC,2BAA2BA,KAAA;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACzC,OAAO+B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAE0G,OAAA,EAAS;QAAOjI,OAAA,EAAS;QAA0BH,KAAA,EAAOA,KAAA,YAAiBU,KAAA;QAAA;QAAA,CAAAnB,aAAA,GAAAO,CAAA,WAAQE,KAAA,CAAMG,OAAO;QAAA;QAAA,CAAAZ,aAAA,GAAAO,CAAA,WAAGuI,MAAA,CAAOrI,KAAA;MAAO,GACnH;QAAE2B,MAAA,EAAQ;MAAI;IAEtB;EACJ,GAAG;IAAE2G,QAAA,EAAU;EAAiB;AACpC","ignoreList":[]}