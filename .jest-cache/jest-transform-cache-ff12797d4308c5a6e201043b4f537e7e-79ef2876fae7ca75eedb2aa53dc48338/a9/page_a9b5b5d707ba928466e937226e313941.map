{"version":3,"names":["default","cov_rqso4effi","f","s","ReceiptsPage","metadata","LoadingSpinner","_jsxruntime","jsxs","className","jsx","_lucidereact","Loader2","size","title","description","getReceipts","page","b","limit","search","searchFilter","OR","receiptNumber","contains","mode","_client","Prisma","QueryMode","insensitive","payment","referenceNumber","customer","name","invoice","invoiceNumber","receipts","totalReceipts","_prisma","prisma","$transaction","receipt","findMany","where","include","account","confirmedByUser","orderBy","createdAt","skip","take","count","formattedReceipts","map","receiptDate","toISOString","split","id","totalPages","Math","ceil","currentPage","error","console","searchParams","parseInt","_MainLayout","_react","Suspense","fallback","_ReceiptsClientWrapper","initialReceipts","initialTotalPages","initialCurrentPage","initialSearch"],"sources":["/Users/sachin/Documents/md-sports-/src/app/receipts/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\nimport { prisma } from '@/lib/prisma';\nimport ReceiptsClientWrapper from './components/ReceiptsClientWrapper';\nimport { Metadata } from 'next';\nimport { Loader2 } from 'lucide-react';\nimport MainLayout from '@/components/layout/MainLayout';\nimport { Prisma } from '@prisma/client';\n\n// Simple loading component\nfunction LoadingSpinner() {\n    return (\n        <div className=\"flex justify-center items-center h-64\">\n            <Loader2 className=\"animate-spin text-primary\" size={48} />\n            <p className=\"ml-3 text-lg text-gray-600\">Loading receipts...</p>\n        </div>\n    );\n}\n\nexport const metadata: Metadata = {\n    title: 'Receipts | MS Sports',\n    description: 'View and manage all payment receipts'\n};\n\nasync function getReceipts(page = 1, limit = 10, search = '') {\n    try {\n\n        // Build search filter once\n        const searchFilter: Prisma.ReceiptWhereInput = search ? {\n            OR: [\n                { receiptNumber: { contains: search, mode: Prisma.QueryMode.insensitive } },\n                { payment: { referenceNumber: { contains: search, mode: Prisma.QueryMode.insensitive } } },\n                { payment: { customer: { name: { contains: search, mode: Prisma.QueryMode.insensitive } } } },\n                { payment: { invoice: { invoiceNumber: { contains: search, mode: Prisma.QueryMode.insensitive } } } }\n            ]\n        } : {};\n\n        // Fetch list & count concurrently to reduce total latency\n        const [receipts, totalReceipts] = await prisma.$transaction([\n            prisma.receipt.findMany({\n                where: searchFilter,\n                include: {\n                    payment: {\n                        include: {\n                            customer: true,\n                            invoice: true,\n                            account: true\n                        }\n                    },\n                    confirmedByUser: true\n                },\n                orderBy: { createdAt: 'desc' },\n                skip: (page - 1) * limit,\n                take: limit\n            }),\n            prisma.receipt.count({ where: searchFilter })\n        ]) as [any[], number];\n\n        // Convert receiptDate from Date to string to match the Receipt interface\n        const formattedReceipts = receipts.map(receipt => ({\n            ...receipt,\n            receiptDate: receipt.receiptDate.toISOString().split('T')[0], // Convert Date to YYYY-MM-DD string\n            payment: {\n                ...receipt.payment,\n                // Limit nested objects to only the fields required by the client component\n                customer: {\n                    id: receipt.payment.customer?.id ?? 0,\n                    name: receipt.payment.customer?.name ?? 'Unknown'\n                },\n                invoice: {\n                    id: receipt.payment.invoice.id,\n                    invoiceNumber: receipt.payment.invoice.invoiceNumber\n                },\n                account: receipt.payment?.account\n                    ? {\n                          id: receipt.payment.account.id,\n                          name: receipt.payment.account.name\n                      }\n                    : null\n            }\n        }));\n\n        return {\n            receipts: formattedReceipts,\n            totalReceipts,\n            totalPages: Math.ceil(totalReceipts / limit),\n            currentPage: page\n        };\n    } catch (error) {\n        console.error('Error fetching receipts:', error);\n        return {\n            receipts: [],\n            totalPages: 0,\n            currentPage: 1\n        };\n    }\n}\n\nexport default async function ReceiptsPage({\n    searchParams\n}: {\n    searchParams?: { page?: string; search?: string };\n}) {\n    const page = searchParams?.page ? parseInt(searchParams.page) : 1;\n    const search = searchParams?.search || '';\n    const { receipts, totalPages, currentPage } = await getReceipts(page, 10, search);\n\n    return (\n        <MainLayout>\n            <div>\n                <h1 className=\"text-2xl font-bold text-black mb-6\">Payment Receipts</h1>\n\n                <Suspense fallback={<LoadingSpinner />}>\n                    <ReceiptsClientWrapper\n                        initialReceipts={receipts as any}\n                        initialTotalPages={totalPages}\n                        initialCurrentPage={currentPage}\n                        initialSearch={search}\n                    />\n                </Suspense>\n            </div>\n        </MainLayout>\n    );\n}"],"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","ignoreList":[]}