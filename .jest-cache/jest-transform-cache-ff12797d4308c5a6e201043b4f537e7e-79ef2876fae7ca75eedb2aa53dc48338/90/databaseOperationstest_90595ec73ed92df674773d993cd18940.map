{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/databaseOperations.test.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { mockDeep, mockReset, DeepMockProxy } from 'jest-mock-extended';\n\n// Mock Prisma Client\nconst mockPrisma = mockDeep<PrismaClient>();\n\n// Mock the Prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n  prisma: mockPrisma,\n}));\n\nimport prisma from '@/lib/prisma';\n\ndescribe('Database Operations - Prisma Models', () => {\n  beforeEach(() => {\n    mockReset(mockPrisma);\n  });\n\n  describe('User Model Operations', () => {\n    const mockUser = {\n      id: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      password: 'hashedpassword',\n      firstName: 'Test',\n      lastName: 'User',\n      isActive: true,\n      roleId: 1,\n      shopId: 'shop1',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active users', async () => {\n        const mockUsers = [mockUser, { ...mockUser, id: 2, username: 'testuser2' }];\n        mockPrisma.user.findMany.mockResolvedValue(mockUsers as any);\n\n        const result = await prisma.user.findMany({\n          where: { isActive: true },\n        });\n\n        expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n          where: { isActive: true },\n        });\n        expect(result).toEqual(mockUsers);\n        expect(result).toHaveLength(2);\n      });\n\n      it('should fetch users with role and shop relations', async () => {\n        const mockUsersWithRelations = [{\n          ...mockUser,\n          role: { id: 1, name: 'admin', permissions: [] },\n          shop: { id: 'shop1', name: 'Main Shop' },\n        }];\n        mockPrisma.user.findMany.mockResolvedValue(mockUsersWithRelations as any);\n\n        const result = await prisma.user.findMany({\n          include: {\n            role: { include: { permissions: true } },\n            shop: true,\n          },\n        });\n\n        expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n          include: {\n            role: { include: { permissions: true } },\n            shop: true,\n          },\n        });\n        expect(result[0]).toHaveProperty('role');\n        expect(result[0]).toHaveProperty('shop');\n      });\n    });\n\n    describe('findUnique', () => {\n      it('should find user by id', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.findUnique({\n          where: { id: 1 },\n        });\n\n        expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n          where: { id: 1 },\n        });\n        expect(result).toEqual(mockUser);\n      });\n\n      it('should find user by email', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.findUnique({\n          where: { email: 'test@example.com' },\n        });\n\n        expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n          where: { email: 'test@example.com' },\n        });\n        expect(result).toEqual(mockUser);\n      });\n\n      it('should return null for non-existent user', async () => {\n        mockPrisma.user.findUnique.mockResolvedValue(null);\n\n        const result = await prisma.user.findUnique({\n          where: { id: 999 },\n        });\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new user', async () => {\n        const newUserData = {\n          username: 'newuser',\n          email: 'new@example.com',\n          password: 'hashedpassword',\n          firstName: 'New',\n          lastName: 'User',\n          roleId: 2,\n        };\n        const createdUser = { ...mockUser, ...newUserData, id: 3 };\n        mockPrisma.user.create.mockResolvedValue(createdUser as any);\n\n        const result = await prisma.user.create({\n          data: newUserData,\n        });\n\n        expect(mockPrisma.user.create).toHaveBeenCalledWith({\n          data: newUserData,\n        });\n        expect(result).toEqual(createdUser);\n      });\n    });\n\n    describe('update', () => {\n      it('should update user data', async () => {\n        const updateData = { firstName: 'Updated', lastName: 'Name' };\n        const updatedUser = { ...mockUser, ...updateData };\n        mockPrisma.user.update.mockResolvedValue(updatedUser as any);\n\n        const result = await prisma.user.update({\n          where: { id: 1 },\n          data: updateData,\n        });\n\n        expect(mockPrisma.user.update).toHaveBeenCalledWith({\n          where: { id: 1 },\n          data: updateData,\n        });\n        expect(result).toEqual(updatedUser);\n      });\n    });\n\n    describe('delete', () => {\n      it('should delete a user', async () => {\n        mockPrisma.user.delete.mockResolvedValue(mockUser as any);\n\n        const result = await prisma.user.delete({\n          where: { id: 1 },\n        });\n\n        expect(mockPrisma.user.delete).toHaveBeenCalledWith({\n          where: { id: 1 },\n        });\n        expect(result).toEqual(mockUser);\n      });\n    });\n  });\n\n  describe('Product Model Operations', () => {\n    const mockProduct = {\n      id: 1,\n      name: 'Test Product',\n      description: 'Test Description',\n      price: 99.99,\n      costPrice: 50.00,\n      sku: 'TEST-001',\n      barcode: '1234567890',\n      categoryId: 1,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active products', async () => {\n        const mockProducts = [mockProduct, { ...mockProduct, id: 2, name: 'Product 2' }];\n        mockPrisma.product.findMany.mockResolvedValue(mockProducts as any);\n\n        const result = await prisma.product.findMany({\n          where: { isActive: true },\n        });\n\n        expect(mockPrisma.product.findMany).toHaveBeenCalledWith({\n          where: { isActive: true },\n        });\n        expect(result).toEqual(mockProducts);\n      });\n\n      it('should fetch products with category and inventory', async () => {\n        const mockProductsWithRelations = [{\n          ...mockProduct,\n          category: { id: 1, name: 'Electronics' },\n          inventoryItems: [{ id: 1, quantity: 100, shopId: 'shop1' }],\n        }];\n        mockPrisma.product.findMany.mockResolvedValue(mockProductsWithRelations as any);\n\n        const result = await prisma.product.findMany({\n          include: {\n            category: true,\n            inventoryItems: true,\n          },\n        });\n\n        expect(result[0]).toHaveProperty('category');\n        expect(result[0]).toHaveProperty('inventoryItems');\n      });\n    });\n\n    describe('findUnique', () => {\n      it('should find product by id', async () => {\n        mockPrisma.product.findUnique.mockResolvedValue(mockProduct as any);\n\n        const result = await prisma.product.findUnique({\n          where: { id: 1 },\n        });\n\n        expect(result).toEqual(mockProduct);\n      });\n\n      it('should find product by SKU', async () => {\n        mockPrisma.product.findUnique.mockResolvedValue(mockProduct as any);\n\n        const result = await prisma.product.findUnique({\n          where: { sku: 'TEST-001' },\n        });\n\n        expect(result).toEqual(mockProduct);\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new product', async () => {\n        const newProductData = {\n          name: 'New Product',\n          price: 149.99,\n          costPrice: 75.00,\n          sku: 'NEW-001',\n          categoryId: 1,\n        };\n        const createdProduct = { ...mockProduct, ...newProductData, id: 3 };\n        mockPrisma.product.create.mockResolvedValue(createdProduct as any);\n\n        const result = await prisma.product.create({\n          data: newProductData,\n        });\n\n        expect(result).toEqual(createdProduct);\n      });\n    });\n  });\n\n  describe('Customer Model Operations', () => {\n    const mockCustomer = {\n      id: 1,\n      name: 'Test Customer',\n      email: 'customer@example.com',\n      phone: '+1234567890',\n      address: '123 Test St',\n      city: 'Test City',\n      status: 'active',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch all active customers', async () => {\n        const mockCustomers = [mockCustomer, { ...mockCustomer, id: 2, name: 'Customer 2' }];\n        mockPrisma.customer.findMany.mockResolvedValue(mockCustomers as any);\n\n        const result = await prisma.customer.findMany({\n          where: { status: 'active' },\n        });\n\n        expect(result).toEqual(mockCustomers);\n      });\n\n      it('should fetch customers with invoices', async () => {\n        const mockCustomersWithInvoices = [{\n          ...mockCustomer,\n          invoices: [{ id: 1, total: 100.00, status: 'paid' }],\n        }];\n        mockPrisma.customer.findMany.mockResolvedValue(mockCustomersWithInvoices as any);\n\n        const result = await prisma.customer.findMany({\n          include: { invoices: true },\n        });\n\n        expect(result[0]).toHaveProperty('invoices');\n      });\n    });\n\n    describe('create', () => {\n      it('should create a new customer', async () => {\n        const newCustomerData = {\n          name: 'New Customer',\n          email: 'new@customer.com',\n          phone: '+9876543210',\n        };\n        const createdCustomer = { ...mockCustomer, ...newCustomerData, id: 3 };\n        mockPrisma.customer.create.mockResolvedValue(createdCustomer as any);\n\n        const result = await prisma.customer.create({\n          data: newCustomerData,\n        });\n\n        expect(result).toEqual(createdCustomer);\n      });\n    });\n  });\n\n  describe('Invoice Model Operations', () => {\n    const mockInvoice = {\n      id: 1,\n      invoiceNumber: 'INV-001',\n      customerId: 1,\n      total: 199.99,\n      status: 'pending',\n      paymentMethod: 'Cash',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch invoices with filters', async () => {\n        const mockInvoices = [mockInvoice, { ...mockInvoice, id: 2, invoiceNumber: 'INV-002' }];\n        mockPrisma.invoice.findMany.mockResolvedValue(mockInvoices as any);\n\n        const result = await prisma.invoice.findMany({\n          where: {\n            status: 'pending',\n            createdAt: {\n              gte: new Date('2024-01-01'),\n            },\n          },\n          orderBy: { createdAt: 'desc' },\n        });\n\n        expect(mockPrisma.invoice.findMany).toHaveBeenCalledWith({\n          where: {\n            status: 'pending',\n            createdAt: {\n              gte: new Date('2024-01-01'),\n            },\n          },\n          orderBy: { createdAt: 'desc' },\n        });\n        expect(result).toEqual(mockInvoices);\n      });\n\n      it('should fetch invoices with customer and items', async () => {\n        const mockInvoicesWithRelations = [{\n          ...mockInvoice,\n          customer: { id: 1, name: 'Test Customer' },\n          items: [{ id: 1, productId: 1, quantity: 2, price: 99.99 }],\n        }];\n        mockPrisma.invoice.findMany.mockResolvedValue(mockInvoicesWithRelations as any);\n\n        const result = await prisma.invoice.findMany({\n          include: {\n            customer: true,\n            items: { include: { product: true } },\n          },\n        });\n\n        expect(result[0]).toHaveProperty('customer');\n        expect(result[0]).toHaveProperty('items');\n      });\n    });\n\n    describe('create', () => {\n      it('should create invoice with items', async () => {\n        const invoiceData = {\n          invoiceNumber: 'INV-003',\n          customerId: 1,\n          total: 299.99,\n          status: 'pending',\n          items: {\n            create: [\n              { productId: 1, quantity: 2, price: 99.99, total: 199.98 },\n              { productId: 2, quantity: 1, price: 100.01, total: 100.01 },\n            ],\n          },\n        };\n        const createdInvoice = { ...mockInvoice, ...invoiceData, id: 3 };\n        mockPrisma.invoice.create.mockResolvedValue(createdInvoice as any);\n\n        const result = await prisma.invoice.create({\n          data: invoiceData,\n          include: { items: true },\n        });\n\n        expect(mockPrisma.invoice.create).toHaveBeenCalledWith({\n          data: invoiceData,\n          include: { items: true },\n        });\n        expect(result).toEqual(createdInvoice);\n      });\n    });\n  });\n\n  describe('Inventory Model Operations', () => {\n    const mockInventoryItem = {\n      id: 1,\n      productId: 1,\n      shopId: 'shop1',\n      quantity: 100,\n      minStockLevel: 10,\n      maxStockLevel: 500,\n      reorderPoint: 20,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    describe('findMany', () => {\n      it('should fetch inventory items by shop', async () => {\n        const mockInventoryItems = [mockInventoryItem, { ...mockInventoryItem, id: 2, productId: 2 }];\n        mockPrisma.inventoryItem.findMany.mockResolvedValue(mockInventoryItems as any);\n\n        const result = await prisma.inventoryItem.findMany({\n          where: { shopId: 'shop1' },\n          include: { product: true },\n        });\n\n        expect(mockPrisma.inventoryItem.findMany).toHaveBeenCalledWith({\n          where: { shopId: 'shop1' },\n          include: { product: true },\n        });\n        expect(result).toEqual(mockInventoryItems);\n      });\n\n      it('should fetch low stock items', async () => {\n        const lowStockItems = [{ ...mockInventoryItem, quantity: 5 }];\n        mockPrisma.inventoryItem.findMany.mockResolvedValue(lowStockItems as any);\n\n        const result = await prisma.inventoryItem.findMany({\n          where: {\n            quantity: { lte: mockInventoryItem.minStockLevel },\n          },\n        });\n\n        expect(result).toEqual(lowStockItems);\n      });\n    });\n\n    describe('update', () => {\n      it('should update inventory quantity', async () => {\n        const updatedItem = { ...mockInventoryItem, quantity: 150 };\n        mockPrisma.inventoryItem.update.mockResolvedValue(updatedItem as any);\n\n        const result = await prisma.inventoryItem.update({\n          where: {\n            productId_shopId: {\n              productId: 1,\n              shopId: 'shop1',\n            },\n          },\n          data: { quantity: 150 },\n        });\n\n        expect(result).toEqual(updatedItem);\n      });\n    });\n  });\n\n  describe('Transaction Operations', () => {\n    describe('$transaction', () => {\n      it('should execute multiple operations in a transaction', async () => {\n        const mockResults = [mockUser, mockProduct];\n        mockPrisma.$transaction.mockResolvedValue(mockResults as any);\n\n        const result = await prisma.$transaction([\n          prisma.user.create({ data: { username: 'test', email: 'test@test.com' } }),\n          prisma.product.create({ data: { name: 'Test Product', price: 99.99 } }),\n        ]);\n\n        expect(mockPrisma.$transaction).toHaveBeenCalled();\n        expect(result).toEqual(mockResults);\n      });\n\n      it('should handle transaction rollback on error', async () => {\n        const error = new Error('Transaction failed');\n        mockPrisma.$transaction.mockRejectedValue(error);\n\n        await expect(\n          prisma.$transaction([\n            prisma.user.create({ data: { username: 'test', email: 'test@test.com' } }),\n            prisma.product.create({ data: { name: 'Test Product', price: 99.99 } }),\n          ])\n        ).rejects.toThrow('Transaction failed');\n      });\n    });\n  });\n\n  describe('Connection Management', () => {\n    describe('$connect', () => {\n      it('should connect to database', async () => {\n        mockPrisma.$connect.mockResolvedValue(undefined);\n\n        await prisma.$connect();\n\n        expect(mockPrisma.$connect).toHaveBeenCalled();\n      });\n    });\n\n    describe('$disconnect', () => {\n      it('should disconnect from database', async () => {\n        mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n        await prisma.$disconnect();\n\n        expect(mockPrisma.$disconnect).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      const connectionError = new Error('Database connection failed');\n      mockPrisma.user.findMany.mockRejectedValue(connectionError);\n\n      await expect(prisma.user.findMany()).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle unique constraint violations', async () => {\n      const uniqueError = new Error('Unique constraint failed');\n      mockPrisma.user.create.mockRejectedValue(uniqueError);\n\n      await expect(\n        prisma.user.create({\n          data: { username: 'existing', email: 'existing@test.com' },\n        })\n      ).rejects.toThrow('Unique constraint failed');\n    });\n\n    it('should handle foreign key constraint violations', async () => {\n      const fkError = new Error('Foreign key constraint failed');\n      mockPrisma.product.create.mockRejectedValue(fkError);\n\n      await expect(\n        prisma.product.create({\n          data: { name: 'Test', price: 99.99, categoryId: 999 },\n        })\n      ).rejects.toThrow('Foreign key constraint failed');\n    });\n  });\n});"],"names":["jest","mock","__esModule","default","mockPrisma","prisma","mockDeep","describe","beforeEach","mockReset","mockUser","id","username","email","password","firstName","lastName","isActive","roleId","shopId","createdAt","Date","updatedAt","it","mockUsers","user","findMany","mockResolvedValue","result","where","expect","toHaveBeenCalledWith","toEqual","toHaveLength","mockUsersWithRelations","role","name","permissions","shop","include","toHaveProperty","findUnique","toBeNull","newUserData","createdUser","create","data","updateData","updatedUser","update","delete","mockProduct","description","price","costPrice","sku","barcode","categoryId","mockProducts","product","mockProductsWithRelations","category","inventoryItems","quantity","newProductData","createdProduct","mockCustomer","phone","address","city","status","mockCustomers","customer","mockCustomersWithInvoices","invoices","total","newCustomerData","createdCustomer","mockInvoice","invoiceNumber","customerId","paymentMethod","mockInvoices","invoice","gte","orderBy","mockInvoicesWithRelations","items","productId","invoiceData","createdInvoice","mockInventoryItem","minStockLevel","maxStockLevel","reorderPoint","mockInventoryItems","inventoryItem","lowStockItems","lte","updatedItem","productId_shopId","mockResults","$transaction","toHaveBeenCalled","error","Error","mockRejectedValue","rejects","toThrow","$connect","undefined","$disconnect","connectionError","uniqueError","fkError"],"mappings":"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"}