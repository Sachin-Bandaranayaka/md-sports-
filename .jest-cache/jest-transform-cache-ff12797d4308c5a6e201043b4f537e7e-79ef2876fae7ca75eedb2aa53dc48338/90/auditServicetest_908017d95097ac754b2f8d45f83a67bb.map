{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/auditService.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { AuditService, AuditLogEntry, RecycleBinItem } from '@/services/auditService';\nimport { PrismaClient } from '@prisma/client';\n\n// Mock Prisma\nconst mockPrisma = {\n  auditLog: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n    findFirst: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn(),\n  },\n  user: {\n    findUnique: jest.fn(),\n  },\n};\n\njest.mock('@/lib/prisma', () => ({\n  prisma: mockPrisma,\n}));\n\ndescribe('AuditService', () => {\n  let auditService: AuditService;\n\n  beforeEach(() => {\n    auditService = AuditService.getInstance();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('getInstance', () => {\n    it('should return a singleton instance', () => {\n      const instance1 = AuditService.getInstance();\n      const instance2 = AuditService.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe('logAction', () => {\n    it('should successfully log an audit entry', async () => {\n      const entry: AuditLogEntry = {\n        userId: 1,\n        action: 'CREATE',\n        entity: 'Product',\n        entityId: 123,\n        details: { name: 'Test Product' },\n      };\n\n      mockPrisma.auditLog.create.mockResolvedValue({ id: 1, ...entry });\n\n      await auditService.logAction(entry);\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          userId: 1,\n          action: 'CREATE',\n          entity: 'Product',\n          entityId: 123,\n          details: {\n            name: 'Test Product',\n            originalData: undefined,\n            isDeleted: false,\n            deletedAt: undefined,\n            deletedBy: undefined,\n            canRecover: false,\n            recoveredAt: undefined,\n            recoveredBy: undefined,\n          },\n        },\n      });\n    });\n\n    it('should handle errors gracefully without throwing', async () => {\n      const entry: AuditLogEntry = {\n        userId: 1,\n        action: 'CREATE',\n        entity: 'Product',\n        entityId: 123,\n      };\n\n      mockPrisma.auditLog.create.mockRejectedValue(new Error('Database error'));\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await expect(auditService.logAction(entry)).resolves.not.toThrow();\n      expect(consoleSpy).toHaveBeenCalledWith('Failed to log audit entry:', expect.any(Error));\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should log soft delete with all required fields', async () => {\n      const entry: AuditLogEntry = {\n        userId: 1,\n        action: 'DELETE',\n        entity: 'Product',\n        entityId: 123,\n        originalData: { name: 'Test Product', price: 100 },\n        isDeleted: true,\n        deletedAt: new Date(),\n        deletedBy: 1,\n        canRecover: true,\n      };\n\n      mockPrisma.auditLog.create.mockResolvedValue({ id: 1, ...entry });\n\n      await auditService.logAction(entry);\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          userId: 1,\n          action: 'DELETE',\n          entity: 'Product',\n          entityId: 123,\n          details: expect.objectContaining({\n            originalData: { name: 'Test Product', price: 100 },\n            isDeleted: true,\n            deletedBy: 1,\n            canRecover: true,\n          }),\n        },\n      });\n    });\n  });\n\n  describe('softDelete', () => {\n    it('should log a soft delete action', async () => {\n      const originalData = { name: 'Test Product', price: 100 };\n      mockPrisma.auditLog.create.mockResolvedValue({ id: 1 });\n\n      await auditService.softDelete('Product', 123, originalData, 1, true);\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          userId: 1,\n          action: 'DELETE',\n          entity: 'Product',\n          entityId: 123,\n          details: expect.objectContaining({\n            originalData,\n            isDeleted: true,\n            deletedBy: 1,\n            canRecover: true,\n            deletedAt: expect.any(Date),\n          }),\n        },\n      });\n    });\n\n    it('should default canRecover to true', async () => {\n      const originalData = { name: 'Test Product' };\n      mockPrisma.auditLog.create.mockResolvedValue({ id: 1 });\n\n      await auditService.softDelete('Product', 123, originalData, 1);\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          details: expect.objectContaining({\n            canRecover: true,\n          }),\n        }),\n      });\n    });\n  });\n\n  describe('getDeletedEntityIds', () => {\n    it('should return array of deleted entity IDs', async () => {\n      const mockAuditLogs = [\n        { entityId: 1, details: { isDeleted: true } },\n        { entityId: 2, details: { isDeleted: true } },\n        { entityId: 3, details: { isDeleted: true } },\n      ];\n\n      mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);\n\n      const result = await auditService.getDeletedEntityIds('Product');\n\n      expect(result).toEqual([1, 2, 3]);\n      expect(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({\n        where: {\n          entity: 'Product',\n          action: 'DELETE',\n          details: {\n            path: ['isDeleted'],\n            equals: true,\n          },\n        },\n        select: {\n          entityId: true,\n        },\n      });\n    });\n\n    it('should return empty array when no deleted entities found', async () => {\n      mockPrisma.auditLog.findMany.mockResolvedValue([]);\n\n      const result = await auditService.getDeletedEntityIds('Product');\n\n      expect(result).toEqual([]);\n    });\n\n    it('should handle database errors', async () => {\n      mockPrisma.auditLog.findMany.mockRejectedValue(new Error('Database error'));\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const result = await auditService.getDeletedEntityIds('Product');\n\n      expect(result).toEqual([]);\n      expect(consoleSpy).toHaveBeenCalledWith('Error fetching deleted entity IDs:', expect.any(Error));\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('getRecycleBinItems', () => {\n    it('should return paginated recycle bin items with user information', async () => {\n      const mockAuditLogs = [\n        {\n          id: 1,\n          entity: 'Product',\n          entityId: 123,\n          details: {\n            originalData: { name: 'Test Product' },\n            deletedAt: new Date('2023-01-01'),\n            deletedBy: 1,\n            canRecover: true,\n          },\n        },\n      ];\n\n      const mockUser = {\n        id: 1,\n        name: 'Test User',\n        email: 'test@example.com',\n      };\n\n      mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);\n      mockPrisma.auditLog.count.mockResolvedValue(1);\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const result = await auditService.getRecycleBinItems(1, 10);\n\n      expect(result.items).toHaveLength(1);\n      expect(result.total).toBe(1);\n      expect(result.items[0]).toEqual({\n        id: 1,\n        entity: 'Product',\n        entityId: 123,\n        originalData: { name: 'Test Product' },\n        deletedAt: new Date('2023-01-01'),\n        deletedBy: 1,\n        deletedByUser: mockUser,\n        canRecover: true,\n      });\n    });\n\n    it('should handle pagination correctly', async () => {\n      mockPrisma.auditLog.findMany.mockResolvedValue([]);\n      mockPrisma.auditLog.count.mockResolvedValue(0);\n\n      await auditService.getRecycleBinItems(2, 5);\n\n      expect(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({\n        where: {\n          action: 'DELETE',\n          details: {\n            path: ['isDeleted'],\n            equals: true,\n          },\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: 5, // (page - 1) * limit = (2 - 1) * 5\n        take: 5,\n      });\n    });\n\n    it('should handle missing user information gracefully', async () => {\n      const mockAuditLogs = [\n        {\n          id: 1,\n          entity: 'Product',\n          entityId: 123,\n          details: {\n            originalData: { name: 'Test Product' },\n            deletedAt: new Date('2023-01-01'),\n            deletedBy: 999, // Non-existent user\n            canRecover: true,\n          },\n        },\n      ];\n\n      mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);\n      mockPrisma.auditLog.count.mockResolvedValue(1);\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const result = await auditService.getRecycleBinItems(1, 10);\n\n      expect(result.items[0].deletedByUser).toBeUndefined();\n    });\n  });\n\n  describe('recoverEntity', () => {\n    it('should log recovery action for an entity', async () => {\n      mockPrisma.auditLog.create.mockResolvedValue({ id: 1 });\n\n      await auditService.recoverEntity('Product', 123, 1);\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          userId: 1,\n          action: 'RECOVER',\n          entity: 'Product',\n          entityId: 123,\n          details: expect.objectContaining({\n            recoveredAt: expect.any(Date),\n            recoveredBy: 1,\n          }),\n        },\n      });\n    });\n  });\n\n  describe('getAuditHistory', () => {\n    it('should return audit history for an entity', async () => {\n      const mockAuditLogs = [\n        {\n          id: 1,\n          action: 'CREATE',\n          userId: 1,\n          createdAt: new Date('2023-01-01'),\n          details: { name: 'Test Product' },\n        },\n        {\n          id: 2,\n          action: 'UPDATE',\n          userId: 1,\n          createdAt: new Date('2023-01-02'),\n          details: { name: 'Updated Product' },\n        },\n      ];\n\n      mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);\n\n      const result = await auditService.getAuditHistory('Product', 123);\n\n      expect(result).toEqual(mockAuditLogs);\n      expect(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({\n        where: {\n          entity: 'Product',\n          entityId: 123,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n            },\n          },\n        },\n      });\n    });\n\n    it('should handle database errors', async () => {\n      mockPrisma.auditLog.findMany.mockRejectedValue(new Error('Database error'));\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const result = await auditService.getAuditHistory('Product', 123);\n\n      expect(result).toEqual([]);\n      expect(consoleSpy).toHaveBeenCalledWith('Error fetching audit history:', expect.any(Error));\n\n      consoleSpy.mockRestore();\n    });\n  });\n});"],"names":["mockPrisma","auditLog","create","jest","fn","findMany","findFirst","update","delete","count","user","findUnique","mock","prisma","describe","auditService","beforeEach","AuditService","getInstance","clearAllMocks","afterEach","resetAllMocks","it","instance1","instance2","expect","toBe","entry","userId","action","entity","entityId","details","name","mockResolvedValue","id","logAction","toHaveBeenCalledWith","data","originalData","undefined","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","mockRejectedValue","Error","consoleSpy","spyOn","console","mockImplementation","resolves","not","toThrow","any","mockRestore","price","Date","objectContaining","softDelete","mockAuditLogs","result","getDeletedEntityIds","toEqual","where","path","equals","select","mockUser","email","getRecycleBinItems","items","toHaveLength","total","deletedByUser","orderBy","createdAt","skip","take","toBeUndefined","recoverEntity","getAuditHistory","include"],"mappings":"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"}