{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/api/apiRoutes.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('API Routes Testing', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with API access permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'API User',\n        email: 'api@test.com',\n        permissions: ['api:access', 'sales:all', 'inventory:all', 'customers:all']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      hasPermission: jest.fn(() => true)\n    });\n  });\n\n  describe('Authentication API Routes', () => {\n    test('should handle POST /api/auth/login', async () => {\n      const testLogin = async (credentials: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            token: 'jwt-token-123',\n            user: {\n              id: '1',\n              email: credentials.email,\n              name: 'Test User',\n              permissions: ['sales:view']\n            },\n            expiresIn: 3600\n          })\n        });\n\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(credentials)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testLogin({ email: 'test@example.com', password: 'password123' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.token).toBe('jwt-token-123');\n      expect(mockFetch).toHaveBeenCalledWith('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email: 'test@example.com', password: 'password123' })\n      });\n    });\n\n    test('should handle POST /api/auth/logout', async () => {\n      const testLogout = async (token: string) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            message: 'Logged out successfully'\n          })\n        });\n\n        const response = await fetch('/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testLogout('mock-token');\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n    });\n\n    test('should handle POST /api/auth/refresh', async () => {\n      const testRefresh = async (token: string) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            token: 'new-jwt-token-456',\n            expiresIn: 3600\n          })\n        });\n\n        const response = await fetch('/api/auth/refresh', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testRefresh('old-token');\n      \n      expect(result.status).toBe(200);\n      expect(result.data.token).toBe('new-jwt-token-456');\n    });\n\n    test('should handle authentication errors', async () => {\n      const testAuthError = async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 401,\n          json: async () => ({\n            success: false,\n            message: 'Invalid credentials',\n            error: 'UNAUTHORIZED'\n          })\n        });\n\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ email: 'wrong@example.com', password: 'wrongpass' })\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testAuthError();\n      \n      expect(result.status).toBe(401);\n      expect(result.data.success).toBe(false);\n      expect(result.data.error).toBe('UNAUTHORIZED');\n    });\n  });\n\n  describe('Sales Invoice API Routes', () => {\n    test('should handle GET /api/sales/invoices', async () => {\n      const testGetInvoices = async (params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            invoices: [\n              {\n                id: 'inv-1',\n                invoiceNumber: 'INV-001',\n                customerId: 'cust-1',\n                amount: 1000,\n                status: 'paid',\n                createdAt: '2024-01-01T00:00:00Z'\n              },\n              {\n                id: 'inv-2',\n                invoiceNumber: 'INV-002',\n                customerId: 'cust-2',\n                amount: 1500,\n                status: 'pending',\n                createdAt: '2024-01-02T00:00:00Z'\n              }\n            ],\n            pagination: {\n              page: 1,\n              limit: 10,\n              total: 2,\n              pages: 1\n            }\n          })\n        });\n\n        const url = queryString ? `/api/sales/invoices?${queryString}` : '/api/sales/invoices';\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetInvoices({ page: 1, limit: 10, status: 'pending' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.invoices).toHaveLength(2);\n      expect(result.data.pagination.total).toBe(2);\n    });\n\n    test('should handle POST /api/sales/invoices', async () => {\n      const testCreateInvoice = async (invoiceData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 201,\n          json: async () => ({\n            success: true,\n            invoice: {\n              id: 'inv-new',\n              ...invoiceData,\n              invoiceNumber: 'INV-003',\n              createdAt: new Date().toISOString()\n            },\n            message: 'Invoice created successfully'\n          })\n        });\n\n        const response = await fetch('/api/sales/invoices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(invoiceData)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const invoiceData = {\n        customerId: 'cust-1',\n        items: [\n          { productId: 'prod-1', quantity: 2, price: 500 }\n        ],\n        subtotal: 1000,\n        tax: 100,\n        total: 1100\n      };\n\n      const result = await testCreateInvoice(invoiceData);\n      \n      expect(result.status).toBe(201);\n      expect(result.data.success).toBe(true);\n      expect(result.data.invoice.id).toBe('inv-new');\n    });\n\n    test('should handle PUT /api/sales/invoices/[id]', async () => {\n      const testUpdateInvoice = async (invoiceId: string, updateData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            invoice: {\n              id: invoiceId,\n              ...updateData,\n              updatedAt: new Date().toISOString()\n            },\n            message: 'Invoice updated successfully'\n          })\n        });\n\n        const response = await fetch(`/api/sales/invoices/${invoiceId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(updateData)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testUpdateInvoice('inv-1', { status: 'paid' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.invoice.status).toBe('paid');\n    });\n\n    test('should handle DELETE /api/sales/invoices/[id]', async () => {\n      const testDeleteInvoice = async (invoiceId: string) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            message: 'Invoice deleted successfully'\n          })\n        });\n\n        const response = await fetch(`/api/sales/invoices/${invoiceId}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testDeleteInvoice('inv-1');\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n    });\n  });\n\n  describe('Inventory API Routes', () => {\n    test('should handle GET /api/inventory/products', async () => {\n      const testGetProducts = async (params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            products: [\n              {\n                id: 'prod-1',\n                name: 'Product A',\n                sku: 'SKU-001',\n                price: 100,\n                stock: 50,\n                category: 'Electronics'\n              },\n              {\n                id: 'prod-2',\n                name: 'Product B',\n                sku: 'SKU-002',\n                price: 200,\n                stock: 25,\n                category: 'Clothing'\n              }\n            ],\n            pagination: {\n              page: 1,\n              limit: 10,\n              total: 2,\n              pages: 1\n            }\n          })\n        });\n\n        const url = queryString ? `/api/inventory/products?${queryString}` : '/api/inventory/products';\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetProducts({ category: 'Electronics', inStock: true });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.products).toHaveLength(2);\n    });\n\n    test('should handle POST /api/inventory/products', async () => {\n      const testCreateProduct = async (productData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 201,\n          json: async () => ({\n            success: true,\n            product: {\n              id: 'prod-new',\n              ...productData,\n              createdAt: new Date().toISOString()\n            },\n            message: 'Product created successfully'\n          })\n        });\n\n        const response = await fetch('/api/inventory/products', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(productData)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const productData = {\n        name: 'New Product',\n        sku: 'SKU-NEW',\n        price: 150,\n        stock: 100,\n        category: 'Books'\n      };\n\n      const result = await testCreateProduct(productData);\n      \n      expect(result.status).toBe(201);\n      expect(result.data.success).toBe(true);\n      expect(result.data.product.name).toBe('New Product');\n    });\n\n    test('should handle PUT /api/inventory/stock/[id]', async () => {\n      const testUpdateStock = async (productId: string, stockData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            product: {\n              id: productId,\n              stock: stockData.newStock,\n              updatedAt: new Date().toISOString()\n            },\n            stockMovement: {\n              id: 'mov-1',\n              productId,\n              type: stockData.type,\n              quantity: stockData.quantity,\n              reason: stockData.reason\n            },\n            message: 'Stock updated successfully'\n          })\n        });\n\n        const response = await fetch(`/api/inventory/stock/${productId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(stockData)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const stockData = {\n        type: 'adjustment',\n        quantity: 10,\n        newStock: 60,\n        reason: 'Stock count correction'\n      };\n\n      const result = await testUpdateStock('prod-1', stockData);\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.product.stock).toBe(60);\n    });\n  });\n\n  describe('Customer API Routes', () => {\n    test('should handle GET /api/customers', async () => {\n      const testGetCustomers = async (params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            customers: [\n              {\n                id: 'cust-1',\n                name: 'John Doe',\n                email: 'john@example.com',\n                phone: '+1234567890',\n                creditLimit: 5000,\n                currentBalance: 1200\n              },\n              {\n                id: 'cust-2',\n                name: 'Jane Smith',\n                email: 'jane@example.com',\n                phone: '+1987654321',\n                creditLimit: 3000,\n                currentBalance: 800\n              }\n            ],\n            pagination: {\n              page: 1,\n              limit: 10,\n              total: 2,\n              pages: 1\n            }\n          })\n        });\n\n        const url = queryString ? `/api/customers?${queryString}` : '/api/customers';\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetCustomers({ search: 'john', creditStatus: 'good' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.customers).toHaveLength(2);\n    });\n\n    test('should handle POST /api/customers', async () => {\n      const testCreateCustomer = async (customerData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 201,\n          json: async () => ({\n            success: true,\n            customer: {\n              id: 'cust-new',\n              ...customerData,\n              currentBalance: 0,\n              createdAt: new Date().toISOString()\n            },\n            message: 'Customer created successfully'\n          })\n        });\n\n        const response = await fetch('/api/customers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(customerData)\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const customerData = {\n        name: 'New Customer',\n        email: 'new@example.com',\n        phone: '+1555666777',\n        creditLimit: 2000\n      };\n\n      const result = await testCreateCustomer(customerData);\n      \n      expect(result.status).toBe(201);\n      expect(result.data.success).toBe(true);\n      expect(result.data.customer.name).toBe('New Customer');\n    });\n\n    test('should handle GET /api/customers/[id]/transactions', async () => {\n      const testGetCustomerTransactions = async (customerId: string, params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            transactions: [\n              {\n                id: 'txn-1',\n                type: 'invoice',\n                amount: 1000,\n                date: '2024-01-01T00:00:00Z',\n                description: 'Invoice INV-001'\n              },\n              {\n                id: 'txn-2',\n                type: 'payment',\n                amount: 500,\n                date: '2024-01-05T00:00:00Z',\n                description: 'Payment received'\n              }\n            ],\n            summary: {\n              totalInvoiced: 1000,\n              totalPaid: 500,\n              currentBalance: 500\n            }\n          })\n        });\n\n        const url = queryString ? `/api/customers/${customerId}/transactions?${queryString}` : `/api/customers/${customerId}/transactions`;\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetCustomerTransactions('cust-1', { startDate: '2024-01-01', endDate: '2024-01-31' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.transactions).toHaveLength(2);\n      expect(result.data.summary.currentBalance).toBe(500);\n    });\n  });\n\n  describe('Dashboard API Routes', () => {\n    test('should handle GET /api/dashboard', async () => {\n      const testGetDashboard = async (params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            data: {\n              sales: {\n                totalRevenue: 125000,\n                totalTransactions: 450,\n                averageOrderValue: 277.78,\n                growth: 15.5\n              },\n              inventory: {\n                totalItems: 1250,\n                lowStockItems: 23,\n                outOfStockItems: 5,\n                inventoryValue: 85000\n              },\n              customers: {\n                totalCustomers: 890,\n                newCustomers: 45,\n                activeCustomers: 234\n              }\n            }\n          })\n        });\n\n        const url = queryString ? `/api/dashboard?${queryString}` : '/api/dashboard';\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetDashboard({ range: '30d' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.data.sales.totalRevenue).toBe(125000);\n    });\n\n    test('should handle GET /api/analytics/charts/[type]', async () => {\n      const testGetChartData = async (chartType: string, params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        \n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            chartData: {\n              labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n              datasets: [{\n                label: 'Revenue',\n                data: [12000, 15000, 18000, 16000, 20000],\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                borderColor: 'rgba(54, 162, 235, 1)'\n              }]\n            },\n            metadata: {\n              total: 81000,\n              average: 16200,\n              growth: 12.5\n            }\n          })\n        });\n\n        const url = queryString ? `/api/analytics/charts/${chartType}?${queryString}` : `/api/analytics/charts/${chartType}`;\n        const response = await fetch(url, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testGetChartData('revenue', { period: '6m', groupBy: 'month' });\n      \n      expect(result.status).toBe(200);\n      expect(result.data.success).toBe(true);\n      expect(result.data.chartData.labels).toHaveLength(5);\n      expect(result.data.metadata.total).toBe(81000);\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle 404 errors', async () => {\n      const testNotFound = async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 404,\n          json: async () => ({\n            success: false,\n            message: 'Resource not found',\n            error: 'NOT_FOUND'\n          })\n        });\n\n        const response = await fetch('/api/nonexistent/route', {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testNotFound();\n      \n      expect(result.status).toBe(404);\n      expect(result.data.success).toBe(false);\n      expect(result.data.error).toBe('NOT_FOUND');\n    });\n\n    test('should handle validation errors', async () => {\n      const testValidationError = async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 400,\n          json: async () => ({\n            success: false,\n            message: 'Validation failed',\n            error: 'VALIDATION_ERROR',\n            details: [\n              { field: 'email', message: 'Invalid email format' },\n              { field: 'name', message: 'Name is required' }\n            ]\n          })\n        });\n\n        const response = await fetch('/api/customers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify({ email: 'invalid-email' })\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testValidationError();\n      \n      expect(result.status).toBe(400);\n      expect(result.data.success).toBe(false);\n      expect(result.data.error).toBe('VALIDATION_ERROR');\n      expect(result.data.details).toHaveLength(2);\n    });\n\n    test('should handle server errors', async () => {\n      const testServerError = async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 500,\n          json: async () => ({\n            success: false,\n            message: 'Internal server error',\n            error: 'INTERNAL_ERROR'\n          })\n        });\n\n        const response = await fetch('/api/sales/invoices', {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testServerError();\n      \n      expect(result.status).toBe(500);\n      expect(result.data.success).toBe(false);\n      expect(result.data.error).toBe('INTERNAL_ERROR');\n    });\n\n    test('should handle rate limiting', async () => {\n      const testRateLimit = async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 429,\n          json: async () => ({\n            success: false,\n            message: 'Too many requests',\n            error: 'RATE_LIMIT_EXCEEDED',\n            retryAfter: 60\n          })\n        });\n\n        const response = await fetch('/api/sales/invoices', {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return { status: response.status, data: await response.json() };\n      };\n\n      const result = await testRateLimit();\n      \n      expect(result.status).toBe(429);\n      expect(result.data.success).toBe(false);\n      expect(result.data.error).toBe('RATE_LIMIT_EXCEEDED');\n      expect(result.data.retryAfter).toBe(60);\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","mockFetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","hasPermission","test","testLogin","credentials","mockResolvedValueOnce","ok","status","json","success","token","expiresIn","response","method","headers","body","JSON","stringify","data","result","password","expect","toBe","toHaveBeenCalledWith","testLogout","message","testRefresh","testAuthError","error","testGetInvoices","params","queryString","URLSearchParams","toString","invoices","invoiceNumber","customerId","amount","createdAt","pagination","page","limit","total","pages","url","toHaveLength","testCreateInvoice","invoiceData","invoice","Date","toISOString","items","productId","quantity","price","subtotal","tax","testUpdateInvoice","invoiceId","updateData","updatedAt","testDeleteInvoice","testGetProducts","products","sku","stock","category","inStock","testCreateProduct","productData","product","testUpdateStock","stockData","newStock","stockMovement","type","reason","testGetCustomers","customers","phone","creditLimit","currentBalance","search","creditStatus","testCreateCustomer","customerData","customer","testGetCustomerTransactions","transactions","date","description","summary","totalInvoiced","totalPaid","startDate","endDate","testGetDashboard","sales","totalRevenue","totalTransactions","averageOrderValue","growth","inventory","totalItems","lowStockItems","outOfStockItems","inventoryValue","totalCustomers","newCustomers","activeCustomers","range","testGetChartData","chartType","chartData","labels","datasets","label","backgroundColor","borderColor","metadata","average","period","groupBy","testNotFound","testValidationError","details","field","testServerError","testRateLimit","retryAfter"],"mappings":"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"}