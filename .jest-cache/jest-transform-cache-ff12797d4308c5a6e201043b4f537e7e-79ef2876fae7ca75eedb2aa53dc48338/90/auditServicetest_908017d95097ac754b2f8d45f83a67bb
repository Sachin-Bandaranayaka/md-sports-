3ed5f56ea38aabf685edf91ae4dee9be
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _auditService = require("../../src/services/auditService");
// Mock Prisma
const mockPrisma = {
    auditLog: {
        create: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        findFirst: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    user: {
        findUnique: _globals.jest.fn()
    }
};
_globals.jest.mock("@/lib/prisma", ()=>({
        prisma: mockPrisma
    }));
(0, _globals.describe)("AuditService", ()=>{
    let auditService;
    (0, _globals.beforeEach)(()=>{
        auditService = _auditService.AuditService.getInstance();
        _globals.jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("getInstance", ()=>{
        (0, _globals.it)("should return a singleton instance", ()=>{
            const instance1 = _auditService.AuditService.getInstance();
            const instance2 = _auditService.AuditService.getInstance();
            (0, _globals.expect)(instance1).toBe(instance2);
        });
    });
    (0, _globals.describe)("logAction", ()=>{
        (0, _globals.it)("should successfully log an audit entry", async ()=>{
            const entry = {
                userId: 1,
                action: "CREATE",
                entity: "Product",
                entityId: 123,
                details: {
                    name: "Test Product"
                }
            };
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1,
                ...entry
            });
            await auditService.logAction(entry);
            (0, _globals.expect)(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                data: {
                    userId: 1,
                    action: "CREATE",
                    entity: "Product",
                    entityId: 123,
                    details: {
                        name: "Test Product",
                        originalData: undefined,
                        isDeleted: false,
                        deletedAt: undefined,
                        deletedBy: undefined,
                        canRecover: false,
                        recoveredAt: undefined,
                        recoveredBy: undefined
                    }
                }
            });
        });
        (0, _globals.it)("should handle errors gracefully without throwing", async ()=>{
            const entry = {
                userId: 1,
                action: "CREATE",
                entity: "Product",
                entityId: 123
            };
            mockPrisma.auditLog.create.mockRejectedValue(new Error("Database error"));
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(auditService.logAction(entry)).resolves.not.toThrow();
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Failed to log audit entry:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should log soft delete with all required fields", async ()=>{
            const entry = {
                userId: 1,
                action: "DELETE",
                entity: "Product",
                entityId: 123,
                originalData: {
                    name: "Test Product",
                    price: 100
                },
                isDeleted: true,
                deletedAt: new Date(),
                deletedBy: 1,
                canRecover: true
            };
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1,
                ...entry
            });
            await auditService.logAction(entry);
            (0, _globals.expect)(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                data: {
                    userId: 1,
                    action: "DELETE",
                    entity: "Product",
                    entityId: 123,
                    details: _globals.expect.objectContaining({
                        originalData: {
                            name: "Test Product",
                            price: 100
                        },
                        isDeleted: true,
                        deletedBy: 1,
                        canRecover: true
                    })
                }
            });
        });
    });
    (0, _globals.describe)("softDelete", ()=>{
        (0, _globals.it)("should log a soft delete action", async ()=>{
            const originalData = {
                name: "Test Product",
                price: 100
            };
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1
            });
            await auditService.softDelete("Product", 123, originalData, 1, true);
            (0, _globals.expect)(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                data: {
                    userId: 1,
                    action: "DELETE",
                    entity: "Product",
                    entityId: 123,
                    details: _globals.expect.objectContaining({
                        originalData,
                        isDeleted: true,
                        deletedBy: 1,
                        canRecover: true,
                        deletedAt: _globals.expect.any(Date)
                    })
                }
            });
        });
        (0, _globals.it)("should default canRecover to true", async ()=>{
            const originalData = {
                name: "Test Product"
            };
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1
            });
            await auditService.softDelete("Product", 123, originalData, 1);
            (0, _globals.expect)(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                data: _globals.expect.objectContaining({
                    details: _globals.expect.objectContaining({
                        canRecover: true
                    })
                })
            });
        });
    });
    (0, _globals.describe)("getDeletedEntityIds", ()=>{
        (0, _globals.it)("should return array of deleted entity IDs", async ()=>{
            const mockAuditLogs = [
                {
                    entityId: 1,
                    details: {
                        isDeleted: true
                    }
                },
                {
                    entityId: 2,
                    details: {
                        isDeleted: true
                    }
                },
                {
                    entityId: 3,
                    details: {
                        isDeleted: true
                    }
                }
            ];
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);
            const result = await auditService.getDeletedEntityIds("Product");
            (0, _globals.expect)(result).toEqual([
                1,
                2,
                3
            ]);
            (0, _globals.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "Product",
                    action: "DELETE",
                    details: {
                        path: [
                            "isDeleted"
                        ],
                        equals: true
                    }
                },
                select: {
                    entityId: true
                }
            });
        });
        (0, _globals.it)("should return empty array when no deleted entities found", async ()=>{
            mockPrisma.auditLog.findMany.mockResolvedValue([]);
            const result = await auditService.getDeletedEntityIds("Product");
            (0, _globals.expect)(result).toEqual([]);
        });
        (0, _globals.it)("should handle database errors", async ()=>{
            mockPrisma.auditLog.findMany.mockRejectedValue(new Error("Database error"));
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            const result = await auditService.getDeletedEntityIds("Product");
            (0, _globals.expect)(result).toEqual([]);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error fetching deleted entity IDs:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
    });
    (0, _globals.describe)("getRecycleBinItems", ()=>{
        (0, _globals.it)("should return paginated recycle bin items with user information", async ()=>{
            const mockAuditLogs = [
                {
                    id: 1,
                    entity: "Product",
                    entityId: 123,
                    details: {
                        originalData: {
                            name: "Test Product"
                        },
                        deletedAt: new Date("2023-01-01"),
                        deletedBy: 1,
                        canRecover: true
                    }
                }
            ];
            const mockUser = {
                id: 1,
                name: "Test User",
                email: "test@example.com"
            };
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);
            mockPrisma.auditLog.count.mockResolvedValue(1);
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const result = await auditService.getRecycleBinItems(1, 10);
            (0, _globals.expect)(result.items).toHaveLength(1);
            (0, _globals.expect)(result.total).toBe(1);
            (0, _globals.expect)(result.items[0]).toEqual({
                id: 1,
                entity: "Product",
                entityId: 123,
                originalData: {
                    name: "Test Product"
                },
                deletedAt: new Date("2023-01-01"),
                deletedBy: 1,
                deletedByUser: mockUser,
                canRecover: true
            });
        });
        (0, _globals.it)("should handle pagination correctly", async ()=>{
            mockPrisma.auditLog.findMany.mockResolvedValue([]);
            mockPrisma.auditLog.count.mockResolvedValue(0);
            await auditService.getRecycleBinItems(2, 5);
            (0, _globals.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    action: "DELETE",
                    details: {
                        path: [
                            "isDeleted"
                        ],
                        equals: true
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                skip: 5,
                take: 5
            });
        });
        (0, _globals.it)("should handle missing user information gracefully", async ()=>{
            const mockAuditLogs = [
                {
                    id: 1,
                    entity: "Product",
                    entityId: 123,
                    details: {
                        originalData: {
                            name: "Test Product"
                        },
                        deletedAt: new Date("2023-01-01"),
                        deletedBy: 999,
                        canRecover: true
                    }
                }
            ];
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);
            mockPrisma.auditLog.count.mockResolvedValue(1);
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const result = await auditService.getRecycleBinItems(1, 10);
            (0, _globals.expect)(result.items[0].deletedByUser).toBeUndefined();
        });
    });
    (0, _globals.describe)("recoverEntity", ()=>{
        (0, _globals.it)("should log recovery action for an entity", async ()=>{
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1
            });
            await auditService.recoverEntity("Product", 123, 1);
            (0, _globals.expect)(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                data: {
                    userId: 1,
                    action: "RECOVER",
                    entity: "Product",
                    entityId: 123,
                    details: _globals.expect.objectContaining({
                        recoveredAt: _globals.expect.any(Date),
                        recoveredBy: 1
                    })
                }
            });
        });
    });
    (0, _globals.describe)("getAuditHistory", ()=>{
        (0, _globals.it)("should return audit history for an entity", async ()=>{
            const mockAuditLogs = [
                {
                    id: 1,
                    action: "CREATE",
                    userId: 1,
                    createdAt: new Date("2023-01-01"),
                    details: {
                        name: "Test Product"
                    }
                },
                {
                    id: 2,
                    action: "UPDATE",
                    userId: 1,
                    createdAt: new Date("2023-01-02"),
                    details: {
                        name: "Updated Product"
                    }
                }
            ];
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogs);
            const result = await auditService.getAuditHistory("Product", 123);
            (0, _globals.expect)(result).toEqual(mockAuditLogs);
            (0, _globals.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "Product",
                    entityId: 123
                },
                orderBy: {
                    createdAt: "desc"
                },
                include: {
                    user: {
                        select: {
                            id: true,
                            name: true,
                            email: true
                        }
                    }
                }
            });
        });
        (0, _globals.it)("should handle database errors", async ()=>{
            mockPrisma.auditLog.findMany.mockRejectedValue(new Error("Database error"));
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            const result = await auditService.getAuditHistory("Product", 123);
            (0, _globals.expect)(result).toEqual([]);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error fetching audit history:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,