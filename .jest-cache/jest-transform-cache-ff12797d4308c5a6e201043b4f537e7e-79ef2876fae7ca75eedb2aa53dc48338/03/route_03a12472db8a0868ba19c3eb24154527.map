{"version":3,"names":["POST","JWT_SECRET","cov_9galnbarb","s","b","process","env","JWT_ACCESS_TOKEN_EXPIRES_IN","COOKIE_SECURE","NODE_ENV","req","f","cookieRefreshToken","cookies","get","value","tokenFromBody","body","json","refreshToken","e","console","log","tokenToVerify","hasCookieToken","hasTokenFromBody","tokenSource","tokenPreview","substring","_server","NextResponse","success","message","status","userId","_refreshTokenService","verifyRefreshToken","error","user","_prisma","safeQuery","default","findFirst","where","id","String","isActive","include","role","permissions","userName","name","userEmail","email","roleName","shopId","map","p","length","newAccessToken","_jsonwebtoken","sign","sub","username","roleId","expiresIn","response","accessToken","fullName","set","httpOnly","secure","sameSite","maxAge","_authService","parseTimeStringToSeconds","path"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as jwt from 'jsonwebtoken';\nimport { verifyRefreshToken, generateRefreshToken } from '@/services/refreshTokenService';\nimport { generateToken, parseTimeStringToSeconds } from '@/services/authService';\nimport prisma, { safeQuery } from '@/lib/prisma';\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n            tokenSource: cookieRefreshToken ? 'cookie' : 'body',\n            tokenPreview: tokenToVerify ? tokenToVerify.substring(0, 10) + '...' : 'none'\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: true\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user during token refresh'\n        );\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        // Log user details to help debug session switching\n        console.log('Token refresh for user:', {\n            userId: user.id,\n            userName: user.name,\n            userEmail: user.email,\n            roleName: user.role?.name || user.roleName,\n            shopId: user.shopId\n        });\n\n        // Handle case where user has no role assigned but may have direct permissions\n        let permissions: string[] = [];\n        \n        if (user.role) {\n            // User has a role, get permissions from role\n            permissions = user.role.permissions.map((p: { name: string }) => p.name);\n        } else if (user.permissions && user.permissions.length > 0) {\n            // User has no role but has direct permissions\n            permissions = user.permissions;\n            console.log('User has no role but has direct permissions for ID:', userId, 'Permissions:', permissions);\n        } else {\n            // User has neither role nor permissions\n            console.log('User has no role and no permissions assigned for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User has no role or permissions assigned'\n            }, { status: 401 });\n        }\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN } as any);\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}