5d8bd7188647c52c6a446a654ac0e52b
/**
 * Transfer-specific Cache Service
 * Optimized caching for inventory transfer operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TRANSFER_CACHE_CONFIG: function() {
        return TRANSFER_CACHE_CONFIG;
    },
    transferCacheService: function() {
        return transferCacheService;
    }
});
const _ioredis = require("ioredis");
const _cache = require("./cache");
// Cache configuration for transfers
const TRANSFER_CACHE_CONFIG = {
    TTL: {
        TRANSFER_LIST: 300,
        TRANSFER_DETAIL: 600,
        SHOP_INVENTORY: 180,
        TRANSFER_STATS: 900 // 15 minutes
    },
    KEYS: {
        TRANSFER_LIST: "transfers:list",
        TRANSFER_DETAIL: "transfers:detail",
        SHOP_INVENTORY: "inventory:shop",
        TRANSFER_STATS: "transfers:stats"
    }
};
class TransferCacheService {
    constructor(){
        this.redis = null;
        this.metrics = new Map();
        this.warmingInProgress = new Set();
        this.initializeRedis();
        this.startMetricsCollection();
    }
    initializeRedis() {
        if (process.env.REDIS_URL) {
            try {
                this.redis = new _ioredis.Redis(process.env.REDIS_URL);
                console.log("âœ“ Transfer cache Redis connection established");
            } catch (error) {
                console.error("âœ— Transfer cache Redis connection failed:", error);
            }
        }
    }
    startMetricsCollection() {
        setInterval(()=>{
            this.logMetrics();
        }, 60000); // Log metrics every minute
    }
    generateTransferCacheKey(baseKey, filters) {
        const keyParts = [
            baseKey
        ];
        if (filters.page) keyParts.push(`page:${filters.page}`);
        if (filters.limit) keyParts.push(`limit:${filters.limit}`);
        if (filters.status) keyParts.push(`status:${filters.status}`);
        if (filters.sourceShopId) keyParts.push(`src:${filters.sourceShopId}`);
        if (filters.destinationShopId) keyParts.push(`dst:${filters.destinationShopId}`);
        if (filters.search) keyParts.push(`search:${encodeURIComponent(filters.search)}`);
        if (filters.startDate) keyParts.push(`start:${filters.startDate}`);
        if (filters.endDate) keyParts.push(`end:${filters.endDate}`);
        return keyParts.join(":");
    }
    async get(key) {
        const startTime = performance.now();
        try {
            let data = null;
            // Try Redis first
            if (this.redis) {
                const cached = await this.redis.get(key);
                if (cached) {
                    data = JSON.parse(cached);
                    this.recordMetric(key, "hit", performance.now() - startTime);
                    return data;
                }
            }
            // Fallback to memory cache
            data = await _cache.cacheService.get(key);
            if (data) {
                this.recordMetric(key, "hit", performance.now() - startTime);
                return data;
            }
            this.recordMetric(key, "miss", performance.now() - startTime);
            return null;
        } catch (error) {
            console.error("Transfer cache get error:", error);
            this.recordMetric(key, "miss", performance.now() - startTime);
            return null;
        }
    }
    async set(key, data, ttl = TRANSFER_CACHE_CONFIG.TTL.TRANSFER_LIST) {
        try {
            const serialized = JSON.stringify(data);
            // Store in Redis
            if (this.redis) {
                await this.redis.setex(key, ttl, serialized);
            }
            // Store in memory cache as fallback
            await _cache.cacheService.set(key, data, ttl);
        } catch (error) {
            console.error("Transfer cache set error:", error);
        }
    }
    async getOrSet(key, fetcher, ttl) {
        // Try to get from cache first
        const cached = await this.get(key);
        if (cached !== null) {
            return cached;
        }
        // Fetch fresh data
        const data = await fetcher();
        // Store in cache
        await this.set(key, data, ttl);
        return data;
    }
    async invalidateTransferCache(transferId, shopIds) {
        try {
            const patterns = [
                `${TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_LIST}*`,
                `${TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_STATS}*`
            ];
            if (transferId) {
                patterns.push(`${TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_DETAIL}:${transferId}`);
            }
            if (shopIds) {
                shopIds.forEach((shopId)=>{
                    patterns.push(`${TRANSFER_CACHE_CONFIG.KEYS.SHOP_INVENTORY}:${shopId}*`);
                });
            }
            // Invalidate Redis cache
            if (this.redis) {
                for (const pattern of patterns){
                    const keys = await this.redis.keys(pattern);
                    if (keys.length > 0) {
                        await this.redis.del(...keys);
                    }
                }
            }
            // Invalidate memory cache
            for (const pattern of patterns){
                await _cache.cacheService.invalidatePattern(pattern);
            }
            console.log(`âœ“ Invalidated transfer cache for patterns: ${patterns.join(", ")}`);
        } catch (error) {
            console.error("Transfer cache invalidation error:", error);
        }
    }
    async warmTransferCache(filters) {
        const cacheKey = this.generateTransferCacheKey(TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_LIST, filters);
        if (this.warmingInProgress.has(cacheKey)) {
            return;
        }
        this.warmingInProgress.add(cacheKey);
        try {
            // This would be implemented with actual transfer fetching logic
            console.log(`ðŸ”¥ Warming transfer cache: ${cacheKey}`);
        // await this.fetchTransfersFromDB(filters);
        } catch (error) {
            console.error("Transfer cache warming error:", error);
        } finally{
            this.warmingInProgress.delete(cacheKey);
        }
    }
    recordMetric(key, type, responseTime) {
        const existing = this.metrics.get(key) || {
            hits: 0,
            misses: 0,
            totalRequests: 0,
            avgResponseTime: 0
        };
        if (type === "hit") {
            existing.hits++;
        } else {
            existing.misses++;
        }
        existing.totalRequests++;
        existing.avgResponseTime = (existing.avgResponseTime * (existing.totalRequests - 1) + responseTime) / existing.totalRequests;
        this.metrics.set(key, existing);
    }
    logMetrics() {
        if (this.metrics.size === 0) return;
        console.log("\uD83D\uDCCA Transfer Cache Metrics:");
        this.metrics.forEach((metric, key)=>{
            const hitRate = (metric.hits / metric.totalRequests * 100).toFixed(2);
            console.log(`  ${key}: ${hitRate}% hit rate, ${metric.avgResponseTime.toFixed(2)}ms avg`);
        });
    }
    getMetrics() {
        return new Map(this.metrics);
    }
    async clearAllCache() {
        try {
            if (this.redis) {
                const keys = await this.redis.keys("transfers:*");
                if (keys.length > 0) {
                    await this.redis.del(...keys);
                }
            }
            await _cache.cacheService.invalidatePattern("transfers:*");
            console.log("âœ“ Cleared all transfer cache");
        } catch (error) {
            console.error("Error clearing transfer cache:", error);
        }
    }
}
const transferCacheService = new TransferCacheService();

//# sourceMappingURL=data:application/json;base64,