fa7d92e41ca1b18c787a7a8b5fa6a3eb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _chatbotService = require("../../src/services/chatbotService");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock axios
_globals.jest.mock("axios");
const mockAxios = {
    get: _globals.jest.fn(),
    post: _globals.jest.fn(),
    isAxiosError: _globals.jest.fn()
};
_axios.default.get = mockAxios.get;
_axios.default.post = mockAxios.post;
_axios.default.isAxiosError = mockAxios.isAxiosError;
// Mock document.cookie for getCookie function
Object.defineProperty(global, "document", {
    value: {
        cookie: "",
        addEventListener: _globals.jest.fn(),
        removeEventListener: _globals.jest.fn()
    },
    writable: true
});
(0, _globals.describe)("ChatbotService", ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        // Reset document.cookie
        global.document.cookie = "";
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("sendMessage", ()=>{
        const mockMessages = [
            {
                role: "user",
                content: "Hello, how can I help?"
            },
            {
                role: "assistant",
                content: "I can help you with your sports equipment needs."
            }
        ];
        const mockResponse = {
            role: "assistant",
            content: "Thank you for your message. How can I assist you today?"
        };
        (0, _globals.it)("should send message successfully when API key is configured", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock successful chatbot response
            mockAxios.post.mockResolvedValue({
                data: mockResponse
            });
            const result = await _chatbotService.chatbotService.sendMessage(mockMessages);
            (0, _globals.expect)(result).toEqual(mockResponse);
            (0, _globals.expect)(mockAxios.get).toHaveBeenCalledWith("/api/test-settings");
            (0, _globals.expect)(mockAxios.post).toHaveBeenCalledWith("/api/chatbot", {
                messages: mockMessages
            }, {
                headers: {
                    "Content-Type": "application/json"
                }
            });
        });
        (0, _globals.it)("should include CSRF token when available", async ()=>{
            // Set CSRF token in cookie
            global.document.cookie = "csrfToken=test-csrf-token; other=value";
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock successful chatbot response
            mockAxios.post.mockResolvedValue({
                data: mockResponse
            });
            await _chatbotService.chatbotService.sendMessage(mockMessages);
            (0, _globals.expect)(mockAxios.post).toHaveBeenCalledWith("/api/chatbot", {
                messages: mockMessages
            }, {
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": "test-csrf-token"
                }
            });
        });
        (0, _globals.it)("should throw error when API key is not configured", async ()=>{
            // Mock API key check failure
            mockAxios.get.mockResolvedValue({
                data: {
                    success: false,
                    isEmpty: true,
                    valueLength: 0
                }
            });
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Deepseek API key is not configured. Please set it in the AI Assistant settings page.");
            (0, _globals.expect)(mockAxios.post).not.toHaveBeenCalled();
        });
        (0, _globals.it)("should throw error when API key is empty", async ()=>{
            // Mock API key check with empty key
            mockAxios.get.mockResolvedValueOnce({
                data: {
                    success: true,
                    isEmpty: true,
                    valueLength: 0
                }
            });
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Deepseek API key is not configured. Please set it in the AI Assistant settings page.");
        });
        (0, _globals.it)("should handle API key check errors", async ()=>{
            // Mock API key check error
            const configError = new Error("Configuration check failed");
            mockAxios.get.mockRejectedValueOnce(configError);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Configuration check failed");
        });
        (0, _globals.it)("should handle axios error with response data", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock axios error with response
            const axiosError = {
                isAxiosError: true,
                response: {
                    status: 400,
                    data: {
                        error: "Invalid request format"
                    }
                },
                toJSON: ()=>({
                        message: "Request failed"
                    })
            };
            mockAxios.post.mockRejectedValueOnce(axiosError);
            mockAxios.isAxiosError.mockReturnValue(true);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Invalid request format");
        });
        (0, _globals.it)("should handle 403 forbidden error", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock 403 error
            const axiosError = {
                isAxiosError: true,
                response: {
                    status: 403,
                    data: {}
                },
                toJSON: ()=>({
                        message: "Forbidden"
                    })
            };
            mockAxios.post.mockRejectedValueOnce(axiosError);
            mockAxios.isAxiosError.mockReturnValue(true);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.");
        });
        (0, _globals.it)("should handle network errors", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock network error (no response)
            const axiosError = {
                isAxiosError: true,
                request: {},
                response: undefined,
                toJSON: ()=>({
                        message: "Network Error"
                    })
            };
            mockAxios.post.mockRejectedValueOnce(axiosError);
            mockAxios.isAxiosError.mockReturnValue(true);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("No response received from the chatbot service. Please check your network connection and server status.");
        });
        (0, _globals.it)("should handle request setup errors", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock request setup error
            const axiosError = {
                isAxiosError: true,
                message: "Request setup failed",
                request: undefined,
                response: undefined,
                toJSON: ()=>({
                        message: "Request setup failed"
                    })
            };
            mockAxios.post.mockRejectedValueOnce(axiosError);
            mockAxios.isAxiosError.mockReturnValue(true);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Error setting up chatbot request: Request setup failed");
        });
        (0, _globals.it)("should handle non-axios errors", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock non-axios error
            const genericError = new Error("Generic error");
            mockAxios.post.mockRejectedValueOnce(genericError);
            mockAxios.isAxiosError.mockReturnValue(false);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Generic error");
        });
        (0, _globals.it)("should handle errors without message", async ()=>{
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock error without message
            const errorWithoutMessage = {};
            mockAxios.post.mockRejectedValueOnce(errorWithoutMessage);
            mockAxios.isAxiosError.mockReturnValue(false);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("An unexpected error occurred with the chatbot service.");
        });
        (0, _globals.it)("should handle API key check axios error with response data", async ()=>{
            // Mock API key check axios error
            const configAxiosError = {
                isAxiosError: true,
                response: {
                    data: {
                        message: "Settings API error"
                    }
                }
            };
            mockAxios.get.mockRejectedValueOnce(configAxiosError);
            await (0, _globals.expect)(_chatbotService.chatbotService.sendMessage(mockMessages)).rejects.toThrow("Settings API error");
        });
    });
    (0, _globals.describe)("getBusinessInfo", ()=>{
        (0, _globals.it)("should return business information", async ()=>{
            const businessInfo = await _chatbotService.chatbotService.getBusinessInfo();
            (0, _globals.expect)(businessInfo).toEqual({
                businessName: "MS Sports",
                inventoryCount: "Over 1,000 items",
                topSellingProducts: [
                    "Sports Shoes",
                    "Jerseys",
                    "Training Equipment"
                ],
                customerCount: "Over 500 registered customers",
                supplierCount: "50+ active suppliers"
            });
        });
        (0, _globals.it)("should return consistent data structure", async ()=>{
            const businessInfo = await _chatbotService.chatbotService.getBusinessInfo();
            (0, _globals.expect)(businessInfo).toHaveProperty("businessName");
            (0, _globals.expect)(businessInfo).toHaveProperty("inventoryCount");
            (0, _globals.expect)(businessInfo).toHaveProperty("topSellingProducts");
            (0, _globals.expect)(businessInfo).toHaveProperty("customerCount");
            (0, _globals.expect)(businessInfo).toHaveProperty("supplierCount");
            (0, _globals.expect)(Array.isArray(businessInfo.topSellingProducts)).toBe(true);
        });
    });
    (0, _globals.describe)("checkConfiguration", ()=>{
        (0, _globals.it)("should return configured when API key exists and is not empty", async ()=>{
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    exists: true,
                    isEmpty: false
                }
            });
            const result = await _chatbotService.chatbotService.checkConfiguration();
            (0, _globals.expect)(result).toEqual({
                isConfigured: true
            });
            (0, _globals.expect)(mockAxios.get).toHaveBeenCalledWith("/api/test-settings", {
                headers: {}
            });
        });
        (0, _globals.it)("should include CSRF token in configuration check", async ()=>{
            // Set CSRF token in cookie
            global.document.cookie = "csrfToken=config-csrf-token; other=value";
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    exists: true,
                    isEmpty: false
                }
            });
            await _chatbotService.chatbotService.checkConfiguration();
            (0, _globals.expect)(mockAxios.get).toHaveBeenCalledWith("/api/test-settings", {
                headers: {
                    "X-CSRF-Token": "config-csrf-token"
                }
            });
        });
        (0, _globals.it)("should return not configured when setting not found", async ()=>{
            mockAxios.get.mockResolvedValue({
                data: {
                    success: false,
                    exists: false
                }
            });
            const result = await _chatbotService.chatbotService.checkConfiguration();
            (0, _globals.expect)(result).toEqual({
                isConfigured: false,
                message: "API key setting not found in database"
            });
        });
        (0, _globals.it)("should return not configured when API key is empty", async ()=>{
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    exists: true,
                    isEmpty: true
                }
            });
            const result = await _chatbotService.chatbotService.checkConfiguration();
            (0, _globals.expect)(result).toEqual({
                isConfigured: false,
                message: "API key is empty. Please configure it in settings."
            });
        });
        (0, _globals.it)("should handle configuration check errors", async ()=>{
            const error = new Error("Network error");
            mockAxios.get.mockRejectedValueOnce(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            const result = await _chatbotService.chatbotService.checkConfiguration();
            (0, _globals.expect)(result).toEqual({
                isConfigured: false,
                message: "Failed to check configuration. Please try again."
            });
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error checking chatbot configuration:", error);
            consoleSpy.mockRestore();
        });
    });
    (0, _globals.describe)("getCookie function (via sendMessage)", ()=>{
        (0, _globals.it)("should extract CSRF token from cookie string", async ()=>{
            // Set multiple cookies including CSRF token
            global.document.cookie = "sessionId=abc123; csrfToken=test-token; userId=456";
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock successful chatbot response
            mockAxios.post.mockResolvedValue({
                data: {
                    role: "assistant",
                    content: "Response"
                }
            });
            await _chatbotService.chatbotService.sendMessage([
                {
                    role: "user",
                    content: "test"
                }
            ]);
            (0, _globals.expect)(mockAxios.post).toHaveBeenCalledWith("/api/chatbot", {
                messages: [
                    {
                        role: "user",
                        content: "test"
                    }
                ]
            }, {
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": "test-token"
                }
            });
        });
        (0, _globals.it)("should handle missing CSRF token gracefully", async ()=>{
            // Set cookies without CSRF token
            global.document.cookie = "sessionId=abc123; userId=456";
            // Mock successful API key check
            mockAxios.get.mockResolvedValue({
                data: {
                    success: true,
                    isEmpty: false,
                    valueLength: 32
                }
            });
            // Mock successful chatbot response
            mockAxios.post.mockResolvedValue({
                data: {
                    role: "assistant",
                    content: "Response"
                }
            });
            await _chatbotService.chatbotService.sendMessage([
                {
                    role: "user",
                    content: "test"
                }
            ]);
            (0, _globals.expect)(mockAxios.post).toHaveBeenCalledWith("/api/chatbot", {
                messages: [
                    {
                        role: "user",
                        content: "test"
                    }
                ]
            }, {
                headers: {
                    "Content-Type": "application/json"
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,