{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/chatbotService.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport axios, { AxiosError } from 'axios';\nimport { chatbotService, ChatMessage, ChatResponse } from '@/services/chatbotService';\n\n// Mock axios\njest.mock('axios');\nconst mockAxios = {\n  get: jest.fn(),\n  post: jest.fn(),\n  isAxiosError: jest.fn(),\n};\n(axios as any).get = mockAxios.get;\n(axios as any).post = mockAxios.post;\n(axios as any).isAxiosError = mockAxios.isAxiosError;\n\n// Mock document.cookie for getCookie function\nObject.defineProperty(global, 'document', {\n  value: {\n    cookie: '',\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n  },\n  writable: true,\n});\n\ndescribe('ChatbotService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset document.cookie\n    (global.document as any).cookie = '';\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('sendMessage', () => {\n    const mockMessages: ChatMessage[] = [\n      { role: 'user', content: 'Hello, how can I help?' },\n      { role: 'assistant', content: 'I can help you with your sports equipment needs.' }\n    ];\n\n    const mockResponse: ChatResponse = {\n      role: 'assistant',\n      content: 'Thank you for your message. How can I assist you today?'\n    };\n\n    it('should send message successfully when API key is configured', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock successful chatbot response\n      mockAxios.post.mockResolvedValue({\n        data: mockResponse\n      });\n\n      const result = await chatbotService.sendMessage(mockMessages);\n\n      expect(result).toEqual(mockResponse);\n      expect(mockAxios.get).toHaveBeenCalledWith('/api/test-settings');\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        '/api/chatbot',\n        { messages: mockMessages },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        }\n      );\n    });\n\n    it('should include CSRF token when available', async () => {\n      // Set CSRF token in cookie\n      (global.document as any).cookie = 'csrfToken=test-csrf-token; other=value';\n\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock successful chatbot response\n      mockAxios.post.mockResolvedValue({\n        data: mockResponse\n      });\n\n      await chatbotService.sendMessage(mockMessages);\n\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        '/api/chatbot',\n        { messages: mockMessages },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRF-Token': 'test-csrf-token'\n          }\n        }\n      );\n    });\n\n    it('should throw error when API key is not configured', async () => {\n      // Mock API key check failure\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: false,\n          isEmpty: true,\n          valueLength: 0\n        }\n      });\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Deepseek API key is not configured. Please set it in the AI Assistant settings page.');\n\n      expect(mockAxios.post).not.toHaveBeenCalled();\n    });\n\n    it('should throw error when API key is empty', async () => {\n      // Mock API key check with empty key\n      mockAxios.get.mockResolvedValueOnce({\n        data: {\n          success: true,\n          isEmpty: true,\n          valueLength: 0\n        }\n      });\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Deepseek API key is not configured. Please set it in the AI Assistant settings page.');\n    });\n\n    it('should handle API key check errors', async () => {\n      // Mock API key check error\n      const configError = new Error('Configuration check failed');\n      mockAxios.get.mockRejectedValueOnce(configError);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Configuration check failed');\n    });\n\n    it('should handle axios error with response data', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock axios error with response\n      const axiosError = {\n        isAxiosError: true,\n        response: {\n          status: 400,\n          data: {\n            error: 'Invalid request format'\n          }\n        },\n        toJSON: () => ({ message: 'Request failed' })\n      } as AxiosError;\n\n      mockAxios.post.mockRejectedValueOnce(axiosError);\n      mockAxios.isAxiosError.mockReturnValue(true);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Invalid request format');\n    });\n\n    it('should handle 403 forbidden error', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock 403 error\n      const axiosError = {\n        isAxiosError: true,\n        response: {\n          status: 403,\n          data: {}\n        },\n        toJSON: () => ({ message: 'Forbidden' })\n      } as AxiosError;\n\n      mockAxios.post.mockRejectedValueOnce(axiosError);\n      mockAxios.isAxiosError.mockReturnValue(true);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.');\n    });\n\n    it('should handle network errors', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock network error (no response)\n      const axiosError = {\n        isAxiosError: true,\n        request: {},\n        response: undefined,\n        toJSON: () => ({ message: 'Network Error' })\n      } as AxiosError;\n\n      mockAxios.post.mockRejectedValueOnce(axiosError);\n      mockAxios.isAxiosError.mockReturnValue(true);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('No response received from the chatbot service. Please check your network connection and server status.');\n    });\n\n    it('should handle request setup errors', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock request setup error\n      const axiosError = {\n        isAxiosError: true,\n        message: 'Request setup failed',\n        request: undefined,\n        response: undefined,\n        toJSON: () => ({ message: 'Request setup failed' })\n      } as AxiosError;\n\n      mockAxios.post.mockRejectedValueOnce(axiosError);\n      mockAxios.isAxiosError.mockReturnValue(true);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Error setting up chatbot request: Request setup failed');\n    });\n\n    it('should handle non-axios errors', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock non-axios error\n      const genericError = new Error('Generic error');\n      mockAxios.post.mockRejectedValueOnce(genericError);\n      mockAxios.isAxiosError.mockReturnValue(false);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Generic error');\n    });\n\n    it('should handle errors without message', async () => {\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock error without message\n      const errorWithoutMessage = {};\n      mockAxios.post.mockRejectedValueOnce(errorWithoutMessage);\n      mockAxios.isAxiosError.mockReturnValue(false);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('An unexpected error occurred with the chatbot service.');\n    });\n\n    it('should handle API key check axios error with response data', async () => {\n      // Mock API key check axios error\n      const configAxiosError = {\n        isAxiosError: true,\n        response: {\n          data: {\n            message: 'Settings API error'\n          }\n        }\n      } as AxiosError;\n\n      mockAxios.get.mockRejectedValueOnce(configAxiosError);\n\n      await expect(chatbotService.sendMessage(mockMessages))\n        .rejects\n        .toThrow('Settings API error');\n    });\n  });\n\n  describe('getBusinessInfo', () => {\n    it('should return business information', async () => {\n      const businessInfo = await chatbotService.getBusinessInfo();\n\n      expect(businessInfo).toEqual({\n        businessName: 'MS Sports',\n        inventoryCount: 'Over 1,000 items',\n        topSellingProducts: ['Sports Shoes', 'Jerseys', 'Training Equipment'],\n        customerCount: 'Over 500 registered customers',\n        supplierCount: '50+ active suppliers',\n      });\n    });\n\n    it('should return consistent data structure', async () => {\n      const businessInfo = await chatbotService.getBusinessInfo();\n\n      expect(businessInfo).toHaveProperty('businessName');\n      expect(businessInfo).toHaveProperty('inventoryCount');\n      expect(businessInfo).toHaveProperty('topSellingProducts');\n      expect(businessInfo).toHaveProperty('customerCount');\n      expect(businessInfo).toHaveProperty('supplierCount');\n      expect(Array.isArray(businessInfo.topSellingProducts)).toBe(true);\n    });\n  });\n\n  describe('checkConfiguration', () => {\n    it('should return configured when API key exists and is not empty', async () => {\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          exists: true,\n          isEmpty: false\n        }\n      });\n\n      const result = await chatbotService.checkConfiguration();\n\n      expect(result).toEqual({ isConfigured: true });\n      expect(mockAxios.get).toHaveBeenCalledWith('/api/test-settings', {\n        headers: {}\n      });\n    });\n\n    it('should include CSRF token in configuration check', async () => {\n      // Set CSRF token in cookie\n      (global.document as any).cookie = 'csrfToken=config-csrf-token; other=value';\n\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          exists: true,\n          isEmpty: false\n        }\n      });\n\n      await chatbotService.checkConfiguration();\n\n      expect(mockAxios.get).toHaveBeenCalledWith('/api/test-settings', {\n        headers: {\n          'X-CSRF-Token': 'config-csrf-token'\n        }\n      });\n    });\n\n    it('should return not configured when setting not found', async () => {\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: false,\n          exists: false\n        }\n      });\n\n      const result = await chatbotService.checkConfiguration();\n\n      expect(result).toEqual({\n        isConfigured: false,\n        message: 'API key setting not found in database'\n      });\n    });\n\n    it('should return not configured when API key is empty', async () => {\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          exists: true,\n          isEmpty: true\n        }\n      });\n\n      const result = await chatbotService.checkConfiguration();\n\n      expect(result).toEqual({\n        isConfigured: false,\n        message: 'API key is empty. Please configure it in settings.'\n      });\n    });\n\n    it('should handle configuration check errors', async () => {\n      const error = new Error('Network error');\n      mockAxios.get.mockRejectedValueOnce(error);\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const result = await chatbotService.checkConfiguration();\n\n      expect(result).toEqual({\n        isConfigured: false,\n        message: 'Failed to check configuration. Please try again.'\n      });\n      expect(consoleSpy).toHaveBeenCalledWith('Error checking chatbot configuration:', error);\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('getCookie function (via sendMessage)', () => {\n    it('should extract CSRF token from cookie string', async () => {\n      // Set multiple cookies including CSRF token\n      (global.document as any).cookie = 'sessionId=abc123; csrfToken=test-token; userId=456';\n\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock successful chatbot response\n      mockAxios.post.mockResolvedValue({\n        data: { role: 'assistant', content: 'Response' }\n      });\n\n      await chatbotService.sendMessage([{ role: 'user', content: 'test' }]);\n\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        '/api/chatbot',\n        { messages: [{ role: 'user', content: 'test' }] },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRF-Token': 'test-token'\n          }\n        }\n      );\n    });\n\n    it('should handle missing CSRF token gracefully', async () => {\n      // Set cookies without CSRF token\n      (global.document as any).cookie = 'sessionId=abc123; userId=456';\n\n      // Mock successful API key check\n      mockAxios.get.mockResolvedValue({\n        data: {\n          success: true,\n          isEmpty: false,\n          valueLength: 32\n        }\n      });\n\n      // Mock successful chatbot response\n      mockAxios.post.mockResolvedValue({\n        data: { role: 'assistant', content: 'Response' }\n      });\n\n      await chatbotService.sendMessage([{ role: 'user', content: 'test' }]);\n\n      expect(mockAxios.post).toHaveBeenCalledWith(\n        '/api/chatbot',\n        { messages: [{ role: 'user', content: 'test' }] },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n    });\n  });\n});"],"names":["jest","mock","mockAxios","get","fn","post","isAxiosError","axios","Object","defineProperty","global","value","cookie","addEventListener","removeEventListener","writable","describe","beforeEach","clearAllMocks","document","afterEach","resetAllMocks","mockMessages","role","content","mockResponse","it","mockResolvedValue","data","success","isEmpty","valueLength","result","chatbotService","sendMessage","expect","toEqual","toHaveBeenCalledWith","messages","headers","rejects","toThrow","not","toHaveBeenCalled","mockResolvedValueOnce","configError","Error","mockRejectedValueOnce","axiosError","response","status","error","toJSON","message","mockReturnValue","request","undefined","genericError","errorWithoutMessage","configAxiosError","businessInfo","getBusinessInfo","businessName","inventoryCount","topSellingProducts","customerCount","supplierCount","toHaveProperty","Array","isArray","toBe","exists","checkConfiguration","isConfigured","consoleSpy","spyOn","console","mockImplementation","mockRestore"],"mappings":"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"}