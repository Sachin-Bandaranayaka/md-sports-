f7ce9a4a9c11b05a1bc4e150bd30beba
"use strict";
jest.mock("next/server", ()=>{
    return {
        NextResponse: mockNextResponse
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _client = require("@prisma/client");
const _route = require("../../src/app/api/inventory/transfers/route");
const _route1 = require("../../src/app/api/inventory/transfers/[id]/route");
const _route2 = require("../../src/app/api/inventory/transfers/batch/route");
// Mock NextResponse (and any other exports we need) BEFORE importing route handlers
const mockNextResponse = {
    json: (data, init)=>({
            status: init?.status ?? 200,
            json: async ()=>data
        })
};
// Polyfill minimal global Request/Headers so route modules that rely on them do not crash in Node
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
if (typeof global.Headers === "undefined") {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { Headers: Headers1, Request } = require("node-fetch");
    // @ts-ignore
    global.Headers = Headers1;
    // @ts-ignore
    global.Request = Request;
}
const createMockRequest = (url, opts = {})=>{
    const { method = "GET", body, headers = {} } = opts;
    return {
        method,
        url,
        headers: new Headers(headers),
        json: async ()=>typeof body === "string" ? JSON.parse(body) : body,
        text: async ()=>typeof body === "string" ? body : JSON.stringify(body)
    };
};
const prisma = new _client.PrismaClient();
const DEV_HEADERS = {
    authorization: "Bearer dev-token",
    "content-type": "application/json"
};
(0, _globals.describe)("Inventory transfer reservation flow", ()=>{
    let shopAId;
    let shopBId;
    let productId;
    (0, _globals.beforeAll)(async ()=>{
        // create two shops & product
        // Provide explicit string IDs for shops to satisfy Prisma string primary key type
        const shopA = await prisma.shop.create({
            data: {
                id: "shopA",
                name: "Shop A",
                location: "X"
            },
            select: {
                id: true
            }
        });
        const shopB = await prisma.shop.create({
            data: {
                id: "shopB",
                name: "Shop B",
                location: "Y"
            },
            select: {
                id: true
            }
        });
        shopAId = shopA.id;
        shopBId = shopB.id;
        const product = await prisma.product.create({
            data: {
                name: "Product A",
                price: 15,
                weightedAverageCost: 10.0
            },
            select: {
                id: true
            }
        });
        productId = product.id;
        // add inventory 50 to shop A
        await prisma.inventoryItem.create({
            data: {
                productId,
                shopId: shopAId,
                quantity: 50,
                shopSpecificCost: 10
            }
        });
    });
    (0, _globals.afterAll)(async ()=>{
        await prisma.inventoryItem.deleteMany({});
        await prisma.product.deleteMany({});
        await prisma.shop.deleteMany({});
        await prisma.$disconnect();
    });
    (0, _globals.test)("reservation, cancel, complete flow", async ()=>{
        // 1. Create transfer 30 units pending
        const createReq = createMockRequest("http://localhost/api/inventory/transfers", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                sourceShopId: shopAId,
                destinationShopId: shopBId,
                items: [
                    {
                        productId,
                        quantity: 30
                    }
                ]
            }
        });
        const createRes = await (0, _route.POST)(createReq);
        (0, _globals.expect)(createRes.status).toBe(201);
        const resBody = await createRes.json();
        const transferId = resBody.data.id;
        // verify source qty decreased to 20
        const sourceInventoryAfter = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(sourceInventoryAfter?.quantity).toBe(20);
        // 2. Cancel transfer -> qty back to 50
        const deleteReq = createMockRequest(`http://localhost/api/inventory/transfers/${transferId}`, {
            method: "DELETE",
            headers: DEV_HEADERS
        });
        const deleteRes = await (0, _route1.DELETE)(deleteReq, {
            params: Promise.resolve({
                id: String(transferId)
            })
        });
        (0, _globals.expect)(deleteRes.status).toBe(200);
        const srcAfterCancel = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(srcAfterCancel?.quantity).toBe(50);
        // 3. Re-create transfer and complete it
        const createReq2 = createMockRequest("http://localhost/api/inventory/transfers", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                sourceShopId: shopAId,
                destinationShopId: shopBId,
                items: [
                    {
                        productId,
                        quantity: 30
                    }
                ]
            }
        });
        const createRes2 = await (0, _route.POST)(createReq2);
        const newTransferId = (await createRes2.json()).data.id;
        // batch complete
        const batchReq = createMockRequest("http://localhost/api/inventory/transfers/batch", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                transferIds: [
                    newTransferId
                ],
                action: "complete"
            }
        });
        const batchRes = await (0, _route2.POST)(batchReq);
        (0, _globals.expect)(batchRes.status).toBe(200);
        // verify source qty remains 20, dest qty 30
        const srcFinal = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(srcFinal?.quantity).toBe(20);
        const destInv = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopBId
            }
        });
        (0, _globals.expect)(destInv?.quantity).toBe(30);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvaW50ZWdyYXRpb24vaW52ZW50b3J5VHJhbnNmZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cbi8vIE1vY2sgTmV4dFJlc3BvbnNlIChhbmQgYW55IG90aGVyIGV4cG9ydHMgd2UgbmVlZCkgQkVGT1JFIGltcG9ydGluZyByb3V0ZSBoYW5kbGVyc1xuY29uc3QgbW9ja05leHRSZXNwb25zZSA9IHtcbiAganNvbjogKGRhdGE6IGFueSwgaW5pdD86IHsgc3RhdHVzPzogbnVtYmVyIH0pID0+ICh7XG4gICAgc3RhdHVzOiBpbml0Py5zdGF0dXMgPz8gMjAwLFxuICAgIGpzb246IGFzeW5jICgpID0+IGRhdGEsXG4gIH0pLFxufTtcblxuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBOZXh0UmVzcG9uc2U6IG1vY2tOZXh0UmVzcG9uc2UsXG4gIH07XG59KTtcblxuLy8gUG9seWZpbGwgbWluaW1hbCBnbG9iYWwgUmVxdWVzdC9IZWFkZXJzIHNvIHJvdXRlIG1vZHVsZXMgdGhhdCByZWx5IG9uIHRoZW0gZG8gbm90IGNyYXNoIGluIE5vZGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1pZ25vcmVcbmlmICh0eXBlb2YgZ2xvYmFsLkhlYWRlcnMgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IHsgSGVhZGVycywgUmVxdWVzdCB9ID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpO1xuICAvLyBAdHMtaWdub3JlXG4gIGdsb2JhbC5IZWFkZXJzID0gSGVhZGVycztcbiAgLy8gQHRzLWlnbm9yZVxuICBnbG9iYWwuUmVxdWVzdCA9IFJlcXVlc3Q7XG59XG5cbi8vIEltcG9ydCByb3V0ZSBoYW5kbGVycyBBRlRFUiB0aGUgbW9ja3NcbmltcG9ydCB7IFBPU1QgYXMgY3JlYXRlVHJhbnNmZXJIYW5kbGVyIH0gZnJvbSAnQC9hcHAvYXBpL2ludmVudG9yeS90cmFuc2ZlcnMvcm91dGUnO1xuaW1wb3J0IHsgREVMRVRFIGFzIGRlbGV0ZVRyYW5zZmVySGFuZGxlciB9IGZyb20gJ0AvYXBwL2FwaS9pbnZlbnRvcnkvdHJhbnNmZXJzL1tpZF0vcm91dGUnO1xuaW1wb3J0IHsgUE9TVCBhcyBiYXRjaFRyYW5zZmVySGFuZGxlciB9IGZyb20gJ0AvYXBwL2FwaS9pbnZlbnRvcnkvdHJhbnNmZXJzL2JhdGNoL3JvdXRlJztcblxuLy8gU2ltcGxlIG1vY2sgTmV4dFJlcXVlc3QgLyBOZXh0UmVzcG9uc2Ugc2ltaWxhciB0byBleGlzdGluZyBpbnRlZ3JhdGlvbiB0ZXN0c1xuaW50ZXJmYWNlIE1vY2tSZXF1ZXN0IHtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xuICBoZWFkZXJzOiBIZWFkZXJzO1xuICBqc29uKCk6IFByb21pc2U8YW55PjtcbiAgdGV4dCgpOiBQcm9taXNlPHN0cmluZz47XG59XG5cbmNvbnN0IGNyZWF0ZU1vY2tSZXF1ZXN0ID0gKHVybDogc3RyaW5nLCBvcHRzOiB7IG1ldGhvZD86IHN0cmluZzsgYm9keT86IGFueTsgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfSA9IHt9KTogTW9ja1JlcXVlc3QgPT4ge1xuICBjb25zdCB7IG1ldGhvZCA9ICdHRVQnLCBib2R5LCBoZWFkZXJzID0ge30gfSA9IG9wdHM7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kLFxuICAgIHVybCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyhoZWFkZXJzKSxcbiAgICBqc29uOiBhc3luYyAoKSA9PiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShib2R5KSA6IGJvZHkpLFxuICAgIHRleHQ6IGFzeW5jICgpID0+ICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycgPyBib2R5IDogSlNPTi5zdHJpbmdpZnkoYm9keSkpLFxuICB9IGFzIHVua25vd24gYXMgTW9ja1JlcXVlc3Q7XG59O1xuXG5jb25zdCBwcmlzbWEgPSBuZXcgUHJpc21hQ2xpZW50KCk7XG5cbmNvbnN0IERFVl9IRUFERVJTID0ge1xuICBhdXRob3JpemF0aW9uOiAnQmVhcmVyIGRldi10b2tlbicsXG4gICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG59O1xuXG5kZXNjcmliZSgnSW52ZW50b3J5IHRyYW5zZmVyIHJlc2VydmF0aW9uIGZsb3cnLCAoKSA9PiB7XG4gIGxldCBzaG9wQUlkOiBzdHJpbmc7XG4gIGxldCBzaG9wQklkOiBzdHJpbmc7XG4gIGxldCBwcm9kdWN0SWQ6IG51bWJlcjtcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIGNyZWF0ZSB0d28gc2hvcHMgJiBwcm9kdWN0XG4gICAgLy8gUHJvdmlkZSBleHBsaWNpdCBzdHJpbmcgSURzIGZvciBzaG9wcyB0byBzYXRpc2Z5IFByaXNtYSBzdHJpbmcgcHJpbWFyeSBrZXkgdHlwZVxuICAgIGNvbnN0IHNob3BBID0gYXdhaXQgcHJpc21hLnNob3AuY3JlYXRlKHsgZGF0YTogeyBpZDogJ3Nob3BBJywgbmFtZTogJ1Nob3AgQScsIGxvY2F0aW9uOiAnWCcgfSwgc2VsZWN0OiB7IGlkOiB0cnVlIH0gfSk7XG4gICAgY29uc3Qgc2hvcEIgPSBhd2FpdCBwcmlzbWEuc2hvcC5jcmVhdGUoeyBkYXRhOiB7IGlkOiAnc2hvcEInLCBuYW1lOiAnU2hvcCBCJywgbG9jYXRpb246ICdZJyB9LCBzZWxlY3Q6IHsgaWQ6IHRydWUgfSB9KTtcbiAgICBzaG9wQUlkID0gc2hvcEEuaWQ7XG4gICAgc2hvcEJJZCA9IHNob3BCLmlkO1xuXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IHByaXNtYS5wcm9kdWN0LmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7IG5hbWU6ICdQcm9kdWN0IEEnLCBwcmljZTogMTUsIHdlaWdodGVkQXZlcmFnZUNvc3Q6IDEwLjAgfSxcbiAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSB9LFxuICAgIH0pO1xuICAgIHByb2R1Y3RJZCA9IHByb2R1Y3QuaWQ7XG5cbiAgICAvLyBhZGQgaW52ZW50b3J5IDUwIHRvIHNob3AgQVxuICAgIGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLmNyZWF0ZSh7IGRhdGE6IHsgcHJvZHVjdElkLCBzaG9wSWQ6IHNob3BBSWQsIHF1YW50aXR5OiA1MCwgc2hvcFNwZWNpZmljQ29zdDogMTAgfSB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLmRlbGV0ZU1hbnkoe30pO1xuICAgIGF3YWl0IHByaXNtYS5wcm9kdWN0LmRlbGV0ZU1hbnkoe30pO1xuICAgIGF3YWl0IHByaXNtYS5zaG9wLmRlbGV0ZU1hbnkoe30pO1xuICAgIGF3YWl0IHByaXNtYS4kZGlzY29ubmVjdCgpO1xuICB9KTtcblxuICB0ZXN0KCdyZXNlcnZhdGlvbiwgY2FuY2VsLCBjb21wbGV0ZSBmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIDEuIENyZWF0ZSB0cmFuc2ZlciAzMCB1bml0cyBwZW5kaW5nXG4gICAgY29uc3QgY3JlYXRlUmVxID0gY3JlYXRlTW9ja1JlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvYXBpL2ludmVudG9yeS90cmFuc2ZlcnMnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IERFVl9IRUFERVJTLFxuICAgICAgYm9keToge1xuICAgICAgICBzb3VyY2VTaG9wSWQ6IHNob3BBSWQsXG4gICAgICAgIGRlc3RpbmF0aW9uU2hvcElkOiBzaG9wQklkLFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdElkLCBxdWFudGl0eTogMzAgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgY3JlYXRlUmVzOiBhbnkgPSBhd2FpdCBjcmVhdGVUcmFuc2ZlckhhbmRsZXIoY3JlYXRlUmVxIGFzIGFueSk7XG4gICAgZXhwZWN0KGNyZWF0ZVJlcy5zdGF0dXMpLnRvQmUoMjAxKTtcbiAgICBjb25zdCByZXNCb2R5ID0gYXdhaXQgY3JlYXRlUmVzLmpzb24oKTtcbiAgICBjb25zdCB0cmFuc2ZlcklkID0gcmVzQm9keS5kYXRhLmlkO1xuXG4gICAgLy8gdmVyaWZ5IHNvdXJjZSBxdHkgZGVjcmVhc2VkIHRvIDIwXG4gICAgY29uc3Qgc291cmNlSW52ZW50b3J5QWZ0ZXIgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kRmlyc3QoeyB3aGVyZTogeyBwcm9kdWN0SWQsIHNob3BJZDogc2hvcEFJZCB9IH0pO1xuICAgIGV4cGVjdChzb3VyY2VJbnZlbnRvcnlBZnRlcj8ucXVhbnRpdHkpLnRvQmUoMjApO1xuXG4gICAgLy8gMi4gQ2FuY2VsIHRyYW5zZmVyIC0+IHF0eSBiYWNrIHRvIDUwXG4gICAgY29uc3QgZGVsZXRlUmVxID0gY3JlYXRlTW9ja1JlcXVlc3QoYGh0dHA6Ly9sb2NhbGhvc3QvYXBpL2ludmVudG9yeS90cmFuc2ZlcnMvJHt0cmFuc2ZlcklkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiBERVZfSEVBREVSUyxcbiAgICB9KTtcbiAgICBjb25zdCBkZWxldGVSZXM6IGFueSA9IGF3YWl0IGRlbGV0ZVRyYW5zZmVySGFuZGxlcihkZWxldGVSZXEgYXMgYW55LCB7IHBhcmFtczogUHJvbWlzZS5yZXNvbHZlKHsgaWQ6IFN0cmluZyh0cmFuc2ZlcklkKSB9KSB9IGFzIGFueSk7XG4gICAgZXhwZWN0KGRlbGV0ZVJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcblxuICAgIGNvbnN0IHNyY0FmdGVyQ2FuY2VsID0gYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZmluZEZpcnN0KHsgd2hlcmU6IHsgcHJvZHVjdElkLCBzaG9wSWQ6IHNob3BBSWQgfSB9KTtcbiAgICBleHBlY3Qoc3JjQWZ0ZXJDYW5jZWw/LnF1YW50aXR5KS50b0JlKDUwKTtcblxuICAgIC8vIDMuIFJlLWNyZWF0ZSB0cmFuc2ZlciBhbmQgY29tcGxldGUgaXRcbiAgICBjb25zdCBjcmVhdGVSZXEyID0gY3JlYXRlTW9ja1JlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvYXBpL2ludmVudG9yeS90cmFuc2ZlcnMnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IERFVl9IRUFERVJTLFxuICAgICAgYm9keToge1xuICAgICAgICBzb3VyY2VTaG9wSWQ6IHNob3BBSWQsXG4gICAgICAgIGRlc3RpbmF0aW9uU2hvcElkOiBzaG9wQklkLFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdElkLCBxdWFudGl0eTogMzAgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNyZWF0ZVJlczI6IGFueSA9IGF3YWl0IGNyZWF0ZVRyYW5zZmVySGFuZGxlcihjcmVhdGVSZXEyIGFzIGFueSk7XG4gICAgY29uc3QgbmV3VHJhbnNmZXJJZCA9IChhd2FpdCBjcmVhdGVSZXMyLmpzb24oKSkuZGF0YS5pZDtcblxuICAgIC8vIGJhdGNoIGNvbXBsZXRlXG4gICAgY29uc3QgYmF0Y2hSZXEgPSBjcmVhdGVNb2NrUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdC9hcGkvaW52ZW50b3J5L3RyYW5zZmVycy9iYXRjaCcsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogREVWX0hFQURFUlMsXG4gICAgICBib2R5OiB7IHRyYW5zZmVySWRzOiBbbmV3VHJhbnNmZXJJZF0sIGFjdGlvbjogJ2NvbXBsZXRlJyB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGJhdGNoUmVzOiBhbnkgPSBhd2FpdCBiYXRjaFRyYW5zZmVySGFuZGxlcihiYXRjaFJlcSBhcyBhbnkpO1xuICAgIGV4cGVjdChiYXRjaFJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcblxuICAgIC8vIHZlcmlmeSBzb3VyY2UgcXR5IHJlbWFpbnMgMjAsIGRlc3QgcXR5IDMwXG4gICAgY29uc3Qgc3JjRmluYWwgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kRmlyc3QoeyB3aGVyZTogeyBwcm9kdWN0SWQsIHNob3BJZDogc2hvcEFJZCB9IH0pO1xuICAgIGV4cGVjdChzcmNGaW5hbD8ucXVhbnRpdHkpLnRvQmUoMjApO1xuXG4gICAgY29uc3QgZGVzdEludiA9IGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLmZpbmRGaXJzdCh7IHdoZXJlOiB7IHByb2R1Y3RJZCwgc2hvcElkOiBzaG9wQklkIH0gfSk7XG4gICAgZXhwZWN0KGRlc3RJbnY/LnF1YW50aXR5KS50b0JlKDMwKTtcbiAgfSk7XG59KTsgIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiTmV4dFJlc3BvbnNlIiwibW9ja05leHRSZXNwb25zZSIsImpzb24iLCJkYXRhIiwiaW5pdCIsInN0YXR1cyIsImdsb2JhbCIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1vY2tSZXF1ZXN0IiwidXJsIiwib3B0cyIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiSlNPTiIsInBhcnNlIiwidGV4dCIsInN0cmluZ2lmeSIsInByaXNtYSIsIlByaXNtYUNsaWVudCIsIkRFVl9IRUFERVJTIiwiYXV0aG9yaXphdGlvbiIsImRlc2NyaWJlIiwic2hvcEFJZCIsInNob3BCSWQiLCJwcm9kdWN0SWQiLCJiZWZvcmVBbGwiLCJzaG9wQSIsInNob3AiLCJjcmVhdGUiLCJpZCIsIm5hbWUiLCJsb2NhdGlvbiIsInNlbGVjdCIsInNob3BCIiwicHJvZHVjdCIsInByaWNlIiwid2VpZ2h0ZWRBdmVyYWdlQ29zdCIsImludmVudG9yeUl0ZW0iLCJzaG9wSWQiLCJxdWFudGl0eSIsInNob3BTcGVjaWZpY0Nvc3QiLCJhZnRlckFsbCIsImRlbGV0ZU1hbnkiLCIkZGlzY29ubmVjdCIsInRlc3QiLCJjcmVhdGVSZXEiLCJzb3VyY2VTaG9wSWQiLCJkZXN0aW5hdGlvblNob3BJZCIsIml0ZW1zIiwiY3JlYXRlUmVzIiwiY3JlYXRlVHJhbnNmZXJIYW5kbGVyIiwiZXhwZWN0IiwidG9CZSIsInJlc0JvZHkiLCJ0cmFuc2ZlcklkIiwic291cmNlSW52ZW50b3J5QWZ0ZXIiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImRlbGV0ZVJlcSIsImRlbGV0ZVJlcyIsImRlbGV0ZVRyYW5zZmVySGFuZGxlciIsInBhcmFtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiU3RyaW5nIiwic3JjQWZ0ZXJDYW5jZWwiLCJjcmVhdGVSZXEyIiwiY3JlYXRlUmVzMiIsIm5ld1RyYW5zZmVySWQiLCJiYXRjaFJlcSIsInRyYW5zZmVySWRzIiwiYWN0aW9uIiwiYmF0Y2hSZXMiLCJiYXRjaFRyYW5zZmVySGFuZGxlciIsInNyY0ZpbmFsIiwiZGVzdEludiJdLCJtYXBwaW5ncyI6IjtBQVdBQSxLQUFLQyxJQUFJLENBQUMsZUFBZTtJQUN2QixPQUFPO1FBQ0xDLGNBQWNDO0lBQ2hCO0FBQ0Y7Ozs7eUJBZjREO3dCQUMvQjt1QkE2QmlCO3dCQUNFO3dCQUNIO0FBN0I3QyxvRkFBb0Y7QUFDcEYsTUFBTUEsbUJBQW1CO0lBQ3ZCQyxNQUFNLENBQUNDLE1BQVdDLE9BQWdDLENBQUE7WUFDaERDLFFBQVFELE1BQU1DLFVBQVU7WUFDeEJILE1BQU0sVUFBWUM7UUFDcEIsQ0FBQTtBQUNGO0FBUUEsa0dBQWtHO0FBQ2xHLDZEQUE2RDtBQUM3RCxhQUFhO0FBQ2IsSUFBSSxPQUFPRyxPQUFPQyxPQUFPLEtBQUssYUFBYTtJQUN6Qyw4REFBOEQ7SUFDOUQsTUFBTSxFQUFFQSxTQUFBQSxRQUFPLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxRQUFRO0lBQ3JDLGFBQWE7SUFDYkgsT0FB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