14a892ccde8aee1ad84e668aed0f6bfe
"use strict";

/* istanbul ignore next */
function cov_9galnbarb() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts";
  var hash = "7da392fb9458d414c5eda6e2f6ce7793d3bb76c7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 86
        }
      },
      "5": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 80
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 64
        }
      },
      "7": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 15,
          column: 90
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 51
        }
      },
      "9": {
        start: {
          line: 17,
          column: 39
        },
        end: {
          line: 17,
          column: 51
        }
      },
      "10": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "11": {
        start: {
          line: 19,
          column: 27
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "12": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 66
        }
      },
      "14": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 19
        }
      },
      "16": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "17": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "18": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "19": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "20": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "21": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "22": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 88
        }
      },
      "23": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "24": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "25": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 95
        }
      },
      "26": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "27": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 57
        }
      },
      "28": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "29": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "30": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "31": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 31
        }
      },
      "32": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 18
        }
      },
      "33": {
        start: {
          line: 58,
          column: 19
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "34": {
        start: {
          line: 59,
          column: 36
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "35": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 60,
          column: 59
        }
      },
      "36": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "37": {
        start: {
          line: 64,
          column: 35
        },
        end: {
          line: 64,
          column: 73
        }
      },
      "38": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 32
        }
      },
      "39": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "40": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "41": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 45
        }
      },
      "42": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 51
        }
      },
      "43": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 105
        }
      },
      "44": {
        start: {
          line: 76,
          column: 30
        },
        end: {
          line: 76,
          column: 65
        }
      },
      "45": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "46": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "47": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 71
        }
      },
      "48": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "49": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "50": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 87
        }
      },
      "51": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 77
        }
      },
      "52": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "53": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "54": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 123
        }
      },
      "55": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "56": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 64
        }
      },
      "57": {
        start: {
          line: 117,
          column: 21
        },
        end: {
          line: 129,
          column: 65
        }
      },
      "58": {
        start: {
          line: 117,
          column: 54
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "59": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "60": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 70
        }
      },
      "61": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "62": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "63": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 28
        }
      },
      "64": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "65": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "66": {
        start: {
          line: 151,
          column: 57
        },
        end: {
          line: 151,
          column: 63
        }
      },
      "67": {
        start: {
          line: 152,
          column: 15
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "68": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 43
        }
      },
      "69": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 116
        }
      },
      "70": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 88
        }
      },
      "71": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "72": {
        start: {
          line: 166,
          column: 31
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "73": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 69
        }
      },
      "74": {
        start: {
          line: 178,
          column: 25
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "75": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "76": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 24
        }
      },
      "77": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "78": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 47
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 20,
            column: 40
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 34
          }
        },
        loc: {
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 61,
            column: 15
          },
          end: {
            line: 61,
            column: 19
          }
        },
        loc: {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 117,
            column: 50
          },
          end: {
            line: 117,
            column: 51
          }
        },
        loc: {
          start: {
            line: 117,
            column: 54
          },
          end: {
            line: 129,
            column: 14
          }
        },
        line: 117
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 151,
            column: 52
          },
          end: {
            line: 151,
            column: 53
          }
        },
        loc: {
          start: {
            line: 151,
            column: 57
          },
          end: {
            line: 151,
            column: 63
          }
        },
        line: 151
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 21,
            column: 45
          }
        }, {
          start: {
            line: 21,
            column: 48
          },
          end: {
            line: 21,
            column: 65
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 20
          }
        }, {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 27
          }
        }, {
          start: {
            line: 25,
            column: 31
          },
          end: {
            line: 25,
            column: 45
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 20
          }
        }, {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 47
          }
        }, {
          start: {
            line: 28,
            column: 51
          },
          end: {
            line: 28,
            column: 76
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 34,
            column: 31
          }
        }],
        line: 34
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 53
          }
        }, {
          start: {
            line: 40,
            column: 57
          },
          end: {
            line: 40,
            column: 88
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "10": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 29
          }
        }, {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 42,
            column: 79
          }
        }],
        line: 42
      },
      "11": {
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 43,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 43,
            column: 47
          },
          end: {
            line: 43,
            column: 88
          }
        }, {
          start: {
            line: 43,
            column: 91
          },
          end: {
            line: 43,
            column: 95
          }
        }],
        line: 43
      },
      "12": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 48,
            column: 13
          }
        }],
        line: 44
      },
      "13": {
        loc: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 20
          }
        }, {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 33
          }
        }, {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 44,
            column: 45
          }
        }],
        line: 44
      },
      "14": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "15": {
        loc: {
          start: {
            line: 58,
            column: 19
          },
          end: {
            line: 58,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 19
          },
          end: {
            line: 58,
            column: 41
          }
        }, {
          start: {
            line: 58,
            column: 45
          },
          end: {
            line: 58,
            column: 72
          }
        }],
        line: 58
      },
      "16": {
        loc: {
          start: {
            line: 59,
            column: 36
          },
          end: {
            line: 59,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 36
          },
          end: {
            line: 59,
            column: 75
          }
        }, {
          start: {
            line: 59,
            column: 79
          },
          end: {
            line: 59,
            column: 84
          }
        }],
        line: 59
      },
      "17": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "18": {
        loc: {
          start: {
            line: 76,
            column: 30
          },
          end: {
            line: 76,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 30
          },
          end: {
            line: 76,
            column: 48
          }
        }, {
          start: {
            line: 76,
            column: 52
          },
          end: {
            line: 76,
            column: 65
          }
        }],
        line: 76
      },
      "19": {
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 80,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 46
          },
          end: {
            line: 80,
            column: 54
          }
        }, {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 80,
            column: 63
          }
        }],
        line: 80
      },
      "20": {
        loc: {
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 81,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 42
          },
          end: {
            line: 81,
            column: 80
          }
        }, {
          start: {
            line: 81,
            column: 83
          },
          end: {
            line: 81,
            column: 89
          }
        }],
        line: 81
      },
      "21": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "22": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "23": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "24": {
        loc: {
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 37
          }
        }, {
          start: {
            line: 144,
            column: 41
          },
          end: {
            line: 144,
            column: 54
          }
        }],
        line: 144
      },
      "25": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: 152,
            column: 15
          },
          end: {
            line: 165,
            column: 9
          }
        }],
        line: 149
      },
      "26": {
        loc: {
          start: {
            line: 152,
            column: 15
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 15
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 165,
            column: 9
          }
        }],
        line: 152
      },
      "27": {
        loc: {
          start: {
            line: 152,
            column: 19
          },
          end: {
            line: 152,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 19
          },
          end: {
            line: 152,
            column: 35
          }
        }, {
          start: {
            line: 152,
            column: 39
          },
          end: {
            line: 152,
            column: 66
          }
        }],
        line: 152
      },
      "28": {
        loc: {
          start: {
            line: 171,
            column: 22
          },
          end: {
            line: 171,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 22
          },
          end: {
            line: 171,
            column: 37
          }
        }, {
          start: {
            line: 171,
            column: 41
          },
          end: {
            line: 171,
            column: 54
          }
        }, {
          start: {
            line: 171,
            column: 58
          },
          end: {
            line: 171,
            column: 62
          }
        }],
        line: 171
      },
      "29": {
        loc: {
          start: {
            line: 187,
            column: 26
          },
          end: {
            line: 187,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 26
          },
          end: {
            line: 187,
            column: 41
          }
        }, {
          start: {
            line: 187,
            column: 45
          },
          end: {
            line: 187,
            column: 58
          }
        }, {
          start: {
            line: 187,
            column: 62
          },
          end: {
            line: 187,
            column: 66
          }
        }],
        line: 187
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0],
      "29": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as jwt from 'jsonwebtoken';\nimport { verifyRefreshToken, generateRefreshToken } from '@/services/refreshTokenService';\nimport { generateToken, parseTimeStringToSeconds } from '@/services/authService';\nimport prisma, { safeQuery } from '@/lib/prisma';\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n            tokenSource: cookieRefreshToken ? 'cookie' : 'body',\n            tokenPreview: tokenToVerify ? tokenToVerify.substring(0, 10) + '...' : 'none'\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: true\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user during token refresh'\n        );\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        // Log user details to help debug session switching\n        console.log('Token refresh for user:', {\n            userId: user.id,\n            userName: user.name,\n            userEmail: user.email,\n            roleName: user.role?.name || user.roleName,\n            shopId: user.shopId\n        });\n\n        // Handle case where user has no role assigned but may have direct permissions\n        let permissions: string[] = [];\n        \n        if (user.role) {\n            // User has a role, get permissions from role\n            permissions = user.role.permissions.map((p: { name: string }) => p.name);\n        } else if (user.permissions && user.permissions.length > 0) {\n            // User has no role but has direct permissions\n            permissions = user.permissions;\n            console.log('User has no role but has direct permissions for ID:', userId, 'Permissions:', permissions);\n        } else {\n            // User has neither role nor permissions\n            console.log('User has no role and no permissions assigned for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User has no role or permissions assigned'\n            }, { status: 401 });\n        }\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN } as any);\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n}"],
      names: ["POST", "JWT_SECRET", "process", "env", "JWT_ACCESS_TOKEN_EXPIRES_IN", "COOKIE_SECURE", "NODE_ENV", "req", "cookieRefreshToken", "cookies", "get", "value", "tokenFromBody", "body", "json", "refreshToken", "e", "console", "log", "tokenToVerify", "hasCookieToken", "hasTokenFromBody", "tokenSource", "tokenPreview", "substring", "NextResponse", "success", "message", "status", "userId", "verifyRefreshToken", "error", "user", "safeQuery", "prisma", "findFirst", "where", "id", "String", "isActive", "include", "role", "permissions", "userName", "name", "userEmail", "email", "roleName", "shopId", "map", "p", "length", "newAccessToken", "jwt", "sign", "sub", "username", "roleId", "expiresIn", "response", "accessToken", "fullName", "set", "httpOnly", "secure", "sameSite", "maxAge", "parseTimeStringToSeconds", "path"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7da392fb9458d414c5eda6e2f6ce7793d3bb76c7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9galnbarb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9galnbarb();
cov_9galnbarb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9galnbarb().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9galnbarb().f[0]++;
    cov_9galnbarb().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_9galnbarb().s[3]++, require("next/server"));
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[4]++, _interop_require_wildcard(require("jsonwebtoken")));
const _refreshTokenService =
/* istanbul ignore next */
(cov_9galnbarb().s[5]++, require("../../../../services/refreshTokenService"));
const _authService =
/* istanbul ignore next */
(cov_9galnbarb().s[6]++, require("../../../../services/authService"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[7]++, _interop_require_wildcard(require("../../../../lib/prisma")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_9galnbarb().f[1]++;
  cov_9galnbarb().s[8]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_9galnbarb().b[0][0]++;
    cov_9galnbarb().s[9]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_9galnbarb().s[10]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_9galnbarb().s[11]++, new WeakMap());
  /* istanbul ignore next */
  cov_9galnbarb().s[12]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_9galnbarb().f[2]++;
    cov_9galnbarb().s[13]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_9galnbarb().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_9galnbarb().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_9galnbarb().f[3]++;
  cov_9galnbarb().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_9galnbarb().b[2][0]++;
    cov_9galnbarb().s[15]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[2][1]++;
  }
  cov_9galnbarb().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_9galnbarb().b[4][0]++;
    cov_9galnbarb().s[17]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_9galnbarb().s[18]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_9galnbarb().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_9galnbarb().b[6][0]++;
    cov_9galnbarb().s[20]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_9galnbarb().s[21]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_9galnbarb().s[22]++,
  /* istanbul ignore next */
  (cov_9galnbarb().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_9galnbarb().s[23]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_9galnbarb().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_9galnbarb().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_9galnbarb().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_9galnbarb().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_9galnbarb().s[25]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_9galnbarb().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_9galnbarb().b[11][1]++, null));
      /* istanbul ignore next */
      cov_9galnbarb().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_9galnbarb().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_9galnbarb().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_9galnbarb().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_9galnbarb().b[12][0]++;
        cov_9galnbarb().s[27]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_9galnbarb().b[12][1]++;
        cov_9galnbarb().s[28]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_9galnbarb().s[29]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_9galnbarb().s[30]++;
  if (cache) {
    /* istanbul ignore next */
    cov_9galnbarb().b[14][0]++;
    cov_9galnbarb().s[31]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[14][1]++;
  }
  cov_9galnbarb().s[32]++;
  return newObj;
}
// JWT configuration
const JWT_SECRET =
/* istanbul ignore next */
(cov_9galnbarb().s[33]++,
/* istanbul ignore next */
(cov_9galnbarb().b[15][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_9galnbarb().b[15][1]++, "CHANGE_THIS_IN_PRODUCTION"));
const JWT_ACCESS_TOKEN_EXPIRES_IN =
/* istanbul ignore next */
(cov_9galnbarb().s[34]++,
/* istanbul ignore next */
(cov_9galnbarb().b[16][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_9galnbarb().b[16][1]++, "15m"));
const COOKIE_SECURE =
/* istanbul ignore next */
(cov_9galnbarb().s[35]++, process.env.NODE_ENV === "production");
async function POST(req) {
  /* istanbul ignore next */
  cov_9galnbarb().f[4]++;
  cov_9galnbarb().s[36]++;
  try {
    // Prioritize refresh token from httpOnly cookie
    const cookieRefreshToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[37]++, req.cookies.get("refreshToken")?.value);
    let tokenFromBody =
    /* istanbul ignore next */
    (cov_9galnbarb().s[38]++, null);
    // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies
    /* istanbul ignore next */
    cov_9galnbarb().s[39]++;
    if (!cookieRefreshToken) {
      /* istanbul ignore next */
      cov_9galnbarb().b[17][0]++;
      cov_9galnbarb().s[40]++;
      try {
        const body =
        /* istanbul ignore next */
        (cov_9galnbarb().s[41]++, await req.json());
        /* istanbul ignore next */
        cov_9galnbarb().s[42]++;
        tokenFromBody = body?.refreshToken;
      } catch (e) {
        /* istanbul ignore next */
        cov_9galnbarb().s[43]++;
        // Ignore error if body is empty or not valid JSON, cookie is the preferred method
        console.log("No JSON body or refreshToken field in body, relying on cookie if present.");
      }
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[17][1]++;
    }
    const tokenToVerify =
    /* istanbul ignore next */
    (cov_9galnbarb().s[44]++,
    /* istanbul ignore next */
    (cov_9galnbarb().b[18][0]++, cookieRefreshToken) ||
    /* istanbul ignore next */
    (cov_9galnbarb().b[18][1]++, tokenFromBody));
    /* istanbul ignore next */
    cov_9galnbarb().s[45]++;
    console.log("Refresh token request received", {
      hasCookieToken: !!cookieRefreshToken,
      hasTokenFromBody: !!tokenFromBody,
      tokenSource: cookieRefreshToken ?
      /* istanbul ignore next */
      (cov_9galnbarb().b[19][0]++, "cookie") :
      /* istanbul ignore next */
      (cov_9galnbarb().b[19][1]++, "body"),
      tokenPreview: tokenToVerify ?
      /* istanbul ignore next */
      (cov_9galnbarb().b[20][0]++, tokenToVerify.substring(0, 10) + "...") :
      /* istanbul ignore next */
      (cov_9galnbarb().b[20][1]++, "none")
    });
    /* istanbul ignore next */
    cov_9galnbarb().s[46]++;
    if (!tokenToVerify) {
      /* istanbul ignore next */
      cov_9galnbarb().b[21][0]++;
      cov_9galnbarb().s[47]++;
      console.log("No refresh token provided in cookie or body");
      /* istanbul ignore next */
      cov_9galnbarb().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[21][1]++;
    }
    // Verify refresh token (this comes from refreshTokenService)
    let userId;
    /* istanbul ignore next */
    cov_9galnbarb().s[49]++;
    try {
      /* istanbul ignore next */
      cov_9galnbarb().s[50]++;
      userId = await (0, _refreshTokenService.verifyRefreshToken)(tokenToVerify);
    } catch (error) {
      /* istanbul ignore next */
      cov_9galnbarb().s[51]++;
      console.error("Error during refresh token verification:", error);
      // verifyRefreshToken itself should handle logging details of the error.
      /* istanbul ignore next */
      cov_9galnbarb().s[52]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token verification failed" // Generic message
      }, {
        status: 401
      });
    }
    /* istanbul ignore next */
    cov_9galnbarb().s[53]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9galnbarb().b[22][0]++;
      cov_9galnbarb().s[54]++;
      console.log("Invalid, expired, or revoked refresh token. Token used:", tokenToVerify.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_9galnbarb().s[55]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid or expired refresh token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[22][1]++;
    }
    cov_9galnbarb().s[56]++;
    console.log("Valid refresh token for user ID:", userId);
    // Get user data to include in new token with retry logic
    const user =
    /* istanbul ignore next */
    (cov_9galnbarb().s[57]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_9galnbarb().f[5]++;
      cov_9galnbarb().s[58]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(userId),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: true
            }
          }
        }
      });
    }, null, "Failed to find user during token refresh"));
    /* istanbul ignore next */
    cov_9galnbarb().s[59]++;
    if (!user) {
      /* istanbul ignore next */
      cov_9galnbarb().b[23][0]++;
      cov_9galnbarb().s[60]++;
      console.log("User not found or inactive for ID:", userId);
      /* istanbul ignore next */
      cov_9galnbarb().s[61]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found or inactive"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[23][1]++;
    }
    // Log user details to help debug session switching
    cov_9galnbarb().s[62]++;
    console.log("Token refresh for user:", {
      userId: user.id,
      userName: user.name,
      userEmail: user.email,
      roleName:
      /* istanbul ignore next */
      (cov_9galnbarb().b[24][0]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_9galnbarb().b[24][1]++, user.roleName),
      shopId: user.shopId
    });
    // Handle case where user has no role assigned but may have direct permissions
    let permissions =
    /* istanbul ignore next */
    (cov_9galnbarb().s[63]++, []);
    /* istanbul ignore next */
    cov_9galnbarb().s[64]++;
    if (user.role) {
      /* istanbul ignore next */
      cov_9galnbarb().b[25][0]++;
      cov_9galnbarb().s[65]++;
      // User has a role, get permissions from role
      permissions = user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_9galnbarb().f[6]++;
        cov_9galnbarb().s[66]++;
        return p.name;
      });
    } else {
      /* istanbul ignore next */
      cov_9galnbarb().b[25][1]++;
      cov_9galnbarb().s[67]++;
      if (
      /* istanbul ignore next */
      (cov_9galnbarb().b[27][0]++, user.permissions) &&
      /* istanbul ignore next */
      (cov_9galnbarb().b[27][1]++, user.permissions.length > 0)) {
        /* istanbul ignore next */
        cov_9galnbarb().b[26][0]++;
        cov_9galnbarb().s[68]++;
        // User has no role but has direct permissions
        permissions = user.permissions;
        /* istanbul ignore next */
        cov_9galnbarb().s[69]++;
        console.log("User has no role but has direct permissions for ID:", userId, "Permissions:", permissions);
      } else {
        /* istanbul ignore next */
        cov_9galnbarb().b[26][1]++;
        cov_9galnbarb().s[70]++;
        // User has neither role nor permissions
        console.log("User has no role and no permissions assigned for ID:", userId);
        /* istanbul ignore next */
        cov_9galnbarb().s[71]++;
        return _server.NextResponse.json({
          success: false,
          message: "User has no role or permissions assigned"
        }, {
          status: 401
        });
      }
    }
    const newAccessToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[72]++, _jsonwebtoken.sign({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      roleName:
      /* istanbul ignore next */
      (cov_9galnbarb().b[28][0]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_9galnbarb().b[28][1]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_9galnbarb().b[28][2]++, null),
      permissions,
      shopId: user.shopId
    }, JWT_SECRET, {
      expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN
    }));
    /* istanbul ignore next */
    cov_9galnbarb().s[73]++;
    console.log("Generated new access token for user:", user.id);
    const response =
    /* istanbul ignore next */
    (cov_9galnbarb().s[74]++, _server.NextResponse.json({
      success: true,
      accessToken: newAccessToken,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName:
        /* istanbul ignore next */
        (cov_9galnbarb().b[29][0]++, user.role?.name) ||
        /* istanbul ignore next */
        (cov_9galnbarb().b[29][1]++, user.roleName) ||
        /* istanbul ignore next */
        (cov_9galnbarb().b[29][2]++, null),
        shopId: user.shopId,
        permissions
      }
    }));
    // Set the new access token in an httpOnly cookie as well
    /* istanbul ignore next */
    cov_9galnbarb().s[75]++;
    response.cookies.set({
      name: "accessToken",
      value: newAccessToken,
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: (0, _authService.parseTimeStringToSeconds)(JWT_ACCESS_TOKEN_EXPIRES_IN),
      path: "/"
    });
    // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here
    // and set it in the 'refreshToken' cookie, potentially revoking the old one.
    /* istanbul ignore next */
    cov_9galnbarb().s[76]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_9galnbarb().s[77]++;
    console.error("Token refresh error:", error);
    /* istanbul ignore next */
    cov_9galnbarb().s[78]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to refresh token"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,