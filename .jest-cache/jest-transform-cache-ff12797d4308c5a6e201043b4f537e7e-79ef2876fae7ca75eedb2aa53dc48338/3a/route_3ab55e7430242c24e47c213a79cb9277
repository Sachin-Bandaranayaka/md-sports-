b7f35dd96f68ecc45cbbb5fb80ccd99d
"use strict";

/* istanbul ignore next */
function cov_277o6av735() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/customer-payments/route.ts";
  var hash = "782e6007bc066694cd552bd40b0ddddf30d648c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/customer-payments/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "6": {
        start: {
          line: 17,
          column: 32
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "8": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "9": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 58
        }
      },
      "10": {
        start: {
          line: 39,
          column: 53
        },
        end: {
          line: 39,
          column: 57
        }
      },
      "11": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "12": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "13": {
        start: {
          line: 61,
          column: 52
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "14": {
        start: {
          line: 70,
          column: 35
        },
        end: {
          line: 70,
          column: 91
        }
      },
      "15": {
        start: {
          line: 70,
          column: 67
        },
        end: {
          line: 70,
          column: 87
        }
      },
      "16": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "17": {
        start: {
          line: 77,
          column: 79
        },
        end: {
          line: 77,
          column: 91
        }
      },
      "18": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 73
        }
      },
      "19": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 48
          },
          end: {
            line: 39,
            column: 49
          }
        },
        loc: {
          start: {
            line: 39,
            column: 53
          },
          end: {
            line: 39,
            column: 57
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 40
          },
          end: {
            line: 61,
            column: 41
          }
        },
        loc: {
          start: {
            line: 61,
            column: 52
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 51
          },
          end: {
            line: 70,
            column: 52
          }
        },
        loc: {
          start: {
            line: 70,
            column: 67
          },
          end: {
            line: 70,
            column: 87
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 74
          },
          end: {
            line: 77,
            column: 75
          }
        },
        loc: {
          start: {
            line: 77,
            column: 79
          },
          end: {
            line: 77,
            column: 91
          }
        },
        line: 77
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 61
          }
        }, {
          start: {
            line: 68,
            column: 65
          },
          end: {
            line: 68,
            column: 70
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/customer-payments/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        // Identify credit customers (e.g., creditLimit > 0)\n        // You might need to adjust this logic based on your definition of a credit customer\n        const creditCustomers = await prisma.customer.findMany({\n            where: {\n                creditLimit: {\n                    gt: 0,\n                },\n                // OR use another field like customerType: 'Credit' if applicable\n            },\n            select: {\n                id: true,\n            },\n        });\n\n        if (creditCustomers.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [],\n                summary: { totalPayments: 0, numberOfPayments: 0 },\n                generatedAt: new Date().toISOString(),\n                message: 'No credit customers found.'\n            });\n        }\n\n        const customerIds = creditCustomers.map(c => c.id);\n\n        const payments = await prisma.payment.findMany({\n            where: {\n                customerId: {\n                    in: customerIds,\n                },\n            },\n            include: {\n                customer: true, // To get customer name\n                invoice: true,   // To get invoice number\n            },\n            orderBy: [\n                { customer: { name: 'asc' } },\n                { createdAt: 'desc' },\n            ],\n        });\n\n        const reportData = payments.map(payment => ({\n            paymentId: payment.id,\n            customerName: payment.customer.name,\n            paymentDate: payment.createdAt,\n            paymentAmount: payment.amount,\n            paymentMethod: payment.paymentMethod,\n            referenceNumber: payment.referenceNumber,\n            invoiceNumber: payment.invoice?.invoiceNumber || 'N/A',\n            // Consider adding invoiceId if needed for linking: payment.invoiceId\n        }));\n\n        const totalPaymentAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);\n\n        return NextResponse.json({\n            success: true,\n            details: reportData,\n            summary: {\n                totalPaymentsAmount: totalPaymentAmount,\n                numberOfPayments: payments.length,\n                numberOfCreditCustomersWithPayments: new Set(payments.map(p => p.customerId)).size\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching customer payment history:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch customer payment history', error: error.message },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "request", "creditCustomers", "prisma", "customer", "findMany", "where", "creditLimit", "gt", "select", "id", "length", "NextResponse", "json", "success", "details", "summary", "totalPayments", "numberOfPayments", "generatedAt", "Date", "toISOString", "message", "customerIds", "map", "c", "payments", "payment", "customerId", "in", "include", "invoice", "orderBy", "name", "createdAt", "reportData", "paymentId", "customerName", "paymentDate", "paymentAmount", "amount", "paymentMethod", "referenceNumber", "invoiceNumber", "totalPaymentAmount", "reduce", "sum", "totalPaymentsAmount", "numberOfCreditCustomersWithPayments", "Set", "p", "size", "error", "console", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA,IAAIC,OAAgB;IACtC,IAAI;QACA,oDAAoD;QACpD,oFAAoF;QACpF,MAAMC,kBAAkB,MAAMC,cAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;YACnDC,OAAO;gBACHC,aAAa;oBACTC,IAAI;gBACR;YAEJ;YACAC,QAAQ;gBACJC,IAAI;YACR;QACJ;QAEA,IAAIR,gBAAgBS,MAAM,KAAK,GAAG;YAC9B,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS,EAAE;gBACXC,SAAS;oBAAEC,eAAe;oBAAGC,kBAAkB;gBAAE;gBACjDC,aAAa,IAAIC,OAAOC,WAAW;gBACnCC,SAAS;YACb;QACJ;QAEA,MAAMC,cAAcrB,gBAAgBsB,GAAG,CAACC,CAAAA,IAAKA,EAAEf,EAAE;QAEjD,MAAMgB,WAAW,MAAMvB,cAAM,CAACwB,OAAO,CAACtB,QAAQ,CAAC;YAC3CC,OAAO;gBACHsB,YAAY;oBACRC,IAAIN;gBACR;YACJ;YACAO,SAAS;gBACL1B,UAAU;gBACV2B,SAAS;YACb;YACAC,SAAS;gBACL;oBAAE5B,UAAU;wBAAE6B,MAAM;oBAAM;gBAAE;gBAC5B;oBAAEC,WAAW;gBAAO;aACvB;QACL;QAEA,MAAMC,aAAaT,SAASF,GAAG,CAACG,CAAAA,UAAY,CAAA;gBACxCS,WAAWT,QAAQjB,EAAE;gBACrB2B,cAAcV,QAAQvB,QAAQ,CAAC6B,IAAI;gBACnCK,aAAaX,QAAQO,SAAS;gBAC9BK,eAAeZ,QAAQa,MAAM;gBAC7BC,eAAed,QAAQc,aAAa;gBACpCC,iBAAiBf,QAAQe,eAAe;gBACxCC,eAAehB,QAAQI,OAAO,EAAEY,iBAAiB;YAErD,CAAA;QAEA,MAAMC,qBAAqBlB,SAASmB,MAAM,CAAC,CAACC,KAAKnB,UAAYmB,MAAMnB,QAAQa,MAAM,EAAE;QAEnF,OAAO5B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAASoB;YACTnB,SAAS;gBACL+B,qBAAqBH;gBACrB1B,kBAAkBQ,SAASf,MAAM;gBACjCqC,qCAAqC,IAAIC,IAAIvB,SAASF,GAAG,CAAC0B,CAAAA,IAAKA,EAAEtB,UAAU,GAAGuB,IAAI;YACtF;YACAhC,aAAa,IAAIC,OAAOC,WAAW;QACvC;IAEJ,EAAE,OAAO+B,OAAY;QACjBC,QAAQD,KAAK,CAAC,4CAA4CA;QAC1D,OAAOxC,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOQ,SAAS;YAA4C8B,OAAOA,MAAM9B,OAAO;QAAC,GAC5F;YAAEgC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "782e6007bc066694cd552bd40b0ddddf30d648c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_277o6av735 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_277o6av735();
cov_277o6av735().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_277o6av735().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_277o6av735().f[0]++;
    cov_277o6av735().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_277o6av735().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_277o6av735().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_277o6av735().f[1]++;
  cov_277o6av735().s[5]++;
  try {
    // Identify credit customers (e.g., creditLimit > 0)
    // You might need to adjust this logic based on your definition of a credit customer
    const creditCustomers =
    /* istanbul ignore next */
    (cov_277o6av735().s[6]++, await _prisma.prisma.customer.findMany({
      where: {
        creditLimit: {
          gt: 0
        }
      },
      select: {
        id: true
      }
    }));
    /* istanbul ignore next */
    cov_277o6av735().s[7]++;
    if (creditCustomers.length === 0) {
      /* istanbul ignore next */
      cov_277o6av735().b[0][0]++;
      cov_277o6av735().s[8]++;
      return _server.NextResponse.json({
        success: true,
        details: [],
        summary: {
          totalPayments: 0,
          numberOfPayments: 0
        },
        generatedAt: new Date().toISOString(),
        message: "No credit customers found."
      });
    } else
    /* istanbul ignore next */
    {
      cov_277o6av735().b[0][1]++;
    }
    const customerIds =
    /* istanbul ignore next */
    (cov_277o6av735().s[9]++, creditCustomers.map(c => {
      /* istanbul ignore next */
      cov_277o6av735().f[2]++;
      cov_277o6av735().s[10]++;
      return c.id;
    }));
    const payments =
    /* istanbul ignore next */
    (cov_277o6av735().s[11]++, await _prisma.prisma.payment.findMany({
      where: {
        customerId: {
          in: customerIds
        }
      },
      include: {
        customer: true,
        invoice: true
      },
      orderBy: [{
        customer: {
          name: "asc"
        }
      }, {
        createdAt: "desc"
      }]
    }));
    const reportData =
    /* istanbul ignore next */
    (cov_277o6av735().s[12]++, payments.map(payment => {
      /* istanbul ignore next */
      cov_277o6av735().f[3]++;
      cov_277o6av735().s[13]++;
      return {
        paymentId: payment.id,
        customerName: payment.customer.name,
        paymentDate: payment.createdAt,
        paymentAmount: payment.amount,
        paymentMethod: payment.paymentMethod,
        referenceNumber: payment.referenceNumber,
        invoiceNumber:
        /* istanbul ignore next */
        (cov_277o6av735().b[1][0]++, payment.invoice?.invoiceNumber) ||
        /* istanbul ignore next */
        (cov_277o6av735().b[1][1]++, "N/A")
      };
    }));
    const totalPaymentAmount =
    /* istanbul ignore next */
    (cov_277o6av735().s[14]++, payments.reduce((sum, payment) => {
      /* istanbul ignore next */
      cov_277o6av735().f[4]++;
      cov_277o6av735().s[15]++;
      return sum + payment.amount;
    }, 0));
    /* istanbul ignore next */
    cov_277o6av735().s[16]++;
    return _server.NextResponse.json({
      success: true,
      details: reportData,
      summary: {
        totalPaymentsAmount: totalPaymentAmount,
        numberOfPayments: payments.length,
        numberOfCreditCustomersWithPayments: new Set(payments.map(p => {
          /* istanbul ignore next */
          cov_277o6av735().f[5]++;
          cov_277o6av735().s[17]++;
          return p.customerId;
        })).size
      },
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_277o6av735().s[18]++;
    console.error("Error fetching customer payment history:", error);
    /* istanbul ignore next */
    cov_277o6av735().s[19]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch customer payment history",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,