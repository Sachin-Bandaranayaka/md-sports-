{"version":3,"names":["cov_277o6av735","actualCoverage","s","GET","request","f","creditCustomers","_prisma","prisma","customer","findMany","where","creditLimit","gt","select","id","length","b","_server","NextResponse","json","success","details","summary","totalPayments","numberOfPayments","generatedAt","Date","toISOString","message","customerIds","map","c","payments","payment","customerId","in","include","invoice","orderBy","name","createdAt","reportData","paymentId","customerName","paymentDate","paymentAmount","amount","paymentMethod","referenceNumber","invoiceNumber","totalPaymentAmount","reduce","sum","totalPaymentsAmount","numberOfCreditCustomersWithPayments","Set","p","size","error","console","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/reports/customer-payments/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        // Identify credit customers (e.g., creditLimit > 0)\n        // You might need to adjust this logic based on your definition of a credit customer\n        const creditCustomers = await prisma.customer.findMany({\n            where: {\n                creditLimit: {\n                    gt: 0,\n                },\n                // OR use another field like customerType: 'Credit' if applicable\n            },\n            select: {\n                id: true,\n            },\n        });\n\n        if (creditCustomers.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [],\n                summary: { totalPayments: 0, numberOfPayments: 0 },\n                generatedAt: new Date().toISOString(),\n                message: 'No credit customers found.'\n            });\n        }\n\n        const customerIds = creditCustomers.map(c => c.id);\n\n        const payments = await prisma.payment.findMany({\n            where: {\n                customerId: {\n                    in: customerIds,\n                },\n            },\n            include: {\n                customer: true, // To get customer name\n                invoice: true,   // To get invoice number\n            },\n            orderBy: [\n                { customer: { name: 'asc' } },\n                { createdAt: 'desc' },\n            ],\n        });\n\n        const reportData = payments.map(payment => ({\n            paymentId: payment.id,\n            customerName: payment.customer.name,\n            paymentDate: payment.createdAt,\n            paymentAmount: payment.amount,\n            paymentMethod: payment.paymentMethod,\n            referenceNumber: payment.referenceNumber,\n            invoiceNumber: payment.invoice?.invoiceNumber || 'N/A',\n            // Consider adding invoiceId if needed for linking: payment.invoiceId\n        }));\n\n        const totalPaymentAmount = payments.reduce((sum, payment) => sum + payment.amount, 0);\n\n        return NextResponse.json({\n            success: true,\n            details: reportData,\n            summary: {\n                totalPaymentsAmount: totalPaymentAmount,\n                numberOfPayments: payments.length,\n                numberOfCreditCustomersWithPayments: new Set(payments.map(p => p.customerId)).size\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching customer payment history:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch customer payment history', error: error.message },\n            { status: 500 }\n        );\n    }\n} "],"mappings":"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","ignoreList":[]}