{"version":3,"names":["GET","cov_2e7fw92rdr","f","s","POST","req","permissionError","_middleware","requirePermission","b","url","URL","categoryId","searchParams","get","searchTerm","where","parseInt","name","contains","mode","products","_prisma","default","product","findMany","include","category","select","id","orderBy","_server","NextResponse","json","success","error","console","message","status","body","sku","barcode","description","price","weightedAverageCost","existingProduct","findFirst","OR","create","data"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: List all products\nexport async function GET(req: NextRequest) {\n    // First check for 'inventory:view' permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const url = new URL(req.url);\n        const categoryId = url.searchParams.get('categoryId');\n        const searchTerm = url.searchParams.get('search');\n\n        // Build query conditions for Prisma\n        const where: any = {};\n\n        if (categoryId) {\n            where.categoryId = parseInt(categoryId);\n        }\n\n        if (searchTerm) {\n            where.name = {\n                contains: searchTerm,\n                mode: 'insensitive'\n            };\n        }\n\n        const products = await prisma.product.findMany({\n            where,\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            products\n        });\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch products' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new product\nexport async function POST(req: NextRequest) {\n    // Check for 'inventory:manage' permission\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price, // retailPrice in request\n            weightedAverageCost, // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Validate required fields\n        if (!name || !sku || !weightedAverageCost || !price || !categoryId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Required fields are missing.'\n            }, { status: 400 });\n        }\n\n        // Check if SKU or barcode already exists\n        const existingProduct = await prisma.product.findFirst({\n            where: {\n                OR: [\n                    { sku },\n                    { barcode }\n                ]\n            }\n        });\n\n        if (existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'SKU or barcode already exists' },\n                { status: 409 }\n            );\n        }\n\n        // Create product\n        const product = await prisma.product.create({\n            data: {\n                name,\n                sku,\n                barcode: barcode || null,\n                description: description || null,\n                price,\n                weightedAverageCost,\n                categoryId\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating product:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create product' },\n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}