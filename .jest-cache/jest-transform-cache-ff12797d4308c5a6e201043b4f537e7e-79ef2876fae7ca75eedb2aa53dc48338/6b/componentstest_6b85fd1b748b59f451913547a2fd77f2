6c18833c20d4a225cba30c7fb3908d1c
"use strict";
jest.mock("@/hooks/useAuth", ()=>({
        useAuth: ()=>mockUseAuth()
    }));
jest.mock("@/hooks/usePermission", ()=>({
        usePermission: ()=>mockUsePermission()
    }));
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: mockReplace,
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }),
        usePathname: ()=>"/dashboard",
        useSearchParams: ()=>new URLSearchParams()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the useAuth hook
const mockUseAuth = jest.fn();
// Mock usePermission hook
const mockUsePermission = jest.fn();
// Mock next/navigation
const mockPush = jest.fn();
const mockReplace = jest.fn();
// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock components (since we don't have actual component files)
const MockLoginForm = ({ onSubmit, loading })=>{
    const [email, setEmail] = _react.default.useState("");
    const [password, setPassword] = _react.default.useState("");
    const handleSubmit = (e)=>{
        e.preventDefault();
        onSubmit({
            email,
            password
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        "data-testid": "login-form",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: "email",
                placeholder: "Email",
                value: email,
                onChange: (e)=>setEmail(e.target.value),
                "data-testid": "email-input",
                required: true
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: "password",
                placeholder: "Password",
                value: password,
                onChange: (e)=>setPassword(e.target.value),
                "data-testid": "password-input",
                required: true
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                disabled: loading,
                "data-testid": "login-button",
                children: loading ? "Logging in..." : "Login"
            })
        ]
    });
};
const MockInvoiceForm = ({ onSubmit, initialData, loading })=>{
    const [formData, setFormData] = _react.default.useState({
        customerId: initialData?.customerId || "",
        items: initialData?.items || [
            {
                productId: "",
                quantity: 1,
                price: 0
            }
        ],
        notes: initialData?.notes || ""
    });
    const handleSubmit = (e)=>{
        e.preventDefault();
        onSubmit(formData);
    };
    const addItem = ()=>{
        setFormData((prev)=>({
                ...prev,
                items: [
                    ...prev.items,
                    {
                        productId: "",
                        quantity: 1,
                        price: 0
                    }
                ]
            }));
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        "data-testid": "invoice-form",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                value: formData.customerId,
                onChange: (e)=>setFormData((prev)=>({
                            ...prev,
                            customerId: e.target.value
                        })),
                "data-testid": "customer-select",
                required: true,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "",
                        children: "Select Customer"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "cust-1",
                        children: "Customer 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "cust-2",
                        children: "Customer 2"
                    })
                ]
            }),
            formData.items.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `item-${index}`,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            type: "text",
                            placeholder: "Product ID",
                            value: item.productId,
                            onChange: (e)=>{
                                const newItems = [
                                    ...formData.items
                                ];
                                newItems[index].productId = e.target.value;
                                setFormData((prev)=>({
                                        ...prev,
                                        items: newItems
                                    }));
                            },
                            "data-testid": `product-input-${index}`,
                            required: true
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            type: "number",
                            placeholder: "Quantity",
                            value: item.quantity,
                            onChange: (e)=>{
                                const newItems = [
                                    ...formData.items
                                ];
                                newItems[index].quantity = parseInt(e.target.value) || 0;
                                setFormData((prev)=>({
                                        ...prev,
                                        items: newItems
                                    }));
                            },
                            "data-testid": `quantity-input-${index}`,
                            min: "1",
                            required: true
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            type: "number",
                            placeholder: "Price",
                            value: item.price,
                            onChange: (e)=>{
                                const newItems = [
                                    ...formData.items
                                ];
                                newItems[index].price = parseFloat(e.target.value) || 0;
                                setFormData((prev)=>({
                                        ...prev,
                                        items: newItems
                                    }));
                            },
                            "data-testid": `price-input-${index}`,
                            min: "0",
                            step: "0.01",
                            required: true
                        })
                    ]
                }, index)),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                onClick: addItem,
                "data-testid": "add-item-button",
                children: "Add Item"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                placeholder: "Notes",
                value: formData.notes,
                onChange: (e)=>setFormData((prev)=>({
                            ...prev,
                            notes: e.target.value
                        })),
                "data-testid": "notes-textarea"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                disabled: loading,
                "data-testid": "submit-button",
                children: loading ? "Saving..." : "Save Invoice"
            })
        ]
    });
};
const MockDataTable = ({ data, columns, onEdit, onDelete, loading })=>{
    if (loading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "table-loading",
            children: "Loading..."
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
        "data-testid": "data-table",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                    children: [
                        columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                "data-testid": `header-${col.key}`,
                                children: col.label
                            }, col.key)),
                        (onEdit || onDelete) && /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                            children: "Actions"
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("tbody", {
                children: data.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                        "data-testid": `row-${index}`,
                        children: [
                            columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                    "data-testid": `cell-${index}-${col.key}`,
                                    children: item[col.key]
                                }, col.key)),
                            (onEdit || onDelete) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("td", {
                                children: [
                                    onEdit && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        onClick: ()=>onEdit(item),
                                        "data-testid": `edit-${index}`,
                                        children: "Edit"
                                    }),
                                    onDelete && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        onClick: ()=>onDelete(item),
                                        "data-testid": `delete-${index}`,
                                        children: "Delete"
                                    })
                                ]
                            })
                        ]
                    }, item.id || index))
            })
        ]
    });
};
const MockDashboardCard = ({ title, value, change, loading })=>{
    if (loading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "dashboard-card",
            className: "loading",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "card-skeleton",
                children: "Loading..."
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "dashboard-card",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                "data-testid": "card-title",
                children: title
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "card-value",
                children: value
            }),
            change && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "card-change",
                className: change.type,
                children: [
                    change.type === "increase" ? "↑" : "↓",
                    " ",
                    change.value,
                    "%"
                ]
            })
        ]
    });
};
const MockSearchFilter = ({ onSearch, onFilter, filters })=>{
    const [searchQuery, setSearchQuery] = _react.default.useState("");
    const [localFilters, setLocalFilters] = _react.default.useState(filters);
    const handleSearch = (e)=>{
        e.preventDefault();
        onSearch(searchQuery);
    };
    const handleFilterChange = (key, value)=>{
        const newFilters = {
            ...localFilters,
            [key]: value
        };
        setLocalFilters(newFilters);
        onFilter(newFilters);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "search-filter",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                onSubmit: handleSearch,
                "data-testid": "search-form",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "text",
                        placeholder: "Search...",
                        value: searchQuery,
                        onChange: (e)=>setSearchQuery(e.target.value),
                        "data-testid": "search-input"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        type: "submit",
                        "data-testid": "search-button",
                        children: "Search"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "filters",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        value: localFilters.status || "",
                        onChange: (e)=>handleFilterChange("status", e.target.value),
                        "data-testid": "status-filter",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "All Status"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "active",
                                children: "Active"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "inactive",
                                children: "Inactive"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "pending",
                                children: "Pending"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        value: localFilters.category || "",
                        onChange: (e)=>handleFilterChange("category", e.target.value),
                        "data-testid": "category-filter",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "All Categories"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "electronics",
                                children: "Electronics"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "clothing",
                                children: "Clothing"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "books",
                                children: "Books"
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
describe("Component Testing", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock localStorage
        Object.defineProperty(window, "localStorage", {
            value: {
                getItem: jest.fn(()=>"mock-token"),
                setItem: jest.fn(),
                removeItem: jest.fn()
            },
            writable: true
        });
        // Default auth mock
        mockUseAuth.mockReturnValue({
            user: {
                id: "1",
                name: "Test User",
                email: "test@example.com",
                permissions: [
                    "sales:all",
                    "inventory:all",
                    "customers:all"
                ]
            },
            isLoading: false,
            isAuthenticated: true,
            login: jest.fn(),
            logout: jest.fn(),
            hasPermission: jest.fn(()=>true)
        });
        // Default permission mock
        mockUsePermission.mockReturnValue({
            hasPermission: jest.fn(()=>true),
            hasAnyPermission: jest.fn(()=>true),
            hasAllPermissions: jest.fn(()=>true)
        });
    });
    describe("LoginForm Component", ()=>{
        test("should render login form correctly", ()=>{
            const mockOnSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                onSubmit: mockOnSubmit
            }));
            expect(_react1.screen.getByTestId("login-form")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("email-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("password-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("login-button")).toBeInTheDocument();
        });
        test("should handle form submission with valid data", async ()=>{
            const mockOnSubmit = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                onSubmit: mockOnSubmit
            }));
            await user.type(_react1.screen.getByTestId("email-input"), "test@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.click(_react1.screen.getByTestId("login-button"));
            expect(mockOnSubmit).toHaveBeenCalledWith({
                email: "test@example.com",
                password: "password123"
            });
        });
        test("should show loading state", ()=>{
            const mockOnSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                onSubmit: mockOnSubmit,
                loading: true
            }));
            const button = _react1.screen.getByTestId("login-button");
            expect(button).toBeDisabled();
            expect(button).toHaveTextContent("Logging in...");
        });
        test("should require email and password fields", async ()=>{
            const mockOnSubmit = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                onSubmit: mockOnSubmit
            }));
            await user.click(_react1.screen.getByTestId("login-button"));
            // Form should not submit without required fields
            expect(mockOnSubmit).not.toHaveBeenCalled();
        });
    });
    describe("InvoiceForm Component", ()=>{
        test("should render invoice form correctly", ()=>{
            const mockOnSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockInvoiceForm, {
                onSubmit: mockOnSubmit
            }));
            expect(_react1.screen.getByTestId("invoice-form")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("customer-select")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("item-0")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("add-item-button")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("submit-button")).toBeInTheDocument();
        });
        test("should handle adding new items", async ()=>{
            const mockOnSubmit = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockInvoiceForm, {
                onSubmit: mockOnSubmit
            }));
            expect(_react1.screen.getByTestId("item-0")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("item-1")).not.toBeInTheDocument();
            await user.click(_react1.screen.getByTestId("add-item-button"));
            expect(_react1.screen.getByTestId("item-1")).toBeInTheDocument();
        });
        test("should handle form submission with complete data", async ()=>{
            const mockOnSubmit = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockInvoiceForm, {
                onSubmit: mockOnSubmit
            }));
            await user.selectOptions(_react1.screen.getByTestId("customer-select"), "cust-1");
            await user.type(_react1.screen.getByTestId("product-input-0"), "prod-1");
            await user.clear(_react1.screen.getByTestId("quantity-input-0"));
            await user.type(_react1.screen.getByTestId("quantity-input-0"), "2");
            await user.clear(_react1.screen.getByTestId("price-input-0"));
            await user.type(_react1.screen.getByTestId("price-input-0"), "100");
            await user.type(_react1.screen.getByTestId("notes-textarea"), "Test invoice");
            await user.click(_react1.screen.getByTestId("submit-button"));
            expect(mockOnSubmit).toHaveBeenCalledWith({
                customerId: "cust-1",
                items: [
                    {
                        productId: "prod-1",
                        quantity: 2,
                        price: 100
                    }
                ],
                notes: "Test invoice"
            });
        });
        test("should populate form with initial data", ()=>{
            const initialData = {
                customerId: "cust-2",
                items: [
                    {
                        productId: "prod-2",
                        quantity: 3,
                        price: 150
                    }
                ],
                notes: "Initial notes"
            };
            const mockOnSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockInvoiceForm, {
                onSubmit: mockOnSubmit,
                initialData: initialData
            }));
            expect(_react1.screen.getByTestId("customer-select")).toHaveValue("cust-2");
            expect(_react1.screen.getByTestId("product-input-0")).toHaveValue("prod-2");
            expect(_react1.screen.getByTestId("quantity-input-0")).toHaveValue(3);
            expect(_react1.screen.getByTestId("price-input-0")).toHaveValue(150);
            expect(_react1.screen.getByTestId("notes-textarea")).toHaveValue("Initial notes");
        });
    });
    describe("DataTable Component", ()=>{
        const mockData = [
            {
                id: "1",
                name: "Item 1",
                status: "active",
                price: 100
            },
            {
                id: "2",
                name: "Item 2",
                status: "inactive",
                price: 200
            }
        ];
        const mockColumns = [
            {
                key: "name",
                label: "Name"
            },
            {
                key: "status",
                label: "Status"
            },
            {
                key: "price",
                label: "Price"
            }
        ];
        test("should render table with data correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDataTable, {
                data: mockData,
                columns: mockColumns
            }));
            expect(_react1.screen.getByTestId("data-table")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("header-name")).toHaveTextContent("Name");
            expect(_react1.screen.getByTestId("header-status")).toHaveTextContent("Status");
            expect(_react1.screen.getByTestId("header-price")).toHaveTextContent("Price");
            expect(_react1.screen.getByTestId("cell-0-name")).toHaveTextContent("Item 1");
            expect(_react1.screen.getByTestId("cell-1-name")).toHaveTextContent("Item 2");
        });
        test("should handle edit and delete actions", async ()=>{
            const mockOnEdit = jest.fn();
            const mockOnDelete = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDataTable, {
                data: mockData,
                columns: mockColumns,
                onEdit: mockOnEdit,
                onDelete: mockOnDelete
            }));
            await user.click(_react1.screen.getByTestId("edit-0"));
            expect(mockOnEdit).toHaveBeenCalledWith(mockData[0]);
            await user.click(_react1.screen.getByTestId("delete-1"));
            expect(mockOnDelete).toHaveBeenCalledWith(mockData[1]);
        });
        test("should show loading state", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDataTable, {
                data: [],
                columns: mockColumns,
                loading: true
            }));
            expect(_react1.screen.getByTestId("table-loading")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("table-loading")).toHaveTextContent("Loading...");
        });
        test("should render empty table when no data", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDataTable, {
                data: [],
                columns: mockColumns
            }));
            expect(_react1.screen.getByTestId("data-table")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("row-0")).not.toBeInTheDocument();
        });
    });
    describe("DashboardCard Component", ()=>{
        test("should render card with basic data", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboardCard, {
                title: "Total Sales",
                value: "$125,000"
            }));
            expect(_react1.screen.getByTestId("dashboard-card")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("card-title")).toHaveTextContent("Total Sales");
            expect(_react1.screen.getByTestId("card-value")).toHaveTextContent("$125,000");
        });
        test("should render card with change indicator", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboardCard, {
                title: "Revenue",
                value: 50000,
                change: {
                    value: 15.5,
                    type: "increase"
                }
            }));
            expect(_react1.screen.getByTestId("card-change")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("card-change")).toHaveTextContent("↑ 15.5%");
            expect(_react1.screen.getByTestId("card-change")).toHaveClass("increase");
        });
        test("should render card with decrease indicator", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboardCard, {
                title: "Orders",
                value: 200,
                change: {
                    value: 5.2,
                    type: "decrease"
                }
            }));
            expect(_react1.screen.getByTestId("card-change")).toHaveTextContent("↓ 5.2%");
            expect(_react1.screen.getByTestId("card-change")).toHaveClass("decrease");
        });
        test("should show loading state", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboardCard, {
                title: "Loading Card",
                value: "",
                loading: true
            }));
            expect(_react1.screen.getByTestId("dashboard-card")).toHaveClass("loading");
            expect(_react1.screen.getByTestId("card-skeleton")).toBeInTheDocument();
        });
    });
    describe("SearchFilter Component", ()=>{
        test("should render search and filter controls", ()=>{
            const mockOnSearch = jest.fn();
            const mockOnFilter = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchFilter, {
                onSearch: mockOnSearch,
                onFilter: mockOnFilter,
                filters: {}
            }));
            expect(_react1.screen.getByTestId("search-filter")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("search-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("search-button")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("status-filter")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("category-filter")).toBeInTheDocument();
        });
        test("should handle search submission", async ()=>{
            const mockOnSearch = jest.fn();
            const mockOnFilter = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchFilter, {
                onSearch: mockOnSearch,
                onFilter: mockOnFilter,
                filters: {}
            }));
            await user.type(_react1.screen.getByTestId("search-input"), "test query");
            await user.click(_react1.screen.getByTestId("search-button"));
            expect(mockOnSearch).toHaveBeenCalledWith("test query");
        });
        test("should handle filter changes", async ()=>{
            const mockOnSearch = jest.fn();
            const mockOnFilter = jest.fn();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchFilter, {
                onSearch: mockOnSearch,
                onFilter: mockOnFilter,
                filters: {}
            }));
            await user.selectOptions(_react1.screen.getByTestId("status-filter"), "active");
            expect(mockOnFilter).toHaveBeenCalledWith({
                status: "active"
            });
            await user.selectOptions(_react1.screen.getByTestId("category-filter"), "electronics");
            expect(mockOnFilter).toHaveBeenCalledWith({
                status: "active",
                category: "electronics"
            });
        });
        test("should initialize with provided filters", ()=>{
            const mockOnSearch = jest.fn();
            const mockOnFilter = jest.fn();
            const initialFilters = {
                status: "pending",
                category: "books"
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSearchFilter, {
                onSearch: mockOnSearch,
                onFilter: mockOnFilter,
                filters: initialFilters
            }));
            expect(_react1.screen.getByTestId("status-filter")).toHaveValue("pending");
            expect(_react1.screen.getByTestId("category-filter")).toHaveValue("books");
        });
    });
    describe("Permission-based Component Rendering", ()=>{
        test("should render components when user has permissions", ()=>{
            mockUsePermission.mockReturnValue({
                hasPermission: jest.fn(()=>true),
                hasAnyPermission: jest.fn(()=>true),
                hasAllPermissions: jest.fn(()=>true)
            });
            const ProtectedComponent = ()=>{
                const { hasPermission } = mockUsePermission();
                if (!hasPermission("sales:create")) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "no-permission",
                        children: "No permission"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "protected-content",
                    children: "Protected content"
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {}));
            expect(_react1.screen.getByTestId("protected-content")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("no-permission")).not.toBeInTheDocument();
        });
        test("should hide components when user lacks permissions", ()=>{
            mockUsePermission.mockReturnValue({
                hasPermission: jest.fn(()=>false),
                hasAnyPermission: jest.fn(()=>false),
                hasAllPermissions: jest.fn(()=>false)
            });
            const ProtectedComponent = ()=>{
                const { hasPermission } = mockUsePermission();
                if (!hasPermission("sales:create")) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "no-permission",
                        children: "No permission"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "protected-content",
                    children: "Protected content"
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {}));
            expect(_react1.screen.getByTestId("no-permission")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("protected-content")).not.toBeInTheDocument();
        });
    });
    describe("Error Boundary and Error Handling", ()=>{
        test("should handle component errors gracefully", ()=>{
            const ErrorComponent = ()=>{
                throw new Error("Test error");
            };
            const ErrorBoundary = ({ children })=>{
                const [hasError, setHasError] = _react.default.useState(false);
                _react.default.useEffect(()=>{
                    const errorHandler = ()=>setHasError(true);
                    window.addEventListener("error", errorHandler);
                    return ()=>window.removeEventListener("error", errorHandler);
                }, []);
                if (hasError) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "error-fallback",
                        children: "Something went wrong"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                    children: children
                });
            };
            // Suppress console.error for this test
            const consoleSpy = jest.spyOn(console, "error").mockImplementation(()=>{});
            try {
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorBoundary, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorComponent, {})
                }));
            } catch (error) {
            // Expected error
            }
            consoleSpy.mockRestore();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvY29tcG9uZW50cy9jb21wb25lbnRzLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuXG4vLyBNb2NrIHRoZSB1c2VBdXRoIGhvb2tcbmNvbnN0IG1vY2tVc2VBdXRoID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZUF1dGgnLCAoKSA9PiAoe1xuICB1c2VBdXRoOiAoKSA9PiBtb2NrVXNlQXV0aCgpLFxufSkpO1xuXG4vLyBNb2NrIHVzZVBlcm1pc3Npb24gaG9va1xuY29uc3QgbW9ja1VzZVBlcm1pc3Npb24gPSBqZXN0LmZuKCk7XG5qZXN0Lm1vY2soJ0AvaG9va3MvdXNlUGVybWlzc2lvbicsICgpID0+ICh7XG4gIHVzZVBlcm1pc3Npb246ICgpID0+IG1vY2tVc2VQZXJtaXNzaW9uKCksXG59KSk7XG5cbi8vIE1vY2sgbmV4dC9uYXZpZ2F0aW9uXG5jb25zdCBtb2NrUHVzaCA9IGplc3QuZm4oKTtcbmNvbnN0IG1vY2tSZXBsYWNlID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xuICB1c2VSb3V0ZXI6ICgpID0+ICh7XG4gICAgcHVzaDogbW9ja1B1c2gsXG4gICAgcmVwbGFjZTogbW9ja1JlcGxhY2UsXG4gICAgYmFjazogamVzdC5mbigpLFxuICAgIGZvcndhcmQ6IGplc3QuZm4oKSxcbiAgICByZWZyZXNoOiBqZXN0LmZuKCksXG4gICAgcHJlZmV0Y2g6IGplc3QuZm4oKSxcbiAgfSksXG4gIHVzZVBhdGhuYW1lOiAoKSA9PiAnL2Rhc2hib2FyZCcsXG4gIHVzZVNlYXJjaFBhcmFtczogKCkgPT4gbmV3IFVSTFNlYXJjaFBhcmFtcygpLFxufSkpO1xuXG4vLyBNb2NrIGZldGNoIGdsb2JhbGx5XG5jb25zdCBtb2NrRmV0Y2ggPSBqZXN0LmZuKCk7XG5nbG9iYWwuZmV0Y2ggPSBtb2NrRmV0Y2g7XG5cbi8vIE1vY2sgY29tcG9uZW50cyAoc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhY3R1YWwgY29tcG9uZW50IGZpbGVzKVxuY29uc3QgTW9ja0xvZ2luRm9ybSA9ICh7IG9uU3VibWl0LCBsb2FkaW5nIH06IHsgb25TdWJtaXQ6IChkYXRhOiBhbnkpID0+IHZvaWQ7IGxvYWRpbmc/OiBib29sZWFuIH0pID0+IHtcbiAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSBSZWFjdC51c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gUmVhY3QudXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChlOiBSZWFjdC5Gb3JtRXZlbnQpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25TdWJtaXQoeyBlbWFpbCwgcGFzc3dvcmQgfSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fSBkYXRhLXRlc3RpZD1cImxvZ2luLWZvcm1cIj5cbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgdmFsdWU9e2VtYWlsfVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEVtYWlsKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXG4gICAgICAgIHJlcXVpcmVkXG4gICAgICAvPlxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIlxuICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICBkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWlucHV0XCJcbiAgICAgICAgcmVxdWlyZWRcbiAgICAgIC8+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17bG9hZGluZ30gZGF0YS10ZXN0aWQ9XCJsb2dpbi1idXR0b25cIj5cbiAgICAgICAge2xvYWRpbmcgPyAnTG9nZ2luZyBpbi4uLicgOiAnTG9naW4nfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9mb3JtPlxuICApO1xufTtcblxuY29uc3QgTW9ja0ludm9pY2VGb3JtID0gKHsgb25TdWJtaXQsIGluaXRpYWxEYXRhLCBsb2FkaW5nIH06IHsgXG4gIG9uU3VibWl0OiAoZGF0YTogYW55KSA9PiB2b2lkOyBcbiAgaW5pdGlhbERhdGE/OiBhbnk7IFxuICBsb2FkaW5nPzogYm9vbGVhbjtcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1EYXRhLCBzZXRGb3JtRGF0YV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgY3VzdG9tZXJJZDogaW5pdGlhbERhdGE/LmN1c3RvbWVySWQgfHwgJycsXG4gICAgaXRlbXM6IGluaXRpYWxEYXRhPy5pdGVtcyB8fCBbeyBwcm9kdWN0SWQ6ICcnLCBxdWFudGl0eTogMSwgcHJpY2U6IDAgfV0sXG4gICAgbm90ZXM6IGluaXRpYWxEYXRhPy5ub3RlcyB8fCAnJ1xuICB9KTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoZTogUmVhY3QuRm9ybUV2ZW50KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG9uU3VibWl0KGZvcm1EYXRhKTtcbiAgfTtcblxuICBjb25zdCBhZGRJdGVtID0gKCkgPT4ge1xuICAgIHNldEZvcm1EYXRhKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBpdGVtczogWy4uLnByZXYuaXRlbXMsIHsgcHJvZHVjdElkOiAnJywgcXVhbnRpdHk6IDEsIHByaWNlOiAwIH1dXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gZGF0YS10ZXN0aWQ9XCJpbnZvaWNlLWZvcm1cIj5cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgdmFsdWU9e2Zvcm1EYXRhLmN1c3RvbWVySWR9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0Rm9ybURhdGEocHJldiA9PiAoeyAuLi5wcmV2LCBjdXN0b21lcklkOiBlLnRhcmdldC52YWx1ZSB9KSl9XG4gICAgICAgIGRhdGEtdGVzdGlkPVwiY3VzdG9tZXItc2VsZWN0XCJcbiAgICAgICAgcmVxdWlyZWRcbiAgICAgID5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPlNlbGVjdCBDdXN0b21lcjwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3VzdC0xXCI+Q3VzdG9tZXIgMTwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3VzdC0yXCI+Q3VzdG9tZXIgMjwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gICAgICBcbiAgICAgIHtmb3JtRGF0YS5pdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgIDxkaXYga2V5PXtpbmRleH0gZGF0YS10ZXN0aWQ9e2BpdGVtLSR7aW5kZXh9YH0+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlByb2R1Y3QgSURcIlxuICAgICAgICAgICAgdmFsdWU9e2l0ZW0ucHJvZHVjdElkfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW1zID0gWy4uLmZvcm1EYXRhLml0ZW1zXTtcbiAgICAgICAgICAgICAgbmV3SXRlbXNbaW5kZXhdLnByb2R1Y3RJZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICBzZXRGb3JtRGF0YShwcmV2ID0+ICh7IC4uLnByZXYsIGl0ZW1zOiBuZXdJdGVtcyB9KSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2Bwcm9kdWN0LWlucHV0LSR7aW5kZXh9YH1cbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJRdWFudGl0eVwiXG4gICAgICAgICAgICB2YWx1ZT17aXRlbS5xdWFudGl0eX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtcyA9IFsuLi5mb3JtRGF0YS5pdGVtc107XG4gICAgICAgICAgICAgIG5ld0l0ZW1zW2luZGV4XS5xdWFudGl0eSA9IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSB8fCAwO1xuICAgICAgICAgICAgICBzZXRGb3JtRGF0YShwcmV2ID0+ICh7IC4uLnByZXYsIGl0ZW1zOiBuZXdJdGVtcyB9KSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BxdWFudGl0eS1pbnB1dC0ke2luZGV4fWB9XG4gICAgICAgICAgICBtaW49XCIxXCJcbiAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQcmljZVwiXG4gICAgICAgICAgICB2YWx1ZT17aXRlbS5wcmljZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtcyA9IFsuLi5mb3JtRGF0YS5pdGVtc107XG4gICAgICAgICAgICAgIG5ld0l0ZW1zW2luZGV4XS5wcmljZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQudmFsdWUpIHx8IDA7XG4gICAgICAgICAgICAgIHNldEZvcm1EYXRhKHByZXYgPT4gKHsgLi4ucHJldiwgaXRlbXM6IG5ld0l0ZW1zIH0pKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkYXRhLXRlc3RpZD17YHByaWNlLWlucHV0LSR7aW5kZXh9YH1cbiAgICAgICAgICAgIG1pbj1cIjBcIlxuICAgICAgICAgICAgc3RlcD1cIjAuMDFcIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpfVxuICAgICAgXG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXthZGRJdGVtfSBkYXRhLXRlc3RpZD1cImFkZC1pdGVtLWJ1dHRvblwiPlxuICAgICAgICBBZGQgSXRlbVxuICAgICAgPC9idXR0b24+XG4gICAgICBcbiAgICAgIDx0ZXh0YXJlYVxuICAgICAgICBwbGFjZWhvbGRlcj1cIk5vdGVzXCJcbiAgICAgICAgdmFsdWU9e2Zvcm1EYXRhLm5vdGVzfVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEZvcm1EYXRhKHByZXYgPT4gKHsgLi4ucHJldiwgbm90ZXM6IGUudGFyZ2V0LnZhbHVlIH0pKX1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJub3Rlcy10ZXh0YXJlYVwiXG4gICAgICAvPlxuICAgICAgXG4gICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17bG9hZGluZ30gZGF0YS10ZXN0aWQ9XCJzdWJtaXQtYnV0dG9uXCI+XG4gICAgICAgIHtsb2FkaW5nID8gJ1NhdmluZy4uLicgOiAnU2F2ZSBJbnZvaWNlJ31cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbiAgKTtcbn07XG5cbmNvbnN0IE1vY2tEYXRhVGFibGUgPSAoeyBkYXRhLCBjb2x1bW5zLCBvbkVkaXQsIG9uRGVsZXRlLCBsb2FkaW5nIH06IHtcbiAgZGF0YTogYW55W107XG4gIGNvbHVtbnM6IHsga2V5OiBzdHJpbmc7IGxhYmVsOiBzdHJpbmcgfVtdO1xuICBvbkVkaXQ/OiAoaXRlbTogYW55KSA9PiB2b2lkO1xuICBvbkRlbGV0ZT86IChpdGVtOiBhbnkpID0+IHZvaWQ7XG4gIGxvYWRpbmc/OiBib29sZWFuO1xufSkgPT4ge1xuICBpZiAobG9hZGluZykge1xuICAgIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwidGFibGUtbG9hZGluZ1wiPkxvYWRpbmcuLi48L2Rpdj47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDx0YWJsZSBkYXRhLXRlc3RpZD1cImRhdGEtdGFibGVcIj5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIHtjb2x1bW5zLm1hcChjb2wgPT4gKFxuICAgICAgICAgICAgPHRoIGtleT17Y29sLmtleX0gZGF0YS10ZXN0aWQ9e2BoZWFkZXItJHtjb2wua2V5fWB9PlxuICAgICAgICAgICAgICB7Y29sLmxhYmVsfVxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICApKX1cbiAgICAgICAgICB7KG9uRWRpdCB8fCBvbkRlbGV0ZSkgJiYgPHRoPkFjdGlvbnM8L3RoPn1cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGhlYWQ+XG4gICAgICA8dGJvZHk+XG4gICAgICAgIHtkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICA8dHIga2V5PXtpdGVtLmlkIHx8IGluZGV4fSBkYXRhLXRlc3RpZD17YHJvdy0ke2luZGV4fWB9PlxuICAgICAgICAgICAge2NvbHVtbnMubWFwKGNvbCA9PiAoXG4gICAgICAgICAgICAgIDx0ZCBrZXk9e2NvbC5rZXl9IGRhdGEtdGVzdGlkPXtgY2VsbC0ke2luZGV4fS0ke2NvbC5rZXl9YH0+XG4gICAgICAgICAgICAgICAge2l0ZW1bY29sLmtleV19XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICAgIHsob25FZGl0IHx8IG9uRGVsZXRlKSAmJiAoXG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICB7b25FZGl0ICYmIChcbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25FZGl0KGl0ZW0pfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YGVkaXQtJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBFZGl0XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtvbkRlbGV0ZSAmJiAoXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uRGVsZXRlKGl0ZW0pfVxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YGRlbGV0ZS0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKSl9XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gICk7XG59O1xuXG5jb25zdCBNb2NrRGFzaGJvYXJkQ2FyZCA9ICh7IHRpdGxlLCB2YWx1ZSwgY2hhbmdlLCBsb2FkaW5nIH06IHtcbiAgdGl0bGU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgY2hhbmdlPzogeyB2YWx1ZTogbnVtYmVyOyB0eXBlOiAnaW5jcmVhc2UnIHwgJ2RlY3JlYXNlJyB9O1xuICBsb2FkaW5nPzogYm9vbGVhbjtcbn0pID0+IHtcbiAgaWYgKGxvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cImRhc2hib2FyZC1jYXJkXCIgY2xhc3NOYW1lPVwibG9hZGluZ1wiPlxuICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiY2FyZC1za2VsZXRvblwiPkxvYWRpbmcuLi48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkYXNoYm9hcmQtY2FyZFwiPlxuICAgICAgPGgzIGRhdGEtdGVzdGlkPVwiY2FyZC10aXRsZVwiPnt0aXRsZX08L2gzPlxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cImNhcmQtdmFsdWVcIj57dmFsdWV9PC9kaXY+XG4gICAgICB7Y2hhbmdlICYmIChcbiAgICAgICAgPGRpdiBcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cImNhcmQtY2hhbmdlXCIgXG4gICAgICAgICAgY2xhc3NOYW1lPXtjaGFuZ2UudHlwZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGFuZ2UudHlwZSA9PT0gJ2luY3JlYXNlJyA/ICfihpEnIDogJ+KGkyd9IHtjaGFuZ2UudmFsdWV9JVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBNb2NrU2VhcmNoRmlsdGVyID0gKHsgb25TZWFyY2gsIG9uRmlsdGVyLCBmaWx0ZXJzIH06IHtcbiAgb25TZWFyY2g6IChxdWVyeTogc3RyaW5nKSA9PiB2b2lkO1xuICBvbkZpbHRlcjogKGZpbHRlcnM6IGFueSkgPT4gdm9pZDtcbiAgZmlsdGVyczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn0pID0+IHtcbiAgY29uc3QgW3NlYXJjaFF1ZXJ5LCBzZXRTZWFyY2hRdWVyeV0gPSBSZWFjdC51c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtsb2NhbEZpbHRlcnMsIHNldExvY2FsRmlsdGVyc10gPSBSZWFjdC51c2VTdGF0ZShmaWx0ZXJzKTtcblxuICBjb25zdCBoYW5kbGVTZWFyY2ggPSAoZTogUmVhY3QuRm9ybUV2ZW50KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG9uU2VhcmNoKHNlYXJjaFF1ZXJ5KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaWx0ZXJDaGFuZ2UgPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICBjb25zdCBuZXdGaWx0ZXJzID0geyAuLi5sb2NhbEZpbHRlcnMsIFtrZXldOiB2YWx1ZSB9O1xuICAgIHNldExvY2FsRmlsdGVycyhuZXdGaWx0ZXJzKTtcbiAgICBvbkZpbHRlcihuZXdGaWx0ZXJzKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJzZWFyY2gtZmlsdGVyXCI+XG4gICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU2VhcmNofSBkYXRhLXRlc3RpZD1cInNlYXJjaC1mb3JtXCI+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaC4uLlwiXG4gICAgICAgICAgdmFsdWU9e3NlYXJjaFF1ZXJ5fVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2VhcmNoUXVlcnkoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2VhcmNoLWlucHV0XCJcbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgZGF0YS10ZXN0aWQ9XCJzZWFyY2gtYnV0dG9uXCI+XG4gICAgICAgICAgU2VhcmNoXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgICAgXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiZmlsdGVyc1wiPlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgdmFsdWU9e2xvY2FsRmlsdGVycy5zdGF0dXMgfHwgJyd9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBoYW5kbGVGaWx0ZXJDaGFuZ2UoJ3N0YXR1cycsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBkYXRhLXRlc3RpZD1cInN0YXR1cy1maWx0ZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPkFsbCBTdGF0dXM8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWN0aXZlXCI+QWN0aXZlPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImluYWN0aXZlXCI+SW5hY3RpdmU8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicGVuZGluZ1wiPlBlbmRpbmc8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIFxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgdmFsdWU9e2xvY2FsRmlsdGVycy5jYXRlZ29yeSB8fCAnJ31cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IGhhbmRsZUZpbHRlckNoYW5nZSgnY2F0ZWdvcnknLCBlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjYXRlZ29yeS1maWx0ZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPkFsbCBDYXRlZ29yaWVzPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImVsZWN0cm9uaWNzXCI+RWxlY3Ryb25pY3M8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY2xvdGhpbmdcIj5DbG90aGluZzwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJib29rc1wiPkJvb2tzPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RpbmcnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIC8vIE1vY2sgbG9jYWxTdG9yYWdlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2FsU3RvcmFnZScsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGdldEl0ZW06IGplc3QuZm4oKCkgPT4gJ21vY2stdG9rZW4nKSxcbiAgICAgICAgc2V0SXRlbTogamVzdC5mbigpLFxuICAgICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfSk7XG5cbiAgICAvLyBEZWZhdWx0IGF1dGggbW9ja1xuICAgIG1vY2tVc2VBdXRoLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwZXJtaXNzaW9uczogWydzYWxlczphbGwnLCAnaW52ZW50b3J5OmFsbCcsICdjdXN0b21lcnM6YWxsJ11cbiAgICAgIH0sXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgICAgbG9naW46IGplc3QuZm4oKSxcbiAgICAgIGxvZ291dDogamVzdC5mbigpLFxuICAgICAgaGFzUGVybWlzc2lvbjogamVzdC5mbigoKSA9PiB0cnVlKVxuICAgIH0pO1xuXG4gICAgLy8gRGVmYXVsdCBwZXJtaXNzaW9uIG1vY2tcbiAgICBtb2NrVXNlUGVybWlzc2lvbi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgaGFzUGVybWlzc2lvbjogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgICAgIGhhc0FueVBlcm1pc3Npb246IGplc3QuZm4oKCkgPT4gdHJ1ZSksXG4gICAgICBoYXNBbGxQZXJtaXNzaW9uczogamVzdC5mbigoKSA9PiB0cnVlKVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTG9naW5Gb3JtIENvbXBvbmVudCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGxvZ2luIGZvcm0gY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU3VibWl0ID0gamVzdC5mbigpO1xuICAgICAgcmVuZGVyKDxNb2NrTG9naW5Gb3JtIG9uU3VibWl0PXttb2NrT25TdWJtaXR9IC8+KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9naW4tZm9ybScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwtaW5wdXQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkLWlucHV0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dpbi1idXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZm9ybSBzdWJtaXNzaW9uIHdpdGggdmFsaWQgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblN1Ym1pdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKDxNb2NrTG9naW5Gb3JtIG9uU3VibWl0PXttb2NrT25TdWJtaXR9IC8+KTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnZW1haWwtaW5wdXQnKSwgJ3Rlc3RAZXhhbXBsZS5jb20nKTtcbiAgICAgIGF3YWl0IHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Bhc3N3b3JkLWlucHV0JyksICdwYXNzd29yZDEyMycpO1xuICAgICAgYXdhaXQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvZ2luLWJ1dHRvbicpKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tPblN1Ym1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc2hvdyBsb2FkaW5nIHN0YXRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU3VibWl0ID0gamVzdC5mbigpO1xuICAgICAgcmVuZGVyKDxNb2NrTG9naW5Gb3JtIG9uU3VibWl0PXttb2NrT25TdWJtaXR9IGxvYWRpbmc9e3RydWV9IC8+KTtcbiAgICAgIFxuICAgICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dpbi1idXR0b24nKTtcbiAgICAgIGV4cGVjdChidXR0b24pLnRvQmVEaXNhYmxlZCgpO1xuICAgICAgZXhwZWN0KGJ1dHRvbikudG9IYXZlVGV4dENvbnRlbnQoJ0xvZ2dpbmcgaW4uLi4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZXF1aXJlIGVtYWlsIGFuZCBwYXNzd29yZCBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TdWJtaXQgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG4gICAgICBcbiAgICAgIHJlbmRlcig8TW9ja0xvZ2luRm9ybSBvblN1Ym1pdD17bW9ja09uU3VibWl0fSAvPik7XG4gICAgICBcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdsb2dpbi1idXR0b24nKSk7XG4gICAgICBcbiAgICAgIC8vIEZvcm0gc2hvdWxkIG5vdCBzdWJtaXQgd2l0aG91dCByZXF1aXJlZCBmaWVsZHNcbiAgICAgIGV4cGVjdChtb2NrT25TdWJtaXQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnZvaWNlRm9ybSBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBpbnZvaWNlIGZvcm0gY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU3VibWl0ID0gamVzdC5mbigpO1xuICAgICAgcmVuZGVyKDxNb2NrSW52b2ljZUZvcm0gb25TdWJtaXQ9e21vY2tPblN1Ym1pdH0gLz4pO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdpbnZvaWNlLWZvcm0nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1c3RvbWVyLXNlbGVjdCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnaXRlbS0wJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdhZGQtaXRlbS1idXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1idXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgYWRkaW5nIG5ldyBpdGVtcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblN1Ym1pdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKDxNb2NrSW52b2ljZUZvcm0gb25TdWJtaXQ9e21vY2tPblN1Ym1pdH0gLz4pO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdpdGVtLTAnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnaXRlbS0xJykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnYWRkLWl0ZW0tYnV0dG9uJykpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdpdGVtLTEnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZm9ybSBzdWJtaXNzaW9uIHdpdGggY29tcGxldGUgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblN1Ym1pdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKDxNb2NrSW52b2ljZUZvcm0gb25TdWJtaXQ9e21vY2tPblN1Ym1pdH0gLz4pO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLnNlbGVjdE9wdGlvbnMoc2NyZWVuLmdldEJ5VGVzdElkKCdjdXN0b21lci1zZWxlY3QnKSwgJ2N1c3QtMScpO1xuICAgICAgYXdhaXQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgncHJvZHVjdC1pbnB1dC0wJyksICdwcm9kLTEnKTtcbiAgICAgIGF3YWl0IHVzZXIuY2xlYXIoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWFudGl0eS1pbnB1dC0wJykpO1xuICAgICAgYXdhaXQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgncXVhbnRpdHktaW5wdXQtMCcpLCAnMicpO1xuICAgICAgYXdhaXQgdXNlci5jbGVhcihzY3JlZW4uZ2V0QnlUZXN0SWQoJ3ByaWNlLWlucHV0LTAnKSk7XG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKCdwcmljZS1pbnB1dC0wJyksICcxMDAnKTtcbiAgICAgIGF3YWl0IHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ25vdGVzLXRleHRhcmVhJyksICdUZXN0IGludm9pY2UnKTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1idXR0b24nKSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrT25TdWJtaXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgY3VzdG9tZXJJZDogJ2N1c3QtMScsXG4gICAgICAgIGl0ZW1zOiBbeyBwcm9kdWN0SWQ6ICdwcm9kLTEnLCBxdWFudGl0eTogMiwgcHJpY2U6IDEwMCB9XSxcbiAgICAgICAgbm90ZXM6ICdUZXN0IGludm9pY2UnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBwb3B1bGF0ZSBmb3JtIHdpdGggaW5pdGlhbCBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW5pdGlhbERhdGEgPSB7XG4gICAgICAgIGN1c3RvbWVySWQ6ICdjdXN0LTInLFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdElkOiAncHJvZC0yJywgcXVhbnRpdHk6IDMsIHByaWNlOiAxNTAgfV0sXG4gICAgICAgIG5vdGVzOiAnSW5pdGlhbCBub3RlcydcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IG1vY2tPblN1Ym1pdCA9IGplc3QuZm4oKTtcbiAgICAgIHJlbmRlcig8TW9ja0ludm9pY2VGb3JtIG9uU3VibWl0PXttb2NrT25TdWJtaXR9IGluaXRpYWxEYXRhPXtpbml0aWFsRGF0YX0gLz4pO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjdXN0b21lci1zZWxlY3QnKSkudG9IYXZlVmFsdWUoJ2N1c3QtMicpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncHJvZHVjdC1pbnB1dC0wJykpLnRvSGF2ZVZhbHVlKCdwcm9kLTInKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3F1YW50aXR5LWlucHV0LTAnKSkudG9IYXZlVmFsdWUoMyk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdwcmljZS1pbnB1dC0wJykpLnRvSGF2ZVZhbHVlKDE1MCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdub3Rlcy10ZXh0YXJlYScpKS50b0hhdmVWYWx1ZSgnSW5pdGlhbCBub3RlcycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGF0YVRhYmxlIENvbXBvbmVudCcsICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IFtcbiAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ0l0ZW0gMScsIHN0YXR1czogJ2FjdGl2ZScsIHByaWNlOiAxMDAgfSxcbiAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ0l0ZW0gMicsIHN0YXR1czogJ2luYWN0aXZlJywgcHJpY2U6IDIwMCB9XG4gICAgXTtcbiAgICBcbiAgICBjb25zdCBtb2NrQ29sdW1ucyA9IFtcbiAgICAgIHsga2V5OiAnbmFtZScsIGxhYmVsOiAnTmFtZScgfSxcbiAgICAgIHsga2V5OiAnc3RhdHVzJywgbGFiZWw6ICdTdGF0dXMnIH0sXG4gICAgICB7IGtleTogJ3ByaWNlJywgbGFiZWw6ICdQcmljZScgfVxuICAgIF07XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIHRhYmxlIHdpdGggZGF0YSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1vY2tEYXRhVGFibGUgZGF0YT17bW9ja0RhdGF9IGNvbHVtbnM9e21vY2tDb2x1bW5zfSAvPik7XG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RhdGEtdGFibGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2hlYWRlci1uYW1lJykpLnRvSGF2ZVRleHRDb250ZW50KCdOYW1lJyk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdoZWFkZXItc3RhdHVzJykpLnRvSGF2ZVRleHRDb250ZW50KCdTdGF0dXMnKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2hlYWRlci1wcmljZScpKS50b0hhdmVUZXh0Q29udGVudCgnUHJpY2UnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY2VsbC0wLW5hbWUnKSkudG9IYXZlVGV4dENvbnRlbnQoJ0l0ZW0gMScpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY2VsbC0xLW5hbWUnKSkudG9IYXZlVGV4dENvbnRlbnQoJ0l0ZW0gMicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlZGl0IGFuZCBkZWxldGUgYWN0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPbkVkaXQgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBtb2NrT25EZWxldGUgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG4gICAgICBcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPE1vY2tEYXRhVGFibGUgXG4gICAgICAgICAgZGF0YT17bW9ja0RhdGF9IFxuICAgICAgICAgIGNvbHVtbnM9e21vY2tDb2x1bW5zfSBcbiAgICAgICAgICBvbkVkaXQ9e21vY2tPbkVkaXR9XG4gICAgICAgICAgb25EZWxldGU9e21vY2tPbkRlbGV0ZX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdlZGl0LTAnKSk7XG4gICAgICBleHBlY3QobW9ja09uRWRpdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0RhdGFbMF0pO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGVsZXRlLTEnKSk7XG4gICAgICBleHBlY3QobW9ja09uRGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrRGF0YVsxXSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc2hvdyBsb2FkaW5nIHN0YXRlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxNb2NrRGF0YVRhYmxlIGRhdGE9e1tdfSBjb2x1bW5zPXttb2NrQ29sdW1uc30gbG9hZGluZz17dHJ1ZX0gLz4pO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCd0YWJsZS1sb2FkaW5nJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCd0YWJsZS1sb2FkaW5nJykpLnRvSGF2ZVRleHRDb250ZW50KCdMb2FkaW5nLi4uJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGVtcHR5IHRhYmxlIHdoZW4gbm8gZGF0YScsICgpID0+IHtcbiAgICAgIHJlbmRlcig8TW9ja0RhdGFUYWJsZSBkYXRhPXtbXX0gY29sdW1ucz17bW9ja0NvbHVtbnN9IC8+KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZGF0YS10YWJsZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdyb3ctMCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Rhc2hib2FyZENhcmQgQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZW5kZXIgY2FyZCB3aXRoIGJhc2ljIGRhdGEnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxNb2NrRGFzaGJvYXJkQ2FyZCBcbiAgICAgICAgICB0aXRsZT1cIlRvdGFsIFNhbGVzXCIgXG4gICAgICAgICAgdmFsdWU9XCIkMTI1LDAwMFwiIFxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFzaGJvYXJkLWNhcmQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQtdGl0bGUnKSkudG9IYXZlVGV4dENvbnRlbnQoJ1RvdGFsIFNhbGVzJyk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkLXZhbHVlJykpLnRvSGF2ZVRleHRDb250ZW50KCckMTI1LDAwMCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjYXJkIHdpdGggY2hhbmdlIGluZGljYXRvcicsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPE1vY2tEYXNoYm9hcmRDYXJkIFxuICAgICAgICAgIHRpdGxlPVwiUmV2ZW51ZVwiIFxuICAgICAgICAgIHZhbHVlPXs1MDAwMH0gXG4gICAgICAgICAgY2hhbmdlPXt7IHZhbHVlOiAxNS41LCB0eXBlOiAnaW5jcmVhc2UnIH19XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkLWNoYW5nZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZC1jaGFuZ2UnKSkudG9IYXZlVGV4dENvbnRlbnQoJ+KGkSAxNS41JScpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY2FyZC1jaGFuZ2UnKSkudG9IYXZlQ2xhc3MoJ2luY3JlYXNlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGNhcmQgd2l0aCBkZWNyZWFzZSBpbmRpY2F0b3InLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxNb2NrRGFzaGJvYXJkQ2FyZCBcbiAgICAgICAgICB0aXRsZT1cIk9yZGVyc1wiIFxuICAgICAgICAgIHZhbHVlPXsyMDB9IFxuICAgICAgICAgIGNoYW5nZT17eyB2YWx1ZTogNS4yLCB0eXBlOiAnZGVjcmVhc2UnIH19XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjYXJkLWNoYW5nZScpKS50b0hhdmVUZXh0Q29udGVudCgn4oaTIDUuMiUnKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQtY2hhbmdlJykpLnRvSGF2ZUNsYXNzKCdkZWNyZWFzZScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHNob3cgbG9hZGluZyBzdGF0ZScsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPE1vY2tEYXNoYm9hcmRDYXJkIFxuICAgICAgICAgIHRpdGxlPVwiTG9hZGluZyBDYXJkXCIgXG4gICAgICAgICAgdmFsdWU9XCJcIiBcbiAgICAgICAgICBsb2FkaW5nPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFzaGJvYXJkLWNhcmQnKSkudG9IYXZlQ2xhc3MoJ2xvYWRpbmcnKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhcmQtc2tlbGV0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NlYXJjaEZpbHRlciBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBzZWFyY2ggYW5kIGZpbHRlciBjb250cm9scycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlYXJjaCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tPbkZpbHRlciA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKFxuICAgICAgICA8TW9ja1NlYXJjaEZpbHRlciBcbiAgICAgICAgICBvblNlYXJjaD17bW9ja09uU2VhcmNofVxuICAgICAgICAgIG9uRmlsdGVyPXttb2NrT25GaWx0ZXJ9XG4gICAgICAgICAgZmlsdGVycz17e319XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtZmlsdGVyJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NlYXJjaC1idXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0YXR1cy1maWx0ZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2NhdGVnb3J5LWZpbHRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzZWFyY2ggc3VibWlzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlYXJjaCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tPbkZpbHRlciA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKFxuICAgICAgICA8TW9ja1NlYXJjaEZpbHRlciBcbiAgICAgICAgICBvblNlYXJjaD17bW9ja09uU2VhcmNofVxuICAgICAgICAgIG9uRmlsdGVyPXttb2NrT25GaWx0ZXJ9XG4gICAgICAgICAgZmlsdGVycz17e319XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtaW5wdXQnKSwgJ3Rlc3QgcXVlcnknKTtcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdzZWFyY2gtYnV0dG9uJykpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja09uU2VhcmNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGVzdCBxdWVyeScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBmaWx0ZXIgY2hhbmdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlYXJjaCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tPbkZpbHRlciA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICAgIFxuICAgICAgcmVuZGVyKFxuICAgICAgICA8TW9ja1NlYXJjaEZpbHRlciBcbiAgICAgICAgICBvblNlYXJjaD17bW9ja09uU2VhcmNofVxuICAgICAgICAgIG9uRmlsdGVyPXttb2NrT25GaWx0ZXJ9XG4gICAgICAgICAgZmlsdGVycz17e319XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLnNlbGVjdE9wdGlvbnMoc2NyZWVuLmdldEJ5VGVzdElkKCdzdGF0dXMtZmlsdGVyJyksICdhY3RpdmUnKTtcbiAgICAgIGV4cGVjdChtb2NrT25GaWx0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgc3RhdHVzOiAnYWN0aXZlJyB9KTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci5zZWxlY3RPcHRpb25zKHNjcmVlbi5nZXRCeVRlc3RJZCgnY2F0ZWdvcnktZmlsdGVyJyksICdlbGVjdHJvbmljcycpO1xuICAgICAgZXhwZWN0KG1vY2tPbkZpbHRlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBzdGF0dXM6ICdhY3RpdmUnLCBjYXRlZ29yeTogJ2VsZWN0cm9uaWNzJyB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggcHJvdmlkZWQgZmlsdGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlYXJjaCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tPbkZpbHRlciA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IGluaXRpYWxGaWx0ZXJzID0geyBzdGF0dXM6ICdwZW5kaW5nJywgY2F0ZWdvcnk6ICdib29rcycgfTtcbiAgICAgIFxuICAgICAgcmVuZGVyKFxuICAgICAgICA8TW9ja1NlYXJjaEZpbHRlciBcbiAgICAgICAgICBvblNlYXJjaD17bW9ja09uU2VhcmNofVxuICAgICAgICAgIG9uRmlsdGVyPXttb2NrT25GaWx0ZXJ9XG4gICAgICAgICAgZmlsdGVycz17aW5pdGlhbEZpbHRlcnN9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzdGF0dXMtZmlsdGVyJykpLnRvSGF2ZVZhbHVlKCdwZW5kaW5nJyk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjYXRlZ29yeS1maWx0ZXInKSkudG9IYXZlVmFsdWUoJ2Jvb2tzJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQZXJtaXNzaW9uLWJhc2VkIENvbXBvbmVudCBSZW5kZXJpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjb21wb25lbnRzIHdoZW4gdXNlciBoYXMgcGVybWlzc2lvbnMnLCAoKSA9PiB7XG4gICAgICBtb2NrVXNlUGVybWlzc2lvbi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBoYXNQZXJtaXNzaW9uOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgICAgICBoYXNBbnlQZXJtaXNzaW9uOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgICAgICBoYXNBbGxQZXJtaXNzaW9uczogamVzdC5mbigoKSA9PiB0cnVlKVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IFByb3RlY3RlZENvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBoYXNQZXJtaXNzaW9uIH0gPSBtb2NrVXNlUGVybWlzc2lvbigpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFoYXNQZXJtaXNzaW9uKCdzYWxlczpjcmVhdGUnKSkge1xuICAgICAgICAgIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwibm8tcGVybWlzc2lvblwiPk5vIHBlcm1pc3Npb248L2Rpdj47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwicHJvdGVjdGVkLWNvbnRlbnRcIj5Qcm90ZWN0ZWQgY29udGVudDwvZGl2PjtcbiAgICAgIH07XG4gICAgICBcbiAgICAgIHJlbmRlcig8UHJvdGVjdGVkQ29tcG9uZW50IC8+KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncHJvdGVjdGVkLWNvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbm8tcGVybWlzc2lvbicpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoaWRlIGNvbXBvbmVudHMgd2hlbiB1c2VyIGxhY2tzIHBlcm1pc3Npb25zJywgKCkgPT4ge1xuICAgICAgbW9ja1VzZVBlcm1pc3Npb24ubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaGFzUGVybWlzc2lvbjogamVzdC5mbigoKSA9PiBmYWxzZSksXG4gICAgICAgIGhhc0FueVBlcm1pc3Npb246IGplc3QuZm4oKCkgPT4gZmFsc2UpLFxuICAgICAgICBoYXNBbGxQZXJtaXNzaW9uczogamVzdC5mbigoKSA9PiBmYWxzZSlcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBQcm90ZWN0ZWRDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaGFzUGVybWlzc2lvbiB9ID0gbW9ja1VzZVBlcm1pc3Npb24oKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghaGFzUGVybWlzc2lvbignc2FsZXM6Y3JlYXRlJykpIHtcbiAgICAgICAgICByZXR1cm4gPGRpdiBkYXRhLXRlc3RpZD1cIm5vLXBlcm1pc3Npb25cIj5ObyBwZXJtaXNzaW9uPC9kaXY+O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gPGRpdiBkYXRhLXRlc3RpZD1cInByb3RlY3RlZC1jb250ZW50XCI+UHJvdGVjdGVkIGNvbnRlbnQ8L2Rpdj47XG4gICAgICB9O1xuICAgICAgXG4gICAgICByZW5kZXIoPFByb3RlY3RlZENvbXBvbmVudCAvPik7XG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ25vLXBlcm1pc3Npb24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgncHJvdGVjdGVkLWNvbnRlbnQnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFcnJvciBCb3VuZGFyeSBhbmQgRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjb21wb25lbnQgZXJyb3JzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBFcnJvckNvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0IGVycm9yJyk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBFcnJvckJvdW5kYXJ5ID0gKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IHtcbiAgICAgICAgY29uc3QgW2hhc0Vycm9yLCBzZXRIYXNFcnJvcl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICBjb25zdCBlcnJvckhhbmRsZXIgPSAoKSA9PiBzZXRIYXNFcnJvcih0cnVlKTtcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIDxkaXYgZGF0YS10ZXN0aWQ9XCJlcnJvci1mYWxsYmFja1wiPlNvbWV0aGluZyB3ZW50IHdyb25nPC9kaXY+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDw+e2NoaWxkcmVufTwvPjtcbiAgICAgIH07XG5cbiAgICAgIC8vIFN1cHByZXNzIGNvbnNvbGUuZXJyb3IgZm9yIHRoaXMgdGVzdFxuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICAgICAgPEVycm9yQ29tcG9uZW50IC8+XG4gICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgZXJyb3JcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInVzZUF1dGgiLCJtb2NrVXNlQXV0aCIsInVzZVBlcm1pc3Npb24iLCJtb2NrVXNlUGVybWlzc2lvbiIsInVzZVJvdXRlciIsInB1c2giLCJtb2NrUHVzaCIsInJlcGxhY2UiLCJtb2NrUmVwbGFjZSIsImJhY2siLCJmbiIsImZvcndhcmQiLCJyZWZyZXNoIiwicHJlZmV0Y2giLCJ1c2VQYXRobmFtZSIsInVzZVNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIm1vY2tGZXRjaCIsImdsb2JhbCIsImZldGNoIiwiTW9ja0xvZ2luRm9ybSIsIm9uU3VibWl0IiwibG9hZGluZyIsImVtYWlsIiwic2V0RW1haWwiLCJSZWFjdCIsInVzZVN0YXRlIiwicGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsImhhbmRsZVN1Ym1pdCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm0iLCJkYXRhLXRlc3RpZCIsImlucHV0IiwidHlwZSIsInBsYWNlaG9sZGVyIiwidmFsdWUiLCJvbkNoYW5nZSIsInRhcmdldCIsInJlcXVpcmVkIiwiYnV0dG9uIiwiZGlzYWJsZWQiLCJNb2NrSW52b2ljZUZvcm0iLCJpbml0aWFsRGF0YSIsImZvcm1EYXRhIiwic2V0Rm9ybURhdGEiLCJjdXN0b21lcklkIiwiaXRlbXMiLCJwcm9kdWN0SWQiLCJxdWFudGl0eSIsInByaWNlIiwibm90ZXMiLCJhZGRJdGVtIiwicHJldiIsInNlbGVjdCIsIm9wdGlvbiIsIm1hcCIsIml0ZW0iLCJpbmRleCIsImRpdiIsIm5ld0l0ZW1zIiwicGFyc2VJbnQiLCJtaW4iLCJwYXJzZUZsb2F0Iiwic3RlcCIsIm9uQ2xpY2siLCJ0ZXh0YXJlYSIsIk1vY2tEYXRhVGFibGUiLCJkYXRhIiwiY29sdW1ucyIsIm9uRWRpdCIsIm9uRGVsZXRlIiwidGFibGUiLCJ0aGVhZCIsInRyIiwiY29sIiwidGgiLCJrZXkiLCJsYWJlbCIsInRib2R5IiwidGQiLCJpZCIsIk1vY2tEYXNoYm9hcmRDYXJkIiwidGl0bGUiLCJjaGFuZ2UiLCJjbGFzc05hbWUiLCJoMyIsIk1vY2tTZWFyY2hGaWx0ZXIiLCJvblNlYXJjaCIsIm9uRmlsdGVyIiwiZmlsdGVycyIsInNlYXJjaFF1ZXJ5Iiwic2V0U2VhcmNoUXVlcnkiLCJsb2NhbEZpbHRlcnMiLCJzZXRMb2NhbEZpbHRlcnMiLCJoYW5kbGVTZWFyY2giLCJoYW5kbGVGaWx0ZXJDaGFuZ2UiLCJuZXdGaWx0ZXJzIiwic3RhdHVzIiwiY2F0ZWdvcnkiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJ3cml0YWJsZSIsIm1vY2tSZXR1cm5WYWx1ZSIsInVzZXIiLCJuYW1lIiwicGVybWlzc2lvbnMiLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJsb2dpbiIsImxvZ291dCIsImhhc1Blcm1pc3Npb24iLCJoYXNBbnlQZXJtaXNzaW9uIiwiaGFzQWxsUGVybWlzc2lvbnMiLCJ0ZXN0IiwibW9ja09uU3VibWl0IiwicmVuZGVyIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInVzZXJFdmVudCIsInNldHVwIiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvQmVEaXNhYmxlZCIsInRvSGF2ZVRleHRDb250ZW50Iiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsInF1ZXJ5QnlUZXN0SWQiLCJzZWxlY3RPcHRpb25zIiwiY2xlYXIiLCJ0b0hhdmVWYWx1ZSIsIm1vY2tEYXRhIiwibW9ja0NvbHVtbnMiLCJtb2NrT25FZGl0IiwibW9ja09uRGVsZXRlIiwidG9IYXZlQ2xhc3MiLCJtb2NrT25TZWFyY2giLCJtb2NrT25GaWx0ZXIiLCJpbml0aWFsRmlsdGVycyIsIlByb3RlY3RlZENvbXBvbmVudCIsIkVycm9yQ29tcG9uZW50IiwiRXJyb3IiLCJFcnJvckJvdW5kYXJ5IiwiY2hpbGRyZW4iLCJoYXNFcnJvciIsInNldEhhc0Vycm9yIiwidXNlRWZmZWN0IiwiZXJyb3JIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb25zb2xlU3B5Iiwic3B5T24iLCJjb25zb2xlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiZXJyb3IiLCJtb2NrUmVzdG9yZSJdLCJtYXBwaW5ncyI6IjtBQU9BQSxLQUFLQyxJQUFJLENBQUMsbUJBQW1CLElBQU8sQ0FBQTtRQUNsQ0MsU0FBUyxJQUFNQztJQUNqQixDQUFBO0FBSUFILEtBQUtDLElBQUksQ0FBQyx5QkFBeUIsSUFBTyxDQUFBO1FBQ3hDRyxlQUFlLElBQU1DO0lBQ3ZC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