{"version":3,"names":["cov_11yafqbjp3","actualCoverage","s","require","config","path","Pool","console","log","pool","connectionString","process","env","DATABASE_URL","ssl","rejectUnauthorized","testConnection","f","client","connect","result","query","rows","current_time","tablesResult","length","b","forEach","row","table_name","release","error","end","catch"],"sources":["/Users/sachin/Documents/md-sports-/src/scripts/test-neon.js"],"sourcesContent":["// Load environment variables\nrequire('dotenv').config({ path: '.env.local' });\n\n// Simple script to check if pg can connect to Neon\nconst { Pool } = require('pg');\n\nconsole.log('Testing Neon database connection...');\n\n// Create a connection pool\nconst pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n        rejectUnauthorized: false\n    }\n});\n\n// Test the connection\nasync function testConnection() {\n    try {\n        // Connect to the database\n        const client = await pool.connect();\n        console.log('Connected to Neon database successfully!');\n        \n        // Execute a simple query\n        const result = await client.query('SELECT NOW() as current_time');\n        console.log('Query executed successfully');\n        console.log('Current time from Neon:', result.rows[0].current_time);\n        \n        // List tables in the database\n        const tablesResult = await client.query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public'\n            ORDER BY table_name\n        `);\n        \n        console.log('\\nTables in database:');\n        if (tablesResult.rows.length === 0) {\n            console.log('No tables found');\n        } else {\n            tablesResult.rows.forEach(row => {\n                console.log(`- ${row.table_name}`);\n            });\n        }\n        \n        // Release the client\n        client.release();\n    } catch (error) {\n        console.error('Error connecting to Neon database:', error);\n    } finally {\n        // End the pool\n        await pool.end();\n    }\n}\n\n// Run the test\ntestConnection().catch(console.error); "],"mappings":"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","ignoreList":[]}