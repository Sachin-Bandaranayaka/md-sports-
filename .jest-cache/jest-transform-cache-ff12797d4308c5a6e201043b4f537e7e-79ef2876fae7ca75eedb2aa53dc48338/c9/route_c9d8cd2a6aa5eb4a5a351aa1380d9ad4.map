{"version":3,"names":["GET","cov_12reuwq8qi","f","s","fetchTotalRetailValueData","shopId","inventoryItems","_prisma","prisma","inventoryItem","findMany","where","b","productIds","map","item","productId","products","product","id","in","select","name","price","productMap","Map","forEach","set","totalRetailValue","get","quantity","retailPrice","itemRetailValue","previousPeriodValue","difference","percentChange","formattedValue","toLocaleString","success","rawValue","trend","toFixed","trendUp","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","isFiltered","cacheKey","cachedData","_cache","cacheService","console","log","meta","shopFiltered","fromCache","retailValueData","responseData"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/total-retail-value/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nexport async function fetchTotalRetailValueData(shopId?: string | null) {\n    // Get inventory items with optional shop filtering\n    const inventoryItems = await prisma.inventoryItem.findMany({\n        where: shopId ? { shopId } : {}\n    });\n\n    // Get all products to access their retail prices\n    const productIds = inventoryItems.map(item => item.productId);\n    const products = await prisma.product.findMany({\n        where: {\n            id: {\n                in: productIds\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            price: true  // This is the retail price\n        }\n    });\n\n    // Create a map of product ID to product data for easy lookup\n    const productMap = new Map();\n    products.forEach(product => {\n        productMap.set(product.id, product);\n    });\n\n    // Calculate total retail value\n    let totalRetailValue = 0;\n    \n    // Process each inventory item\n    inventoryItems.forEach(item => {\n        const product = productMap.get(item.productId);\n        if (product && item.quantity > 0) {\n            const retailPrice = product.price || 0;\n            const itemRetailValue = retailPrice * item.quantity;\n            totalRetailValue += itemRetailValue;\n        }\n    });\n\n    // NOTE: Trend calculation is a placeholder as historical data is not available.\n    // For demo purposes, let's assume previous value was 5% less\n    const previousPeriodValue = totalRetailValue * 0.95;\n\n    // Calculate trend\n    const difference = totalRetailValue - previousPeriodValue;\n    // Handle division by zero if previousPeriodValue is 0\n    const percentChange = previousPeriodValue === 0 ? (totalRetailValue > 0 ? 100 : 0) : (difference / previousPeriodValue) * 100;\n\n    // Format the value for display\n    const formattedValue = `Rs. ${totalRetailValue.toLocaleString()}`;\n\n    return {\n        success: true,\n        formattedValue,\n        rawValue: totalRetailValue,\n        trend: `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(0)}%`,\n        trendUp: percentChange >= 0\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const shopId = context.isFiltered ? context.shopId : null;\n\n        // Check cache first with shop context.\n        // This metric is current, so it doesn't depend on a date range.\n        const cacheKey = `dashboard:total-retail-value:${shopId || 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Total retail value served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh total retail value with shop context:', {\n            shopId: shopId,\n            isFiltered: context.isFiltered\n        });\n        const retailValueData = await fetchTotalRetailValueData(shopId);\n\n        // Add metadata to response\n        const responseData = {\n            ...retailValueData,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 3 minutes (retail value changes moderately)\n        await cacheService.set(cacheKey, responseData, 180);\n        console.log('ðŸ’¾ Total retail value cached for 3 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error calculating total retail value:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to calculate total retail value',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],"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","ignoreList":[]}