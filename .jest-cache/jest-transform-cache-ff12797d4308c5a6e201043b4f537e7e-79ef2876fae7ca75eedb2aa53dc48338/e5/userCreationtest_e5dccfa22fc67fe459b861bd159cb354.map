{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/userCreation.test.ts"],"sourcesContent":["import { createMocks } from 'node-mocks-http';\nimport { POST } from '@/app/api/users/route';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport { randomUUID } from 'crypto';\n\n// Mock dependencies\nconst mockPrisma = {\n  user: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  shop: {\n    findUnique: jest.fn(),\n  },\n  permission: {\n    upsert: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  role: {\n    upsert: jest.fn(),\n  },\n};\n\n// Mock modules\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('bcryptjs');\njest.mock('crypto');\n\n// Mock middleware\njest.mock('@/lib/utils/middleware', () => ({\n  requirePermission: () => () => null, // Bypass permission check for tests\n}));\n\n// Helper to create NextRequest-like object\nconst createMockRequest = (body: any, headers: Record<string, string> = {}) => {\n  return {\n    json: async () => body,\n    headers: new Headers({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer test-token',\n      ...headers,\n    }),\n  } as any;\n};\n\ndescribe('User Creation API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup default mocks\n    (bcrypt.hash as jest.Mock).mockResolvedValue('hashed-password');\n    (randomUUID as jest.Mock).mockReturnValue('user-123');\n  });\n\n  describe('POST /api/users - Success Cases', () => {\n    test('should create admin user successfully', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-1',\n        name: 'Main Store',\n      });\n\n      // Mock admin permission\n      mockPrisma.permission.findUnique.mockResolvedValue({\n        id: 'admin-perm-1',\n        name: 'admin:all',\n      });\n\n      // Mock admin role creation\n      mockPrisma.role.upsert.mockResolvedValue({\n        id: 'admin-role-id',\n        name: 'Admin',\n        description: 'Full system access with all permissions',\n      });\n\n      // Mock user creation\n      const createdUser = {\n        id: 'user-123',\n        name: 'John Admin',\n        email: 'admin@example.com',\n        shopId: 'shop-1',\n        permissions: ['admin-perm-1'],\n        createdAt: new Date(),\n        shop: {\n          id: 'shop-1',\n          name: 'Main Store',\n        },\n      };\n      mockPrisma.user.create.mockResolvedValue(createdUser);\n\n      const requestBody = {\n        name: 'John Admin',\n        email: 'admin@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n        allowedAccounts: [],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.message).toBe('User created successfully');\n      expect(responseData.data.name).toBe('John Admin');\n      expect(responseData.data.email).toBe('admin@example.com');\n\n      // Verify database calls\n      expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({\n        where: { id: 'shop-1' }\n      });\n      expect(bcrypt.hash).toHaveBeenCalledWith('password123', 12);\n      expect(mockPrisma.user.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          id: 'user-123',\n          name: 'John Admin',\n          email: 'admin@example.com',\n          password: 'hashed-password',\n          shopId: 'shop-1',\n          isActive: true,\n        }),\n        select: expect.any(Object),\n      });\n    });\n\n    test('should create shop staff user successfully', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-2',\n        name: 'Branch Store',\n      });\n\n      // Mock shop:assigned_only permission creation\n      mockPrisma.permission.upsert.mockResolvedValue({\n        id: 'shop-perm-1',\n        name: 'shop:assigned_only',\n        description: 'Restricts user access to only their assigned shop',\n      });\n\n      // Mock shop staff role creation\n      mockPrisma.role.upsert.mockResolvedValue({\n        id: 'shop-staff-role-id',\n        name: 'Shop Staff',\n        description: 'Limited access for shop staff members',\n      });\n\n      // Mock user creation\n      const createdUser = {\n        id: 'user-456',\n        name: 'Jane Staff',\n        email: 'staff@example.com',\n        shopId: 'shop-2',\n        permissions: ['shop-perm-1'],\n        createdAt: new Date(),\n        shop: {\n          id: 'shop-2',\n          name: 'Branch Store',\n        },\n      };\n      mockPrisma.user.create.mockResolvedValue(createdUser);\n\n      const requestBody = {\n        name: 'Jane Staff',\n        email: 'staff@example.com',\n        password: 'password123',\n        shop: 'shop-2',\n        permissions: ['shop:assigned_only', 'sales:view'],\n        allowedAccounts: ['acc-1', 'acc-2'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.data.name).toBe('Jane Staff');\n\n      // Verify shop:assigned_only permission was created\n      expect(mockPrisma.permission.upsert).toHaveBeenCalledWith({\n        where: { name: 'shop:assigned_only' },\n        update: {},\n        create: {\n          name: 'shop:assigned_only',\n          description: 'Restricts user access to only their assigned shop',\n        },\n      });\n\n      // Verify shop staff role was created\n      expect(mockPrisma.role.upsert).toHaveBeenCalledWith({\n        where: { name: 'Shop Staff' },\n        update: {},\n        create: {\n          id: 'shop-staff-role-id',\n          name: 'Shop Staff',\n          description: 'Limited access for shop staff members',\n        },\n      });\n    });\n  });\n\n  describe('POST /api/users - Validation Errors', () => {\n    test('should return 400 for missing name', async () => {\n      const requestBody = {\n        name: '',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Name is required');\n    });\n\n    test('should return 400 for missing email', async () => {\n      const requestBody = {\n        name: 'John Doe',\n        email: '',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Email is required');\n    });\n\n    test('should return 400 for weak password', async () => {\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: '123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Password must be at least 8 characters');\n    });\n\n    test('should return 400 for missing shop assignment', async () => {\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: '',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Shop assignment is required');\n    });\n\n    test('should return 400 for missing permissions', async () => {\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: [],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('At least one permission is required');\n    });\n\n    test('should return 400 for invalid shop ID', async () => {\n      // Mock shop not found\n      mockPrisma.shop.findUnique.mockResolvedValue(null);\n\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'invalid-shop-id',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Invalid shop ID provided - shop does not exist');\n    });\n  });\n\n  describe('POST /api/users - Database Errors', () => {\n    test('should handle shop lookup database error', async () => {\n      mockPrisma.shop.findUnique.mockRejectedValue(new Error('Database connection failed'));\n\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Failed to create user');\n    });\n\n    test('should handle user creation database error', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-1',\n        name: 'Main Store',\n      });\n\n      // Mock user creation failure\n      mockPrisma.user.create.mockRejectedValue(new Error('Unique constraint violation'));\n\n      const requestBody = {\n        name: 'John Doe',\n        email: 'existing@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Failed to create user');\n    });\n\n    test('should handle bcrypt hashing error', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-1',\n        name: 'Main Store',\n      });\n\n      // Mock bcrypt error\n      (bcrypt.hash as jest.Mock).mockRejectedValue(new Error('Hashing failed'));\n\n      const requestBody = {\n        name: 'John Doe',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Failed to create user');\n    });\n  });\n\n  describe('POST /api/users - Permission Processing', () => {\n    test('should handle admin:all permission by ID', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-1',\n        name: 'Main Store',\n      });\n\n      // Mock admin:all permission lookup\n      mockPrisma.permission.findUnique.mockResolvedValue({\n        id: 'admin-perm-123',\n        name: 'admin:all',\n      });\n\n      // Mock admin role creation\n      mockPrisma.role.upsert.mockResolvedValue({\n        id: 'admin-role-id',\n        name: 'Admin',\n      });\n\n      // Mock user creation\n      mockPrisma.user.create.mockResolvedValue({\n        id: 'user-123',\n        name: 'Admin User',\n        email: 'admin@example.com',\n        shopId: 'shop-1',\n        permissions: ['admin-perm-123'],\n        createdAt: new Date(),\n        shop: { id: 'shop-1', name: 'Main Store' },\n      });\n\n      const requestBody = {\n        name: 'Admin User',\n        email: 'admin@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin-perm-123'], // Permission by ID\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.permission.findUnique).toHaveBeenCalledWith({\n        where: { name: 'admin:all' }\n      });\n    });\n\n    test('should process multiple permissions correctly', async () => {\n      // Mock shop exists\n      mockPrisma.shop.findUnique.mockResolvedValue({\n        id: 'shop-1',\n        name: 'Main Store',\n      });\n\n      // Mock shop:assigned_only permission creation\n      mockPrisma.permission.upsert.mockResolvedValue({\n        id: 'shop-perm-1',\n        name: 'shop:assigned_only',\n      });\n\n      // Mock role creation\n      mockPrisma.role.upsert.mockResolvedValue({\n        id: 'shop-staff-role-id',\n        name: 'Shop Staff',\n      });\n\n      // Mock user creation\n      mockPrisma.user.create.mockResolvedValue({\n        id: 'user-456',\n        name: 'Staff User',\n        email: 'staff@example.com',\n        shopId: 'shop-1',\n        permissions: ['shop-perm-1', 'sales:view', 'inventory:view'],\n        createdAt: new Date(),\n        shop: { id: 'shop-1', name: 'Main Store' },\n      });\n\n      const requestBody = {\n        name: 'Staff User',\n        email: 'staff@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['shop:assigned_only', 'sales:view', 'inventory:view'],\n      };\n\n      const req = createMockRequest(requestBody);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.permission.upsert).toHaveBeenCalledWith({\n        where: { name: 'shop:assigned_only' },\n        update: {},\n        create: {\n          name: 'shop:assigned_only',\n          description: 'Restricts user access to only their assigned shop',\n        },\n      });\n    });\n  });\n\n  describe('POST /api/users - Role Assignment', () => {\n    test('should assign correct role based on permissions', async () => {\n      // Test admin role assignment\n      mockPrisma.shop.findUnique.mockResolvedValue({ id: 'shop-1', name: 'Store' });\n      mockPrisma.role.upsert.mockResolvedValue({ id: 'admin-role', name: 'Admin' });\n      mockPrisma.user.create.mockResolvedValue({\n        id: 'user-1',\n        name: 'Admin',\n        email: 'admin@test.com',\n        shopId: 'shop-1',\n        permissions: ['admin:all'],\n        createdAt: new Date(),\n        shop: { id: 'shop-1', name: 'Store' },\n      });\n\n      const adminRequest = {\n        name: 'Admin User',\n        email: 'admin@test.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(adminRequest);\n      const response = await POST(req);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(mockPrisma.role.upsert).toHaveBeenCalledWith({\n        where: { name: 'Admin' },\n        update: {},\n        create: {\n          id: 'admin-role-id',\n          name: 'Admin',\n          description: 'Full system access with all permissions',\n        },\n      });\n    });\n  });\n\n  describe('POST /api/users - Data Integrity', () => {\n    test('should generate unique user ID', async () => {\n      mockPrisma.shop.findUnique.mockResolvedValue({ id: 'shop-1', name: 'Store' });\n      mockPrisma.user.create.mockResolvedValue({\n        id: 'user-123',\n        name: 'Test User',\n        email: 'test@example.com',\n        shopId: 'shop-1',\n        permissions: ['admin:all'],\n        createdAt: new Date(),\n        shop: { id: 'shop-1', name: 'Store' },\n      });\n\n      const requestBody = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      await POST(req);\n\n      expect(randomUUID).toHaveBeenCalled();\n      expect(mockPrisma.user.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          id: 'user-123',\n          isActive: true,\n        }),\n        select: expect.any(Object),\n      });\n    });\n\n    test('should hash password with correct salt rounds', async () => {\n      mockPrisma.shop.findUnique.mockResolvedValue({ id: 'shop-1', name: 'Store' });\n      mockPrisma.user.create.mockResolvedValue({\n        id: 'user-123',\n        name: 'Test User',\n        email: 'test@example.com',\n        shopId: 'shop-1',\n        permissions: ['admin:all'],\n        createdAt: new Date(),\n        shop: { id: 'shop-1', name: 'Store' },\n      });\n\n      const requestBody = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const req = createMockRequest(requestBody);\n      await POST(req);\n\n      expect(bcrypt.hash).toHaveBeenCalledWith('password123', 12);\n    });\n  });\n});"],"names":["jest","mock","__esModule","default","mockPrisma","requirePermission","user","create","fn","findUnique","shop","permission","upsert","role","createMockRequest","body","headers","json","Headers","describe","beforeEach","clearAllMocks","bcrypt","hash","mockResolvedValue","randomUUID","mockReturnValue","test","id","name","description","createdUser","email","shopId","permissions","createdAt","Date","requestBody","password","allowedAccounts","req","response","POST","responseData","expect","status","toBe","success","message","data","toHaveBeenCalledWith","where","objectContaining","isActive","select","any","Object","update","mockRejectedValue","Error","adminRequest","toHaveBeenCalled"],"mappings":"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"}