64e27ac56025a90995b4499619b6a2e3
"use strict";

/* istanbul ignore next */
function cov_1mz236g7zl() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/sales/route.ts";
  var hash = "7113874e24564a82a0dd7b8393be2620b25b4724";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/sales/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "10": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "11": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "12": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "13": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "14": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 41
        }
      },
      "15": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 38
        }
      },
      "17": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "18": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 74
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "20": {
        start: {
          line: 50,
          column: 31
        },
        end: {
          line: 50,
          column: 85
        }
      },
      "21": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 104
        }
      },
      "22": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 61
        }
      },
      "23": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "24": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 75,
          column: 109
        }
      },
      "25": {
        start: {
          line: 55,
          column: 69
        },
        end: {
          line: 71,
          column: 18
        }
      },
      "26": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "27": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 53
        }
      },
      "28": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "29": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 32
        }
      },
      "30": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 26
        }
      },
      "31": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 41
        }
      },
      "32": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 39
        }
      },
      "33": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "34": {
        start: {
          line: 112,
          column: 19
        },
        end: {
          line: 112,
          column: 21
        }
      },
      "35": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "36": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "37": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 41
        }
      },
      "38": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 35
        }
      },
      "39": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "40": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 29
        }
      },
      "41": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 27
        }
      },
      "42": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 60
        }
      },
      "43": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 79
        }
      },
      "44": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 145,
          column: 85
        }
      },
      "45": {
        start: {
          line: 125,
          column: 65
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "46": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "47": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 155,
          column: 6
        }
      },
      "48": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 277,
          column: 2
        }
      },
      "49": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "50": {
        start: {
          line: 160,
          column: 27
        },
        end: {
          line: 160,
          column: 90
        }
      },
      "51": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "52": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "53": {
        start: {
          line: 169,
          column: 23
        },
        end: {
          line: 169,
          column: 67
        }
      },
      "54": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "55": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "56": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 187,
          column: 10
        }
      },
      "57": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "58": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "59": {
        start: {
          line: 196,
          column: 24
        },
        end: {
          line: 196,
          column: 146
        }
      },
      "60": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 198,
          column: 31
        }
      },
      "61": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "62": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 34
        }
      },
      "63": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "64": {
        start: {
          line: 212,
          column: 28
        },
        end: {
          line: 212,
          column: 54
        }
      },
      "65": {
        start: {
          line: 213,
          column: 25
        },
        end: {
          line: 213,
          column: 150
        }
      },
      "66": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 66
        }
      },
      "67": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "68": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 58
        }
      },
      "69": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 224,
          column: 15
        }
      },
      "70": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 62
        }
      },
      "71": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 139
        }
      },
      "72": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 66
        }
      },
      "73": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 68
        }
      },
      "74": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "75": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 61
        }
      },
      "76": {
        start: {
          line: 242,
          column: 27
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "77": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 30
        }
      },
      "78": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 257,
          column: 43
        }
      },
      "79": {
        start: {
          line: 258,
          column: 28
        },
        end: {
          line: 265,
          column: 20
        }
      },
      "80": {
        start: {
          line: 259,
          column: 29
        },
        end: {
          line: 259,
          column: 45
        }
      },
      "81": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 49
        }
      },
      "82": {
        start: {
          line: 260,
          column: 32
        },
        end: {
          line: 260,
          column: 49
        }
      },
      "83": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 14
        }
      },
      "84": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 29
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "fetchSalesDataFiltered",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 37
          }
        },
        loc: {
          start: {
            line: 27,
            column: 74
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 65
          },
          end: {
            line: 55,
            column: 66
          }
        },
        loc: {
          start: {
            line: 55,
            column: 69
          },
          end: {
            line: 71,
            column: 18
          }
        },
        line: 55
      },
      "6": {
        name: "fetchSalesData",
        decl: {
          start: {
            line: 92,
            column: 15
          },
          end: {
            line: 92,
            column: 29
          }
        },
        loc: {
          start: {
            line: 92,
            column: 78
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 92
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 125,
            column: 61
          },
          end: {
            line: 125,
            column: 62
          }
        },
        loc: {
          start: {
            line: 125,
            column: 65
          },
          end: {
            line: 141,
            column: 14
          }
        },
        line: 125
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 157,
            column: 61
          },
          end: {
            line: 157,
            column: 62
          }
        },
        loc: {
          start: {
            line: 157,
            column: 87
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 157
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 258,
            column: 49
          },
          end: {
            line: 258,
            column: 50
          }
        },
        loc: {
          start: {
            line: 258,
            column: 57
          },
          end: {
            line: 265,
            column: 9
          }
        },
        line: 258
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: 87,
            column: 11
          },
          end: {
            line: 90,
            column: 5
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: 42,
            column: 21
          },
          end: {
            line: 42,
            column: 28
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 30
          },
          end: {
            line: 53,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 47
          },
          end: {
            line: 53,
            column: 50
          }
        }, {
          start: {
            line: 53,
            column: 53
          },
          end: {
            line: 53,
            column: 61
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 53
          },
          end: {
            line: 54,
            column: 58
          }
        }, {
          start: {
            line: 54,
            column: 61
          },
          end: {
            line: 54,
            column: 71
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 63,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 36
          },
          end: {
            line: 63,
            column: 25
          }
        }, {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 30
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 66,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 66,
            column: 25
          }
        }, {
          start: {
            line: 66,
            column: 28
          },
          end: {
            line: 66,
            column: 30
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 49
          }
        }, {
          start: {
            line: 78,
            column: 53
          },
          end: {
            line: 78,
            column: 54
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 133,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 133,
            column: 21
          }
        }, {
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 26
          }
        }],
        line: 131
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 136,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 136,
            column: 21
          }
        }, {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 26
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 19
          },
          end: {
            line: 149,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 19
          },
          end: {
            line: 149,
            column: 45
          }
        }, {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 149,
            column: 50
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "14": {
        loc: {
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 49
          }
        }, {
          start: {
            line: 196,
            column: 53
          },
          end: {
            line: 196,
            column: 84
          }
        }, {
          start: {
            line: 196,
            column: 88
          },
          end: {
            line: 196,
            column: 104
          }
        }, {
          start: {
            line: 196,
            column: 108
          },
          end: {
            line: 196,
            column: 146
          }
        }],
        line: 196
      },
      "15": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "16": {
        loc: {
          start: {
            line: 212,
            column: 28
          },
          end: {
            line: 212,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 38
          },
          end: {
            line: 212,
            column: 45
          }
        }, {
          start: {
            line: 212,
            column: 48
          },
          end: {
            line: 212,
            column: 54
          }
        }],
        line: 212
      },
      "17": {
        loc: {
          start: {
            line: 213,
            column: 25
          },
          end: {
            line: 213,
            column: 150
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 46
          },
          end: {
            line: 213,
            column: 106
          }
        }, {
          start: {
            line: 213,
            column: 109
          },
          end: {
            line: 213,
            column: 150
          }
        }],
        line: 213
      },
      "18": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "19": {
        loc: {
          start: {
            line: 227,
            column: 49
          },
          end: {
            line: 227,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 70
          },
          end: {
            line: 227,
            column: 84
          }
        }, {
          start: {
            line: 227,
            column: 87
          },
          end: {
            line: 227,
            column: 91
          }
        }],
        line: 227
      },
      "20": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "21": {
        loc: {
          start: {
            line: 269,
            column: 21
          },
          end: {
            line: 269,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 46
          },
          end: {
            line: 269,
            column: 59
          }
        }, {
          start: {
            line: 269,
            column: 62
          },
          end: {
            line: 269,
            column: 77
          }
        }],
        line: 269
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/sales/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Filtered version of fetchSalesData with date range and shop support\nexport async function fetchSalesDataFiltered(startDate?: string | null, endDate?: string | null, shopId?: number | null, userId?: string | null) {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    if (startDate && endDate) {\n        // Custom date range - generate monthly data within the range\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        end.setHours(23, 59, 59, 999);\n\n        const months = [];\n        const current = new Date(start.getFullYear(), start.getMonth(), 1);\n\n        while (current <= end) {\n            const monthStart = new Date(current.getFullYear(), current.getMonth(), 1);\n            const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0, 23, 59, 59, 999);\n\n            // Ensure we don't go beyond the specified end date\n            const actualEnd = monthEnd > end ? end : monthEnd;\n            const actualStart = monthStart < start ? start : monthStart;\n\n            const monthlyInvoices = await safeQuery(\n                () => prisma.invoice.aggregate({\n                    where: {\n                        createdAt: {\n                            gte: actualStart,\n                            lte: actualEnd\n                        },\n                        ...(shopId ? { shopId } : {}),\n                        ...(userId ? { createdBy: userId } : {})\n                    },\n                    _sum: {\n                        total: true\n                    }\n                }),\n                { _sum: { total: null } },\n                `Failed to fetch invoice data for ${monthNames[current.getMonth()]} ${current.getFullYear()}`\n            );\n\n            months.push({\n                month: `${monthNames[current.getMonth()]} ${current.getFullYear()}`,\n                sales: monthlyInvoices._sum.total || 0\n            });\n\n            // Move to next month\n            current.setMonth(current.getMonth() + 1);\n        }\n\n        return {\n            success: true,\n            data: months\n        };\n    } else {\n        // Default behavior - last 6 months\n        return fetchSalesData();\n    }\n}\n\nexport async function fetchSalesData(shopId?: number | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    // Get current month and year\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = now.getMonth(); // 0-indexed (0 = January)\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    // Prepare the result array with 6 months of data (current month and 5 previous months)\n    const months = [];\n\n    for (let i = 5; i >= 0; i--) {\n        // Calculate month index (handle wrapping to previous year)\n        let monthIndex = currentMonth - i;\n        let yearToUse = currentYear;\n\n        if (monthIndex < 0) {\n            monthIndex += 12;\n            yearToUse -= 1;\n        }\n\n        // Create start and end date for this month\n        const startDate = new Date(yearToUse, monthIndex, 1);\n        const endDate = new Date(yearToUse, monthIndex + 1, 0, 23, 59, 59, 999);\n\n        // Query actual invoices for this month\n        const monthlyInvoices = await safeQuery(\n            () => prisma.invoice.aggregate({\n                where: {\n                    createdAt: {\n                        gte: startDate,\n                        lte: endDate\n                    },\n                    ...(shopId ? { shopId } : {}),\n                    ...(userId ? { createdBy: userId } : {})\n                },\n                _sum: {\n                    total: true\n                }\n            }),\n            { _sum: { total: null } }, // Default to null if query fails\n            `Failed to fetch invoice data for ${monthNames[monthIndex]} ${yearToUse}`\n        );\n\n        // Add the month data to our result array\n        months.push({\n            month: monthNames[monthIndex],\n            sales: monthlyInvoices._sum.total || 0 // Use 0 if no sales data\n        });\n    }\n    return {\n        success: true,\n        data: months\n    };\n}\n\n// GET: Fetch monthly sales data with shop-based filtering\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_sales');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                roleName: true,\n                permissions: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       (user.permissions && user.permissions.includes('admin:all'));\n\n        // Determine user filtering\n        let filterUserId: string | null = null;\n        if (!isAdmin) {\n            filterUserId = userId;\n        }\n\n        console.log('Sales API - Shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            isAdmin: context.isAdmin,\n            userShopId: context.userShopId,\n            userId: userId,\n            userRole: user.roleName,\n            filterUserId: filterUserId\n        });\n\n        // Create cache key that includes shop context and user context\n        const userContext = isAdmin ? 'admin' : userId;\n        const cacheKey = context.isFiltered ? \n            `dashboard:sales:shop:${context.shopId}:user:${userContext}` : \n            `dashboard:sales:all:user:${userContext}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Sales data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh sales data');\n        const salesResult = await fetchSalesData(\n            context.isFiltered ? context.shopId : null,\n            undefined,\n            undefined,\n            undefined,\n            filterUserId\n        );\n\n        // Cache for 5 minutes (sales data changes less frequently)\n        await cacheService.set(cacheKey, salesResult, 300);\n        console.log('\uD83D\uDCBE Sales data cached for 5 minutes');\n\n        return NextResponse.json({\n            ...salesResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        });\n    } catch (error) {\n        console.error('Error generating sales data:', error);\n\n        // Return months with zero values on error, consistent with original logic\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const now = new Date();\n        const currentMonth = now.getMonth();\n\n        const emptyMonths = Array(6).fill(0).map((_, i) => {\n            let monthIndex = currentMonth - i;\n            if (monthIndex < 0) monthIndex += 12;\n\n            return {\n                month: monthNames[monthIndex],\n                sales: 0\n            };\n        }).reverse();\n\n        return NextResponse.json({\n            success: true, // Or false\n            data: emptyMonths,\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                error: true\n            }\n        });\n    }\n});"],
      names: ["GET", "fetchSalesData", "fetchSalesDataFiltered", "startDate", "endDate", "shopId", "userId", "monthNames", "start", "Date", "end", "setHours", "months", "current", "getFullYear", "getMonth", "monthStart", "monthEnd", "actualEnd", "actualStart", "monthlyInvoices", "safeQuery", "prisma", "invoice", "aggregate", "where", "createdAt", "gte", "lte", "createdBy", "_sum", "total", "push", "month", "sales", "setMonth", "success", "data", "periodDays", "now", "currentYear", "currentMonth", "i", "monthIndex", "yearToUse", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "getUserIdFromToken", "user", "findUnique", "id", "select", "roleName", "permissions", "isAdmin", "includes", "filterUserId", "console", "log", "isFiltered", "userShopId", "userRole", "userContext", "cacheKey", "cachedData", "cacheService", "get", "meta", "shopFiltered", "fromCache", "salesResult", "undefined", "set", "emptyMonths", "Array", "fill", "map", "_", "reverse", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7113874e24564a82a0dd7b8393be2620b25b4724"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mz236g7zl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mz236g7zl();
cov_1mz236g7zl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1mz236g7zl().f[0]++;
  cov_1mz236g7zl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1mz236g7zl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1mz236g7zl().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1mz236g7zl().f[1]++;
    cov_1mz236g7zl().s[4]++;
    return GET;
  },
  fetchSalesData: function () {
    /* istanbul ignore next */
    cov_1mz236g7zl().f[2]++;
    cov_1mz236g7zl().s[5]++;
    return fetchSalesData;
  },
  fetchSalesDataFiltered: function () {
    /* istanbul ignore next */
    cov_1mz236g7zl().f[3]++;
    cov_1mz236g7zl().s[6]++;
    return fetchSalesDataFiltered;
  }
});
const _server =
/* istanbul ignore next */
(cov_1mz236g7zl().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1mz236g7zl().s[8]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_1mz236g7zl().s[9]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_1mz236g7zl().s[10]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_1mz236g7zl().s[11]++, require("../../../../lib/auth"));
async function fetchSalesDataFiltered(startDate, endDate, shopId, userId) {
  /* istanbul ignore next */
  cov_1mz236g7zl().f[4]++;
  const monthNames =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[12]++, ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
  /* istanbul ignore next */
  cov_1mz236g7zl().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_1mz236g7zl().b[1][0]++, startDate) &&
  /* istanbul ignore next */
  (cov_1mz236g7zl().b[1][1]++, endDate)) {
    /* istanbul ignore next */
    cov_1mz236g7zl().b[0][0]++;
    // Custom date range - generate monthly data within the range
    const start =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[14]++, new Date(startDate));
    const end =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[15]++, new Date(endDate));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[16]++;
    end.setHours(23, 59, 59, 999);
    const months =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[17]++, []);
    const current =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[18]++, new Date(start.getFullYear(), start.getMonth(), 1));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[19]++;
    while (current <= end) {
      const monthStart =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[20]++, new Date(current.getFullYear(), current.getMonth(), 1));
      const monthEnd =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[21]++, new Date(current.getFullYear(), current.getMonth() + 1, 0, 23, 59, 59, 999));
      // Ensure we don't go beyond the specified end date
      const actualEnd =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[22]++, monthEnd > end ?
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[2][0]++, end) :
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[2][1]++, monthEnd));
      const actualStart =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[23]++, monthStart < start ?
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[3][0]++, start) :
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[3][1]++, monthStart));
      const monthlyInvoices =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[24]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_1mz236g7zl().f[5]++;
        cov_1mz236g7zl().s[25]++;
        return _prisma.prisma.invoice.aggregate({
          where: {
            createdAt: {
              gte: actualStart,
              lte: actualEnd
            },
            ...(shopId ?
            /* istanbul ignore next */
            (cov_1mz236g7zl().b[4][0]++, {
              shopId
            }) :
            /* istanbul ignore next */
            (cov_1mz236g7zl().b[4][1]++, {})),
            ...(userId ?
            /* istanbul ignore next */
            (cov_1mz236g7zl().b[5][0]++, {
              createdBy: userId
            }) :
            /* istanbul ignore next */
            (cov_1mz236g7zl().b[5][1]++, {}))
          },
          _sum: {
            total: true
          }
        });
      }, {
        _sum: {
          total: null
        }
      }, `Failed to fetch invoice data for ${monthNames[current.getMonth()]} ${current.getFullYear()}`));
      /* istanbul ignore next */
      cov_1mz236g7zl().s[26]++;
      months.push({
        month: `${monthNames[current.getMonth()]} ${current.getFullYear()}`,
        sales:
        /* istanbul ignore next */
        (cov_1mz236g7zl().b[6][0]++, monthlyInvoices._sum.total) ||
        /* istanbul ignore next */
        (cov_1mz236g7zl().b[6][1]++, 0)
      });
      // Move to next month
      /* istanbul ignore next */
      cov_1mz236g7zl().s[27]++;
      current.setMonth(current.getMonth() + 1);
    }
    /* istanbul ignore next */
    cov_1mz236g7zl().s[28]++;
    return {
      success: true,
      data: months
    };
  } else {
    /* istanbul ignore next */
    cov_1mz236g7zl().b[0][1]++;
    cov_1mz236g7zl().s[29]++;
    // Default behavior - last 6 months
    return fetchSalesData();
  }
}
async function fetchSalesData(shopId, periodDays, startDate, endDate, userId) {
  /* istanbul ignore next */
  cov_1mz236g7zl().f[6]++;
  // Get current month and year
  const now =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[30]++, new Date());
  const currentYear =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[31]++, now.getFullYear());
  const currentMonth =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[32]++, now.getMonth()); // 0-indexed (0 = January)
  const monthNames =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[33]++, ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
  // Prepare the result array with 6 months of data (current month and 5 previous months)
  const months =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[34]++, []);
  /* istanbul ignore next */
  cov_1mz236g7zl().s[35]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1mz236g7zl().s[36]++, 5); i >= 0; i--) {
    // Calculate month index (handle wrapping to previous year)
    let monthIndex =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[37]++, currentMonth - i);
    let yearToUse =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[38]++, currentYear);
    /* istanbul ignore next */
    cov_1mz236g7zl().s[39]++;
    if (monthIndex < 0) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[7][0]++;
      cov_1mz236g7zl().s[40]++;
      monthIndex += 12;
      /* istanbul ignore next */
      cov_1mz236g7zl().s[41]++;
      yearToUse -= 1;
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[7][1]++;
    }
    // Create start and end date for this month
    const startDate =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[42]++, new Date(yearToUse, monthIndex, 1));
    const endDate =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[43]++, new Date(yearToUse, monthIndex + 1, 0, 23, 59, 59, 999));
    // Query actual invoices for this month
    const monthlyInvoices =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[44]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_1mz236g7zl().f[7]++;
      cov_1mz236g7zl().s[45]++;
      return _prisma.prisma.invoice.aggregate({
        where: {
          createdAt: {
            gte: startDate,
            lte: endDate
          },
          ...(shopId ?
          /* istanbul ignore next */
          (cov_1mz236g7zl().b[8][0]++, {
            shopId
          }) :
          /* istanbul ignore next */
          (cov_1mz236g7zl().b[8][1]++, {})),
          ...(userId ?
          /* istanbul ignore next */
          (cov_1mz236g7zl().b[9][0]++, {
            createdBy: userId
          }) :
          /* istanbul ignore next */
          (cov_1mz236g7zl().b[9][1]++, {}))
        },
        _sum: {
          total: true
        }
      });
    }, {
      _sum: {
        total: null
      }
    }, `Failed to fetch invoice data for ${monthNames[monthIndex]} ${yearToUse}`));
    // Add the month data to our result array
    /* istanbul ignore next */
    cov_1mz236g7zl().s[46]++;
    months.push({
      month: monthNames[monthIndex],
      sales:
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[10][0]++, monthlyInvoices._sum.total) ||
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[10][1]++, 0) // Use 0 if no sales data
    });
  }
  /* istanbul ignore next */
  cov_1mz236g7zl().s[47]++;
  return {
    success: true,
    data: months
  };
}
const GET =
/* istanbul ignore next */
(cov_1mz236g7zl().s[48]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_1mz236g7zl().f[8]++;
  cov_1mz236g7zl().s[49]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[50]++, await (0, _auth.validateTokenPermission)(request, "view_sales"));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[51]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[11][0]++;
      cov_1mz236g7zl().s[52]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[11][1]++;
    }
    // Get user ID from token
    const userId =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[53]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[54]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[12][0]++;
      cov_1mz236g7zl().s[55]++;
      return _server.NextResponse.json({
        error: "User ID not found in token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[12][1]++;
    }
    // Fetch user details to check role and permissions
    const user =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[56]++, await _prisma.prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        roleName: true,
        permissions: true
      }
    }));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[57]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[13][0]++;
      cov_1mz236g7zl().s[58]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[13][1]++;
    }
    // Check if user is admin or has admin permissions
    const isAdmin =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[59]++,
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[14][0]++, user.roleName === "Admin") ||
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[14][1]++, user.roleName === "Super Admin") ||
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[14][2]++, user.permissions) &&
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[14][3]++, user.permissions.includes("admin:all")));
    // Determine user filtering
    let filterUserId =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[60]++, null);
    /* istanbul ignore next */
    cov_1mz236g7zl().s[61]++;
    if (!isAdmin) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[15][0]++;
      cov_1mz236g7zl().s[62]++;
      filterUserId = userId;
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[15][1]++;
    }
    cov_1mz236g7zl().s[63]++;
    console.log("Sales API - Shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered,
      isAdmin: context.isAdmin,
      userShopId: context.userShopId,
      userId: userId,
      userRole: user.roleName,
      filterUserId: filterUserId
    });
    // Create cache key that includes shop context and user context
    const userContext =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[64]++, isAdmin ?
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[16][0]++, "admin") :
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[16][1]++, userId));
    const cacheKey =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[65]++, context.isFiltered ?
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[17][0]++, `dashboard:sales:shop:${context.shopId}:user:${userContext}`) :
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[17][1]++, `dashboard:sales:all:user:${userContext}`));
    const cachedData =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[66]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_1mz236g7zl().s[67]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_1mz236g7zl().b[18][0]++;
      cov_1mz236g7zl().s[68]++;
      console.log("✅ Sales data served from cache");
      /* istanbul ignore next */
      cov_1mz236g7zl().s[69]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mz236g7zl().b[18][1]++;
    }
    cov_1mz236g7zl().s[70]++;
    console.log("\uD83D\uDD04 Fetching fresh sales data");
    const salesResult =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[71]++, await fetchSalesData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[19][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_1mz236g7zl().b[19][1]++, null), undefined, undefined, undefined, filterUserId));
    // Cache for 5 minutes (sales data changes less frequently)
    /* istanbul ignore next */
    cov_1mz236g7zl().s[72]++;
    await _cache.cacheService.set(cacheKey, salesResult, 300);
    /* istanbul ignore next */
    cov_1mz236g7zl().s[73]++;
    console.log("\uD83D\uDCBE Sales data cached for 5 minutes");
    /* istanbul ignore next */
    cov_1mz236g7zl().s[74]++;
    return _server.NextResponse.json({
      ...salesResult,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mz236g7zl().s[75]++;
    console.error("Error generating sales data:", error);
    // Return months with zero values on error, consistent with original logic
    const monthNames =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[76]++, ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
    const now =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[77]++, new Date());
    const currentMonth =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[78]++, now.getMonth());
    const emptyMonths =
    /* istanbul ignore next */
    (cov_1mz236g7zl().s[79]++, Array(6).fill(0).map((_, i) => {
      /* istanbul ignore next */
      cov_1mz236g7zl().f[9]++;
      let monthIndex =
      /* istanbul ignore next */
      (cov_1mz236g7zl().s[80]++, currentMonth - i);
      /* istanbul ignore next */
      cov_1mz236g7zl().s[81]++;
      if (monthIndex < 0) {
        /* istanbul ignore next */
        cov_1mz236g7zl().b[20][0]++;
        cov_1mz236g7zl().s[82]++;
        monthIndex += 12;
      } else
      /* istanbul ignore next */
      {
        cov_1mz236g7zl().b[20][1]++;
      }
      cov_1mz236g7zl().s[83]++;
      return {
        month: monthNames[monthIndex],
        sales: 0
      };
    }).reverse());
    /* istanbul ignore next */
    cov_1mz236g7zl().s[84]++;
    return _server.NextResponse.json({
      success: true,
      data: emptyMonths,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[21][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1mz236g7zl().b[21][1]++, "Unknown error"),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        error: true
      }
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,