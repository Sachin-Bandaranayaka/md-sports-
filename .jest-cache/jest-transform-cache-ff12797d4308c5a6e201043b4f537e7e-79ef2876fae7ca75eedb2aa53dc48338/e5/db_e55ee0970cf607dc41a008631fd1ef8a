a9f448e7437a153bf16fdccb2f14a5a3
"use strict";

/* istanbul ignore next */
function cov_jyxvsl9nf() {
  var path = "/Users/sachin/Documents/md-sports-/src/utils/db.ts";
  var hash = "b933e691e242af79e3117337556fa97ff7fc9b95";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/utils/db.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "4": {
        start: {
          line: 13,
          column: 13
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "5": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "6": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 28
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "8": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 39
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "11": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "12": {
        start: {
          line: 35,
          column: 11
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "13": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 39,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 15
          }
        },
        loc: {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 17,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 49
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 13
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 45
          }
        }, {
          start: {
            line: 25,
            column: 49
          },
          end: {
            line: 25,
            column: 63
          }
        }],
        line: 25
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/utils/db.ts"],
      sourcesContent: ["import { Pool, QueryResult } from 'pg';\n\n// Create a connection pool\nconst pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production'\n        ? { rejectUnauthorized: false }\n        : false\n});\n\n// Simple query method\nconst query = async (text: string, params?: any[]): Promise<QueryResult> => {\n    const start = Date.now();\n    const res = await pool.query(text, params);\n    const duration = Date.now() - start;\n\n    // Log slow queries in development\n    if (process.env.NODE_ENV !== 'production' && duration > 100) {\n        console.log('Slow query:', { text, duration, rows: res.rowCount });\n    }\n\n    return res;\n};\n\n// Export the database interface\nconst db = {\n    query,\n    pool\n};\n\nexport default db; "],
      names: ["pool", "Pool", "connectionString", "process", "env", "DATABASE_URL", "ssl", "NODE_ENV", "rejectUnauthorized", "query", "text", "params", "start", "Date", "now", "res", "duration", "console", "log", "rows", "rowCount", "db"],
      mappings: ";;;;+BA8BA;;;eAAA;;;oBA9BkC;AAElC,2BAA2B;AAC3B,MAAMA,OAAO,IAAIC,QAAI,CAAC;IAClBC,kBAAkBC,QAAQC,GAAG,CAACC,YAAY;IAC1CC,KAAKH,QAAQC,GAAG,CAACG,QAAQ,KAAK,eACxB;QAAEC,oBAAoB;IAAM,IAC5B;AACV;AAEA,sBAAsB;AACtB,MAAMC,QAAQ,OAAOC,MAAcC;IAC/B,MAAMC,QAAQC,KAAKC,GAAG;IACtB,MAAMC,MAAM,MAAMf,KAAKS,KAAK,CAACC,MAAMC;IACnC,MAAMK,WAAWH,KAAKC,GAAG,KAAKF;IAE9B,kCAAkC;IAClC,IAAIT,QAAQC,GAAG,CAACG,QAAQ,KAAK,gBAAgBS,WAAW,KAAK;QACzDC,QAAQC,GAAG,CAAC,eAAe;YAAER;YAAMM;YAAUG,MAAMJ,IAAIK,QAAQ;QAAC;IACpE;IAEA,OAAOL;AACX;AAEA,gCAAgC;AAChC,MAAMM,KAAK;IACPZ;IACAT;AACJ;MAEA,WAAeqB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b933e691e242af79e3117337556fa97ff7fc9b95"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jyxvsl9nf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jyxvsl9nf();
cov_jyxvsl9nf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jyxvsl9nf().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_jyxvsl9nf().f[0]++;
    cov_jyxvsl9nf().s[2]++;
    return _default;
  }
});
const _pg =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[3]++, require("pg"));
// Create a connection pool
const pool =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[4]++, new _pg.Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === "production" ?
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[0][0]++, {
    rejectUnauthorized: false
  }) :
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[0][1]++, false)
}));
// Simple query method
/* istanbul ignore next */
cov_jyxvsl9nf().s[5]++;
const query = async (text, params) => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[1]++;
  const start =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[6]++, Date.now());
  const res =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[7]++, await pool.query(text, params));
  const duration =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[8]++, Date.now() - start);
  // Log slow queries in development
  /* istanbul ignore next */
  cov_jyxvsl9nf().s[9]++;
  if (
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[2][0]++, process.env.NODE_ENV !== "production") &&
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[2][1]++, duration > 100)) {
    /* istanbul ignore next */
    cov_jyxvsl9nf().b[1][0]++;
    cov_jyxvsl9nf().s[10]++;
    console.log("Slow query:", {
      text,
      duration,
      rows: res.rowCount
    });
  } else
  /* istanbul ignore next */
  {
    cov_jyxvsl9nf().b[1][1]++;
  }
  cov_jyxvsl9nf().s[11]++;
  return res;
};
// Export the database interface
const db =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[12]++, {
  query,
  pool
});
const _default =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[13]++, db);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfanl4dnNsOW5mIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiX2RlZmF1bHQiLCJwb29sIiwiX3BnIiwiUG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJwcm9jZXNzIiwiZW52IiwiREFUQUJBU0VfVVJMIiwic3NsIiwiTk9ERV9FTlYiLCJiIiwicmVqZWN0VW5hdXRob3JpemVkIiwicXVlcnkiLCJ0ZXh0IiwicGFyYW1zIiwiZiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInJlcyIsImR1cmF0aW9uIiwiY29uc29sZSIsImxvZyIsInJvd3MiLCJyb3dDb3VudCIsImRiIl0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvdXRpbHMvZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9vbCwgUXVlcnlSZXN1bHQgfSBmcm9tICdwZyc7XG5cbi8vIENyZWF0ZSBhIGNvbm5lY3Rpb24gcG9vbFxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcbiAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gICAgc3NsOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgID8geyByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlIH1cbiAgICAgICAgOiBmYWxzZVxufSk7XG5cbi8vIFNpbXBsZSBxdWVyeSBtZXRob2RcbmNvbnN0IHF1ZXJ5ID0gYXN5bmMgKHRleHQ6IHN0cmluZywgcGFyYW1zPzogYW55W10pOiBQcm9taXNlPFF1ZXJ5UmVzdWx0PiA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBvb2wucXVlcnkodGV4dCwgcGFyYW1zKTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydDtcblxuICAgIC8vIExvZyBzbG93IHF1ZXJpZXMgaW4gZGV2ZWxvcG1lbnRcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkdXJhdGlvbiA+IDEwMCkge1xuICAgICAgICBjb25zb2xlLmxvZygnU2xvdyBxdWVyeTonLCB7IHRleHQsIGR1cmF0aW9uLCByb3dzOiByZXMucm93Q291bnQgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbi8vIEV4cG9ydCB0aGUgZGF0YWJhc2UgaW50ZXJmYWNlXG5jb25zdCBkYiA9IHtcbiAgICBxdWVyeSxcbiAgICBwb29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBkYjsgIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU1ZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFBQUEsYUFBQSxHQUFBRSxDQUFBOzs7Ozs7K0JBd0JaOzs7Ozs7V0FBQUMsUUFBQTs7Ozs7aUNBOUJrQztBQUVsQztBQUNBLE1BQU1DLElBQUE7QUFBQTtBQUFBLENBQUFKLGFBQUEsR0FBQUUsQ0FBQSxPQUFPLElBQUlHLEdBQUEsQ0FBQUMsSUFBSSxDQUFDO0VBQ2xCQyxnQkFBQSxFQUFrQkMsT0FBQSxDQUFRQyxHQUFHLENBQUNDLFlBQVk7RUFDMUNDLEdBQUEsRUFBS0gsT0FBQSxDQUFRQyxHQUFHLENBQUNHLFFBQVEsS0FBSztFQUFBO0VBQUEsQ0FBQVosYUFBQSxHQUFBYSxDQUFBLFVBQ3hCO0lBQUVDLGtCQUFBLEVBQW9CO0VBQU07RUFBQTtFQUFBLENBQUFkLGFBQUEsR0FBQWEsQ0FBQSxVQUM1QjtBQUNWO0FBRUE7QUFBQTtBQUFBYixhQUFBLEdBQUFFLENBQUE7QUFDQSxNQUFNYSxLQUFBLEdBQVEsTUFBQUEsQ0FBT0MsSUFBQSxFQUFjQyxNQUFBO0VBQUE7RUFBQWpCLGFBQUEsR0FBQWtCLENBQUE7RUFDL0IsTUFBTUMsS0FBQTtFQUFBO0VBQUEsQ0FBQW5CLGFBQUEsR0FBQUUsQ0FBQSxPQUFRa0IsSUFBQSxDQUFLQyxHQUFHO0VBQ3RCLE1BQU1DLEdBQUE7RUFBQTtFQUFBLENBQUF0QixhQUFBLEdBQUFFLENBQUEsT0FBTSxNQUFNRSxJQUFBLENBQUtXLEtBQUssQ0FBQ0MsSUFBQSxFQUFNQyxNQUFBO0VBQ25DLE1BQU1NLFFBQUE7RUFBQTtFQUFBLENBQUF2QixhQUFBLEdBQUFFLENBQUEsT0FBV2tCLElBQUEsQ0FBS0MsR0FBRyxLQUFLRixLQUFBO0VBRTlCO0VBQUE7RUFBQW5CLGFBQUEsR0FBQUUsQ0FBQTtFQUNBO0VBQUk7RUFBQSxDQUFBRixhQUFBLEdBQUFhLENBQUEsVUFBQUwsT0FBQSxDQUFRQyxHQUFHLENBQUNHLFFBQVEsS0FBSztFQUFBO0VBQUEsQ0FBQVosYUFBQSxHQUFBYSxDQUFBLFVBQWdCVSxRQUFBLEdBQVcsTUFBSztJQUFBO0lBQUF2QixhQUFBLEdBQUFhLENBQUE7SUFBQWIsYUFBQSxHQUFBRSxDQUFBO0lBQ3pEc0IsT0FBQSxDQUFRQyxHQUFHLENBQUMsZUFBZTtNQUFFVCxJQUFBO01BQU1PLFFBQUE7TUFBVUcsSUFBQSxFQUFNSixHQUFBLENBQUlLO0lBQVM7RUFDcEU7RUFBQTtFQUFBO0lBQUEzQixhQUFBLEdBQUFhLENBQUE7RUFBQTtFQUFBYixhQUFBLEdBQUFFLENBQUE7RUFFQSxPQUFPb0IsR0FBQTtBQUNYO0FBRUE7QUFDQSxNQUFNTSxFQUFBO0FBQUE7QUFBQSxDQUFBNUIsYUFBQSxHQUFBRSxDQUFBLFFBQUs7RUFDUGEsS0FBQTtFQUNBWDtBQUNKO01BRUFELFFBQUE7QUFBQTtBQUFBLENBQUFILGFBQUEsR0FBQUUsQ0FBQSxRQUFlMEIsRUFBQSIsImlnbm9yZUxpc3QiOltdfQ==