{"version":3,"names":["SMSService","cov_1src5l9t71","f","s","smsService","init","apiKeySetting","_prisma","prisma","systemSettings","findUnique","where","key","userIdSetting","enabledSetting","apiKey","b","value","userId","isEnabled","error","console","isConfigured","sendSMS","options","status","message","phoneNumber","to","replace","startsWith","substring","response","_axios","default","get","baseUrl","params","user_id","api_key","sender_id","data","Error","sendInvoiceNotification","invoiceId","invoice","id","include","customer","phone","name","invoiceNumber","total","toFixed","sendPaymentReminder"],"sources":["/Users/sachin/Documents/md-sports-/src/services/smsService.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport axios from 'axios';\n\ninterface SMSOptions {\n    to: string;\n    message: string;\n}\n\ninterface NotifyLKResponse {\n    status: number;\n    message: string;\n    data?: any;\n}\n\n/**\n * SMS Service for sending notifications via notify.lk\n */\nexport class SMSService {\n    private apiKey: string | null = null;\n    private userId: string | null = null;\n    private baseUrl = 'https://app.notify.lk/api/v1/send';\n    private isEnabled = false;\n\n    /**\n     * Initialize the SMS service with settings from the database\n     */\n    async init(): Promise<void> {\n        try {\n            // Get settings from database\n            const apiKeySetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_api_key' }\n            });\n\n            const userIdSetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_user_id' }\n            });\n\n            const enabledSetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_enabled' }\n            });\n\n            this.apiKey = apiKeySetting?.value || null;\n            this.userId = userIdSetting?.value || null;\n            this.isEnabled = enabledSetting?.value === 'true';\n        } catch (error) {\n            console.error('Failed to initialize SMS service:', error);\n        }\n    }\n\n    /**\n     * Check if the SMS service is properly configured\n     */\n    isConfigured(): boolean {\n        return !!(this.apiKey && this.userId && this.isEnabled);\n    }\n\n    /**\n     * Send an SMS message\n     * @param options SMS options including recipient and message\n     * @returns Response from notify.lk API\n     */\n    async sendSMS(options: SMSOptions): Promise<NotifyLKResponse> {\n        // Initialize if not already initialized\n        if (!this.apiKey || !this.userId) {\n            await this.init();\n        }\n\n        // Check if service is configured and enabled\n        if (!this.isConfigured()) {\n            return {\n                status: 400,\n                message: 'SMS service is not configured or disabled'\n            };\n        }\n\n        // Format phone number (remove spaces, ensure it starts with 94 for Sri Lanka)\n        let phoneNumber = options.to.replace(/\\s+/g, '');\n        if (phoneNumber.startsWith('0')) {\n            phoneNumber = '94' + phoneNumber.substring(1);\n        } else if (!phoneNumber.startsWith('94')) {\n            phoneNumber = '94' + phoneNumber;\n        }\n\n        try {\n            const response = await axios.get(this.baseUrl, {\n                params: {\n                    user_id: this.userId,\n                    api_key: this.apiKey,\n                    sender_id: 'NotifyDEMO',\n                    to: phoneNumber,\n                    message: options.message\n                }\n            });\n\n            return {\n                status: response.status,\n                message: 'SMS sent successfully',\n                data: response.data\n            };\n        } catch (error) {\n            console.error('Failed to send SMS:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send SMS'\n            };\n        }\n    }\n\n    /**\n     * Send invoice notification to customer\n     * @param invoiceId Invoice ID\n     * @returns Response from notify.lk API\n     */\n    async sendInvoiceNotification(invoiceId: number): Promise<NotifyLKResponse> {\n        try {\n            // Get invoice with customer details\n            const invoice = await prisma.invoice.findUnique({\n                where: { id: invoiceId },\n                include: {\n                    customer: true\n                }\n            });\n\n            if (!invoice) {\n                return {\n                    status: 404,\n                    message: 'Invoice not found'\n                };\n            }\n\n            if (!invoice.customer.phone) {\n                return {\n                    status: 400,\n                    message: 'Customer phone number not available'\n                };\n            }\n\n            // Prepare message\n            const message = `Dear ${invoice.customer.name}, your invoice #${invoice.invoiceNumber} for LKR ${invoice.total.toFixed(2)} has been created. Thank you for your business with MS Sport.`;\n\n            // Send SMS\n            return this.sendSMS({\n                to: invoice.customer.phone,\n                message\n            });\n        } catch (error) {\n            console.error('Failed to send invoice notification:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send invoice notification'\n            };\n        }\n    }\n\n    /**\n     * Send payment reminder for overdue invoices\n     * @param invoiceId Invoice ID\n     * @returns Response from notify.lk API\n     */\n    async sendPaymentReminder(invoiceId: number): Promise<NotifyLKResponse> {\n        try {\n            // Get invoice with customer details\n            const invoice = await prisma.invoice.findUnique({\n                where: { id: invoiceId },\n                include: {\n                    customer: true\n                }\n            });\n\n            if (!invoice) {\n                return {\n                    status: 404,\n                    message: 'Invoice not found'\n                };\n            }\n\n            if (!invoice.customer.phone) {\n                return {\n                    status: 400,\n                    message: 'Customer phone number not available'\n                };\n            }\n\n            // Prepare message\n            const message = `Dear ${invoice.customer.name}, this is a reminder that invoice #${invoice.invoiceNumber} for LKR ${invoice.total.toFixed(2)} is overdue. Please make payment at your earliest convenience.`;\n\n            // Send SMS\n            return this.sendSMS({\n                to: invoice.customer.phone,\n                message\n            });\n        } catch (error) {\n            console.error('Failed to send payment reminder:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send payment reminder'\n            };\n        }\n    }\n}\n\n// Export singleton instance\nexport const smsService = new SMSService(); "],"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","ignoreList":[]}