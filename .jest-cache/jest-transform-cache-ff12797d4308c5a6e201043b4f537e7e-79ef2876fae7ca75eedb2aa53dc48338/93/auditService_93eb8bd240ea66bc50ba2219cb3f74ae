375b2601fcd3f662e0d6abe1345d0356
"use strict";

/* istanbul ignore next */
function cov_1u0iw1jprc() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/auditService.ts";
  var hash = "94e17a81e198083e19dae1b72b95574e57272886";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/auditService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "9": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 55
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 37
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "12": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "13": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "14": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 63
        }
      },
      "15": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "16": {
        start: {
          line: 81,
          column: 22
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "17": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "18": {
        start: {
          line: 101,
          column: 32
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "19": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "20": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 86
        }
      },
      "21": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 40
        }
      },
      "22": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 115,
          column: 14
        }
      },
      "23": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "24": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "25": {
        start: {
          line: 126,
          column: 31
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "26": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "27": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 135,
          column: 18
        }
      },
      "28": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 46
        }
      },
      "29": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "30": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 142,
          column: 18
        }
      },
      "31": {
        start: {
          line: 145,
          column: 33
        },
        end: {
          line: 145,
          column: 102
        }
      },
      "32": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "33": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 36
        }
      },
      "34": {
        start: {
          line: 150,
          column: 35
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "35": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "36": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "37": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 179,
          column: 14
        }
      },
      "38": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 60
        }
      },
      "39": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "40": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "41": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "42": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 212,
          column: 23
        }
      },
      "43": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 26
        }
      },
      "44": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 229,
          column: 23
        }
      },
      "45": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 26
        }
      },
      "46": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 245,
          column: 23
        }
      },
      "47": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 26
        }
      },
      "48": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 254,
          column: 23
        }
      },
      "49": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 26
        }
      },
      "50": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 265,
          column: 23
        }
      },
      "51": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 26
        }
      },
      "52": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 271,
          column: 22
        }
      },
      "53": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 277,
          column: 14
        }
      },
      "54": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 65
        }
      },
      "55": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "56": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 321,
          column: 10
        }
      },
      "57": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 23
        }
      },
      "58": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "59": {
        start: {
          line: 342,
          column: 27
        },
        end: {
          line: 342,
          column: 37
        }
      },
      "60": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 59
        }
      },
      "61": {
        start: {
          line: 344,
          column: 23
        },
        end: {
          line: 355,
          column: 10
        }
      },
      "62": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 28
        }
      },
      "63": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "64": {
        start: {
          line: 362,
          column: 35
        },
        end: {
          line: 371,
          column: 14
        }
      },
      "65": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 376,
          column: 69
        }
      },
      "66": {
        start: {
          line: 374,
          column: 32
        },
        end: {
          line: 374,
          column: 45
        }
      },
      "67": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "68": {
        start: {
          line: 376,
          column: 28
        },
        end: {
          line: 376,
          column: 42
        }
      },
      "69": {
        start: {
          line: 376,
          column: 57
        },
        end: {
          line: 376,
          column: 68
        }
      },
      "70": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 30
        }
      },
      "71": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 84
        }
      },
      "72": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 22
        }
      },
      "73": {
        start: {
          line: 384,
          column: 21
        },
        end: {
          line: 384,
          column: 47
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 7
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 61,
            column: 7
          }
        },
        loc: {
          start: {
            line: 61,
            column: 82
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 80,
            column: 7
          }
        },
        loc: {
          start: {
            line: 80,
            column: 63
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 101,
            column: 46
          }
        },
        loc: {
          start: {
            line: 101,
            column: 53
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 101
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 16
          }
        },
        loc: {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 116,
            column: 9
          }
        },
        line: 104
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 124,
            column: 7
          }
        },
        loc: {
          start: {
            line: 124,
            column: 44
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 124
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 190,
            column: 6
          },
          end: {
            line: 190,
            column: 7
          }
        },
        loc: {
          start: {
            line: 190,
            column: 52
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 190
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 288,
            column: 6
          },
          end: {
            line: 288,
            column: 7
          }
        },
        loc: {
          start: {
            line: 288,
            column: 59
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 288
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 326,
            column: 6
          },
          end: {
            line: 326,
            column: 7
          }
        },
        loc: {
          start: {
            line: 326,
            column: 43
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 326
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 341,
            column: 6
          },
          end: {
            line: 341,
            column: 7
          }
        },
        loc: {
          start: {
            line: 341,
            column: 49
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 341
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 360,
            column: 6
          },
          end: {
            line: 360,
            column: 7
          }
        },
        loc: {
          start: {
            line: 360,
            column: 40
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 360
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 373,
            column: 53
          },
          end: {
            line: 373,
            column: 54
          }
        },
        loc: {
          start: {
            line: 373,
            column: 62
          },
          end: {
            line: 376,
            column: 13
          }
        },
        line: 373
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 376,
            column: 19
          },
          end: {
            line: 376,
            column: 20
          }
        },
        loc: {
          start: {
            line: 376,
            column: 28
          },
          end: {
            line: 376,
            column: 42
          }
        },
        line: 376
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 376,
            column: 51
          },
          end: {
            line: 376,
            column: 52
          }
        },
        loc: {
          start: {
            line: 376,
            column: 57
          },
          end: {
            line: 376,
            column: 68
          }
        },
        line: 376
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 27
          },
          end: {
            line: 38,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 27
          },
          end: {
            line: 38,
            column: 42
          }
        }, {
          start: {
            line: 38,
            column: 46
          },
          end: {
            line: 38,
            column: 51
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 41,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 41,
            column: 44
          }
        }, {
          start: {
            line: 41,
            column: 48
          },
          end: {
            line: 41,
            column: 53
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 63
          },
          end: {
            line: 61,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 76
          },
          end: {
            line: 61,
            column: 80
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 39
          },
          end: {
            line: 80,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 80,
            column: 47
          },
          end: {
            line: 80,
            column: 49
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 51
          },
          end: {
            line: 80,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 80,
            column: 60
          },
          end: {
            line: 80,
            column: 61
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 15
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 15
          },
          end: {
            line: 83,
            column: 21
          }
        }, {
          start: {
            line: 83,
            column: 25
          },
          end: {
            line: 85,
            column: 13
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 37
          }
        }, {
          start: {
            line: 103,
            column: 41
          },
          end: {
            line: 103,
            column: 60
          }
        }, {
          start: {
            line: 103,
            column: 64
          },
          end: {
            line: 103,
            column: 85
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 111,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 48
          },
          end: {
            line: 111,
            column: 75
          }
        }, {
          start: {
            line: 111,
            column: 78
          },
          end: {
            line: 111,
            column: 92
          }
        }],
        line: 111
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 45
          }
        }, {
          start: {
            line: 112,
            column: 49
          },
          end: {
            line: 112,
            column: 60
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 28
          },
          end: {
            line: 114,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 28
          },
          end: {
            line: 114,
            column: 47
          }
        }, {
          start: {
            line: 114,
            column: 51
          },
          end: {
            line: 114,
            column: 56
          }
        }],
        line: 114
      },
      "11": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 138,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 138,
            column: 35
          }
        }, {
          start: {
            line: 138,
            column: 39
          },
          end: {
            line: 138,
            column: 59
          }
        }, {
          start: {
            line: 138,
            column: 63
          },
          end: {
            line: 138,
            column: 83
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 213,
            column: 26
          }
        }, {
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 230,
            column: 26
          }
        }, {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 246,
            column: 26
          }
        }, {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 255,
            column: 26
          }
        }, {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 266,
            column: 26
          }
        }, {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 271,
            column: 22
          }
        }],
        line: 193
      },
      "16": {
        loc: {
          start: {
            line: 210,
            column: 38
          },
          end: {
            line: 210,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 38
          },
          end: {
            line: 210,
            column: 59
          }
        }, {
          start: {
            line: 210,
            column: 63
          },
          end: {
            line: 210,
            column: 67
          }
        }],
        line: 210
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 38
          },
          end: {
            line: 227,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 38
          },
          end: {
            line: 227,
            column: 59
          }
        }, {
          start: {
            line: 227,
            column: 63
          },
          end: {
            line: 227,
            column: 67
          }
        }],
        line: 227
      },
      "18": {
        loc: {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 243,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 243,
            column: 59
          }
        }, {
          start: {
            line: 243,
            column: 63
          },
          end: {
            line: 243,
            column: 67
          }
        }],
        line: 243
      },
      "19": {
        loc: {
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 59
          }
        }, {
          start: {
            line: 252,
            column: 63
          },
          end: {
            line: 252,
            column: 67
          }
        }],
        line: 252
      },
      "20": {
        loc: {
          start: {
            line: 282,
            column: 57
          },
          end: {
            line: 282,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 82
          },
          end: {
            line: 282,
            column: 95
          }
        }, {
          start: {
            line: 282,
            column: 98
          },
          end: {
            line: 282,
            column: 113
          }
        }],
        line: 282
      },
      "21": {
        loc: {
          start: {
            line: 288,
            column: 47
          },
          end: {
            line: 288,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 288,
            column: 55
          },
          end: {
            line: 288,
            column: 57
          }
        }],
        line: 288
      },
      "22": {
        loc: {
          start: {
            line: 341,
            column: 35
          },
          end: {
            line: 341,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 341,
            column: 45
          },
          end: {
            line: 341,
            column: 47
          }
        }],
        line: 341
      },
      "23": {
        loc: {
          start: {
            line: 375,
            column: 23
          },
          end: {
            line: 375,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 23
          },
          end: {
            line: 375,
            column: 41
          }
        }, {
          start: {
            line: 375,
            column: 45
          },
          end: {
            line: 375,
            column: 66
          }
        }],
        line: 375
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: number;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: number;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: number;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: number;\n  deletedByUser?: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: number,\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId,\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || item.userId!,\n          deletedByUser: undefined, // We'll need to fetch this separately if needed\n          canRecover: details?.canRecover || false,\n        };\n      });\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId,\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              amount: originalData.amount,\n              paymentId: originalData.paymentId,\n              issuedAt: originalData.issuedAt,\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20\n  ): Promise<AuditLogEntry[]> {\n    const entries = await this.prisma.auditLog.findMany({\n      where: {\n        entity,\n        entityId,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    await this.prisma.auditLog.updateMany({\n      where: {\n        id: { in: auditLogIds },\n        isDeleted: true,\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],
      names: ["AuditService", "auditService", "prisma", "getInstance", "instance", "logAction", "entry", "details", "originalData", "isDeleted", "deletedAt", "deletedBy", "canRecover", "recoveredAt", "recoveredBy", "auditLog", "create", "data", "userId", "action", "entity", "entityId", "error", "console", "softDelete", "Date", "type", "recoverable", "getRecycleBinItems", "limit", "offset", "where", "items", "total", "Promise", "all", "findMany", "orderBy", "createdAt", "take", "skip", "count", "recycleBinItems", "filter", "item", "map", "id", "deletedByUser", "undefined", "recoverItem", "auditLogId", "auditEntry", "findUnique", "success", "message", "restoredData", "restoreEntityData", "updatedDetails", "update", "originalAuditLogId", "recoveredData", "toLowerCase", "product", "name", "description", "price", "cost", "sku", "barcode", "categoryId", "supplierId", "minStockLevel", "maxStockLevel", "unit", "weight", "dimensions", "isActive", "customer", "email", "phone", "address", "city", "postalCode", "country", "taxNumber", "creditLimit", "paymentTerms", "supplier", "category", "receipt", "receiptNumber", "amount", "paymentId", "issuedAt", "notes", "Error", "getEntityHistory", "entries", "include", "user", "select", "recoveredByUser", "permanentlyDelete", "auditLogIds", "updateMany", "in", "cleanupOldDeletedItems", "daysOld", "cutoffDate", "setDate", "getDate", "result", "lt", "getDeletedEntityIds", "deletedEntries", "deletedIds"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94e17a81e198083e19dae1b72b95574e57272886"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1u0iw1jprc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u0iw1jprc();
cov_1u0iw1jprc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1u0iw1jprc().f[0]++;
  cov_1u0iw1jprc().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1u0iw1jprc().s[3]++;
_export(exports, {
  AuditService: function () {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[1]++;
    cov_1u0iw1jprc().s[4]++;
    return AuditService;
  },
  auditService: function () {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[2]++;
    cov_1u0iw1jprc().s[5]++;
    return auditService;
  }
});
const _prisma =
/* istanbul ignore next */
(cov_1u0iw1jprc().s[6]++, require("../lib/prisma"));
class AuditService {
  constructor() {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[3]++;
    cov_1u0iw1jprc().s[7]++;
    this.prisma = _prisma.prisma;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[4]++;
    cov_1u0iw1jprc().s[8]++;
    if (!AuditService.instance) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().b[0][0]++;
      cov_1u0iw1jprc().s[9]++;
      AuditService.instance = new AuditService();
    } else
    /* istanbul ignore next */
    {
      cov_1u0iw1jprc().b[0][1]++;
    }
    cov_1u0iw1jprc().s[10]++;
    return AuditService.instance;
  }
  /**
  * Log an audit entry
  */
  async logAction(entry) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[5]++;
    cov_1u0iw1jprc().s[11]++;
    try {
      // Prepare details object with all the additional information
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[12]++, {
        ...entry.details,
        originalData: entry.originalData,
        isDeleted:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[1][0]++, entry.isDeleted) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[1][1]++, false),
        deletedAt: entry.deletedAt,
        deletedBy: entry.deletedBy,
        canRecover:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[2][0]++, entry.canRecover) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[2][1]++, false),
        recoveredAt: entry.recoveredAt,
        recoveredBy: entry.recoveredBy
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[13]++;
      await this.prisma.auditLog.create({
        data: {
          userId: entry.userId,
          action: entry.action,
          entity: entry.entity,
          entityId: entry.entityId,
          details: details
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[14]++;
      console.error("Failed to log audit entry:", error);
      // Don't throw error to avoid breaking the main operation
    }
  }
  /**
  * Soft delete an entity and log it
  */
  async softDelete(entity, entityId, originalData, userId, canRecover =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[3][0]++, true)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[6]++;
    cov_1u0iw1jprc().s[15]++;
    await this.logAction({
      userId,
      action: "DELETE",
      entity,
      entityId,
      originalData,
      isDeleted: true,
      deletedAt: new Date(),
      deletedBy: userId,
      canRecover,
      details: {
        type: "soft_delete",
        recoverable: canRecover
      }
    });
  }
  /**
  * Get recycle bin items (deleted items that can be recovered)
  */
  async getRecycleBinItems(entity, limit =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[4][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[5][0]++, 0)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[7]++;
    const where =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[16]++, {
      action: "DELETE",
      ...(
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[6][0]++, entity) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[6][1]++, {
        entity
      }))
    });
    const [items, total] =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[17]++, await Promise.all([this.prisma.auditLog.findMany({
      where,
      orderBy: {
        createdAt: "desc"
      },
      take: limit,
      skip: offset
    }), this.prisma.auditLog.count({
      where
    })]));
    // Filter and map items that are deleted and recoverable
    const recycleBinItems =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[18]++, items.filter(item => {
      /* istanbul ignore next */
      cov_1u0iw1jprc().f[8]++;
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[19]++, item.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[20]++;
      return /* istanbul ignore next */(cov_1u0iw1jprc().b[7][0]++, details?.isDeleted) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[7][1]++, details?.canRecover) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[7][2]++, !details?.recoveredAt);
    }).map(item => {
      /* istanbul ignore next */
      cov_1u0iw1jprc().f[9]++;
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[21]++, item.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[22]++;
      return {
        id: item.id,
        entity: item.entity,
        entityId: item.entityId,
        originalData: details?.originalData,
        deletedAt: details?.deletedAt ?
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[8][0]++, new Date(details.deletedAt)) :
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[8][1]++, item.createdAt),
        deletedBy:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[9][0]++, details?.deletedBy) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[9][1]++, item.userId),
        deletedByUser: undefined,
        canRecover:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[10][0]++, details?.canRecover) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[10][1]++, false)
      };
    }));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[23]++;
    return {
      items: recycleBinItems,
      total
    };
  }
  /**
  * Recover a deleted item
  */
  async recoverItem(auditLogId, userId) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[10]++;
    cov_1u0iw1jprc().s[24]++;
    try {
      const auditEntry =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[25]++, await this.prisma.auditLog.findUnique({
        where: {
          id: auditLogId
        }
      }));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[26]++;
      if (!auditEntry) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[11][0]++;
        cov_1u0iw1jprc().s[27]++;
        return {
          success: false,
          message: "Audit entry not found"
        };
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[11][1]++;
      }
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[28]++, auditEntry.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[13][0]++, !details?.isDeleted) ||
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[13][1]++, !details?.canRecover) ||
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[13][2]++, details?.recoveredAt)) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[12][0]++;
        cov_1u0iw1jprc().s[30]++;
        return {
          success: false,
          message: "Item cannot be recovered"
        };
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[12][1]++;
      }
      // Restore the data based on entity type
      const restoredData =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[31]++, await this.restoreEntityData(auditEntry.entity, details.originalData));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[32]++;
      if (!restoredData.success) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[14][0]++;
        cov_1u0iw1jprc().s[33]++;
        return restoredData;
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[14][1]++;
      }
      // Mark as recovered by updating the details
      const updatedDetails =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[34]++, {
        ...details,
        recoveredAt: new Date(),
        recoveredBy: userId
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[35]++;
      await this.prisma.auditLog.update({
        where: {
          id: auditLogId
        },
        data: {
          details: updatedDetails
        }
      });
      // Log the recovery action
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[36]++;
      await this.logAction({
        userId,
        action: "RECOVER",
        entity: auditEntry.entity,
        entityId: restoredData.data?.id,
        details: {
          type: "recovery",
          originalAuditLogId: auditLogId,
          recoveredData: restoredData.data
        }
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[37]++;
      return {
        success: true,
        message: "Item recovered successfully",
        data: restoredData.data
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[38]++;
      console.error("Failed to recover item:", error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[39]++;
      return {
        success: false,
        message: "Failed to recover item"
      };
    }
  }
  /**
  * Restore entity data based on entity type
  */
  async restoreEntityData(entity, originalData) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[11]++;
    cov_1u0iw1jprc().s[40]++;
    try {
      let restoredData;
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[41]++;
      switch (entity.toLowerCase()) {
        case "product":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][0]++;
          cov_1u0iw1jprc().s[42]++;
          restoredData = await this.prisma.product.create({
            data: {
              name: originalData.name,
              description: originalData.description,
              price: originalData.price,
              cost: originalData.cost,
              sku: originalData.sku,
              barcode: originalData.barcode,
              categoryId: originalData.categoryId,
              supplierId: originalData.supplierId,
              minStockLevel: originalData.minStockLevel,
              maxStockLevel: originalData.maxStockLevel,
              unit: originalData.unit,
              weight: originalData.weight,
              dimensions: originalData.dimensions,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[16][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[16][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[43]++;
          break;
        case "customer":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][1]++;
          cov_1u0iw1jprc().s[44]++;
          restoredData = await this.prisma.customer.create({
            data: {
              name: originalData.name,
              email: originalData.email,
              phone: originalData.phone,
              address: originalData.address,
              city: originalData.city,
              postalCode: originalData.postalCode,
              country: originalData.country,
              taxNumber: originalData.taxNumber,
              creditLimit: originalData.creditLimit,
              paymentTerms: originalData.paymentTerms,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[17][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[17][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[45]++;
          break;
        case "supplier":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][2]++;
          cov_1u0iw1jprc().s[46]++;
          restoredData = await this.prisma.supplier.create({
            data: {
              name: originalData.name,
              email: originalData.email,
              phone: originalData.phone,
              address: originalData.address,
              city: originalData.city,
              postalCode: originalData.postalCode,
              country: originalData.country,
              taxNumber: originalData.taxNumber,
              paymentTerms: originalData.paymentTerms,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[18][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[18][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[47]++;
          break;
        case "category":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][3]++;
          cov_1u0iw1jprc().s[48]++;
          restoredData = await this.prisma.category.create({
            data: {
              name: originalData.name,
              description: originalData.description,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[19][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[19][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[49]++;
          break;
        case "receipt":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][4]++;
          cov_1u0iw1jprc().s[50]++;
          restoredData = await this.prisma.receipt.create({
            data: {
              receiptNumber: originalData.receiptNumber,
              amount: originalData.amount,
              paymentId: originalData.paymentId,
              issuedAt: originalData.issuedAt,
              notes: originalData.notes
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[51]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[15][5]++;
          cov_1u0iw1jprc().s[52]++;
          return {
            success: false,
            message: `Recovery not supported for entity type: ${entity}`
          };
      }
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[53]++;
      return {
        success: true,
        message: "Entity restored successfully",
        data: restoredData
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[54]++;
      console.error(`Failed to restore ${entity}:`, error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[55]++;
      return {
        success: false,
        message: `Failed to restore ${entity}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[20][1]++, "Unknown error")}`
      };
    }
  }
  /**
  * Get audit history for an entity
  */
  async getEntityHistory(entity, entityId, limit =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[21][0]++, 20)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[12]++;
    const entries =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[56]++, await this.prisma.auditLog.findMany({
      where: {
        entity,
        entityId
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        deletedByUser: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        recoveredByUser: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      take: limit
    }));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[57]++;
    return entries;
  }
  /**
  * Permanently delete items from recycle bin
  */
  async permanentlyDelete(auditLogIds) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[13]++;
    cov_1u0iw1jprc().s[58]++;
    await this.prisma.auditLog.updateMany({
      where: {
        id: {
          in: auditLogIds
        },
        isDeleted: true
      },
      data: {
        canRecover: false
      }
    });
  }
  /**
  * Clean up old deleted items (older than specified days)
  */
  async cleanupOldDeletedItems(daysOld =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[22][0]++, 30)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[14]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[59]++, new Date());
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[60]++;
    cutoffDate.setDate(cutoffDate.getDate() - daysOld);
    const result =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[61]++, await this.prisma.auditLog.updateMany({
      where: {
        isDeleted: true,
        canRecover: true,
        deletedAt: {
          lt: cutoffDate
        }
      },
      data: {
        canRecover: false
      }
    }));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[62]++;
    return result.count;
  }
  /**
  * Get IDs of soft-deleted entities for a specific entity type
  */
  async getDeletedEntityIds(entity) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[15]++;
    cov_1u0iw1jprc().s[63]++;
    try {
      const deletedEntries =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[64]++, await this.prisma.auditLog.findMany({
        where: {
          entity,
          action: "DELETE"
        },
        select: {
          entityId: true,
          details: true
        }
      }));
      // Filter for items that are deleted and not recovered
      const deletedIds =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[65]++, deletedEntries.filter(entry => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[16]++;
        const details =
        /* istanbul ignore next */
        (cov_1u0iw1jprc().s[66]++, entry.details);
        /* istanbul ignore next */
        cov_1u0iw1jprc().s[67]++;
        return /* istanbul ignore next */(cov_1u0iw1jprc().b[23][0]++, details?.isDeleted) &&
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[23][1]++, !details?.recoveredAt);
      }).map(entry => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[17]++;
        cov_1u0iw1jprc().s[68]++;
        return entry.entityId;
      }).filter(id => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[18]++;
        cov_1u0iw1jprc().s[69]++;
        return id !== null;
      }));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[70]++;
      return deletedIds;
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[71]++;
      console.error(`Error getting deleted entity IDs for ${entity}:`, error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[72]++;
      return [];
    }
  }
}
const auditService =
/* istanbul ignore next */
(cov_1u0iw1jprc().s[73]++, AuditService.getInstance());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,