{"version":3,"names":["cov_se8mu5i7n","actualCoverage","s","default","f","SuperOptimizedInvoicesPage","dynamic","revalidate","SuperOptimizedSkeleton","_jsxruntime","jsx","className","jsxs","map","i","ITEMS_PER_PAGE","CACHE_TTL","fetchOptimizedInvoicesData","_cache","unstable_cache","page","b","status","paymentMethod","searchQuery","sortBy","shopId","skip","whereClause","OR","invoiceNumber","contains","mode","customer","name","orderBy","createdAt","total","invoicesRaw","totalCount","stats","Promise","all","_prisma","prisma","invoice","findMany","where","select","id","customerId","dueDate","shop","_count","items","payments","amount","receipt","isNot","take","count","$transaction","aggregate","_sum","notIn","updatedAt","gte","Date","getFullYear","getMonth","invoices","inv","toString","customerName","toISOString","shopName","itemCount","totalPaid","reduce","sum","p","statistics","totalOutstanding","paidThisMonth","overdueCount","totalInvoices","totalPages","Math","ceil","currentPage","error","console","tags","searchParams","params","data","parseInt","search","_MainLayout","_react","Suspense","fallback","_InvoiceSuperOptimizedWrapper","initialData"],"sources":["/Users/sachin/Documents/md-sports-/src/app/invoices/super-optimized/page.tsx"],"sourcesContent":["import MainLayout from '@/components/layout/MainLayout';\nimport { Suspense } from 'react';\nimport { Prisma } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\nimport { unstable_cache } from 'next/cache';\nimport InvoiceSuperOptimizedWrapper from './components/InvoiceSuperOptimizedWrapper';\n\n// Minimal skeleton component for instant loading\nfunction SuperOptimizedSkeleton() {\n    return (\n        <div className=\"container mx-auto px-4 py-8\">\n            <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n                <div className=\"grid grid-cols-4 gap-4 mb-6\">\n                    {[1,2,3,4].map(i => (\n                        <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n                    ))}\n                </div>\n                <div className=\"h-96 bg-gray-200 rounded\"></div>\n            </div>\n        </div>\n    );\n}\n\n// Optimized interface with minimal fields\ninterface OptimizedInvoice {\n    id: string;\n    invoiceNumber: string;\n    customerId: number | null;\n    customerName: string;\n    total: number;\n    status: string;\n    paymentMethod: string | null;\n    createdAt: string;\n    dueDate: string | null;\n    shopName: string | null;\n    itemCount: number;\n    totalPaid: number;\n}\n\ninterface OptimizedStatistics {\n    totalOutstanding: number;\n    paidThisMonth: number;\n    overdueCount: number;\n    totalInvoices: number;\n}\n\nconst ITEMS_PER_PAGE = 20; // Increased for better UX\nconst CACHE_TTL = 300; // 5 minutes cache\n\n// Ultra-optimized query with minimal data fetching\nconst fetchOptimizedInvoicesData = unstable_cache(\n    async ({\n        page = 1,\n        status,\n        paymentMethod,\n        searchQuery,\n        sortBy = 'newest',\n        shopId\n    }: {\n        page?: number;\n        status?: string;\n        paymentMethod?: string;\n        searchQuery?: string;\n        sortBy?: string;\n        shopId?: string;\n    }) => {\n        const skip = (page - 1) * ITEMS_PER_PAGE;\n\n        // Build minimal where clause\n        const whereClause: Prisma.InvoiceWhereInput = {};\n        \n        if (status && status !== 'all') whereClause.status = status;\n        if (paymentMethod && paymentMethod !== 'all') whereClause.paymentMethod = paymentMethod;\n        if (shopId && shopId !== 'all') whereClause.shopId = shopId;\n        \n        if (searchQuery) {\n            whereClause.OR = [\n                { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n            ];\n        }\n\n        // Optimized order by\n        let orderBy: Prisma.InvoiceOrderByWithRelationInput = { createdAt: 'desc' };\n        switch (sortBy) {\n            case 'oldest': orderBy = { createdAt: 'asc' }; break;\n            case 'amount-high': orderBy = { total: 'desc' }; break;\n            case 'amount-low': orderBy = { total: 'asc' }; break;\n            case 'customer': orderBy = { customer: { name: 'asc' } }; break;\n        }\n\n        try {\n            // Single optimized query with minimal joins\n            const [invoicesRaw, totalCount, stats] = await Promise.all([\n                // Main query - only essential fields\n                prisma.invoice.findMany({\n                    where: whereClause,\n                    select: {\n                        id: true,\n                        invoiceNumber: true,\n                        customerId: true,\n                        total: true,\n                        status: true,\n                        paymentMethod: true,\n                        createdAt: true,\n                        dueDate: true,\n                        customer: {\n                            select: { name: true }\n                        },\n                        shop: {\n                            select: { name: true }\n                        },\n                        _count: {\n                            select: { items: true }\n                        },\n                        // Use aggregated payments for total paid\n                        payments: {\n                            select: { amount: true },\n                            where: { receipt: { isNot: null } }\n                        }\n                    },\n                    orderBy,\n                    skip,\n                    take: ITEMS_PER_PAGE,\n                }),\n\n                // Count query\n                prisma.invoice.count({ where: whereClause }),\n\n                // Simplified stats in one query using aggregations\n                prisma.$transaction([\n                    // Outstanding\n                    prisma.invoice.aggregate({\n                        _sum: { total: true },\n                        where: { ...whereClause, status: { notIn: ['paid', 'cancelled', 'void'] } }\n                    }),\n                    // Paid this month\n                    prisma.invoice.aggregate({\n                        _sum: { total: true },\n                        where: {\n                            ...whereClause,\n                            status: 'paid',\n                            updatedAt: { gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1) }\n                        }\n                    }),\n                    // Overdue count\n                    prisma.invoice.count({\n                        where: { ...whereClause, status: 'overdue' }\n                    })\n                ])\n            ]);\n\n            // Transform data efficiently\n            const invoices: OptimizedInvoice[] = invoicesRaw.map(inv => ({\n                id: inv.id.toString(),\n                invoiceNumber: inv.invoiceNumber,\n                customerId: inv.customerId,\n                customerName: inv.customer?.name || 'Unknown',\n                total: inv.total,\n                status: inv.status,\n                paymentMethod: inv.paymentMethod,\n                createdAt: inv.createdAt.toISOString(),\n                dueDate: inv.dueDate?.toISOString() || null,\n                shopName: inv.shop?.name || null,\n                itemCount: inv._count.items,\n                totalPaid: inv.payments?.reduce((sum, p) => sum + p.amount, 0) || 0\n            }));\n\n            const statistics: OptimizedStatistics = {\n                totalOutstanding: stats[0]._sum.total || 0,\n                paidThisMonth: stats[1]._sum.total || 0,\n                overdueCount: stats[2],\n                totalInvoices: totalCount\n            };\n\n            return {\n                invoices,\n                totalPages: Math.ceil(totalCount / ITEMS_PER_PAGE),\n                currentPage: page,\n                statistics,\n                error: null\n            };\n\n        } catch (error) {\n            console.error('Error fetching optimized invoices:', error);\n            return {\n                invoices: [],\n                totalPages: 0,\n                currentPage: 1,\n                statistics: { totalOutstanding: 0, paidThisMonth: 0, overdueCount: 0, totalInvoices: 0 },\n                error: 'Failed to fetch invoices'\n            };\n        }\n    },\n    ['super-optimized-invoices'],\n    { \n        revalidate: CACHE_TTL,\n        tags: ['invoices', 'super-optimized']\n    }\n);\n\n// Main page component\nexport default async function SuperOptimizedInvoicesPage({\n    searchParams,\n}: {\n    searchParams: Promise<{ \n        page?: string;\n        status?: string;\n        paymentMethod?: string;\n        search?: string;\n        sortBy?: string;\n        shopId?: string;\n    }>;\n}) {\n    const params = await searchParams;\n    \n    // Get data with cache\n    const data = await fetchOptimizedInvoicesData({\n        page: parseInt(params.page || '1', 10),\n        status: params.status,\n        paymentMethod: params.paymentMethod,\n        searchQuery: params.search,\n        sortBy: params.sortBy,\n        shopId: params.shopId\n    });\n\n    return (\n        <MainLayout>\n            <Suspense fallback={<SuperOptimizedSkeleton />}>\n                <InvoiceSuperOptimizedWrapper\n                    initialData={data}\n                    searchParams={params}\n                />\n            </Suspense>\n        </MainLayout>\n    );\n}\n\n// Force static optimization where possible\nexport const dynamic = 'force-dynamic';\nexport const revalidate = CACHE_TTL; "],"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","ignoreList":[]}