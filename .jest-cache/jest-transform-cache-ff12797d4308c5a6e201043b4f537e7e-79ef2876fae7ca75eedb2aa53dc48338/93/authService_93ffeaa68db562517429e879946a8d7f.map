{"version":3,"names":["authenticateUser","cov_y22h5fuwr","f","s","generateToken","getUserFromDecodedPayload","getUserFromToken","hasPermission","parseTimeStringToSeconds","verifyToken","JWT_SECRET","b","process","env","JWT_EXPIRES_IN","JWT_ACCESS_TOKEN_EXPIRES_IN","timeStr","lastChar","slice","num","parseInt","isNaN","email","password","console","time","user","_prisma","default","findFirst","where","isActive","include","role","permissions","select","name","timeEnd","success","message","isPasswordValid","_bcryptjs","compare","map","p","Array","isArray","includes","validPermissionIds","id","toString","filter","length","permissionRecords","permission","findMany","in","token","sub","username","roleId","shopId","userSession","fullName","roleName","cacheKey","_cache","cacheService","generateKey","CACHE_CONFIG","KEYS","USER_SESSION","userId","set","TTL","error","payload","_jsonwebtoken","sign","expiresIn","tokenKey","TOKEN_VALIDATION","substring","cachedResult","get","verify","TokenExpiredError","expiredAt","JsonWebTokenError","tokenPayload","checkPermission","Promise","resolve","then","_interop_require_wildcard","require","permissionsCacheKey","USER_PERMISSIONS","cachedPermissions","log","cachedUser","userWithPermissions"],"sources":["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index\n        const user = await prisma.user.findFirst({\n            where: {\n                email: email,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from role (handle case where user has no role)\n        let permissions: string[] = [];\n        if (user.role?.permissions) {\n            permissions = user.role.permissions.map(p => p.name);\n        } else if (user.permissions && Array.isArray(user.permissions)) {\n            // Handle special case for \"ALL\" permissions\n            if (user.permissions.includes('ALL')) {\n                permissions = ['ALL'];\n            } else {\n                // Convert permission IDs to names, filtering out invalid values\n                const validPermissionIds = user.permissions\n                    .map(id => parseInt(id.toString()))\n                    .filter(id => !isNaN(id));\n                \n                if (validPermissionIds.length > 0) {\n                    const permissionRecords = await prisma.permission.findMany({\n                        where: {\n                            id: {\n                                in: validPermissionIds\n                            }\n                        },\n                        select: { name: true }\n                    });\n                    permissions = permissionRecords.map(p => p.name);\n                }\n            }\n        }\n\n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            shopId: user.shopId,\n            permissions\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            shopId: user.shopId,\n            permissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n\n    try {\n        // Check cache first for token validation result\n        const cachedResult = await cacheService.get(tokenKey);\n        if (cachedResult) {\n            return cachedResult as TokenPayload;\n        }\n\n        // Verify token\n        const payload = jwt.verify(token, JWT_SECRET) as TokenPayload;\n\n        // Cache the valid token payload (shorter TTL for security)\n        await cacheService.set(tokenKey, payload, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n\n        return payload;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Import the proper permission checking utility\n    const { hasPermission: checkPermission } = await import('@/lib/utils/permissions');\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await prisma.user.findFirst({\n            where: { id: tokenPayload.sub, isActive: true },\n            include: {\n                role: {\n                    include: {\n                        permissions: { select: { name: true } }\n                    }\n                }\n            }\n        });\n\n        if (user) {\n            const permissions = user.role.permissions.map(p => p.name);\n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        return null;\n    }\n\n    const userId = payload.sub;\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await prisma.user.findFirst({\n            where: {\n                id: userId,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role.name,\n            permissions: user.role.permissions.map(p => p.name)\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],"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","ignoreList":[]}