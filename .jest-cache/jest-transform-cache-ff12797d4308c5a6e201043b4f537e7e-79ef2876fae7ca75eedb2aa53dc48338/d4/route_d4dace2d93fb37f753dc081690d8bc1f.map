{"version":3,"names":["cov_1y4rqwyddw","actualCoverage","s","DELETE","req","params","f","b","id","_server","NextResponse","json","success","message","status","shopId","parseInt","isNaN","shop","_prisma","prisma","findUnique","where","include","inventoryItems","inventoryCount","length","inventoryItem","deleteMany","auditLog","create","data","action","entity","entityId","details","JSON","stringify","shopName","name","reason","auditError","console","error","deletedCount","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/shop/[id]/delete/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\n// DELETE: Remove all inventory items for a shop\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Get the shop ID safely\n        if (!params || !params.id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Shop ID is required',\n            }, { status: 400 });\n        }\n\n        const shopId = parseInt(params.id);\n\n        if (isNaN(shopId)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid shop ID',\n            }, { status: 400 });\n        }\n\n        // Check if shop exists\n        const shop = await prisma.shop.findUnique({\n            where: { id: shopId },\n            include: {\n                inventoryItems: true\n            }\n        });\n\n        if (!shop) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`,\n            }, { status: 404 });\n        }\n\n        // Get the count of inventory items\n        const inventoryCount = shop.inventoryItems.length;\n\n        // Delete all inventory items for this shop\n        await prisma.inventoryItem.deleteMany({\n            where: { shopId }\n        });\n\n        // Create audit log entry\n        try {\n            await prisma.auditLog.create({\n                data: {\n                    action: 'DELETE_ALL_INVENTORY',\n                    entity: 'Shop',\n                    entityId: shopId,\n                    details: JSON.stringify({\n                        shopId,\n                        shopName: shop.name,\n                        inventoryCount,\n                        reason: 'Shop deletion preparation'\n                    })\n                }\n            });\n        } catch (auditError) {\n            // Log error but don't fail the request\n            console.error('Error creating audit log:', auditError);\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: `Successfully deleted ${inventoryCount} inventory items for shop \"${shop.name}\"`,\n            data: {\n                deletedCount: inventoryCount,\n                shopId,\n                shopName: shop.name\n            }\n        });\n    } catch (error) {\n        // Log the error\n        console.error(`Error deleting shop inventory (shop_id ${params?.id}):`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to delete shop inventory',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],"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","ignoreList":[]}