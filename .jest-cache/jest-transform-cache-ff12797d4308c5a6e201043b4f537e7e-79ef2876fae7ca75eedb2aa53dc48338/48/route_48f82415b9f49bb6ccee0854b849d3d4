3354c290ec6b0384449f8d68b3efeca9
"use strict";

/* istanbul ignore next */
function cov_22e3dojtpp() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts";
  var hash = "6fe8da23a245bd9eb3f5b0867b09e058fee811b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 89
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "8": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 37
        }
      },
      "9": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "11": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "12": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "15": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 40
        }
      },
      "16": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 77
        }
      },
      "17": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 56
        }
      },
      "18": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 70
        }
      },
      "19": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 18
          }
        }, {
          start: {
            line: 23,
            column: 22
          },
          end: {
            line: 23,
            column: 31
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Try to find the user directly from the database\n        const user = await prisma.user.findFirst({\n            where: {\n                email: email,\n                isActive: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found',\n                email\n            });\n        }\n\n        // Get stored password hash\n        const storedHash = user.password;\n\n        // Test with the provided password\n        const isMatch = await bcrypt.compare(password, storedHash);\n\n        // Hash a new password for comparison\n        const salt = await bcrypt.genSalt(10);\n        const newHash = await bcrypt.hash('password', salt);\n\n        return NextResponse.json({\n            success: true,\n            userFound: true,\n            passwordMatch: isMatch,\n            userInfo: {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                storedPasswordHash: storedHash,\n                newGeneratedHash: newHash,\n                passwordCompareResult: isMatch\n            }\n        });\n    } catch (error) {\n        console.error('Verify login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Verification failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["POST", "req", "body", "json", "email", "password", "NextResponse", "success", "message", "status", "user", "prisma", "findFirst", "where", "isActive", "storedHash", "isMatch", "bcrypt", "compare", "salt", "genSalt", "newHash", "hash", "userFound", "passwordMatch", "userInfo", "id", "name", "storedPasswordHash", "newGeneratedHash", "passwordCompareResult", "error", "console"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;iEACvB;+DACA;;;;;;AAEZ,eAAeA,KAAKC,GAAgB;IACvC,IAAI;QACA,MAAMC,OAAO,MAAMD,IAAIE,IAAI;QAC3B,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAE5B,IAAI,CAACE,SAAS,CAACC,UAAU;YACrB,OAAOC,oBAAY,CAACH,IAAI,CACpB;gBAAEI,SAAS;gBAAOC,SAAS;YAAkC,GAC7D;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,kDAAkD;QAClD,MAAMC,OAAO,MAAMC,eAAM,CAACD,IAAI,CAACE,SAAS,CAAC;YACrCC,OAAO;gBACHT,OAAOA;gBACPU,UAAU;YACd;QACJ;QAEA,IAAI,CAACJ,MAAM;YACP,OAAOJ,oBAAY,CAACH,IAAI,CAAC;gBACrBI,SAAS;gBACTC,SAAS;gBACTJ;YACJ;QACJ;QAEA,2BAA2B;QAC3B,MAAMW,aAAaL,KAAKL,QAAQ;QAEhC,kCAAkC;QAClC,MAAMW,UAAU,MAAMC,iBAAM,CAACC,OAAO,CAACb,UAAUU;QAE/C,qCAAqC;QACrC,MAAMI,OAAO,MAAMF,iBAAM,CAACG,OAAO,CAAC;QAClC,MAAMC,UAAU,MAAMJ,iBAAM,CAACK,IAAI,CAAC,YAAYH;QAE9C,OAAOb,oBAAY,CAACH,IAAI,CAAC;YACrBI,SAAS;YACTgB,WAAW;YACXC,eAAeR;YACfS,UAAU;gBACNC,IAAIhB,KAAKgB,EAAE;gBACXC,MAAMjB,KAAKiB,IAAI;gBACfvB,OAAOM,KAAKN,KAAK;gBACjBwB,oBAAoBb;gBACpBc,kBAAkBR;gBAClBS,uBAAuBd;YAC3B;QACJ;IACJ,EAAE,OAAOe,OAAO;QACZC,QAAQD,KAAK,CAAC,uBAAuBA;QACrC,OAAOzB,oBAAY,CAACH,IAAI,CACpB;YAAEI,SAAS;YAAOC,SAAS;YAAuBuB,OAAO,AAACA,MAAgBvB,OAAO;QAAC,GAClF;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6fe8da23a245bd9eb3f5b0867b09e058fee811b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22e3dojtpp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22e3dojtpp();
cov_22e3dojtpp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22e3dojtpp().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_22e3dojtpp().f[0]++;
    cov_22e3dojtpp().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_22e3dojtpp().s[3]++, require("next/server"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[4]++, _interop_require_default(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[5]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[1]++;
  cov_22e3dojtpp().s[6]++;
  return /* istanbul ignore next */(cov_22e3dojtpp().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[2]++;
  cov_22e3dojtpp().s[7]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[8]++, await req.json());
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[9]++, body);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[10]++;
    if (
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[3][0]++, !email) ||
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[3][1]++, !password)) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[2][0]++;
      cov_22e3dojtpp().s[11]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email and password are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[2][1]++;
    }
    // Try to find the user directly from the database
    const user =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[12]++, await _prisma.default.user.findFirst({
      where: {
        email: email,
        isActive: true
      }
    }));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[4][0]++;
      cov_22e3dojtpp().s[14]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found",
        email
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[4][1]++;
    }
    // Get stored password hash
    const storedHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[15]++, user.password);
    // Test with the provided password
    const isMatch =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[16]++, await _bcryptjs.default.compare(password, storedHash));
    // Hash a new password for comparison
    const salt =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[17]++, await _bcryptjs.default.genSalt(10));
    const newHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[18]++, await _bcryptjs.default.hash("password", salt));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[19]++;
    return _server.NextResponse.json({
      success: true,
      userFound: true,
      passwordMatch: isMatch,
      userInfo: {
        id: user.id,
        name: user.name,
        email: user.email,
        storedPasswordHash: storedHash,
        newGeneratedHash: newHash,
        passwordCompareResult: isMatch
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[20]++;
    console.error("Verify login error:", error);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[21]++;
    return _server.NextResponse.json({
      success: false,
      message: "Verification failed",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwicmVxIiwiY292XzIyZTNkb2p0cHAiLCJmIiwicyIsImJvZHkiLCJqc29uIiwiZW1haWwiLCJwYXNzd29yZCIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJ1c2VyIiwiX3ByaXNtYSIsImRlZmF1bHQiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImlzQWN0aXZlIiwic3RvcmVkSGFzaCIsImlzTWF0Y2giLCJfYmNyeXB0anMiLCJjb21wYXJlIiwic2FsdCIsImdlblNhbHQiLCJuZXdIYXNoIiwiaGFzaCIsInVzZXJGb3VuZCIsInBhc3N3b3JkTWF0Y2giLCJ1c2VySW5mbyIsImlkIiwibmFtZSIsInN0b3JlZFBhc3N3b3JkSGFzaCIsIm5ld0dlbmVyYXRlZEhhc2giLCJwYXNzd29yZENvbXBhcmVSZXN1bHQiLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL2F1dGgvdmVyaWZ5LWxvZ2luL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcbmltcG9ydCBwcmlzbWEgZnJvbSAnQC9saWIvcHJpc21hJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxOiBOZXh0UmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpO1xuICAgICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gYm9keTtcblxuICAgICAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgICAgIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdFbWFpbCBhbmQgcGFzc3dvcmQgYXJlIHJlcXVpcmVkJyB9LFxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSB1c2VyIGRpcmVjdGx5IGZyb20gdGhlIGRhdGFiYXNlXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kRmlyc3Qoe1xuICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgICAgICAgICAgICAgZW1haWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHN0b3JlZCBwYXNzd29yZCBoYXNoXG4gICAgICAgIGNvbnN0IHN0b3JlZEhhc2ggPSB1c2VyLnBhc3N3b3JkO1xuXG4gICAgICAgIC8vIFRlc3Qgd2l0aCB0aGUgcHJvdmlkZWQgcGFzc3dvcmRcbiAgICAgICAgY29uc3QgaXNNYXRjaCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCBzdG9yZWRIYXNoKTtcblxuICAgICAgICAvLyBIYXNoIGEgbmV3IHBhc3N3b3JkIGZvciBjb21wYXJpc29uXG4gICAgICAgIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMCk7XG4gICAgICAgIGNvbnN0IG5ld0hhc2ggPSBhd2FpdCBiY3J5cHQuaGFzaCgncGFzc3dvcmQnLCBzYWx0KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIHVzZXJGb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3N3b3JkTWF0Y2g6IGlzTWF0Y2gsXG4gICAgICAgICAgICB1c2VySW5mbzoge1xuICAgICAgICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgICBzdG9yZWRQYXNzd29yZEhhc2g6IHN0b3JlZEhhc2gsXG4gICAgICAgICAgICAgICAgbmV3R2VuZXJhdGVkSGFzaDogbmV3SGFzaCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZENvbXBhcmVSZXN1bHQ6IGlzTWF0Y2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVmVyaWZ5IGxvZ2luIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1ZlcmlmaWNhdGlvbiBmYWlsZWQnLCBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIH0sXG4gICAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgKTtcbiAgICB9XG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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