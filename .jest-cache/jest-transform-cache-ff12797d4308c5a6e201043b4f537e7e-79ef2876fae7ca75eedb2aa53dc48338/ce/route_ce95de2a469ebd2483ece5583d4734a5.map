{"version":3,"names":["POST","cov_9galnbarb","s","executeWithRetry","operation","maxRetries","b","f","attempt","error","code","console","log","Promise","resolve","setTimeout","Math","pow","Error","JWT_SECRET","process","env","JWT_ACCESS_TOKEN_EXPIRES_IN","COOKIE_SECURE","NODE_ENV","req","cookieRefreshToken","cookies","get","value","tokenFromBody","body","json","refreshToken","e","tokenToVerify","hasCookieToken","hasTokenFromBody","_server","NextResponse","success","message","status","userId","_refreshTokenService","verifyRefreshToken","substring","user","_prisma","default","findFirst","where","id","String","isActive","include","role","permissions","map","p","name","length","newAccessToken","_jsonwebtoken","sign","sub","username","email","roleId","shopId","expiresIn","response","accessToken","fullName","roleName","set","httpOnly","secure","sameSite","maxAge","_authService","parseTimeStringToSeconds","path"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as jwt from 'jsonwebtoken';\nimport { verifyRefreshToken, generateRefreshToken } from '@/services/refreshTokenService';\nimport { generateToken, parseTimeStringToSeconds } from '@/services/authService';\nimport prisma from '@/lib/prisma';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token with retry logic\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: true\n                        }\n                    }\n                }\n            })\n        );\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        // Handle case where user has no role assigned but may have direct permissions\n        let permissions: string[] = [];\n        \n        if (user.role) {\n            // User has a role, get permissions from role\n            permissions = user.role.permissions.map((p: { name: string }) => p.name);\n        } else if (user.permissions && user.permissions.length > 0) {\n            // User has no role but has direct permissions\n            permissions = user.permissions;\n            console.log('User has no role but has direct permissions for ID:', userId, 'Permissions:', permissions);\n        } else {\n            // User has neither role nor permissions\n            console.log('User has no role and no permissions assigned for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User has no role or permissions assigned'\n            }, { status: 401 });\n        }\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN } as any);\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || null,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}