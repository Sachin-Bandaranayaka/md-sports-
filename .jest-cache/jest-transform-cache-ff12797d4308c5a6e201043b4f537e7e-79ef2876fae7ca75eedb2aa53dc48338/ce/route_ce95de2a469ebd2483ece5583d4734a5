5b6b05b6dbe5e26cc36ca14e990998bf
"use strict";

/* istanbul ignore next */
function cov_9galnbarb() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts";
  var hash = "3d7eca1887fa0a713dcb28f42658e4fcb1d35489";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 86
        }
      },
      "5": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 80
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 64
        }
      },
      "7": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 15,
          column: 89
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "10": {
        start: {
          line: 22,
          column: 39
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "11": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "12": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "13": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "15": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "17": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "18": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "19": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 30
        }
      },
      "22": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "23": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 88
        }
      },
      "24": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "25": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "26": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 95
        }
      },
      "27": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "28": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 57
        }
      },
      "29": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 39
        }
      },
      "30": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "31": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "32": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 31
        }
      },
      "33": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 18
        }
      },
      "34": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 81,
          column: 1
        }
      },
      "35": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "36": {
        start: {
          line: 65,
          column: 22
        },
        end: {
          line: 65,
          column: 23
        }
      },
      "37": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "38": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "39": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "40": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 116
        }
      },
      "41": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 94
        }
      },
      "42": {
        start: {
          line: 73,
          column: 45
        },
        end: {
          line: 73,
          column: 92
        }
      },
      "43": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 25
        }
      },
      "44": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "45": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 44
        }
      },
      "46": {
        start: {
          line: 83,
          column: 19
        },
        end: {
          line: 83,
          column: 72
        }
      },
      "47": {
        start: {
          line: 84,
          column: 36
        },
        end: {
          line: 84,
          column: 84
        }
      },
      "48": {
        start: {
          line: 85,
          column: 22
        },
        end: {
          line: 85,
          column: 59
        }
      },
      "49": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 227,
          column: 5
        }
      },
      "50": {
        start: {
          line: 89,
          column: 35
        },
        end: {
          line: 89,
          column: 73
        }
      },
      "51": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 90,
          column: 32
        }
      },
      "52": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "53": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "54": {
        start: {
          line: 94,
          column: 29
        },
        end: {
          line: 94,
          column: 45
        }
      },
      "55": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 51
        }
      },
      "56": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 105
        }
      },
      "57": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 65
        }
      },
      "58": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "59": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "60": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 71
        }
      },
      "61": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "62": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "63": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 87
        }
      },
      "64": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 77
        }
      },
      "65": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "66": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "67": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 123
        }
      },
      "68": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "69": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 64
        }
      },
      "70": {
        start: {
          line: 140,
          column: 21
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "71": {
        start: {
          line: 140,
          column: 48
        },
        end: {
          line: 152,
          column: 14
        }
      },
      "72": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "73": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 70
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "75": {
        start: {
          line: 163,
          column: 26
        },
        end: {
          line: 163,
          column: 28
        }
      },
      "76": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "77": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 65
        }
      },
      "78": {
        start: {
          line: 166,
          column: 57
        },
        end: {
          line: 166,
          column: 63
        }
      },
      "79": {
        start: {
          line: 167,
          column: 15
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "80": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 43
        }
      },
      "81": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 116
        }
      },
      "82": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 88
        }
      },
      "83": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "84": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 190,
          column: 10
        }
      },
      "85": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 69
        }
      },
      "86": {
        start: {
          line: 192,
          column: 25
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "87": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "88": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 24
        }
      },
      "89": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 53
        }
      },
      "90": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 25,
            column: 40
          }
        },
        loc: {
          start: {
            line: 25,
            column: 61
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 53
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 30
          }
        },
        loc: {
          start: {
            line: 64,
            column: 64
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 73,
            column: 34
          },
          end: {
            line: 73,
            column: 35
          }
        },
        loc: {
          start: {
            line: 73,
            column: 45
          },
          end: {
            line: 73,
            column: 92
          }
        },
        line: 73
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 86,
            column: 15
          },
          end: {
            line: 86,
            column: 19
          }
        },
        loc: {
          start: {
            line: 86,
            column: 25
          },
          end: {
            line: 228,
            column: 1
          }
        },
        line: 86
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 140,
            column: 45
          }
        },
        loc: {
          start: {
            line: 140,
            column: 48
          },
          end: {
            line: 152,
            column: 14
          }
        },
        line: 140
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 166,
            column: 52
          },
          end: {
            line: 166,
            column: 53
          }
        },
        loc: {
          start: {
            line: 166,
            column: 57
          },
          end: {
            line: 166,
            column: 63
          }
        },
        line: 166
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 26,
            column: 45
          }
        }, {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 65
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 27
          }
        }, {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 30,
            column: 45
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "7": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 20
          }
        }, {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 47
          }
        }, {
          start: {
            line: 33,
            column: 51
          },
          end: {
            line: 33,
            column: 76
          }
        }],
        line: 33
      },
      "8": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "9": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 39,
            column: 31
          }
        }],
        line: 39
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 53
          }
        }, {
          start: {
            line: 45,
            column: 57
          },
          end: {
            line: 45,
            column: 88
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "12": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 29
          }
        }, {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 79
          }
        }],
        line: 47
      },
      "13": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 47
          },
          end: {
            line: 48,
            column: 88
          }
        }, {
          start: {
            line: 48,
            column: 91
          },
          end: {
            line: 48,
            column: 95
          }
        }],
        line: 48
      },
      "14": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: 51,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        }],
        line: 49
      },
      "15": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 20
          }
        }, {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 33
          }
        }, {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 45
          }
        }],
        line: 49
      },
      "16": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "17": {
        loc: {
          start: {
            line: 64,
            column: 47
          },
          end: {
            line: 64,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 60
          },
          end: {
            line: 64,
            column: 61
          }
        }],
        line: 64
      },
      "18": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "19": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 39
          }
        }, {
          start: {
            line: 70,
            column: 43
          },
          end: {
            line: 70,
            column: 63
          }
        }],
        line: 70
      },
      "20": {
        loc: {
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 83,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 83,
            column: 41
          }
        }, {
          start: {
            line: 83,
            column: 45
          },
          end: {
            line: 83,
            column: 72
          }
        }],
        line: 83
      },
      "21": {
        loc: {
          start: {
            line: 84,
            column: 36
          },
          end: {
            line: 84,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 36
          },
          end: {
            line: 84,
            column: 75
          }
        }, {
          start: {
            line: 84,
            column: 79
          },
          end: {
            line: 84,
            column: 84
          }
        }],
        line: 84
      },
      "22": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "23": {
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 48
          }
        }, {
          start: {
            line: 101,
            column: 52
          },
          end: {
            line: 101,
            column: 65
          }
        }],
        line: 101
      },
      "24": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "25": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "26": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "27": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 180,
            column: 9
          }
        }],
        line: 164
      },
      "28": {
        loc: {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: 171,
            column: 15
          },
          end: {
            line: 180,
            column: 9
          }
        }],
        line: 167
      },
      "29": {
        loc: {
          start: {
            line: 167,
            column: 19
          },
          end: {
            line: 167,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 19
          },
          end: {
            line: 167,
            column: 35
          }
        }, {
          start: {
            line: 167,
            column: 39
          },
          end: {
            line: 167,
            column: 66
          }
        }],
        line: 167
      },
      "30": {
        loc: {
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 41
          }
        }, {
          start: {
            line: 201,
            column: 45
          },
          end: {
            line: 201,
            column: 49
          }
        }],
        line: 201
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as jwt from 'jsonwebtoken';\nimport { verifyRefreshToken, generateRefreshToken } from '@/services/refreshTokenService';\nimport { generateToken, parseTimeStringToSeconds } from '@/services/authService';\nimport prisma from '@/lib/prisma';\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if this is a prepared statement conflict error\n            if (error?.code === '42P05' && attempt < maxRetries) {\n                console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);\n                // Exponential backoff: wait longer between retries\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 100));\n                continue;\n            }\n            // If it's not a retryable error or we've exhausted retries, throw the error\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token with retry logic\n        const user = await executeWithRetry(() =>\n            prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: true\n                        }\n                    }\n                }\n            })\n        );\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        // Handle case where user has no role assigned but may have direct permissions\n        let permissions: string[] = [];\n        \n        if (user.role) {\n            // User has a role, get permissions from role\n            permissions = user.role.permissions.map((p: { name: string }) => p.name);\n        } else if (user.permissions && user.permissions.length > 0) {\n            // User has no role but has direct permissions\n            permissions = user.permissions;\n            console.log('User has no role but has direct permissions for ID:', userId, 'Permissions:', permissions);\n        } else {\n            // User has neither role nor permissions\n            console.log('User has no role and no permissions assigned for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User has no role or permissions assigned'\n            }, { status: 401 });\n        }\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN } as any);\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || null,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n}"],
      names: ["POST", "executeWithRetry", "operation", "maxRetries", "attempt", "error", "code", "console", "log", "Promise", "resolve", "setTimeout", "Math", "pow", "Error", "JWT_SECRET", "process", "env", "JWT_ACCESS_TOKEN_EXPIRES_IN", "COOKIE_SECURE", "NODE_ENV", "req", "cookieRefreshToken", "cookies", "get", "value", "tokenFromBody", "body", "json", "refreshToken", "e", "tokenToVerify", "hasCookieToken", "hasTokenFromBody", "NextResponse", "success", "message", "status", "userId", "verifyRefreshToken", "substring", "user", "prisma", "findFirst", "where", "id", "String", "isActive", "include", "role", "permissions", "map", "p", "name", "length", "newAccessToken", "jwt", "sign", "sub", "username", "email", "roleId", "shopId", "expiresIn", "response", "accessToken", "fullName", "roleName", "set", "httpOnly", "secure", "sameSite", "maxAge", "parseTimeStringToSeconds", "path"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3d7eca1887fa0a713dcb28f42658e4fcb1d35489"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9galnbarb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9galnbarb();
cov_9galnbarb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9galnbarb().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9galnbarb().f[0]++;
    cov_9galnbarb().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_9galnbarb().s[3]++, require("next/server"));
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[4]++, _interop_require_wildcard(require("jsonwebtoken")));
const _refreshTokenService =
/* istanbul ignore next */
(cov_9galnbarb().s[5]++, require("../../../../services/refreshTokenService"));
const _authService =
/* istanbul ignore next */
(cov_9galnbarb().s[6]++, require("../../../../services/authService"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[7]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_9galnbarb().f[1]++;
  cov_9galnbarb().s[8]++;
  return /* istanbul ignore next */(cov_9galnbarb().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_9galnbarb().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_9galnbarb().b[0][1]++, {
    default: obj
  });
}
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_9galnbarb().f[2]++;
  cov_9galnbarb().s[9]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_9galnbarb().b[2][0]++;
    cov_9galnbarb().s[10]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[2][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_9galnbarb().s[11]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_9galnbarb().s[12]++, new WeakMap());
  /* istanbul ignore next */
  cov_9galnbarb().s[13]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_9galnbarb().f[3]++;
    cov_9galnbarb().s[14]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_9galnbarb().b[3][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_9galnbarb().b[3][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_9galnbarb().f[4]++;
  cov_9galnbarb().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][1]++, obj) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[5][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_9galnbarb().b[4][0]++;
    cov_9galnbarb().s[16]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[4][1]++;
  }
  cov_9galnbarb().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[7][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_9galnbarb().b[7][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[7][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_9galnbarb().b[6][0]++;
    cov_9galnbarb().s[18]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[6][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_9galnbarb().s[19]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_9galnbarb().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_9galnbarb().b[9][0]++, cache) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[9][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_9galnbarb().b[8][0]++;
    cov_9galnbarb().s[21]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[8][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_9galnbarb().s[22]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_9galnbarb().s[23]++,
  /* istanbul ignore next */
  (cov_9galnbarb().b[10][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[10][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_9galnbarb().s[24]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_9galnbarb().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_9galnbarb().b[12][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_9galnbarb().b[12][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_9galnbarb().b[11][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_9galnbarb().s[26]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_9galnbarb().b[13][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_9galnbarb().b[13][1]++, null));
      /* istanbul ignore next */
      cov_9galnbarb().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_9galnbarb().b[15][0]++, desc) && (
      /* istanbul ignore next */
      (cov_9galnbarb().b[15][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_9galnbarb().b[15][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_9galnbarb().b[14][0]++;
        cov_9galnbarb().s[28]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_9galnbarb().b[14][1]++;
        cov_9galnbarb().s[29]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[11][1]++;
    }
  }
  /* istanbul ignore next */
  cov_9galnbarb().s[30]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_9galnbarb().s[31]++;
  if (cache) {
    /* istanbul ignore next */
    cov_9galnbarb().b[16][0]++;
    cov_9galnbarb().s[32]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_9galnbarb().b[16][1]++;
  }
  cov_9galnbarb().s[33]++;
  return newObj;
}
/**
 * Helper function to execute Prisma queries with retry logic for prepared statement conflicts
 */
/* istanbul ignore next */
cov_9galnbarb().s[34]++;
const executeWithRetry = async (operation, maxRetries =
/* istanbul ignore next */
(cov_9galnbarb().b[17][0]++, 3)) => {
  /* istanbul ignore next */
  cov_9galnbarb().f[5]++;
  cov_9galnbarb().s[35]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_9galnbarb().s[36]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_9galnbarb().s[37]++;
    try {
      /* istanbul ignore next */
      cov_9galnbarb().s[38]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_9galnbarb().s[39]++;
      // Check if this is a prepared statement conflict error
      if (
      /* istanbul ignore next */
      (cov_9galnbarb().b[19][0]++, error?.code === "42P05") &&
      /* istanbul ignore next */
      (cov_9galnbarb().b[19][1]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_9galnbarb().b[18][0]++;
        cov_9galnbarb().s[40]++;
        console.log(`Prepared statement conflict detected, retrying... (attempt ${attempt}/${maxRetries})`);
        // Exponential backoff: wait longer between retries
        /* istanbul ignore next */
        cov_9galnbarb().s[41]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_9galnbarb().f[6]++;
          cov_9galnbarb().s[42]++;
          return setTimeout(resolve, Math.pow(2, attempt) * 100);
        });
        /* istanbul ignore next */
        cov_9galnbarb().s[43]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_9galnbarb().b[18][1]++;
      }
      // If it's not a retryable error or we've exhausted retries, throw the error
      cov_9galnbarb().s[44]++;
      throw error;
    }
  }
  /* istanbul ignore next */
  cov_9galnbarb().s[45]++;
  throw new Error("Max retries exceeded");
};
// JWT configuration
const JWT_SECRET =
/* istanbul ignore next */
(cov_9galnbarb().s[46]++,
/* istanbul ignore next */
(cov_9galnbarb().b[20][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_9galnbarb().b[20][1]++, "CHANGE_THIS_IN_PRODUCTION"));
const JWT_ACCESS_TOKEN_EXPIRES_IN =
/* istanbul ignore next */
(cov_9galnbarb().s[47]++,
/* istanbul ignore next */
(cov_9galnbarb().b[21][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_9galnbarb().b[21][1]++, "15m"));
const COOKIE_SECURE =
/* istanbul ignore next */
(cov_9galnbarb().s[48]++, process.env.NODE_ENV === "production");
async function POST(req) {
  /* istanbul ignore next */
  cov_9galnbarb().f[7]++;
  cov_9galnbarb().s[49]++;
  try {
    // Prioritize refresh token from httpOnly cookie
    const cookieRefreshToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[50]++, req.cookies.get("refreshToken")?.value);
    let tokenFromBody =
    /* istanbul ignore next */
    (cov_9galnbarb().s[51]++, null);
    // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies
    /* istanbul ignore next */
    cov_9galnbarb().s[52]++;
    if (!cookieRefreshToken) {
      /* istanbul ignore next */
      cov_9galnbarb().b[22][0]++;
      cov_9galnbarb().s[53]++;
      try {
        const body =
        /* istanbul ignore next */
        (cov_9galnbarb().s[54]++, await req.json());
        /* istanbul ignore next */
        cov_9galnbarb().s[55]++;
        tokenFromBody = body?.refreshToken;
      } catch (e) {
        /* istanbul ignore next */
        cov_9galnbarb().s[56]++;
        // Ignore error if body is empty or not valid JSON, cookie is the preferred method
        console.log("No JSON body or refreshToken field in body, relying on cookie if present.");
      }
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[22][1]++;
    }
    const tokenToVerify =
    /* istanbul ignore next */
    (cov_9galnbarb().s[57]++,
    /* istanbul ignore next */
    (cov_9galnbarb().b[23][0]++, cookieRefreshToken) ||
    /* istanbul ignore next */
    (cov_9galnbarb().b[23][1]++, tokenFromBody));
    /* istanbul ignore next */
    cov_9galnbarb().s[58]++;
    console.log("Refresh token request received", {
      hasCookieToken: !!cookieRefreshToken,
      hasTokenFromBody: !!tokenFromBody
    });
    /* istanbul ignore next */
    cov_9galnbarb().s[59]++;
    if (!tokenToVerify) {
      /* istanbul ignore next */
      cov_9galnbarb().b[24][0]++;
      cov_9galnbarb().s[60]++;
      console.log("No refresh token provided in cookie or body");
      /* istanbul ignore next */
      cov_9galnbarb().s[61]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[24][1]++;
    }
    // Verify refresh token (this comes from refreshTokenService)
    let userId;
    /* istanbul ignore next */
    cov_9galnbarb().s[62]++;
    try {
      /* istanbul ignore next */
      cov_9galnbarb().s[63]++;
      userId = await (0, _refreshTokenService.verifyRefreshToken)(tokenToVerify);
    } catch (error) {
      /* istanbul ignore next */
      cov_9galnbarb().s[64]++;
      console.error("Error during refresh token verification:", error);
      // verifyRefreshToken itself should handle logging details of the error.
      /* istanbul ignore next */
      cov_9galnbarb().s[65]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token verification failed" // Generic message
      }, {
        status: 401
      });
    }
    /* istanbul ignore next */
    cov_9galnbarb().s[66]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9galnbarb().b[25][0]++;
      cov_9galnbarb().s[67]++;
      console.log("Invalid, expired, or revoked refresh token. Token used:", tokenToVerify.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_9galnbarb().s[68]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid or expired refresh token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[25][1]++;
    }
    cov_9galnbarb().s[69]++;
    console.log("Valid refresh token for user ID:", userId);
    // Get user data to include in new token with retry logic
    const user =
    /* istanbul ignore next */
    (cov_9galnbarb().s[70]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_9galnbarb().f[8]++;
      cov_9galnbarb().s[71]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(userId),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_9galnbarb().s[72]++;
    if (!user) {
      /* istanbul ignore next */
      cov_9galnbarb().b[26][0]++;
      cov_9galnbarb().s[73]++;
      console.log("User not found or inactive for ID:", userId);
      /* istanbul ignore next */
      cov_9galnbarb().s[74]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found or inactive"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[26][1]++;
    }
    // Handle case where user has no role assigned but may have direct permissions
    let permissions =
    /* istanbul ignore next */
    (cov_9galnbarb().s[75]++, []);
    /* istanbul ignore next */
    cov_9galnbarb().s[76]++;
    if (user.role) {
      /* istanbul ignore next */
      cov_9galnbarb().b[27][0]++;
      cov_9galnbarb().s[77]++;
      // User has a role, get permissions from role
      permissions = user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_9galnbarb().f[9]++;
        cov_9galnbarb().s[78]++;
        return p.name;
      });
    } else {
      /* istanbul ignore next */
      cov_9galnbarb().b[27][1]++;
      cov_9galnbarb().s[79]++;
      if (
      /* istanbul ignore next */
      (cov_9galnbarb().b[29][0]++, user.permissions) &&
      /* istanbul ignore next */
      (cov_9galnbarb().b[29][1]++, user.permissions.length > 0)) {
        /* istanbul ignore next */
        cov_9galnbarb().b[28][0]++;
        cov_9galnbarb().s[80]++;
        // User has no role but has direct permissions
        permissions = user.permissions;
        /* istanbul ignore next */
        cov_9galnbarb().s[81]++;
        console.log("User has no role but has direct permissions for ID:", userId, "Permissions:", permissions);
      } else {
        /* istanbul ignore next */
        cov_9galnbarb().b[28][1]++;
        cov_9galnbarb().s[82]++;
        // User has neither role nor permissions
        console.log("User has no role and no permissions assigned for ID:", userId);
        /* istanbul ignore next */
        cov_9galnbarb().s[83]++;
        return _server.NextResponse.json({
          success: false,
          message: "User has no role or permissions assigned"
        }, {
          status: 401
        });
      }
    }
    const newAccessToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[84]++, _jsonwebtoken.sign({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      permissions,
      shopId: user.shopId
    }, JWT_SECRET, {
      expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN
    }));
    /* istanbul ignore next */
    cov_9galnbarb().s[85]++;
    console.log("Generated new access token for user:", user.id);
    const response =
    /* istanbul ignore next */
    (cov_9galnbarb().s[86]++, _server.NextResponse.json({
      success: true,
      accessToken: newAccessToken,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName:
        /* istanbul ignore next */
        (cov_9galnbarb().b[30][0]++, user.role?.name) ||
        /* istanbul ignore next */
        (cov_9galnbarb().b[30][1]++, null),
        shopId: user.shopId,
        permissions
      }
    }));
    // Set the new access token in an httpOnly cookie as well
    /* istanbul ignore next */
    cov_9galnbarb().s[87]++;
    response.cookies.set({
      name: "accessToken",
      value: newAccessToken,
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: (0, _authService.parseTimeStringToSeconds)(JWT_ACCESS_TOKEN_EXPIRES_IN),
      path: "/"
    });
    // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here
    // and set it in the 'refreshToken' cookie, potentially revoking the old one.
    /* istanbul ignore next */
    cov_9galnbarb().s[88]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_9galnbarb().s[89]++;
    console.error("Token refresh error:", error);
    /* istanbul ignore next */
    cov_9galnbarb().s[90]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to refresh token"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,