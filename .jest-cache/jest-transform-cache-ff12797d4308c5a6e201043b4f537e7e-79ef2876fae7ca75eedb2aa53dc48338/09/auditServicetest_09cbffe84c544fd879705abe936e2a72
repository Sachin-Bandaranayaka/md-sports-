75659589d98293c6c10425381cda8589
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _vitest = require("vitest");
const _auditService = require("../../services/auditService");
const _prisma = require("../../lib/prisma");
// Mock Prisma
_vitest.vi.mock("@/lib/prisma", ()=>({
        prisma: {
            auditLog: {
                findMany: _vitest.vi.fn(),
                count: _vitest.vi.fn(),
                create: _vitest.vi.fn(),
                findUnique: _vitest.vi.fn(),
                update: _vitest.vi.fn()
            },
            user: {
                findMany: _vitest.vi.fn()
            },
            product: {
                create: _vitest.vi.fn(),
                update: _vitest.vi.fn()
            },
            customer: {
                create: _vitest.vi.fn(),
                update: _vitest.vi.fn()
            }
        }
    }));
(0, _vitest.describe)("AuditService", ()=>{
    let auditService;
    const mockPrisma = _prisma.prisma;
    (0, _vitest.beforeEach)(()=>{
        auditService = _auditService.AuditService.getInstance();
        _vitest.vi.clearAllMocks();
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)("getRecycleBinItems", ()=>{
        const mockAuditLogItems = [
            {
                id: 1,
                entity: "product",
                entityId: 123,
                action: "DELETE",
                userId: "user1",
                createdAt: new Date("2024-01-15T10:00:00Z"),
                details: {
                    isDeleted: true,
                    canRecover: true,
                    deletedAt: "2024-01-15T10:00:00Z",
                    deletedBy: "user1",
                    originalData: {
                        name: "Test Product",
                        price: 100
                    }
                }
            },
            {
                id: 2,
                entity: "customer",
                entityId: 456,
                action: "DELETE",
                userId: "user2",
                createdAt: new Date("2024-01-16T11:00:00Z"),
                details: {
                    isDeleted: true,
                    canRecover: true,
                    deletedAt: "2024-01-16T11:00:00Z",
                    deletedBy: "user2",
                    originalData: {
                        name: "Test Customer",
                        email: "test@example.com"
                    }
                }
            }
        ];
        const mockUsers = [
            {
                id: "user1",
                name: "John Doe",
                email: "john@example.com"
            },
            {
                id: "user2",
                name: "Jane Smith",
                email: "jane@example.com"
            }
        ];
        (0, _vitest.beforeEach)(()=>{
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditLogItems);
            mockPrisma.auditLog.count.mockResolvedValue(2);
            mockPrisma.user.findMany.mockResolvedValue(mockUsers);
        });
        (0, _vitest.it)("should return all recycle bin items without filters", async ()=>{
            const result = await auditService.getRecycleBinItems();
            (0, _vitest.expect)(result.items).toHaveLength(2);
            (0, _vitest.expect)(result.total).toBe(2);
            (0, _vitest.expect)(result.items[0].entity).toBe("product");
            (0, _vitest.expect)(result.items[1].entity).toBe("customer");
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {},
                orderBy: {
                    createdAt: "desc"
                },
                take: 50,
                skip: 0
            });
        });
        (0, _vitest.it)("should filter by entity type", async ()=>{
            const result = await auditService.getRecycleBinItems("product");
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "product"
                },
                orderBy: {
                    createdAt: "desc"
                },
                take: 50,
                skip: 0
            });
        });
        (0, _vitest.it)("should filter by date range", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-15T23:59:59Z";
            await auditService.getRecycleBinItems(undefined, 50, 0, dateFrom, dateTo);
            const expectedEndDate = new Date(dateTo);
            expectedEndDate.setDate(expectedEndDate.getDate() + 1);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    createdAt: {
                        gte: new Date(dateFrom),
                        lt: expectedEndDate
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                take: 50,
                skip: 0
            });
        });
        (0, _vitest.it)("should filter by entity and date range combined", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-16T23:59:59Z";
            await auditService.getRecycleBinItems("product", 20, 10, dateFrom, dateTo);
            const expectedEndDate = new Date(dateTo);
            expectedEndDate.setDate(expectedEndDate.getDate() + 1);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "product",
                    createdAt: {
                        gte: new Date(dateFrom),
                        lt: expectedEndDate
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                take: 20,
                skip: 10
            });
        });
        (0, _vitest.it)("should include user details for deleted items", async ()=>{
            const result = await auditService.getRecycleBinItems();
            (0, _vitest.expect)(result.items[0].deletedByUser).toEqual({
                id: "user1",
                name: "John Doe",
                email: "john@example.com"
            });
            (0, _vitest.expect)(result.items[1].deletedByUser).toEqual({
                id: "user2",
                name: "Jane Smith",
                email: "jane@example.com"
            });
        });
    });
    (0, _vitest.describe)("getAuditEntries", ()=>{
        const mockAuditEntries = [
            {
                id: 1,
                entity: "product",
                entityId: 123,
                action: "CREATE",
                userId: "user1",
                createdAt: new Date("2024-01-15T10:00:00Z"),
                details: {
                    name: "Test Product"
                }
            },
            {
                id: 2,
                entity: "customer",
                entityId: 456,
                action: "UPDATE",
                userId: "user2",
                createdAt: new Date("2024-01-16T11:00:00Z"),
                details: {
                    name: "Updated Customer"
                }
            }
        ];
        (0, _vitest.beforeEach)(()=>{
            mockPrisma.auditLog.findMany.mockResolvedValue(mockAuditEntries);
            mockPrisma.auditLog.count.mockResolvedValue(2);
        });
        (0, _vitest.it)("should return all audit entries without filters", async ()=>{
            const result = await auditService.getAuditEntries();
            (0, _vitest.expect)(result.items).toHaveLength(2);
            (0, _vitest.expect)(result.total).toBe(2);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {},
                orderBy: {
                    createdAt: "desc"
                },
                skip: 0,
                take: 50
            });
        });
        (0, _vitest.it)("should filter by entity type", async ()=>{
            await auditService.getAuditEntries("product");
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "product"
                },
                orderBy: {
                    createdAt: "desc"
                },
                skip: 0,
                take: 50
            });
        });
        (0, _vitest.it)("should filter by date range", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-15T23:59:59Z";
            await auditService.getAuditEntries(undefined, 50, 0, dateFrom, dateTo);
            const expectedEndDate = new Date(dateTo);
            expectedEndDate.setDate(expectedEndDate.getDate() + 1);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    createdAt: {
                        gte: new Date(dateFrom),
                        lt: expectedEndDate
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                skip: 0,
                take: 50
            });
        });
        (0, _vitest.it)("should filter by entity and date range combined", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-16T23:59:59Z";
            await auditService.getAuditEntries("customer", 20, 10, dateFrom, dateTo);
            const expectedEndDate = new Date(dateTo);
            expectedEndDate.setDate(expectedEndDate.getDate() + 1);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "customer",
                    createdAt: {
                        gte: new Date(dateFrom),
                        lt: expectedEndDate
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                skip: 10,
                take: 20
            });
        });
    });
    (0, _vitest.describe)("getEntityHistory", ()=>{
        const mockEntityHistory = [
            {
                id: 1,
                entity: "product",
                entityId: 123,
                action: "CREATE",
                userId: "user1",
                createdAt: new Date("2024-01-15T10:00:00Z"),
                details: {
                    name: "Test Product"
                }
            },
            {
                id: 2,
                entity: "product",
                entityId: 123,
                action: "UPDATE",
                userId: "user2",
                createdAt: new Date("2024-01-16T11:00:00Z"),
                details: {
                    name: "Updated Product"
                }
            }
        ];
        (0, _vitest.beforeEach)(()=>{
            mockPrisma.auditLog.findMany.mockResolvedValue(mockEntityHistory);
        });
        (0, _vitest.it)("should return entity history without date filters", async ()=>{
            const result = await auditService.getEntityHistory("product", 123);
            (0, _vitest.expect)(result).toHaveLength(2);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "product",
                    entityId: 123
                },
                orderBy: {
                    createdAt: "desc"
                },
                take: 20
            });
        });
        (0, _vitest.it)("should filter entity history by date range", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-16T23:59:59Z";
            await auditService.getEntityHistory("product", 123, 10, dateFrom, dateTo);
            const expectedEndDate = new Date(dateTo);
            expectedEndDate.setDate(expectedEndDate.getDate() + 1);
            (0, _vitest.expect)(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                where: {
                    entity: "product",
                    entityId: 123,
                    createdAt: {
                        gte: new Date(dateFrom),
                        lt: expectedEndDate
                    }
                },
                orderBy: {
                    createdAt: "desc"
                },
                take: 10
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,