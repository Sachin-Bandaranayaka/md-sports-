{"version":3,"names":["cov_1jx1jn00mi","actualCoverage","s","CACHE_CONFIG","f","cache","default","_default","DEFAULT_TTL","KEYS","INVENTORY_SUMMARY","INVOICES","INVOICE_STATS","CATEGORIES","SHOPS","CUSTOMERS","PRODUCTS","USER_SESSION","USER_PERMISSIONS","ROLE_PERMISSIONS","TOKEN_VALIDATION","TTL","INVENTORY","STATS","REFERENCE_DATA","MemoryCache","constructor","Map","cleanupInterval","setInterval","cleanup","now","Date","key","value","entries","expires","b","delete","get","item","data","set","ttl","del","clear","destroy","clearInterval","VercelKVCache","process","env","NODE_ENV","KV_REST_API_URL","kv","require","console","warn","result","error","setex","JSON","stringify","CacheService","fallbackCache","getOrSet","fetcher","cached","fresh","prefix","parts","join","invalidatePattern","pattern","log"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/cache-vercel.ts"],"sourcesContent":["/**\n * Vercel-optimized caching service\n * Uses Vercel KV (Redis) for serverless environments with fallback to in-memory cache\n */\n\n\n\n// Cache configuration\nconst CACHE_CONFIG = {\n    // Default TTL in seconds\n    DEFAULT_TTL: 300, // 5 minutes\n\n    // Cache keys\n    KEYS: {\n        INVENTORY_SUMMARY: 'inventory:summary',\n        INVOICES: 'invoices:list',\n        INVOICE_STATS: 'invoices:stats',\n        CATEGORIES: 'categories:list',\n        SHOPS: 'shops:list',\n        CUSTOMERS: 'customers:list',\n        PRODUCTS: 'products:list',\n        // Authentication cache keys\n        USER_SESSION: 'auth:user:session',\n        USER_PERMISSIONS: 'auth:user:permissions',\n        ROLE_PERMISSIONS: 'auth:role:permissions',\n        TOKEN_VALIDATION: 'auth:token:validation',\n    },\n\n    // TTL for different data types\n    TTL: {\n        INVENTORY: 60, // 1 minute\n        INVOICES: 120, // 2 minutes\n        STATS: 300, // 5 minutes\n        REFERENCE_DATA: 3600, // 1 hour (categories, shops, etc.)\n        // Authentication TTLs\n        USER_SESSION: 900, // 15 minutes\n        USER_PERMISSIONS: 1800, // 30 minutes\n        ROLE_PERMISSIONS: 3600, // 1 hour\n        TOKEN_VALIDATION: 300, // 5 minutes\n    }\n};\n\n// In-memory cache fallback for development\nclass MemoryCache {\n    private cache = new Map<string, { data: any; expires: number }>();\n    private cleanupInterval: NodeJS.Timeout;\n\n    constructor() {\n        // Clean up expired entries every 5 minutes\n        this.cleanupInterval = setInterval(() => {\n            this.cleanup();\n        }, 5 * 60 * 1000);\n    }\n\n    private cleanup() {\n        const now = Date.now();\n        for (const [key, value] of this.cache.entries()) {\n            if (value.expires < now) {\n                this.cache.delete(key);\n            }\n        }\n    }\n\n    async get<T>(key: string): Promise<T | null> {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        \n        if (item.expires < Date.now()) {\n            this.cache.delete(key);\n            return null;\n        }\n        \n        return item.data;\n    }\n\n    async set(key: string, value: any, ttl: number = CACHE_CONFIG.DEFAULT_TTL): Promise<void> {\n        const expires = Date.now() + (ttl * 1000);\n        this.cache.set(key, { data: value, expires });\n    }\n\n    async del(key: string): Promise<void> {\n        this.cache.delete(key);\n    }\n\n    async clear(): Promise<void> {\n        this.cache.clear();\n    }\n\n    destroy() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n        }\n        this.cache.clear();\n    }\n}\n\n// Vercel KV Cache implementation\nclass VercelKVCache {\n    private kv: any;\n\n    constructor() {\n        // Dynamically import Vercel KV only in production\n        if (process.env.NODE_ENV === 'production' && process.env.KV_REST_API_URL) {\n            try {\n                // This will be available when @vercel/kv is installed\n                const { kv } = require('@vercel/kv');\n                this.kv = kv;\n            } catch {\n                console.warn('Vercel KV not available, falling back to memory cache');\n                this.kv = null;\n            }\n        }\n    }\n\n    async get<T>(key: string): Promise<T | null> {\n        if (!this.kv) return null;\n        \n        try {\n            const result = await this.kv.get(key);\n            return result;\n        } catch (error) {\n            console.error('KV get error:', error);\n            return null;\n        }\n    }\n\n    async set(key: string, value: any, ttl: number = CACHE_CONFIG.DEFAULT_TTL): Promise<void> {\n        if (!this.kv) return;\n        \n        try {\n            await this.kv.setex(key, ttl, JSON.stringify(value));\n        } catch (error) {\n            console.error('KV set error:', error);\n        }\n    }\n\n    async del(key: string): Promise<void> {\n        if (!this.kv) return;\n        \n        try {\n            await this.kv.del(key);\n        } catch (error) {\n            console.error('KV del error:', error);\n        }\n    }\n\n    async clear(): Promise<void> {\n        if (!this.kv) return;\n        \n        try {\n            // Note: Vercel KV doesn't have a clear all method\n            // This would need to be implemented differently\n            console.warn('KV clear not implemented');\n        } catch (error) {\n            console.error('KV clear error:', error);\n        }\n    }\n}\n\n// Cache service that automatically chooses the best implementation\nclass CacheService {\n    private cache: MemoryCache | VercelKVCache;\n    private fallbackCache: MemoryCache;\n\n    constructor() {\n        // Always have memory cache as fallback\n        this.fallbackCache = new MemoryCache();\n        \n        // Use Vercel KV in production, memory cache in development\n        if (process.env.NODE_ENV === 'production' && process.env.KV_REST_API_URL) {\n            this.cache = new VercelKVCache();\n        } else {\n            this.cache = this.fallbackCache;\n        }\n    }\n\n    async get<T>(key: string): Promise<T | null> {\n        try {\n            const result = await this.cache.get<T>(key);\n            return result;\n        } catch (error) {\n            console.error('Cache get error, using fallback:', error);\n            return await this.fallbackCache.get<T>(key);\n        }\n    }\n\n    async set(key: string, value: any, ttl: number = CACHE_CONFIG.DEFAULT_TTL): Promise<void> {\n        try {\n            await this.cache.set(key, value, ttl);\n            // Also set in fallback for reliability\n            await this.fallbackCache.set(key, value, ttl);\n        } catch (error) {\n            console.error('Cache set error:', error);\n            // At least set in fallback\n            await this.fallbackCache.set(key, value, ttl);\n        }\n    }\n\n    async del(key: string): Promise<void> {\n        try {\n            await this.cache.del(key);\n            await this.fallbackCache.del(key);\n        } catch (error) {\n            console.error('Cache del error:', error);\n            await this.fallbackCache.del(key);\n        }\n    }\n\n    async clear(): Promise<void> {\n        try {\n            await this.cache.clear();\n            await this.fallbackCache.clear();\n        } catch (error) {\n            console.error('Cache clear error:', error);\n            await this.fallbackCache.clear();\n        }\n    }\n\n    // Helper methods for common cache patterns\n    async getOrSet<T>(\n        key: string,\n        fetcher: () => Promise<T>,\n        ttl: number = CACHE_CONFIG.DEFAULT_TTL\n    ): Promise<T> {\n        const cached = await this.get<T>(key);\n        if (cached !== null) {\n            return cached;\n        }\n\n        const fresh = await fetcher();\n        await this.set(key, fresh, ttl);\n        return fresh;\n    }\n\n    // Generate cache key with prefix\n    key(prefix: string, ...parts: (string | number)[]): string {\n        return `${prefix}:${parts.join(':')}`;\n    }\n\n    // Invalidate related cache entries\n    async invalidatePattern(pattern: string): Promise<void> {\n        // This is a simplified implementation\n        // In a real scenario, you'd want to track keys or use a more sophisticated approach\n        console.log(`Invalidating cache pattern: ${pattern}`);\n    }\n}\n\n// Export singleton instance\nexport const cache = new CacheService();\nexport { CACHE_CONFIG };\nexport default cache;"],"mappings":"AAAA;;;GAAA,CAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}