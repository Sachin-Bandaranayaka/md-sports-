cad63e8d14ad5a5cf22205699345cf0c
"use strict";

/* istanbul ignore next */
function cov_7mfqygq4n() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts";
  var hash = "a1ed0d62f4c02c44fe2652276c2c32b3487150e5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "9": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "10": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "12": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "13": {
        start: {
          line: 34,
          column: 22
        },
        end: {
          line: 34,
          column: 54
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "16": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "18": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "19": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "22": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "23": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "24": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "25": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "27": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "28": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "30": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 144
        }
      },
      "31": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "32": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "33": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 52
        }
      },
      "34": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 71
        }
      },
      "35": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "36": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 302,
          column: 5
        }
      },
      "37": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 54
        }
      },
      "38": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "39": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "40": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 59
        }
      },
      "41": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "42": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "43": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "44": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "45": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "46": {
        start: {
          line: 159,
          column: 24
        },
        end: {
          line: 159,
          column: 144
        }
      },
      "47": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 96
        }
      },
      "48": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "49": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "50": {
        start: {
          line: 168,
          column: 28
        },
        end: {
          line: 168,
          column: 47
        }
      },
      "51": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "52": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "53": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 41
        }
      },
      "54": {
        start: {
          line: 178,
          column: 34
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "55": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "56": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "57": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "58": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "59": {
        start: {
          line: 198,
          column: 47
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "60": {
        start: {
          line: 200,
          column: 29
        },
        end: {
          line: 200,
          column: 31
        }
      },
      "61": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "62": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 84
        }
      },
      "63": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "64": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 88
        }
      },
      "65": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "66": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "67": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "68": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 76
        }
      },
      "69": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "70": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 221,
          column: 19
        }
      },
      "71": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "72": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 66
        }
      },
      "73": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "74": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 113
        }
      },
      "75": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 284,
          column: 10
        }
      },
      "76": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "77": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "78": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 248,
          column: 19
        }
      },
      "79": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "80": {
        start: {
          line: 251,
          column: 38
        },
        end: {
          line: 251,
          column: 74
        }
      },
      "81": {
        start: {
          line: 252,
          column: 37
        },
        end: {
          line: 252,
          column: 72
        }
      },
      "82": {
        start: {
          line: 254,
          column: 34
        },
        end: {
          line: 254,
          column: 82
        }
      },
      "83": {
        start: {
          line: 255,
          column: 38
        },
        end: {
          line: 255,
          column: 68
        }
      },
      "84": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 258,
          column: 21
        }
      },
      "85": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 109
        }
      },
      "86": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 267,
          column: 23
        }
      },
      "87": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 283,
          column: 15
        }
      },
      "88": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 59
        }
      },
      "89": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 71
        }
      },
      "90": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "91": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "92": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 301,
          column: 11
        }
      },
      "93": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 405,
          column: 5
        }
      },
      "94": {
        start: {
          line: 307,
          column: 22
        },
        end: {
          line: 307,
          column: 54
        }
      },
      "95": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "96": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "97": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 59
        }
      },
      "98": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "99": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 321,
          column: 15
        }
      },
      "100": {
        start: {
          line: 324,
          column: 21
        },
        end: {
          line: 332,
          column: 10
        }
      },
      "101": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "102": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 338,
          column: 15
        }
      },
      "103": {
        start: {
          line: 341,
          column: 24
        },
        end: {
          line: 341,
          column: 144
        }
      },
      "104": {
        start: {
          line: 342,
          column: 31
        },
        end: {
          line: 342,
          column: 96
        }
      },
      "105": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "106": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 348,
          column: 15
        }
      },
      "107": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 47
        }
      },
      "108": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "109": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 356,
          column: 15
        }
      },
      "110": {
        start: {
          line: 358,
          column: 26
        },
        end: {
          line: 362,
          column: 10
        }
      },
      "111": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "112": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "113": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "114": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 376,
          column: 15
        }
      },
      "115": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 392,
          column: 11
        }
      },
      "116": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 385,
          column: 15
        }
      },
      "117": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 391,
          column: 15
        }
      },
      "118": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "119": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 71
        }
      },
      "120": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 18
          }
        },
        loc: {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 122,
            column: 15
          },
          end: {
            line: 122,
            column: 18
          }
        },
        loc: {
          start: {
            line: 122,
            column: 40
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 122
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 233,
            column: 68
          },
          end: {
            line: 233,
            column: 69
          }
        },
        loc: {
          start: {
            line: 233,
            column: 80
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 233
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 304,
            column: 15
          },
          end: {
            line: 304,
            column: 21
          }
        },
        loc: {
          start: {
            line: 304,
            column: 43
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 304
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 379,
            column: 43
          },
          end: {
            line: 379,
            column: 44
          }
        },
        loc: {
          start: {
            line: 379,
            column: 55
          },
          end: {
            line: 392,
            column: 9
          }
        },
        line: 379
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 20
          }
        }, {
          start: {
            line: 43,
            column: 24
          },
          end: {
            line: 43,
            column: 36
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 104,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 104,
            column: 86
          }
        }, {
          start: {
            line: 104,
            column: 90
          },
          end: {
            line: 104,
            column: 144
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 20
          }
        }, {
          start: {
            line: 105,
            column: 24
          },
          end: {
            line: 105,
            column: 35
          }
        }, {
          start: {
            line: 105,
            column: 39
          },
          end: {
            line: 105,
            column: 71
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "13": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "14": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 20
          }
        }, {
          start: {
            line: 134,
            column: 24
          },
          end: {
            line: 134,
            column: 36
          }
        }],
        line: 134
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 159,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 159,
            column: 86
          }
        }, {
          start: {
            line: 159,
            column: 90
          },
          end: {
            line: 159,
            column: 144
          }
        }],
        line: 159
      },
      "17": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "18": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 20
          }
        }, {
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 161,
            column: 39
          }
        }],
        line: 161
      },
      "19": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "20": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "21": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "22": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 20
          }
        }, {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 35
          }
        }, {
          start: {
            line: 191,
            column: 39
          },
          end: {
            line: 191,
            column: 79
          }
        }],
        line: 191
      },
      "23": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "24": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "25": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "26": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "27": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "28": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "29": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "30": {
        loc: {
          start: {
            line: 228,
            column: 38
          },
          end: {
            line: 228,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 68
          },
          end: {
            line: 228,
            column: 105
          }
        }, {
          start: {
            line: 228,
            column: 108
          },
          end: {
            line: 228,
            column: 112
          }
        }],
        line: 228
      },
      "31": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "32": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 242,
            column: 21
          }
        }, {
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 45
          }
        }],
        line: 242
      },
      "33": {
        loc: {
          start: {
            line: 254,
            column: 52
          },
          end: {
            line: 254,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 52
          },
          end: {
            line: 254,
            column: 66
          }
        }, {
          start: {
            line: 254,
            column: 70
          },
          end: {
            line: 254,
            column: 80
          }
        }],
        line: 254
      },
      "34": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 258,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 258,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "35": {
        loc: {
          start: {
            line: 256,
            column: 24
          },
          end: {
            line: 256,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 24
          },
          end: {
            line: 256,
            column: 40
          }
        }, {
          start: {
            line: 256,
            column: 44
          },
          end: {
            line: 256,
            column: 59
          }
        }, {
          start: {
            line: 256,
            column: 63
          },
          end: {
            line: 256,
            column: 75
          }
        }, {
          start: {
            line: 256,
            column: 79
          },
          end: {
            line: 256,
            column: 95
          }
        }],
        line: 256
      },
      "36": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "37": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "38": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "39": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 20
          }
        }, {
          start: {
            line: 316,
            column: 24
          },
          end: {
            line: 316,
            column: 36
          }
        }],
        line: 316
      },
      "40": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "41": {
        loc: {
          start: {
            line: 341,
            column: 24
          },
          end: {
            line: 341,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 24
          },
          end: {
            line: 341,
            column: 86
          }
        }, {
          start: {
            line: 341,
            column: 90
          },
          end: {
            line: 341,
            column: 144
          }
        }],
        line: 341
      },
      "42": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "43": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 20
          }
        }, {
          start: {
            line: 343,
            column: 24
          },
          end: {
            line: 343,
            column: 39
          }
        }],
        line: 343
      },
      "44": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "45": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "46": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "47": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 371,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 371,
            column: 20
          }
        }, {
          start: {
            line: 371,
            column: 24
          },
          end: {
            line: 371,
            column: 35
          }
        }, {
          start: {
            line: 371,
            column: 39
          },
          end: {
            line: 371,
            column: 71
          }
        }],
        line: 371
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\n\n// GET /api/quotations/[id] - Get a specific quotation\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        if (!hasPermission(user.permissions, 'sales:view')) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        // Check shop access for non-admin users\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        if (!isAdmin && user.shopId && quotation.shopId !== user.shopId) {\n            return NextResponse.json(\n                { error: 'Access denied: Quotation belongs to different shop' },\n                { status: 403 }\n            );\n        }\n\n        return NextResponse.json(quotation);\n    } catch (error) {\n        console.error(`Error fetching quotation ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotation' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/quotations/[id] - Update a quotation\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can edit quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to edit quotations' }, { status: 403 });\n        }\n\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n\n        // Ensure the quotation exists before attempting to update\n        const existingQuotation = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n        });\n\n        if (!existingQuotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // Check shop access for non-admin users\n        if (!isAdmin && user.shopId && existingQuotation.shopId !== user.shopId) {\n            return NextResponse.json(\n                { error: 'Access denied: Cannot edit quotations from other shops' },\n                { status: 403 }\n            );\n        }\n\n        const { items, ...quotationDetails } = body;\n\n        // Prepare data for Quotation update, only including valid fields\n        const dataToUpdate: any = {};\n\n        if (quotationDetails.quotationNumber !== undefined) {\n            dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);\n        }\n        if (quotationDetails.customerId !== undefined) {\n            dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);\n            if (isNaN(dataToUpdate.customerId)) {\n                return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.total !== undefined) {\n            dataToUpdate.total = parseFloat(String(quotationDetails.total));\n            if (isNaN(dataToUpdate.total)) {\n                return NextResponse.json({ error: 'Invalid total format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.status !== undefined) {\n            dataToUpdate.status = String(quotationDetails.status);\n        }\n        if (quotationDetails.expiryDate !== undefined) { // Frontend sends expiryDate\n            dataToUpdate.validUntil = quotationDetails.expiryDate ? new Date(quotationDetails.expiryDate) : null;\n        }\n        // Note: We don't update createdAt. updatedAt is handled by Prisma.\n        // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.\n        // If they need to be stored, the schema needs to be updated.\n\n        const updatedQuotation = await prisma.$transaction(async (tx) => {\n            // Update the quotation\n            await tx.quotation.update({\n                where: {\n                    id: quotationId\n                },\n                data: dataToUpdate // Use the prepared data\n            });\n\n            // Handle items update if provided\n            if (items && Array.isArray(items)) {\n                // Delete existing items\n                await tx.quotationItem.deleteMany({\n                    where: {\n                        quotationId: quotationId\n                    }\n                });\n\n                // Create new items\n                for (const item of items) {\n                    const productId = parseInt(String(item.productId), 10);\n                    const quantity = parseInt(String(item.quantity), 10);\n                    // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'\n                    const price = parseFloat(String(item.unitPrice ?? item.price));\n                    const itemTotal = parseFloat(String(item.total));\n\n                    if (isNaN(productId) || isNaN(quantity) || isNaN(price) || isNaN(itemTotal)) {\n                        throw new Error('Invalid item data: All item numeric fields must be valid numbers.');\n                    }\n\n                    await tx.quotationItem.create({\n                        data: {\n                            quotationId: quotationId,\n                            productId: productId,\n                            quantity: quantity,\n                            price: price, // Ensure this matches schema field name\n                            total: itemTotal\n                        }\n                    });\n                }\n            }\n\n            // Return the updated quotation with items\n            return tx.quotation.findUnique({\n                where: {\n                    id: quotationId\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(updatedQuotation);\n    } catch (error: any) { // Catch specific error types if needed\n        console.error(`Error updating quotation ${params.id}:`, error);\n        // Provide a more specific error message if it's our custom validation error\n        if (error.message.startsWith('Invalid item data:')) {\n            return NextResponse.json(\n                { error: error.message },\n                { status: 400 }\n            );\n        }\n        return NextResponse.json(\n            { error: 'Failed to update quotation', details: error.message },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/quotations/[id] - Delete a quotation\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can delete quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to delete quotations' }, { status: 403 });\n        }\n\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // Check shop access for non-admin users\n        if (!isAdmin && user.shopId && quotation.shopId !== user.shopId) {\n            return NextResponse.json(\n                { error: 'Access denied: Cannot delete quotations from other shops' },\n                { status: 403 }\n            );\n        }\n\n        // Delete quotation and items in a transaction\n        await prisma.$transaction(async (tx) => {\n            // Delete associated items\n            await tx.quotationItem.deleteMany({\n                where: {\n                    quotationId: quotationId\n                }\n            });\n\n            // Delete the quotation\n            await tx.quotation.delete({\n                where: {\n                    id: quotationId\n                }\n            });\n        });\n\n        return NextResponse.json(\n            { message: 'Quotation deleted successfully' },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error(`Error deleting quotation ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "token", "extractToken", "NextResponse", "json", "error", "status", "payload", "verifyToken", "sub", "user", "prisma", "findUnique", "where", "id", "select", "permissions", "shopId", "hasPermission", "quotationId", "parseInt", "isNaN", "quotation", "include", "customer", "items", "product", "isAdmin", "console", "canManageSales", "body", "existingQuotation", "quotationDetails", "dataToUpdate", "quotationNumber", "undefined", "String", "customerId", "total", "parseFloat", "expiryDate", "validUntil", "Date", "updatedQuotation", "$transaction", "tx", "update", "data", "Array", "isArray", "quotationItem", "deleteMany", "item", "productId", "quantity", "price", "unitPrice", "itemTotal", "Error", "create", "message", "startsWith", "details", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a1ed0d62f4c02c44fe2652276c2c32b3487150e5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mfqygq4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mfqygq4n();
cov_7mfqygq4n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[0]++;
  cov_7mfqygq4n().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_7mfqygq4n().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[1]++;
    cov_7mfqygq4n().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[2]++;
    cov_7mfqygq4n().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[3]++;
    cov_7mfqygq4n().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_7mfqygq4n().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_7mfqygq4n().s[8]++, _interop_require_default(require("../../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_7mfqygq4n().s[9]++, require("../../../../lib/auth"));
const _permissions =
/* istanbul ignore next */
(cov_7mfqygq4n().s[10]++, require("../../../../lib/utils/permissions"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[4]++;
  cov_7mfqygq4n().s[11]++;
  return /* istanbul ignore next */(cov_7mfqygq4n().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[5]++;
  cov_7mfqygq4n().s[12]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[13]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[14]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[2][0]++;
      cov_7mfqygq4n().s[15]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[2][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[16]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[4][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[4][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[3][0]++;
      cov_7mfqygq4n().s[18]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[3][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[19]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[20]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[5][0]++;
      cov_7mfqygq4n().s[21]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[5][1]++;
    }
    // Check permissions
    cov_7mfqygq4n().s[22]++;
    if (!(0, _permissions.hasPermission)(user.permissions, "sales:view")) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[6][0]++;
      cov_7mfqygq4n().s[23]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[6][1]++;
    }
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[24]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[25]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[7][0]++;
      cov_7mfqygq4n().s[26]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[7][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[27]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      },
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[28]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[8][0]++;
      cov_7mfqygq4n().s[29]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[8][1]++;
    }
    // Check shop access for non-admin users
    const isAdmin =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[30]++,
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[9][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[9][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[11][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[11][1]++, user.shopId) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[11][2]++, quotation.shopId !== user.shopId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[10][0]++;
      cov_7mfqygq4n().s[32]++;
      return _server.NextResponse.json({
        error: "Access denied: Quotation belongs to different shop"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[10][1]++;
    }
    cov_7mfqygq4n().s[33]++;
    return _server.NextResponse.json(quotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[34]++;
    console.error(`Error fetching quotation ${params.id}:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[35]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotation"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[6]++;
  cov_7mfqygq4n().s[36]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[37]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[38]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[12][0]++;
      cov_7mfqygq4n().s[39]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[12][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[40]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[14][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[14][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[13][0]++;
      cov_7mfqygq4n().s[42]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[13][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[43]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[44]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[15][0]++;
      cov_7mfqygq4n().s[45]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[15][1]++;
    }
    // Check permissions - only admin or users with sales:manage can edit quotations
    const isAdmin =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[46]++,
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[16][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[16][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    const canManageSales =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[47]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[18][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[18][1]++, !canManageSales)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[17][0]++;
      cov_7mfqygq4n().s[49]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions to edit quotations"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[17][1]++;
    }
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[50]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[51]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[19][0]++;
      cov_7mfqygq4n().s[52]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[19][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[53]++, await request.json());
    // Ensure the quotation exists before attempting to update
    const existingQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[54]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[55]++;
    if (!existingQuotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[20][0]++;
      cov_7mfqygq4n().s[56]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[20][1]++;
    }
    // Check shop access for non-admin users
    cov_7mfqygq4n().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[22][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[22][1]++, user.shopId) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[22][2]++, existingQuotation.shopId !== user.shopId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[21][0]++;
      cov_7mfqygq4n().s[58]++;
      return _server.NextResponse.json({
        error: "Access denied: Cannot edit quotations from other shops"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[21][1]++;
    }
    const {
      items,
      ...quotationDetails
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[59]++, body);
    // Prepare data for Quotation update, only including valid fields
    const dataToUpdate =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[60]++, {});
    /* istanbul ignore next */
    cov_7mfqygq4n().s[61]++;
    if (quotationDetails.quotationNumber !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[23][0]++;
      cov_7mfqygq4n().s[62]++;
      dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[23][1]++;
    }
    cov_7mfqygq4n().s[63]++;
    if (quotationDetails.customerId !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[24][0]++;
      cov_7mfqygq4n().s[64]++;
      dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);
      /* istanbul ignore next */
      cov_7mfqygq4n().s[65]++;
      if (isNaN(dataToUpdate.customerId)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[25][0]++;
        cov_7mfqygq4n().s[66]++;
        return _server.NextResponse.json({
          error: "Invalid customerId format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[25][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[24][1]++;
    }
    cov_7mfqygq4n().s[67]++;
    if (quotationDetails.total !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[26][0]++;
      cov_7mfqygq4n().s[68]++;
      dataToUpdate.total = parseFloat(String(quotationDetails.total));
      /* istanbul ignore next */
      cov_7mfqygq4n().s[69]++;
      if (isNaN(dataToUpdate.total)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[27][0]++;
        cov_7mfqygq4n().s[70]++;
        return _server.NextResponse.json({
          error: "Invalid total format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[27][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[26][1]++;
    }
    cov_7mfqygq4n().s[71]++;
    if (quotationDetails.status !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[28][0]++;
      cov_7mfqygq4n().s[72]++;
      dataToUpdate.status = String(quotationDetails.status);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[28][1]++;
    }
    cov_7mfqygq4n().s[73]++;
    if (quotationDetails.expiryDate !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[29][0]++;
      cov_7mfqygq4n().s[74]++;
      dataToUpdate.validUntil = quotationDetails.expiryDate ?
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[30][0]++, new Date(quotationDetails.expiryDate)) :
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[30][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[29][1]++;
    }
    // Note: We don't update createdAt. updatedAt is handled by Prisma.
    // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.
    // If they need to be stored, the schema needs to be updated.
    const updatedQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[75]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[7]++;
      cov_7mfqygq4n().s[76]++;
      // Update the quotation
      await tx.quotation.update({
        where: {
          id: quotationId
        },
        data: dataToUpdate // Use the prepared data
      });
      // Handle items update if provided
      /* istanbul ignore next */
      cov_7mfqygq4n().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[32][0]++, items) &&
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[32][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[31][0]++;
        cov_7mfqygq4n().s[78]++;
        // Delete existing items
        await tx.quotationItem.deleteMany({
          where: {
            quotationId: quotationId
          }
        });
        // Create new items
        /* istanbul ignore next */
        cov_7mfqygq4n().s[79]++;
        for (const item of items) {
          const productId =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[80]++, parseInt(String(item.productId), 10));
          const quantity =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[81]++, parseInt(String(item.quantity), 10));
          // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'
          const price =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[82]++, parseFloat(String(
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[33][0]++, item.unitPrice) ??
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[33][1]++, item.price))));
          const itemTotal =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[83]++, parseFloat(String(item.total)));
          /* istanbul ignore next */
          cov_7mfqygq4n().s[84]++;
          if (
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[35][0]++, isNaN(productId)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[35][1]++, isNaN(quantity)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[35][2]++, isNaN(price)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[35][3]++, isNaN(itemTotal))) {
            /* istanbul ignore next */
            cov_7mfqygq4n().b[34][0]++;
            cov_7mfqygq4n().s[85]++;
            throw new Error("Invalid item data: All item numeric fields must be valid numbers.");
          } else
          /* istanbul ignore next */
          {
            cov_7mfqygq4n().b[34][1]++;
          }
          cov_7mfqygq4n().s[86]++;
          await tx.quotationItem.create({
            data: {
              quotationId: quotationId,
              productId: productId,
              quantity: quantity,
              price: price,
              total: itemTotal
            }
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[31][1]++;
      }
      // Return the updated quotation with items
      cov_7mfqygq4n().s[87]++;
      return tx.quotation.findUnique({
        where: {
          id: quotationId
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[88]++;
    return _server.NextResponse.json(updatedQuotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[89]++;
    console.error(`Error updating quotation ${params.id}:`, error);
    // Provide a more specific error message if it's our custom validation error
    /* istanbul ignore next */
    cov_7mfqygq4n().s[90]++;
    if (error.message.startsWith("Invalid item data:")) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[36][0]++;
      cov_7mfqygq4n().s[91]++;
      return _server.NextResponse.json({
        error: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[36][1]++;
    }
    cov_7mfqygq4n().s[92]++;
    return _server.NextResponse.json({
      error: "Failed to update quotation",
      details: error.message
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[8]++;
  cov_7mfqygq4n().s[93]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[94]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[95]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[37][0]++;
      cov_7mfqygq4n().s[96]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[37][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[97]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[98]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[39][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[39][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[38][0]++;
      cov_7mfqygq4n().s[99]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[38][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[100]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[101]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[40][0]++;
      cov_7mfqygq4n().s[102]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[40][1]++;
    }
    // Check permissions - only admin or users with sales:manage can delete quotations
    const isAdmin =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[103]++,
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[41][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[41][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    const canManageSales =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[104]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[43][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[43][1]++, !canManageSales)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[42][0]++;
      cov_7mfqygq4n().s[106]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions to delete quotations"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[42][1]++;
    }
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[107]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[108]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[44][0]++;
      cov_7mfqygq4n().s[109]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[44][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[110]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[111]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[45][0]++;
      cov_7mfqygq4n().s[112]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[45][1]++;
    }
    // Check shop access for non-admin users
    cov_7mfqygq4n().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[47][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[47][1]++, user.shopId) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[47][2]++, quotation.shopId !== user.shopId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[46][0]++;
      cov_7mfqygq4n().s[114]++;
      return _server.NextResponse.json({
        error: "Access denied: Cannot delete quotations from other shops"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[46][1]++;
    }
    // Delete quotation and items in a transaction
    cov_7mfqygq4n().s[115]++;
    await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[9]++;
      cov_7mfqygq4n().s[116]++;
      // Delete associated items
      await tx.quotationItem.deleteMany({
        where: {
          quotationId: quotationId
        }
      });
      // Delete the quotation
      /* istanbul ignore next */
      cov_7mfqygq4n().s[117]++;
      await tx.quotation.delete({
        where: {
          id: quotationId
        }
      });
    });
    /* istanbul ignore next */
    cov_7mfqygq4n().s[118]++;
    return _server.NextResponse.json({
      message: "Quotation deleted successfully"
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[119]++;
    console.error(`Error deleting quotation ${params.id}:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[120]++;
    return _server.NextResponse.json({
      error: "Failed to delete quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,