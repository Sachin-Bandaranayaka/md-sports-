94233f4033f85cdc22816b85c5d6e691
"use strict";

/* istanbul ignore next */
function cov_y22h5fuwr() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/authService.ts";
  var hash = "8f966454b3f4de96917975c05309f694bd086046";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 27
        }
      },
      "11": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 85
        }
      },
      "12": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 77
        }
      },
      "13": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "14": {
        start: {
          line: 37,
          column: 15
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "15": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "16": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "17": {
        start: {
          line: 44,
          column: 39
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "18": {
        start: {
          line: 45,
          column: 28
        },
        end: {
          line: 45,
          column: 41
        }
      },
      "19": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 40
        }
      },
      "20": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 20
        }
      },
      "21": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 66
        }
      },
      "22": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "24": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "26": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "27": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 30
        }
      },
      "29": {
        start: {
          line: 64,
          column: 17
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "30": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 67,
          column: 88
        }
      },
      "31": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "32": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "33": {
        start: {
          line: 70,
          column: 23
        },
        end: {
          line: 70,
          column: 95
        }
      },
      "34": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "35": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 57
        }
      },
      "36": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "37": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 25
        }
      },
      "38": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "39": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 31
        }
      },
      "40": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "41": {
        start: {
          line: 85,
          column: 19
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "42": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 71
        }
      },
      "43": {
        start: {
          line: 88,
          column: 33
        },
        end: {
          line: 106,
          column: 1
        }
      },
      "44": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 27
        }
      },
      "45": {
        start: {
          line: 89,
          column: 18
        },
        end: {
          line: 89,
          column: 27
        }
      },
      "46": {
        start: {
          line: 90,
          column: 21
        },
        end: {
          line: 90,
          column: 38
        }
      },
      "47": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "48": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 29
        }
      },
      "49": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 29
        }
      },
      "50": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "51": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 23
        }
      },
      "52": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "53": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 33
        }
      },
      "54": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 38
        }
      },
      "55": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 68
        }
      },
      "56": {
        start: {
          line: 103,
          column: 43
        },
        end: {
          line: 103,
          column: 68
        }
      },
      "57": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 21
        }
      },
      "58": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 208,
          column: 1
        }
      },
      "59": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "60": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 50
        }
      },
      "61": {
        start: {
          line: 111,
          column: 21
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "62": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 53
        }
      },
      "63": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "64": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "65": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 88
        }
      },
      "66": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "67": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "68": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 28
        }
      },
      "69": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "70": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "71": {
        start: {
          line: 147,
          column: 57
        },
        end: {
          line: 147,
          column: 63
        }
      },
      "72": {
        start: {
          line: 148,
          column: 15
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "73": {
        start: {
          line: 150,
          column: 38
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "74": {
        start: {
          line: 153,
          column: 55
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "75": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "76": {
        start: {
          line: 160,
          column: 53
        },
        end: {
          line: 160,
          column: 59
        }
      },
      "77": {
        start: {
          line: 163,
          column: 22
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "78": {
        start: {
          line: 171,
          column: 28
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "79": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 185,
          column: 10
        }
      },
      "80": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 99
        }
      },
      "81": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 200,
          column: 10
        }
      },
      "82": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 54
        }
      },
      "83": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 206,
          column: 10
        }
      },
      "84": {
        start: {
          line: 209,
          column: 22
        },
        end: {
          line: 213,
          column: 1
        }
      },
      "85": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "86": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 240,
          column: 1
        }
      },
      "87": {
        start: {
          line: 215,
          column: 21
        },
        end: {
          line: 217,
          column: 6
        }
      },
      "88": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "89": {
        start: {
          line: 220,
          column: 29
        },
        end: {
          line: 220,
          column: 68
        }
      },
      "90": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "91": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 32
        }
      },
      "92": {
        start: {
          line: 225,
          column: 24
        },
        end: {
          line: 225,
          column: 71
        }
      },
      "93": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 99
        }
      },
      "94": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 23
        }
      },
      "95": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "96": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 81
        }
      },
      "97": {
        start: {
          line: 233,
          column: 15
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "98": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 79
        }
      },
      "99": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 70
        }
      },
      "100": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 20
        }
      },
      "101": {
        start: {
          line: 241,
          column: 22
        },
        end: {
          line: 287,
          column: 1
        }
      },
      "102": {
        start: {
          line: 243,
          column: 47
        },
        end: {
          line: 243,
          column: 157
        }
      },
      "103": {
        start: {
          line: 243,
          column: 94
        },
        end: {
          line: 243,
          column: 156
        }
      },
      "104": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "105": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "106": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 24
        }
      },
      "107": {
        start: {
          line: 251,
          column: 32
        },
        end: {
          line: 253,
          column: 6
        }
      },
      "108": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 285,
          column: 5
        }
      },
      "109": {
        start: {
          line: 255,
          column: 34
        },
        end: {
          line: 255,
          column: 84
        }
      },
      "110": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "111": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 66
        }
      },
      "112": {
        start: {
          line: 260,
          column: 21
        },
        end: {
          line: 276,
          column: 10
        }
      },
      "113": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "114": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 278,
          column: 70
        }
      },
      "115": {
        start: {
          line: 278,
          column: 63
        },
        end: {
          line: 278,
          column: 69
        }
      },
      "116": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 118
        }
      },
      "117": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 60
        }
      },
      "118": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 60
        }
      },
      "119": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 17
        }
      },
      "120": {
        start: {
          line: 288,
          column: 34
        },
        end: {
          line: 346,
          column: 1
        }
      },
      "121": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 289,
          column: 72
        }
      },
      "122": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "123": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 85
        }
      },
      "124": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 20
        }
      },
      "125": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "126": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 67
        }
      },
      "127": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 20
        }
      },
      "128": {
        start: {
          line: 298,
          column: 19
        },
        end: {
          line: 298,
          column: 38
        }
      },
      "129": {
        start: {
          line: 299,
          column: 21
        },
        end: {
          line: 301,
          column: 6
        }
      },
      "130": {
        start: {
          line: 302,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "131": {
        start: {
          line: 304,
          column: 27
        },
        end: {
          line: 304,
          column: 66
        }
      },
      "132": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "133": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 56
        }
      },
      "134": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 30
        }
      },
      "135": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 56
        }
      },
      "136": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 55
        }
      },
      "137": {
        start: {
          line: 311,
          column: 21
        },
        end: {
          line: 327,
          column: 10
        }
      },
      "138": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 58
        }
      },
      "139": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "140": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 60
        }
      },
      "141": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 24
        }
      },
      "142": {
        start: {
          line: 333,
          column: 36
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "143": {
        start: {
          line: 336,
          column: 56
        },
        end: {
          line: 336,
          column: 62
        }
      },
      "144": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 107
        }
      },
      "145": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 66
        }
      },
      "146": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 35
        }
      },
      "147": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 73
        }
      },
      "148": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 20
        }
      },
      "149": {
        start: {
          line: 347,
          column: 25
        },
        end: {
          line: 350,
          column: 1
        }
      },
      "150": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 44
        }
      },
      "151": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 349,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 23
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 20
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 32
          }
        },
        loc: {
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 20
          }
        },
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 31
          }
        },
        loc: {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 17
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 33
          }
        },
        loc: {
          start: {
            line: 38,
            column: 39
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 38
      },
      "9": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 33
          }
        },
        loc: {
          start: {
            line: 43,
            column: 47
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 43
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 47,
            column: 39
          },
          end: {
            line: 47,
            column: 40
          }
        },
        loc: {
          start: {
            line: 47,
            column: 61
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "11": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 51,
            column: 9
          },
          end: {
            line: 51,
            column: 34
          }
        },
        loc: {
          start: {
            line: 51,
            column: 53
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 51
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 88,
            column: 34
          }
        },
        loc: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 88
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 107,
            column: 25
          },
          end: {
            line: 107,
            column: 26
          }
        },
        loc: {
          start: {
            line: 107,
            column: 50
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 107
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 147,
            column: 52
          },
          end: {
            line: 147,
            column: 53
          }
        },
        loc: {
          start: {
            line: 147,
            column: 57
          },
          end: {
            line: 147,
            column: 63
          }
        },
        line: 147
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 153,
            column: 49
          },
          end: {
            line: 153,
            column: 50
          }
        },
        loc: {
          start: {
            line: 153,
            column: 55
          },
          end: {
            line: 153,
            column: 78
          }
        },
        line: 153
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 160,
            column: 49
          }
        },
        loc: {
          start: {
            line: 160,
            column: 53
          },
          end: {
            line: 160,
            column: 59
          }
        },
        line: 160
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 209,
            column: 23
          }
        },
        loc: {
          start: {
            line: 209,
            column: 33
          },
          end: {
            line: 213,
            column: 1
          }
        },
        line: 209
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 214,
            column: 21
          }
        },
        loc: {
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 214
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 241,
            column: 23
          }
        },
        loc: {
          start: {
            line: 241,
            column: 56
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 241
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 243,
            column: 76
          },
          end: {
            line: 243,
            column: 77
          }
        },
        loc: {
          start: {
            line: 243,
            column: 94
          },
          end: {
            line: 243,
            column: 156
          }
        },
        line: 243
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 278,
            column: 58
          },
          end: {
            line: 278,
            column: 59
          }
        },
        loc: {
          start: {
            line: 278,
            column: 63
          },
          end: {
            line: 278,
            column: 69
          }
        },
        line: 278
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 288,
            column: 34
          },
          end: {
            line: 288,
            column: 35
          }
        },
        loc: {
          start: {
            line: 288,
            column: 51
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 288
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 336,
            column: 51
          },
          end: {
            line: 336,
            column: 52
          }
        },
        loc: {
          start: {
            line: 336,
            column: 56
          },
          end: {
            line: 336,
            column: 62
          }
        },
        line: 336
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 26
          }
        },
        loc: {
          start: {
            line: 347,
            column: 40
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 347
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 35
          },
          end: {
            line: 39,
            column: 38
          }
        }, {
          start: {
            line: 39,
            column: 41
          },
          end: {
            line: 41,
            column: 5
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 14
          }
        }, {
          start: {
            line: 39,
            column: 18
          },
          end: {
            line: 39,
            column: 32
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 29
          },
          end: {
            line: 48,
            column: 45
          }
        }, {
          start: {
            line: 48,
            column: 48
          },
          end: {
            line: 48,
            column: 65
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 20
          }
        }, {
          start: {
            line: 52,
            column: 24
          },
          end: {
            line: 52,
            column: 27
          }
        }, {
          start: {
            line: 52,
            column: 31
          },
          end: {
            line: 52,
            column: 45
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 20
          }
        }, {
          start: {
            line: 55,
            column: 24
          },
          end: {
            line: 55,
            column: 47
          }
        }, {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 55,
            column: 76
          }
        }],
        line: 55
      },
      "8": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "9": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 17
          },
          end: {
            line: 61,
            column: 31
          }
        }],
        line: 61
      },
      "10": {
        loc: {
          start: {
            line: 67,
            column: 32
          },
          end: {
            line: 67,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 32
          },
          end: {
            line: 67,
            column: 53
          }
        }, {
          start: {
            line: 67,
            column: 57
          },
          end: {
            line: 67,
            column: 88
          }
        }],
        line: 67
      },
      "11": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "12": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 29
          }
        }, {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 69,
            column: 79
          }
        }],
        line: 69
      },
      "13": {
        loc: {
          start: {
            line: 70,
            column: 23
          },
          end: {
            line: 70,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 88
          }
        }, {
          start: {
            line: 70,
            column: 91
          },
          end: {
            line: 70,
            column: 95
          }
        }],
        line: 70
      },
      "14": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: 73,
            column: 19
          },
          end: {
            line: 75,
            column: 13
          }
        }],
        line: 71
      },
      "15": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 20
          }
        }, {
          start: {
            line: 71,
            column: 25
          },
          end: {
            line: 71,
            column: 33
          }
        }, {
          start: {
            line: 71,
            column: 37
          },
          end: {
            line: 71,
            column: 45
          }
        }],
        line: 71
      },
      "16": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "17": {
        loc: {
          start: {
            line: 85,
            column: 19
          },
          end: {
            line: 85,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 19
          },
          end: {
            line: 85,
            column: 41
          }
        }, {
          start: {
            line: 85,
            column: 45
          },
          end: {
            line: 85,
            column: 62
          }
        }],
        line: 85
      },
      "18": {
        loc: {
          start: {
            line: 87,
            column: 23
          },
          end: {
            line: 87,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 23
          },
          end: {
            line: 87,
            column: 62
          }
        }, {
          start: {
            line: 87,
            column: 66
          },
          end: {
            line: 87,
            column: 71
          }
        }],
        line: 87
      },
      "19": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "20": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "21": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 95,
            column: 23
          }
        }, {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 28
          }
        }, {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 99,
            column: 33
          }
        }, {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 101,
            column: 38
          }
        }, {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 21
          }
        }],
        line: 93
      },
      "22": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "23": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "24": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "25": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 146
      },
      "26": {
        loc: {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "27": {
        loc: {
          start: {
            line: 148,
            column: 19
          },
          end: {
            line: 148,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 19
          },
          end: {
            line: 148,
            column: 35
          }
        }, {
          start: {
            line: 148,
            column: 39
          },
          end: {
            line: 148,
            column: 70
          }
        }],
        line: 148
      },
      "28": {
        loc: {
          start: {
            line: 177,
            column: 22
          },
          end: {
            line: 177,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 22
          },
          end: {
            line: 177,
            column: 37
          }
        }, {
          start: {
            line: 177,
            column: 41
          },
          end: {
            line: 177,
            column: 54
          }
        }, {
          start: {
            line: 177,
            column: 58
          },
          end: {
            line: 177,
            column: 62
          }
        }],
        line: 177
      },
      "29": {
        loc: {
          start: {
            line: 196,
            column: 26
          },
          end: {
            line: 196,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 26
          },
          end: {
            line: 196,
            column: 41
          }
        }, {
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 58
          }
        }, {
          start: {
            line: 196,
            column: 62
          },
          end: {
            line: 196,
            column: 66
          }
        }],
        line: 196
      },
      "30": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "31": {
        loc: {
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: 233,
            column: 15
          },
          end: {
            line: 237,
            column: 9
          }
        }],
        line: 231
      },
      "32": {
        loc: {
          start: {
            line: 233,
            column: 15
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 15
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: 235,
            column: 15
          },
          end: {
            line: 237,
            column: 9
          }
        }],
        line: 233
      },
      "33": {
        loc: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "34": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "35": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "36": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "37": {
        loc: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "38": {
        loc: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "39": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "40": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],
      sourcesContent: ["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index\n        const user = await prisma.user.findFirst({\n            where: {\n                email: email,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from role (handle case where user has no role)\n        let permissions: string[] = [];\n        if (user.role?.permissions) {\n            permissions = user.role.permissions.map(p => p.name);\n        } else if (user.permissions && Array.isArray(user.permissions)) {\n            // Convert permission IDs to names\n            const permissionRecords = await prisma.permission.findMany({\n                where: {\n                    id: {\n                        in: user.permissions.map(id => parseInt(id.toString()))\n                    }\n                },\n                select: { name: true }\n            });\n            permissions = permissionRecords.map(p => p.name);\n        }\n\n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            shopId: user.shopId,\n            permissions\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            shopId: user.shopId,\n            permissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n\n    try {\n        // Check cache first for token validation result\n        const cachedResult = await cacheService.get(tokenKey);\n        if (cachedResult) {\n            return cachedResult as TokenPayload;\n        }\n\n        // Verify token\n        const payload = jwt.verify(token, JWT_SECRET) as TokenPayload;\n\n        // Cache the valid token payload (shorter TTL for security)\n        await cacheService.set(tokenKey, payload, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n\n        return payload;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Import the proper permission checking utility\n    const { hasPermission: checkPermission } = await import('@/lib/utils/permissions');\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await prisma.user.findFirst({\n            where: { id: tokenPayload.sub, isActive: true },\n            include: {\n                role: {\n                    include: {\n                        permissions: { select: { name: true } }\n                    }\n                }\n            }\n        });\n\n        if (user) {\n            const permissions = user.role.permissions.map(p => p.name);\n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        return null;\n    }\n\n    const userId = Number(payload.sub);\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await prisma.user.findFirst({\n            where: {\n                id: userId,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role.name,\n            permissions: user.role.permissions.map(p => p.name)\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],
      names: ["authenticateUser", "generateToken", "getUserFromDecodedPayload", "getUserFromToken", "hasPermission", "parseTimeStringToSeconds", "verifyToken", "JWT_SECRET", "process", "env", "JWT_EXPIRES_IN", "JWT_ACCESS_TOKEN_EXPIRES_IN", "timeStr", "lastChar", "slice", "num", "parseInt", "isNaN", "email", "password", "console", "time", "user", "prisma", "findFirst", "where", "isActive", "include", "role", "permissions", "select", "name", "timeEnd", "success", "message", "isPasswordValid", "bcrypt", "compare", "map", "p", "Array", "isArray", "permissionRecords", "permission", "findMany", "id", "in", "toString", "token", "sub", "username", "roleId", "shopId", "userSession", "fullName", "roleName", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "USER_SESSION", "userId", "set", "TTL", "error", "payload", "jwt", "sign", "expiresIn", "tokenKey", "TOKEN_VALIDATION", "substring", "cachedResult", "get", "verify", "TokenExpiredError", "expiredAt", "JsonWebTokenError", "tokenPayload", "checkPermission", "permissionsCacheKey", "USER_PERMISSIONS", "cachedPermissions", "log", "Number", "cachedUser", "userWithPermissions"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8f966454b3f4de96917975c05309f694bd086046"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_y22h5fuwr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_y22h5fuwr();
cov_y22h5fuwr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[0]++;
  cov_y22h5fuwr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_y22h5fuwr().s[3]++;
_export(exports, {
  authenticateUser: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[1]++;
    cov_y22h5fuwr().s[4]++;
    return authenticateUser;
  },
  generateToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[2]++;
    cov_y22h5fuwr().s[5]++;
    return generateToken;
  },
  getUserFromDecodedPayload: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[3]++;
    cov_y22h5fuwr().s[6]++;
    return getUserFromDecodedPayload;
  },
  getUserFromToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[4]++;
    cov_y22h5fuwr().s[7]++;
    return getUserFromToken;
  },
  hasPermission: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[5]++;
    cov_y22h5fuwr().s[8]++;
    return hasPermission;
  },
  parseTimeStringToSeconds: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[6]++;
    cov_y22h5fuwr().s[9]++;
    return parseTimeStringToSeconds;
  },
  verifyToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[7]++;
    cov_y22h5fuwr().s[10]++;
    return verifyToken;
  }
});
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[11]++, _interop_require_default(require("jsonwebtoken")));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[12]++, _interop_require_default(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[13]++, _interop_require_default(require("../lib/prisma")));
const _cache =
/* istanbul ignore next */
(cov_y22h5fuwr().s[14]++, require("../lib/cache"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[8]++;
  cov_y22h5fuwr().s[15]++;
  return /* istanbul ignore next */(cov_y22h5fuwr().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[0][1]++, {
    default: obj
  });
}
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[9]++;
  cov_y22h5fuwr().s[16]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[2][0]++;
    cov_y22h5fuwr().s[17]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[2][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[18]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[19]++, new WeakMap());
  /* istanbul ignore next */
  cov_y22h5fuwr().s[20]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[10]++;
    cov_y22h5fuwr().s[21]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[3][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[3][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[11]++;
  cov_y22h5fuwr().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][1]++, obj) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[4][0]++;
    cov_y22h5fuwr().s[23]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[4][1]++;
  }
  cov_y22h5fuwr().s[24]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[6][0]++;
    cov_y22h5fuwr().s[25]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[6][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[26]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[27]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[9][0]++, cache) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[9][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[8][0]++;
    cov_y22h5fuwr().s[28]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[8][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[29]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[30]++,
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[10][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[10][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[31]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[12][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[12][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[11][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[33]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][1]++, null));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][0]++, desc) && (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[15][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[14][0]++;
        cov_y22h5fuwr().s[35]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[14][1]++;
        cov_y22h5fuwr().s[36]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[11][1]++;
    }
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[37]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_y22h5fuwr().s[38]++;
  if (cache) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[16][0]++;
    cov_y22h5fuwr().s[39]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[16][1]++;
  }
  cov_y22h5fuwr().s[40]++;
  return newObj;
}
// Secret key for JWT - should be moved to environment variables in production
const JWT_SECRET =
/* istanbul ignore next */
(cov_y22h5fuwr().s[41]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[17][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[17][1]++, "your-secret-key"));
// Changed token expiration to 12h (from 24h) for better security
const JWT_EXPIRES_IN =
/* istanbul ignore next */
(cov_y22h5fuwr().s[42]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[18][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[18][1]++, "12h"));
/* istanbul ignore next */
cov_y22h5fuwr().s[43]++;
const parseTimeStringToSeconds = timeStr => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[12]++;
  cov_y22h5fuwr().s[44]++;
  if (!timeStr) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[19][0]++;
    cov_y22h5fuwr().s[45]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[19][1]++;
  }
  const lastChar =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[46]++, timeStr.slice(-1));
  const num =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[47]++, parseInt(timeStr.slice(0, -1)));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[48]++;
  if (isNaN(num)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[20][0]++;
    cov_y22h5fuwr().s[49]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[20][1]++;
  }
  cov_y22h5fuwr().s[50]++;
  switch (lastChar) {
    case "s":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][0]++;
      cov_y22h5fuwr().s[51]++;
      return num;
    case "m":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][1]++;
      cov_y22h5fuwr().s[52]++;
      return num * 60;
    case "h":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][2]++;
      cov_y22h5fuwr().s[53]++;
      return num * 60 * 60;
    case "d":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][3]++;
      cov_y22h5fuwr().s[54]++;
      return num * 60 * 60 * 24;
    default:
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][4]++;
      cov_y22h5fuwr().s[55]++;
      if (!isNaN(parseInt(timeStr))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[22][0]++;
        cov_y22h5fuwr().s[56]++;
        return parseInt(timeStr);
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[22][1]++;
      }
      cov_y22h5fuwr().s[57]++;
      return 0;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[58]++;
const authenticateUser = async (email, password) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[13]++;
  cov_y22h5fuwr().s[59]++;
  try {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[60]++;
    console.time("user authentication query");
    // Optimized single query using the new composite index
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[61]++, await _prisma.default.user.findFirst({
      where: {
        email: email,
        isActive: true
      },
      include: {
        role: {
          include: {
            permissions: {
              select: {
                name: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[62]++;
    console.timeEnd("user authentication query");
    // If user not found
    /* istanbul ignore next */
    cov_y22h5fuwr().s[63]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[23][0]++;
      cov_y22h5fuwr().s[64]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[23][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[65]++, await _bcryptjs.default.compare(password, user.password));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[66]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[24][0]++;
      cov_y22h5fuwr().s[67]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[24][1]++;
    }
    // Get permissions from role (handle case where user has no role)
    let permissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[68]++, []);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[69]++;
    if (user.role?.permissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[25][0]++;
      cov_y22h5fuwr().s[70]++;
      permissions = user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[14]++;
        cov_y22h5fuwr().s[71]++;
        return p.name;
      });
    } else {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[25][1]++;
      cov_y22h5fuwr().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[27][0]++, user.permissions) &&
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[27][1]++, Array.isArray(user.permissions))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[26][0]++;
        // Convert permission IDs to names
        const permissionRecords =
        /* istanbul ignore next */
        (cov_y22h5fuwr().s[73]++, await _prisma.default.permission.findMany({
          where: {
            id: {
              in: user.permissions.map(id => {
                /* istanbul ignore next */
                cov_y22h5fuwr().f[15]++;
                cov_y22h5fuwr().s[74]++;
                return parseInt(id.toString());
              })
            }
          },
          select: {
            name: true
          }
        }));
        /* istanbul ignore next */
        cov_y22h5fuwr().s[75]++;
        permissions = permissionRecords.map(p => {
          /* istanbul ignore next */
          cov_y22h5fuwr().f[16]++;
          cov_y22h5fuwr().s[76]++;
          return p.name;
        });
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[26][1]++;
      }
    }
    // Generate JWT token
    const token =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[77]++, generateToken({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      shopId: user.shopId,
      permissions
    }));
    const userSession =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[78]++, {
      id: user.id,
      username: user.name,
      fullName: user.name,
      email: user.email,
      roleId: user.roleId,
      roleName:
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][0]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][1]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][2]++, null),
      shopId: user.shopId,
      permissions,
      role: user.role
    });
    // Cache user session for faster subsequent requests
    const cacheKey =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[79]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
      userId: user.id
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[80]++;
    await _cache.cacheService.set(cacheKey, userSession, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[81]++;
    return {
      success: true,
      token,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName:
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][0]++, user.role?.name) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][1]++, user.roleName) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][2]++, null),
        shopId: user.shopId,
        permissions
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[82]++;
    console.error("Authentication error:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[83]++;
    return {
      success: false,
      message: "Authentication failed"
    };
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[84]++;
const generateToken = payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[17]++;
  cov_y22h5fuwr().s[85]++;
  return _jsonwebtoken.default.sign(payload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN
  });
};
/* istanbul ignore next */
cov_y22h5fuwr().s[86]++;
const verifyToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[18]++;
  const tokenKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[87]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.TOKEN_VALIDATION, {
    token: token.substring(0, 20)
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[88]++;
  try {
    // Check cache first for token validation result
    const cachedResult =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[89]++, await _cache.cacheService.get(tokenKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[90]++;
    if (cachedResult) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[30][0]++;
      cov_y22h5fuwr().s[91]++;
      return cachedResult;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[30][1]++;
    }
    // Verify token
    const payload =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[92]++, _jsonwebtoken.default.verify(token, JWT_SECRET));
    // Cache the valid token payload (shorter TTL for security)
    /* istanbul ignore next */
    cov_y22h5fuwr().s[93]++;
    await _cache.cacheService.set(tokenKey, payload, _cache.CACHE_CONFIG.TTL.TOKEN_VALIDATION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[94]++;
    return payload;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[95]++;
    // Log the error here if desired
    if (error instanceof _jsonwebtoken.default.TokenExpiredError) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[31][0]++;
      cov_y22h5fuwr().s[96]++;
      console.error("Token expired during verification:", error.expiredAt);
    } else {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[31][1]++;
      cov_y22h5fuwr().s[97]++;
      if (error instanceof _jsonwebtoken.default.JsonWebTokenError) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[32][0]++;
        cov_y22h5fuwr().s[98]++;
        console.error("Invalid token during verification:", error.message);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[32][1]++;
        cov_y22h5fuwr().s[99]++;
        console.error("Unknown token verification error:", error);
      }
    }
    /* istanbul ignore next */
    cov_y22h5fuwr().s[100]++;
    throw error; // Re-throw the error
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[101]++;
const hasPermission = async (tokenPayload, permission) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[19]++;
  // Import the proper permission checking utility
  const {
    hasPermission: checkPermission
  } =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[102]++, await Promise.resolve().then(() => {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[20]++;
    cov_y22h5fuwr().s[103]++;
    return /*#__PURE__*/_interop_require_wildcard(require("../lib/utils/permissions"));
  }));
  // Quick check from token payload first
  /* istanbul ignore next */
  cov_y22h5fuwr().s[104]++;
  if (tokenPayload.permissions) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[33][0]++;
    cov_y22h5fuwr().s[105]++;
    if (checkPermission(tokenPayload.permissions, permission)) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[34][0]++;
      cov_y22h5fuwr().s[106]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[34][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[33][1]++;
  }
  // If not in token, check cached user permissions
  const permissionsCacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[107]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_PERMISSIONS, {
    userId: tokenPayload.sub
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[108]++;
  try {
    const cachedPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[109]++, await _cache.cacheService.get(permissionsCacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[110]++;
    if (cachedPermissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[35][0]++;
      cov_y22h5fuwr().s[111]++;
      return checkPermission(cachedPermissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[35][1]++;
    }
    // Fallback to database query if not cached
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[112]++, await _prisma.default.user.findFirst({
      where: {
        id: tokenPayload.sub,
        isActive: true
      },
      include: {
        role: {
          include: {
            permissions: {
              select: {
                name: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[113]++;
    if (user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[36][0]++;
      const permissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[114]++, user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[21]++;
        cov_y22h5fuwr().s[115]++;
        return p.name;
      }));
      // Cache permissions for future checks
      /* istanbul ignore next */
      cov_y22h5fuwr().s[116]++;
      await _cache.cacheService.set(permissionsCacheKey, permissions, _cache.CACHE_CONFIG.TTL.USER_PERMISSIONS);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[117]++;
      return checkPermission(permissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[36][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[118]++;
    console.error("Error checking permissions:", error);
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[119]++;
  return false;
};
/* istanbul ignore next */
cov_y22h5fuwr().s[120]++;
const getUserFromDecodedPayload = async payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[22]++;
  cov_y22h5fuwr().s[121]++;
  console.log("getUserFromDecodedPayload received payload:", payload);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[122]++;
  if (!payload) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[37][0]++;
    cov_y22h5fuwr().s[123]++;
    console.error("Invalid token payload provided to getUserFromDecodedPayload");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[124]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[37][1]++;
  }
  cov_y22h5fuwr().s[125]++;
  if (!payload.sub) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[38][0]++;
    cov_y22h5fuwr().s[126]++;
    console.error("Token payload missing user ID (sub claim)");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[127]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[38][1]++;
  }
  const userId =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[128]++, Number(payload.sub));
  const cacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[129]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
    userId
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[130]++;
  try {
    // Try to get user from cache first
    const cachedUser =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[131]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[132]++;
    if (cachedUser) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[39][0]++;
      cov_y22h5fuwr().s[133]++;
      console.log("User found in cache:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[134]++;
      return cachedUser;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[39][1]++;
    }
    cov_y22h5fuwr().s[135]++;
    console.log("Looking up user with ID:", userId);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[136]++;
    console.time("prisma.user.findFirst for auth"); // Start timer
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[137]++, await _prisma.default.user.findFirst({
      where: {
        id: userId,
        isActive: true
      },
      include: {
        role: {
          include: {
            permissions: {
              select: {
                name: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[138]++;
    console.timeEnd("prisma.user.findFirst for auth"); // End timer
    /* istanbul ignore next */
    cov_y22h5fuwr().s[139]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[40][0]++;
      cov_y22h5fuwr().s[140]++;
      console.error("User not found for ID:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[141]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[40][1]++;
    }
    const userWithPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[142]++, {
      ...user,
      roleName: user.role.name,
      permissions: user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[23]++;
        cov_y22h5fuwr().s[143]++;
        return p.name;
      })
    });
    // Cache the user session
    /* istanbul ignore next */
    cov_y22h5fuwr().s[144]++;
    await _cache.cacheService.set(cacheKey, userWithPermissions, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[145]++;
    console.log("User found and cached:", user.id, user.name);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[146]++;
    return userWithPermissions;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[147]++;
    console.error("Error getting user from decoded payload:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[148]++;
    return null;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[149]++;
const getUserFromToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[24]++;
  const payload =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[150]++, await verifyToken(token));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[151]++;
  return getUserFromDecodedPayload(payload);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,