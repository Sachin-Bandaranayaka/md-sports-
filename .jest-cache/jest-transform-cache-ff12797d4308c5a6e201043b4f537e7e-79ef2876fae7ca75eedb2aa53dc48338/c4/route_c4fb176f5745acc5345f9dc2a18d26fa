b1f7b76a9fa41898a6700be550814ef7
"use strict";

/* istanbul ignore next */
function cov_1i5576ayr4() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts";
  var hash = "a3181c176cedca7c9fd2d27c44602a984c5d8ca9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "11": {
        start: {
          line: 33,
          column: 38
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "12": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 47,
          column: 6
        }
      },
      "13": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 191,
          column: 5
        }
      },
      "14": {
        start: {
          line: 51,
          column: 33
        },
        end: {
          line: 51,
          column: 53
        }
      },
      "15": {
        start: {
          line: 53,
          column: 19
        },
        end: {
          line: 53,
          column: 41
        }
      },
      "16": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "17": {
        start: {
          line: 55,
          column: 32
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "18": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "19": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "20": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "21": {
        start: {
          line: 96,
          column: 21
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "22": {
        start: {
          line: 97,
          column: 22
        },
        end: {
          line: 97,
          column: 84
        }
      },
      "23": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 39
        }
      },
      "24": {
        start: {
          line: 99,
          column: 21
        },
        end: {
          line: 99,
          column: 45
        }
      },
      "25": {
        start: {
          line: 100,
          column: 26
        },
        end: {
          line: 100,
          column: 55
        }
      },
      "26": {
        start: {
          line: 101,
          column: 18
        },
        end: {
          line: 101,
          column: 45
        }
      },
      "27": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 55
        }
      },
      "28": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 51
        }
      },
      "29": {
        start: {
          line: 104,
          column: 22
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "30": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 36
        }
      },
      "31": {
        start: {
          line: 105,
          column: 18
        },
        end: {
          line: 105,
          column: 36
        }
      },
      "32": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 65
        }
      },
      "33": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 106,
          column: 65
        }
      },
      "34": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "35": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "36": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "37": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 64
        }
      },
      "39": {
        start: {
          line: 133,
          column: 27
        },
        end: {
          line: 133,
          column: 64
        }
      },
      "40": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 60
        }
      },
      "41": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 134,
          column: 60
        }
      },
      "42": {
        start: {
          line: 137,
          column: 43
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "43": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "44": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 61
        }
      },
      "45": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "46": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "47": {
        start: {
          line: 195,
          column: 97
        },
        end: {
          line: 195,
          column: 117
        }
      },
      "48": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "49": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "50": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "51": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "52": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "53": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "54": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "55": {
        start: {
          line: 230,
          column: 23
        },
        end: {
          line: 307,
          column: 10
        }
      },
      "56": {
        start: {
          line: 232,
          column: 35
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "57": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "58": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 267,
          column: 19
        }
      },
      "59": {
        start: {
          line: 268,
          column: 19
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "60": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 278,
          column: 19
        }
      },
      "61": {
        start: {
          line: 279,
          column: 19
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "62": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 290,
          column: 19
        }
      },
      "63": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 300,
          column: 19
        }
      },
      "64": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "65": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "66": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 60
        }
      },
      "67": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 323,
          column: 11
        }
      },
      "68": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 424,
          column: 5
        }
      },
      "69": {
        start: {
          line: 328,
          column: 33
        },
        end: {
          line: 328,
          column: 53
        }
      },
      "70": {
        start: {
          line: 329,
          column: 19
        },
        end: {
          line: 329,
          column: 41
        }
      },
      "71": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "72": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "73": {
        start: {
          line: 339,
          column: 28
        },
        end: {
          line: 347,
          column: 10
        }
      },
      "74": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "75": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 354,
          column: 15
        }
      },
      "76": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 410,
          column: 11
        }
      },
      "77": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "78": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 369,
          column: 19
        }
      },
      "79": {
        start: {
          line: 370,
          column: 19
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "80": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 380,
          column: 19
        }
      },
      "81": {
        start: {
          line: 381,
          column: 19
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "82": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 392,
          column: 19
        }
      },
      "83": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 402,
          column: 19
        }
      },
      "84": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 409,
          column: 15
        }
      },
      "85": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 414,
          column: 11
        }
      },
      "86": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 416,
          column: 60
        }
      },
      "87": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 423,
          column: 11
        }
      },
      "88": {
        start: {
          line: 427,
          column: 4
        },
        end: {
          line: 618,
          column: 5
        }
      },
      "89": {
        start: {
          line: 428,
          column: 101
        },
        end: {
          line: 428,
          column: 121
        }
      },
      "90": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "91": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 436,
          column: 15
        }
      },
      "92": {
        start: {
          line: 439,
          column: 27
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "93": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "94": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 451,
          column: 15
        }
      },
      "95": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "96": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 460,
          column: 15
        }
      },
      "97": {
        start: {
          line: 463,
          column: 36
        },
        end: {
          line: 467,
          column: 10
        }
      },
      "98": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "99": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 474,
          column: 15
        }
      },
      "100": {
        start: {
          line: 477,
          column: 23
        },
        end: {
          line: 603,
          column: 10
        }
      },
      "101": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "102": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 489,
          column: 19
        }
      },
      "103": {
        start: {
          line: 490,
          column: 19
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "104": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 500,
          column: 19
        }
      },
      "105": {
        start: {
          line: 501,
          column: 19
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "106": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 512,
          column: 19
        }
      },
      "107": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 522,
          column: 19
        }
      },
      "108": {
        start: {
          line: 525,
          column: 39
        },
        end: {
          line: 551,
          column: 14
        }
      },
      "109": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 597,
          column: 13
        }
      },
      "110": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 563,
          column: 19
        }
      },
      "111": {
        start: {
          line: 564,
          column: 19
        },
        end: {
          line: 597,
          column: 13
        }
      },
      "112": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 574,
          column: 19
        }
      },
      "113": {
        start: {
          line: 575,
          column: 19
        },
        end: {
          line: 597,
          column: 13
        }
      },
      "114": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 586,
          column: 19
        }
      },
      "115": {
        start: {
          line: 587,
          column: 16
        },
        end: {
          line: 596,
          column: 19
        }
      },
      "116": {
        start: {
          line: 598,
          column: 12
        },
        end: {
          line: 602,
          column: 14
        }
      },
      "117": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 608,
          column: 11
        }
      },
      "118": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 60
        }
      },
      "119": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 617,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 33,
            column: 38
          },
          end: {
            line: 33,
            column: 39
          }
        },
        loc: {
          start: {
            line: 33,
            column: 53
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 33
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 49,
            column: 18
          }
        },
        loc: {
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 192,
            column: 1
          }
        },
        line: 49
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 19
          }
        },
        loc: {
          start: {
            line: 193,
            column: 29
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 193
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 230,
            column: 58
          },
          end: {
            line: 230,
            column: 59
          }
        },
        loc: {
          start: {
            line: 230,
            column: 70
          },
          end: {
            line: 307,
            column: 9
          }
        },
        line: 230
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 326,
            column: 15
          },
          end: {
            line: 326,
            column: 21
          }
        },
        loc: {
          start: {
            line: 326,
            column: 31
          },
          end: {
            line: 425,
            column: 1
          }
        },
        line: 326
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 357,
            column: 43
          },
          end: {
            line: 357,
            column: 44
          }
        },
        loc: {
          start: {
            line: 357,
            column: 55
          },
          end: {
            line: 410,
            column: 9
          }
        },
        line: 357
      },
      "12": {
        name: "PATCH",
        decl: {
          start: {
            line: 426,
            column: 15
          },
          end: {
            line: 426,
            column: 20
          }
        },
        loc: {
          start: {
            line: 426,
            column: 30
          },
          end: {
            line: 619,
            column: 1
          }
        },
        line: 426
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 477,
            column: 58
          },
          end: {
            line: 477,
            column: 59
          }
        },
        loc: {
          start: {
            line: 477,
            column: 70
          },
          end: {
            line: 603,
            column: 9
          }
        },
        line: 477
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 46
          }
        }, {
          start: {
            line: 39,
            column: 50
          },
          end: {
            line: 39,
            column: 73
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 50
          }
        }, {
          start: {
            line: 41,
            column: 54
          },
          end: {
            line: 41,
            column: 79
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 96,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 96,
            column: 54
          }
        }, {
          start: {
            line: 96,
            column: 58
          },
          end: {
            line: 96,
            column: 61
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 40
          },
          end: {
            line: 97,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 40
          },
          end: {
            line: 97,
            column: 65
          }
        }, {
          start: {
            line: 97,
            column: 69
          },
          end: {
            line: 97,
            column: 73
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 101,
            column: 18
          },
          end: {
            line: 101,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 18
          },
          end: {
            line: 101,
            column: 39
          }
        }, {
          start: {
            line: 101,
            column: 43
          },
          end: {
            line: 101,
            column: 45
          }
        }],
        line: 101
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 105,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 105,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 106,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 106,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "13": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 131,
            column: 32
          }
        }],
        line: 131
      },
      "14": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "15": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "16": {
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 44
          },
          end: {
            line: 187,
            column: 57
          }
        }, {
          start: {
            line: 187,
            column: 60
          },
          end: {
            line: 187,
            column: 73
          }
        }],
        line: 187
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 197,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 197,
            column: 17
          }
        }, {
          start: {
            line: 197,
            column: 21
          },
          end: {
            line: 197,
            column: 33
          }
        }, {
          start: {
            line: 197,
            column: 37
          },
          end: {
            line: 197,
            column: 47
          }
        }, {
          start: {
            line: 197,
            column: 51
          },
          end: {
            line: 197,
            column: 56
          }
        }, {
          start: {
            line: 197,
            column: 60
          },
          end: {
            line: 197,
            column: 67
          }
        }, {
          start: {
            line: 197,
            column: 71
          },
          end: {
            line: 197,
            column: 80
          }
        }],
        line: 197
      },
      "19": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "20": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "21": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 221,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 221,
            column: 31
          }
        }, {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 47
          }
        }],
        line: 221
      },
      "22": {
        loc: {
          start: {
            line: 237,
            column: 33
          },
          end: {
            line: 237,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 47
          },
          end: {
            line: 237,
            column: 72
          }
        }, {
          start: {
            line: 237,
            column: 75
          },
          end: {
            line: 237,
            column: 79
          }
        }],
        line: 237
      },
      "23": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: 268,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        }],
        line: 257
      },
      "24": {
        loc: {
          start: {
            line: 268,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: 279,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        }],
        line: 268
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 41
          }
        }, {
          start: {
            line: 268,
            column: 45
          },
          end: {
            line: 268,
            column: 66
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 279,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 19
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "27": {
        loc: {
          start: {
            line: 279,
            column: 23
          },
          end: {
            line: 279,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 23
          },
          end: {
            line: 279,
            column: 42
          }
        }, {
          start: {
            line: 279,
            column: 46
          },
          end: {
            line: 279,
            column: 57
          }
        }],
        line: 279
      },
      "28": {
        loc: {
          start: {
            line: 320,
            column: 19
          },
          end: {
            line: 320,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 44
          },
          end: {
            line: 320,
            column: 57
          }
        }, {
          start: {
            line: 320,
            column: 60
          },
          end: {
            line: 320,
            column: 73
          }
        }],
        line: 320
      },
      "29": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "30": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "31": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        }, {
          start: {
            line: 370,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        }],
        line: 359
      },
      "32": {
        loc: {
          start: {
            line: 370,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        }, {
          start: {
            line: 381,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        }],
        line: 370
      },
      "33": {
        loc: {
          start: {
            line: 370,
            column: 23
          },
          end: {
            line: 370,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 23
          },
          end: {
            line: 370,
            column: 53
          }
        }, {
          start: {
            line: 370,
            column: 57
          },
          end: {
            line: 370,
            column: 90
          }
        }],
        line: 370
      },
      "34": {
        loc: {
          start: {
            line: 381,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 19
          },
          end: {
            line: 403,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "35": {
        loc: {
          start: {
            line: 381,
            column: 23
          },
          end: {
            line: 381,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 23
          },
          end: {
            line: 381,
            column: 54
          }
        }, {
          start: {
            line: 381,
            column: 58
          },
          end: {
            line: 381,
            column: 81
          }
        }],
        line: 381
      },
      "36": {
        loc: {
          start: {
            line: 420,
            column: 19
          },
          end: {
            line: 420,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 44
          },
          end: {
            line: 420,
            column: 57
          }
        }, {
          start: {
            line: 420,
            column: 60
          },
          end: {
            line: 420,
            column: 73
          }
        }],
        line: 420
      },
      "37": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "38": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 430,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 430,
            column: 15
          }
        }, {
          start: {
            line: 430,
            column: 19
          },
          end: {
            line: 430,
            column: 24
          }
        }, {
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 430,
            column: 40
          }
        }, {
          start: {
            line: 430,
            column: 44
          },
          end: {
            line: 430,
            column: 54
          }
        }, {
          start: {
            line: 430,
            column: 58
          },
          end: {
            line: 430,
            column: 63
          }
        }, {
          start: {
            line: 430,
            column: 67
          },
          end: {
            line: 430,
            column: 74
          }
        }, {
          start: {
            line: 430,
            column: 78
          },
          end: {
            line: 430,
            column: 87
          }
        }],
        line: 430
      },
      "39": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "40": {
        loc: {
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "41": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 454,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 454,
            column: 31
          }
        }, {
          start: {
            line: 454,
            column: 35
          },
          end: {
            line: 454,
            column: 47
          }
        }],
        line: 454
      },
      "42": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "43": {
        loc: {
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        }, {
          start: {
            line: 490,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        }],
        line: 479
      },
      "44": {
        loc: {
          start: {
            line: 490,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        }, {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        }],
        line: 490
      },
      "45": {
        loc: {
          start: {
            line: 490,
            column: 23
          },
          end: {
            line: 490,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 490,
            column: 23
          },
          end: {
            line: 490,
            column: 61
          }
        }, {
          start: {
            line: 490,
            column: 65
          },
          end: {
            line: 490,
            column: 106
          }
        }],
        line: 490
      },
      "46": {
        loc: {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 523,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "47": {
        loc: {
          start: {
            line: 501,
            column: 23
          },
          end: {
            line: 501,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 23
          },
          end: {
            line: 501,
            column: 62
          }
        }, {
          start: {
            line: 501,
            column: 66
          },
          end: {
            line: 501,
            column: 97
          }
        }],
        line: 501
      },
      "48": {
        loc: {
          start: {
            line: 533,
            column: 33
          },
          end: {
            line: 533,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 533,
            column: 47
          },
          end: {
            line: 533,
            column: 72
          }
        }, {
          start: {
            line: 533,
            column: 75
          },
          end: {
            line: 533,
            column: 79
          }
        }],
        line: 533
      },
      "49": {
        loc: {
          start: {
            line: 553,
            column: 12
          },
          end: {
            line: 597,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 12
          },
          end: {
            line: 597,
            column: 13
          }
        }, {
          start: {
            line: 564,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        }],
        line: 553
      },
      "50": {
        loc: {
          start: {
            line: 564,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 564,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        }, {
          start: {
            line: 575,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        }],
        line: 564
      },
      "51": {
        loc: {
          start: {
            line: 564,
            column: 23
          },
          end: {
            line: 564,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 564,
            column: 23
          },
          end: {
            line: 564,
            column: 41
          }
        }, {
          start: {
            line: 564,
            column: 45
          },
          end: {
            line: 564,
            column: 66
          }
        }],
        line: 564
      },
      "52": {
        loc: {
          start: {
            line: 575,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 19
          },
          end: {
            line: 597,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "53": {
        loc: {
          start: {
            line: 575,
            column: 23
          },
          end: {
            line: 575,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 23
          },
          end: {
            line: 575,
            column: 42
          }
        }, {
          start: {
            line: 575,
            column: 46
          },
          end: {
            line: 575,
            column: 57
          }
        }],
        line: 575
      },
      "54": {
        loc: {
          start: {
            line: 614,
            column: 19
          },
          end: {
            line: 614,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 614,
            column: 44
          },
          end: {
            line: 614,
            column: 57
          }
        }, {
          start: {
            line: 614,
            column: 60
          },
          end: {
            line: 614,
            column: 73
          }
        }],
        line: 614
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0, 0, 0, 0, 0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\n// Helper function to transform transaction data for client consumption\nconst transformTransactionForClient = (transaction: any): any => {\n    return {\n        id: transaction.id,\n        date: transaction.date,\n        description: transaction.description,\n        accountId: transaction.accountId,\n        accountName: transaction.account?.name || transaction.accountName,\n        toAccountId: transaction.toAccountId,\n        toAccountName: transaction.toAccount?.name || transaction.toAccountName,\n        type: transaction.type,\n        amount: Number(transaction.amount), // Convert Decimal to number\n        reference: transaction.reference,\n        category: transaction.category,\n        createdAt: transaction.createdAt\n    };\n};\n\n// GET: Fetch transactions (paginated & filtered)\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n\n        // Single-record fetch by id keeps behaviour (cheap path)\n        const id = searchParams.get('id');\n        if (id) {\n            const transaction = await prisma.transaction.findUnique({\n                where: { id: parseInt(id, 10) },\n                select: {\n                    id: true,\n                    date: true,\n                    description: true,\n                    accountId: true,\n                    toAccountId: true,\n                    amount: true,\n                    reference: true,\n                    type: true,\n                    category: true,\n                    createdAt: true,\n                    account: { select: { name: true } },\n                    toAccount: { select: { name: true } }\n                }\n            });\n\n            if (!transaction) {\n                return NextResponse.json({ success: false, message: 'Transaction not found' }, { status: 404 });\n            }\n\n            return NextResponse.json({ success: true, data: transformTransactionForClient(transaction) });\n        }\n\n        // Pagination & filters\n        const page = parseInt(searchParams.get('page') || '1', 10);\n        const limit = Math.min(parseInt(searchParams.get('limit') || '50', 10), 200);\n        const skip = (page - 1) * limit;\n\n        const type = searchParams.get('type');\n        const accountId = searchParams.get('accountId');\n        const q = searchParams.get('q') || '';\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n\n        const where: Prisma.TransactionWhereInput = {};\n\n        if (type) where.type = type;\n        if (accountId) where.accountId = parseInt(accountId, 10);\n\n        if (q) {\n            where.OR = [\n                { description: { contains: q, mode: 'insensitive' } },\n                { category: { contains: q, mode: 'insensitive' } },\n                { account: { name: { contains: q, mode: 'insensitive' } } }\n            ];\n        }\n\n        if (startDate || endDate) {\n            where.date = {};\n            if (startDate) (where.date as any).gte = new Date(startDate);\n            if (endDate) (where.date as any).lte = new Date(endDate);\n        }\n\n        // Fetch paginated data\n        const [transactions, totalCount] = await Promise.all([\n            prisma.transaction.findMany({\n                where,\n                orderBy: { date: 'desc' },\n                skip,\n                take: limit,\n                select: {\n                    id: true,\n                    date: true,\n                    description: true,\n                    accountId: true,\n                    toAccountId: true,\n                    amount: true,\n                    reference: true,\n                    type: true,\n                    category: true,\n                    createdAt: true,\n                    account: { select: { name: true } },\n                    toAccount: { select: { name: true } }\n                }\n            }),\n            prisma.transaction.count({ where })\n        ]);\n\n        return NextResponse.json({\n            success: true,\n            data: transactions.map(transformTransactionForClient),\n            pagination: {\n                page,\n                limit,\n                total: totalCount,\n                totalPages: Math.ceil(totalCount / limit)\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching transactions:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching transactions',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new transaction\nexport async function POST(request: Request) {\n    try {\n        const { date, description, accountId, toAccountId, type, amount, reference, category } = await request.json();\n\n        // Validate required fields\n        if (!date || !description || !accountId || !type || !amount || !category) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        // Validate transaction type\n        const validTypes = ['income', 'expense', 'withdrawal', 'transfer'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Transaction type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // For transfers, toAccountId is required\n        if (type === 'transfer' && !toAccountId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Destination account is required for transfers'\n            }, { status: 400 });\n        }\n\n        // Start a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // Create the transaction\n            const newTransaction = await tx.transaction.create({\n                data: {\n                    date: new Date(date),\n                    description,\n                    accountId: parseInt(accountId, 10),\n                    toAccountId: toAccountId ? parseInt(toAccountId, 10) : null,\n                    type,\n                    amount: parseFloat(amount),\n                    reference,\n                    category\n                },\n                include: {\n                    account: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    toAccount: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n\n            // Update account balances based on transaction type\n            if (type === 'income') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'expense' || type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'transfer' && toAccountId) {\n                // For transfers, decrease from account and increase to account\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: parseInt(toAccountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            }\n\n            return {\n                ...newTransaction,\n                accountName: newTransaction.account.name,\n                toAccountName: newTransaction.toAccount?.name\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction created successfully',\n            data: transformTransactionForClient(result)\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete a transaction\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (!id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction ID is required'\n            }, { status: 400 });\n        }\n\n        // Get the transaction details first to reverse the account balance changes\n        const transaction = await prisma.transaction.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                account: true,\n                toAccount: true\n            }\n        });\n\n        if (!transaction) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction not found'\n            }, { status: 404 });\n        }\n\n        // Start a transaction to ensure data consistency\n        await prisma.$transaction(async (tx) => {\n            // Reverse the account balance changes based on transaction type\n            if (transaction.type === 'income') {\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: transaction.amount\n                        }\n                    }\n                });\n            } else if (transaction.type === 'expense' || transaction.type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            increment: transaction.amount\n                        }\n                    }\n                });\n            } else if (transaction.type === 'transfer' && transaction.toAccountId) {\n                // For transfers, increase from account and decrease to account\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            increment: transaction.amount\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: transaction.toAccountId },\n                    data: {\n                        balance: {\n                            decrement: transaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Delete the transaction\n            await tx.transaction.delete({\n                where: { id: parseInt(id, 10) }\n            });\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update a transaction\nexport async function PATCH(request: Request) {\n    try {\n        const { id, date, description, accountId, toAccountId, type, amount, reference, category } = await request.json();\n\n        // Validate required fields\n        if (!id || !date || !description || !accountId || !type || !amount || !category) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        // Validate transaction type\n        const validTypes = ['income', 'expense', 'withdrawal', 'transfer'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Transaction type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // For transfers, toAccountId is required\n        if (type === 'transfer' && !toAccountId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Destination account is required for transfers'\n            }, { status: 400 });\n        }\n\n        // Get the original transaction to calculate balance adjustments\n        const originalTransaction = await prisma.transaction.findUnique({\n            where: { id: parseInt(id, 10) }\n        });\n\n        if (!originalTransaction) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction not found'\n            }, { status: 404 });\n        }\n\n        // Start a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // First, reverse the original transaction's effect on account balances\n            if (originalTransaction.type === 'income') {\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: originalTransaction.amount\n                        }\n                    }\n                });\n            } else if (originalTransaction.type === 'expense' || originalTransaction.type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            increment: originalTransaction.amount\n                        }\n                    }\n                });\n            } else if (originalTransaction.type === 'transfer' && originalTransaction.toAccountId) {\n                // For transfers, increase from account and decrease to account\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            increment: originalTransaction.amount\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: originalTransaction.toAccountId },\n                    data: {\n                        balance: {\n                            decrement: originalTransaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Update the transaction\n            const updatedTransaction = await tx.transaction.update({\n                where: { id: parseInt(id, 10) },\n                data: {\n                    date: new Date(date),\n                    description,\n                    accountId: parseInt(accountId, 10),\n                    toAccountId: toAccountId ? parseInt(toAccountId, 10) : null,\n                    type,\n                    amount: parseFloat(amount),\n                    reference,\n                    category\n                },\n                include: {\n                    account: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    toAccount: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n\n            // Now apply the new transaction's effect on account balances\n            if (type === 'income') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'expense' || type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'transfer' && toAccountId) {\n                // For transfers, decrease from account and increase to account\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: parseInt(toAccountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            }\n\n            return {\n                ...updatedTransaction,\n                accountName: updatedTransaction.account.name,\n                toAccountName: updatedTransaction.toAccount?.name\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction updated successfully',\n            data: transformTransactionForClient(result)\n        });\n    } catch (error) {\n        console.error('Error updating transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["DELETE", "GET", "PATCH", "POST", "transformTransactionForClient", "transaction", "id", "date", "description", "accountId", "accountName", "account", "name", "toAccountId", "toAccountName", "toAccount", "type", "amount", "Number", "reference", "category", "createdAt", "request", "searchParams", "URL", "url", "get", "prisma", "findUnique", "where", "parseInt", "select", "NextResponse", "json", "success", "message", "status", "data", "page", "limit", "Math", "min", "skip", "q", "startDate", "endDate", "OR", "contains", "mode", "gte", "Date", "lte", "transactions", "totalCount", "Promise", "all", "findMany", "orderBy", "take", "count", "map", "pagination", "total", "totalPages", "ceil", "error", "console", "Error", "String", "validTypes", "includes", "join", "result", "$transaction", "tx", "newTransaction", "create", "parseFloat", "include", "update", "balance", "increment", "decrement", "delete", "originalTransaction", "updatedTransaction"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a3181c176cedca7c9fd2d27c44602a984c5d8ca9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1i5576ayr4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1i5576ayr4();
cov_1i5576ayr4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[0]++;
  cov_1i5576ayr4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1i5576ayr4().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[1]++;
    cov_1i5576ayr4().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[2]++;
    cov_1i5576ayr4().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[3]++;
    cov_1i5576ayr4().s[6]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[4]++;
    cov_1i5576ayr4().s[7]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1i5576ayr4().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_1i5576ayr4().s[9]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[5]++;
  cov_1i5576ayr4().s[10]++;
  return /* istanbul ignore next */(cov_1i5576ayr4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[0][1]++, {
    default: obj
  });
}
// Helper function to transform transaction data for client consumption
/* istanbul ignore next */
cov_1i5576ayr4().s[11]++;
const transformTransactionForClient = transaction => {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[6]++;
  cov_1i5576ayr4().s[12]++;
  return {
    id: transaction.id,
    date: transaction.date,
    description: transaction.description,
    accountId: transaction.accountId,
    accountName:
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[2][0]++, transaction.account?.name) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[2][1]++, transaction.accountName),
    toAccountId: transaction.toAccountId,
    toAccountName:
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[3][0]++, transaction.toAccount?.name) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[3][1]++, transaction.toAccountName),
    type: transaction.type,
    amount: Number(transaction.amount),
    reference: transaction.reference,
    category: transaction.category,
    createdAt: transaction.createdAt
  };
};
async function GET(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[7]++;
  cov_1i5576ayr4().s[13]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[14]++, new URL(request.url));
    // Single-record fetch by id keeps behaviour (cheap path)
    const id =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[15]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[16]++;
    if (id) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[4][0]++;
      const transaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[17]++, await _prisma.default.transaction.findUnique({
        where: {
          id: parseInt(id, 10)
        },
        select: {
          id: true,
          date: true,
          description: true,
          accountId: true,
          toAccountId: true,
          amount: true,
          reference: true,
          type: true,
          category: true,
          createdAt: true,
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1i5576ayr4().s[18]++;
      if (!transaction) {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[5][0]++;
        cov_1i5576ayr4().s[19]++;
        return _server.NextResponse.json({
          success: false,
          message: "Transaction not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1i5576ayr4().b[5][1]++;
      }
      cov_1i5576ayr4().s[20]++;
      return _server.NextResponse.json({
        success: true,
        data: transformTransactionForClient(transaction)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[4][1]++;
    }
    // Pagination & filters
    const page =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[21]++, parseInt(
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[6][0]++, searchParams.get("page")) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[6][1]++, "1"), 10));
    const limit =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[22]++, Math.min(parseInt(
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[7][0]++, searchParams.get("limit")) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[7][1]++, "50"), 10), 200));
    const skip =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[23]++, (page - 1) * limit);
    const type =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[24]++, searchParams.get("type"));
    const accountId =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[25]++, searchParams.get("accountId"));
    const q =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[26]++,
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][0]++, searchParams.get("q")) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][1]++, ""));
    const startDate =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[27]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[28]++, searchParams.get("endDate"));
    const where =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[29]++, {});
    /* istanbul ignore next */
    cov_1i5576ayr4().s[30]++;
    if (type) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[9][0]++;
      cov_1i5576ayr4().s[31]++;
      where.type = type;
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[9][1]++;
    }
    cov_1i5576ayr4().s[32]++;
    if (accountId) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[10][0]++;
      cov_1i5576ayr4().s[33]++;
      where.accountId = parseInt(accountId, 10);
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[10][1]++;
    }
    cov_1i5576ayr4().s[34]++;
    if (q) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[11][0]++;
      cov_1i5576ayr4().s[35]++;
      where.OR = [{
        description: {
          contains: q,
          mode: "insensitive"
        }
      }, {
        category: {
          contains: q,
          mode: "insensitive"
        }
      }, {
        account: {
          name: {
            contains: q,
            mode: "insensitive"
          }
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[11][1]++;
    }
    cov_1i5576ayr4().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[13][0]++, startDate) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[13][1]++, endDate)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[12][0]++;
      cov_1i5576ayr4().s[37]++;
      where.date = {};
      /* istanbul ignore next */
      cov_1i5576ayr4().s[38]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[14][0]++;
        cov_1i5576ayr4().s[39]++;
        where.date.gte = new Date(startDate);
      } else
      /* istanbul ignore next */
      {
        cov_1i5576ayr4().b[14][1]++;
      }
      cov_1i5576ayr4().s[40]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[15][0]++;
        cov_1i5576ayr4().s[41]++;
        where.date.lte = new Date(endDate);
      } else
      /* istanbul ignore next */
      {
        cov_1i5576ayr4().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[12][1]++;
    }
    // Fetch paginated data
    const [transactions, totalCount] =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[42]++, await Promise.all([_prisma.default.transaction.findMany({
      where,
      orderBy: {
        date: "desc"
      },
      skip,
      take: limit,
      select: {
        id: true,
        date: true,
        description: true,
        accountId: true,
        toAccountId: true,
        amount: true,
        reference: true,
        type: true,
        category: true,
        createdAt: true,
        account: {
          select: {
            name: true
          }
        },
        toAccount: {
          select: {
            name: true
          }
        }
      }
    }), _prisma.default.transaction.count({
      where
    })]));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[43]++;
    return _server.NextResponse.json({
      success: true,
      data: transactions.map(transformTransactionForClient),
      pagination: {
        page,
        limit,
        total: totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[44]++;
    console.error("Error fetching transactions:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[45]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching transactions",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[16][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[8]++;
  cov_1i5576ayr4().s[46]++;
  try {
    const {
      date,
      description,
      accountId,
      toAccountId,
      type,
      amount,
      reference,
      category
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[47]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1i5576ayr4().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][0]++, !date) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][1]++, !description) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][2]++, !accountId) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][3]++, !type) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][4]++, !amount) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[18][5]++, !category)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[17][0]++;
      cov_1i5576ayr4().s[49]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[17][1]++;
    }
    // Validate transaction type
    const validTypes =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[50]++, ["income", "expense", "withdrawal", "transfer"]);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[51]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[19][0]++;
      cov_1i5576ayr4().s[52]++;
      return _server.NextResponse.json({
        success: false,
        message: `Transaction type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[19][1]++;
    }
    // For transfers, toAccountId is required
    cov_1i5576ayr4().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[21][0]++, type === "transfer") &&
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[21][1]++, !toAccountId)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[20][0]++;
      cov_1i5576ayr4().s[54]++;
      return _server.NextResponse.json({
        success: false,
        message: "Destination account is required for transfers"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[20][1]++;
    }
    // Start a transaction to ensure data consistency
    const result =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[55]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[9]++;
      // Create the transaction
      const newTransaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[56]++, await tx.transaction.create({
        data: {
          date: new Date(date),
          description,
          accountId: parseInt(accountId, 10),
          toAccountId: toAccountId ?
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[22][0]++, parseInt(toAccountId, 10)) :
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[22][1]++, null),
          type,
          amount: parseFloat(amount),
          reference,
          category
        },
        include: {
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      // Update account balances based on transaction type
      /* istanbul ignore next */
      cov_1i5576ayr4().s[57]++;
      if (type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[23][0]++;
        cov_1i5576ayr4().s[58]++;
        await tx.account.update({
          where: {
            id: parseInt(accountId, 10)
          },
          data: {
            balance: {
              increment: parseFloat(amount)
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[23][1]++;
        cov_1i5576ayr4().s[59]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[25][0]++, type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[25][1]++, type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[24][0]++;
          cov_1i5576ayr4().s[60]++;
          await tx.account.update({
            where: {
              id: parseInt(accountId, 10)
            },
            data: {
              balance: {
                decrement: parseFloat(amount)
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[24][1]++;
          cov_1i5576ayr4().s[61]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[27][0]++, type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[27][1]++, toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[26][0]++;
            cov_1i5576ayr4().s[62]++;
            // For transfers, decrease from account and increase to account
            await tx.account.update({
              where: {
                id: parseInt(accountId, 10)
              },
              data: {
                balance: {
                  decrement: parseFloat(amount)
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[63]++;
            await tx.account.update({
              where: {
                id: parseInt(toAccountId, 10)
              },
              data: {
                balance: {
                  increment: parseFloat(amount)
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[26][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1i5576ayr4().s[64]++;
      return {
        ...newTransaction,
        accountName: newTransaction.account.name,
        toAccountName: newTransaction.toAccount?.name
      };
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[65]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction created successfully",
      data: transformTransactionForClient(result)
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[66]++;
    console.error("Error creating transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[67]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[28][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[10]++;
  cov_1i5576ayr4().s[68]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[69]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[70]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[71]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[29][0]++;
      cov_1i5576ayr4().s[72]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[29][1]++;
    }
    // Get the transaction details first to reverse the account balance changes
    const transaction =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[73]++, await _prisma.default.transaction.findUnique({
      where: {
        id: parseInt(id, 10)
      },
      include: {
        account: true,
        toAccount: true
      }
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[74]++;
    if (!transaction) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[30][0]++;
      cov_1i5576ayr4().s[75]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[30][1]++;
    }
    // Start a transaction to ensure data consistency
    cov_1i5576ayr4().s[76]++;
    await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[11]++;
      cov_1i5576ayr4().s[77]++;
      // Reverse the account balance changes based on transaction type
      if (transaction.type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[31][0]++;
        cov_1i5576ayr4().s[78]++;
        await tx.account.update({
          where: {
            id: transaction.accountId
          },
          data: {
            balance: {
              decrement: transaction.amount
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[31][1]++;
        cov_1i5576ayr4().s[79]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[33][0]++, transaction.type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[33][1]++, transaction.type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[32][0]++;
          cov_1i5576ayr4().s[80]++;
          await tx.account.update({
            where: {
              id: transaction.accountId
            },
            data: {
              balance: {
                increment: transaction.amount
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[32][1]++;
          cov_1i5576ayr4().s[81]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[35][0]++, transaction.type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[35][1]++, transaction.toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[34][0]++;
            cov_1i5576ayr4().s[82]++;
            // For transfers, increase from account and decrease to account
            await tx.account.update({
              where: {
                id: transaction.accountId
              },
              data: {
                balance: {
                  increment: transaction.amount
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[83]++;
            await tx.account.update({
              where: {
                id: transaction.toAccountId
              },
              data: {
                balance: {
                  decrement: transaction.amount
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[34][1]++;
          }
        }
      }
      // Delete the transaction
      /* istanbul ignore next */
      cov_1i5576ayr4().s[84]++;
      await tx.transaction.delete({
        where: {
          id: parseInt(id, 10)
        }
      });
    });
    /* istanbul ignore next */
    cov_1i5576ayr4().s[85]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[86]++;
    console.error("Error deleting transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[87]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[36][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[12]++;
  cov_1i5576ayr4().s[88]++;
  try {
    const {
      id,
      date,
      description,
      accountId,
      toAccountId,
      type,
      amount,
      reference,
      category
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[89]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1i5576ayr4().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][0]++, !id) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][1]++, !date) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][2]++, !description) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][3]++, !accountId) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][4]++, !type) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][5]++, !amount) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[38][6]++, !category)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[37][0]++;
      cov_1i5576ayr4().s[91]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[37][1]++;
    }
    // Validate transaction type
    const validTypes =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[92]++, ["income", "expense", "withdrawal", "transfer"]);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[93]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[39][0]++;
      cov_1i5576ayr4().s[94]++;
      return _server.NextResponse.json({
        success: false,
        message: `Transaction type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[39][1]++;
    }
    // For transfers, toAccountId is required
    cov_1i5576ayr4().s[95]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[41][0]++, type === "transfer") &&
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[41][1]++, !toAccountId)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[40][0]++;
      cov_1i5576ayr4().s[96]++;
      return _server.NextResponse.json({
        success: false,
        message: "Destination account is required for transfers"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[40][1]++;
    }
    // Get the original transaction to calculate balance adjustments
    const originalTransaction =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[97]++, await _prisma.default.transaction.findUnique({
      where: {
        id: parseInt(id, 10)
      }
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[98]++;
    if (!originalTransaction) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[42][0]++;
      cov_1i5576ayr4().s[99]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[42][1]++;
    }
    // Start a transaction to ensure data consistency
    const result =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[100]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[13]++;
      cov_1i5576ayr4().s[101]++;
      // First, reverse the original transaction's effect on account balances
      if (originalTransaction.type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[43][0]++;
        cov_1i5576ayr4().s[102]++;
        await tx.account.update({
          where: {
            id: originalTransaction.accountId
          },
          data: {
            balance: {
              decrement: originalTransaction.amount
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[43][1]++;
        cov_1i5576ayr4().s[103]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[45][0]++, originalTransaction.type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[45][1]++, originalTransaction.type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[44][0]++;
          cov_1i5576ayr4().s[104]++;
          await tx.account.update({
            where: {
              id: originalTransaction.accountId
            },
            data: {
              balance: {
                increment: originalTransaction.amount
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[44][1]++;
          cov_1i5576ayr4().s[105]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[47][0]++, originalTransaction.type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[47][1]++, originalTransaction.toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[46][0]++;
            cov_1i5576ayr4().s[106]++;
            // For transfers, increase from account and decrease to account
            await tx.account.update({
              where: {
                id: originalTransaction.accountId
              },
              data: {
                balance: {
                  increment: originalTransaction.amount
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[107]++;
            await tx.account.update({
              where: {
                id: originalTransaction.toAccountId
              },
              data: {
                balance: {
                  decrement: originalTransaction.amount
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[46][1]++;
          }
        }
      }
      // Update the transaction
      const updatedTransaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[108]++, await tx.transaction.update({
        where: {
          id: parseInt(id, 10)
        },
        data: {
          date: new Date(date),
          description,
          accountId: parseInt(accountId, 10),
          toAccountId: toAccountId ?
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[48][0]++, parseInt(toAccountId, 10)) :
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[48][1]++, null),
          type,
          amount: parseFloat(amount),
          reference,
          category
        },
        include: {
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      // Now apply the new transaction's effect on account balances
      /* istanbul ignore next */
      cov_1i5576ayr4().s[109]++;
      if (type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[49][0]++;
        cov_1i5576ayr4().s[110]++;
        await tx.account.update({
          where: {
            id: parseInt(accountId, 10)
          },
          data: {
            balance: {
              increment: parseFloat(amount)
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[49][1]++;
        cov_1i5576ayr4().s[111]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[51][0]++, type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[51][1]++, type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[50][0]++;
          cov_1i5576ayr4().s[112]++;
          await tx.account.update({
            where: {
              id: parseInt(accountId, 10)
            },
            data: {
              balance: {
                decrement: parseFloat(amount)
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[50][1]++;
          cov_1i5576ayr4().s[113]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[53][0]++, type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[53][1]++, toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[52][0]++;
            cov_1i5576ayr4().s[114]++;
            // For transfers, decrease from account and increase to account
            await tx.account.update({
              where: {
                id: parseInt(accountId, 10)
              },
              data: {
                balance: {
                  decrement: parseFloat(amount)
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[115]++;
            await tx.account.update({
              where: {
                id: parseInt(toAccountId, 10)
              },
              data: {
                balance: {
                  increment: parseFloat(amount)
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[52][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1i5576ayr4().s[116]++;
      return {
        ...updatedTransaction,
        accountName: updatedTransaction.account.name,
        toAccountName: updatedTransaction.toAccount?.name
      };
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[117]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction updated successfully",
      data: transformTransactionForClient(result)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[118]++;
    console.error("Error updating transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[119]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[54][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[54][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,