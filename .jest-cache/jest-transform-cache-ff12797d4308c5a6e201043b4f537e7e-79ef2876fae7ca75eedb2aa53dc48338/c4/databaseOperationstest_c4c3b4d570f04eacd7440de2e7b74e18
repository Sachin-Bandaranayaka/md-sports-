53465b36fcad03f195dba729676e5520
// Fixed Database connection and configuration tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
// Create a comprehensive mock for all Prisma models
const createMockModel = ()=>({
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        findFirst: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn(),
        aggregate: _globals.jest.fn(),
        upsert: _globals.jest.fn(),
        deleteMany: _globals.jest.fn(),
        updateMany: _globals.jest.fn()
    });
// Create the mock prisma instance
const mockPrisma = {
    user: createMockModel(),
    product: createMockModel(),
    customer: createMockModel(),
    invoice: createMockModel(),
    inventoryItem: createMockModel(),
    category: createMockModel(),
    supplier: createMockModel(),
    purchaseInvoice: createMockModel(),
    purchaseInvoiceItem: createMockModel(),
    salesInvoice: createMockModel(),
    salesInvoiceItem: createMockModel(),
    $transaction: _globals.jest.fn(),
    $connect: _globals.jest.fn(),
    $disconnect: _globals.jest.fn(),
    $executeRaw: _globals.jest.fn(),
    $queryRaw: _globals.jest.fn()
};
// Mock the Prisma module
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
// Import after mocking
const prisma = mockPrisma;
describe("Database Operations - Prisma Models", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("User Model Operations", ()=>{
        const mockUser = {
            id: 1,
            username: "testuser",
            email: "test@example.com",
            password: "hashedpassword",
            firstName: "Test",
            lastName: "User",
            isActive: true,
            roleId: 1,
            shopId: "shop1",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active users", async ()=>{
                const mockUsers = [
                    mockUser,
                    {
                        ...mockUser,
                        id: 2,
                        username: "testuser2"
                    }
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsers);
                const result = await prisma.user.findMany({
                    where: {
                        isActive: true
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockUsers);
                expect(result).toHaveLength(2);
            });
            it("should fetch users with pagination", async ()=>{
                const mockUsers = [
                    mockUser
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsers);
                const result = await prisma.user.findMany({
                    skip: 0,
                    take: 10,
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    skip: 0,
                    take: 10,
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(result).toEqual(mockUsers);
            });
        });
        describe("findUnique", ()=>{
            it("should find user by id", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(mockUser);
                const result = await prisma.user.findUnique({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser);
            });
            it("should return null for non-existent user", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(null);
                const result = await prisma.user.findUnique({
                    where: {
                        id: 999
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        id: 999
                    }
                });
                expect(result).toBeNull();
            });
        });
        describe("create", ()=>{
            it("should create a new user", async ()=>{
                const newUserData = {
                    username: "newuser",
                    email: "new@example.com",
                    password: "hashedpassword",
                    firstName: "New",
                    lastName: "User",
                    roleId: 1,
                    shopId: "shop1"
                };
                const createdUser = {
                    ...newUserData,
                    id: 2,
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                };
                mockPrisma.user.create.mockResolvedValue(createdUser);
                const result = await prisma.user.create({
                    data: newUserData
                });
                expect(mockPrisma.user.create).toHaveBeenCalledWith({
                    data: newUserData
                });
                expect(result).toEqual(createdUser);
            });
        });
        describe("update", ()=>{
            it("should update user data", async ()=>{
                const updatedUser = {
                    ...mockUser,
                    firstName: "Updated"
                };
                mockPrisma.user.update.mockResolvedValue(updatedUser);
                const result = await prisma.user.update({
                    where: {
                        id: 1
                    },
                    data: {
                        firstName: "Updated"
                    }
                });
                expect(mockPrisma.user.update).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    },
                    data: {
                        firstName: "Updated"
                    }
                });
                expect(result).toEqual(updatedUser);
            });
        });
        describe("delete", ()=>{
            it("should delete a user", async ()=>{
                mockPrisma.user.delete.mockResolvedValue(mockUser);
                const result = await prisma.user.delete({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.delete).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser);
            });
        });
    });
    describe("Product Model Operations", ()=>{
        const mockProduct = {
            id: 1,
            name: "Test Product",
            description: "Test Description",
            price: 99.99,
            categoryId: 1,
            supplierId: 1,
            sku: "TEST-001",
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all products", async ()=>{
                const mockProducts = [
                    mockProduct,
                    {
                        ...mockProduct,
                        id: 2,
                        name: "Test Product 2"
                    }
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProducts);
                const result = await prisma.product.findMany();
                expect(mockPrisma.product.findMany).toHaveBeenCalled();
                expect(result).toEqual(mockProducts);
                expect(result).toHaveLength(2);
            });
            it("should fetch products with filters", async ()=>{
                const mockProducts = [
                    mockProduct
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProducts);
                const result = await prisma.product.findMany({
                    where: {
                        isActive: true,
                        categoryId: 1
                    }
                });
                expect(mockPrisma.product.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true,
                        categoryId: 1
                    }
                });
                expect(result).toEqual(mockProducts);
            });
        });
        describe("create", ()=>{
            it("should create a new product", async ()=>{
                const newProductData = {
                    name: "New Product",
                    description: "New Description",
                    price: 149.99,
                    categoryId: 1,
                    supplierId: 1,
                    sku: "NEW-001"
                };
                const createdProduct = {
                    ...newProductData,
                    id: 2,
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                };
                mockPrisma.product.create.mockResolvedValue(createdProduct);
                const result = await prisma.product.create({
                    data: newProductData
                });
                expect(mockPrisma.product.create).toHaveBeenCalledWith({
                    data: newProductData
                });
                expect(result).toEqual(createdProduct);
            });
        });
    });
    describe("Transaction Operations", ()=>{
        it("should execute transaction successfully", async ()=>{
            const transactionResult = {
                success: true
            };
            mockPrisma.$transaction.mockResolvedValue(transactionResult);
            const result = await prisma.$transaction(async (tx)=>{
                await tx.user.create({
                    data: {
                        username: "test"
                    }
                });
                await tx.product.create({
                    data: {
                        name: "test"
                    }
                });
                return {
                    success: true
                };
            });
            expect(mockPrisma.$transaction).toHaveBeenCalled();
            expect(result).toEqual(transactionResult);
        });
        it("should handle transaction rollback", async ()=>{
            const transactionError = new Error("Transaction failed");
            mockPrisma.$transaction.mockRejectedValue(transactionError);
            await expect(prisma.$transaction(async (tx)=>{
                await tx.user.create({
                    data: {
                        username: "test"
                    }
                });
                throw new Error("Something went wrong");
            })).rejects.toThrow("Transaction failed");
        });
    });
    describe("Batch Operations", ()=>{
        it("should perform batch user creation", async ()=>{
            const batchData = [
                {
                    username: "user1",
                    email: "user1@test.com"
                },
                {
                    username: "user2",
                    email: "user2@test.com"
                }
            ];
            const batchResult = {
                count: 2
            };
            mockPrisma.user.createMany = _globals.jest.fn().mockResolvedValue(batchResult);
            const result = await mockPrisma.user.createMany({
                data: batchData
            });
            expect(mockPrisma.user.createMany).toHaveBeenCalledWith({
                data: batchData
            });
            expect(result).toEqual(batchResult);
        });
        it("should perform batch updates", async ()=>{
            const updateResult = {
                count: 5
            };
            mockPrisma.user.updateMany.mockResolvedValue(updateResult);
            const result = await prisma.user.updateMany({
                where: {
                    isActive: false
                },
                data: {
                    isActive: true
                }
            });
            expect(mockPrisma.user.updateMany).toHaveBeenCalledWith({
                where: {
                    isActive: false
                },
                data: {
                    isActive: true
                }
            });
            expect(result).toEqual(updateResult);
        });
    });
    describe("Aggregation Operations", ()=>{
        it("should count total users", async ()=>{
            const countResult = 10;
            mockPrisma.user.count.mockResolvedValue(countResult);
            const result = await prisma.user.count({
                where: {
                    isActive: true
                }
            });
            expect(mockPrisma.user.count).toHaveBeenCalledWith({
                where: {
                    isActive: true
                }
            });
            expect(result).toBe(countResult);
        });
        it("should aggregate product prices", async ()=>{
            const aggregateResult = {
                _avg: {
                    price: 99.99
                },
                _max: {
                    price: 199.99
                },
                _min: {
                    price: 49.99
                },
                _sum: {
                    price: 999.90
                },
                _count: {
                    price: 10
                }
            };
            mockPrisma.product.aggregate.mockResolvedValue(aggregateResult);
            const result = await prisma.product.aggregate({
                _avg: {
                    price: true
                },
                _max: {
                    price: true
                },
                _min: {
                    price: true
                },
                _sum: {
                    price: true
                },
                _count: {
                    price: true
                },
                where: {
                    isActive: true
                }
            });
            expect(mockPrisma.product.aggregate).toHaveBeenCalledWith({
                _avg: {
                    price: true
                },
                _max: {
                    price: true
                },
                _min: {
                    price: true
                },
                _sum: {
                    price: true
                },
                _count: {
                    price: true
                },
                where: {
                    isActive: true
                }
            });
            expect(result).toEqual(aggregateResult);
        });
    });
    describe("Error Handling", ()=>{
        it("should handle unique constraint violations", async ()=>{
            const uniqueError = new Error("Unique constraint failed");
            mockPrisma.user.create.mockRejectedValue(uniqueError);
            await expect(prisma.user.create({
                data: {
                    username: "existing",
                    email: "existing@test.com"
                }
            })).rejects.toThrow("Unique constraint failed");
        });
        it("should handle foreign key constraint violations", async ()=>{
            const fkError = new Error("Foreign key constraint failed");
            mockPrisma.product.create.mockRejectedValue(fkError);
            await expect(prisma.product.create({
                data: {
                    name: "Test",
                    price: 99.99,
                    categoryId: 999
                }
            })).rejects.toThrow("Foreign key constraint failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,