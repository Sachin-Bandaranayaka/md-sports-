{"version":3,"names":["GET","cov_vzq0avkdi","f","s","fetchSummaryData","shopId","periodDays","startDate","endDate","userId","dateFilter","b","endOfDay","Date","setHours","gte","lte","now","getFullYear","getMonth","getDate","shopFilter","shopFilterForOR","fromShopId","toShopId","totalValueResult","_prisma","safeQuery","prisma","$queryRaw","_client","Prisma","sql","empty","totalinventoryvalue","totalValue","Number","pendingTransfersResult","inventoryTransfer","count","where","status","length","OR","Object","keys","createdAt","outstandingInvoicesResult","invoice","aggregate","in","createdBy","_sum","total","lowStockItemsResult","inventoryItem","quantity","totalProfitResult","totalProfit","getRandomTrend","isPercentage","randomValue","Math","random","formatted","toFixed","floor","trend","trendUp","summaryData","title","value","toLocaleString","icon","toString","success","data","dashboardSummaryHandler","request","_shopMiddleware","ShopAccessControl","withShopAccess","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","searchParams","URL","url","startDateParam","get","endDateParam","isFiltered","getUserIdFromToken","dateRangeKey","toISOString","split","cacheKey","cachedData","_cache","cacheService","console","log","meta","fromCache","result","undefined","set","Error","_apioptimizer","withApiOptimization","cacheTTL","enableCompression","enableCaching"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/summary/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport { withApiOptimization } from '@/lib/middleware/api-optimizer';\n\nexport async function fetchSummaryData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    // Build date filter for queries\n    const dateFilter: any = {};\n    if (startDate && endDate) {\n        const endOfDay = new Date(endDate);\n        endOfDay.setHours(23, 59, 59, 999);\n        dateFilter.gte = startDate;\n        dateFilter.lte = endOfDay;\n    } else if (periodDays) {\n        const now = new Date();\n        dateFilter.gte = new Date(now.getFullYear(), now.getMonth(), now.getDate() - periodDays);\n    }\n    \n    // Build where clauses\n    const shopFilter = shopId ? { shopId } : {};\n    const shopFilterForOR = shopId ? [{ fromShopId: shopId }, { toShopId: shopId }] : [];\n\n    // 1. Calculate Total Inventory Value (does not use date filtering)\n    const totalValueResult = await safeQuery<Array<{ totalinventoryvalue: bigint | number | null }>>(\n        () => prisma.$queryRaw`\n                SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as \"totalinventoryvalue\"\n                FROM \"InventoryItem\" i\n                WHERE i.quantity > 0 AND i.shopspecificcost IS NOT NULL AND i.shopspecificcost > 0\n                ${shopId ? Prisma.sql`AND i.\"shopId\" = ${shopId}` : Prisma.empty}\n        `,\n        [{ totalinventoryvalue: 0 }],\n        'Failed to calculate total inventory value via raw query'\n    );\n    const totalValue = Number(totalValueResult[0]?.totalinventoryvalue || 0);\n\n    // 2. Count Pending Transfers\n    const pendingTransfersResult = await safeQuery(\n        () => prisma.inventoryTransfer.count({\n            where: {\n                status: 'pending',\n                ...(shopFilterForOR.length > 0 && { OR: shopFilterForOR }),\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter })\n            }\n        }),\n        0,\n        'Failed to count pending transfers'\n    );\n\n    // 3. Calculate Outstanding Invoices\n    const outstandingInvoicesResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                status: { in: ['pending', 'overdue'] },\n                ...shopFilter,\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { total: true }\n        }),\n        { _sum: { total: 0 } },\n        'Failed to calculate outstanding invoices'\n    );\n\n    // 4. Count Low Stock Items\n    const lowStockItemsResult = await safeQuery(\n        () => prisma.inventoryItem.count({\n            where: {\n                ...shopFilter,\n                quantity: { lte: 10 }, // Using hardcoded value to fix complex query issue\n            }\n        }),\n        0,\n        'Failed to count low stock items'\n    );\n\n    // 5. Calculate Total Profit\n    const totalProfitResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                ...shopFilter,\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { totalProfit: true }\n        }),\n        { _sum: { totalProfit: 0 } },\n        'Failed to calculate total profit'\n    );\n    \n    // NOTE: Trends are placeholders\n    const getRandomTrend = (isPercentage = true) => {\n        const randomValue = Math.random() * 10 - 5;\n        const formatted = isPercentage\n            ? `${randomValue >= 0 ? '+' : ''}${randomValue.toFixed(1)}%`\n            : `${randomValue >= 0 ? '+' : ''}${Math.floor(randomValue)}`;\n        return { trend: formatted, trendUp: randomValue >= 0 };\n    };\n\n    const summaryData = [\n        {\n            title: 'Total Inventory Value',\n            value: `Rs. ${totalValue.toLocaleString()}`,\n            icon: 'Package',\n            ...getRandomTrend(true)\n        },\n        {\n            title: 'Total Profit',\n            value: `Rs. ${(totalProfitResult._sum.totalProfit || 0).toLocaleString()}`,\n            icon: 'TrendingUp',\n            ...getRandomTrend(true)\n        },\n        {\n            title: 'Pending Transfers',\n            value: pendingTransfersResult.toString(),\n            icon: 'Truck',\n            ...getRandomTrend(false)\n        },\n        {\n            title: 'Outstanding Invoices',\n            value: `Rs. ${(outstandingInvoicesResult._sum.total || 0).toLocaleString()}`,\n            icon: 'CreditCard',\n            ...getRandomTrend(true)\n        },\n        {\n            title: 'Low Stock Items',\n            value: lowStockItemsResult.toString(),\n            icon: 'AlertTriangle',\n            ...getRandomTrend(false)\n        }\n    ];\n\n    return {\n        success: true,\n        data: summaryData\n    };\n}\n\n// Original handler function\nasync function dashboardSummaryHandler(request: NextRequest) {\n    return ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'dashboard:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: authResult.message }, { status: 401 });\n            }\n\n            const { searchParams } = new URL(request.url);\n            const startDateParam = searchParams.get('startDate');\n            const endDateParam = searchParams.get('endDate');\n            \n            const shopId = context.isFiltered ? context.shopId : null;\n\n            const endDate = endDateParam ? new Date(endDateParam) : new Date();\n            const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n            \n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n            }\n            \n            // NOTE: User-specific filtering for summary data not fully implemented in cache key yet.\n            const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n            const cacheKey = `dashboard:summary:${shopId || 'all'}:${dateRangeKey}`;\n            const cachedData = await cacheService.get(cacheKey);\n\n            if (cachedData) {\n                console.log('âœ… Summary data served from cache');\n                return NextResponse.json({ ...cachedData, meta: { fromCache: true } });\n            }\n\n            const result = await fetchSummaryData(shopId, undefined, startDate, endDate, userId);\n\n            if (result.success) {\n                await cacheService.set(cacheKey, result, 120);\n            }\n\n            return NextResponse.json({ ...result, meta: { fromCache: false } });\n\n        } catch (error) {\n            console.error('Error fetching dashboard summary:', error);\n            return NextResponse.json({\n                success: false,\n                message: error instanceof Error ? error.message : 'Unknown error',\n            }, { status: 500 });\n        }\n    })(request);\n}\n\n// Apply API optimization middleware\nexport const GET = withApiOptimization(dashboardSummaryHandler, {\n    cacheTTL: 300, // 5 minutes cache\n    enableCompression: true,\n    enableCaching: true\n});"],"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","ignoreList":[]}