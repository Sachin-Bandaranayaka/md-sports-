13acb3640c9fae2f26b7749002f3bd2b
"use strict";
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: mockPush
            })
    }));
jest.mock("@/hooks/useAuth", ()=>({
        useAuth: ()=>mockUseAuth
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
const mockPush = jest.fn();
const mockUseAuth = {
    user: {
        id: 1,
        name: "Admin User",
        email: "admin@test.com",
        permissions: [
            "user:manage",
            "admin:all"
        ]
    },
    isAuthenticated: true,
    hasPermission: jest.fn().mockReturnValue(true)
};
// Mock fetch globally
global.fetch = jest.fn();
// Mock the actual AddUserPage component logic
const MockAddUserPage = ()=>{
    const [userForm, setUserForm] = _react.default.useState({
        name: "",
        email: "",
        shop: "",
        password: "",
        confirmPassword: "",
        permissions: [],
        allowedAccounts: []
    });
    const [isLoading, setIsLoading] = _react.default.useState(false);
    const [formError, setFormError] = _react.default.useState("");
    const [formSuccess, setFormSuccess] = _react.default.useState("");
    const [dynamicShops, setDynamicShops] = _react.default.useState([
        {
            id: "shop-1",
            name: "Main Store"
        },
        {
            id: "shop-2",
            name: "Warehouse"
        }
    ]);
    const [availablePermissions] = _react.default.useState([
        {
            id: "admin:all",
            name: "admin:all",
            module: "Admin"
        },
        {
            id: "shop:assigned_only",
            name: "shop:assigned_only",
            module: "Shop"
        },
        {
            id: "sales:view",
            name: "sales:view",
            module: "Sales"
        },
        {
            id: "inventory:view",
            name: "inventory:view",
            module: "Inventory"
        }
    ]);
    const handleFormChange = (e)=>{
        const { name, value } = e.target;
        setUserForm((prev)=>({
                ...prev,
                [name]: value
            }));
    };
    const handlePermissionChange = (permissionId)=>{
        setUserForm((prev)=>{
            const newPermissions = prev.permissions.includes(permissionId) ? prev.permissions.filter((id)=>id !== permissionId) : [
                ...prev.permissions,
                permissionId
            ];
            return {
                ...prev,
                permissions: newPermissions
            };
        });
    };
    const handleSubmit = async (e)=>{
        e.preventDefault();
        setIsLoading(true);
        setFormError("");
        setFormSuccess("");
        // Password validation
        if (userForm.password !== userForm.confirmPassword) {
            setFormError("Passwords do not match");
            setIsLoading(false);
            return;
        }
        // Basic validation
        if (!userForm.name || !userForm.email || !userForm.password || !userForm.shop) {
            setFormError("Please fill in all required fields");
            setIsLoading(false);
            return;
        }
        if (userForm.permissions.length === 0) {
            setFormError("Please select at least one permission");
            setIsLoading(false);
            return;
        }
        try {
            const response = await fetch("/api/users", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer dev-token"
                },
                body: JSON.stringify(userForm)
            });
            const data = await response.json();
            if (data.success) {
                setFormSuccess("User added successfully! Redirecting...");
                setTimeout(()=>{
                    mockPush("/settings?tab=users");
                }, 1500);
            } else {
                setFormError(data.message || "Failed to create user");
            }
        } catch (error) {
            setFormError("An error occurred while creating the user");
        } finally{
            setIsLoading(false);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "max-w-4xl mx-auto p-6",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "bg-white rounded-lg shadow-sm border p-6",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    className: "text-2xl font-bold text-gray-900 mb-6",
                    "data-testid": "page-title",
                    children: "Add New User"
                }),
                formError && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "mb-4 p-4 bg-red-50 border border-red-200 rounded-md",
                    "data-testid": "error-message",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-red-800",
                        children: formError
                    })
                }),
                formSuccess && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "mb-4 p-4 bg-green-50 border border-green-200 rounded-md",
                    "data-testid": "success-message",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-green-800",
                        children: formSuccess
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                    onSubmit: handleSubmit,
                    "data-testid": "user-form",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "grid grid-cols-1 md:grid-cols-2 gap-6",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium text-gray-700 mb-2",
                                            children: "Full Name *"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                            type: "text",
                                            name: "name",
                                            value: userForm.name,
                                            onChange: handleFormChange,
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                            "data-testid": "name-input",
                                            required: true
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium text-gray-700 mb-2",
                                            children: "Email *"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                            type: "email",
                                            name: "email",
                                            value: userForm.email,
                                            onChange: handleFormChange,
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                            "data-testid": "email-input",
                                            required: true
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium text-gray-700 mb-2",
                                            children: "Password *"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                            type: "password",
                                            name: "password",
                                            value: userForm.password,
                                            onChange: handleFormChange,
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                            "data-testid": "password-input",
                                            required: true,
                                            minLength: 8
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium text-gray-700 mb-2",
                                            children: "Confirm Password *"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                            type: "password",
                                            name: "confirmPassword",
                                            value: userForm.confirmPassword,
                                            onChange: handleFormChange,
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                            "data-testid": "confirm-password-input",
                                            required: true
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "md:col-span-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium text-gray-700 mb-2",
                                            children: "Assign to Shop *"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                                            name: "shop",
                                            value: userForm.shop,
                                            onChange: handleFormChange,
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                            "data-testid": "shop-select",
                                            required: true,
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                    value: "",
                                                    children: "Select a shop"
                                                }),
                                                dynamicShops.map((shop)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                        value: shop.id,
                                                        children: shop.name
                                                    }, shop.id))
                                            ]
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "mt-8",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-lg font-medium text-gray-900 mb-4",
                                    "data-testid": "permissions-title",
                                    children: "User Permissions *"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",
                                    "data-testid": "permissions-grid",
                                    children: availablePermissions.map((permission)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                                            className: "flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                                    type: "checkbox",
                                                    checked: userForm.permissions.includes(permission.id),
                                                    onChange: ()=>handlePermissionChange(permission.id),
                                                    className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded",
                                                    "data-testid": `permission-${permission.id}`
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                            className: "text-sm font-medium text-gray-900",
                                                            children: permission.name
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                            className: "text-xs text-gray-500",
                                                            children: permission.module
                                                        })
                                                    ]
                                                })
                                            ]
                                        }, permission.id))
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "mt-8 flex justify-end space-x-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    type: "button",
                                    onClick: ()=>mockPush("/settings?tab=users"),
                                    className: "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50",
                                    "data-testid": "cancel-button",
                                    children: "Cancel"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    type: "submit",
                                    disabled: isLoading,
                                    className: "px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed",
                                    "data-testid": "submit-button",
                                    children: isLoading ? "Creating..." : "Create User"
                                })
                            ]
                        })
                    ]
                })
            ]
        })
    });
};
describe("User Creation Form Component", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        global.fetch.mockClear();
    });
    describe("Form Rendering", ()=>{
        test("should render all form elements correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            expect(_react1.screen.getByTestId("page-title")).toHaveTextContent("Add New User");
            expect(_react1.screen.getByTestId("user-form")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("name-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("email-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("password-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("confirm-password-input")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("shop-select")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("permissions-title")).toHaveTextContent("User Permissions *");
            expect(_react1.screen.getByTestId("permissions-grid")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("submit-button")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("cancel-button")).toBeInTheDocument();
        });
        test("should render shop options correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            const shopSelect = _react1.screen.getByTestId("shop-select");
            expect(shopSelect).toBeInTheDocument();
            expect(_react1.screen.getByText("Main Store")).toBeInTheDocument();
            expect(_react1.screen.getByText("Warehouse")).toBeInTheDocument();
        });
        test("should render permission checkboxes correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            expect(_react1.screen.getByTestId("permission-admin:all")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("permission-shop:assigned_only")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("permission-sales:view")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("permission-inventory:view")).toBeInTheDocument();
        });
    });
    describe("Form Interactions", ()=>{
        test("should handle text input changes", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            const nameInput = _react1.screen.getByTestId("name-input");
            const emailInput = _react1.screen.getByTestId("email-input");
            const passwordInput = _react1.screen.getByTestId("password-input");
            const confirmPasswordInput = _react1.screen.getByTestId("confirm-password-input");
            await user.type(nameInput, "John Doe");
            await user.type(emailInput, "john@example.com");
            await user.type(passwordInput, "password123");
            await user.type(confirmPasswordInput, "password123");
            expect(nameInput).toHaveValue("John Doe");
            expect(emailInput).toHaveValue("john@example.com");
            expect(passwordInput).toHaveValue("password123");
            expect(confirmPasswordInput).toHaveValue("password123");
        });
        test("should handle shop selection", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            const shopSelect = _react1.screen.getByTestId("shop-select");
            await user.selectOptions(shopSelect, "shop-1");
            expect(shopSelect).toHaveValue("shop-1");
        });
        test("should handle permission selection", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            const adminPermission = _react1.screen.getByTestId("permission-admin:all");
            const shopPermission = _react1.screen.getByTestId("permission-shop:assigned_only");
            await user.click(adminPermission);
            await user.click(shopPermission);
            expect(adminPermission).toBeChecked();
            expect(shopPermission).toBeChecked();
        });
        test("should toggle permissions correctly", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            const adminPermission = _react1.screen.getByTestId("permission-admin:all");
            // Check the permission
            await user.click(adminPermission);
            expect(adminPermission).toBeChecked();
            // Uncheck the permission
            await user.click(adminPermission);
            expect(adminPermission).not.toBeChecked();
        });
    });
    describe("Form Validation", ()=>{
        test("should show error for password mismatch", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "different");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("permission-admin:all"));
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("error-message")).toHaveTextContent("Passwords do not match");
            });
        });
        test("should show error for missing required fields", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("error-message")).toHaveTextContent("Please fill in all required fields");
            });
        });
        test("should show error for missing permissions", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("error-message")).toHaveTextContent("Please select at least one permission");
            });
        });
    });
    describe("Form Submission", ()=>{
        test("should submit form with valid data successfully", async ()=>{
            const user = _userevent.default.setup();
            const mockResponse = {
                success: true,
                message: "User created successfully",
                data: {
                    id: "user-123",
                    name: "John Doe"
                }
            };
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            // Fill out the form
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("permission-admin:all"));
            await user.click(_react1.screen.getByTestId("submit-button"));
            // Verify API call
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith("/api/users", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer dev-token"
                    },
                    body: JSON.stringify({
                        name: "John Doe",
                        email: "john@example.com",
                        password: "password123",
                        confirmPassword: "password123",
                        shop: "shop-1",
                        permissions: [
                            "admin:all"
                        ],
                        allowedAccounts: []
                    })
                });
            });
            // Verify success message
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("success-message")).toHaveTextContent("User added successfully! Redirecting...");
            });
            // Verify redirect
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith("/settings?tab=users");
            }, {
                timeout: 2000
            });
        });
        test("should handle API error response", async ()=>{
            const user = _userevent.default.setup();
            const mockErrorResponse = {
                success: false,
                message: "Email already exists"
            };
            global.fetch.mockResolvedValueOnce({
                ok: false,
                json: async ()=>mockErrorResponse
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            // Fill out the form
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "existing@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("permission-admin:all"));
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("error-message")).toHaveTextContent("Email already exists");
            });
        });
        test("should handle network error", async ()=>{
            const user = _userevent.default.setup();
            global.fetch.mockRejectedValueOnce(new Error("Network error"));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            // Fill out the form
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("permission-admin:all"));
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("error-message")).toHaveTextContent("An error occurred while creating the user");
            });
        });
        test("should disable submit button during loading", async ()=>{
            const user = _userevent.default.setup();
            global.fetch.mockImplementation(()=>new Promise(()=>{})); // Never resolves
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            // Fill out the form
            await user.type(_react1.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react1.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react1.screen.getByTestId("password-input"), "password123");
            await user.type(_react1.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react1.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react1.screen.getByTestId("permission-admin:all"));
            await user.click(_react1.screen.getByTestId("submit-button"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("submit-button")).toBeDisabled();
                expect(_react1.screen.getByTestId("submit-button")).toHaveTextContent("Creating...");
            });
        });
    });
    describe("Navigation", ()=>{
        test("should handle cancel button click", async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            await user.click(_react1.screen.getByTestId("cancel-button"));
            expect(mockPush).toHaveBeenCalledWith("/settings?tab=users");
        });
    });
    describe("Accessibility", ()=>{
        test("should have proper form labels", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            expect(_react1.screen.getByLabelText(/full name/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/email/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/^password/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/confirm password/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/assign to shop/i)).toBeInTheDocument();
        });
        test("should have required field indicators", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockAddUserPage, {}));
            expect(_react1.screen.getByText(/full name \*/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/email \*/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/^password \*/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/confirm password \*/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/assign to shop \*/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/user permissions \*/i)).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,