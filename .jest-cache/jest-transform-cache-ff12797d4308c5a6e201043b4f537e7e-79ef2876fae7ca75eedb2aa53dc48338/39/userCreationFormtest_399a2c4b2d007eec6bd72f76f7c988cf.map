{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/components/userCreationForm.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Mock dependencies\nconst mockPush = jest.fn();\nconst mockUseAuth = {\n  user: {\n    id: 1,\n    name: 'Admin User',\n    email: 'admin@test.com',\n    permissions: ['user:manage', 'admin:all'],\n  },\n  isAuthenticated: true,\n  hasPermission: jest.fn().mockReturnValue(true),\n};\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: mockPush }),\n}));\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth,\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock the actual AddUserPage component logic\nconst MockAddUserPage = () => {\n  const [userForm, setUserForm] = React.useState({\n    name: '',\n    email: '',\n    shop: '',\n    password: '',\n    confirmPassword: '',\n    permissions: [] as string[],\n    allowedAccounts: [] as string[]\n  });\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [formError, setFormError] = React.useState('');\n  const [formSuccess, setFormSuccess] = React.useState('');\n  const [dynamicShops, setDynamicShops] = React.useState([\n    { id: 'shop-1', name: 'Main Store' },\n    { id: 'shop-2', name: 'Warehouse' }\n  ]);\n  const [availablePermissions] = React.useState([\n    { id: 'admin:all', name: 'admin:all', module: 'Admin' },\n    { id: 'shop:assigned_only', name: 'shop:assigned_only', module: 'Shop' },\n    { id: 'sales:view', name: 'sales:view', module: 'Sales' },\n    { id: 'inventory:view', name: 'inventory:view', module: 'Inventory' }\n  ]);\n\n  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setUserForm(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handlePermissionChange = (permissionId: string) => {\n    setUserForm(prev => {\n      const newPermissions = prev.permissions.includes(permissionId)\n        ? prev.permissions.filter(id => id !== permissionId)\n        : [...prev.permissions, permissionId];\n      return { ...prev, permissions: newPermissions };\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setFormError('');\n    setFormSuccess('');\n\n    // Password validation\n    if (userForm.password !== userForm.confirmPassword) {\n      setFormError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    // Basic validation\n    if (!userForm.name || !userForm.email || !userForm.password || !userForm.shop) {\n      setFormError('Please fill in all required fields');\n      setIsLoading(false);\n      return;\n    }\n\n    if (userForm.permissions.length === 0) {\n      setFormError('Please select at least one permission');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer dev-token',\n        },\n        body: JSON.stringify(userForm),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setFormSuccess('User added successfully! Redirecting...');\n        setTimeout(() => {\n          mockPush('/settings?tab=users');\n        }, 1500);\n      } else {\n        setFormError(data.message || 'Failed to create user');\n      }\n    } catch (error) {\n      setFormError('An error occurred while creating the user');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\" data-testid=\"page-title\">\n          Add New User\n        </h1>\n\n        {formError && (\n          <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\" data-testid=\"error-message\">\n            <p className=\"text-red-800\">{formError}</p>\n          </div>\n        )}\n\n        {formSuccess && (\n          <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-md\" data-testid=\"success-message\">\n            <p className=\"text-green-800\">{formSuccess}</p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} data-testid=\"user-form\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Basic Information */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Full Name *\n              </label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={userForm.name}\n                onChange={handleFormChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"name-input\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email *\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={userForm.email}\n                onChange={handleFormChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"email-input\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password *\n              </label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={userForm.password}\n                onChange={handleFormChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"password-input\"\n                required\n                minLength={8}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Confirm Password *\n              </label>\n              <input\n                type=\"password\"\n                name=\"confirmPassword\"\n                value={userForm.confirmPassword}\n                onChange={handleFormChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"confirm-password-input\"\n                required\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Assign to Shop *\n              </label>\n              <select\n                name=\"shop\"\n                value={userForm.shop}\n                onChange={handleFormChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"shop-select\"\n                required\n              >\n                <option value=\"\">Select a shop</option>\n                {dynamicShops.map((shop) => (\n                  <option key={shop.id} value={shop.id}>\n                    {shop.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Permissions Section */}\n          <div className=\"mt-8\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\" data-testid=\"permissions-title\">\n              User Permissions *\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\" data-testid=\"permissions-grid\">\n              {availablePermissions.map((permission) => (\n                <label key={permission.id} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50\">\n                  <input\n                    type=\"checkbox\"\n                    checked={userForm.permissions.includes(permission.id)}\n                    onChange={() => handlePermissionChange(permission.id)}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    data-testid={`permission-${permission.id}`}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">{permission.name}</div>\n                    <div className=\"text-xs text-gray-500\">{permission.module}</div>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"mt-8 flex justify-end space-x-4\">\n            <button\n              type=\"button\"\n              onClick={() => mockPush('/settings?tab=users')}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n              data-testid=\"cancel-button\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"submit-button\"\n            >\n              {isLoading ? 'Creating...' : 'Create User'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\ndescribe('User Creation Form Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  describe('Form Rendering', () => {\n    test('should render all form elements correctly', () => {\n      render(<MockAddUserPage />);\n\n      expect(screen.getByTestId('page-title')).toHaveTextContent('Add New User');\n      expect(screen.getByTestId('user-form')).toBeInTheDocument();\n      expect(screen.getByTestId('name-input')).toBeInTheDocument();\n      expect(screen.getByTestId('email-input')).toBeInTheDocument();\n      expect(screen.getByTestId('password-input')).toBeInTheDocument();\n      expect(screen.getByTestId('confirm-password-input')).toBeInTheDocument();\n      expect(screen.getByTestId('shop-select')).toBeInTheDocument();\n      expect(screen.getByTestId('permissions-title')).toHaveTextContent('User Permissions *');\n      expect(screen.getByTestId('permissions-grid')).toBeInTheDocument();\n      expect(screen.getByTestId('submit-button')).toBeInTheDocument();\n      expect(screen.getByTestId('cancel-button')).toBeInTheDocument();\n    });\n\n    test('should render shop options correctly', () => {\n      render(<MockAddUserPage />);\n\n      const shopSelect = screen.getByTestId('shop-select');\n      expect(shopSelect).toBeInTheDocument();\n      expect(screen.getByText('Main Store')).toBeInTheDocument();\n      expect(screen.getByText('Warehouse')).toBeInTheDocument();\n    });\n\n    test('should render permission checkboxes correctly', () => {\n      render(<MockAddUserPage />);\n\n      expect(screen.getByTestId('permission-admin:all')).toBeInTheDocument();\n      expect(screen.getByTestId('permission-shop:assigned_only')).toBeInTheDocument();\n      expect(screen.getByTestId('permission-sales:view')).toBeInTheDocument();\n      expect(screen.getByTestId('permission-inventory:view')).toBeInTheDocument();\n    });\n  });\n\n  describe('Form Interactions', () => {\n    test('should handle text input changes', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      const nameInput = screen.getByTestId('name-input');\n      const emailInput = screen.getByTestId('email-input');\n      const passwordInput = screen.getByTestId('password-input');\n      const confirmPasswordInput = screen.getByTestId('confirm-password-input');\n\n      await user.type(nameInput, 'John Doe');\n      await user.type(emailInput, 'john@example.com');\n      await user.type(passwordInput, 'password123');\n      await user.type(confirmPasswordInput, 'password123');\n\n      expect(nameInput).toHaveValue('John Doe');\n      expect(emailInput).toHaveValue('john@example.com');\n      expect(passwordInput).toHaveValue('password123');\n      expect(confirmPasswordInput).toHaveValue('password123');\n    });\n\n    test('should handle shop selection', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      const shopSelect = screen.getByTestId('shop-select');\n      await user.selectOptions(shopSelect, 'shop-1');\n\n      expect(shopSelect).toHaveValue('shop-1');\n    });\n\n    test('should handle permission selection', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      const adminPermission = screen.getByTestId('permission-admin:all');\n      const shopPermission = screen.getByTestId('permission-shop:assigned_only');\n\n      await user.click(adminPermission);\n      await user.click(shopPermission);\n\n      expect(adminPermission).toBeChecked();\n      expect(shopPermission).toBeChecked();\n    });\n\n    test('should toggle permissions correctly', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      const adminPermission = screen.getByTestId('permission-admin:all');\n\n      // Check the permission\n      await user.click(adminPermission);\n      expect(adminPermission).toBeChecked();\n\n      // Uncheck the permission\n      await user.click(adminPermission);\n      expect(adminPermission).not.toBeChecked();\n    });\n  });\n\n  describe('Form Validation', () => {\n    test('should show error for password mismatch', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'different');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin:all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Passwords do not match');\n      });\n    });\n\n    test('should show error for missing required fields', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Please fill in all required fields');\n      });\n    });\n\n    test('should show error for missing permissions', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Please select at least one permission');\n      });\n    });\n  });\n\n  describe('Form Submission', () => {\n    test('should submit form with valid data successfully', async () => {\n      const user = userEvent.setup();\n      const mockResponse = {\n        success: true,\n        message: 'User created successfully',\n        data: { id: 'user-123', name: 'John Doe' }\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      render(<MockAddUserPage />);\n\n      // Fill out the form\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin:all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      // Verify API call\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/users', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer dev-token',\n          },\n          body: JSON.stringify({\n            name: 'John Doe',\n            email: 'john@example.com',\n            password: 'password123',\n            confirmPassword: 'password123',\n            shop: 'shop-1',\n            permissions: ['admin:all'],\n            allowedAccounts: [],\n          }),\n        });\n      });\n\n      // Verify success message\n      await waitFor(() => {\n        expect(screen.getByTestId('success-message')).toHaveTextContent('User added successfully! Redirecting...');\n      });\n\n      // Verify redirect\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/settings?tab=users');\n      }, { timeout: 2000 });\n    });\n\n    test('should handle API error response', async () => {\n      const user = userEvent.setup();\n      const mockErrorResponse = {\n        success: false,\n        message: 'Email already exists'\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => mockErrorResponse,\n      });\n\n      render(<MockAddUserPage />);\n\n      // Fill out the form\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'existing@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin:all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Email already exists');\n      });\n    });\n\n    test('should handle network error', async () => {\n      const user = userEvent.setup();\n      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n      render(<MockAddUserPage />);\n\n      // Fill out the form\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin:all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('An error occurred while creating the user');\n      });\n    });\n\n    test('should disable submit button during loading', async () => {\n      const user = userEvent.setup();\n      (global.fetch as jest.Mock).mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      render(<MockAddUserPage />);\n\n      // Fill out the form\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin:all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('submit-button')).toBeDisabled();\n        expect(screen.getByTestId('submit-button')).toHaveTextContent('Creating...');\n      });\n    });\n  });\n\n  describe('Navigation', () => {\n    test('should handle cancel button click', async () => {\n      const user = userEvent.setup();\n      render(<MockAddUserPage />);\n\n      await user.click(screen.getByTestId('cancel-button'));\n\n      expect(mockPush).toHaveBeenCalledWith('/settings?tab=users');\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper form labels', () => {\n      render(<MockAddUserPage />);\n\n      expect(screen.getByLabelText(/full name/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/^password/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/confirm password/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/assign to shop/i)).toBeInTheDocument();\n    });\n\n    test('should have required field indicators', () => {\n      render(<MockAddUserPage />);\n\n      expect(screen.getByText(/full name \\*/i)).toBeInTheDocument();\n      expect(screen.getByText(/email \\*/i)).toBeInTheDocument();\n      expect(screen.getByText(/^password \\*/i)).toBeInTheDocument();\n      expect(screen.getByText(/confirm password \\*/i)).toBeInTheDocument();\n      expect(screen.getByText(/assign to shop \\*/i)).toBeInTheDocument();\n      expect(screen.getByText(/user permissions \\*/i)).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","useAuth","mockUseAuth","fn","user","id","name","email","permissions","isAuthenticated","hasPermission","mockReturnValue","global","fetch","MockAddUserPage","userForm","setUserForm","React","useState","shop","password","confirmPassword","allowedAccounts","isLoading","setIsLoading","formError","setFormError","formSuccess","setFormSuccess","dynamicShops","setDynamicShops","availablePermissions","module","handleFormChange","e","value","target","prev","handlePermissionChange","permissionId","newPermissions","includes","filter","handleSubmit","preventDefault","length","response","method","headers","body","JSON","stringify","data","json","success","setTimeout","message","error","div","className","h1","data-testid","p","form","onSubmit","label","input","type","onChange","required","minLength","select","option","map","h3","permission","checked","button","onClick","disabled","describe","beforeEach","clearAllMocks","mockClear","test","render","expect","screen","getByTestId","toHaveTextContent","toBeInTheDocument","shopSelect","getByText","userEvent","setup","nameInput","emailInput","passwordInput","confirmPasswordInput","toHaveValue","selectOptions","adminPermission","shopPermission","click","toBeChecked","not","waitFor","mockResponse","mockResolvedValueOnce","ok","toHaveBeenCalledWith","timeout","mockErrorResponse","mockRejectedValueOnce","Error","mockImplementation","Promise","toBeDisabled","getByLabelText"],"mappings":"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"}