{"version":3,"names":["cov_20mssy5k54","actualCoverage","s","GET","req","f","apiKeySetting","_prisma","prisma","systemSettings","findUnique","where","key","b","_server","NextResponse","json","success","message","exists","isEmpty","value","trim","valueLength","length","firstFourChars","substring","lastUpdated","updatedAt","error","console","Error","String","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/test-settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(req: NextRequest) {\n    try {\n        // Get the Deepseek API key setting\n        const apiKeySetting = await prisma.systemSettings.findUnique({\n            where: { key: 'deepseek_api_key' }\n        });\n\n        // Check if setting exists\n        if (!apiKeySetting) {\n            return NextResponse.json({\n                success: false,\n                message: 'Deepseek API key setting not found',\n                exists: false\n            });\n        }\n\n        // Return information about the setting\n        return NextResponse.json({\n            success: true,\n            message: 'Deepseek API key setting found',\n            exists: true,\n            isEmpty: !apiKeySetting.value || apiKeySetting.value.trim() === '',\n            valueLength: apiKeySetting.value?.length || 0,\n            firstFourChars: apiKeySetting.value ? apiKeySetting.value.substring(0, 4) : null,\n            lastUpdated: apiKeySetting.updatedAt\n        });\n    } catch (error) {\n        console.error('Error testing settings:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to test settings',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAHc;;;;;;WAAAC,GAAA;;;;;kCAHoB;;;kCACnB;AAEhB,eAAeA,IAAIC,GAAgB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EACtC,IAAI;IACA;IACA,MAAMI,aAAA;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,OAAgB,MAAMK,OAAA,CAAAC,MAAM,CAACC,cAAc,CAACC,UAAU,CAAC;MACzDC,KAAA,EAAO;QAAEC,GAAA,EAAK;MAAmB;IACrC;IAEA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACA,IAAI,CAACI,aAAA,EAAe;MAAA;MAAAN,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAE,CAAA;MAChB,OAAOY,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrBC,OAAA,EAAS;QACTC,OAAA,EAAS;QACTC,MAAA,EAAQ;MACZ;IACJ;IAAA;IAAA;MAAAnB,cAAA,GAAAa,CAAA;IAAA;IAEA;IAAAb,cAAA,GAAAE,CAAA;IACA,OAAOY,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTC,OAAA,EAAS;MACTC,MAAA,EAAQ;MACRC,OAAA;MAAS;MAAA,CAAApB,cAAA,GAAAa,CAAA,WAACP,aAAA,CAAce,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAa,CAAA,UAAIP,aAAA,CAAce,KAAK,CAACC,IAAI,OAAO;MAChEC,WAAA;MAAa;MAAA,CAAAvB,cAAA,GAAAa,CAAA,UAAAP,aAAA,CAAce,KAAK,EAAEG,MAAA;MAAA;MAAA,CAAAxB,cAAA,GAAAa,CAAA,UAAU;MAC5CY,cAAA,EAAgBnB,aAAA,CAAce,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAa,CAAA,UAAGP,aAAA,CAAce,KAAK,CAACK,SAAS,CAAC,GAAG;MAAA;MAAA,CAAA1B,cAAA,GAAAa,CAAA,UAAK;MAC5Ec,WAAA,EAAarB,aAAA,CAAcsB;IAC/B;EACJ,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IACZ4B,OAAA,CAAQD,KAAK,CAAC,2BAA2BA,KAAA;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IACzC,OAAOY,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIC,OAAA,EAAS;MACTC,OAAA,EAAS;MACTW,KAAA,EAAOA,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAa,CAAA,UAAQgB,KAAA,CAAMX,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAAa,CAAA,UAAGmB,MAAA,CAAOH,KAAA;IAC3D,GACA;MAAEI,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}