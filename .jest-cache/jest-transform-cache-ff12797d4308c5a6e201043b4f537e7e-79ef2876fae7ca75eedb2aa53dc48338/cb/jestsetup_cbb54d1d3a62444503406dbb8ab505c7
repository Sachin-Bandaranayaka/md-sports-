8ad07231c709679a51bd828f9fb97204
// jest-dom adds custom jest matchers for asserting on DOM nodes.
"use strict";
// Mock Prisma client for testing
jest.mock("@/lib/prisma", ()=>({
        prisma: {
            user: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            product: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            auditLog: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            refreshToken: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            }
        }
    }));
// Mock Sequelize models for testing
jest.mock("@/lib/models", ()=>({
        Product: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        User: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Customer: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Invoice: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        AuditLog: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _cache = require("./src/lib/cache");
// Set up environment variables for testing
process.env.JWT_SECRET = "test-secret-key";
process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = "12h";
process.env.NEXTAUTH_SECRET = "test-nextauth-secret";
process.env.NODE_ENV = "test";
process.env.DATABASE_URL = "postgresql://test:test@localhost:5432/test";
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock window.matchMedia
if (typeof window !== "undefined") {
    Object.defineProperty(window, "matchMedia", {
        writable: true,
        value: jest.fn().mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
    });
}
// Clean up cache after all tests
afterAll(()=>{
    (0, _cache.cleanupCache)();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LWRvbSBhZGRzIGN1c3RvbSBqZXN0IG1hdGNoZXJzIGZvciBhc3NlcnRpbmcgb24gRE9NIG5vZGVzLlxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCB7IGNsZWFudXBDYWNoZSB9IGZyb20gJy4vc3JjL2xpYi9jYWNoZSc7XG5cbi8vIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRlc3RpbmdcbnByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1zZWNyZXQta2V5JztcbnByb2Nlc3MuZW52LkpXVF9BQ0NFU1NfVE9LRU5fRVhQSVJFU19JTiA9ICcxMmgnO1xucHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUID0gJ3Rlc3QtbmV4dGF1dGgtc2VjcmV0JztcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gJ3Bvc3RncmVzcWw6Ly90ZXN0OnRlc3RAbG9jYWxob3N0OjU0MzIvdGVzdCc7XG5cbi8vIE1vY2sgUHJpc21hIGNsaWVudCBmb3IgdGVzdGluZ1xuamVzdC5tb2NrKCdAL2xpYi9wcmlzbWEnLCAoKSA9PiAoe1xuICBwcmlzbWE6IHtcbiAgICB1c2VyOiB7XG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpXG4gICAgfSxcbiAgICBwcm9kdWN0OiB7XG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpXG4gICAgfSxcbiAgICBhdWRpdExvZzoge1xuICAgICAgZmluZE1hbnk6IGplc3QuZm4oKSxcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgICBkZWxldGU6IGplc3QuZm4oKVxuICAgIH0sXG4gICAgcmVmcmVzaFRva2VuOiB7XG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpXG4gICAgfVxuICB9XG59KSk7XG5cbi8vIE1vY2sgU2VxdWVsaXplIG1vZGVscyBmb3IgdGVzdGluZ1xuamVzdC5tb2NrKCdAL2xpYi9tb2RlbHMnLCAoKSA9PiAoe1xuICBQcm9kdWN0OiB7XG4gICAgZmluZEFsbDogamVzdC5mbigpLFxuICAgIGZpbmRCeVBrOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgZGVzdHJveTogamVzdC5mbigpXG4gIH0sXG4gIFVzZXI6IHtcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCksXG4gICAgZmluZEJ5UGs6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICBkZXN0cm95OiBqZXN0LmZuKClcbiAgfSxcbiAgQ3VzdG9tZXI6IHtcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCksXG4gICAgZmluZEJ5UGs6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICBkZXN0cm95OiBqZXN0LmZuKClcbiAgfSxcbiAgSW52b2ljZToge1xuICAgIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgICBmaW5kQnlQazogamVzdC5mbigpLFxuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIGRlc3Ryb3k6IGplc3QuZm4oKVxuICB9LFxuICBBdWRpdExvZzoge1xuICAgIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgICBmaW5kQnlQazogamVzdC5mbigpLFxuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIGRlc3Ryb3k6IGplc3QuZm4oKVxuICB9XG59KSk7XG5cbi8vIE1vY2sgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuICBkaXNjb25uZWN0KCkge31cbiAgb2JzZXJ2ZSgpIHt9XG4gIHVub2JzZXJ2ZSgpIHt9XG59O1xuXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgZGlzY29ubmVjdCgpIHt9XG4gIG9ic2VydmUoKSB7fVxuICB1bm9ic2VydmUoKSB7fVxufTtcblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHF1ZXJ5ID0+ICh7XG4gICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgfSk7XG59XG5cbi8vIENsZWFuIHVwIGNhY2hlIGFmdGVyIGFsbCB0ZXN0c1xuYWZ0ZXJBbGwoKCkgPT4ge1xuICBjbGVhbnVwQ2FjaGUoKTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInByaXNtYSIsInVzZXIiLCJmaW5kTWFueSIsImZuIiwiZmluZFVuaXF1ZSIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsInByb2R1Y3QiLCJhdWRpdExvZyIsInJlZnJlc2hUb2tlbiIsIlByb2R1Y3QiLCJmaW5kQWxsIiwiZmluZEJ5UGsiLCJkZXN0cm95IiwiVXNlciIsIkN1c3RvbWVyIiwiSW52b2ljZSIsIkF1ZGl0TG9nIiwicHJvY2VzcyIsImVudiIsIkpXVF9TRUNSRVQiLCJKV1RfQUNDRVNTX1RPS0VOX0VYUElSRVNfSU4iLCJORVhUQVVUSF9TRUNSRVQiLCJOT0RFX0VOViIsIkRBVEFCQVNFX1VSTCIsImdsb2JhbCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJkaXNjb25uZWN0Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlJlc2l6ZU9ic2VydmVyIiwid2luZG93IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsInZhbHVlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJhZnRlckFsbCIsImNsZWFudXBDYWNoZSJdLCJt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