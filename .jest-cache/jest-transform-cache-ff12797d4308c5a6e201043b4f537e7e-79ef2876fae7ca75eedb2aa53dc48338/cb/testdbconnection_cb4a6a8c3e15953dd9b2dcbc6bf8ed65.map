{"version":3,"names":["cov_2m4v4irat3","actualCoverage","s","require","config","path","Sequelize","databaseUrl","process","env","DATABASE_URL","console","log","b","sequelize","dialect","dialectOptions","ssl","rejectUnauthorized","logging","testConnection","f","authenticate","error","close"],"sources":["/Users/sachin/Documents/md-sports-/src/scripts/test-db-connection.js"],"sourcesContent":["// Load environment variables from .env.local\nrequire('dotenv').config({ path: '.env.local' });\nconst { Sequelize } = require('sequelize');\n\n// Get connection string from environment variables\nconst databaseUrl = process.env.DATABASE_URL;\n\nconsole.log('Testing database connection...');\nconsole.log('Database URL:', databaseUrl ? 'Available' : 'Not available');\n\n// Create Sequelize instance\nconst sequelize = new Sequelize(databaseUrl, {\n  dialect: 'postgres',\n  dialectOptions: {\n    ssl: {\n      require: true,\n      rejectUnauthorized: false\n    }\n  },\n  logging: false\n});\n\n// Test database connection\nasync function testConnection() {\n  try {\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n    return true;\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n    return false;\n  } finally {\n    await sequelize.close();\n  }\n}\n\ntestConnection(); "],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;AAdNC,OAAA,CAAQ,UAAUC,MAAM,CAAC;EAAEC,IAAA,EAAM;AAAa;AAC9C,MAAM;EAAEC;AAAS,CAAE;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAGC,OAAA,CAAQ;AAE9B;AACA,MAAMI,WAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAcM,OAAA,CAAQC,GAAG,CAACC,YAAY;AAAA;AAAAV,cAAA,GAAAE,CAAA;AAE5CS,OAAA,CAAQC,GAAG,CAAC;AAAA;AAAAZ,cAAA,GAAAE,CAAA;AACZS,OAAA,CAAQC,GAAG,CAAC,iBAAiBL,WAAA;AAAA;AAAA,CAAAP,cAAA,GAAAa,CAAA,UAAc;AAAA;AAAA,CAAAb,cAAA,GAAAa,CAAA,UAAc;AAEzD;AACA,MAAMC,SAAA;AAAA;AAAA,CAAAd,cAAA,GAAAE,CAAA,OAAY,IAAII,SAAA,CAAUC,WAAA,EAAa;EAC3CQ,OAAA,EAAS;EACTC,cAAA,EAAgB;IACdC,GAAA,EAAK;MACHd,OAAA,EAAS;MACTe,kBAAA,EAAoB;IACtB;EACF;EACAC,OAAA,EAAS;AACX;AAEA;AACA,eAAeC,eAAA;EAAA;EAAApB,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAE,CAAA;EACb,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACF,MAAMY,SAAA,CAAUQ,YAAY;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAC5BS,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACZ,OAAO;EACT,EAAE,OAAOqB,KAAA,EAAO;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IACdS,OAAA,CAAQY,KAAK,CAAC,sCAAsCA,KAAA;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IACpD,OAAO;EACT,UAAU;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACR,MAAMY,SAAA,CAAUU,KAAK;EACvB;AACF;AAAA;AAAAxB,cAAA,GAAAE,CAAA;AAEAkB,cAAA","ignoreList":[]}