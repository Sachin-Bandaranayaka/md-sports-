050cf3a9e1abba1a89bfe6afaf2bac74
"use strict";
// Mock the models
jest.mock("@/lib/models/Product", ()=>mockProduct);
jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _productService = require("../../src/services/productService");
const _auditService = require("../../src/services/auditService");
const _refreshTokenService = require("../../src/services/refreshTokenService");
// Mock the Product model
const mockProduct = {
    findAll: jest.fn(),
    findOne: jest.fn(),
    findByPk: jest.fn(),
    create: jest.fn(),
    update: jest.fn()
};
// Mock the Prisma client for audit service
const mockPrisma = {
    auditLog: {
        create: jest.fn(),
        findMany: jest.fn(),
        updateMany: jest.fn(),
        deleteMany: jest.fn()
    },
    refreshToken: {
        create: jest.fn(),
        findUnique: jest.fn(),
        delete: jest.fn(),
        deleteMany: jest.fn()
    },
    user: {
        findUnique: jest.fn()
    }
};
// Mock console methods
const consoleSpy = {
    log: jest.spyOn(console, "log").mockImplementation(()=>{}),
    error: jest.spyOn(console, "error").mockImplementation(()=>{}),
    warn: jest.spyOn(console, "warn").mockImplementation(()=>{})
};
describe("Service Layer Tests", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        consoleSpy.log.mockClear();
        consoleSpy.error.mockClear();
        consoleSpy.warn.mockClear();
    });
    afterAll(()=>{
        consoleSpy.log.mockRestore();
        consoleSpy.error.mockRestore();
        consoleSpy.warn.mockRestore();
    });
    describe("ProductService", ()=>{
        const mockProductData1 = {
            id: 1,
            name: "Test Product",
            description: "Test Description",
            price: 99.99,
            costPrice: 50.00,
            sku: "TEST-001",
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("getAllProducts", ()=>{
            it("should fetch all active products successfully", async ()=>{
                const mockProducts = [
                    mockProductData1,
                    {
                        ...mockProductData1,
                        id: 2,
                        name: "Product 2"
                    }
                ];
                mockProduct.findAll.mockResolvedValue(mockProducts);
                const result = await _productService.productService.getAllProducts();
                expect(mockProduct.findAll).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockProducts);
                expect(result).toHaveLength(2);
            });
            it("should handle database errors gracefully", async ()=>{
                const dbError = new Error("Database connection failed");
                mockProduct.findAll.mockRejectedValue(dbError);
                await expect(_productService.productService.getAllProducts()).rejects.toThrow("Database connection failed");
                expect(consoleSpy.error).toHaveBeenCalledWith("Error fetching products:", dbError);
            });
            it("should return empty array when no products found", async ()=>{
                mockProduct.findAll.mockResolvedValue([]);
                const result = await _productService.productService.getAllProducts();
                expect(result).toEqual([]);
                expect(result).toHaveLength(0);
            });
        });
        describe("getProductById", ()=>{
            it("should fetch product by id successfully", async ()=>{
                mockProduct.findOne.mockResolvedValue(mockProductData1);
                const result = await _productService.productService.getProductById(1);
                expect(mockProduct.findOne).toHaveBeenCalledWith({
                    where: {
                        id: 1,
                        isActive: true
                    }
                });
                expect(result).toEqual(mockProductData1);
            });
            it("should return null for non-existent product", async ()=>{
                mockProduct.findOne.mockResolvedValue(null);
                const result = await _productService.productService.getProductById(999);
                expect(result).toBeNull();
            });
            it("should handle database errors", async ()=>{
                const dbError = new Error("Product not found");
                mockProduct.findOne.mockRejectedValue(dbError);
                await expect(_productService.productService.getProductById(1)).rejects.toThrow("Product not found");
                expect(consoleSpy.error).toHaveBeenCalledWith("Error fetching product with ID 1:", dbError);
            });
        });
        describe("createProduct", ()=>{
            it("should create a new product successfully", async ()=>{
                const newProductData = {
                    name: "New Product",
                    description: "New Description",
                    price: 149.99,
                    costPrice: 75.00,
                    sku: "NEW-001"
                };
                const createdProduct = {
                    ...mockProductData1,
                    ...newProductData,
                    id: 3
                };
                mockProduct.create.mockResolvedValue(createdProduct);
                const result = await _productService.productService.createProduct(newProductData);
                expect(mockProduct.create).toHaveBeenCalledWith(newProductData);
                expect(result).toEqual(createdProduct);
            });
            it("should handle validation errors", async ()=>{
                const validationError = new Error("Validation failed: name is required");
                mockProduct.create.mockRejectedValue(validationError);
                await expect(_productService.productService.createProduct({})).rejects.toThrow("Validation failed: name is required");
                expect(consoleSpy.error).toHaveBeenCalledWith("Error creating product:", validationError);
            });
            it("should handle duplicate SKU errors", async ()=>{
                const duplicateError = new Error("SKU already exists");
                mockProduct.create.mockRejectedValue(duplicateError);
                const duplicateData = {
                    name: "Test",
                    sku: "EXISTING-SKU"
                };
                await expect(_productService.productService.createProduct(duplicateData)).rejects.toThrow("SKU already exists");
            });
        });
        describe("updateProduct", ()=>{
            it("should update product successfully", async ()=>{
                const updateData = {
                    name: "Updated Product",
                    price: 199.99
                };
                const mockProductInstance = {
                    ...mockProductData1,
                    update: jest.fn().mockResolvedValue({
                        ...mockProductData1,
                        ...updateData
                    })
                };
                mockProduct.findByPk.mockResolvedValue(mockProductInstance);
                const result = await _productService.productService.updateProduct(1, updateData);
                expect(mockProduct.findByPk).toHaveBeenCalledWith(1);
                expect(mockProductInstance.update).toHaveBeenCalledWith(updateData);
                expect(result).toEqual({
                    ...mockProductData1,
                    ...updateData
                });
            });
            it("should throw error for non-existent product", async ()=>{
                mockProduct.findByPk.mockResolvedValue(null);
                await expect(_productService.productService.updateProduct(999, {
                    name: "Updated"
                })).rejects.toThrow("Product with ID 999 not found");
                expect(consoleSpy.error).toHaveBeenCalledWith("Error updating product with ID 999:", expect.any(Error));
            });
            it("should handle database update errors", async ()=>{
                const mockProductInstance = {
                    update: jest.fn().mockRejectedValue(new Error("Update failed"))
                };
                mockProduct.findByPk.mockResolvedValue(mockProductInstance);
                await expect(_productService.productService.updateProduct(1, {
                    name: "Updated"
                })).rejects.toThrow("Update failed");
            });
        });
        describe("deleteProduct", ()=>{
            it("should soft delete product successfully", async ()=>{
                const mockProductInstance = {
                    ...mockProductData1,
                    update: jest.fn().mockResolvedValue({
                        ...mockProductData1,
                        isActive: false
                    })
                };
                mockProduct.findByPk.mockResolvedValue(mockProductInstance);
                const result = await _productService.productService.deleteProduct(1);
                expect(mockProduct.findByPk).toHaveBeenCalledWith(1);
                expect(mockProductInstance.update).toHaveBeenCalledWith({
                    isActive: false
                });
                expect(result).toEqual({
                    ...mockProductData1,
                    isActive: false
                });
            });
            it("should throw error for non-existent product", async ()=>{
                mockProduct.findByPk.mockResolvedValue(null);
                await expect(_productService.productService.deleteProduct(999)).rejects.toThrow("Product with ID 999 not found");
                expect(consoleSpy.error).toHaveBeenCalledWith("Error deleting product with ID 999:", expect.any(Error));
            });
        });
    });
    describe("AuditService", ()=>{
        const mockAuditData = {
            id: 1,
            userId: 1,
            action: "CREATE",
            entity: "Product",
            entityId: 1,
            details: {
                name: "Test Product"
            },
            createdAt: new Date()
        };
        describe("logAction", ()=>{
            it("should log audit action successfully", async ()=>{
                mockPrisma.auditLog.create.mockResolvedValue(mockAuditData);
                const result = await _auditService.auditService.logAction({
                    userId: 1,
                    action: "CREATE",
                    entity: "Product",
                    entityId: 1,
                    details: {
                        name: "Test Product"
                    }
                });
                expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({
                    data: {
                        userId: 1,
                        action: "CREATE",
                        entity: "Product",
                        entityId: 1,
                        details: {
                            name: "Test Product"
                        }
                    }
                });
                expect(result).toEqual(mockAuditData);
            });
            it("should handle audit logging errors gracefully", async ()=>{
                const auditError = new Error("Audit log failed");
                mockPrisma.auditLog.create.mockRejectedValue(auditError);
                // Should not throw error, just log it
                const result = await _auditService.auditService.logAction({
                    userId: 1,
                    action: "CREATE",
                    entity: "Product"
                });
                expect(result).toBeUndefined();
                expect(consoleSpy.error).toHaveBeenCalledWith("Failed to log audit action:", auditError);
            });
        });
        describe("getAuditLogs", ()=>{
            it("should fetch audit logs with filters", async ()=>{
                const mockLogs = [
                    mockAuditData,
                    {
                        ...mockAuditData,
                        id: 2,
                        action: "UPDATE"
                    }
                ];
                mockPrisma.auditLog.findMany.mockResolvedValue(mockLogs);
                const result = await _auditService.auditService.getAuditLogs({
                    userId: 1,
                    entity: "Product",
                    startDate: new Date("2024-01-01"),
                    endDate: new Date("2024-12-31")
                });
                expect(mockPrisma.auditLog.findMany).toHaveBeenCalledWith({
                    where: {
                        userId: 1,
                        entity: "Product",
                        createdAt: {
                            gte: new Date("2024-01-01"),
                            lte: new Date("2024-12-31")
                        }
                    },
                    orderBy: {
                        createdAt: "desc"
                    },
                    include: {
                        user: {
                            select: {
                                username: true,
                                email: true
                            }
                        }
                    }
                });
                expect(result).toEqual(mockLogs);
            });
            it("should handle empty results", async ()=>{
                mockPrisma.auditLog.findMany.mockResolvedValue([]);
                const result = await _auditService.auditService.getAuditLogs({});
                expect(result).toEqual([]);
            });
        });
        describe("cleanupOldLogs", ()=>{
            it("should cleanup old audit logs", async ()=>{
                const deleteResult = {
                    count: 50
                };
                mockPrisma.auditLog.deleteMany.mockResolvedValue(deleteResult);
                const result = await _auditService.auditService.cleanupOldLogs(90); // 90 days old
                const expectedCutoffDate = new Date();
                expectedCutoffDate.setDate(expectedCutoffDate.getDate() - 90);
                expect(mockPrisma.auditLog.deleteMany).toHaveBeenCalledWith({
                    where: {
                        createdAt: {
                            lt: expect.any(Date)
                        }
                    }
                });
                expect(result).toEqual(50);
            });
        });
    });
    describe("RefreshTokenService", ()=>{
        const mockRefreshToken = {
            id: 1,
            token: "refresh-token-123",
            userId: 1,
            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            createdAt: new Date()
        };
        describe("createRefreshToken", ()=>{
            it("should create refresh token successfully", async ()=>{
                mockPrisma.refreshToken.create.mockResolvedValue(mockRefreshToken);
                const result = await _refreshTokenService.refreshTokenService.createRefreshToken(1);
                expect(mockPrisma.refreshToken.create).toHaveBeenCalledWith({
                    data: {
                        userId: 1,
                        token: expect.any(String),
                        expiresAt: expect.any(Date)
                    }
                });
                expect(result).toEqual(mockRefreshToken);
            });
            it("should handle creation errors", async ()=>{
                const createError = new Error("Token creation failed");
                mockPrisma.refreshToken.create.mockRejectedValue(createError);
                await expect(_refreshTokenService.refreshTokenService.createRefreshToken(1)).rejects.toThrow("Token creation failed");
            });
        });
        describe("validateRefreshToken", ()=>{
            it("should validate valid refresh token", async ()=>{
                const mockUser = {
                    id: 1,
                    username: "testuser",
                    email: "test@example.com"
                };
                mockPrisma.refreshToken.findUnique.mockResolvedValue({
                    ...mockRefreshToken,
                    user: mockUser
                });
                const result = await _refreshTokenService.refreshTokenService.validateRefreshToken("refresh-token-123");
                expect(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({
                    where: {
                        token: "refresh-token-123"
                    },
                    include: {
                        user: true
                    }
                });
                expect(result).toEqual({
                    ...mockRefreshToken,
                    user: mockUser
                });
            });
            it("should return null for invalid token", async ()=>{
                mockPrisma.refreshToken.findUnique.mockResolvedValue(null);
                const result = await _refreshTokenService.refreshTokenService.validateRefreshToken("invalid-token");
                expect(result).toBeNull();
            });
            it("should return null for expired token", async ()=>{
                const expiredToken = {
                    ...mockRefreshToken,
                    expiresAt: new Date(Date.now() - 1000)
                };
                mockPrisma.refreshToken.findUnique.mockResolvedValue(expiredToken);
                const result = await _refreshTokenService.refreshTokenService.validateRefreshToken("expired-token");
                expect(result).toBeNull();
            });
        });
        describe("revokeRefreshToken", ()=>{
            it("should revoke refresh token successfully", async ()=>{
                mockPrisma.refreshToken.delete.mockResolvedValue(mockRefreshToken);
                const result = await _refreshTokenService.refreshTokenService.revokeRefreshToken("refresh-token-123");
                expect(mockPrisma.refreshToken.delete).toHaveBeenCalledWith({
                    where: {
                        token: "refresh-token-123"
                    }
                });
                expect(result).toEqual(mockRefreshToken);
            });
            it("should handle non-existent token gracefully", async ()=>{
                const notFoundError = new Error("Token not found");
                mockPrisma.refreshToken.delete.mockRejectedValue(notFoundError);
                await expect(_refreshTokenService.refreshTokenService.revokeRefreshToken("non-existent")).rejects.toThrow("Token not found");
            });
        });
        describe("revokeAllUserTokens", ()=>{
            it("should revoke all tokens for user", async ()=>{
                const deleteResult = {
                    count: 3
                };
                mockPrisma.refreshToken.deleteMany.mockResolvedValue(deleteResult);
                const result = await _refreshTokenService.refreshTokenService.revokeAllUserTokens(1);
                expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                    where: {
                        userId: 1
                    }
                });
                expect(result).toEqual(3);
            });
        });
        describe("cleanupExpiredTokens", ()=>{
            it("should cleanup expired tokens", async ()=>{
                const deleteResult = {
                    count: 10
                };
                mockPrisma.refreshToken.deleteMany.mockResolvedValue(deleteResult);
                const result = await _refreshTokenService.refreshTokenService.cleanupExpiredTokens();
                expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                    where: {
                        expiresAt: {
                            lt: expect.any(Date)
                        }
                    }
                });
                expect(result).toEqual(10);
            });
        });
    });
    describe("Service Integration Tests", ()=>{
        it("should handle service dependencies correctly", async ()=>{
            // Test interaction between services
            const productData = {
                name: "Test Product",
                price: 99.99
            };
            const createdProduct = {
                ...mockProductData,
                ...productData,
                id: 5
            };
            mockProduct.create.mockResolvedValue(createdProduct);
            mockPrisma.auditLog.create.mockResolvedValue({
                id: 1,
                userId: 1,
                action: "CREATE",
                entity: "Product",
                entityId: 5,
                details: productData,
                createdAt: new Date()
            });
            // Create product
            const product = await _productService.productService.createProduct(productData);
            // Log audit action
            const auditLog = await _auditService.auditService.logAction({
                userId: 1,
                action: "CREATE",
                entity: "Product",
                entityId: product.id,
                details: productData
            });
            expect(product).toEqual(createdProduct);
            expect(auditLog).toBeDefined();
            expect(auditLog.entityId).toBe(product.id);
        });
        it("should handle service error propagation", async ()=>{
            const dbError = new Error("Database connection lost");
            mockProduct.findAll.mockRejectedValue(dbError);
            mockPrisma.auditLog.create.mockRejectedValue(dbError);
            // Both services should handle errors independently
            await expect(_productService.productService.getAllProducts()).rejects.toThrow("Database connection lost");
            const auditResult = await _auditService.auditService.logAction({
                userId: 1,
                action: "READ",
                entity: "Product"
            });
            expect(auditResult).toBeUndefined(); // Audit service handles errors gracefully
        });
    });
});

//# sourceMappingURL=data:application/json;base64,