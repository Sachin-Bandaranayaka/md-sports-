203027c4923dfd0ad27128e5cb0f949f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PurchaseInvoiceService: function() {
        return PurchaseInvoiceService;
    },
    default: function() {
        return _default;
    }
});
const _client = require("@prisma/client");
const _db = require("../lib/db");
class PurchaseInvoiceService {
    constructor(){
        this.prisma = _db.db;
    }
    async createPurchaseInvoice(data) {
        return await this.prisma.purchaseInvoice.create({
            data,
            include: {
                supplier: true,
                items: {
                    include: {
                        product: true
                    }
                }
            }
        });
    }
    async createPurchaseInvoiceWithItems(data) {
        const { items, ...invoiceData } = data;
        return await this.prisma.$transaction(async (tx)=>{
            const invoice = await tx.purchaseInvoice.create({
                data: invoiceData
            });
            if (items && items.length > 0) {
                await tx.purchaseInvoiceItem.createMany({
                    data: items.map((item)=>({
                            purchaseInvoiceId: invoice.id,
                            productId: item.productId,
                            quantity: item.quantity,
                            price: item.price
                        }))
                });
            }
            return await tx.purchaseInvoice.findUnique({
                where: {
                    id: invoice.id
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
        });
    }
    async createPurchaseInvoiceWithCalculations(data) {
        // Calculate total from items
        const calculatedTotal = data.items.reduce((sum, item)=>{
            return sum + item.quantity * item.price;
        }, 0);
        return await this.createPurchaseInvoiceWithItems({
            ...data,
            totalAmount: calculatedTotal
        });
    }
    async getPurchaseInvoiceById(id) {
        return await this.prisma.purchaseInvoice.findUnique({
            where: {
                id
            },
            include: {
                supplier: true,
                items: {
                    include: {
                        product: true
                    }
                }
            }
        });
    }
    async getPurchaseInvoiceWithDetails(id) {
        return await this.getPurchaseInvoiceById(id);
    }
    async getPurchaseInvoices(options = {}) {
        const { page = 1, limit = 10, sortBy = "createdAt", sortOrder = "desc" } = options;
        const skip = (page - 1) * limit;
        return await this.prisma.purchaseInvoice.findMany({
            skip,
            take: limit,
            orderBy: {
                [sortBy]: sortOrder
            },
            include: {
                supplier: true,
                items: {
                    include: {
                        product: true
                    }
                }
            }
        });
    }
    async updatePurchaseInvoice(id, data) {
        return await this.prisma.purchaseInvoice.update({
            where: {
                id
            },
            data,
            include: {
                supplier: true,
                items: {
                    include: {
                        product: true
                    }
                }
            }
        });
    }
    async updatePurchaseInvoiceStatus(id, status) {
        return await this.updatePurchaseInvoice(id, {
            status
        });
    }
    async deletePurchaseInvoice(id) {
        return await this.prisma.$transaction(async (tx)=>{
            // Delete related items first
            await tx.purchaseInvoiceItem.deleteMany({
                where: {
                    purchaseInvoiceId: id
                }
            });
            // Delete the invoice
            return await tx.purchaseInvoice.delete({
                where: {
                    id
                }
            });
        });
    }
    async searchPurchaseInvoices(filters) {
        const where = {};
        if (filters.supplierId) {
            where.supplierId = filters.supplierId;
        }
        if (filters.status) {
            where.status = filters.status;
        }
        if (filters.startDate || filters.endDate) {
            where.createdAt = {};
            if (filters.startDate) {
                where.createdAt.gte = filters.startDate;
            }
            if (filters.endDate) {
                where.createdAt.lte = filters.endDate;
            }
        }
        if (filters.search) {
            where.OR = [
                {
                    invoiceNumber: {
                        contains: filters.search,
                        mode: "insensitive"
                    }
                },
                {
                    notes: {
                        contains: filters.search,
                        mode: "insensitive"
                    }
                }
            ];
        }
        return await this.prisma.purchaseInvoice.findMany({
            where,
            include: {
                supplier: true,
                items: {
                    include: {
                        product: true
                    }
                }
            },
            orderBy: {
                createdAt: "desc"
            }
        });
    }
    async approvePurchaseInvoice(id) {
        return await this.updatePurchaseInvoiceStatus(id, _client.PurchaseInvoiceStatus.APPROVED);
    }
}
const _default = PurchaseInvoiceService;

//# sourceMappingURL=data:application/json;base64,