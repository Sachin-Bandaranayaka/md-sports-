9cb91b5da46711a2fb67f6fd03c6dfa8
"use strict";

/* istanbul ignore next */
function cov_99w0kl2h2() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts";
  var hash = "769192d98bff7dee197de13d9d1186811bd152ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 68
        }
      },
      "10": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "11": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "12": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "13": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 25
        }
      },
      "14": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 25
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 286,
          column: 2
        }
      },
      "16": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "18": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 94
        }
      },
      "19": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "20": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 38,
          column: 19
        }
      },
      "21": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "22": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "23": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "24": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "26": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 65,
          column: 19
        }
      },
      "27": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "28": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 61
        }
      },
      "29": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 70
        }
      },
      "30": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 77,
          column: 108
        }
      },
      "31": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 59
        }
      },
      "32": {
        start: {
          line: 79,
          column: 34
        },
        end: {
          line: 79,
          column: 73
        }
      },
      "33": {
        start: {
          line: 80,
          column: 32
        },
        end: {
          line: 80,
          column: 64
        }
      },
      "34": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 53
        }
      },
      "35": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 43
        }
      },
      "36": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "37": {
        start: {
          line: 94,
          column: 31
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "38": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "39": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 70
        }
      },
      "40": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "41": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 119
        }
      },
      "42": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 32
        }
      },
      "43": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 88
        }
      },
      "44": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "45": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 48
        }
      },
      "46": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 110
        }
      },
      "47": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 95
        }
      },
      "48": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "49": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 44
        }
      },
      "50": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "51": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 58
        }
      },
      "52": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "53": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 44
        }
      },
      "54": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 88
        }
      },
      "55": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "56": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 137,
          column: 18
        }
      },
      "57": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 139,
          column: 60
        }
      },
      "58": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 144,
          column: 17
        }
      },
      "59": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 143,
          column: 23
        }
      },
      "60": {
        start: {
          line: 147,
          column: 58
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "61": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 197,
          column: 22
        }
      },
      "62": {
        start: {
          line: 199,
          column: 75
        },
        end: {
          line: 201,
          column: 22
        }
      },
      "63": {
        start: {
          line: 203,
          column: 75
        },
        end: {
          line: 237,
          column: 22
        }
      },
      "64": {
        start: {
          line: 239,
          column: 68
        },
        end: {
          line: 239,
          column: 78
        }
      },
      "65": {
        start: {
          line: 241,
          column: 38
        },
        end: {
          line: 251,
          column: 14
        }
      },
      "66": {
        start: {
          line: 242,
          column: 60
        },
        end: {
          line: 242,
          column: 67
        }
      },
      "67": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 250,
          column: 18
        }
      },
      "68": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "69": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 100
        }
      },
      "70": {
        start: {
          line: 269,
          column: 29
        },
        end: {
          line: 269,
          column: 68
        }
      },
      "71": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 52
        }
      },
      "72": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 101
        }
      },
      "73": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 28
        }
      },
      "74": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 61
        }
      },
      "75": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "76": {
        start: {
          line: 287,
          column: 13
        },
        end: {
          line: 698,
          column: 2
        }
      },
      "77": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 697,
          column: 7
        }
      },
      "78": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 694,
          column: 9
        }
      },
      "79": {
        start: {
          line: 291,
          column: 38
        },
        end: {
          line: 291,
          column: 103
        }
      },
      "80": {
        start: {
          line: 292,
          column: 42
        },
        end: {
          line: 292,
          column: 112
        }
      },
      "81": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "82": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 298,
          column: 19
        }
      },
      "83": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 71
        }
      },
      "84": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "85": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 307,
          column: 19
        }
      },
      "86": {
        start: {
          line: 309,
          column: 32
        },
        end: {
          line: 309,
          column: 52
        }
      },
      "87": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "88": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "89": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 319,
          column: 23
        }
      },
      "90": {
        start: {
          line: 322,
          column: 41
        },
        end: {
          line: 322,
          column: 128
        }
      },
      "91": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 334,
          column: 17
        }
      },
      "92": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "93": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 331,
          column: 27
        }
      },
      "94": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 151
        }
      },
      "95": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 88
        }
      },
      "96": {
        start: {
          line: 337,
          column: 66
        },
        end: {
          line: 337,
          column: 77
        }
      },
      "97": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 105
        }
      },
      "98": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 71
        }
      },
      "99": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "100": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 348,
          column: 19
        }
      },
      "101": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 384,
          column: 13
        }
      },
      "102": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 351,
          column: 25
        }
      },
      "103": {
        start: {
          line: 352,
          column: 29
        },
        end: {
          line: 352,
          column: 52
        }
      },
      "104": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 360,
          column: 19
        }
      },
      "105": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 383,
          column: 17
        }
      },
      "106": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 367,
          column: 23
        }
      },
      "107": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 382,
          column: 23
        }
      },
      "108": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "109": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 68
        }
      },
      "110": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "111": {
        start: {
          line: 391,
          column: 33
        },
        end: {
          line: 400,
          column: 18
        }
      },
      "112": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 440,
          column: 17
        }
      },
      "113": {
        start: {
          line: 403,
          column: 40
        },
        end: {
          line: 407,
          column: 25
        }
      },
      "114": {
        start: {
          line: 404,
          column: 38
        },
        end: {
          line: 404,
          column: 97
        }
      },
      "115": {
        start: {
          line: 405,
          column: 41
        },
        end: {
          line: 405,
          column: 73
        }
      },
      "116": {
        start: {
          line: 406,
          column: 24
        },
        end: {
          line: 406,
          column: 54
        }
      },
      "117": {
        start: {
          line: 409,
          column: 48
        },
        end: {
          line: 422,
          column: 22
        }
      },
      "118": {
        start: {
          line: 423,
          column: 43
        },
        end: {
          line: 423,
          column: 78
        }
      },
      "119": {
        start: {
          line: 424,
          column: 44
        },
        end: {
          line: 424,
          column: 72
        }
      },
      "120": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 439,
          column: 21
        }
      },
      "121": {
        start: {
          line: 426,
          column: 24
        },
        end: {
          line: 438,
          column: 27
        }
      },
      "122": {
        start: {
          line: 443,
          column: 39
        },
        end: {
          line: 443,
          column: 111
        }
      },
      "123": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 76
        }
      },
      "124": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 457,
          column: 13
        }
      },
      "125": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 89
        }
      },
      "126": {
        start: {
          line: 448,
          column: 41
        },
        end: {
          line: 448,
          column: 131
        }
      },
      "127": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 69
        }
      },
      "128": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 453,
          column: 17
        }
      },
      "129": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 451,
          column: 79
        }
      },
      "130": {
        start: {
          line: 452,
          column: 20
        },
        end: {
          line: 452,
          column: 112
        }
      },
      "131": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 51
        }
      },
      "132": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 83
        }
      },
      "133": {
        start: {
          line: 458,
          column: 45
        },
        end: {
          line: 458,
          column: 47
        }
      },
      "134": {
        start: {
          line: 459,
          column: 28
        },
        end: {
          line: 652,
          column: 19
        }
      },
      "135": {
        start: {
          line: 459,
          column: 92
        },
        end: {
          line: 652,
          column: 18
        }
      },
      "136": {
        start: {
          line: 460,
          column: 43
        },
        end: {
          line: 475,
          column: 22
        }
      },
      "137": {
        start: {
          line: 478,
          column: 20
        },
        end: {
          line: 560,
          column: 21
        }
      },
      "138": {
        start: {
          line: 480,
          column: 43
        },
        end: {
          line: 480,
          column: 105
        }
      },
      "139": {
        start: {
          line: 480,
          column: 76
        },
        end: {
          line: 480,
          column: 104
        }
      },
      "140": {
        start: {
          line: 481,
          column: 47
        },
        end: {
          line: 492,
          column: 26
        }
      },
      "141": {
        start: {
          line: 494,
          column: 47
        },
        end: {
          line: 497,
          column: 31
        }
      },
      "142": {
        start: {
          line: 494,
          column: 82
        },
        end: {
          line: 497,
          column: 29
        }
      },
      "143": {
        start: {
          line: 499,
          column: 50
        },
        end: {
          line: 499,
          column: 98
        }
      },
      "144": {
        start: {
          line: 499,
          column: 74
        },
        end: {
          line: 499,
          column: 97
        }
      },
      "145": {
        start: {
          line: 500,
          column: 24
        },
        end: {
          line: 515,
          column: 25
        }
      },
      "146": {
        start: {
          line: 501,
          column: 53
        },
        end: {
          line: 511,
          column: 30
        }
      },
      "147": {
        start: {
          line: 512,
          column: 28
        },
        end: {
          line: 514,
          column: 31
        }
      },
      "148": {
        start: {
          line: 513,
          column: 32
        },
        end: {
          line: 513,
          column: 85
        }
      },
      "149": {
        start: {
          line: 516,
          column: 59
        },
        end: {
          line: 516,
          column: 60
        }
      },
      "150": {
        start: {
          line: 518,
          column: 49
        },
        end: {
          line: 534,
          column: 26
        }
      },
      "151": {
        start: {
          line: 519,
          column: 46
        },
        end: {
          line: 519,
          column: 74
        }
      },
      "152": {
        start: {
          line: 520,
          column: 46
        },
        end: {
          line: 520,
          column: 80
        }
      },
      "153": {
        start: {
          line: 521,
          column: 53
        },
        end: {
          line: 521,
          column: 79
        }
      },
      "154": {
        start: {
          line: 522,
          column: 50
        },
        end: {
          line: 522,
          column: 75
        }
      },
      "155": {
        start: {
          line: 523,
          column: 47
        },
        end: {
          line: 523,
          column: 79
        }
      },
      "156": {
        start: {
          line: 524,
          column: 28
        },
        end: {
          line: 524,
          column: 77
        }
      },
      "157": {
        start: {
          line: 525,
          column: 28
        },
        end: {
          line: 533,
          column: 30
        }
      },
      "158": {
        start: {
          line: 536,
          column: 24
        },
        end: {
          line: 538,
          column: 27
        }
      },
      "159": {
        start: {
          line: 540,
          column: 44
        },
        end: {
          line: 547,
          column: 29
        }
      },
      "160": {
        start: {
          line: 541,
          column: 46
        },
        end: {
          line: 541,
          column: 74
        }
      },
      "161": {
        start: {
          line: 542,
          column: 46
        },
        end: {
          line: 542,
          column: 80
        }
      },
      "162": {
        start: {
          line: 543,
          column: 53
        },
        end: {
          line: 543,
          column: 79
        }
      },
      "163": {
        start: {
          line: 544,
          column: 50
        },
        end: {
          line: 544,
          column: 75
        }
      },
      "164": {
        start: {
          line: 545,
          column: 47
        },
        end: {
          line: 545,
          column: 79
        }
      },
      "165": {
        start: {
          line: 546,
          column: 28
        },
        end: {
          line: 546,
          column: 52
        }
      },
      "166": {
        start: {
          line: 548,
          column: 45
        },
        end: {
          line: 548,
          column: 132
        }
      },
      "167": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 559,
          column: 27
        }
      },
      "168": {
        start: {
          line: 562,
          column: 20
        },
        end: {
          line: 640,
          column: 21
        }
      },
      "169": {
        start: {
          line: 564,
          column: 43
        },
        end: {
          line: 564,
          column: 105
        }
      },
      "170": {
        start: {
          line: 564,
          column: 76
        },
        end: {
          line: 564,
          column: 104
        }
      },
      "171": {
        start: {
          line: 565,
          column: 50
        },
        end: {
          line: 581,
          column: 26
        }
      },
      "172": {
        start: {
          line: 583,
          column: 51
        },
        end: {
          line: 583,
          column: 60
        }
      },
      "173": {
        start: {
          line: 584,
          column: 24
        },
        end: {
          line: 589,
          column: 27
        }
      },
      "174": {
        start: {
          line: 585,
          column: 28
        },
        end: {
          line: 587,
          column: 29
        }
      },
      "175": {
        start: {
          line: 586,
          column: 32
        },
        end: {
          line: 586,
          column: 75
        }
      },
      "176": {
        start: {
          line: 588,
          column: 28
        },
        end: {
          line: 588,
          column: 78
        }
      },
      "177": {
        start: {
          line: 591,
          column: 24
        },
        end: {
          line: 601,
          column: 25
        }
      },
      "178": {
        start: {
          line: 592,
          column: 46
        },
        end: {
          line: 592,
          column: 74
        }
      },
      "179": {
        start: {
          line: 593,
          column: 51
        },
        end: {
          line: 593,
          column: 90
        }
      },
      "180": {
        start: {
          line: 594,
          column: 28
        },
        end: {
          line: 596,
          column: 29
        }
      },
      "181": {
        start: {
          line: 595,
          column: 32
        },
        end: {
          line: 595,
          column: 113
        }
      },
      "182": {
        start: {
          line: 597,
          column: 51
        },
        end: {
          line: 597,
          column: 107
        }
      },
      "183": {
        start: {
          line: 597,
          column: 85
        },
        end: {
          line: 597,
          column: 103
        }
      },
      "184": {
        start: {
          line: 598,
          column: 28
        },
        end: {
          line: 600,
          column: 29
        }
      },
      "185": {
        start: {
          line: 599,
          column: 32
        },
        end: {
          line: 599,
          column: 181
        }
      },
      "186": {
        start: {
          line: 603,
          column: 49
        },
        end: {
          line: 603,
          column: 51
        }
      },
      "187": {
        start: {
          line: 604,
          column: 24
        },
        end: {
          line: 627,
          column: 25
        }
      },
      "188": {
        start: {
          line: 605,
          column: 46
        },
        end: {
          line: 605,
          column: 74
        }
      },
      "189": {
        start: {
          line: 606,
          column: 51
        },
        end: {
          line: 606,
          column: 90
        }
      },
      "190": {
        start: {
          line: 607,
          column: 52
        },
        end: {
          line: 607,
          column: 65
        }
      },
      "191": {
        start: {
          line: 608,
          column: 28
        },
        end: {
          line: 626,
          column: 29
        }
      },
      "192": {
        start: {
          line: 609,
          column: 32
        },
        end: {
          line: 609,
          column: 66
        }
      },
      "193": {
        start: {
          line: 609,
          column: 60
        },
        end: {
          line: 609,
          column: 66
        }
      },
      "194": {
        start: {
          line: 610,
          column: 32
        },
        end: {
          line: 625,
          column: 33
        }
      },
      "195": {
        start: {
          line: 611,
          column: 57
        },
        end: {
          line: 611,
          column: 108
        }
      },
      "196": {
        start: {
          line: 612,
          column: 60
        },
        end: {
          line: 612,
          column: 82
        }
      },
      "197": {
        start: {
          line: 613,
          column: 60
        },
        end: {
          line: 613,
          column: 97
        }
      },
      "198": {
        start: {
          line: 614,
          column: 36
        },
        end: {
          line: 617,
          column: 39
        }
      },
      "199": {
        start: {
          line: 618,
          column: 36
        },
        end: {
          line: 623,
          column: 39
        }
      },
      "200": {
        start: {
          line: 624,
          column: 36
        },
        end: {
          line: 624,
          column: 70
        }
      },
      "201": {
        start: {
          line: 629,
          column: 24
        },
        end: {
          line: 639,
          column: 25
        }
      },
      "202": {
        start: {
          line: 630,
          column: 28
        },
        end: {
          line: 638,
          column: 37
        }
      },
      "203": {
        start: {
          line: 630,
          column: 77
        },
        end: {
          line: 638,
          column: 34
        }
      },
      "204": {
        start: {
          line: 641,
          column: 20
        },
        end: {
          line: 649,
          column: 23
        }
      },
      "205": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 654,
          column: 71
        }
      },
      "206": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 672,
          column: 13
        }
      },
      "207": {
        start: {
          line: 656,
          column: 16
        },
        end: {
          line: 671,
          column: 17
        }
      },
      "208": {
        start: {
          line: 657,
          column: 20
        },
        end: {
          line: 657,
          column: 44
        }
      },
      "209": {
        start: {
          line: 658,
          column: 20
        },
        end: {
          line: 668,
          column: 21
        }
      },
      "210": {
        start: {
          line: 659,
          column: 24
        },
        end: {
          line: 667,
          column: 27
        }
      },
      "211": {
        start: {
          line: 660,
          column: 28
        },
        end: {
          line: 664,
          column: 29
        }
      },
      "212": {
        start: {
          line: 661,
          column: 32
        },
        end: {
          line: 661,
          column: 82
        }
      },
      "213": {
        start: {
          line: 663,
          column: 32
        },
        end: {
          line: 663,
          column: 97
        }
      },
      "214": {
        start: {
          line: 666,
          column: 28
        },
        end: {
          line: 666,
          column: 84
        }
      },
      "215": {
        start: {
          line: 670,
          column: 20
        },
        end: {
          line: 670,
          column: 71
        }
      },
      "216": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 677,
          column: 15
        }
      },
      "217": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 684,
          column: 15
        }
      },
      "218": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 60
        }
      },
      "219": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 693,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 61
          },
          end: {
            line: 28,
            column: 62
          }
        },
        loc: {
          start: {
            line: 28,
            column: 87
          },
          end: {
            line: 286,
            column: 1
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 58
          },
          end: {
            line: 29,
            column: 59
          }
        },
        loc: {
          start: {
            line: 29,
            column: 68
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 148,
            column: 70
          },
          end: {
            line: 148,
            column: 71
          }
        },
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 197,
            column: 22
          }
        },
        line: 149
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 199,
            column: 71
          },
          end: {
            line: 199,
            column: 72
          }
        },
        loc: {
          start: {
            line: 199,
            column: 75
          },
          end: {
            line: 201,
            column: 22
          }
        },
        line: 199
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 203,
            column: 71
          },
          end: {
            line: 203,
            column: 72
          }
        },
        loc: {
          start: {
            line: 203,
            column: 75
          },
          end: {
            line: 237,
            column: 22
          }
        },
        line: 203
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 241,
            column: 51
          },
          end: {
            line: 241,
            column: 52
          }
        },
        loc: {
          start: {
            line: 241,
            column: 62
          },
          end: {
            line: 251,
            column: 13
          }
        },
        line: 241
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 287,
            column: 62
          },
          end: {
            line: 287,
            column: 63
          }
        },
        loc: {
          start: {
            line: 287,
            column: 88
          },
          end: {
            line: 698,
            column: 1
          }
        },
        line: 287
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 288,
            column: 64
          },
          end: {
            line: 288,
            column: 65
          }
        },
        loc: {
          start: {
            line: 288,
            column: 74
          },
          end: {
            line: 695,
            column: 5
          }
        },
        line: 288
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 403,
            column: 68
          },
          end: {
            line: 403,
            column: 69
          }
        },
        loc: {
          start: {
            line: 403,
            column: 81
          },
          end: {
            line: 407,
            column: 21
          }
        },
        line: 403
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 459,
            column: 88
          },
          end: {
            line: 459,
            column: 89
          }
        },
        loc: {
          start: {
            line: 459,
            column: 92
          },
          end: {
            line: 652,
            column: 18
          }
        },
        line: 459
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 459,
            column: 112
          },
          end: {
            line: 459,
            column: 113
          }
        },
        loc: {
          start: {
            line: 459,
            column: 124
          },
          end: {
            line: 650,
            column: 17
          }
        },
        line: 459
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 480,
            column: 68
          },
          end: {
            line: 480,
            column: 69
          }
        },
        loc: {
          start: {
            line: 480,
            column: 76
          },
          end: {
            line: 480,
            column: 104
          }
        },
        line: 480
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 494,
            column: 74
          },
          end: {
            line: 494,
            column: 75
          }
        },
        loc: {
          start: {
            line: 494,
            column: 82
          },
          end: {
            line: 497,
            column: 29
          }
        },
        line: 494
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 499,
            column: 68
          },
          end: {
            line: 499,
            column: 69
          }
        },
        loc: {
          start: {
            line: 499,
            column: 74
          },
          end: {
            line: 499,
            column: 97
          }
        },
        line: 499
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 512,
            column: 53
          },
          end: {
            line: 512,
            column: 54
          }
        },
        loc: {
          start: {
            line: 512,
            column: 58
          },
          end: {
            line: 514,
            column: 29
          }
        },
        line: 512
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 518,
            column: 74
          },
          end: {
            line: 518,
            column: 75
          }
        },
        loc: {
          start: {
            line: 518,
            column: 82
          },
          end: {
            line: 534,
            column: 25
          }
        },
        line: 518
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 540,
            column: 72
          },
          end: {
            line: 540,
            column: 73
          }
        },
        loc: {
          start: {
            line: 540,
            column: 85
          },
          end: {
            line: 547,
            column: 25
          }
        },
        line: 540
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 564,
            column: 68
          },
          end: {
            line: 564,
            column: 69
          }
        },
        loc: {
          start: {
            line: 564,
            column: 76
          },
          end: {
            line: 564,
            column: 104
          }
        },
        line: 564
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 584,
            column: 50
          },
          end: {
            line: 584,
            column: 51
          }
        },
        loc: {
          start: {
            line: 584,
            column: 58
          },
          end: {
            line: 589,
            column: 25
          }
        },
        line: 584
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 597,
            column: 73
          },
          end: {
            line: 597,
            column: 74
          }
        },
        loc: {
          start: {
            line: 597,
            column: 85
          },
          end: {
            line: 597,
            column: 103
          }
        },
        line: 597
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 630,
            column: 67
          },
          end: {
            line: 630,
            column: 68
          }
        },
        loc: {
          start: {
            line: 630,
            column: 77
          },
          end: {
            line: 638,
            column: 34
          }
        },
        line: 630
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 659,
            column: 76
          },
          end: {
            line: 659,
            column: 77
          }
        },
        loc: {
          start: {
            line: 659,
            column: 86
          },
          end: {
            line: 665,
            column: 25
          }
        },
        line: 659
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 665,
            column: 33
          },
          end: {
            line: 665,
            column: 34
          }
        },
        loc: {
          start: {
            line: 665,
            column: 42
          },
          end: {
            line: 667,
            column: 25
          }
        },
        line: 665
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 34
          },
          end: {
            line: 76,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 34
          },
          end: {
            line: 76,
            column: 58
          }
        }, {
          start: {
            line: 76,
            column: 62
          },
          end: {
            line: 76,
            column: 65
          }
        }],
        line: 76
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 44
          },
          end: {
            line: 77,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 44
          },
          end: {
            line: 77,
            column: 69
          }
        }, {
          start: {
            line: 77,
            column: 73
          },
          end: {
            line: 77,
            column: 98
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 27
          },
          end: {
            line: 78,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 27
          },
          end: {
            line: 78,
            column: 53
          }
        }, {
          start: {
            line: 78,
            column: 57
          },
          end: {
            line: 78,
            column: 59
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 67
          }
        }, {
          start: {
            line: 79,
            column: 71
          },
          end: {
            line: 79,
            column: 73
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 80,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 80,
            column: 58
          }
        }, {
          start: {
            line: 80,
            column: 62
          },
          end: {
            line: 80,
            column: 64
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 24
          },
          end: {
            line: 91,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 34
          },
          end: {
            line: 91,
            column: 41
          }
        }, {
          start: {
            line: 91,
            column: 44
          },
          end: {
            line: 91,
            column: 51
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 110,
            column: 13
          }
        }],
        line: 105
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "14": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 22
          }
        }, {
          start: {
            line: 117,
            column: 26
          },
          end: {
            line: 117,
            column: 42
          }
        }],
        line: 117
      },
      "15": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "16": {
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "17": {
        loc: {
          start: {
            line: 247,
            column: 34
          },
          end: {
            line: 247,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 34
          },
          end: {
            line: 247,
            column: 48
          }
        }, {
          start: {
            line: 247,
            column: 52
          },
          end: {
            line: 247,
            column: 70
          }
        }],
        line: 247
      },
      "18": {
        loc: {
          start: {
            line: 258,
            column: 38
          },
          end: {
            line: 258,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 38
          },
          end: {
            line: 258,
            column: 65
          }
        }, {
          start: {
            line: 258,
            column: 69
          },
          end: {
            line: 258,
            column: 70
          }
        }],
        line: 258
      },
      "19": {
        loc: {
          start: {
            line: 259,
            column: 35
          },
          end: {
            line: 259,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 35
          },
          end: {
            line: 259,
            column: 59
          }
        }, {
          start: {
            line: 259,
            column: 63
          },
          end: {
            line: 259,
            column: 64
          }
        }],
        line: 259
      },
      "20": {
        loc: {
          start: {
            line: 278,
            column: 23
          },
          end: {
            line: 278,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 48
          },
          end: {
            line: 278,
            column: 61
          }
        }, {
          start: {
            line: 278,
            column: 64
          },
          end: {
            line: 278,
            column: 77
          }
        }],
        line: 278
      },
      "21": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "22": {
        loc: {
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 293,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 293,
            column: 42
          }
        }, {
          start: {
            line: 293,
            column: 46
          },
          end: {
            line: 293,
            column: 76
          }
        }],
        line: 293
      },
      "23": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "24": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "25": {
        loc: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 311,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 311,
            column: 42
          }
        }, {
          start: {
            line: 311,
            column: 46
          },
          end: {
            line: 311,
            column: 75
          }
        }],
        line: 311
      },
      "26": {
        loc: {
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "27": {
        loc: {
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 334,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 334,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "28": {
        loc: {
          start: {
            line: 323,
            column: 20
          },
          end: {
            line: 323,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 20
          },
          end: {
            line: 323,
            column: 47
          }
        }, {
          start: {
            line: 323,
            column: 51
          },
          end: {
            line: 323,
            column: 75
          }
        }],
        line: 323
      },
      "29": {
        loc: {
          start: {
            line: 325,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "30": {
        loc: {
          start: {
            line: 333,
            column: 88
          },
          end: {
            line: 333,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 88
          },
          end: {
            line: 333,
            column: 110
          }
        }, {
          start: {
            line: 333,
            column: 114
          },
          end: {
            line: 333,
            column: 149
          }
        }],
        line: 333
      },
      "31": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "32": {
        loc: {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 341,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 341,
            column: 37
          }
        }, {
          start: {
            line: 341,
            column: 41
          },
          end: {
            line: 341,
            column: 77
          }
        }, {
          start: {
            line: 341,
            column: 81
          },
          end: {
            line: 341,
            column: 114
          }
        }],
        line: 341
      },
      "33": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 383,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 383,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "34": {
        loc: {
          start: {
            line: 361,
            column: 20
          },
          end: {
            line: 361,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 20
          },
          end: {
            line: 361,
            column: 35
          }
        }, {
          start: {
            line: 361,
            column: 39
          },
          end: {
            line: 361,
            column: 53
          }
        }, {
          start: {
            line: 361,
            column: 57
          },
          end: {
            line: 361,
            column: 75
          }
        }],
        line: 361
      },
      "35": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "36": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "37": {
        loc: {
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 440,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 440,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "38": {
        loc: {
          start: {
            line: 401,
            column: 20
          },
          end: {
            line: 401,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 20
          },
          end: {
            line: 401,
            column: 28
          }
        }, {
          start: {
            line: 401,
            column: 32
          },
          end: {
            line: 401,
            column: 69
          }
        }, {
          start: {
            line: 401,
            column: 73
          },
          end: {
            line: 401,
            column: 93
          }
        }],
        line: 401
      },
      "39": {
        loc: {
          start: {
            line: 404,
            column: 38
          },
          end: {
            line: 404,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 38
          },
          end: {
            line: 404,
            column: 66
          }
        }, {
          start: {
            line: 404,
            column: 70
          },
          end: {
            line: 404,
            column: 92
          }
        }, {
          start: {
            line: 404,
            column: 96
          },
          end: {
            line: 404,
            column: 97
          }
        }],
        line: 404
      },
      "40": {
        loc: {
          start: {
            line: 405,
            column: 41
          },
          end: {
            line: 405,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 41
          },
          end: {
            line: 405,
            column: 68
          }
        }, {
          start: {
            line: 405,
            column: 72
          },
          end: {
            line: 405,
            column: 73
          }
        }],
        line: 405
      },
      "41": {
        loc: {
          start: {
            line: 423,
            column: 43
          },
          end: {
            line: 423,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 43
          },
          end: {
            line: 423,
            column: 73
          }
        }, {
          start: {
            line: 423,
            column: 77
          },
          end: {
            line: 423,
            column: 78
          }
        }],
        line: 423
      },
      "42": {
        loc: {
          start: {
            line: 425,
            column: 20
          },
          end: {
            line: 439,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 20
          },
          end: {
            line: 439,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "43": {
        loc: {
          start: {
            line: 443,
            column: 39
          },
          end: {
            line: 443,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 39
          },
          end: {
            line: 443,
            column: 52
          }
        }, {
          start: {
            line: 443,
            column: 56
          },
          end: {
            line: 443,
            column: 111
          }
        }],
        line: 443
      },
      "44": {
        loc: {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        }, {
          start: {
            line: 455,
            column: 19
          },
          end: {
            line: 457,
            column: 13
          }
        }],
        line: 446
      },
      "45": {
        loc: {
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 453,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 453,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "46": {
        loc: {
          start: {
            line: 463,
            column: 40
          },
          end: {
            line: 463,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 463,
            column: 40
          },
          end: {
            line: 463,
            column: 65
          }
        }, {
          start: {
            line: 463,
            column: 69
          },
          end: {
            line: 463,
            column: 73
          }
        }],
        line: 463
      },
      "47": {
        loc: {
          start: {
            line: 466,
            column: 43
          },
          end: {
            line: 466,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 43
          },
          end: {
            line: 466,
            column: 71
          }
        }, {
          start: {
            line: 466,
            column: 75
          },
          end: {
            line: 466,
            column: 81
          }
        }],
        line: 466
      },
      "48": {
        loc: {
          start: {
            line: 467,
            column: 41
          },
          end: {
            line: 467,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 467,
            column: 70
          },
          end: {
            line: 467,
            column: 106
          }
        }, {
          start: {
            line: 467,
            column: 109
          },
          end: {
            line: 467,
            column: 119
          }
        }],
        line: 467
      },
      "49": {
        loc: {
          start: {
            line: 468,
            column: 37
          },
          end: {
            line: 468,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 468,
            column: 62
          },
          end: {
            line: 468,
            column: 94
          }
        }, {
          start: {
            line: 468,
            column: 97
          },
          end: {
            line: 468,
            column: 101
          }
        }],
        line: 468
      },
      "50": {
        loc: {
          start: {
            line: 469,
            column: 35
          },
          end: {
            line: 469,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 35
          },
          end: {
            line: 469,
            column: 55
          }
        }, {
          start: {
            line: 469,
            column: 59
          },
          end: {
            line: 469,
            column: 61
          }
        }],
        line: 469
      },
      "51": {
        loc: {
          start: {
            line: 470,
            column: 36
          },
          end: {
            line: 470,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 36
          },
          end: {
            line: 470,
            column: 57
          }
        }, {
          start: {
            line: 470,
            column: 61
          },
          end: {
            line: 470,
            column: 65
          }
        }],
        line: 470
      },
      "52": {
        loc: {
          start: {
            line: 478,
            column: 20
          },
          end: {
            line: 560,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 20
          },
          end: {
            line: 560,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "53": {
        loc: {
          start: {
            line: 478,
            column: 24
          },
          end: {
            line: 478,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 24
          },
          end: {
            line: 478,
            column: 44
          }
        }, {
          start: {
            line: 478,
            column: 48
          },
          end: {
            line: 478,
            column: 83
          }
        }],
        line: 478
      },
      "54": {
        loc: {
          start: {
            line: 496,
            column: 32
          },
          end: {
            line: 496,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 496,
            column: 32
          },
          end: {
            line: 496,
            column: 53
          }
        }, {
          start: {
            line: 496,
            column: 57
          },
          end: {
            line: 496,
            column: 58
          }
        }],
        line: 496
      },
      "55": {
        loc: {
          start: {
            line: 500,
            column: 24
          },
          end: {
            line: 515,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 24
          },
          end: {
            line: 515,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "56": {
        loc: {
          start: {
            line: 513,
            column: 57
          },
          end: {
            line: 513,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 57
          },
          end: {
            line: 513,
            column: 78
          }
        }, {
          start: {
            line: 513,
            column: 82
          },
          end: {
            line: 513,
            column: 83
          }
        }],
        line: 513
      },
      "57": {
        loc: {
          start: {
            line: 520,
            column: 46
          },
          end: {
            line: 520,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 46
          },
          end: {
            line: 520,
            column: 75
          }
        }, {
          start: {
            line: 520,
            column: 79
          },
          end: {
            line: 520,
            column: 80
          }
        }],
        line: 520
      },
      "58": {
        loc: {
          start: {
            line: 542,
            column: 46
          },
          end: {
            line: 542,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 46
          },
          end: {
            line: 542,
            column: 75
          }
        }, {
          start: {
            line: 542,
            column: 79
          },
          end: {
            line: 542,
            column: 80
          }
        }],
        line: 542
      },
      "59": {
        loc: {
          start: {
            line: 548,
            column: 45
          },
          end: {
            line: 548,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 548,
            column: 80
          },
          end: {
            line: 548,
            column: 128
          }
        }, {
          start: {
            line: 548,
            column: 131
          },
          end: {
            line: 548,
            column: 132
          }
        }],
        line: 548
      },
      "60": {
        loc: {
          start: {
            line: 562,
            column: 20
          },
          end: {
            line: 640,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 20
          },
          end: {
            line: 640,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "61": {
        loc: {
          start: {
            line: 562,
            column: 24
          },
          end: {
            line: 562,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 24
          },
          end: {
            line: 562,
            column: 45
          }
        }, {
          start: {
            line: 562,
            column: 49
          },
          end: {
            line: 562,
            column: 69
          }
        }, {
          start: {
            line: 562,
            column: 73
          },
          end: {
            line: 562,
            column: 108
          }
        }],
        line: 562
      },
      "62": {
        loc: {
          start: {
            line: 585,
            column: 28
          },
          end: {
            line: 587,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 585,
            column: 28
          },
          end: {
            line: 587,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 585
      },
      "63": {
        loc: {
          start: {
            line: 593,
            column: 51
          },
          end: {
            line: 593,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 593,
            column: 51
          },
          end: {
            line: 593,
            column: 84
          }
        }, {
          start: {
            line: 593,
            column: 88
          },
          end: {
            line: 593,
            column: 90
          }
        }],
        line: 593
      },
      "64": {
        loc: {
          start: {
            line: 594,
            column: 28
          },
          end: {
            line: 596,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 594,
            column: 28
          },
          end: {
            line: 596,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 594
      },
      "65": {
        loc: {
          start: {
            line: 598,
            column: 28
          },
          end: {
            line: 600,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 598,
            column: 28
          },
          end: {
            line: 600,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 598
      },
      "66": {
        loc: {
          start: {
            line: 606,
            column: 51
          },
          end: {
            line: 606,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 606,
            column: 51
          },
          end: {
            line: 606,
            column: 84
          }
        }, {
          start: {
            line: 606,
            column: 88
          },
          end: {
            line: 606,
            column: 90
          }
        }],
        line: 606
      },
      "67": {
        loc: {
          start: {
            line: 609,
            column: 32
          },
          end: {
            line: 609,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 32
          },
          end: {
            line: 609,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 609
      },
      "68": {
        loc: {
          start: {
            line: 610,
            column: 32
          },
          end: {
            line: 625,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 610,
            column: 32
          },
          end: {
            line: 625,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 610
      },
      "69": {
        loc: {
          start: {
            line: 629,
            column: 24
          },
          end: {
            line: 639,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 629,
            column: 24
          },
          end: {
            line: 639,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 629
      },
      "70": {
        loc: {
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 672,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 672,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 655
      },
      "71": {
        loc: {
          start: {
            line: 658,
            column: 20
          },
          end: {
            line: 668,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 658,
            column: 20
          },
          end: {
            line: 668,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 658
      },
      "72": {
        loc: {
          start: {
            line: 660,
            column: 28
          },
          end: {
            line: 664,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 28
          },
          end: {
            line: 664,
            column: 29
          }
        }, {
          start: {
            line: 662,
            column: 35
          },
          end: {
            line: 664,
            column: 29
          }
        }],
        line: 660
      },
      "73": {
        loc: {
          start: {
            line: 660,
            column: 32
          },
          end: {
            line: 660,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 660,
            column: 32
          },
          end: {
            line: 660,
            column: 52
          }
        }, {
          start: {
            line: 660,
            column: 56
          },
          end: {
            line: 660,
            column: 75
          }
        }],
        line: 660
      },
      "74": {
        loc: {
          start: {
            line: 690,
            column: 23
          },
          end: {
            line: 690,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 690,
            column: 48
          },
          end: {
            line: 690,
            column: 61
          }
        }, {
          start: {
            line: 690,
            column: 64
          },
          end: {
            line: 690,
            column: 77
          }
        }],
        line: 690
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0, 0],
      "39": [0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { revalidateTag } from 'next/cache';\n\n\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { measureAsync } from '@/lib/performance';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n\nconst prisma = new PrismaClient();\nconst CACHE_DURATION = 60; // 60 seconds\n\nconst ITEMS_PER_PAGE = 15;\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('invoices-api', async () => {\n        try {\n            // Validate token and permissions\n            const authResult = await validateTokenPermission(request, 'sales:view');\n            if (!authResult.isValid) {\n                return NextResponse.json({ error: authResult.message }, { status: 401 });\n            }\n\n            // Get user ID from token for filtering\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            // Get user details to check role\n            const user = await prisma.user.findUnique({\n                where: { id: userId },\n                select: {\n                    id: true,\n                    roleName: true,\n                    permissions: true\n                }\n            });\n\n            if (!user) {\n                return NextResponse.json({ error: 'User not found' }, { status: 401 });\n            }\n\n            console.log('Invoices API - Shop context:', {\n                shopId: context.shopId,\n                isFiltered: context.isFiltered,\n                isAdmin: context.isAdmin,\n                userShopId: context.userShopId,\n                userId: user.id,\n                userRole: user.roleName\n            });\n\n            const searchParams = request.nextUrl.searchParams;\n            const page = parseInt(searchParams.get('page') || '1', 10);\n            const limit = Math.min(parseInt(searchParams.get('limit') || ITEMS_PER_PAGE.toString(), 10), 50); // Cap at 50\n            const status = searchParams.get('status') || '';\n            const paymentMethod = searchParams.get('paymentMethod') || '';\n            const searchQuery = searchParams.get('search') || '';\n            const shopId = searchParams.get('shopId');\n\n            // Use the admin status from the shop access control middleware for consistency\n            const isAdmin = context.isAdmin;\n            \n            const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.INVOICES, {\n                page,\n                limit,\n                status,\n                paymentMethod,\n                search: searchQuery,\n                shopId,\n                userId: isAdmin ? 'admin' : user.id // Admin sees all, others see user-specific\n            });\n\n            // Try to get from cache first\n            const cachedData = await cacheService.get(cacheKey);\n            if (cachedData) {\n                const response = NextResponse.json(cachedData);\n                response.headers.set('X-Cache', 'HIT');\n                response.headers.set('Cache-Control', `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);\n                return response;\n            }\n\n            // Build optimized where clause with shop filtering\n            let whereClause = ShopAccessControl.buildShopFilter(context);\n\n            // Add user-based filtering for non-admin users\n            // Only show invoices created by the current user unless they're an admin\n            if (!isAdmin) {\n                whereClause.createdBy = user.id;\n                console.log(`Non-admin user ${user.id} (${user.roleName}) - filtering invoices by createdBy`);\n            } else {\n                console.log(`Admin user ${user.id} (${user.roleName}) - showing all invoices`);\n            }\n\n            if (status) {\n                whereClause.status = status;\n            }\n            if (paymentMethod) {\n                whereClause.paymentMethod = paymentMethod;\n            }\n            if (shopId && shopId !== 'all') {\n                whereClause.shopId = shopId;\n            }\n\n            console.log('Invoices where clause:', JSON.stringify(whereClause, null, 2));\n            if (searchQuery) {\n                whereClause.OR = [\n                    { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                    { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n                ];\n\n                // Handle numeric search for total amount\n                const numericQuery = parseFloat(searchQuery);\n                if (!isNaN(numericQuery)) {\n                    whereClause.OR.push({ total: numericQuery });\n                }\n            }\n\n            // Execute queries in parallel for better performance\n            const [invoices, totalInvoices, statistics] = await Promise.all([\n                measureAsync('invoices-main-query', () =>\n                    // Main invoices query with optimized select\n                    prisma.invoice.findMany({\n                        where: whereClause,\n                        select: {\n                            id: true,\n                            invoiceNumber: true,\n                            total: true,\n                            status: true,\n                            paymentMethod: true,\n                            invoiceDate: true,\n                            dueDate: true,\n                            notes: true,\n                            createdAt: true,\n                            updatedAt: true,\n                            customer: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    email: true,\n                                    phone: true\n                                }\n                            },\n                            shop: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    location: true,\n                                    contact_person: true,\n                                    phone: true,\n                                    email: true,\n                                    address_line1: true,\n                                    address_line2: true,\n                                    city: true,\n                                    state: true,\n                                    postal_code: true,\n                                    country: true\n                                }\n                            },\n                            _count: {\n                                select: { items: true }\n                            }\n                        },\n                        orderBy: {\n                            createdAt: 'desc',\n                        },\n                        skip: (page - 1) * limit,\n                        take: limit,\n                    })\n                ),\n\n                // Total count query\n                measureAsync('invoices-count-query', () =>\n                    prisma.invoice.count({ where: whereClause })\n                ),\n\n                // Statistics queries in parallel\n                measureAsync('invoices-stats-query', () =>\n                    Promise.all([\n                        // Total outstanding (pending invoices)\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'pending'\n                            }\n                        }),\n\n                        // Paid this month\n                        prisma.invoice.aggregate({\n                            _sum: { total: true },\n                            where: {\n                                ...whereClause,\n                                status: 'paid',\n                                createdAt: {\n                                    gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n                                }\n                            }\n                        }),\n\n                        // Overdue count\n                        prisma.invoice.count({\n                            where: {\n                                ...whereClause,\n                                status: 'pending',\n                                dueDate: {\n                                    lt: new Date()\n                                }\n                            }\n                        })\n                    ])\n                )\n            ]);\n\n            const [totalOutstanding, paidThisMonth, overdueCount] = statistics;\n\n            // Format response with optimized data structure\n            const formattedInvoices = invoices.map(invoice => {\n                const { _count, customer, shop, ...rest } = invoice;\n                return {\n                    ...rest,\n                    customer,\n                    shop,\n                    customerName: customer?.name || 'Unknown Customer',\n                    customerId: customer?.id,\n                    itemCount: _count.items,\n                };\n            });\n\n            const responseData = {\n                invoices: formattedInvoices,\n                totalPages: Math.ceil(totalInvoices / limit),\n                currentPage: page,\n                total: totalInvoices,\n                statistics: {\n                    totalOutstanding: totalOutstanding._sum.total || 0,\n                    paidThisMonth: paidThisMonth._sum.total || 0,\n                    overdueCount\n                },\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            };\n\n            // Cache the response\n            await cacheService.set(cacheKey, responseData, CACHE_CONFIG.TTL.INVOICES);\n\n            const response = NextResponse.json(responseData);\n            response.headers.set('X-Cache', 'MISS');\n            response.headers.set('Cache-Control', 'public, s-maxage=60, stale-while-revalidate=120');\n\n            return response;\n\n        } catch (error) {\n            console.error('Error fetching invoices:', error);\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Error fetching invoices',\n                    error: error instanceof Error ? error.message : String(error),\n                },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'invoices' });\n});\n\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    return measureAsync('create-invoice-api', async () => {\n        try {\n            // Validate token and permissions\n            const salesManageResult = await validateTokenPermission(request, 'sales:manage');\n            const salesCreateShopResult = await validateTokenPermission(request, 'sales:create:shop');\n            \n            if (!salesManageResult.isValid && !salesCreateShopResult.isValid) {\n                return NextResponse.json({ \n                    error: 'Permission denied: sales:manage or sales:create:shop required' \n                }, { status: 403 });\n            }\n\n            // Get user ID from token\n            const userId = await getUserIdFromToken(request);\n            if (!userId) {\n                return NextResponse.json({ \n                    error: 'Unable to get user information from token' \n                }, { status: 401 });\n            }\n\n            const invoiceData = await request.json();\n            \n            // If user only has sales:create:shop permission, validate shop restriction\n            if (!salesManageResult.isValid && salesCreateShopResult.isValid) {\n                // User can only create sales for their assigned shop\n                if (!invoiceData.shopId) {\n                    return NextResponse.json({\n                        success: false,\n                        message: 'Shop ID is required for sales creation'\n                    }, { status: 400 });\n                }\n\n                // Validate that the user can only create invoices for their shop\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceData.shopId);\n                if (!shopAccessResult.hasAccess || shopAccessResult.isAdmin) {\n                    // If user is admin, they should have sales:manage, not sales:create:shop\n                    if (shopAccessResult.isAdmin) {\n                        return NextResponse.json({\n                            success: false,\n                            message: 'Admin users should use sales:manage permission'\n                        }, { status: 403 });\n                    }\n                    return ShopAccessControl.createAccessDeniedResponse(\n                        shopAccessResult.error || 'Cannot create sales for this shop'\n                    );\n                }\n            }\n            console.log('Invoice data received:', JSON.stringify(invoiceData, null, 2));\n            const { sendSms, invoiceNumber, ...invoiceDetails } = invoiceData;\n            console.log('Invoice details after destructuring:', JSON.stringify(invoiceDetails, null, 2));\n            console.log('Invoice number from request:', invoiceNumber);\n            \n            // Server-side validation to prevent empty invoices\n            if (!invoiceDetails.items || !Array.isArray(invoiceDetails.items) || invoiceDetails.items.length === 0) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'Invoice must contain at least one item',\n                        error: 'No items provided'\n                    },\n                    { status: 400 }\n                );\n            }\n\n            // Validate that all items have required fields\n            for (let i = 0; i < invoiceDetails.items.length; i++) {\n                const item = invoiceDetails.items[i];\n                console.log(`Validating item ${i}:`, {\n                    productId: item.productId,\n                    productIdType: typeof item.productId,\n                    quantity: item.quantity,\n                    quantityType: typeof item.quantity,\n                    price: item.price,\n                    priceType: typeof item.price\n                });\n                \n                if (!item.productId || !item.quantity || item.quantity <= 0) {\n                    console.log(`Item validation failed for item ${i}:`, {\n                        hasProductId: !!item.productId,\n                        hasQuantity: !!item.quantity,\n                        quantityValue: item.quantity,\n                        quantityCheck: item.quantity <= 0\n                    });\n                    return NextResponse.json(\n                        {\n                            success: false,\n                            message: `Item ${i + 1}: All items must have valid productId and quantity greater than 0`,\n                            error: 'Invalid item data',\n                            itemDetails: {\n                                index: i,\n                                productId: item.productId,\n                                quantity: item.quantity,\n                                hasProductId: !!item.productId,\n                                hasQuantity: !!item.quantity,\n                                quantityPositive: item.quantity > 0\n                            }\n                        },\n                        { status: 400 }\n                    );\n                }\n            }\n\n            // Validate customer is provided (optional but recommended)\n            if (!invoiceDetails.customerId) {\n                console.warn('Invoice created without customer ID');\n            }\n\n            // Credit limit validation for wholesale customers\n            if (invoiceDetails.customerId) {\n                const customer = await prisma.customer.findUnique({\n                    where: { id: invoiceDetails.customerId },\n                    select: { \n                        customerType: true, \n                        creditLimit: true,\n                        name: true\n                    }\n                });\n\n                if (customer && customer.customerType === 'wholesale' && customer.creditLimit) {\n                    // Calculate total invoice amount\n                    const totalAmount = invoiceDetails.items.reduce((sum: number, item: any) => {\n                        const price = parseFloat(item.customPrice) || parseFloat(item.price) || 0;\n                        const quantity = parseInt(item.quantity, 10) || 0;\n                        return sum + (price * quantity);\n                    }, 0);\n\n                    // Get customer's current outstanding balance\n                    const outstandingInvoices = await prisma.invoice.aggregate({\n                        where: {\n                            customerId: invoiceDetails.customerId,\n                            status: { in: ['pending', 'overdue'] }\n                        },\n                        _sum: { total: true }\n                    });\n\n                    const currentBalance = outstandingInvoices._sum.total || 0;\n                    const newTotalBalance = currentBalance + totalAmount;\n\n                    if (newTotalBalance > customer.creditLimit) {\n                        return NextResponse.json(\n                            {\n                                success: false,\n                                message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,\n                                error: 'Credit limit exceeded',\n                                details: {\n                                    currentBalance,\n                                    invoiceAmount: totalAmount,\n                                    creditLimit: customer.creditLimit,\n                                    exceedAmount: newTotalBalance - customer.creditLimit\n                                }\n                            },\n                            { status: 400 }\n                        );\n                    }\n                }\n            }\n            \n            // Generate invoice number if missing\n            const finalInvoiceNumber = invoiceNumber || `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n            console.log('Final invoice number to use:', finalInvoiceNumber);\n\n            // Validate shop access for the target shop (only if shopId is provided)\n            if (invoiceDetails.shopId) {\n                console.log('Validating shop access for shopId:', invoiceDetails.shopId);\n                const shopAccessResult = await ShopAccessControl.validateShopAccess(request, invoiceDetails.shopId);\n                console.log('Shop access result:', shopAccessResult);\n                if (!shopAccessResult.hasAccess) {\n                    console.log('Shop access denied:', shopAccessResult.error);\n                    return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n                }\n                console.log('Shop access granted');\n            } else {\n                console.log('No shopId provided, skipping shop access validation');\n            }\n\n            const inventoryUpdatesForEvent: Array<{ productId: number, shopId: number, newQuantity: number, oldQuantity: number }> = [];\n\n            const invoice = await measureAsync('invoice-transaction', () =>\n                prisma.$transaction(\n                    async (tx) => {\n                        const createdInvoice = await tx.invoice.create({\n                            data: {\n                                invoiceNumber: finalInvoiceNumber,\n                                customerId: invoiceDetails.customerId || null,\n                                total: 0, // Will be updated after items are processed\n                                status: 'pending',\n                                paymentMethod: invoiceDetails.paymentMethod || 'Cash',\n                                invoiceDate: invoiceDetails.invoiceDate ? new Date(invoiceDetails.invoiceDate) : new Date(),\n                                dueDate: invoiceDetails.dueDate ? new Date(invoiceDetails.dueDate) : null,\n                                notes: invoiceDetails.notes || '',\n                                shopId: invoiceDetails.shopId || null,\n                                createdBy: userId,\n                                totalProfit: 0, // Will be updated after items are processed\n                                profitMargin: 0 // Will be updated after items are processed\n                            },\n                        });\n\n                        // Removed automatic payment creation for cash invoices\n                        // Users will manually record payments when they actually receive them\n\n                        if (invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Get shop-specific costs for profit calculation instead of global weighted average\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const inventoryItems = await tx.inventoryItem.findMany({\n                                where: { \n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                select: { productId: true, shopSpecificCost: true }\n                            });\n\n                            // Create a map of productId to shop-specific cost\n                            const productCostMap = new Map(inventoryItems.map(item => [item.productId, item.shopSpecificCost || 0]));\n                            \n                            // For products not found in inventory, fallback to global weighted average\n                            const missingProductIds = productIds.filter(id => !productCostMap.has(id));\n                            if (missingProductIds.length > 0) {\n                                const fallbackProducts = await tx.product.findMany({\n                                    where: { id: { in: missingProductIds } },\n                                    select: { id: true, weightedAverageCost: true }\n                                });\n                                fallbackProducts.forEach(p => {\n                                    productCostMap.set(p.id, p.weightedAverageCost || 0);\n                                });\n                            }\n\n                            let calculatedTotalInvoiceAmount = 0;\n                            \n                            // Batch create invoice items for better performance\n                            const invoiceItemsData = invoiceDetails.items.map((item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                \n                                calculatedTotalInvoiceAmount += itemSellingTotal;\n                                \n                                return {\n                                    invoiceId: createdInvoice.id,\n                                    productId: productId,\n                                    quantity: item.quantity,\n                                    price: item.price,\n                                    total: itemSellingTotal,\n                                    costPrice: costPrice,\n                                    profit: itemProfit\n                                };\n                            });\n                            \n                            // Batch insert all invoice items\n                            await tx.invoiceItem.createMany({\n                                data: invoiceItemsData\n                            });\n\n                            // Calculate and update total profit and profit margin\n                            const totalProfit = invoiceDetails.items.reduce((sum: number, item: any) => {\n                                const productId = parseInt(item.productId, 10);\n                                const costPrice = productCostMap.get(productId) || 0;\n                                const itemSellingTotal = item.quantity * item.price;\n                                const totalItemCost = costPrice * item.quantity;\n                                const itemProfit = itemSellingTotal - totalItemCost;\n                                return sum + itemProfit;\n                            }, 0);\n\n                            const profitMargin = calculatedTotalInvoiceAmount > 0 ? (totalProfit / calculatedTotalInvoiceAmount) * 100 : 0;\n\n                            // Update invoice with profit information\n                            await tx.invoice.update({\n                                where: { id: createdInvoice.id },\n                                data: {\n                                    total: calculatedTotalInvoiceAmount, // Use server-calculated total\n                                    totalProfit: totalProfit,\n                                    profitMargin: profitMargin\n                                }\n                            });\n                        }\n\n                        // Optimized inventory check and update for the selected shop\n                        if (invoiceDetails.shopId && invoiceDetails.items && Array.isArray(invoiceDetails.items)) {\n                            // Batch fetch all inventory items for all products in one query\n                            const productIds = invoiceDetails.items.map((item: any) => parseInt(item.productId, 10));\n                            const allInventoryItems = await tx.inventoryItem.findMany({\n                                where: {\n                                    productId: { in: productIds },\n                                    shopId: invoiceDetails.shopId\n                                },\n                                orderBy: { updatedAt: 'asc' },\n                                select: { id: true, productId: true, quantity: true, updatedAt: true }\n                            });\n                            \n                            // Group inventory items by product ID\n                            const inventoryByProduct = new Map<number, typeof allInventoryItems>();\n                            allInventoryItems.forEach(item => {\n                                if (!inventoryByProduct.has(item.productId)) {\n                                    inventoryByProduct.set(item.productId, []);\n                                }\n                                inventoryByProduct.get(item.productId)!.push(item);\n                            });\n                            \n                            // Validate inventory availability for all items first\n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                if (inventoryItems.length === 0) {\n                                    throw new Error(`No inventory for product ID ${productId} in the selected shop`);\n                                }\n                                const totalInventory = inventoryItems.reduce((sum, inv) => sum + inv.quantity, 0);\n                                if (totalInventory < item.quantity) {\n                                    throw new Error(`Insufficient inventory for product ID ${productId} in the selected shop. Available: ${totalInventory}, Required: ${item.quantity}`);\n                                }\n                            }\n                            \n                            // Process inventory updates using FIFO\n                            const inventoryUpdates: Array<{ id: number; quantity: number }> = [];\n                            \n                            for (const item of invoiceDetails.items) {\n                                const productId = parseInt(item.productId, 10);\n                                const inventoryItems = inventoryByProduct.get(productId) || [];\n                                let remainingQuantity = item.quantity;\n\n                                for (const inventoryItem of inventoryItems) {\n                                    if (remainingQuantity <= 0) break;\n                                    if (inventoryItem.quantity > 0) {\n                                        const deductAmount = Math.min(remainingQuantity, inventoryItem.quantity);\n                                        const oldShopQuantity = inventoryItem.quantity;\n                                        const newShopQuantity = inventoryItem.quantity - deductAmount;\n\n                                        inventoryUpdates.push({\n                                            id: inventoryItem.id,\n                                            quantity: newShopQuantity\n                                        });\n\n                                        inventoryUpdatesForEvent.push({\n                                            productId: productId,\n                                            shopId: inventoryItem.shopId,\n                                            newQuantity: newShopQuantity,\n                                            oldQuantity: oldShopQuantity\n                                        });\n                                        remainingQuantity -= deductAmount;\n                                    }\n                                }\n                            }\n\n                            // Batch update inventory items\n                            if (inventoryUpdates.length > 0) {\n                                await Promise.all(\n                                    inventoryUpdates.map(update =>\n                                        tx.inventoryItem.update({\n                                            where: { id: update.id },\n                                            data: { quantity: update.quantity, updatedAt: new Date() }\n                                        })\n                                    )\n                                );\n                            }\n                        }\n                        return tx.invoice.findUnique({\n                            where: { id: createdInvoice.id },\n                            include: { customer: true, items: true }\n                        });\n                    },\n                    { timeout: 30000 }\n                )\n            );\n\n            // Real-time updates now handled by polling system\n            console.log(`Invoice ${invoice?.id} created successfully`);\n\n            if (sendSms) {\n                try {\n                    await smsService.init();\n                    if (smsService.isConfigured()) {\n                        smsService.sendInvoiceNotification(invoice.id)\n                            .then(result => {\n                                if (result.status >= 200 && result.status < 300) {\n                                    console.log('SMS notification sent successfully');\n                                } else {\n                                    console.warn('Failed to send SMS notification:', result.message);\n                                }\n                            })\n                            .catch(error => {\n                                console.error('Error sending SMS notification:', error);\n                            });\n                    }\n                } catch (smsError) {\n                    console.error('SMS notification error:', smsError);\n                }\n            }\n\n            // Invalidate related caches\n            await Promise.all([\n                cacheService.invalidateInvoices(),\n                cacheService.invalidateInventory()\n            ]);\n\n            return NextResponse.json(\n                { success: true, message: 'Invoice created successfully', data: invoice },\n                { status: 201 }\n            );\n        } catch (error) {\n            console.error('Error creating invoice:', error);\n            return NextResponse.json(\n                { success: false, message: 'Error creating invoice', error: error instanceof Error ? error.message : String(error) },\n                { status: 500 }\n            );\n        }\n    }, { endpoint: 'create-invoice' });\n});"],
      names: ["GET", "POST", "prisma", "PrismaClient", "CACHE_DURATION", "ITEMS_PER_PAGE", "ShopAccessControl", "withShopAccess", "request", "context", "measureAsync", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "userId", "getUserIdFromToken", "user", "findUnique", "where", "id", "select", "roleName", "permissions", "console", "log", "shopId", "isFiltered", "isAdmin", "userShopId", "userRole", "searchParams", "nextUrl", "page", "parseInt", "get", "limit", "Math", "min", "toString", "paymentMethod", "searchQuery", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "INVOICES", "search", "cachedData", "response", "headers", "set", "whereClause", "buildShopFilter", "createdBy", "JSON", "stringify", "OR", "invoiceNumber", "contains", "mode", "customer", "name", "numericQuery", "parseFloat", "isNaN", "push", "total", "invoices", "totalInvoices", "statistics", "Promise", "all", "invoice", "findMany", "invoiceDate", "dueDate", "notes", "createdAt", "updatedAt", "email", "phone", "shop", "location", "contact_person", "address_line1", "address_line2", "city", "state", "postal_code", "country", "_count", "items", "orderBy", "skip", "take", "count", "aggregate", "_sum", "gte", "Date", "getFullYear", "getMonth", "lt", "totalOutstanding", "paidThisMonth", "overdueCount", "formattedInvoices", "map", "rest", "customerName", "customerId", "itemCount", "responseData", "totalPages", "ceil", "currentPage", "meta", "shopFiltered", "TTL", "success", "Error", "String", "endpoint", "salesManageResult", "salesCreateShopResult", "invoiceData", "shopAccessResult", "validateShopAccess", "hasAccess", "createAccessDeniedResponse", "sendSms", "invoiceDetails", "Array", "isArray", "length", "i", "item", "productId", "productIdType", "quantity", "quantityType", "price", "priceType", "hasProductId", "hasQuantity", "quantityValue", "quantityCheck", "itemDetails", "index", "quantityPositive", "warn", "customerType", "creditLimit", "totalAmount", "reduce", "sum", "customPrice", "outstandingInvoices", "in", "currentBalance", "newTotalBalance", "toLocaleString", "details", "invoiceAmount", "exceedAmount", "finalInvoiceNumber", "now", "floor", "random", "inventoryUpdatesForEvent", "$transaction", "tx", "createdInvoice", "create", "data", "totalProfit", "profitMargin", "productIds", "inventoryItems", "inventoryItem", "shopSpecificCost", "productCostMap", "Map", "missingProductIds", "filter", "has", "fallbackProducts", "product", "weightedAverageCost", "forEach", "p", "calculatedTotalInvoiceAmount", "invoiceItemsData", "costPrice", "itemSellingTotal", "totalItemCost", "itemProfit", "invoiceId", "profit", "invoiceItem", "createMany", "update", "allInventoryItems", "inventoryByProduct", "totalInventory", "inv", "inventoryUpdates", "remainingQuantity", "deductAmount", "oldShopQuantity", "newShopQuantity", "newQuantity", "oldQuantity", "include", "timeout", "smsService", "init", "isConfigured", "sendInvoiceNotification", "then", "result", "catch", "smsError", "invalidateInvoices", "invalidateInventory"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "769192d98bff7dee197de13d9d1186811bd152ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_99w0kl2h2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_99w0kl2h2();
cov_99w0kl2h2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[0]++;
  cov_99w0kl2h2().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_99w0kl2h2().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_99w0kl2h2().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[1]++;
    cov_99w0kl2h2().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[2]++;
    cov_99w0kl2h2().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_99w0kl2h2().s[6]++, require("next/server"));
const _client =
/* istanbul ignore next */
(cov_99w0kl2h2().s[7]++, require("@prisma/client"));
const _auth =
/* istanbul ignore next */
(cov_99w0kl2h2().s[8]++, require("../../../lib/auth"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_99w0kl2h2().s[9]++, require("../../../lib/utils/shopMiddleware"));
const _performance =
/* istanbul ignore next */
(cov_99w0kl2h2().s[10]++, require("../../../lib/performance"));
const _cache =
/* istanbul ignore next */
(cov_99w0kl2h2().s[11]++, require("../../../lib/cache"));
const prisma =
/* istanbul ignore next */
(cov_99w0kl2h2().s[12]++, new _client.PrismaClient());
const CACHE_DURATION =
/* istanbul ignore next */
(cov_99w0kl2h2().s[13]++, 60); // 60 seconds
const ITEMS_PER_PAGE =
/* istanbul ignore next */
(cov_99w0kl2h2().s[14]++, 15);
const GET =
/* istanbul ignore next */
(cov_99w0kl2h2().s[15]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[3]++;
  cov_99w0kl2h2().s[16]++;
  return (0, _performance.measureAsync)("invoices-api", async () => {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[4]++;
    cov_99w0kl2h2().s[17]++;
    try {
      // Validate token and permissions
      const authResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[18]++, await (0, _auth.validateTokenPermission)(request, "sales:view"));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[19]++;
      if (!authResult.isValid) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[0][0]++;
        cov_99w0kl2h2().s[20]++;
        return _server.NextResponse.json({
          error: authResult.message
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[0][1]++;
      }
      // Get user ID from token for filtering
      const userId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[21]++, await (0, _auth.getUserIdFromToken)(request));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[22]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[1][0]++;
        cov_99w0kl2h2().s[23]++;
        return _server.NextResponse.json({
          error: "User not found"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[1][1]++;
      }
      // Get user details to check role
      const user =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[24]++, await prisma.user.findUnique({
        where: {
          id: userId
        },
        select: {
          id: true,
          roleName: true,
          permissions: true
        }
      }));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[25]++;
      if (!user) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[2][0]++;
        cov_99w0kl2h2().s[26]++;
        return _server.NextResponse.json({
          error: "User not found"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[2][1]++;
      }
      cov_99w0kl2h2().s[27]++;
      console.log("Invoices API - Shop context:", {
        shopId: context.shopId,
        isFiltered: context.isFiltered,
        isAdmin: context.isAdmin,
        userShopId: context.userShopId,
        userId: user.id,
        userRole: user.roleName
      });
      const searchParams =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[28]++, request.nextUrl.searchParams);
      const page =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[29]++, parseInt(
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[3][1]++, "1"), 10));
      const limit =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[30]++, Math.min(parseInt(
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[4][0]++, searchParams.get("limit")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[4][1]++, ITEMS_PER_PAGE.toString()), 10), 50)); // Cap at 50
      const status =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[31]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[5][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[5][1]++, ""));
      const paymentMethod =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[32]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[6][0]++, searchParams.get("paymentMethod")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[6][1]++, ""));
      const searchQuery =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[33]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[7][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[7][1]++, ""));
      const shopId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[34]++, searchParams.get("shopId"));
      // Use the admin status from the shop access control middleware for consistency
      const isAdmin =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[35]++, context.isAdmin);
      const cacheKey =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[36]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.INVOICES, {
        page,
        limit,
        status,
        paymentMethod,
        search: searchQuery,
        shopId,
        userId: isAdmin ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[8][0]++, "admin") :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[8][1]++, user.id) // Admin sees all, others see user-specific
      }));
      // Try to get from cache first
      const cachedData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[37]++, await _cache.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[38]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[9][0]++;
        const response =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[39]++, _server.NextResponse.json(cachedData));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[40]++;
        response.headers.set("X-Cache", "HIT");
        /* istanbul ignore next */
        cov_99w0kl2h2().s[41]++;
        response.headers.set("Cache-Control", `public, s-maxage=${CACHE_DURATION}, stale-while-revalidate=60`);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[42]++;
        return response;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[9][1]++;
      }
      // Build optimized where clause with shop filtering
      let whereClause =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[43]++, _shopMiddleware.ShopAccessControl.buildShopFilter(context));
      // Add user-based filtering for non-admin users
      // Only show invoices created by the current user unless they're an admin
      /* istanbul ignore next */
      cov_99w0kl2h2().s[44]++;
      if (!isAdmin) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[10][0]++;
        cov_99w0kl2h2().s[45]++;
        whereClause.createdBy = user.id;
        /* istanbul ignore next */
        cov_99w0kl2h2().s[46]++;
        console.log(`Non-admin user ${user.id} (${user.roleName}) - filtering invoices by createdBy`);
      } else {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[10][1]++;
        cov_99w0kl2h2().s[47]++;
        console.log(`Admin user ${user.id} (${user.roleName}) - showing all invoices`);
      }
      /* istanbul ignore next */
      cov_99w0kl2h2().s[48]++;
      if (status) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[11][0]++;
        cov_99w0kl2h2().s[49]++;
        whereClause.status = status;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[11][1]++;
      }
      cov_99w0kl2h2().s[50]++;
      if (paymentMethod) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[12][0]++;
        cov_99w0kl2h2().s[51]++;
        whereClause.paymentMethod = paymentMethod;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[12][1]++;
      }
      cov_99w0kl2h2().s[52]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[14][0]++, shopId) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[14][1]++, shopId !== "all")) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[13][0]++;
        cov_99w0kl2h2().s[53]++;
        whereClause.shopId = shopId;
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[13][1]++;
      }
      cov_99w0kl2h2().s[54]++;
      console.log("Invoices where clause:", JSON.stringify(whereClause, null, 2));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[55]++;
      if (searchQuery) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[15][0]++;
        cov_99w0kl2h2().s[56]++;
        whereClause.OR = [{
          invoiceNumber: {
            contains: searchQuery,
            mode: "insensitive"
          }
        }, {
          customer: {
            name: {
              contains: searchQuery,
              mode: "insensitive"
            }
          }
        }];
        // Handle numeric search for total amount
        const numericQuery =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[57]++, parseFloat(searchQuery));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[58]++;
        if (!isNaN(numericQuery)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[16][0]++;
          cov_99w0kl2h2().s[59]++;
          whereClause.OR.push({
            total: numericQuery
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[16][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[15][1]++;
      }
      // Execute queries in parallel for better performance
      const [invoices, totalInvoices, statistics] =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[60]++, await Promise.all([(0, _performance.measureAsync)("invoices-main-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[5]++;
        cov_99w0kl2h2().s[61]++;
        return (
          // Main invoices query with optimized select
          prisma.invoice.findMany({
            where: whereClause,
            select: {
              id: true,
              invoiceNumber: true,
              total: true,
              status: true,
              paymentMethod: true,
              invoiceDate: true,
              dueDate: true,
              notes: true,
              createdAt: true,
              updatedAt: true,
              customer: {
                select: {
                  id: true,
                  name: true,
                  email: true,
                  phone: true
                }
              },
              shop: {
                select: {
                  id: true,
                  name: true,
                  location: true,
                  contact_person: true,
                  phone: true,
                  email: true,
                  address_line1: true,
                  address_line2: true,
                  city: true,
                  state: true,
                  postal_code: true,
                  country: true
                }
              },
              _count: {
                select: {
                  items: true
                }
              }
            },
            orderBy: {
              createdAt: "desc"
            },
            skip: (page - 1) * limit,
            take: limit
          })
        );
      }),
      // Total count query
      (0, _performance.measureAsync)("invoices-count-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[6]++;
        cov_99w0kl2h2().s[62]++;
        return prisma.invoice.count({
          where: whereClause
        });
      }),
      // Statistics queries in parallel
      (0, _performance.measureAsync)("invoices-stats-query", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[7]++;
        cov_99w0kl2h2().s[63]++;
        return Promise.all([
        // Total outstanding (pending invoices)
        prisma.invoice.aggregate({
          _sum: {
            total: true
          },
          where: {
            ...whereClause,
            status: "pending"
          }
        }),
        // Paid this month
        prisma.invoice.aggregate({
          _sum: {
            total: true
          },
          where: {
            ...whereClause,
            status: "paid",
            createdAt: {
              gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
            }
          }
        }),
        // Overdue count
        prisma.invoice.count({
          where: {
            ...whereClause,
            status: "pending",
            dueDate: {
              lt: new Date()
            }
          }
        })]);
      })]));
      const [totalOutstanding, paidThisMonth, overdueCount] =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[64]++, statistics);
      // Format response with optimized data structure
      const formattedInvoices =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[65]++, invoices.map(invoice => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[8]++;
        const {
          _count,
          customer,
          shop,
          ...rest
        } =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[66]++, invoice);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[67]++;
        return {
          ...rest,
          customer,
          shop,
          customerName:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[17][0]++, customer?.name) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[17][1]++, "Unknown Customer"),
          customerId: customer?.id,
          itemCount: _count.items
        };
      }));
      const responseData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[68]++, {
        invoices: formattedInvoices,
        totalPages: Math.ceil(totalInvoices / limit),
        currentPage: page,
        total: totalInvoices,
        statistics: {
          totalOutstanding:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[18][0]++, totalOutstanding._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[18][1]++, 0),
          paidThisMonth:
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[19][0]++, paidThisMonth._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[19][1]++, 0),
          overdueCount
        },
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId
        }
      });
      // Cache the response
      /* istanbul ignore next */
      cov_99w0kl2h2().s[69]++;
      await _cache.cacheService.set(cacheKey, responseData, _cache.CACHE_CONFIG.TTL.INVOICES);
      const response =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[70]++, _server.NextResponse.json(responseData));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[71]++;
      response.headers.set("X-Cache", "MISS");
      /* istanbul ignore next */
      cov_99w0kl2h2().s[72]++;
      response.headers.set("Cache-Control", "public, s-maxage=60, stale-while-revalidate=120");
      /* istanbul ignore next */
      cov_99w0kl2h2().s[73]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_99w0kl2h2().s[74]++;
      console.error("Error fetching invoices:", error);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[75]++;
      return _server.NextResponse.json({
        success: false,
        message: "Error fetching invoices",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[20][1]++, String(error))
      }, {
        status: 500
      });
    }
  }, {
    endpoint: "invoices"
  });
}));
const POST =
/* istanbul ignore next */
(cov_99w0kl2h2().s[76]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_99w0kl2h2().f[9]++;
  cov_99w0kl2h2().s[77]++;
  return (0, _performance.measureAsync)("create-invoice-api", async () => {
    /* istanbul ignore next */
    cov_99w0kl2h2().f[10]++;
    cov_99w0kl2h2().s[78]++;
    try {
      // Validate token and permissions
      const salesManageResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[79]++, await (0, _auth.validateTokenPermission)(request, "sales:manage"));
      const salesCreateShopResult =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[80]++, await (0, _auth.validateTokenPermission)(request, "sales:create:shop"));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[22][0]++, !salesManageResult.isValid) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[22][1]++, !salesCreateShopResult.isValid)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[21][0]++;
        cov_99w0kl2h2().s[82]++;
        return _server.NextResponse.json({
          error: "Permission denied: sales:manage or sales:create:shop required"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[21][1]++;
      }
      // Get user ID from token
      const userId =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[83]++, await (0, _auth.getUserIdFromToken)(request));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[84]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[23][0]++;
        cov_99w0kl2h2().s[85]++;
        return _server.NextResponse.json({
          error: "Unable to get user information from token"
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[23][1]++;
      }
      const invoiceData =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[86]++, await request.json());
      // If user only has sales:create:shop permission, validate shop restriction
      /* istanbul ignore next */
      cov_99w0kl2h2().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[25][0]++, !salesManageResult.isValid) &&
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[25][1]++, salesCreateShopResult.isValid)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[24][0]++;
        cov_99w0kl2h2().s[88]++;
        // User can only create sales for their assigned shop
        if (!invoiceData.shopId) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[26][0]++;
          cov_99w0kl2h2().s[89]++;
          return _server.NextResponse.json({
            success: false,
            message: "Shop ID is required for sales creation"
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[26][1]++;
        }
        // Validate that the user can only create invoices for their shop
        const shopAccessResult =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[90]++, await _shopMiddleware.ShopAccessControl.validateShopAccess(request, invoiceData.shopId));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[91]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[28][0]++, !shopAccessResult.hasAccess) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[28][1]++, shopAccessResult.isAdmin)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[27][0]++;
          cov_99w0kl2h2().s[92]++;
          // If user is admin, they should have sales:manage, not sales:create:shop
          if (shopAccessResult.isAdmin) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[29][0]++;
            cov_99w0kl2h2().s[93]++;
            return _server.NextResponse.json({
              success: false,
              message: "Admin users should use sales:manage permission"
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[29][1]++;
          }
          cov_99w0kl2h2().s[94]++;
          return _shopMiddleware.ShopAccessControl.createAccessDeniedResponse(
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[30][0]++, shopAccessResult.error) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[30][1]++, "Cannot create sales for this shop"));
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[24][1]++;
      }
      cov_99w0kl2h2().s[95]++;
      console.log("Invoice data received:", JSON.stringify(invoiceData, null, 2));
      const {
        sendSms,
        invoiceNumber,
        ...invoiceDetails
      } =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[96]++, invoiceData);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[97]++;
      console.log("Invoice details after destructuring:", JSON.stringify(invoiceDetails, null, 2));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[98]++;
      console.log("Invoice number from request:", invoiceNumber);
      // Server-side validation to prevent empty invoices
      /* istanbul ignore next */
      cov_99w0kl2h2().s[99]++;
      if (
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[32][0]++, !invoiceDetails.items) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[32][1]++, !Array.isArray(invoiceDetails.items)) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[32][2]++, invoiceDetails.items.length === 0)) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[31][0]++;
        cov_99w0kl2h2().s[100]++;
        return _server.NextResponse.json({
          success: false,
          message: "Invoice must contain at least one item",
          error: "No items provided"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[31][1]++;
      }
      // Validate that all items have required fields
      cov_99w0kl2h2().s[101]++;
      for (let i =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[102]++, 0); i < invoiceDetails.items.length; i++) {
        const item =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[103]++, invoiceDetails.items[i]);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[104]++;
        console.log(`Validating item ${i}:`, {
          productId: item.productId,
          productIdType: typeof item.productId,
          quantity: item.quantity,
          quantityType: typeof item.quantity,
          price: item.price,
          priceType: typeof item.price
        });
        /* istanbul ignore next */
        cov_99w0kl2h2().s[105]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[34][0]++, !item.productId) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[34][1]++, !item.quantity) ||
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[34][2]++, item.quantity <= 0)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[33][0]++;
          cov_99w0kl2h2().s[106]++;
          console.log(`Item validation failed for item ${i}:`, {
            hasProductId: !!item.productId,
            hasQuantity: !!item.quantity,
            quantityValue: item.quantity,
            quantityCheck: item.quantity <= 0
          });
          /* istanbul ignore next */
          cov_99w0kl2h2().s[107]++;
          return _server.NextResponse.json({
            success: false,
            message: `Item ${i + 1}: All items must have valid productId and quantity greater than 0`,
            error: "Invalid item data",
            itemDetails: {
              index: i,
              productId: item.productId,
              quantity: item.quantity,
              hasProductId: !!item.productId,
              hasQuantity: !!item.quantity,
              quantityPositive: item.quantity > 0
            }
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[33][1]++;
        }
      }
      // Validate customer is provided (optional but recommended)
      /* istanbul ignore next */
      cov_99w0kl2h2().s[108]++;
      if (!invoiceDetails.customerId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[35][0]++;
        cov_99w0kl2h2().s[109]++;
        console.warn("Invoice created without customer ID");
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[35][1]++;
      }
      // Credit limit validation for wholesale customers
      cov_99w0kl2h2().s[110]++;
      if (invoiceDetails.customerId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[36][0]++;
        const customer =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[111]++, await prisma.customer.findUnique({
          where: {
            id: invoiceDetails.customerId
          },
          select: {
            customerType: true,
            creditLimit: true,
            name: true
          }
        }));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[112]++;
        if (
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[38][0]++, customer) &&
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[38][1]++, customer.customerType === "wholesale") &&
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[38][2]++, customer.creditLimit)) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[37][0]++;
          // Calculate total invoice amount
          const totalAmount =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[113]++, invoiceDetails.items.reduce((sum, item) => {
            /* istanbul ignore next */
            cov_99w0kl2h2().f[11]++;
            const price =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[114]++,
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[39][0]++, parseFloat(item.customPrice)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[39][1]++, parseFloat(item.price)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[39][2]++, 0));
            const quantity =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[115]++,
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[40][0]++, parseInt(item.quantity, 10)) ||
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[40][1]++, 0));
            /* istanbul ignore next */
            cov_99w0kl2h2().s[116]++;
            return sum + price * quantity;
          }, 0));
          // Get customer's current outstanding balance
          const outstandingInvoices =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[117]++, await prisma.invoice.aggregate({
            where: {
              customerId: invoiceDetails.customerId,
              status: {
                in: ["pending", "overdue"]
              }
            },
            _sum: {
              total: true
            }
          }));
          const currentBalance =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[118]++,
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[41][0]++, outstandingInvoices._sum.total) ||
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[41][1]++, 0));
          const newTotalBalance =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[119]++, currentBalance + totalAmount);
          /* istanbul ignore next */
          cov_99w0kl2h2().s[120]++;
          if (newTotalBalance > customer.creditLimit) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[42][0]++;
            cov_99w0kl2h2().s[121]++;
            return _server.NextResponse.json({
              success: false,
              message: `Credit limit exceeded for customer ${customer.name}. Current balance: Rs. ${currentBalance.toLocaleString()}, Invoice amount: Rs. ${totalAmount.toLocaleString()}, Credit limit: Rs. ${customer.creditLimit.toLocaleString()}`,
              error: "Credit limit exceeded",
              details: {
                currentBalance,
                invoiceAmount: totalAmount,
                creditLimit: customer.creditLimit,
                exceedAmount: newTotalBalance - customer.creditLimit
              }
            }, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[42][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[37][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[36][1]++;
      }
      // Generate invoice number if missing
      const finalInvoiceNumber =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[122]++,
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[43][0]++, invoiceNumber) ||
      /* istanbul ignore next */
      (cov_99w0kl2h2().b[43][1]++, `INV-${Date.now()}-${Math.floor(Math.random() * 1000)}`));
      /* istanbul ignore next */
      cov_99w0kl2h2().s[123]++;
      console.log("Final invoice number to use:", finalInvoiceNumber);
      // Validate shop access for the target shop (only if shopId is provided)
      /* istanbul ignore next */
      cov_99w0kl2h2().s[124]++;
      if (invoiceDetails.shopId) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[44][0]++;
        cov_99w0kl2h2().s[125]++;
        console.log("Validating shop access for shopId:", invoiceDetails.shopId);
        const shopAccessResult =
        /* istanbul ignore next */
        (cov_99w0kl2h2().s[126]++, await _shopMiddleware.ShopAccessControl.validateShopAccess(request, invoiceDetails.shopId));
        /* istanbul ignore next */
        cov_99w0kl2h2().s[127]++;
        console.log("Shop access result:", shopAccessResult);
        /* istanbul ignore next */
        cov_99w0kl2h2().s[128]++;
        if (!shopAccessResult.hasAccess) {
          /* istanbul ignore next */
          cov_99w0kl2h2().b[45][0]++;
          cov_99w0kl2h2().s[129]++;
          console.log("Shop access denied:", shopAccessResult.error);
          /* istanbul ignore next */
          cov_99w0kl2h2().s[130]++;
          return _shopMiddleware.ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);
        } else
        /* istanbul ignore next */
        {
          cov_99w0kl2h2().b[45][1]++;
        }
        cov_99w0kl2h2().s[131]++;
        console.log("Shop access granted");
      } else {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[44][1]++;
        cov_99w0kl2h2().s[132]++;
        console.log("No shopId provided, skipping shop access validation");
      }
      const inventoryUpdatesForEvent =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[133]++, []);
      const invoice =
      /* istanbul ignore next */
      (cov_99w0kl2h2().s[134]++, await (0, _performance.measureAsync)("invoice-transaction", () => {
        /* istanbul ignore next */
        cov_99w0kl2h2().f[12]++;
        cov_99w0kl2h2().s[135]++;
        return prisma.$transaction(async tx => {
          /* istanbul ignore next */
          cov_99w0kl2h2().f[13]++;
          const createdInvoice =
          /* istanbul ignore next */
          (cov_99w0kl2h2().s[136]++, await tx.invoice.create({
            data: {
              invoiceNumber: finalInvoiceNumber,
              customerId:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[46][0]++, invoiceDetails.customerId) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[46][1]++, null),
              total: 0,
              status: "pending",
              paymentMethod:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[47][0]++, invoiceDetails.paymentMethod) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[47][1]++, "Cash"),
              invoiceDate: invoiceDetails.invoiceDate ?
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[48][0]++, new Date(invoiceDetails.invoiceDate)) :
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[48][1]++, new Date()),
              dueDate: invoiceDetails.dueDate ?
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[49][0]++, new Date(invoiceDetails.dueDate)) :
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[49][1]++, null),
              notes:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[50][0]++, invoiceDetails.notes) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[50][1]++, ""),
              shopId:
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[51][0]++, invoiceDetails.shopId) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[51][1]++, null),
              createdBy: userId,
              totalProfit: 0,
              profitMargin: 0 // Will be updated after items are processed
            }
          }));
          // Removed automatic payment creation for cash invoices
          // Users will manually record payments when they actually receive them
          /* istanbul ignore next */
          cov_99w0kl2h2().s[137]++;
          if (
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[53][0]++, invoiceDetails.items) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[53][1]++, Array.isArray(invoiceDetails.items))) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[52][0]++;
            // Get shop-specific costs for profit calculation instead of global weighted average
            const productIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[138]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[14]++;
              cov_99w0kl2h2().s[139]++;
              return parseInt(item.productId, 10);
            }));
            const inventoryItems =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[140]++, await tx.inventoryItem.findMany({
              where: {
                productId: {
                  in: productIds
                },
                shopId: invoiceDetails.shopId
              },
              select: {
                productId: true,
                shopSpecificCost: true
              }
            }));
            // Create a map of productId to shop-specific cost
            const productCostMap =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[141]++, new Map(inventoryItems.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[15]++;
              cov_99w0kl2h2().s[142]++;
              return [item.productId,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[54][0]++, item.shopSpecificCost) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[54][1]++, 0)];
            })));
            // For products not found in inventory, fallback to global weighted average
            const missingProductIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[143]++, productIds.filter(id => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[16]++;
              cov_99w0kl2h2().s[144]++;
              return !productCostMap.has(id);
            }));
            /* istanbul ignore next */
            cov_99w0kl2h2().s[145]++;
            if (missingProductIds.length > 0) {
              /* istanbul ignore next */
              cov_99w0kl2h2().b[55][0]++;
              const fallbackProducts =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[146]++, await tx.product.findMany({
                where: {
                  id: {
                    in: missingProductIds
                  }
                },
                select: {
                  id: true,
                  weightedAverageCost: true
                }
              }));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[147]++;
              fallbackProducts.forEach(p => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[17]++;
                cov_99w0kl2h2().s[148]++;
                productCostMap.set(p.id,
                /* istanbul ignore next */
                (cov_99w0kl2h2().b[56][0]++, p.weightedAverageCost) ||
                /* istanbul ignore next */
                (cov_99w0kl2h2().b[56][1]++, 0));
              });
            } else
            /* istanbul ignore next */
            {
              cov_99w0kl2h2().b[55][1]++;
            }
            let calculatedTotalInvoiceAmount =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[149]++, 0);
            // Batch create invoice items for better performance
            const invoiceItemsData =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[150]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[18]++;
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[151]++, parseInt(item.productId, 10));
              const costPrice =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[152]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[57][0]++, productCostMap.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[57][1]++, 0));
              const itemSellingTotal =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[153]++, item.quantity * item.price);
              const totalItemCost =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[154]++, costPrice * item.quantity);
              const itemProfit =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[155]++, itemSellingTotal - totalItemCost);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[156]++;
              calculatedTotalInvoiceAmount += itemSellingTotal;
              /* istanbul ignore next */
              cov_99w0kl2h2().s[157]++;
              return {
                invoiceId: createdInvoice.id,
                productId: productId,
                quantity: item.quantity,
                price: item.price,
                total: itemSellingTotal,
                costPrice: costPrice,
                profit: itemProfit
              };
            }));
            // Batch insert all invoice items
            /* istanbul ignore next */
            cov_99w0kl2h2().s[158]++;
            await tx.invoiceItem.createMany({
              data: invoiceItemsData
            });
            // Calculate and update total profit and profit margin
            const totalProfit =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[159]++, invoiceDetails.items.reduce((sum, item) => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[19]++;
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[160]++, parseInt(item.productId, 10));
              const costPrice =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[161]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[58][0]++, productCostMap.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[58][1]++, 0));
              const itemSellingTotal =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[162]++, item.quantity * item.price);
              const totalItemCost =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[163]++, costPrice * item.quantity);
              const itemProfit =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[164]++, itemSellingTotal - totalItemCost);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[165]++;
              return sum + itemProfit;
            }, 0));
            const profitMargin =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[166]++, calculatedTotalInvoiceAmount > 0 ?
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[59][0]++, totalProfit / calculatedTotalInvoiceAmount * 100) :
            /* istanbul ignore next */
            (cov_99w0kl2h2().b[59][1]++, 0));
            // Update invoice with profit information
            /* istanbul ignore next */
            cov_99w0kl2h2().s[167]++;
            await tx.invoice.update({
              where: {
                id: createdInvoice.id
              },
              data: {
                total: calculatedTotalInvoiceAmount,
                totalProfit: totalProfit,
                profitMargin: profitMargin
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[52][1]++;
          }
          // Optimized inventory check and update for the selected shop
          cov_99w0kl2h2().s[168]++;
          if (
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[61][0]++, invoiceDetails.shopId) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[61][1]++, invoiceDetails.items) &&
          /* istanbul ignore next */
          (cov_99w0kl2h2().b[61][2]++, Array.isArray(invoiceDetails.items))) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[60][0]++;
            // Batch fetch all inventory items for all products in one query
            const productIds =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[169]++, invoiceDetails.items.map(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[20]++;
              cov_99w0kl2h2().s[170]++;
              return parseInt(item.productId, 10);
            }));
            const allInventoryItems =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[171]++, await tx.inventoryItem.findMany({
              where: {
                productId: {
                  in: productIds
                },
                shopId: invoiceDetails.shopId
              },
              orderBy: {
                updatedAt: "asc"
              },
              select: {
                id: true,
                productId: true,
                quantity: true,
                updatedAt: true
              }
            }));
            // Group inventory items by product ID
            const inventoryByProduct =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[172]++, new Map());
            /* istanbul ignore next */
            cov_99w0kl2h2().s[173]++;
            allInventoryItems.forEach(item => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[21]++;
              cov_99w0kl2h2().s[174]++;
              if (!inventoryByProduct.has(item.productId)) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[62][0]++;
                cov_99w0kl2h2().s[175]++;
                inventoryByProduct.set(item.productId, []);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[62][1]++;
              }
              cov_99w0kl2h2().s[176]++;
              inventoryByProduct.get(item.productId).push(item);
            });
            // Validate inventory availability for all items first
            /* istanbul ignore next */
            cov_99w0kl2h2().s[177]++;
            for (const item of invoiceDetails.items) {
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[178]++, parseInt(item.productId, 10));
              const inventoryItems =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[179]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[63][0]++, inventoryByProduct.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[63][1]++, []));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[180]++;
              if (inventoryItems.length === 0) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[64][0]++;
                cov_99w0kl2h2().s[181]++;
                throw new Error(`No inventory for product ID ${productId} in the selected shop`);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[64][1]++;
              }
              const totalInventory =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[182]++, inventoryItems.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[22]++;
                cov_99w0kl2h2().s[183]++;
                return sum + inv.quantity;
              }, 0));
              /* istanbul ignore next */
              cov_99w0kl2h2().s[184]++;
              if (totalInventory < item.quantity) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[65][0]++;
                cov_99w0kl2h2().s[185]++;
                throw new Error(`Insufficient inventory for product ID ${productId} in the selected shop. Available: ${totalInventory}, Required: ${item.quantity}`);
              } else
              /* istanbul ignore next */
              {
                cov_99w0kl2h2().b[65][1]++;
              }
            }
            // Process inventory updates using FIFO
            const inventoryUpdates =
            /* istanbul ignore next */
            (cov_99w0kl2h2().s[186]++, []);
            /* istanbul ignore next */
            cov_99w0kl2h2().s[187]++;
            for (const item of invoiceDetails.items) {
              const productId =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[188]++, parseInt(item.productId, 10));
              const inventoryItems =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[189]++,
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[66][0]++, inventoryByProduct.get(productId)) ||
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[66][1]++, []));
              let remainingQuantity =
              /* istanbul ignore next */
              (cov_99w0kl2h2().s[190]++, item.quantity);
              /* istanbul ignore next */
              cov_99w0kl2h2().s[191]++;
              for (const inventoryItem of inventoryItems) {
                /* istanbul ignore next */
                cov_99w0kl2h2().s[192]++;
                if (remainingQuantity <= 0) {
                  /* istanbul ignore next */
                  cov_99w0kl2h2().b[67][0]++;
                  cov_99w0kl2h2().s[193]++;
                  break;
                } else
                /* istanbul ignore next */
                {
                  cov_99w0kl2h2().b[67][1]++;
                }
                cov_99w0kl2h2().s[194]++;
                if (inventoryItem.quantity > 0) {
                  /* istanbul ignore next */
                  cov_99w0kl2h2().b[68][0]++;
                  const deductAmount =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[195]++, Math.min(remainingQuantity, inventoryItem.quantity));
                  const oldShopQuantity =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[196]++, inventoryItem.quantity);
                  const newShopQuantity =
                  /* istanbul ignore next */
                  (cov_99w0kl2h2().s[197]++, inventoryItem.quantity - deductAmount);
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[198]++;
                  inventoryUpdates.push({
                    id: inventoryItem.id,
                    quantity: newShopQuantity
                  });
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[199]++;
                  inventoryUpdatesForEvent.push({
                    productId: productId,
                    shopId: inventoryItem.shopId,
                    newQuantity: newShopQuantity,
                    oldQuantity: oldShopQuantity
                  });
                  /* istanbul ignore next */
                  cov_99w0kl2h2().s[200]++;
                  remainingQuantity -= deductAmount;
                } else
                /* istanbul ignore next */
                {
                  cov_99w0kl2h2().b[68][1]++;
                }
              }
            }
            // Batch update inventory items
            /* istanbul ignore next */
            cov_99w0kl2h2().s[201]++;
            if (inventoryUpdates.length > 0) {
              /* istanbul ignore next */
              cov_99w0kl2h2().b[69][0]++;
              cov_99w0kl2h2().s[202]++;
              await Promise.all(inventoryUpdates.map(update => {
                /* istanbul ignore next */
                cov_99w0kl2h2().f[23]++;
                cov_99w0kl2h2().s[203]++;
                return tx.inventoryItem.update({
                  where: {
                    id: update.id
                  },
                  data: {
                    quantity: update.quantity,
                    updatedAt: new Date()
                  }
                });
              }));
            } else
            /* istanbul ignore next */
            {
              cov_99w0kl2h2().b[69][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[60][1]++;
          }
          cov_99w0kl2h2().s[204]++;
          return tx.invoice.findUnique({
            where: {
              id: createdInvoice.id
            },
            include: {
              customer: true,
              items: true
            }
          });
        }, {
          timeout: 30000
        });
      }));
      // Real-time updates now handled by polling system
      /* istanbul ignore next */
      cov_99w0kl2h2().s[205]++;
      console.log(`Invoice ${invoice?.id} created successfully`);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[206]++;
      if (sendSms) {
        /* istanbul ignore next */
        cov_99w0kl2h2().b[70][0]++;
        cov_99w0kl2h2().s[207]++;
        try {
          /* istanbul ignore next */
          cov_99w0kl2h2().s[208]++;
          await smsService.init();
          /* istanbul ignore next */
          cov_99w0kl2h2().s[209]++;
          if (smsService.isConfigured()) {
            /* istanbul ignore next */
            cov_99w0kl2h2().b[71][0]++;
            cov_99w0kl2h2().s[210]++;
            smsService.sendInvoiceNotification(invoice.id).then(result => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[24]++;
              cov_99w0kl2h2().s[211]++;
              if (
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[73][0]++, result.status >= 200) &&
              /* istanbul ignore next */
              (cov_99w0kl2h2().b[73][1]++, result.status < 300)) {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[72][0]++;
                cov_99w0kl2h2().s[212]++;
                console.log("SMS notification sent successfully");
              } else {
                /* istanbul ignore next */
                cov_99w0kl2h2().b[72][1]++;
                cov_99w0kl2h2().s[213]++;
                console.warn("Failed to send SMS notification:", result.message);
              }
            }).catch(error => {
              /* istanbul ignore next */
              cov_99w0kl2h2().f[25]++;
              cov_99w0kl2h2().s[214]++;
              console.error("Error sending SMS notification:", error);
            });
          } else
          /* istanbul ignore next */
          {
            cov_99w0kl2h2().b[71][1]++;
          }
        } catch (smsError) {
          /* istanbul ignore next */
          cov_99w0kl2h2().s[215]++;
          console.error("SMS notification error:", smsError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_99w0kl2h2().b[70][1]++;
      }
      // Invalidate related caches
      cov_99w0kl2h2().s[216]++;
      await Promise.all([_cache.cacheService.invalidateInvoices(), _cache.cacheService.invalidateInventory()]);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[217]++;
      return _server.NextResponse.json({
        success: true,
        message: "Invoice created successfully",
        data: invoice
      }, {
        status: 201
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_99w0kl2h2().s[218]++;
      console.error("Error creating invoice:", error);
      /* istanbul ignore next */
      cov_99w0kl2h2().s[219]++;
      return _server.NextResponse.json({
        success: false,
        message: "Error creating invoice",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[74][0]++, error.message) :
        /* istanbul ignore next */
        (cov_99w0kl2h2().b[74][1]++, String(error))
      }, {
        status: 500
      });
    }
  }, {
    endpoint: "create-invoice"
  });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,