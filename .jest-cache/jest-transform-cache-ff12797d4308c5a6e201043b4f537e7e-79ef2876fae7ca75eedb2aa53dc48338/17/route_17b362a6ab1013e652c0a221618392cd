15dc9c663c4a9fa757fcb563e1d99320
"use strict";

/* istanbul ignore next */
function cov_j5z2cl4kc() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/shops/analytics/route.ts";
  var hash = "188507111da3645ea93ed3a21b687c37953b488f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/shops/analytics/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 89
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "7": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "8": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 59
        }
      },
      "9": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "10": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 53
        }
      },
      "11": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 119
        }
      },
      "12": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 27,
          column: 68
        }
      },
      "13": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "16": {
        start: {
          line: 39,
          column: 22
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "17": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "18": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "20": {
        start: {
          line: 63,
          column: 57
        },
        end: {
          line: 63,
          column: 76
        }
      },
      "21": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 30
        }
      },
      "22": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "23": {
        start: {
          line: 70,
          column: 34
        },
        end: {
          line: 70,
          column: 87
        }
      },
      "24": {
        start: {
          line: 70,
          column: 63
        },
        end: {
          line: 70,
          column: 86
        }
      },
      "25": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 71,
          column: 79
        }
      },
      "26": {
        start: {
          line: 71,
          column: 55
        },
        end: {
          line: 71,
          column: 78
        }
      },
      "27": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "28": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "29": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 63
        }
      },
      "30": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 60
          },
          end: {
            line: 54,
            column: 61
          }
        },
        loc: {
          start: {
            line: 54,
            column: 74
          },
          end: {
            line: 65,
            column: 9
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 63,
            column: 45
          }
        },
        loc: {
          start: {
            line: 63,
            column: 57
          },
          end: {
            line: 63,
            column: 76
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 69,
            column: 40
          },
          end: {
            line: 69,
            column: 41
          }
        },
        loc: {
          start: {
            line: 69,
            column: 48
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 55
          },
          end: {
            line: 70,
            column: 56
          }
        },
        loc: {
          start: {
            line: 70,
            column: 63
          },
          end: {
            line: 70,
            column: 86
          }
        },
        line: 70
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 47
          },
          end: {
            line: 71,
            column: 48
          }
        },
        loc: {
          start: {
            line: 71,
            column: 55
          },
          end: {
            line: 71,
            column: 78
          }
        },
        line: 71
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 30
          },
          end: {
            line: 26,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 26,
            column: 61
          }
        }, {
          start: {
            line: 26,
            column: 64
          },
          end: {
            line: 26,
            column: 119
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 27,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 27,
            column: 55
          }
        }, {
          start: {
            line: 27,
            column: 58
          },
          end: {
            line: 27,
            column: 68
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 42,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 25
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 57
          }
        }, {
          start: {
            line: 74,
            column: 61
          },
          end: {
            line: 74,
            column: 62
          }
        }],
        line: 74
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 44
          }
        }, {
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 75,
            column: 49
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/shops/analytics/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET: Fetch analytics data for all shops\nexport async function GET(request: NextRequest) {\n    try {\n        // Get query parameters\n        const url = new URL(request.url);\n        const startDate = url.searchParams.get('startDate');\n        const endDate = url.searchParams.get('endDate');\n        const shopId = url.searchParams.get('shopId');\n\n        // Parse dates\n        const startDateTime = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 30));\n        const endDateTime = endDate ? new Date(endDate) : new Date();\n\n        // Build filter conditions\n        const whereCondition: any = {\n            createdAt: {\n                gte: startDateTime,\n                lte: endDateTime\n            }\n        };\n\n        if (shopId) {\n            whereCondition.shopId = shopId;\n        }\n\n        // Get all shops\n        const shops = await prisma.shop.findMany({\n            where: shopId ? { id: shopId } : undefined,\n            select: {\n                id: true,\n                name: true,\n                location: true,\n                is_active: true\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        // Get inventory data\n        const inventoryByShop = await Promise.all(\n            shops.map(async (shop) => {\n                const items = await prisma.inventoryItem.findMany({\n                    where: {\n                        shopId: shop.id\n                    }\n                });\n\n                return {\n                    shopId: shop.id,\n                    totalItems: items.length,\n                    totalQuantity: items.reduce((sum, item) => sum + item.quantity, 0)\n                };\n            })\n        );\n\n        // Get sales data (from invoices)\n        const salesByShop: { shopId: number, total: number }[] = [];\n\n        // Combine data\n        const shopAnalytics = shops.map(shop => {\n            const inventoryData = inventoryByShop.find(item => item.shopId === shop.id);\n            const salesData = salesByShop.find(item => item.shopId === shop.id);\n\n            return {\n                ...shop,\n                totalInventory: inventoryData?.totalItems || 0,\n                totalSales: salesData?.total || 0,\n                inventoryValue: 0, // To be calculated in a real implementation with product prices\n                performanceMetrics: {\n                    inventoryTurnover: 0, // Calculated as COGS / Average Inventory\n                    salesGrowth: 0, // Calculated based on previous period\n                    avgTicketSize: 0 // Average sale amount\n                }\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: shopAnalytics,\n            timeRange: {\n                startDate: startDateTime,\n                endDate: endDateTime\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching shop analytics:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch shop analytics' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "url", "URL", "startDate", "searchParams", "get", "endDate", "shopId", "startDateTime", "Date", "setDate", "getDate", "endDateTime", "whereCondition", "createdAt", "gte", "lte", "shops", "prisma", "shop", "findMany", "where", "id", "undefined", "select", "name", "location", "is_active", "orderBy", "inventoryByShop", "Promise", "all", "map", "items", "inventoryItem", "totalItems", "length", "totalQuantity", "reduce", "sum", "item", "quantity", "salesByShop", "shopAnalytics", "inventoryData", "find", "salesData", "totalInventory", "totalSales", "total", "inventoryValue", "performanceMetrics", "inventoryTurnover", "salesGrowth", "avgTicketSize", "NextResponse", "json", "success", "data", "timeRange", "error", "console", "message", "status"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;+DACvB;;;;;;AAGZ,eAAeA,IAAIC,OAAoB;IAC1C,IAAI;QACA,uBAAuB;QACvB,MAAMC,MAAM,IAAIC,IAAIF,QAAQC,GAAG;QAC/B,MAAME,YAAYF,IAAIG,YAAY,CAACC,GAAG,CAAC;QACvC,MAAMC,UAAUL,IAAIG,YAAY,CAACC,GAAG,CAAC;QACrC,MAAME,SAASN,IAAIG,YAAY,CAACC,GAAG,CAAC;QAEpC,cAAc;QACd,MAAMG,gBAAgBL,YAAY,IAAIM,KAAKN,aAAa,IAAIM,KAAK,IAAIA,OAAOC,OAAO,CAAC,IAAID,OAAOE,OAAO,KAAK;QAC3G,MAAMC,cAAcN,UAAU,IAAIG,KAAKH,WAAW,IAAIG;QAEtD,0BAA0B;QAC1B,MAAMI,iBAAsB;YACxBC,WAAW;gBACPC,KAAKP;gBACLQ,KAAKJ;YACT;QACJ;QAEA,IAAIL,QAAQ;YACRM,eAAeN,MAAM,GAAGA;QAC5B;QAEA,gBAAgB;QAChB,MAAMU,QAAQ,MAAMC,eAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,OAAOd,SAAS;gBAAEe,IAAIf;YAAO,IAAIgB;YACjCC,QAAQ;gBACJF,IAAI;gBACJG,MAAM;gBACNC,UAAU;gBACVC,WAAW;YACf;YACAC,SAAS;gBACLH,MAAM;YACV;QACJ;QAEA,qBAAqB;QACrB,MAAMI,kBAAkB,MAAMC,QAAQC,GAAG,CACrCd,MAAMe,GAAG,CAAC,OAAOb;YACb,MAAMc,QAAQ,MAAMf,eAAM,CAACgB,aAAa,CAACd,QAAQ,CAAC;gBAC9CC,OAAO;oBACHd,QAAQY,KAAKG,EAAE;gBACnB;YACJ;YAEA,OAAO;gBACHf,QAAQY,KAAKG,EAAE;gBACfa,YAAYF,MAAMG,MAAM;gBACxBC,eAAeJ,MAAMK,MAAM,CAAC,CAACC,KAAKC,OAASD,MAAMC,KAAKC,QAAQ,EAAE;YACpE;QACJ;QAGJ,iCAAiC;QACjC,MAAMC,cAAmD,EAAE;QAE3D,eAAe;QACf,MAAMC,gBAAgB1B,MAAMe,GAAG,CAACb,CAAAA;YAC5B,MAAMyB,gBAAgBf,gBAAgBgB,IAAI,CAACL,CAAAA,OAAQA,KAAKjC,MAAM,KAAKY,KAAKG,EAAE;YAC1E,MAAMwB,YAAYJ,YAAYG,IAAI,CAACL,CAAAA,OAAQA,KAAKjC,MAAM,KAAKY,KAAKG,EAAE;YAElE,OAAO;gBACH,GAAGH,IAAI;gBACP4B,gBAAgBH,eAAeT,cAAc;gBAC7Ca,YAAYF,WAAWG,SAAS;gBAChCC,gBAAgB;gBAChBC,oBAAoB;oBAChBC,mBAAmB;oBACnBC,aAAa;oBACbC,eAAe,EAAE,sBAAsB;gBAC3C;YACJ;QACJ;QAEA,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,MAAMf;YACNgB,WAAW;gBACPxD,WAAWK;gBACXF,SAASM;YACb;QACJ;IACJ,EAAE,OAAOgD,OAAO;QACZC,QAAQD,KAAK,CAAC,kCAAkCA;QAChD,OAAOL,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOK,SAAS;QAAiC,GAC5D;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "188507111da3645ea93ed3a21b687c37953b488f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_j5z2cl4kc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j5z2cl4kc();
cov_j5z2cl4kc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_j5z2cl4kc().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_j5z2cl4kc().f[0]++;
    cov_j5z2cl4kc().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_j5z2cl4kc().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_j5z2cl4kc().s[4]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_j5z2cl4kc().f[1]++;
  cov_j5z2cl4kc().s[5]++;
  return /* istanbul ignore next */(cov_j5z2cl4kc().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_j5z2cl4kc().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_j5z2cl4kc().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_j5z2cl4kc().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_j5z2cl4kc().f[2]++;
  cov_j5z2cl4kc().s[6]++;
  try {
    // Get query parameters
    const url =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[7]++, new URL(request.url));
    const startDate =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[8]++, url.searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[9]++, url.searchParams.get("endDate"));
    const shopId =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[10]++, url.searchParams.get("shopId"));
    // Parse dates
    const startDateTime =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[11]++, startDate ?
    /* istanbul ignore next */
    (cov_j5z2cl4kc().b[2][0]++, new Date(startDate)) :
    /* istanbul ignore next */
    (cov_j5z2cl4kc().b[2][1]++, new Date(new Date().setDate(new Date().getDate() - 30))));
    const endDateTime =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[12]++, endDate ?
    /* istanbul ignore next */
    (cov_j5z2cl4kc().b[3][0]++, new Date(endDate)) :
    /* istanbul ignore next */
    (cov_j5z2cl4kc().b[3][1]++, new Date()));
    // Build filter conditions
    const whereCondition =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[13]++, {
      createdAt: {
        gte: startDateTime,
        lte: endDateTime
      }
    });
    /* istanbul ignore next */
    cov_j5z2cl4kc().s[14]++;
    if (shopId) {
      /* istanbul ignore next */
      cov_j5z2cl4kc().b[4][0]++;
      cov_j5z2cl4kc().s[15]++;
      whereCondition.shopId = shopId;
    } else
    /* istanbul ignore next */
    {
      cov_j5z2cl4kc().b[4][1]++;
    }
    // Get all shops
    const shops =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[16]++, await _prisma.default.shop.findMany({
      where: shopId ?
      /* istanbul ignore next */
      (cov_j5z2cl4kc().b[5][0]++, {
        id: shopId
      }) :
      /* istanbul ignore next */
      (cov_j5z2cl4kc().b[5][1]++, undefined),
      select: {
        id: true,
        name: true,
        location: true,
        is_active: true
      },
      orderBy: {
        name: "asc"
      }
    }));
    // Get inventory data
    const inventoryByShop =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[17]++, await Promise.all(shops.map(async shop => {
      /* istanbul ignore next */
      cov_j5z2cl4kc().f[3]++;
      const items =
      /* istanbul ignore next */
      (cov_j5z2cl4kc().s[18]++, await _prisma.default.inventoryItem.findMany({
        where: {
          shopId: shop.id
        }
      }));
      /* istanbul ignore next */
      cov_j5z2cl4kc().s[19]++;
      return {
        shopId: shop.id,
        totalItems: items.length,
        totalQuantity: items.reduce((sum, item) => {
          /* istanbul ignore next */
          cov_j5z2cl4kc().f[4]++;
          cov_j5z2cl4kc().s[20]++;
          return sum + item.quantity;
        }, 0)
      };
    })));
    // Get sales data (from invoices)
    const salesByShop =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[21]++, []);
    // Combine data
    const shopAnalytics =
    /* istanbul ignore next */
    (cov_j5z2cl4kc().s[22]++, shops.map(shop => {
      /* istanbul ignore next */
      cov_j5z2cl4kc().f[5]++;
      const inventoryData =
      /* istanbul ignore next */
      (cov_j5z2cl4kc().s[23]++, inventoryByShop.find(item => {
        /* istanbul ignore next */
        cov_j5z2cl4kc().f[6]++;
        cov_j5z2cl4kc().s[24]++;
        return item.shopId === shop.id;
      }));
      const salesData =
      /* istanbul ignore next */
      (cov_j5z2cl4kc().s[25]++, salesByShop.find(item => {
        /* istanbul ignore next */
        cov_j5z2cl4kc().f[7]++;
        cov_j5z2cl4kc().s[26]++;
        return item.shopId === shop.id;
      }));
      /* istanbul ignore next */
      cov_j5z2cl4kc().s[27]++;
      return {
        ...shop,
        totalInventory:
        /* istanbul ignore next */
        (cov_j5z2cl4kc().b[6][0]++, inventoryData?.totalItems) ||
        /* istanbul ignore next */
        (cov_j5z2cl4kc().b[6][1]++, 0),
        totalSales:
        /* istanbul ignore next */
        (cov_j5z2cl4kc().b[7][0]++, salesData?.total) ||
        /* istanbul ignore next */
        (cov_j5z2cl4kc().b[7][1]++, 0),
        inventoryValue: 0,
        performanceMetrics: {
          inventoryTurnover: 0,
          salesGrowth: 0,
          avgTicketSize: 0 // Average sale amount
        }
      };
    }));
    /* istanbul ignore next */
    cov_j5z2cl4kc().s[28]++;
    return _server.NextResponse.json({
      success: true,
      data: shopAnalytics,
      timeRange: {
        startDate: startDateTime,
        endDate: endDateTime
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_j5z2cl4kc().s[29]++;
    console.error("Error fetching shop analytics:", error);
    /* istanbul ignore next */
    cov_j5z2cl4kc().s[30]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch shop analytics"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,