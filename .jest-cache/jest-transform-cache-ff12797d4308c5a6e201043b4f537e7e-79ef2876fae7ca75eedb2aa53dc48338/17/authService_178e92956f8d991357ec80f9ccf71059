d6d75e4a2a94a8a6209fb035671b74e5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    authenticateUser: function() {
        return authenticateUser;
    },
    generateToken: function() {
        return generateToken;
    },
    getUserFromDecodedPayload: function() {
        return getUserFromDecodedPayload;
    },
    getUserFromToken: function() {
        return getUserFromToken;
    },
    hasPermission: function() {
        return hasPermission;
    },
    parseTimeStringToSeconds: function() {
        return parseTimeStringToSeconds;
    },
    verifyToken: function() {
        return verifyToken;
    }
});
const _bcryptjs = /*#__PURE__*/ _interop_require_wildcard(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_wildcard(require("jsonwebtoken"));
const _prisma = /*#__PURE__*/ _interop_require_wildcard(require("../lib/prisma"));
const _cache = require("../lib/cache");
const _permissions = require("../lib/utils/permissions");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Secret key for JWT - should be moved to environment variables in production
const JWT_SECRET = process.env.JWT_SECRET || "your-secret-key";
// Changed token expiration to 12h (from 24h) for better security
const JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || "12h";
const parseTimeStringToSeconds = (timeStr)=>{
    if (!timeStr) return 0;
    const lastChar = timeStr.slice(-1);
    const num = parseInt(timeStr.slice(0, -1));
    if (isNaN(num)) return 0;
    switch(lastChar){
        case "s":
            return num;
        case "m":
            return num * 60;
        case "h":
            return num * 60 * 60;
        case "d":
            return num * 60 * 60 * 24;
        default:
            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);
            return 0;
    }
};
const authenticateUser = async (email, password)=>{
    try {
        console.time("user authentication query");
        // Optimized single query using the new composite index with retry logic
        const user = await (0, _prisma.safeQuery)(()=>_prisma.default.user.findFirst({
                where: {
                    email: email,
                    isActive: true
                },
                select: {
                    id: true,
                    name: true,
                    email: true,
                    password: true,
                    roleId: true,
                    roleName: true,
                    shopId: true,
                    permissions: true,
                    role: {
                        include: {
                            permissions: {
                                select: {
                                    name: true
                                }
                            }
                        }
                    }
                }
            }), null, "Failed to find user during authentication");
        console.timeEnd("user authentication query");
        // If user not found
        if (!user) {
            return {
                success: false,
                message: "Invalid email or password"
            };
        }
        // Verify password
        const isPasswordValid = await _bcryptjs.compare(password, user.password);
        if (!isPasswordValid) {
            return {
                success: false,
                message: "Invalid email or password"
            };
        }
        // Get permissions from both the user's direct permissions and their role
        let directPermissions = [];
        let rolePermissions = [];
        if (user.permissions && Array.isArray(user.permissions)) {
            const permissionNames = user.permissions.filter((p)=>isNaN(parseInt(p, 10)));
            const permissionIds = user.permissions.filter((p)=>!isNaN(parseInt(p, 10))).map((id)=>parseInt(id, 10));
            if (permissionIds.length > 0) {
                const fetchedPermissions = await _prisma.default.permission.findMany({
                    where: {
                        id: {
                            in: permissionIds
                        }
                    },
                    select: {
                        name: true
                    }
                });
                directPermissions = [
                    ...permissionNames,
                    ...fetchedPermissions.map((p)=>p.name)
                ];
            } else {
                directPermissions = permissionNames;
            }
        }
        if (user.role?.permissions) {
            rolePermissions = user.role.permissions.map((p)=>p.name);
        }
        // Merge and deduplicate permissions
        const allPermissions = Array.from(new Set([
            ...directPermissions,
            ...rolePermissions
        ]));
        console.log("Final user permissions being returned:", allPermissions);
        // Generate JWT token
        const token = generateToken({
            sub: user.id,
            username: user.name,
            email: user.email,
            roleId: user.roleId,
            roleName: user.roleName || user.role?.name || null,
            shopId: user.shopId,
            permissions: allPermissions
        });
        const userSession = {
            id: user.id,
            username: user.name,
            fullName: user.name,
            email: user.email,
            roleId: user.roleId,
            roleName: user.roleName || user.role?.name || null,
            shopId: user.shopId,
            permissions: allPermissions,
            role: user.role
        };
        // Cache user session for faster subsequent requests
        const cacheKey = _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
            userId: user.id
        });
        await _cache.cacheService.set(cacheKey, userSession, _cache.CACHE_CONFIG.TTL.USER_SESSION);
        return {
            success: true,
            token,
            user: {
                id: user.id,
                username: user.name,
                fullName: user.name,
                email: user.email,
                roleId: user.roleId,
                roleName: user.roleName || user.role?.name || null,
                shopId: user.shopId,
                permissions: allPermissions
            }
        };
    } catch (error) {
        console.error("Authentication error:", error);
        return {
            success: false,
            message: "Authentication failed"
        };
    }
};
const generateToken = (payload)=>{
    return _jsonwebtoken.sign(payload, JWT_SECRET, {
        expiresIn: JWT_EXPIRES_IN
    });
};
const verifyToken = async (token)=>{
    // Validate token input
    if (!token || token.trim() === "") {
        throw new Error("jwt must be provided");
    }
    try {
        // Verify token first
        const decoded = _jsonwebtoken.verify(token, JWT_SECRET);
        // Only generate cache key for valid tokens (ensure token is long enough for substring)
        if (token.length >= 20) {
            const tokenKey = _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.TOKEN_VALIDATION, {
                token: token.substring(0, 20)
            });
            // Check cache first for token validation result
            const cachedResult = await _cache.cacheService.get(tokenKey);
            if (cachedResult) {
                return cachedResult;
            }
            // Cache the valid token payload (shorter TTL for security)
            await _cache.cacheService.set(tokenKey, decoded, _cache.CACHE_CONFIG.TTL.TOKEN_VALIDATION);
        }
        return decoded;
    } catch (error) {
        // Log the error here if desired
        if (error instanceof _jsonwebtoken.TokenExpiredError) {
            console.error("Token expired during verification:", error.expiredAt);
        } else if (error instanceof _jsonwebtoken.JsonWebTokenError) {
            console.error("Invalid token during verification:", error.message);
        } else {
            console.error("Unknown token verification error:", error);
        }
        throw error; // Re-throw the error
    }
};
const hasPermission = async (tokenPayload, permission)=>{
    // Use the imported permission checking utility
    // Quick check from token payload first
    if (tokenPayload.permissions) {
        if ((0, _permissions.hasPermission)(tokenPayload.permissions, permission)) {
            return true;
        }
    }
    // If not in token, check cached user permissions
    const permissionsCacheKey = _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_PERMISSIONS, {
        userId: tokenPayload.sub
    });
    try {
        const cachedPermissions = await _cache.cacheService.get(permissionsCacheKey);
        if (cachedPermissions) {
            return (0, _permissions.hasPermission)(cachedPermissions, permission);
        }
        // Fallback to database query if not cached
        const user = await (0, _prisma.safeQuery)(()=>_prisma.default.user.findFirst({
                where: {
                    id: String(tokenPayload.sub),
                    isActive: true
                },
                include: {
                    role: {
                        include: {
                            permissions: {
                                select: {
                                    name: true
                                }
                            }
                        }
                    }
                }
            }), null, "Failed to find user for permission check");
        if (user) {
            // Combine role permissions and direct user permissions
            const rolePermissions = user.role?.permissions?.map((p)=>p.name) || [];
            const directPermissions = user.permissions || [];
            // Convert permission IDs to names if needed
            let convertedDirectPermissions = [];
            if (directPermissions.length > 0) {
                const firstPermission = directPermissions[0];
                if (typeof firstPermission === "number" || typeof firstPermission === "string" && !isNaN(parseInt(firstPermission))) {
                    // Permissions are stored as IDs, need to convert to names
                    const permissionIds = directPermissions.map((id)=>parseInt(id.toString())).filter((id)=>!isNaN(id));
                    if (permissionIds.length > 0) {
                        try {
                            const permissionRecords = await (0, _prisma.safeQuery)(()=>_prisma.default.permission.findMany({
                                    where: {
                                        id: {
                                            in: permissionIds
                                        }
                                    },
                                    select: {
                                        name: true
                                    }
                                }), [], "Failed to find permissions by IDs");
                            convertedDirectPermissions = permissionRecords.map((p)=>p.name);
                        } catch (error) {
                            console.error("Error converting permission IDs to names:", error);
                            convertedDirectPermissions = [];
                        }
                    }
                } else {
                    // Permissions are already stored as names
                    convertedDirectPermissions = directPermissions;
                }
            }
            // Combine all permissions and remove duplicates
            const allPermissions = [
                ...rolePermissions,
                ...convertedDirectPermissions
            ];
            const permissions = Array.from(new Set(allPermissions));
            // Cache permissions for future checks
            await _cache.cacheService.set(permissionsCacheKey, permissions, _cache.CACHE_CONFIG.TTL.USER_PERMISSIONS);
            return (0, _permissions.hasPermission)(permissions, permission);
        }
    } catch (error) {
        console.error("Error checking permissions:", error);
    }
    return false;
};
const getUserFromDecodedPayload = async (payload)=>{
    console.log("getUserFromDecodedPayload received payload:", payload);
    process.stderr.write(`DEBUG: getUserFromDecodedPayload called with payload: ${JSON.stringify(payload)}\n`);
    if (!payload) {
        console.error("Invalid token payload provided to getUserFromDecodedPayload");
        process.stderr.write("DEBUG: Invalid payload or missing sub, returning null\n");
        return null;
    }
    if (!payload.sub) {
        console.error("Token payload missing user ID (sub claim)");
        process.stderr.write("DEBUG: Invalid payload or missing sub, returning null\n");
        return null;
    }
    const userId = payload.sub;
    process.stderr.write(`DEBUG: About to call cacheService.generateKey with userId: ${userId}\n`);
    const cacheKey = _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
        userId
    });
    process.stderr.write(`DEBUG: Generated cache key: ${cacheKey}\n`);
    try {
        // Try to get user from cache first
        const cachedUser = await _cache.cacheService.get(cacheKey);
        if (cachedUser) {
            console.log("User found in cache:", userId);
            return cachedUser;
        }
        console.log("Looking up user with ID:", userId);
        console.time("prisma.user.findFirst for auth"); // Start timer
        const user = await (0, _prisma.safeQuery)(()=>_prisma.default.user.findFirst({
                where: {
                    id: String(userId),
                    isActive: true
                },
                include: {
                    role: {
                        include: {
                            permissions: {
                                select: {
                                    name: true
                                }
                            }
                        }
                    }
                }
            }), null, "Failed to find user by ID for authentication");
        console.timeEnd("prisma.user.findFirst for auth"); // End timer
        if (!user) {
            console.error("User not found for ID:", userId);
            return null;
        }
        // Combine role permissions and direct user permissions
        const rolePermissions = user.role?.permissions?.map((p)=>p.name) || [];
        const directPermissions = user.permissions || [];
        // Convert permission IDs to names if needed
        let convertedDirectPermissions = [];
        if (Array.isArray(directPermissions) && directPermissions.length > 0) {
            // Check if permissions are stored as IDs (numbers) or names (strings)
            const firstPermission = directPermissions[0];
            if (typeof firstPermission === "number" || typeof firstPermission === "string" && !isNaN(parseInt(firstPermission))) {
                // Permissions are stored as IDs, need to convert to names
                const permissionIds = directPermissions.map((id)=>parseInt(id.toString())).filter((id)=>!isNaN(id));
                if (permissionIds.length > 0) {
                    try {
                        const permissionRecords = await (0, _prisma.safeQuery)(()=>_prisma.default.permission.findMany({
                                where: {
                                    id: {
                                        in: permissionIds
                                    }
                                },
                                select: {
                                    name: true
                                }
                            }), [], "Failed to find permissions by IDs");
                        convertedDirectPermissions = permissionRecords.map((p)=>p.name);
                    } catch (error) {
                        console.error("Error converting permission IDs to names:", error);
                        convertedDirectPermissions = [];
                    }
                }
            } else {
                // Permissions are already stored as names
                convertedDirectPermissions = directPermissions;
            }
        }
        // Combine all permissions and remove duplicates
        const allPermissions = [
            ...rolePermissions,
            ...convertedDirectPermissions
        ];
        const permissions = Array.from(new Set(allPermissions));
        const userWithPermissions = {
            ...user,
            roleName: user.role?.name || user.roleName || "Admin",
            permissions: permissions
        };
        // Cache the user session
        await _cache.cacheService.set(cacheKey, userWithPermissions, _cache.CACHE_CONFIG.TTL.USER_SESSION);
        console.log("User found and cached:", user.id, user.name);
        return userWithPermissions;
    } catch (error) {
        console.error("Error getting user from decoded payload:", error);
        return null;
    }
};
const getUserFromToken = async (token)=>{
    const payload = await verifyToken(token);
    return getUserFromDecodedPayload(payload);
};

//# sourceMappingURL=data:application/json;base64,