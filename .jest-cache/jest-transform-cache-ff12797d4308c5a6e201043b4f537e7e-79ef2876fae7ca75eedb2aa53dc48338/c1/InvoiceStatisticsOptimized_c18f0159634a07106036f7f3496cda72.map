{"version":3,"names":["InvoiceStatisticsOptimized","cov_13dm9gy9zh","f","s","default","_default","StatCard","_react","memo","title","value","icon","Icon","trend","trendValue","description","variant","b","isLoading","cardStyles","useMemo","iconStyles","trendIcon","_lucidereact","TrendingUp","TrendingDown","trendStyles","_jsxruntime","jsxs","_card","Card","className","CardHeader","jsx","CardTitle","CardContent","_utils","cn","createElement","displayName","ProgressCard","current","target","unit","percentage","Math","min","progressVariant","_progress","Progress","toLocaleString","toFixed","TopCustomers","customers","map","i","length","slice","customer","index","_badge","Badge","name","formatCurrency","totalSpent","invoiceCount","id","statistics","showDetailed","computedStats","totalSales","totalCreditSales","totalNonCreditSales","collectionRate","paidThisMonth","creditRatio","outstandingRatio","totalOutstanding","mainStats","AlertTriangle","DollarSign","monthlyGrowth","undefined","abs","overdueCount","Calendar","CreditCard","detailedStats","averageInvoiceValue","BarChart3","Target","profitMargin","stat","topCustomers"],"sources":["/Users/sachin/Documents/md-sports-/src/components/invoices/InvoiceStatisticsOptimized.tsx"],"sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n    TrendingUp,\n    TrendingDown,\n    DollarSign,\n    CreditCard,\n    AlertTriangle,\n    Calendar,\n    Target,\n    BarChart3\n} from 'lucide-react';\nimport { formatCurrency } from '@/lib/utils';\nimport { cn } from '@/lib/utils';\n\n// Types\ninterface InvoiceStatistics {\n    totalOutstanding: number;\n    paidThisMonth: number;\n    overdueCount: number;\n    totalCreditSales: number;\n    totalNonCreditSales: number;\n    totalInvoices?: number;\n    averageInvoiceValue?: number;\n    paymentRate?: number;\n    monthlyGrowth?: number;\n    profitMargin?: number;\n    topCustomers?: Array<{\n        id: number;\n        name: string;\n        totalSpent: number;\n        invoiceCount: number;\n    }>;\n}\n\ninterface InvoiceStatisticsOptimizedProps {\n    statistics?: InvoiceStatistics;\n    isLoading?: boolean;\n    className?: string;\n    showDetailed?: boolean;\n}\n\n// Memoized stat card component\nconst StatCard = memo(({\n    title,\n    value,\n    icon: Icon,\n    trend,\n    trendValue,\n    description,\n    variant = 'default',\n    isLoading = false\n}: {\n    title: string;\n    value: string | number;\n    icon: React.ElementType;\n    trend?: 'up' | 'down' | 'neutral';\n    trendValue?: string;\n    description?: string;\n    variant?: 'default' | 'success' | 'warning' | 'danger';\n    isLoading?: boolean;\n}) => {\n    const cardStyles = useMemo(() => {\n        switch (variant) {\n            case 'success':\n                return 'border-green-200 bg-green-50';\n            case 'warning':\n                return 'border-orange-200 bg-orange-50';\n            case 'danger':\n                return 'border-red-200 bg-red-50';\n            default:\n                return 'border-gray-200';\n        }\n    }, [variant]);\n\n    const iconStyles = useMemo(() => {\n        switch (variant) {\n            case 'success':\n                return 'text-green-600';\n            case 'warning':\n                return 'text-orange-600';\n            case 'danger':\n                return 'text-red-600';\n            default:\n                return 'text-blue-600';\n        }\n    }, [variant]);\n\n    const trendIcon = useMemo(() => {\n        if (!trend || trend === 'neutral') return null;\n        return trend === 'up' ? TrendingUp : TrendingDown;\n    }, [trend]);\n\n    const trendStyles = useMemo(() => {\n        if (!trend || trend === 'neutral') return '';\n        return trend === 'up' ? 'text-green-600' : 'text-red-600';\n    }, [trend]);\n\n    if (isLoading) {\n        return (\n            <Card className={cardStyles}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-600\">\n                        {title}\n                    </CardTitle>\n                    <div className=\"animate-pulse bg-gray-200 rounded h-4 w-4\"></div>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"animate-pulse bg-gray-200 rounded h-8 w-24 mb-2\"></div>\n                    {description && (\n                        <div className=\"animate-pulse bg-gray-200 rounded h-4 w-32\"></div>\n                    )}\n                </CardContent>\n            </Card>\n        );\n    }\n\n    return (\n        <Card className={cardStyles}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">\n                    {title}\n                </CardTitle>\n                <Icon className={cn('h-4 w-4', iconStyles)} />\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"text-2xl font-bold\">{value}</div>\n                    {trendValue && trendIcon && (\n                        <div className={cn('flex items-center text-sm', trendStyles)}>\n                            {React.createElement(trendIcon, { className: 'h-3 w-3 mr-1' })}\n                            {trendValue}\n                        </div>\n                    )}\n                </div>\n                {description && (\n                    <p className=\"text-xs text-gray-600 mt-1\">\n                        {description}\n                    </p>\n                )}\n            </CardContent>\n        </Card>\n    );\n});\n\nStatCard.displayName = 'StatCard';\n\n// Memoized progress card component\nconst ProgressCard = memo(({\n    title,\n    current,\n    target,\n    unit = '',\n    icon: Icon,\n    variant = 'default',\n    isLoading = false\n}: {\n    title: string;\n    current: number;\n    target: number;\n    unit?: string;\n    icon: React.ElementType;\n    variant?: 'default' | 'success' | 'warning' | 'danger';\n    isLoading?: boolean;\n}) => {\n    const percentage = useMemo(() => {\n        if (target === 0) return 0;\n        return Math.min((current / target) * 100, 100);\n    }, [current, target]);\n\n    const progressVariant = useMemo(() => {\n        if (percentage >= 90) return 'success';\n        if (percentage >= 70) return 'warning';\n        return 'danger';\n    }, [percentage]);\n\n    const cardStyles = useMemo(() => {\n        switch (variant) {\n            case 'success':\n                return 'border-green-200';\n            case 'warning':\n                return 'border-orange-200';\n            case 'danger':\n                return 'border-red-200';\n            default:\n                return 'border-gray-200';\n        }\n    }, [variant]);\n\n    if (isLoading) {\n        return (\n            <Card className={cardStyles}>\n                <CardHeader className=\"pb-2\">\n                    <div className=\"animate-pulse bg-gray-200 rounded h-4 w-32\"></div>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"animate-pulse bg-gray-200 rounded h-2 w-full mb-2\"></div>\n                    <div className=\"animate-pulse bg-gray-200 rounded h-4 w-24\"></div>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    return (\n        <Card className={cardStyles}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">\n                    {title}\n                </CardTitle>\n                <Icon className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n                <div className=\"space-y-2\">\n                    <Progress value={percentage} className=\"h-2\" />\n                    <div className=\"flex justify-between text-sm\">\n                        <span className=\"font-medium\">\n                            {current.toLocaleString()}{unit}\n                        </span>\n                        <span className=\"text-gray-600\">\n                            of {target.toLocaleString()}{unit}\n                        </span>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                        {percentage.toFixed(1)}% of target\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    );\n});\n\nProgressCard.displayName = 'ProgressCard';\n\n// Memoized top customers component\nconst TopCustomers = memo(({\n    customers = [],\n    isLoading = false\n}: {\n    customers?: Array<{\n        id: number;\n        name: string;\n        totalSpent: number;\n        invoiceCount: number;\n    }>;\n    isLoading?: boolean;\n}) => {\n    if (isLoading) {\n        return (\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Top Customers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"space-y-3\">\n                        {[1, 2, 3].map(i => (\n                            <div key={i} className=\"flex items-center justify-between\">\n                                <div className=\"animate-pulse bg-gray-200 rounded h-4 w-24\"></div>\n                                <div className=\"animate-pulse bg-gray-200 rounded h-4 w-16\"></div>\n                            </div>\n                        ))}\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    if (customers.length === 0) {\n        return (\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">Top Customers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-sm text-gray-500\">No customer data available</p>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle className=\"text-sm font-medium\">Top Customers</CardTitle>\n            </CardHeader>\n            <CardContent>\n                <div className=\"space-y-3\">\n                    {customers.slice(0, 5).map((customer, index) => (\n                        <div key={customer.id} className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                                <Badge variant=\"outline\" className=\"w-6 h-6 p-0 flex items-center justify-center text-xs\">\n                                    {index + 1}\n                                </Badge>\n                                <span className=\"text-sm font-medium\">{customer.name}</span>\n                            </div>\n                            <div className=\"text-right\">\n                                <div className=\"text-sm font-medium\">\n                                    {formatCurrency(customer.totalSpent)}\n                                </div>\n                                <div className=\"text-xs text-gray-500\">\n                                    {customer.invoiceCount} invoice{customer.invoiceCount !== 1 ? 's' : ''}\n                                </div>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </CardContent>\n        </Card>\n    );\n});\n\nTopCustomers.displayName = 'TopCustomers';\n\n// Main component\nexport const InvoiceStatisticsOptimized = memo<InvoiceStatisticsOptimizedProps>(({\n    statistics,\n    isLoading = false,\n    className,\n    showDetailed = false\n}) => {\n    // Memoized computed values\n    const computedStats = useMemo(() => {\n        if (!statistics) return null;\n\n        const totalSales = statistics.totalCreditSales + statistics.totalNonCreditSales;\n        const collectionRate = totalSales > 0 ? (statistics.paidThisMonth / totalSales) * 100 : 0;\n        const creditRatio = totalSales > 0 ? (statistics.totalCreditSales / totalSales) * 100 : 0;\n\n        return {\n            totalSales,\n            collectionRate,\n            creditRatio,\n            outstandingRatio: totalSales > 0 ? (statistics.totalOutstanding / totalSales) * 100 : 0\n        };\n    }, [statistics]);\n\n    // Memoized main stats\n    const mainStats = useMemo(() => {\n        if (!statistics || !computedStats) return [];\n\n        return [\n            {\n                title: 'Total Outstanding',\n                value: formatCurrency(statistics.totalOutstanding),\n                icon: AlertTriangle,\n                variant: statistics.totalOutstanding > 0 ? 'warning' : 'success',\n                description: `${computedStats.outstandingRatio.toFixed(1)}% of total sales`\n            },\n            {\n                title: 'Paid This Month',\n                value: formatCurrency(statistics.paidThisMonth),\n                icon: DollarSign,\n                variant: 'success',\n                trend: statistics.monthlyGrowth ? (statistics.monthlyGrowth > 0 ? 'up' : 'down') : undefined,\n                trendValue: statistics.monthlyGrowth ? `${Math.abs(statistics.monthlyGrowth).toFixed(1)}%` : undefined\n            },\n            {\n                title: 'Overdue Invoices',\n                value: statistics.overdueCount,\n                icon: Calendar,\n                variant: statistics.overdueCount > 0 ? 'danger' : 'success',\n                description: statistics.overdueCount > 0 ? 'Requires attention' : 'All up to date'\n            },\n            {\n                title: 'Credit Sales',\n                value: formatCurrency(statistics.totalCreditSales),\n                icon: CreditCard,\n                variant: 'default',\n                description: `${computedStats.creditRatio.toFixed(1)}% of total sales`\n            }\n        ] as const;\n    }, [statistics, computedStats]);\n\n    // Memoized detailed stats\n    const detailedStats = useMemo(() => {\n        if (!statistics || !computedStats) return [];\n\n        return [\n            {\n                title: 'Cash Sales',\n                value: formatCurrency(statistics.totalNonCreditSales),\n                icon: DollarSign,\n                variant: 'success',\n                description: `${(100 - computedStats.creditRatio).toFixed(1)}% of total sales`\n            },\n            {\n                title: 'Average Invoice',\n                value: statistics.averageInvoiceValue ? formatCurrency(statistics.averageInvoiceValue) : '-',\n                icon: BarChart3,\n                variant: 'default'\n            },\n            {\n                title: 'Payment Rate',\n                value: `${computedStats.collectionRate.toFixed(1)}%`,\n                icon: Target,\n                variant: computedStats.collectionRate >= 80 ? 'success' : computedStats.collectionRate >= 60 ? 'warning' : 'danger'\n            },\n            {\n                title: 'Profit Margin',\n                value: statistics.profitMargin ? `${statistics.profitMargin.toFixed(1)}%` : '-',\n                icon: TrendingUp,\n                variant: statistics.profitMargin && statistics.profitMargin >= 20 ? 'success' : 'warning'\n            }\n        ] as const;\n    }, [statistics, computedStats]);\n\n    return (\n        <div className={cn('space-y-6', className)}>\n            {/* Main Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {mainStats.map((stat, index) => (\n                    <StatCard\n                        key={index}\n                        title={stat.title}\n                        value={stat.value}\n                        icon={stat.icon}\n                        variant={stat.variant}\n                        trend={stat.trend}\n                        trendValue={stat.trendValue}\n                        description={stat.description}\n                        isLoading={isLoading}\n                    />\n                ))}\n            </div>\n\n            {/* Detailed Statistics */}\n            {showDetailed && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {detailedStats.map((stat, index) => (\n                        <StatCard\n                            key={index}\n                            title={stat.title}\n                            value={stat.value}\n                            icon={stat.icon}\n                            variant={stat.variant}\n                            description={stat.description}\n                            isLoading={isLoading}\n                        />\n                    ))}\n                </div>\n            )}\n\n            {/* Progress Cards and Top Customers */}\n            {showDetailed && statistics && (\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                    {/* Collection Progress */}\n                    <ProgressCard\n                        title=\"Collection Progress\"\n                        current={statistics.paidThisMonth}\n                        target={statistics.paidThisMonth + statistics.totalOutstanding}\n                        unit=\"\"\n                        icon={Target}\n                        isLoading={isLoading}\n                    />\n\n                    {/* Monthly Target (if available) */}\n                    {statistics.averageInvoiceValue && (\n                        <ProgressCard\n                            title=\"Monthly Target\"\n                            current={statistics.paidThisMonth}\n                            target={statistics.averageInvoiceValue * 30} // Assuming 30 invoices target\n                            unit=\"\"\n                            icon={Calendar}\n                            isLoading={isLoading}\n                        />\n                    )}\n\n                    {/* Top Customers */}\n                    <TopCustomers\n                        customers={statistics.topCustomers}\n                        isLoading={isLoading}\n                    />\n                </div>\n            )}\n        </div>\n    );\n});\n\nInvoiceStatisticsOptimized.displayName = 'InvoiceStatisticsOptimized';\n\nexport default InvoiceStatisticsOptimized;"],"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","ignoreList":[]}