d8d92d10ee2d6a59a566a5309c4efdd3
"use strict";

/* istanbul ignore next */
function cov_7mfqygq4n() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts";
  var hash = "d742687baadc405778a5586452989aecb2662fc7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "11": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 47
        }
      },
      "12": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "14": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "15": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "16": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "17": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "19": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "20": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "21": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "22": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "23": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "24": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 79,
          column: 41
        }
      },
      "25": {
        start: {
          line: 81,
          column: 34
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "26": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "27": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "28": {
        start: {
          line: 93,
          column: 47
        },
        end: {
          line: 93,
          column: 51
        }
      },
      "29": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "30": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "31": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 84
        }
      },
      "32": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 88
        }
      },
      "34": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "35": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 106,
          column: 19
        }
      },
      "36": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "37": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 76
        }
      },
      "38": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "39": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "40": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "41": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 66
        }
      },
      "42": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "43": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 113
        }
      },
      "44": {
        start: {
          line: 128,
          column: 33
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "45": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "46": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "47": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "48": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 163,
          column: 17
        }
      },
      "49": {
        start: {
          line: 146,
          column: 38
        },
        end: {
          line: 146,
          column: 74
        }
      },
      "50": {
        start: {
          line: 147,
          column: 37
        },
        end: {
          line: 147,
          column: 72
        }
      },
      "51": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 82
        }
      },
      "52": {
        start: {
          line: 150,
          column: 38
        },
        end: {
          line: 150,
          column: 68
        }
      },
      "53": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 153,
          column: 21
        }
      },
      "54": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 109
        }
      },
      "55": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 162,
          column: 23
        }
      },
      "56": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "57": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 59
        }
      },
      "58": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 71
        }
      },
      "59": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "60": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "61": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "62": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "63": {
        start: {
          line: 201,
          column: 28
        },
        end: {
          line: 201,
          column: 47
        }
      },
      "64": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "65": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "66": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 213,
          column: 10
        }
      },
      "67": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "68": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "69": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 235,
          column: 11
        }
      },
      "70": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "71": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 234,
          column: 15
        }
      },
      "72": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "73": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 71
        }
      },
      "74": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 24
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 18
          }
        },
        loc: {
          start: {
            line: 69,
            column: 40
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 69
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 128,
            column: 68
          },
          end: {
            line: 128,
            column: 69
          }
        },
        loc: {
          start: {
            line: 128,
            column: 80
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 128
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 21
          }
        },
        loc: {
          start: {
            line: 199,
            column: 43
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 222,
            column: 43
          },
          end: {
            line: 222,
            column: 44
          }
        },
        loc: {
          start: {
            line: 222,
            column: 55
          },
          end: {
            line: 235,
            column: 9
          }
        },
        line: 222
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 14
          }
        }, {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 32
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 123,
            column: 38
          },
          end: {
            line: 123,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 68
          },
          end: {
            line: 123,
            column: 105
          }
        }, {
          start: {
            line: 123,
            column: 108
          },
          end: {
            line: 123,
            column: 112
          }
        }],
        line: 123
      },
      "14": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 21
          }
        }, {
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 137,
            column: 45
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 149,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 149,
            column: 66
          }
        }, {
          start: {
            line: 149,
            column: 70
          },
          end: {
            line: 149,
            column: 80
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 153,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 153,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "18": {
        loc: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 151,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 151,
            column: 40
          }
        }, {
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 151,
            column: 59
          }
        }, {
          start: {
            line: 151,
            column: 63
          },
          end: {
            line: 151,
            column: 75
          }
        }, {
          start: {
            line: 151,
            column: 79
          },
          end: {
            line: 151,
            column: 95
          }
        }],
        line: 151
      },
      "19": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "20": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "21": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET /api/quotations/[id] - Get a specific quotation\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(quotation);\n    } catch (error) {\n        console.error(`Error fetching quotation ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotation' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/quotations/[id] - Update a quotation\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n\n        // Ensure the quotation exists before attempting to update\n        const existingQuotation = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n        });\n\n        if (!existingQuotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        const { items, ...quotationDetails } = body;\n\n        // Prepare data for Quotation update, only including valid fields\n        const dataToUpdate: any = {};\n\n        if (quotationDetails.quotationNumber !== undefined) {\n            dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);\n        }\n        if (quotationDetails.customerId !== undefined) {\n            dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);\n            if (isNaN(dataToUpdate.customerId)) {\n                return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.total !== undefined) {\n            dataToUpdate.total = parseFloat(String(quotationDetails.total));\n            if (isNaN(dataToUpdate.total)) {\n                return NextResponse.json({ error: 'Invalid total format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.status !== undefined) {\n            dataToUpdate.status = String(quotationDetails.status);\n        }\n        if (quotationDetails.expiryDate !== undefined) { // Frontend sends expiryDate\n            dataToUpdate.validUntil = quotationDetails.expiryDate ? new Date(quotationDetails.expiryDate) : null;\n        }\n        // Note: We don't update createdAt. updatedAt is handled by Prisma.\n        // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.\n        // If they need to be stored, the schema needs to be updated.\n\n        const updatedQuotation = await prisma.$transaction(async (tx) => {\n            // Update the quotation\n            await tx.quotation.update({\n                where: {\n                    id: quotationId\n                },\n                data: dataToUpdate // Use the prepared data\n            });\n\n            // Handle items update if provided\n            if (items && Array.isArray(items)) {\n                // Delete existing items\n                await tx.quotationItem.deleteMany({\n                    where: {\n                        quotationId: quotationId\n                    }\n                });\n\n                // Create new items\n                for (const item of items) {\n                    const productId = parseInt(String(item.productId), 10);\n                    const quantity = parseInt(String(item.quantity), 10);\n                    // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'\n                    const price = parseFloat(String(item.unitPrice ?? item.price));\n                    const itemTotal = parseFloat(String(item.total));\n\n                    if (isNaN(productId) || isNaN(quantity) || isNaN(price) || isNaN(itemTotal)) {\n                        throw new Error('Invalid item data: All item numeric fields must be valid numbers.');\n                    }\n\n                    await tx.quotationItem.create({\n                        data: {\n                            quotationId: quotationId,\n                            productId: productId,\n                            quantity: quantity,\n                            price: price, // Ensure this matches schema field name\n                            total: itemTotal\n                        }\n                    });\n                }\n            }\n\n            // Return the updated quotation with items\n            return tx.quotation.findUnique({\n                where: {\n                    id: quotationId\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(updatedQuotation);\n    } catch (error: any) { // Catch specific error types if needed\n        console.error(`Error updating quotation ${params.id}:`, error);\n        // Provide a more specific error message if it's our custom validation error\n        if (error.message.startsWith('Invalid item data:')) {\n            return NextResponse.json(\n                { error: error.message },\n                { status: 400 }\n            );\n        }\n        return NextResponse.json(\n            { error: 'Failed to update quotation', details: error.message },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/quotations/[id] - Delete a quotation\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const quotationId = parseInt(params.id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        // Delete quotation and items in a transaction\n        await prisma.$transaction(async (tx) => {\n            // Delete associated items\n            await tx.quotationItem.deleteMany({\n                where: {\n                    quotationId: quotationId\n                }\n            });\n\n            // Delete the quotation\n            await tx.quotation.delete({\n                where: {\n                    id: quotationId\n                }\n            });\n        });\n\n        return NextResponse.json(\n            { message: 'Quotation deleted successfully' },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error(`Error deleting quotation ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "quotationId", "parseInt", "id", "isNaN", "NextResponse", "json", "error", "status", "quotation", "prisma", "findUnique", "where", "include", "customer", "items", "product", "console", "body", "existingQuotation", "quotationDetails", "dataToUpdate", "quotationNumber", "undefined", "String", "customerId", "total", "parseFloat", "expiryDate", "validUntil", "Date", "updatedQuotation", "$transaction", "tx", "update", "data", "Array", "isArray", "quotationItem", "deleteMany", "item", "productId", "quantity", "price", "unitPrice", "itemTotal", "Error", "create", "message", "startsWith", "details", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d742687baadc405778a5586452989aecb2662fc7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mfqygq4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mfqygq4n();
cov_7mfqygq4n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[0]++;
  cov_7mfqygq4n().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_7mfqygq4n().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[1]++;
    cov_7mfqygq4n().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[2]++;
    cov_7mfqygq4n().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[3]++;
    cov_7mfqygq4n().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_7mfqygq4n().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_7mfqygq4n().s[8]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[4]++;
  cov_7mfqygq4n().s[9]++;
  return /* istanbul ignore next */(cov_7mfqygq4n().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[5]++;
  cov_7mfqygq4n().s[10]++;
  try {
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[11]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[12]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[2][0]++;
      cov_7mfqygq4n().s[13]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[2][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[14]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      },
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[15]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[3][0]++;
      cov_7mfqygq4n().s[16]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[3][1]++;
    }
    cov_7mfqygq4n().s[17]++;
    return _server.NextResponse.json(quotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[18]++;
    console.error(`Error fetching quotation ${params.id}:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[19]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotation"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[6]++;
  cov_7mfqygq4n().s[20]++;
  try {
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[21]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[22]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[4][0]++;
      cov_7mfqygq4n().s[23]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[4][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[24]++, await request.json());
    // Ensure the quotation exists before attempting to update
    const existingQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[25]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[26]++;
    if (!existingQuotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[5][0]++;
      cov_7mfqygq4n().s[27]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[5][1]++;
    }
    const {
      items,
      ...quotationDetails
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[28]++, body);
    // Prepare data for Quotation update, only including valid fields
    const dataToUpdate =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[29]++, {});
    /* istanbul ignore next */
    cov_7mfqygq4n().s[30]++;
    if (quotationDetails.quotationNumber !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[6][0]++;
      cov_7mfqygq4n().s[31]++;
      dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[6][1]++;
    }
    cov_7mfqygq4n().s[32]++;
    if (quotationDetails.customerId !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[7][0]++;
      cov_7mfqygq4n().s[33]++;
      dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);
      /* istanbul ignore next */
      cov_7mfqygq4n().s[34]++;
      if (isNaN(dataToUpdate.customerId)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[8][0]++;
        cov_7mfqygq4n().s[35]++;
        return _server.NextResponse.json({
          error: "Invalid customerId format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[7][1]++;
    }
    cov_7mfqygq4n().s[36]++;
    if (quotationDetails.total !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[9][0]++;
      cov_7mfqygq4n().s[37]++;
      dataToUpdate.total = parseFloat(String(quotationDetails.total));
      /* istanbul ignore next */
      cov_7mfqygq4n().s[38]++;
      if (isNaN(dataToUpdate.total)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[10][0]++;
        cov_7mfqygq4n().s[39]++;
        return _server.NextResponse.json({
          error: "Invalid total format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[9][1]++;
    }
    cov_7mfqygq4n().s[40]++;
    if (quotationDetails.status !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[11][0]++;
      cov_7mfqygq4n().s[41]++;
      dataToUpdate.status = String(quotationDetails.status);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[11][1]++;
    }
    cov_7mfqygq4n().s[42]++;
    if (quotationDetails.expiryDate !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[12][0]++;
      cov_7mfqygq4n().s[43]++;
      dataToUpdate.validUntil = quotationDetails.expiryDate ?
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[13][0]++, new Date(quotationDetails.expiryDate)) :
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[13][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[12][1]++;
    }
    // Note: We don't update createdAt. updatedAt is handled by Prisma.
    // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.
    // If they need to be stored, the schema needs to be updated.
    const updatedQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[44]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[7]++;
      cov_7mfqygq4n().s[45]++;
      // Update the quotation
      await tx.quotation.update({
        where: {
          id: quotationId
        },
        data: dataToUpdate // Use the prepared data
      });
      // Handle items update if provided
      /* istanbul ignore next */
      cov_7mfqygq4n().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[15][0]++, items) &&
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[15][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[14][0]++;
        cov_7mfqygq4n().s[47]++;
        // Delete existing items
        await tx.quotationItem.deleteMany({
          where: {
            quotationId: quotationId
          }
        });
        // Create new items
        /* istanbul ignore next */
        cov_7mfqygq4n().s[48]++;
        for (const item of items) {
          const productId =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[49]++, parseInt(String(item.productId), 10));
          const quantity =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[50]++, parseInt(String(item.quantity), 10));
          // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'
          const price =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[51]++, parseFloat(String(
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[16][0]++, item.unitPrice) ??
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[16][1]++, item.price))));
          const itemTotal =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[52]++, parseFloat(String(item.total)));
          /* istanbul ignore next */
          cov_7mfqygq4n().s[53]++;
          if (
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[18][0]++, isNaN(productId)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[18][1]++, isNaN(quantity)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[18][2]++, isNaN(price)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[18][3]++, isNaN(itemTotal))) {
            /* istanbul ignore next */
            cov_7mfqygq4n().b[17][0]++;
            cov_7mfqygq4n().s[54]++;
            throw new Error("Invalid item data: All item numeric fields must be valid numbers.");
          } else
          /* istanbul ignore next */
          {
            cov_7mfqygq4n().b[17][1]++;
          }
          cov_7mfqygq4n().s[55]++;
          await tx.quotationItem.create({
            data: {
              quotationId: quotationId,
              productId: productId,
              quantity: quantity,
              price: price,
              total: itemTotal
            }
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[14][1]++;
      }
      // Return the updated quotation with items
      cov_7mfqygq4n().s[56]++;
      return tx.quotation.findUnique({
        where: {
          id: quotationId
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[57]++;
    return _server.NextResponse.json(updatedQuotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[58]++;
    console.error(`Error updating quotation ${params.id}:`, error);
    // Provide a more specific error message if it's our custom validation error
    /* istanbul ignore next */
    cov_7mfqygq4n().s[59]++;
    if (error.message.startsWith("Invalid item data:")) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[19][0]++;
      cov_7mfqygq4n().s[60]++;
      return _server.NextResponse.json({
        error: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[19][1]++;
    }
    cov_7mfqygq4n().s[61]++;
    return _server.NextResponse.json({
      error: "Failed to update quotation",
      details: error.message
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[8]++;
  cov_7mfqygq4n().s[62]++;
  try {
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[63]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[64]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[20][0]++;
      cov_7mfqygq4n().s[65]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[20][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[66]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[67]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[21][0]++;
      cov_7mfqygq4n().s[68]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[21][1]++;
    }
    // Delete quotation and items in a transaction
    cov_7mfqygq4n().s[69]++;
    await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[9]++;
      cov_7mfqygq4n().s[70]++;
      // Delete associated items
      await tx.quotationItem.deleteMany({
        where: {
          quotationId: quotationId
        }
      });
      // Delete the quotation
      /* istanbul ignore next */
      cov_7mfqygq4n().s[71]++;
      await tx.quotation.delete({
        where: {
          id: quotationId
        }
      });
    });
    /* istanbul ignore next */
    cov_7mfqygq4n().s[72]++;
    return _server.NextResponse.json({
      message: "Quotation deleted successfully"
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[73]++;
    console.error(`Error deleting quotation ${params.id}:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[74]++;
    return _server.NextResponse.json({
      error: "Failed to delete quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,