{"version":3,"names":["cov_13vnnmg8gv","actualCoverage","s","GET","request","f","token","_auth","extractToken","b","_server","NextResponse","json","error","status","payload","verifyToken","sub","userId","user","_prisma","prisma","findUnique","where","id","select","roleName","permissions","isAdmin","_permissions","hasPermission","backupData","users","findMany","products","product","shops","shop","inventoryItems","inventoryItem","invoices","invoice","customers","customer","headers","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/backup/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { NextRequest } from 'next/server';\nimport { extractToken, verifyToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\n\nexport async function GET(request: NextRequest) {\n  const token = extractToken(request);\n  if (!token) {\n    return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 });\n  }\n\n  const payload = await verifyToken(token);\n  if (!payload || !payload.sub) {\n    return NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 });\n  }\n\n  const userId = payload.sub as string;\n\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: { roleName: true, permissions: true }\n  });\n\n  if (!user) {\n    return NextResponse.json({ error: 'User not found' }, { status: 404 });\n  }\n\n  // Check for admin access via permissions first, then roleName\n  const isAdmin = hasPermission(user.permissions || [], 'admin:all') || user.roleName === 'admin';\n\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Insufficient permissions - Admin required' }, { status: 403 });\n  }\n\n  try {\n    const backupData = {\n      users: await prisma.user.findMany(),\n      products: await prisma.product.findMany(),\n      shops: await prisma.shop.findMany(),\n      inventoryItems: await prisma.inventoryItem.findMany(),\n      invoices: await prisma.invoice.findMany(),\n      customers: await prisma.customer.findMany(),\n      // Add more tables as needed\n    };\n\n    return NextResponse.json(backupData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Disposition': 'attachment; filename=backup.json'\n      }\n    });\n  } catch (error) {\n    console.error('Backup error:', error);\n    return NextResponse.json({ error: 'Failed to generate backup' }, { status: 500 });\n  }\n} "],"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","ignoreList":[]}