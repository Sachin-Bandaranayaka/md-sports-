6987b79db0588cfd9b4e2d24e870c00c
"use strict";

/* istanbul ignore next */
function cov_13vnnmg8gv() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/backup/route.ts";
  var hash = "6ee4dcf0ca1e6122a3078c48b5f30f5f1a04c59e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/backup/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "7": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 50
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "10": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "13": {
        start: {
          line: 32,
          column: 19
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "14": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "15": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "16": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "17": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 117
        }
      },
      "18": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "19": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "20": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "21": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "23": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 46
        }
      },
      "24": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 16
          }
        }, {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 32
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 88
          }
        }, {
          start: {
            line: 50,
            column: 92
          },
          end: {
            line: 50,
            column: 117
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 52
          },
          end: {
            line: 50,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 52
          },
          end: {
            line: 50,
            column: 68
          }
        }, {
          start: {
            line: 50,
            column: 72
          },
          end: {
            line: 50,
            column: 74
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/backup/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { NextRequest } from 'next/server';\nimport { extractToken, verifyToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\n\nexport async function GET(request: NextRequest) {\n  const token = extractToken(request);\n  if (!token) {\n    return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 });\n  }\n\n  const payload = await verifyToken(token);\n  if (!payload || !payload.sub) {\n    return NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 });\n  }\n\n  const userId = payload.sub as string;\n\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: { roleName: true, permissions: true }\n  });\n\n  if (!user) {\n    return NextResponse.json({ error: 'User not found' }, { status: 404 });\n  }\n\n  // Check for admin access via permissions first, then roleName\n  const isAdmin = hasPermission(user.permissions || [], 'admin:all') || user.roleName === 'admin';\n\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Insufficient permissions - Admin required' }, { status: 403 });\n  }\n\n  try {\n    const backupData = {\n      users: await prisma.user.findMany(),\n      products: await prisma.product.findMany(),\n      shops: await prisma.shop.findMany(),\n      inventoryItems: await prisma.inventoryItem.findMany(),\n      invoices: await prisma.invoice.findMany(),\n      customers: await prisma.customer.findMany(),\n      // Add more tables as needed\n    };\n\n    return NextResponse.json(backupData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Disposition': 'attachment; filename=backup.json'\n      }\n    });\n  } catch (error) {\n    console.error('Backup error:', error);\n    return NextResponse.json({ error: 'Failed to generate backup' }, { status: 500 });\n  }\n} "],
      names: ["GET", "request", "token", "extractToken", "NextResponse", "json", "error", "status", "payload", "verifyToken", "sub", "userId", "user", "prisma", "findUnique", "where", "id", "select", "roleName", "permissions", "isAdmin", "hasPermission", "backupData", "users", "findMany", "products", "product", "shops", "shop", "inventoryItems", "inventoryItem", "invoices", "invoice", "customers", "customer", "headers", "console"],
      mappings: ";;;;+BAQsBA;;;eAAAA;;;wBARO;wBACN;sBAImB;6BACZ;AAEvB,eAAeA,IAAIC,OAAoB;IAC5C,MAAMC,QAAQC,IAAAA,kBAAY,EAACF;IAC3B,IAAI,CAACC,OAAO;QACV,OAAOE,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAkC,GAAG;YAAEC,QAAQ;QAAI;IACvF;IAEA,MAAMC,UAAU,MAAMC,IAAAA,iBAAW,EAACP;IAClC,IAAI,CAACM,WAAW,CAACA,QAAQE,GAAG,EAAE;QAC5B,OAAON,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAA2B,GAAG;YAAEC,QAAQ;QAAI;IAChF;IAEA,MAAMI,SAASH,QAAQE,GAAG;IAE1B,MAAME,OAAO,MAAMC,cAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,OAAO;YAAEC,IAAIL;QAAO;QACpBM,QAAQ;YAAEC,UAAU;YAAMC,aAAa;QAAK;IAC9C;IAEA,IAAI,CAACP,MAAM;QACT,OAAOR,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAiB,GAAG;YAAEC,QAAQ;QAAI;IACtE;IAEA,8DAA8D;IAC9D,MAAMa,UAAUC,IAAAA,0BAAa,EAACT,KAAKO,WAAW,IAAI,EAAE,EAAE,gBAAgBP,KAAKM,QAAQ,KAAK;IAExF,IAAI,CAACE,SAAS;QACZ,OAAOhB,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAA4C,GAAG;YAAEC,QAAQ;QAAI;IACjG;IAEA,IAAI;QACF,MAAMe,aAAa;YACjBC,OAAO,MAAMV,cAAM,CAACD,IAAI,CAACY,QAAQ;YACjCC,UAAU,MAAMZ,cAAM,CAACa,OAAO,CAACF,QAAQ;YACvCG,OAAO,MAAMd,cAAM,CAACe,IAAI,CAACJ,QAAQ;YACjCK,gBAAgB,MAAMhB,cAAM,CAACiB,aAAa,CAACN,QAAQ;YACnDO,UAAU,MAAMlB,cAAM,CAACmB,OAAO,CAACR,QAAQ;YACvCS,WAAW,MAAMpB,cAAM,CAACqB,QAAQ,CAACV,QAAQ;QAE3C;QAEA,OAAOpB,oBAAY,CAACC,IAAI,CAACiB,YAAY;YACnCa,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB;YACzB;QACF;IACF,EAAE,OAAO7B,OAAO;QACd8B,QAAQ9B,KAAK,CAAC,iBAAiBA;QAC/B,OAAOF,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAA4B,GAAG;YAAEC,QAAQ;QAAI;IACjF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6ee4dcf0ca1e6122a3078c48b5f30f5f1a04c59e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13vnnmg8gv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13vnnmg8gv();
cov_13vnnmg8gv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_13vnnmg8gv().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_13vnnmg8gv().f[0]++;
    cov_13vnnmg8gv().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_13vnnmg8gv().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_13vnnmg8gv().s[4]++, require("../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_13vnnmg8gv().s[5]++, require("../../../lib/auth"));
const _permissions =
/* istanbul ignore next */
(cov_13vnnmg8gv().s[6]++, require("../../../lib/utils/permissions"));
async function GET(request) {
  /* istanbul ignore next */
  cov_13vnnmg8gv().f[1]++;
  const token =
  /* istanbul ignore next */
  (cov_13vnnmg8gv().s[7]++, (0, _auth.extractToken)(request));
  /* istanbul ignore next */
  cov_13vnnmg8gv().s[8]++;
  if (!token) {
    /* istanbul ignore next */
    cov_13vnnmg8gv().b[0][0]++;
    cov_13vnnmg8gv().s[9]++;
    return _server.NextResponse.json({
      error: "No authorization token provided"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_13vnnmg8gv().b[0][1]++;
  }
  const payload =
  /* istanbul ignore next */
  (cov_13vnnmg8gv().s[10]++, await (0, _auth.verifyToken)(token));
  /* istanbul ignore next */
  cov_13vnnmg8gv().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[2][0]++, !payload) ||
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[2][1]++, !payload.sub)) {
    /* istanbul ignore next */
    cov_13vnnmg8gv().b[1][0]++;
    cov_13vnnmg8gv().s[12]++;
    return _server.NextResponse.json({
      error: "Invalid or expired token"
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_13vnnmg8gv().b[1][1]++;
  }
  const userId =
  /* istanbul ignore next */
  (cov_13vnnmg8gv().s[13]++, payload.sub);
  const user =
  /* istanbul ignore next */
  (cov_13vnnmg8gv().s[14]++, await _prisma.prisma.user.findUnique({
    where: {
      id: userId
    },
    select: {
      roleName: true,
      permissions: true
    }
  }));
  /* istanbul ignore next */
  cov_13vnnmg8gv().s[15]++;
  if (!user) {
    /* istanbul ignore next */
    cov_13vnnmg8gv().b[3][0]++;
    cov_13vnnmg8gv().s[16]++;
    return _server.NextResponse.json({
      error: "User not found"
    }, {
      status: 404
    });
  } else
  /* istanbul ignore next */
  {
    cov_13vnnmg8gv().b[3][1]++;
  }
  // Check for admin access via permissions first, then roleName
  const isAdmin =
  /* istanbul ignore next */
  (cov_13vnnmg8gv().s[17]++,
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[4][0]++, (0, _permissions.hasPermission)(
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[5][0]++, user.permissions) ||
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[5][1]++, []), "admin:all")) ||
  /* istanbul ignore next */
  (cov_13vnnmg8gv().b[4][1]++, user.roleName === "admin"));
  /* istanbul ignore next */
  cov_13vnnmg8gv().s[18]++;
  if (!isAdmin) {
    /* istanbul ignore next */
    cov_13vnnmg8gv().b[6][0]++;
    cov_13vnnmg8gv().s[19]++;
    return _server.NextResponse.json({
      error: "Insufficient permissions - Admin required"
    }, {
      status: 403
    });
  } else
  /* istanbul ignore next */
  {
    cov_13vnnmg8gv().b[6][1]++;
  }
  cov_13vnnmg8gv().s[20]++;
  try {
    const backupData =
    /* istanbul ignore next */
    (cov_13vnnmg8gv().s[21]++, {
      users: await _prisma.prisma.user.findMany(),
      products: await _prisma.prisma.product.findMany(),
      shops: await _prisma.prisma.shop.findMany(),
      inventoryItems: await _prisma.prisma.inventoryItem.findMany(),
      invoices: await _prisma.prisma.invoice.findMany(),
      customers: await _prisma.prisma.customer.findMany()
    });
    /* istanbul ignore next */
    cov_13vnnmg8gv().s[22]++;
    return _server.NextResponse.json(backupData, {
      headers: {
        "Content-Type": "application/json",
        "Content-Disposition": "attachment; filename=backup.json"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_13vnnmg8gv().s[23]++;
    console.error("Backup error:", error);
    /* istanbul ignore next */
    cov_13vnnmg8gv().s[24]++;
    return _server.NextResponse.json({
      error: "Failed to generate backup"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTN2bm5tZzhndiIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJmIiwidG9rZW4iLCJfYXV0aCIsImV4dHJhY3RUb2tlbiIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwicGF5bG9hZCIsInZlcmlmeVRva2VuIiwic3ViIiwidXNlcklkIiwidXNlciIsIl9wcmlzbWEiLCJwcmlzbWEiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJpZCIsInNlbGVjdCIsInJvbGVOYW1lIiwicGVybWlzc2lvbnMiLCJpc0FkbWluIiwiX3Blcm1pc3Npb25zIiwiaGFzUGVybWlzc2lvbiIsImJhY2t1cERhdGEiLCJ1c2VycyIsImZpbmRNYW55IiwicHJvZHVjdHMiLCJwcm9kdWN0Iiwic2hvcHMiLCJzaG9wIiwiaW52ZW50b3J5SXRlbXMiLCJpbnZlbnRvcnlJdGVtIiwiaW52b2ljZXMiLCJpbnZvaWNlIiwiY3VzdG9tZXJzIiwiY3VzdG9tZXIiLCJoZWFkZXJzIiwiY29uc29sZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2FwcC9hcGkvYmFja3VwL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyBnZXRTZXJ2ZXJTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCB7IGF1dGhPcHRpb25zIH0gZnJvbSAnQC9saWIvYXV0aCc7XG5pbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGV4dHJhY3RUb2tlbiwgdmVyaWZ5VG9rZW4gfSBmcm9tICdAL2xpYi9hdXRoJztcbmltcG9ydCB7IGhhc1Blcm1pc3Npb24gfSBmcm9tICdAL2xpYi91dGlscy9wZXJtaXNzaW9ucyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3QgdG9rZW4gPSBleHRyYWN0VG9rZW4ocmVxdWVzdCk7XG4gIGlmICghdG9rZW4pIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ05vIGF1dGhvcml6YXRpb24gdG9rZW4gcHJvdmlkZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gIH1cblxuICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4pO1xuICBpZiAoIXBheWxvYWQgfHwgIXBheWxvYWQuc3ViKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIG9yIGV4cGlyZWQgdG9rZW4nIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gIH1cblxuICBjb25zdCB1c2VySWQgPSBwYXlsb2FkLnN1YiBhcyBzdHJpbmc7XG5cbiAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcbiAgICBzZWxlY3Q6IHsgcm9sZU5hbWU6IHRydWUsIHBlcm1pc3Npb25zOiB0cnVlIH1cbiAgfSk7XG5cbiAgaWYgKCF1c2VyKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVc2VyIG5vdCBmb3VuZCcgfSwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgfVxuXG4gIC8vIENoZWNrIGZvciBhZG1pbiBhY2Nlc3MgdmlhIHBlcm1pc3Npb25zIGZpcnN0LCB0aGVuIHJvbGVOYW1lXG4gIGNvbnN0IGlzQWRtaW4gPSBoYXNQZXJtaXNzaW9uKHVzZXIucGVybWlzc2lvbnMgfHwgW10sICdhZG1pbjphbGwnKSB8fCB1c2VyLnJvbGVOYW1lID09PSAnYWRtaW4nO1xuXG4gIGlmICghaXNBZG1pbikge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIC0gQWRtaW4gcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDMgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGJhY2t1cERhdGEgPSB7XG4gICAgICB1c2VyczogYXdhaXQgcHJpc21hLnVzZXIuZmluZE1hbnkoKSxcbiAgICAgIHByb2R1Y3RzOiBhd2FpdCBwcmlzbWEucHJvZHVjdC5maW5kTWFueSgpLFxuICAgICAgc2hvcHM6IGF3YWl0IHByaXNtYS5zaG9wLmZpbmRNYW55KCksXG4gICAgICBpbnZlbnRvcnlJdGVtczogYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZmluZE1hbnkoKSxcbiAgICAgIGludm9pY2VzOiBhd2FpdCBwcmlzbWEuaW52b2ljZS5maW5kTWFueSgpLFxuICAgICAgY3VzdG9tZXJzOiBhd2FpdCBwcmlzbWEuY3VzdG9tZXIuZmluZE1hbnkoKSxcbiAgICAgIC8vIEFkZCBtb3JlIHRhYmxlcyBhcyBuZWVkZWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGJhY2t1cERhdGEsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiAnYXR0YWNobWVudDsgZmlsZW5hbWU9YmFja3VwLmpzb24nXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQmFja3VwIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBnZW5lcmF0ZSBiYWNrdXAnIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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