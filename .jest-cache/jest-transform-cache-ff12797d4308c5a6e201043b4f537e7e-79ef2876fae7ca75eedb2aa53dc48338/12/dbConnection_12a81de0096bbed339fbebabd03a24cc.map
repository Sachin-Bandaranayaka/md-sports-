{"version":3,"names":["default","cov_j4dv8cye5","f","s","_default","query","testConnection","transaction","connectionString","b","process","env","DATABASE_URL","pool","_pg","Pool","ssl","NODE_ENV","rejectUnauthorized","undefined","client","connect","console","log","error","release","text","params","start","Date","now","result","duration","rows","rowCount","callback"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/dbConnection.ts"],"sourcesContent":["import { Pool } from 'pg';\n\n// Get database URL from environment variable or use default\nconst connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/mssport';\n\n// Create a pool of connections\nconst pool = new Pool({\n    connectionString,\n    ssl: process.env.NODE_ENV === 'production' ? {\n        rejectUnauthorized: false\n    } : undefined\n});\n\n// Test database connection\nexport const testConnection = async (): Promise<boolean> => {\n    let client;\n    try {\n        client = await pool.connect();\n        console.log('Database connection successful');\n        return true;\n    } catch (error) {\n        console.error('Database connection error:', error);\n        return false;\n    } finally {\n        if (client) client.release();\n    }\n};\n\n// Execute a single query\nexport const query = async (text: string, params?: any[]): Promise<any> => {\n    const start = Date.now();\n    try {\n        const result = await pool.query(text, params);\n        const duration = Date.now() - start;\n        console.log('Executed query', { text, duration, rows: result.rowCount });\n        return result;\n    } catch (error) {\n        console.error('Query error:', error);\n        throw error;\n    }\n};\n\n// Execute multiple queries in a transaction\nexport const transaction = async (callback: (client: any) => Promise<any>): Promise<any> => {\n    const client = await pool.connect();\n    try {\n        await client.query('BEGIN');\n        const result = await callback(client);\n        await client.query('COMMIT');\n        return result;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        console.error('Transaction error:', error);\n        throw error;\n    } finally {\n        client.release();\n    }\n};\n\nexport default {\n    pool,\n    query,\n    transaction,\n    testConnection\n}; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2DAA,OAKE,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WALFC,QAAA;;EA9BaC,KAAK,WAAAA,CAAA;IAAA;IAAAJ,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAALE,KAAA;;EAfAC,cAAc,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAdG,cAAA;;EA6BAC,WAAW,WAAAA,CAAA;IAAA;IAAAN,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAXI,WAAA;;;;;iCA3CQ;AAErB;AACA,MAAMC,gBAAA;AAAA;AAAA,CAAAP,aAAA,GAAAE,CAAA;AAAmB;AAAA,CAAAF,aAAA,GAAAQ,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,YAAY;AAAA;AAAA,CAAAX,aAAA,GAAAQ,CAAA,UAAI;AAErD;AACA,MAAMI,IAAA;AAAA;AAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAO,IAAIW,GAAA,CAAAC,IAAI,CAAC;EAClBP,gBAAA;EACAQ,GAAA,EAAKN,OAAA,CAAQC,GAAG,CAACM,QAAQ,KAAK;EAAA;EAAA,CAAAhB,aAAA,GAAAQ,CAAA,UAAe;IACzCS,kBAAA,EAAoB;EACxB;EAAA;EAAA,CAAAjB,aAAA,GAAAQ,CAAA,UAAIU,SAAA;AACR;AAAA;AAAAlB,aAAA,GAAAE,CAAA;AAGO,MAAMG,cAAA,GAAiB,MAAAA,CAAA;EAAA;EAAAL,aAAA,GAAAC,CAAA;EAC1B,IAAIkB,MAAA;EAAA;EAAAnB,aAAA,GAAAE,CAAA;EACJ,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACAiB,MAAA,GAAS,MAAMP,IAAA,CAAKQ,OAAO;IAAA;IAAApB,aAAA,GAAAE,CAAA;IAC3BmB,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACZ,OAAO;EACX,EAAE,OAAOqB,KAAA,EAAO;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACZmB,OAAA,CAAQE,KAAK,CAAC,8BAA8BA,KAAA;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IAC5C,OAAO;EACX,UAAU;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACN,IAAIiB,MAAA,EAAQ;MAAA;MAAAnB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MAAAiB,MAAA,CAAOK,OAAO;IAAA;IAAA;IAAA;MAAAxB,aAAA,GAAAQ,CAAA;IAAA;EAC9B;AACJ;AAAA;AAAAR,aAAA,GAAAE,CAAA;AAGO,MAAME,KAAA,GAAQ,MAAAA,CAAOqB,IAAA,EAAcC,MAAA;EAAA;EAAA1B,aAAA,GAAAC,CAAA;EACtC,MAAM0B,KAAA;EAAA;EAAA,CAAA3B,aAAA,GAAAE,CAAA,QAAQ0B,IAAA,CAAKC,GAAG;EAAA;EAAA7B,aAAA,GAAAE,CAAA;EACtB,IAAI;IACA,MAAM4B,MAAA;IAAA;IAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAS,MAAMU,IAAA,CAAKR,KAAK,CAACqB,IAAA,EAAMC,MAAA;IACtC,MAAMK,QAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAW0B,IAAA,CAAKC,GAAG,KAAKF,KAAA;IAAA;IAAA3B,aAAA,GAAAE,CAAA;IAC9BmB,OAAA,CAAQC,GAAG,CAAC,kBAAkB;MAAEG,IAAA;MAAMM,QAAA;MAAUC,IAAA,EAAMF,MAAA,CAAOG;IAAS;IAAA;IAAAjC,aAAA,GAAAE,CAAA;IACtE,OAAO4B,MAAA;EACX,EAAE,OAAOP,KAAA,EAAO;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACZmB,OAAA,CAAQE,KAAK,CAAC,gBAAgBA,KAAA;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IAC9B,MAAMqB,KAAA;EACV;AACJ;AAAA;AAAAvB,aAAA,GAAAE,CAAA;AAGO,MAAMI,WAAA,GAAc,MAAO4B,QAAA;EAAA;EAAAlC,aAAA,GAAAC,CAAA;EAC9B,MAAMkB,MAAA;EAAA;EAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAS,MAAMU,IAAA,CAAKQ,OAAO;EAAA;EAAApB,aAAA,GAAAE,CAAA;EACjC,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACA,MAAMiB,MAAA,CAAOf,KAAK,CAAC;IACnB,MAAM0B,MAAA;IAAA;IAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAS,MAAMgC,QAAA,CAASf,MAAA;IAAA;IAAAnB,aAAA,GAAAE,CAAA;IAC9B,MAAMiB,MAAA,CAAOf,KAAK,CAAC;IAAA;IAAAJ,aAAA,GAAAE,CAAA;IACnB,OAAO4B,MAAA;EACX,EAAE,OAAOP,KAAA,EAAO;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACZ,MAAMiB,MAAA,CAAOf,KAAK,CAAC;IAAA;IAAAJ,aAAA,GAAAE,CAAA;IACnBmB,OAAA,CAAQE,KAAK,CAAC,sBAAsBA,KAAA;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACpC,MAAMqB,KAAA;EACV,UAAU;IAAA;IAAAvB,aAAA,GAAAE,CAAA;IACNiB,MAAA,CAAOK,OAAO;EAClB;AACJ;MAEArB,QAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,QAAe;EACXU,IAAA;EACAR,KAAA;EACAE,WAAA;EACAD;AACJ","ignoreList":[]}