716a1ed2ae6cb8afbd89f3cb9fe9dfa9
"use strict";

/* istanbul ignore next */
function cov_7mfqygq4n() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts";
  var hash = "af82cb41bc8b91f9aac4835e5a4a4b7bfac73ee2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "9": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "10": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "11": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "14": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 54
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "17": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "18": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "19": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "20": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "21": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "23": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "25": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 35
        }
      },
      "26": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "28": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "29": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 97,
          column: 10
        }
      },
      "30": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "31": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "32": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "33": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 58
        }
      },
      "34": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "35": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 312,
          column: 5
        }
      },
      "36": {
        start: {
          line: 119,
          column: 22
        },
        end: {
          line: 119,
          column: 54
        }
      },
      "37": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "38": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "39": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 59
        }
      },
      "40": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "41": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "42": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "43": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "44": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "45": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 144
        }
      },
      "46": {
        start: {
          line: 154,
          column: 31
        },
        end: {
          line: 154,
          column: 96
        }
      },
      "47": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "48": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "49": {
        start: {
          line: 162,
          column: 23
        },
        end: {
          line: 162,
          column: 35
        }
      },
      "50": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 40
        }
      },
      "51": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "52": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "53": {
        start: {
          line: 171,
          column: 21
        },
        end: {
          line: 171,
          column: 41
        }
      },
      "54": {
        start: {
          line: 173,
          column: 34
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "55": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "56": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "57": {
        start: {
          line: 186,
          column: 47
        },
        end: {
          line: 186,
          column: 51
        }
      },
      "58": {
        start: {
          line: 188,
          column: 29
        },
        end: {
          line: 188,
          column: 31
        }
      },
      "59": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "60": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 84
        }
      },
      "61": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "62": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 88
        }
      },
      "63": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "64": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "65": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "66": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 76
        }
      },
      "67": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "68": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 209,
          column: 19
        }
      },
      "69": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "70": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 66
        }
      },
      "71": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "72": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 113
        }
      },
      "73": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 272,
          column: 10
        }
      },
      "74": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "75": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "76": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 236,
          column: 19
        }
      },
      "77": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 256,
          column: 17
        }
      },
      "78": {
        start: {
          line: 239,
          column: 38
        },
        end: {
          line: 239,
          column: 74
        }
      },
      "79": {
        start: {
          line: 240,
          column: 37
        },
        end: {
          line: 240,
          column: 72
        }
      },
      "80": {
        start: {
          line: 242,
          column: 34
        },
        end: {
          line: 242,
          column: 82
        }
      },
      "81": {
        start: {
          line: 243,
          column: 38
        },
        end: {
          line: 243,
          column: 68
        }
      },
      "82": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 246,
          column: 21
        }
      },
      "83": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 109
        }
      },
      "84": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 255,
          column: 23
        }
      },
      "85": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "86": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 69
        }
      },
      "87": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 26
        }
      },
      "88": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "89": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "90": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 280,
          column: 18
        }
      },
      "91": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "92": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 293,
          column: 15
        }
      },
      "93": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 59
        }
      },
      "94": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 58
        }
      },
      "95": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "96": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "97": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "98": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 405,
          column: 5
        }
      },
      "99": {
        start: {
          line: 317,
          column: 22
        },
        end: {
          line: 317,
          column: 54
        }
      },
      "100": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "101": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "102": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 325,
          column: 59
        }
      },
      "103": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "104": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 331,
          column: 15
        }
      },
      "105": {
        start: {
          line: 334,
          column: 21
        },
        end: {
          line: 342,
          column: 10
        }
      },
      "106": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "107": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 348,
          column: 15
        }
      },
      "108": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 351,
          column: 144
        }
      },
      "109": {
        start: {
          line: 352,
          column: 31
        },
        end: {
          line: 352,
          column: 96
        }
      },
      "110": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "111": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "112": {
        start: {
          line: 360,
          column: 23
        },
        end: {
          line: 360,
          column: 35
        }
      },
      "113": {
        start: {
          line: 361,
          column: 28
        },
        end: {
          line: 361,
          column: 40
        }
      },
      "114": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "115": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 367,
          column: 15
        }
      },
      "116": {
        start: {
          line: 369,
          column: 26
        },
        end: {
          line: 373,
          column: 10
        }
      },
      "117": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "118": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "119": {
        start: {
          line: 382,
          column: 29
        },
        end: {
          line: 382,
          column: 69
        }
      },
      "120": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 391,
          column: 10
        }
      },
      "121": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 106
        }
      },
      "122": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "123": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 58
        }
      },
      "124": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 18
          }
        },
        loc: {
          start: {
            line: 32,
            column: 40
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 32
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 18
          }
        },
        loc: {
          start: {
            line: 116,
            column: 40
          },
          end: {
            line: 313,
            column: 1
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 221,
            column: 68
          },
          end: {
            line: 221,
            column: 69
          }
        },
        loc: {
          start: {
            line: 221,
            column: 80
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 221
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 275,
            column: 42
          },
          end: {
            line: 275,
            column: 43
          }
        },
        loc: {
          start: {
            line: 275,
            column: 49
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 275
      },
      "9": {
        name: "DELETE",
        decl: {
          start: {
            line: 314,
            column: 15
          },
          end: {
            line: 314,
            column: 21
          }
        },
        loc: {
          start: {
            line: 314,
            column: 43
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 314
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 20
          }
        }, {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 36
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 128,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 128,
            column: 20
          }
        }, {
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 36
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 24
          },
          end: {
            line: 153,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 24
          },
          end: {
            line: 153,
            column: 86
          }
        }, {
          start: {
            line: 153,
            column: 90
          },
          end: {
            line: 153,
            column: 144
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "15": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 20
          }
        }, {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 155,
            column: 39
          }
        }],
        line: 155
      },
      "16": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "17": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "20": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "23": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "24": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "25": {
        loc: {
          start: {
            line: 216,
            column: 38
          },
          end: {
            line: 216,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 68
          },
          end: {
            line: 216,
            column: 105
          }
        }, {
          start: {
            line: 216,
            column: 108
          },
          end: {
            line: 216,
            column: 112
          }
        }],
        line: 216
      },
      "26": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "27": {
        loc: {
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 21
          }
        }, {
          start: {
            line: 230,
            column: 25
          },
          end: {
            line: 230,
            column: 45
          }
        }],
        line: 230
      },
      "28": {
        loc: {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 242,
            column: 66
          }
        }, {
          start: {
            line: 242,
            column: 70
          },
          end: {
            line: 242,
            column: 80
          }
        }],
        line: 242
      },
      "29": {
        loc: {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 246,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 246,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "30": {
        loc: {
          start: {
            line: 244,
            column: 24
          },
          end: {
            line: 244,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 24
          },
          end: {
            line: 244,
            column: 40
          }
        }, {
          start: {
            line: 244,
            column: 44
          },
          end: {
            line: 244,
            column: 59
          }
        }, {
          start: {
            line: 244,
            column: 63
          },
          end: {
            line: 244,
            column: 75
          }
        }, {
          start: {
            line: 244,
            column: 79
          },
          end: {
            line: 244,
            column: 95
          }
        }],
        line: 244
      },
      "31": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "32": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "33": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 43
          }
        }, {
          start: {
            line: 283,
            column: 47
          },
          end: {
            line: 283,
            column: 52
          }
        }],
        line: 283
      },
      "34": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "35": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "36": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "37": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 326,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 326,
            column: 20
          }
        }, {
          start: {
            line: 326,
            column: 24
          },
          end: {
            line: 326,
            column: 36
          }
        }],
        line: 326
      },
      "38": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "39": {
        loc: {
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 351,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 351,
            column: 86
          }
        }, {
          start: {
            line: 351,
            column: 90
          },
          end: {
            line: 351,
            column: 144
          }
        }],
        line: 351
      },
      "40": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "41": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 353,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 353,
            column: 20
          }
        }, {
          start: {
            line: 353,
            column: 24
          },
          end: {
            line: 353,
            column: 39
          }
        }],
        line: 353
      },
      "42": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "43": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\nimport { AuditService } from '@/services/auditService';\n\n// GET /api/quotations/[id] - Get a specific quotation\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        if (!hasPermission(user.permissions, 'sales:view')) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        // No need to check shop access for quotations as they don't have shops assigned\n\n        return NextResponse.json(quotation);\n    } catch (error) {\n        console.error(`Error fetching quotation:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotation' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/quotations/[id] - Update a quotation\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can edit quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to edit quotations' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n\n        // Ensure the quotation exists before attempting to update\n        const existingQuotation = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n        });\n\n        if (!existingQuotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // No need to check shop access for quotations as they don't have shops assigned\n\n        const { items, ...quotationDetails } = body;\n\n        // Prepare data for Quotation update, only including valid fields\n        const dataToUpdate: any = {};\n\n        if (quotationDetails.quotationNumber !== undefined) {\n            dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);\n        }\n        if (quotationDetails.customerId !== undefined) {\n            dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);\n            if (isNaN(dataToUpdate.customerId)) {\n                return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.total !== undefined) {\n            dataToUpdate.total = parseFloat(String(quotationDetails.total));\n            if (isNaN(dataToUpdate.total)) {\n                return NextResponse.json({ error: 'Invalid total format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.status !== undefined) {\n            dataToUpdate.status = String(quotationDetails.status);\n        }\n        if (quotationDetails.expiryDate !== undefined) { // Frontend sends expiryDate\n            dataToUpdate.validUntil = quotationDetails.expiryDate ? new Date(quotationDetails.expiryDate) : null;\n        }\n        // Note: We don't update createdAt. updatedAt is handled by Prisma.\n        // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.\n        // If they need to be stored, the schema needs to be updated.\n\n        const updatedQuotation = await prisma.$transaction(async (tx) => {\n            // Update the quotation\n            await tx.quotation.update({\n                where: {\n                    id: quotationId\n                },\n                data: dataToUpdate // Use the prepared data\n            });\n\n            // Handle items update if provided\n            if (items && Array.isArray(items)) {\n                // Delete existing items\n                await tx.quotationItem.deleteMany({\n                    where: {\n                        quotationId: quotationId\n                    }\n                });\n\n                // Create new items\n                for (const item of items) {\n                    const productId = parseInt(String(item.productId), 10);\n                    const quantity = parseInt(String(item.quantity), 10);\n                    // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'\n                    const price = parseFloat(String(item.unitPrice ?? item.price));\n                    const itemTotal = parseFloat(String(item.total));\n\n                    if (isNaN(productId) || isNaN(quantity) || isNaN(price) || isNaN(itemTotal)) {\n                        throw new Error('Invalid item data: All item numeric fields must be valid numbers.');\n                    }\n\n                    await tx.quotationItem.create({\n                        data: {\n                            quotationId: quotationId,\n                            productId: productId,\n                            quantity: quantity,\n                            price: price, // Ensure this matches schema field name\n                            total: itemTotal\n                        }\n                    });\n                }\n            }\n\n            // Return the updated quotation with items\n            return tx.quotation.findUnique({\n                where: {\n                    id: quotationId\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        const auditService = AuditService.getInstance();\n        const changes: Record<string, { old: any; new: any }> = {};\n        (Object.keys(dataToUpdate) as (keyof typeof existingQuotation)[]).forEach(key => {\n            if (existingQuotation[key] !== updatedQuotation?.[key]) {\n                changes[key] = { old: existingQuotation[key], new: updatedQuotation?.[key] };\n            }\n        });\n\n        if (Object.keys(changes).length > 0 || items) {\n            await auditService.logAction({\n                userId: payload.sub,\n                action: 'UPDATE',\n                entity: 'Quotation',\n                entityId: quotationId,\n                details: { ...changes, itemsUpdated: !!items }\n            });\n        }\n\n        return NextResponse.json(updatedQuotation);\n    } catch (error: any) { // Catch specific error types if needed\n        console.error(`Error updating quotation:`, error);\n        // Provide a more specific error message if it's our custom validation error\n        if (error.message.startsWith('Invalid item data:')) {\n            return NextResponse.json(\n                { error: error.message },\n                { status: 400 }\n            );\n        }\n        return NextResponse.json(\n            { error: 'Failed to update quotation', details: error.message },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/quotations/[id] - Delete a quotation\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can delete quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to delete quotations' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // No need to check shop access for quotations as they don't have shops assigned\n\n        const auditService = AuditService.getInstance();\n        const quotationData = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n            include: { items: true, customer: true }\n        });\n\n        await auditService.softDelete('Quotation', quotationId, quotationData, Number(payload.sub), true);\n        return NextResponse.json({ message: 'Quotation soft deleted successfully' }, { status: 200 });\n\n    } catch (error) {\n        console.error(`Error deleting quotation:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "token", "extractToken", "NextResponse", "json", "error", "status", "payload", "verifyToken", "sub", "user", "prisma", "findUnique", "where", "id", "select", "permissions", "shopId", "hasPermission", "quotationId", "parseInt", "isNaN", "quotation", "include", "customer", "items", "product", "console", "isAdmin", "canManageSales", "body", "existingQuotation", "quotationDetails", "dataToUpdate", "quotationNumber", "undefined", "String", "customerId", "total", "parseFloat", "expiryDate", "validUntil", "Date", "updatedQuotation", "$transaction", "tx", "update", "data", "Array", "isArray", "quotationItem", "deleteMany", "item", "productId", "quantity", "price", "unitPrice", "itemTotal", "Error", "create", "auditService", "AuditService", "getInstance", "changes", "Object", "keys", "forEach", "key", "old", "new", "length", "logAction", "userId", "action", "entity", "entityId", "details", "itemsUpdated", "message", "startsWith", "quotationData", "softDelete", "Number"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "af82cb41bc8b91f9aac4835e5a4a4b7bfac73ee2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mfqygq4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mfqygq4n();
cov_7mfqygq4n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[0]++;
  cov_7mfqygq4n().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_7mfqygq4n().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[1]++;
    cov_7mfqygq4n().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[2]++;
    cov_7mfqygq4n().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_7mfqygq4n().f[3]++;
    cov_7mfqygq4n().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_7mfqygq4n().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_7mfqygq4n().s[8]++, _interop_require_default(require("../../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_7mfqygq4n().s[9]++, require("../../../../lib/auth"));
const _permissions =
/* istanbul ignore next */
(cov_7mfqygq4n().s[10]++, require("../../../../lib/utils/permissions"));
const _auditService =
/* istanbul ignore next */
(cov_7mfqygq4n().s[11]++, require("../../../../services/auditService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[4]++;
  cov_7mfqygq4n().s[12]++;
  return /* istanbul ignore next */(cov_7mfqygq4n().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_7mfqygq4n().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[5]++;
  cov_7mfqygq4n().s[13]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[14]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[15]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[2][0]++;
      cov_7mfqygq4n().s[16]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[2][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[17]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[4][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[4][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[3][0]++;
      cov_7mfqygq4n().s[19]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[3][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[20]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[21]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[5][0]++;
      cov_7mfqygq4n().s[22]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[5][1]++;
    }
    // Check permissions
    cov_7mfqygq4n().s[23]++;
    if (!(0, _permissions.hasPermission)(user.permissions, "sales:view")) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[6][0]++;
      cov_7mfqygq4n().s[24]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[6][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[25]++, await params);
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[26]++, parseInt(id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[27]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[7][0]++;
      cov_7mfqygq4n().s[28]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[7][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[29]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      },
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[30]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[8][0]++;
      cov_7mfqygq4n().s[31]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[8][1]++;
    }
    // No need to check shop access for quotations as they don't have shops assigned
    cov_7mfqygq4n().s[32]++;
    return _server.NextResponse.json(quotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[33]++;
    console.error(`Error fetching quotation:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[34]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotation"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[6]++;
  cov_7mfqygq4n().s[35]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[36]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[37]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[9][0]++;
      cov_7mfqygq4n().s[38]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[9][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[39]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[40]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[11][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[11][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[10][0]++;
      cov_7mfqygq4n().s[41]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[10][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[42]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[43]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[12][0]++;
      cov_7mfqygq4n().s[44]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[12][1]++;
    }
    // Check permissions - only admin or users with sales:manage can edit quotations
    const isAdmin =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[45]++,
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[13][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[13][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    const canManageSales =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[46]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[15][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[15][1]++, !canManageSales)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[14][0]++;
      cov_7mfqygq4n().s[48]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions to edit quotations"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[14][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[49]++, await params);
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[50]++, parseInt(id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[51]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[16][0]++;
      cov_7mfqygq4n().s[52]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[16][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[53]++, await request.json());
    // Ensure the quotation exists before attempting to update
    const existingQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[54]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[55]++;
    if (!existingQuotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[17][0]++;
      cov_7mfqygq4n().s[56]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[17][1]++;
    }
    // No need to check shop access for quotations as they don't have shops assigned
    const {
      items,
      ...quotationDetails
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[57]++, body);
    // Prepare data for Quotation update, only including valid fields
    const dataToUpdate =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[58]++, {});
    /* istanbul ignore next */
    cov_7mfqygq4n().s[59]++;
    if (quotationDetails.quotationNumber !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[18][0]++;
      cov_7mfqygq4n().s[60]++;
      dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[18][1]++;
    }
    cov_7mfqygq4n().s[61]++;
    if (quotationDetails.customerId !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[19][0]++;
      cov_7mfqygq4n().s[62]++;
      dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);
      /* istanbul ignore next */
      cov_7mfqygq4n().s[63]++;
      if (isNaN(dataToUpdate.customerId)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[20][0]++;
        cov_7mfqygq4n().s[64]++;
        return _server.NextResponse.json({
          error: "Invalid customerId format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[19][1]++;
    }
    cov_7mfqygq4n().s[65]++;
    if (quotationDetails.total !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[21][0]++;
      cov_7mfqygq4n().s[66]++;
      dataToUpdate.total = parseFloat(String(quotationDetails.total));
      /* istanbul ignore next */
      cov_7mfqygq4n().s[67]++;
      if (isNaN(dataToUpdate.total)) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[22][0]++;
        cov_7mfqygq4n().s[68]++;
        return _server.NextResponse.json({
          error: "Invalid total format"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[22][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[21][1]++;
    }
    cov_7mfqygq4n().s[69]++;
    if (quotationDetails.status !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[23][0]++;
      cov_7mfqygq4n().s[70]++;
      dataToUpdate.status = String(quotationDetails.status);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[23][1]++;
    }
    cov_7mfqygq4n().s[71]++;
    if (quotationDetails.expiryDate !== undefined) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[24][0]++;
      cov_7mfqygq4n().s[72]++;
      dataToUpdate.validUntil = quotationDetails.expiryDate ?
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[25][0]++, new Date(quotationDetails.expiryDate)) :
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[25][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[24][1]++;
    }
    // Note: We don't update createdAt. updatedAt is handled by Prisma.
    // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.
    // If they need to be stored, the schema needs to be updated.
    const updatedQuotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[73]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[7]++;
      cov_7mfqygq4n().s[74]++;
      // Update the quotation
      await tx.quotation.update({
        where: {
          id: quotationId
        },
        data: dataToUpdate // Use the prepared data
      });
      // Handle items update if provided
      /* istanbul ignore next */
      cov_7mfqygq4n().s[75]++;
      if (
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[27][0]++, items) &&
      /* istanbul ignore next */
      (cov_7mfqygq4n().b[27][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[26][0]++;
        cov_7mfqygq4n().s[76]++;
        // Delete existing items
        await tx.quotationItem.deleteMany({
          where: {
            quotationId: quotationId
          }
        });
        // Create new items
        /* istanbul ignore next */
        cov_7mfqygq4n().s[77]++;
        for (const item of items) {
          const productId =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[78]++, parseInt(String(item.productId), 10));
          const quantity =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[79]++, parseInt(String(item.quantity), 10));
          // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'
          const price =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[80]++, parseFloat(String(
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[28][0]++, item.unitPrice) ??
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[28][1]++, item.price))));
          const itemTotal =
          /* istanbul ignore next */
          (cov_7mfqygq4n().s[81]++, parseFloat(String(item.total)));
          /* istanbul ignore next */
          cov_7mfqygq4n().s[82]++;
          if (
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[30][0]++, isNaN(productId)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[30][1]++, isNaN(quantity)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[30][2]++, isNaN(price)) ||
          /* istanbul ignore next */
          (cov_7mfqygq4n().b[30][3]++, isNaN(itemTotal))) {
            /* istanbul ignore next */
            cov_7mfqygq4n().b[29][0]++;
            cov_7mfqygq4n().s[83]++;
            throw new Error("Invalid item data: All item numeric fields must be valid numbers.");
          } else
          /* istanbul ignore next */
          {
            cov_7mfqygq4n().b[29][1]++;
          }
          cov_7mfqygq4n().s[84]++;
          await tx.quotationItem.create({
            data: {
              quotationId: quotationId,
              productId: productId,
              quantity: quantity,
              price: price,
              total: itemTotal
            }
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[26][1]++;
      }
      // Return the updated quotation with items
      cov_7mfqygq4n().s[85]++;
      return tx.quotation.findUnique({
        where: {
          id: quotationId
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    const auditService =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[86]++, _auditService.AuditService.getInstance());
    const changes =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[87]++, {});
    /* istanbul ignore next */
    cov_7mfqygq4n().s[88]++;
    Object.keys(dataToUpdate).forEach(key => {
      /* istanbul ignore next */
      cov_7mfqygq4n().f[8]++;
      cov_7mfqygq4n().s[89]++;
      if (existingQuotation[key] !== updatedQuotation?.[key]) {
        /* istanbul ignore next */
        cov_7mfqygq4n().b[31][0]++;
        cov_7mfqygq4n().s[90]++;
        changes[key] = {
          old: existingQuotation[key],
          new: updatedQuotation?.[key]
        };
      } else
      /* istanbul ignore next */
      {
        cov_7mfqygq4n().b[31][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mfqygq4n().s[91]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[33][0]++, Object.keys(changes).length > 0) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[33][1]++, items)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[32][0]++;
      cov_7mfqygq4n().s[92]++;
      await auditService.logAction({
        userId: payload.sub,
        action: "UPDATE",
        entity: "Quotation",
        entityId: quotationId,
        details: {
          ...changes,
          itemsUpdated: !!items
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[32][1]++;
    }
    cov_7mfqygq4n().s[93]++;
    return _server.NextResponse.json(updatedQuotation);
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[94]++;
    console.error(`Error updating quotation:`, error);
    // Provide a more specific error message if it's our custom validation error
    /* istanbul ignore next */
    cov_7mfqygq4n().s[95]++;
    if (error.message.startsWith("Invalid item data:")) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[34][0]++;
      cov_7mfqygq4n().s[96]++;
      return _server.NextResponse.json({
        error: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[34][1]++;
    }
    cov_7mfqygq4n().s[97]++;
    return _server.NextResponse.json({
      error: "Failed to update quotation",
      details: error.message
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7mfqygq4n().f[9]++;
  cov_7mfqygq4n().s[98]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[99]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[100]++;
    if (!token) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[35][0]++;
      cov_7mfqygq4n().s[101]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[35][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[102]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[103]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[37][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[37][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[36][0]++;
      cov_7mfqygq4n().s[104]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[36][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[105]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[106]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[38][0]++;
      cov_7mfqygq4n().s[107]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[38][1]++;
    }
    // Check permissions - only admin or users with sales:manage can delete quotations
    const isAdmin =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[108]++,
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[39][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[39][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    const canManageSales =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[109]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[110]++;
    if (
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[41][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_7mfqygq4n().b[41][1]++, !canManageSales)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[40][0]++;
      cov_7mfqygq4n().s[111]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions to delete quotations"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[40][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[112]++, await params);
    const quotationId =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[113]++, parseInt(id));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[114]++;
    if (isNaN(quotationId)) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[42][0]++;
      cov_7mfqygq4n().s[115]++;
      return _server.NextResponse.json({
        error: "Invalid quotation ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[42][1]++;
    }
    const quotation =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[116]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[117]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_7mfqygq4n().b[43][0]++;
      cov_7mfqygq4n().s[118]++;
      return _server.NextResponse.json({
        error: "Quotation not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mfqygq4n().b[43][1]++;
    }
    // No need to check shop access for quotations as they don't have shops assigned
    const auditService =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[119]++, _auditService.AuditService.getInstance());
    const quotationData =
    /* istanbul ignore next */
    (cov_7mfqygq4n().s[120]++, await _prisma.default.quotation.findUnique({
      where: {
        id: quotationId
      },
      include: {
        items: true,
        customer: true
      }
    }));
    /* istanbul ignore next */
    cov_7mfqygq4n().s[121]++;
    await auditService.softDelete("Quotation", quotationId, quotationData, Number(payload.sub), true);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[122]++;
    return _server.NextResponse.json({
      message: "Quotation soft deleted successfully"
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7mfqygq4n().s[123]++;
    console.error(`Error deleting quotation:`, error);
    /* istanbul ignore next */
    cov_7mfqygq4n().s[124]++;
    return _server.NextResponse.json({
      error: "Failed to delete quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,