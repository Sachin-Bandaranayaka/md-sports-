{"version":3,"names":["DELETE","cov_7mfqygq4n","f","s","GET","PUT","request","params","token","_auth","extractToken","b","_server","NextResponse","json","error","status","payload","verifyToken","sub","user","_prisma","default","findUnique","where","id","select","permissions","shopId","_permissions","hasPermission","quotationId","parseInt","isNaN","quotation","include","customer","items","product","console","isAdmin","canManageSales","body","existingQuotation","quotationDetails","dataToUpdate","quotationNumber","undefined","String","customerId","total","parseFloat","expiryDate","validUntil","Date","updatedQuotation","$transaction","tx","update","data","Array","isArray","quotationItem","deleteMany","item","productId","quantity","price","unitPrice","itemTotal","Error","create","auditService","_auditService","AuditService","getInstance","changes","Object","keys","forEach","key","old","new","length","logAction","userId","action","entity","entityId","details","itemsUpdated","message","startsWith","quotationData","softDelete","Number"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/quotations/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\nimport { AuditService } from '@/services/auditService';\n\n// GET /api/quotations/[id] - Get a specific quotation\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        if (!hasPermission(user.permissions, 'sales:view')) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n\n        // No need to check shop access for quotations as they don't have shops assigned\n\n        return NextResponse.json(quotation);\n    } catch (error) {\n        console.error(`Error fetching quotation:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotation' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/quotations/[id] - Update a quotation\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can edit quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to edit quotations' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n\n        // Ensure the quotation exists before attempting to update\n        const existingQuotation = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n        });\n\n        if (!existingQuotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // No need to check shop access for quotations as they don't have shops assigned\n\n        const { items, ...quotationDetails } = body;\n\n        // Prepare data for Quotation update, only including valid fields\n        const dataToUpdate: any = {};\n\n        if (quotationDetails.quotationNumber !== undefined) {\n            dataToUpdate.quotationNumber = String(quotationDetails.quotationNumber);\n        }\n        if (quotationDetails.customerId !== undefined) {\n            dataToUpdate.customerId = parseInt(String(quotationDetails.customerId), 10);\n            if (isNaN(dataToUpdate.customerId)) {\n                return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.total !== undefined) {\n            dataToUpdate.total = parseFloat(String(quotationDetails.total));\n            if (isNaN(dataToUpdate.total)) {\n                return NextResponse.json({ error: 'Invalid total format' }, { status: 400 });\n            }\n        }\n        if (quotationDetails.status !== undefined) {\n            dataToUpdate.status = String(quotationDetails.status);\n        }\n        if (quotationDetails.expiryDate !== undefined) { // Frontend sends expiryDate\n            dataToUpdate.validUntil = quotationDetails.expiryDate ? new Date(quotationDetails.expiryDate) : null;\n        }\n        // Note: We don't update createdAt. updatedAt is handled by Prisma.\n        // Fields like notes, subtotal, tax, discount are not in the current Quotation Prisma schema.\n        // If they need to be stored, the schema needs to be updated.\n\n        const updatedQuotation = await prisma.$transaction(async (tx) => {\n            // Update the quotation\n            await tx.quotation.update({\n                where: {\n                    id: quotationId\n                },\n                data: dataToUpdate // Use the prepared data\n            });\n\n            // Handle items update if provided\n            if (items && Array.isArray(items)) {\n                // Delete existing items\n                await tx.quotationItem.deleteMany({\n                    where: {\n                        quotationId: quotationId\n                    }\n                });\n\n                // Create new items\n                for (const item of items) {\n                    const productId = parseInt(String(item.productId), 10);\n                    const quantity = parseInt(String(item.quantity), 10);\n                    // Prisma schema uses 'price', frontend might send 'unitPrice' or 'price'\n                    const price = parseFloat(String(item.unitPrice ?? item.price));\n                    const itemTotal = parseFloat(String(item.total));\n\n                    if (isNaN(productId) || isNaN(quantity) || isNaN(price) || isNaN(itemTotal)) {\n                        throw new Error('Invalid item data: All item numeric fields must be valid numbers.');\n                    }\n\n                    await tx.quotationItem.create({\n                        data: {\n                            quotationId: quotationId,\n                            productId: productId,\n                            quantity: quantity,\n                            price: price, // Ensure this matches schema field name\n                            total: itemTotal\n                        }\n                    });\n                }\n            }\n\n            // Return the updated quotation with items\n            return tx.quotation.findUnique({\n                where: {\n                    id: quotationId\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        const auditService = AuditService.getInstance();\n        const changes: Record<string, { old: any; new: any }> = {};\n        (Object.keys(dataToUpdate) as (keyof typeof existingQuotation)[]).forEach(key => {\n            if (existingQuotation[key] !== updatedQuotation?.[key]) {\n                changes[key] = { old: existingQuotation[key], new: updatedQuotation?.[key] };\n            }\n        });\n\n        if (Object.keys(changes).length > 0 || items) {\n            await auditService.logAction({\n                userId: payload.sub,\n                action: 'UPDATE',\n                entity: 'Quotation',\n                entityId: quotationId,\n                details: { ...changes, itemsUpdated: !!items }\n            });\n        }\n\n        return NextResponse.json(updatedQuotation);\n    } catch (error: any) { // Catch specific error types if needed\n        console.error(`Error updating quotation:`, error);\n        // Provide a more specific error message if it's our custom validation error\n        if (error.message.startsWith('Invalid item data:')) {\n            return NextResponse.json(\n                { error: error.message },\n                { status: 400 }\n            );\n        }\n        return NextResponse.json(\n            { error: 'Failed to update quotation', details: error.message },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/quotations/[id] - Delete a quotation\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions - only admin or users with sales:manage can delete quotations\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        \n        if (!isAdmin && !canManageSales) {\n            return NextResponse.json({ error: 'Insufficient permissions to delete quotations' }, { status: 403 });\n        }\n\n        const { id } = await params;\n        const quotationId = parseInt(id);\n\n        if (isNaN(quotationId)) {\n            return NextResponse.json(\n                { error: 'Invalid quotation ID' },\n                { status: 400 }\n            );\n        }\n\n        const quotation = await prisma.quotation.findUnique({\n            where: {\n                id: quotationId\n            }\n        });\n\n        if (!quotation) {\n            return NextResponse.json(\n                { error: 'Quotation not found' },\n                { status: 404 }\n            );\n        }\n        \n        // No need to check shop access for quotations as they don't have shops assigned\n\n        const auditService = AuditService.getInstance();\n        const quotationData = await prisma.quotation.findUnique({\n            where: { id: quotationId },\n            include: { items: true, customer: true }\n        });\n\n        await auditService.softDelete('Quotation', quotationId, quotationData, Number(payload.sub), true);\n        return NextResponse.json({ message: 'Quotation soft deleted successfully' }, { status: 200 });\n\n    } catch (error) {\n        console.error(`Error deleting quotation:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete quotation' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}