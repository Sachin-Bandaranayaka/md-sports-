{"version":3,"names":["cov_bk0woji0p","actualCoverage","s","require","config","path","Sequelize","DataTypes","bcrypt","console","log","databaseUrl","process","env","DATABASE_URL","b","error","exit","sequelize","dialect","dialectOptions","ssl","rejectUnauthorized","logging","initAuthTables","f","authenticate","Role","define","id","type","INTEGER","autoIncrement","primaryKey","name","STRING","allowNull","unique","description","isActive","BOOLEAN","defaultValue","tableName","timestamps","Permission","module","User","username","passwordHash","fullName","email","phone","roleId","references","model","key","shopId","RolePermission","belongsToMany","through","foreignKey","belongsTo","hasMany","sync","force","adminRole","create","managerRole","cashierRole","permissions","bulkCreate","map","permission","permissionId","managerPermissions","filter","p","includes","cashierPermissions","adminPassword","hash","close"],"sources":["/Users/sachin/Documents/md-sports-/src/scripts/init-auth-tables.js"],"sourcesContent":["require('dotenv').config({ path: '.env.local' });\nconst { Sequelize, DataTypes } = require('sequelize');\nconst bcrypt = require('bcryptjs');\n\nconsole.log('Initializing authentication tables...');\n\n// Get connection string from environment variables\nconst databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  console.error('DATABASE_URL environment variable not found');\n  process.exit(1);\n}\n\n// Create Sequelize instance\nconst sequelize = new Sequelize(databaseUrl, {\n  dialect: 'postgres',\n  dialectOptions: {\n    ssl: {\n      require: true,\n      rejectUnauthorized: false\n    }\n  },\n  logging: console.log\n});\n\nasync function initAuthTables() {\n  try {\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n\n    // Define models\n    // Role model\n    const Role = sequelize.define('role', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      name: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      description: {\n        type: DataTypes.STRING(200),\n        allowNull: true\n      },\n      isActive: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true\n      }\n    }, {\n      tableName: 'roles',\n      timestamps: true\n    });\n\n    // Permission model\n    const Permission = sequelize.define('permission', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      name: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      description: {\n        type: DataTypes.STRING(200),\n        allowNull: true\n      },\n      module: {\n        type: DataTypes.STRING(50),\n        allowNull: false\n      }\n    }, {\n      tableName: 'permissions',\n      timestamps: true\n    });\n\n    // User model\n    const User = sequelize.define('user', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      username: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      passwordHash: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      fullName: {\n        type: DataTypes.STRING(100),\n        allowNull: false\n      },\n      email: {\n        type: DataTypes.STRING(100),\n        allowNull: false,\n        unique: true\n      },\n      phone: {\n        type: DataTypes.STRING(20),\n        allowNull: true\n      },\n      isActive: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true\n      },\n      roleId: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'roles',\n          key: 'id'\n        }\n      },\n      shopId: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'shops',\n          key: 'id'\n        }\n      }\n    }, {\n      tableName: 'users',\n      timestamps: true\n    });\n\n    // Define the role_permission join table\n    const RolePermission = sequelize.define('role_permission', {}, {\n      tableName: 'role_permissions',\n      timestamps: false\n    });\n\n    // Set up associations\n    Role.belongsToMany(Permission, { through: RolePermission, foreignKey: 'roleId' });\n    Permission.belongsToMany(Role, { through: RolePermission, foreignKey: 'permissionId' });\n    \n    User.belongsTo(Role, { foreignKey: 'roleId' });\n    Role.hasMany(User, { foreignKey: 'roleId' });\n\n    // Sync models with database\n    console.log('Syncing models with database...');\n    await Role.sync({ force: true });\n    await Permission.sync({ force: true });\n    await RolePermission.sync({ force: true });\n    await User.sync({ force: true });\n\n    // Create default roles\n    console.log('Creating default roles...');\n    const adminRole = await Role.create({\n      name: 'Admin',\n      description: 'Administrator with full access'\n    });\n\n    const managerRole = await Role.create({\n      name: 'Shop Manager',\n      description: 'Manager of a specific shop'\n    });\n\n    const cashierRole = await Role.create({\n      name: 'Cashier',\n      description: 'Processes sales and invoices'\n    });\n\n    // Create permissions\n    console.log('Creating permissions...');\n    const permissions = await Permission.bulkCreate([\n      {\n        name: 'inventory:view',\n        description: 'View inventory items',\n        module: 'inventory'\n      },\n      {\n        name: 'inventory:manage',\n        description: 'Create, update, delete inventory items',\n        module: 'inventory'\n      },\n      {\n        name: 'sales:view',\n        description: 'View sales data and transactions',\n        module: 'sales'\n      },\n      {\n        name: 'sales:manage',\n        description: 'Full sales management access',\n        module: 'sales'\n      },\n      {\n        name: 'invoice:create',\n        description: 'Create new invoices',\n        module: 'invoice'\n      },\n      {\n        name: 'user:manage',\n        description: 'Manage user accounts',\n        module: 'user'\n      },\n      {\n        name: 'shop:manage',\n        description: 'Manage shop details',\n        module: 'shop'\n      },\n      {\n        name: 'report:view',\n        description: 'View reports',\n        module: 'report'\n      }\n    ]);\n\n    // Assign permissions to roles\n    console.log('Assigning permissions to roles...');\n    \n    // Admin gets all permissions\n    await RolePermission.bulkCreate(permissions.map(permission => ({\n      roleId: adminRole.id,\n      permissionId: permission.id\n    })));\n    \n    // Manager permissions\n    const managerPermissions = permissions.filter(p => \n      ['inventory:view', 'inventory:manage', 'invoice:create', 'report:view'].includes(p.name));\n    \n    await RolePermission.bulkCreate(managerPermissions.map(permission => ({\n      roleId: managerRole.id,\n      permissionId: permission.id\n    })));\n    \n    // Cashier permissions\n    const cashierPermissions = permissions.filter(p => \n      ['inventory:view', 'invoice:create'].includes(p.name));\n    \n    await RolePermission.bulkCreate(cashierPermissions.map(permission => ({\n      roleId: cashierRole.id,\n      permissionId: permission.id\n    })));\n\n    // Create admin user\n    console.log('Creating admin user...');\n    const adminPassword = await bcrypt.hash('admin123', 12);\n    await User.create({\n      username: 'admin',\n      passwordHash: adminPassword,\n      fullName: 'System Administrator',\n      email: 'admin@mssport.lk',\n      phone: '+94123456789',\n      roleId: adminRole.id\n    });\n\n    console.log('Authentication tables initialized successfully!');\n  } catch (error) {\n    console.error('Error initializing authentication tables:', error);\n  } finally {\n    await sequelize.close();\n  }\n}\n\ninitAuthTables();"],"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","ignoreList":[]}