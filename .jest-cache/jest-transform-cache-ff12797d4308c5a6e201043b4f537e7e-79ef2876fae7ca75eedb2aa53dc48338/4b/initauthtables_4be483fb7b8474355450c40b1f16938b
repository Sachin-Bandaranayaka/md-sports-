ace67e3b56727355b2afed660d120013
"use strict";

/* istanbul ignore next */
function cov_bk0woji0p() {
  var path = "/Users/sachin/Documents/md-sports-/src/scripts/init-auth-tables.js";
  var hash = "175c01a5479e823bb90fcf5eb12f3c6d9eb61d4d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/scripts/init-auth-tables.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 33
        },
        end: {
          line: 5,
          column: 53
        }
      },
      "2": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "3": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "4": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "5": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "6": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 65
        }
      },
      "7": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "8": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "9": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 78
        }
      },
      "12": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "13": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "14": {
        start: {
          line: 80,
          column: 21
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "15": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "16": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "17": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "18": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 11
        }
      },
      "19": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "20": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 55
        }
      },
      "21": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "22": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "23": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "24": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "25": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 49
        }
      },
      "26": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "27": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "28": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 180,
          column: 10
        }
      },
      "29": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 47
        }
      },
      "30": {
        start: {
          line: 183,
          column: 28
        },
        end: {
          line: 224,
          column: 10
        }
      },
      "31": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 57
        }
      },
      "32": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 231,
          column: 17
        }
      },
      "33": {
        start: {
          line: 228,
          column: 71
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "34": {
        start: {
          line: 233,
          column: 35
        },
        end: {
          line: 238,
          column: 31
        }
      },
      "35": {
        start: {
          line: 233,
          column: 59
        },
        end: {
          line: 238,
          column: 30
        }
      },
      "36": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "37": {
        start: {
          line: 239,
          column: 78
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "38": {
        start: {
          line: 244,
          column: 35
        },
        end: {
          line: 247,
          column: 31
        }
      },
      "39": {
        start: {
          line: 244,
          column: 59
        },
        end: {
          line: 247,
          column: 30
        }
      },
      "40": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "41": {
        start: {
          line: 248,
          column: 78
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "42": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 46
        }
      },
      "43": {
        start: {
          line: 254,
          column: 30
        },
        end: {
          line: 254,
          column: 63
        }
      },
      "44": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "45": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 71
        }
      },
      "46": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 74
        }
      },
      "47": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 32
        }
      },
      "48": {
        start: {
          line: 270,
          column: 0
        },
        end: {
          line: 270,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "initAuthTables",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 29
          }
        },
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 269,
            column: 1
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 228,
            column: 56
          },
          end: {
            line: 228,
            column: 57
          }
        },
        loc: {
          start: {
            line: 228,
            column: 71
          },
          end: {
            line: 231,
            column: 13
          }
        },
        line: 228
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 233,
            column: 54
          },
          end: {
            line: 233,
            column: 55
          }
        },
        loc: {
          start: {
            line: 233,
            column: 59
          },
          end: {
            line: 238,
            column: 30
          }
        },
        line: 233
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 239,
            column: 63
          },
          end: {
            line: 239,
            column: 64
          }
        },
        loc: {
          start: {
            line: 239,
            column: 78
          },
          end: {
            line: 242,
            column: 13
          }
        },
        line: 239
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 244,
            column: 54
          },
          end: {
            line: 244,
            column: 55
          }
        },
        loc: {
          start: {
            line: 244,
            column: 59
          },
          end: {
            line: 247,
            column: 30
          }
        },
        line: 244
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 248,
            column: 63
          },
          end: {
            line: 248,
            column: 64
          }
        },
        loc: {
          start: {
            line: 248,
            column: 78
          },
          end: {
            line: 251,
            column: 13
          }
        },
        line: 248
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 0
          },
          end: {
            line: 13,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 0
          },
          end: {
            line: 13,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/scripts/init-auth-tables.js"],
      sourcesContent: ["require('dotenv').config({ path: '.env.local' });\nconst { Sequelize, DataTypes } = require('sequelize');\nconst bcrypt = require('bcryptjs');\n\nconsole.log('Initializing authentication tables...');\n\n// Get connection string from environment variables\nconst databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  console.error('DATABASE_URL environment variable not found');\n  process.exit(1);\n}\n\n// Create Sequelize instance\nconst sequelize = new Sequelize(databaseUrl, {\n  dialect: 'postgres',\n  dialectOptions: {\n    ssl: {\n      require: true,\n      rejectUnauthorized: false\n    }\n  },\n  logging: console.log\n});\n\nasync function initAuthTables() {\n  try {\n    await sequelize.authenticate();\n    console.log('Database connection has been established successfully.');\n\n    // Define models\n    // Role model\n    const Role = sequelize.define('role', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      name: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      description: {\n        type: DataTypes.STRING(200),\n        allowNull: true\n      },\n      isActive: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true\n      }\n    }, {\n      tableName: 'roles',\n      timestamps: true\n    });\n\n    // Permission model\n    const Permission = sequelize.define('permission', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      name: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      description: {\n        type: DataTypes.STRING(200),\n        allowNull: true\n      },\n      module: {\n        type: DataTypes.STRING(50),\n        allowNull: false\n      }\n    }, {\n      tableName: 'permissions',\n      timestamps: true\n    });\n\n    // User model\n    const User = sequelize.define('user', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n      },\n      username: {\n        type: DataTypes.STRING(50),\n        allowNull: false,\n        unique: true\n      },\n      passwordHash: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      fullName: {\n        type: DataTypes.STRING(100),\n        allowNull: false\n      },\n      email: {\n        type: DataTypes.STRING(100),\n        allowNull: false,\n        unique: true\n      },\n      phone: {\n        type: DataTypes.STRING(20),\n        allowNull: true\n      },\n      isActive: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true\n      },\n      roleId: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'roles',\n          key: 'id'\n        }\n      },\n      shopId: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'shops',\n          key: 'id'\n        }\n      }\n    }, {\n      tableName: 'users',\n      timestamps: true\n    });\n\n    // Define the role_permission join table\n    const RolePermission = sequelize.define('role_permission', {}, {\n      tableName: 'role_permissions',\n      timestamps: false\n    });\n\n    // Set up associations\n    Role.belongsToMany(Permission, { through: RolePermission, foreignKey: 'roleId' });\n    Permission.belongsToMany(Role, { through: RolePermission, foreignKey: 'permissionId' });\n    \n    User.belongsTo(Role, { foreignKey: 'roleId' });\n    Role.hasMany(User, { foreignKey: 'roleId' });\n\n    // Sync models with database\n    console.log('Syncing models with database...');\n    await Role.sync({ force: true });\n    await Permission.sync({ force: true });\n    await RolePermission.sync({ force: true });\n    await User.sync({ force: true });\n\n    // Create default roles\n    console.log('Creating default roles...');\n    const adminRole = await Role.create({\n      name: 'Admin',\n      description: 'Administrator with full access'\n    });\n\n    const managerRole = await Role.create({\n      name: 'Shop Manager',\n      description: 'Manager of a specific shop'\n    });\n\n    const cashierRole = await Role.create({\n      name: 'Cashier',\n      description: 'Processes sales and invoices'\n    });\n\n    // Create permissions\n    console.log('Creating permissions...');\n    const permissions = await Permission.bulkCreate([\n      {\n        name: 'inventory:view',\n        description: 'View inventory items',\n        module: 'inventory'\n      },\n      {\n        name: 'inventory:manage',\n        description: 'Create, update, delete inventory items',\n        module: 'inventory'\n      },\n      {\n        name: 'sales:view',\n        description: 'View sales data and transactions',\n        module: 'sales'\n      },\n      {\n        name: 'sales:manage',\n        description: 'Full sales management access',\n        module: 'sales'\n      },\n      {\n        name: 'invoice:create',\n        description: 'Create new invoices',\n        module: 'invoice'\n      },\n      {\n        name: 'user:manage',\n        description: 'Manage user accounts',\n        module: 'user'\n      },\n      {\n        name: 'shop:manage',\n        description: 'Manage shop details',\n        module: 'shop'\n      },\n      {\n        name: 'report:view',\n        description: 'View reports',\n        module: 'report'\n      }\n    ]);\n\n    // Assign permissions to roles\n    console.log('Assigning permissions to roles...');\n    \n    // Admin gets all permissions\n    await RolePermission.bulkCreate(permissions.map(permission => ({\n      roleId: adminRole.id,\n      permissionId: permission.id\n    })));\n    \n    // Manager permissions\n    const managerPermissions = permissions.filter(p => \n      ['inventory:view', 'inventory:manage', 'invoice:create', 'report:view'].includes(p.name));\n    \n    await RolePermission.bulkCreate(managerPermissions.map(permission => ({\n      roleId: managerRole.id,\n      permissionId: permission.id\n    })));\n    \n    // Cashier permissions\n    const cashierPermissions = permissions.filter(p => \n      ['inventory:view', 'invoice:create'].includes(p.name));\n    \n    await RolePermission.bulkCreate(cashierPermissions.map(permission => ({\n      roleId: cashierRole.id,\n      permissionId: permission.id\n    })));\n\n    // Create admin user\n    console.log('Creating admin user...');\n    const adminPassword = await bcrypt.hash('admin123', 12);\n    await User.create({\n      username: 'admin',\n      passwordHash: adminPassword,\n      fullName: 'System Administrator',\n      email: 'admin@mssport.lk',\n      phone: '+94123456789',\n      roleId: adminRole.id\n    });\n\n    console.log('Authentication tables initialized successfully!');\n  } catch (error) {\n    console.error('Error initializing authentication tables:', error);\n  } finally {\n    await sequelize.close();\n  }\n}\n\ninitAuthTables();"],
      names: ["require", "config", "path", "Sequelize", "DataTypes", "bcrypt", "console", "log", "databaseUrl", "process", "env", "DATABASE_URL", "error", "exit", "sequelize", "dialect", "dialectOptions", "ssl", "rejectUnauthorized", "logging", "initAuthTables", "authenticate", "Role", "define", "id", "type", "INTEGER", "autoIncrement", "primaryKey", "name", "STRING", "allowNull", "unique", "description", "isActive", "BOOLEAN", "defaultValue", "tableName", "timestamps", "Permission", "module", "User", "username", "passwordHash", "fullName", "email", "phone", "roleId", "references", "model", "key", "shopId", "RolePermission", "belongsToMany", "through", "foreignKey", "belongsTo", "hasMany", "sync", "force", "adminRole", "create", "managerRole", "cashierRole", "permissions", "bulkCreate", "map", "permission", "permissionId", "managerPermissions", "filter", "p", "includes", "cashierPermissions", "adminPassword", "hash", "close"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "175c01a5479e823bb90fcf5eb12f3c6d9eb61d4d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bk0woji0p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bk0woji0p();
cov_bk0woji0p().s[0]++;
require("dotenv").config({
  path: ".env.local"
});
const {
  Sequelize,
  DataTypes
} =
/* istanbul ignore next */
(cov_bk0woji0p().s[1]++, require("sequelize"));
const bcrypt =
/* istanbul ignore next */
(cov_bk0woji0p().s[2]++, require("bcryptjs"));
/* istanbul ignore next */
cov_bk0woji0p().s[3]++;
console.log("Initializing authentication tables...");
// Get connection string from environment variables
const databaseUrl =
/* istanbul ignore next */
(cov_bk0woji0p().s[4]++, process.env.DATABASE_URL);
/* istanbul ignore next */
cov_bk0woji0p().s[5]++;
if (!databaseUrl) {
  /* istanbul ignore next */
  cov_bk0woji0p().b[0][0]++;
  cov_bk0woji0p().s[6]++;
  console.error("DATABASE_URL environment variable not found");
  /* istanbul ignore next */
  cov_bk0woji0p().s[7]++;
  process.exit(1);
} else
/* istanbul ignore next */
{
  cov_bk0woji0p().b[0][1]++;
}
// Create Sequelize instance
const sequelize =
/* istanbul ignore next */
(cov_bk0woji0p().s[8]++, new Sequelize(databaseUrl, {
  dialect: "postgres",
  dialectOptions: {
    ssl: {
      require: true,
      rejectUnauthorized: false
    }
  },
  logging: console.log
}));
async function initAuthTables() {
  /* istanbul ignore next */
  cov_bk0woji0p().f[0]++;
  cov_bk0woji0p().s[9]++;
  try {
    /* istanbul ignore next */
    cov_bk0woji0p().s[10]++;
    await sequelize.authenticate();
    /* istanbul ignore next */
    cov_bk0woji0p().s[11]++;
    console.log("Database connection has been established successfully.");
    // Define models
    // Role model
    const Role =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[12]++, sequelize.define("role", {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
      },
      name: {
        type: DataTypes.STRING(50),
        allowNull: false,
        unique: true
      },
      description: {
        type: DataTypes.STRING(200),
        allowNull: true
      },
      isActive: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: true
      }
    }, {
      tableName: "roles",
      timestamps: true
    }));
    // Permission model
    const Permission =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[13]++, sequelize.define("permission", {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
      },
      name: {
        type: DataTypes.STRING(50),
        allowNull: false,
        unique: true
      },
      description: {
        type: DataTypes.STRING(200),
        allowNull: true
      },
      module: {
        type: DataTypes.STRING(50),
        allowNull: false
      }
    }, {
      tableName: "permissions",
      timestamps: true
    }));
    // User model
    const User =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[14]++, sequelize.define("user", {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
      },
      username: {
        type: DataTypes.STRING(50),
        allowNull: false,
        unique: true
      },
      passwordHash: {
        type: DataTypes.STRING,
        allowNull: false
      },
      fullName: {
        type: DataTypes.STRING(100),
        allowNull: false
      },
      email: {
        type: DataTypes.STRING(100),
        allowNull: false,
        unique: true
      },
      phone: {
        type: DataTypes.STRING(20),
        allowNull: true
      },
      isActive: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: true
      },
      roleId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: "roles",
          key: "id"
        }
      },
      shopId: {
        type: DataTypes.INTEGER,
        allowNull: true,
        references: {
          model: "shops",
          key: "id"
        }
      }
    }, {
      tableName: "users",
      timestamps: true
    }));
    // Define the role_permission join table
    const RolePermission =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[15]++, sequelize.define("role_permission", {}, {
      tableName: "role_permissions",
      timestamps: false
    }));
    // Set up associations
    /* istanbul ignore next */
    cov_bk0woji0p().s[16]++;
    Role.belongsToMany(Permission, {
      through: RolePermission,
      foreignKey: "roleId"
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[17]++;
    Permission.belongsToMany(Role, {
      through: RolePermission,
      foreignKey: "permissionId"
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[18]++;
    User.belongsTo(Role, {
      foreignKey: "roleId"
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[19]++;
    Role.hasMany(User, {
      foreignKey: "roleId"
    });
    // Sync models with database
    /* istanbul ignore next */
    cov_bk0woji0p().s[20]++;
    console.log("Syncing models with database...");
    /* istanbul ignore next */
    cov_bk0woji0p().s[21]++;
    await Role.sync({
      force: true
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[22]++;
    await Permission.sync({
      force: true
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[23]++;
    await RolePermission.sync({
      force: true
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[24]++;
    await User.sync({
      force: true
    });
    // Create default roles
    /* istanbul ignore next */
    cov_bk0woji0p().s[25]++;
    console.log("Creating default roles...");
    const adminRole =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[26]++, await Role.create({
      name: "Admin",
      description: "Administrator with full access"
    }));
    const managerRole =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[27]++, await Role.create({
      name: "Shop Manager",
      description: "Manager of a specific shop"
    }));
    const cashierRole =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[28]++, await Role.create({
      name: "Cashier",
      description: "Processes sales and invoices"
    }));
    // Create permissions
    /* istanbul ignore next */
    cov_bk0woji0p().s[29]++;
    console.log("Creating permissions...");
    const permissions =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[30]++, await Permission.bulkCreate([{
      name: "inventory:view",
      description: "View inventory items",
      module: "inventory"
    }, {
      name: "inventory:manage",
      description: "Create, update, delete inventory items",
      module: "inventory"
    }, {
      name: "sales:view",
      description: "View sales data and transactions",
      module: "sales"
    }, {
      name: "sales:manage",
      description: "Full sales management access",
      module: "sales"
    }, {
      name: "invoice:create",
      description: "Create new invoices",
      module: "invoice"
    }, {
      name: "user:manage",
      description: "Manage user accounts",
      module: "user"
    }, {
      name: "shop:manage",
      description: "Manage shop details",
      module: "shop"
    }, {
      name: "report:view",
      description: "View reports",
      module: "report"
    }]));
    // Assign permissions to roles
    /* istanbul ignore next */
    cov_bk0woji0p().s[31]++;
    console.log("Assigning permissions to roles...");
    // Admin gets all permissions
    /* istanbul ignore next */
    cov_bk0woji0p().s[32]++;
    await RolePermission.bulkCreate(permissions.map(permission => {
      /* istanbul ignore next */
      cov_bk0woji0p().f[1]++;
      cov_bk0woji0p().s[33]++;
      return {
        roleId: adminRole.id,
        permissionId: permission.id
      };
    }));
    // Manager permissions
    const managerPermissions =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[34]++, permissions.filter(p => {
      /* istanbul ignore next */
      cov_bk0woji0p().f[2]++;
      cov_bk0woji0p().s[35]++;
      return ["inventory:view", "inventory:manage", "invoice:create", "report:view"].includes(p.name);
    }));
    /* istanbul ignore next */
    cov_bk0woji0p().s[36]++;
    await RolePermission.bulkCreate(managerPermissions.map(permission => {
      /* istanbul ignore next */
      cov_bk0woji0p().f[3]++;
      cov_bk0woji0p().s[37]++;
      return {
        roleId: managerRole.id,
        permissionId: permission.id
      };
    }));
    // Cashier permissions
    const cashierPermissions =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[38]++, permissions.filter(p => {
      /* istanbul ignore next */
      cov_bk0woji0p().f[4]++;
      cov_bk0woji0p().s[39]++;
      return ["inventory:view", "invoice:create"].includes(p.name);
    }));
    /* istanbul ignore next */
    cov_bk0woji0p().s[40]++;
    await RolePermission.bulkCreate(cashierPermissions.map(permission => {
      /* istanbul ignore next */
      cov_bk0woji0p().f[5]++;
      cov_bk0woji0p().s[41]++;
      return {
        roleId: cashierRole.id,
        permissionId: permission.id
      };
    }));
    // Create admin user
    /* istanbul ignore next */
    cov_bk0woji0p().s[42]++;
    console.log("Creating admin user...");
    const adminPassword =
    /* istanbul ignore next */
    (cov_bk0woji0p().s[43]++, await bcrypt.hash("admin123", 12));
    /* istanbul ignore next */
    cov_bk0woji0p().s[44]++;
    await User.create({
      username: "admin",
      passwordHash: adminPassword,
      fullName: "System Administrator",
      email: "admin@mssport.lk",
      phone: "+94123456789",
      roleId: adminRole.id
    });
    /* istanbul ignore next */
    cov_bk0woji0p().s[45]++;
    console.log("Authentication tables initialized successfully!");
  } catch (error) {
    /* istanbul ignore next */
    cov_bk0woji0p().s[46]++;
    console.error("Error initializing authentication tables:", error);
  } finally {
    /* istanbul ignore next */
    cov_bk0woji0p().s[47]++;
    await sequelize.close();
  }
}
/* istanbul ignore next */
cov_bk0woji0p().s[48]++;
initAuthTables();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,