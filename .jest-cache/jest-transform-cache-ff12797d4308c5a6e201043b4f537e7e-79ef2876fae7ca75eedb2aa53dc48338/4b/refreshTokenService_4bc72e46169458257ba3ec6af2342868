4ce873d8f03ca46e9efe0c6061934e2f
"use strict";

/* istanbul ignore next */
function cov_cprhe2as4() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts";
  var hash = "0218d300afb783a7c4204d1a5e4ac60dd1d61c70";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "9": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "11": {
        start: {
          line: 35,
          column: 38
        },
        end: {
          line: 35,
          column: 40
        }
      },
      "12": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "14": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 90
        }
      },
      "17": {
        start: {
          line: 42,
          column: 45
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "18": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "19": {
        start: {
          line: 47,
          column: 11
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "20": {
        start: {
          line: 49,
          column: 29
        },
        end: {
          line: 89,
          column: 1
        }
      },
      "21": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "22": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "23": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 79
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 73
        }
      },
      "25": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "26": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "27": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 36
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 79
        }
      },
      "29": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "30": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "31": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 84
        }
      },
      "32": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "33": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "34": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "35": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "36": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 55
        }
      },
      "37": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "38": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "39": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "40": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "41": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 79
        }
      },
      "42": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "43": {
        start: {
          line: 98,
          column: 29
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "44": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "45": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 87
        }
      },
      "46": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 24
        }
      },
      "47": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "48": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 74
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "50": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 24
        }
      },
      "51": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "52": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 63
        }
      },
      "53": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 20
        }
      },
      "54": {
        start: {
          line: 128,
          column: 27
        },
        end: {
          line: 148,
          column: 1
        }
      },
      "55": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "56": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "57": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "58": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 25
        }
      },
      "59": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "60": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 20
        }
      },
      "61": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 62
        }
      },
      "62": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 21
        }
      },
      "63": {
        start: {
          line: 149,
          column: 35
        },
        end: {
          line: 169,
          column: 1
        }
      },
      "64": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "65": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "66": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 79
        }
      },
      "67": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "68": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "69": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 20
        }
      },
      "70": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 68
        }
      },
      "71": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 21
        }
      },
      "72": {
        start: {
          line: 170,
          column: 29
        },
        end: {
          line: 195,
          column: 1
        }
      },
      "73": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 194,
          column: 5
        }
      },
      "74": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "75": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 79
        }
      },
      "76": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "77": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 30
        }
      },
      "78": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "79": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 27
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 25
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 37,
            column: 28
          },
          end: {
            line: 37,
            column: 29
          }
        },
        loc: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 37
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 42,
            column: 38
          }
        },
        loc: {
          start: {
            line: 42,
            column: 45
          },
          end: {
            line: 42,
            column: 79
          }
        },
        line: 42
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 7
          },
          end: {
            line: 47,
            column: 8
          }
        },
        loc: {
          start: {
            line: 47,
            column: 11
          },
          end: {
            line: 47,
            column: 54
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 49,
            column: 30
          }
        },
        loc: {
          start: {
            line: 49,
            column: 45
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 49
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 90,
            column: 27
          },
          end: {
            line: 90,
            column: 28
          }
        },
        loc: {
          start: {
            line: 90,
            column: 42
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 90
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 128,
            column: 27
          },
          end: {
            line: 128,
            column: 28
          }
        },
        loc: {
          start: {
            line: 128,
            column: 42
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 128
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 149,
            column: 35
          },
          end: {
            line: 149,
            column: 36
          }
        },
        loc: {
          start: {
            line: 149,
            column: 51
          },
          end: {
            line: 169,
            column: 1
          }
        },
        line: 149
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 170,
            column: 29
          },
          end: {
            line: 170,
            column: 30
          }
        },
        loc: {
          start: {
            line: 170,
            column: 39
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 170
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 14
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 29
          },
          end: {
            line: 37,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 40
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 28
          }
        }, {
          start: {
            line: 52,
            column: 32
          },
          end: {
            line: 52,
            column: 61
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 28
          }
        }, {
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 61
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 25
          }
        }, {
          start: {
            line: 104,
            column: 29
          },
          end: {
            line: 104,
            column: 51
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "12": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "13": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 28
          }
        }, {
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 61
          }
        }],
        line: 131
      },
      "14": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 28
          }
        }, {
          start: {
            line: 152,
            column: 32
          },
          end: {
            line: 152,
            column: 61
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "17": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 28
          }
        }, {
          start: {
            line: 173,
            column: 32
          },
          end: {
            line: 173,
            column: 61
          }
        }],
        line: 173
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts"],
      sourcesContent: ["import prisma from '@/lib/prisma';\n\n// Configuration\nconst REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;\n\n// Generate a secure random token using Web Crypto API\nconst generateSecureToken = (length = 40): string => {\n    // Use Web Crypto API which is supported in Edge Runtime\n    if (typeof crypto !== 'undefined') {\n        const bytes = new Uint8Array(length);\n        crypto.getRandomValues(bytes);\n        return Array.from(bytes)\n            .map(byte => byte.toString(16).padStart(2, '0'))\n            .join('');\n    }\n\n    // Fallback (less secure but works everywhere)\n    return Array.from(\n        { length },\n        () => Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n};\n\n/**\n * Generate a new refresh token for a user\n */\nexport const generateRefreshToken = async (userId: number): Promise<string> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            throw new Error('Database client not initialized correctly');\n        }\n\n        // Log for debugging\n        console.log('Generating refresh token for user ID:', userId);\n\n        // Generate a random token\n        const token = generateSecureToken(40);\n\n        // Calculate expiration date (30 days from now)\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);\n\n        // Log the token details before creating\n        console.log('Preparing to create refresh token with:', {\n            userId,\n            token: token.substring(0, 10) + '...',\n            expiresAt,\n        });\n\n        // Store the token in the database\n        const createdToken = await prisma.refreshToken.create({\n            data: {\n                userId,\n                token,\n                expiresAt,\n                updatedAt: new Date(),\n            },\n        });\n\n        console.log('Successfully created refresh token with ID:', createdToken.id);\n\n        return token;\n    } catch (error) {\n        // More detailed error logging\n        console.error('Error generating refresh token:', error);\n        if (error instanceof Error) {\n            console.error('Error message:', error.message);\n            console.error('Error stack:', error.stack);\n        }\n        throw new Error('Failed to generate refresh token');\n    }\n};\n\n/**\n * Verify a refresh token and return the associated user ID if valid\n */\nexport const verifyRefreshToken = async (token: string): Promise<number | null> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return null;\n        }\n\n        // Find the token in the database\n        const refreshToken = await prisma.refreshToken.findUnique({\n            where: { token },\n        });\n\n        // Check if token exists and is not revoked\n        if (!refreshToken || refreshToken.isRevoked) {\n            console.log('Token not found or revoked:', token.substring(0, 10) + '...');\n            return null;\n        }\n\n        // Check if token is expired\n        if (new Date() > refreshToken.expiresAt) {\n            console.log('Token expired:', token.substring(0, 10) + '...');\n\n            // Revoke expired token\n            await prisma.refreshToken.update({\n                where: { id: refreshToken.id },\n                data: { isRevoked: true },\n            });\n\n            return null;\n        }\n\n        return refreshToken.userId;\n    } catch (error) {\n        console.error('Error verifying refresh token:', error);\n        return null;\n    }\n};\n\n/**\n * Revoke a specific refresh token\n */\nexport const revokeRefreshToken = async (token: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await prisma.refreshToken.updateMany({\n            where: { token },\n            data: { isRevoked: true },\n        });\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking refresh token:', error);\n        return false;\n    }\n};\n\n/**\n * Revoke all refresh tokens for a specific user\n */\nexport const revokeAllUserRefreshTokens = async (userId: number): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await prisma.refreshToken.updateMany({\n            where: { userId },\n            data: { isRevoked: true },\n        });\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking user refresh tokens:', error);\n        return false;\n    }\n};\n\n/**\n * Clean up expired and revoked tokens\n * Note: This should be run periodically via a cron job\n */\nexport const cleanupRefreshTokens = async (): Promise<void> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return;\n        }\n\n        const now = new Date();\n\n        await prisma.refreshToken.deleteMany({\n            where: {\n                OR: [\n                    { expiresAt: { lt: now } },\n                    { isRevoked: true },\n                ],\n            },\n        });\n    } catch (error) {\n        console.error('Error cleaning up refresh tokens:', error);\n    }\n}; "],
      names: ["cleanupRefreshTokens", "generateRefreshToken", "revokeAllUserRefreshTokens", "revokeRefreshToken", "verifyRefreshToken", "REFRESH_TOKEN_EXPIRES_IN_DAYS", "generateSecureToken", "length", "crypto", "bytes", "Uint8Array", "getRandomValues", "Array", "from", "map", "byte", "toString", "padStart", "join", "Math", "floor", "random", "userId", "prisma", "refreshToken", "console", "error", "Error", "log", "token", "expiresAt", "Date", "setDate", "getDate", "substring", "createdToken", "create", "data", "updatedAt", "id", "message", "stack", "findUnique", "where", "isRevoked", "update", "updateMany", "now", "deleteMany", "OR", "lt"],
      mappings: ";;;;;;;;;;;IAuKaA,oBAAoB;eAApBA;;IA7IAC,oBAAoB;eAApBA;;IAqHAC,0BAA0B;eAA1BA;;IAvBAC,kBAAkB;eAAlBA;;IA1CAC,kBAAkB;eAAlBA;;;+DA9EM;;;;;;AAEnB,gBAAgB;AAChB,MAAMC,gCAAgC;AAEtC,sDAAsD;AACtD,MAAMC,sBAAsB,CAACC,SAAS,EAAE;IACpC,wDAAwD;IACxD,IAAI,OAAOC,WAAW,aAAa;QAC/B,MAAMC,QAAQ,IAAIC,WAAWH;QAC7BC,OAAOG,eAAe,CAACF;QACvB,OAAOG,MAAMC,IAAI,CAACJ,OACbK,GAAG,CAACC,CAAAA,OAAQA,KAAKC,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,MAC1CC,IAAI,CAAC;IACd;IAEA,8CAA8C;IAC9C,OAAON,MAAMC,IAAI,CACb;QAAEN;IAAO,GACT,IAAMY,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK,IAAIL,QAAQ,CAAC,KAChDE,IAAI,CAAC;AACX;AAKO,MAAMjB,uBAAuB,OAAOqB;IACvC,IAAI;QACA,sCAAsC;QACtC,IAAI,CAACC,eAAM,IAAI,CAACA,eAAM,CAACC,YAAY,EAAE;YACjCC,QAAQC,KAAK,CAAC;YACd,MAAM,IAAIC,MAAM;QACpB;QAEA,oBAAoB;QACpBF,QAAQG,GAAG,CAAC,yCAAyCN;QAErD,0BAA0B;QAC1B,MAAMO,QAAQvB,oBAAoB;QAElC,+CAA+C;QAC/C,MAAMwB,YAAY,IAAIC;QACtBD,UAAUE,OAAO,CAACF,UAAUG,OAAO,KAAK5B;QAExC,wCAAwC;QACxCoB,QAAQG,GAAG,CAAC,2CAA2C;YACnDN;YACAO,OAAOA,MAAMK,SAAS,CAAC,GAAG,MAAM;YAChCJ;QACJ;QAEA,kCAAkC;QAClC,MAAMK,eAAe,MAAMZ,eAAM,CAACC,YAAY,CAACY,MAAM,CAAC;YAClDC,MAAM;gBACFf;gBACAO;gBACAC;gBACAQ,WAAW,IAAIP;YACnB;QACJ;QAEAN,QAAQG,GAAG,CAAC,+CAA+CO,aAAaI,EAAE;QAE1E,OAAOV;IACX,EAAE,OAAOH,OAAO;QACZ,8BAA8B;QAC9BD,QAAQC,KAAK,CAAC,mCAAmCA;QACjD,IAAIA,iBAAiBC,OAAO;YACxBF,QAAQC,KAAK,CAAC,kBAAkBA,MAAMc,OAAO;YAC7Cf,QAAQC,KAAK,CAAC,gBAAgBA,MAAMe,KAAK;QAC7C;QACA,MAAM,IAAId,MAAM;IACpB;AACJ;AAKO,MAAMvB,qBAAqB,OAAOyB;IACrC,IAAI;QACA,sCAAsC;QACtC,IAAI,CAACN,eAAM,IAAI,CAACA,eAAM,CAACC,YAAY,EAAE;YACjCC,QAAQC,KAAK,CAAC;YACd,OAAO;QACX;QAEA,iCAAiC;QACjC,MAAMF,eAAe,MAAMD,eAAM,CAACC,YAAY,CAACkB,UAAU,CAAC;YACtDC,OAAO;gBAAEd;YAAM;QACnB;QAEA,2CAA2C;QAC3C,IAAI,CAACL,gBAAgBA,aAAaoB,SAAS,EAAE;YACzCnB,QAAQG,GAAG,CAAC,+BAA+BC,MAAMK,SAAS,CAAC,GAAG,MAAM;YACpE,OAAO;QACX;QAEA,4BAA4B;QAC5B,IAAI,IAAIH,SAASP,aAAaM,SAAS,EAAE;YACrCL,QAAQG,GAAG,CAAC,kBAAkBC,MAAMK,SAAS,CAAC,GAAG,MAAM;YAEvD,uBAAuB;YACvB,MAAMX,eAAM,CAACC,YAAY,CAACqB,MAAM,CAAC;gBAC7BF,OAAO;oBAAEJ,IAAIf,aAAae,EAAE;gBAAC;gBAC7BF,MAAM;oBAAEO,WAAW;gBAAK;YAC5B;YAEA,OAAO;QACX;QAEA,OAAOpB,aAAaF,MAAM;IAC9B,EAAE,OAAOI,OAAO;QACZD,QAAQC,KAAK,CAAC,kCAAkCA;QAChD,OAAO;IACX;AACJ;AAKO,MAAMvB,qBAAqB,OAAO0B;IACrC,IAAI;QACA,sCAAsC;QACtC,IAAI,CAACN,eAAM,IAAI,CAACA,eAAM,CAACC,YAAY,EAAE;YACjCC,QAAQC,KAAK,CAAC;YACd,OAAO;QACX;QAEA,MAAMH,eAAM,CAACC,YAAY,CAACsB,UAAU,CAAC;YACjCH,OAAO;gBAAEd;YAAM;YACfQ,MAAM;gBAAEO,WAAW;YAAK;QAC5B;QAEA,OAAO;IACX,EAAE,OAAOlB,OAAO;QACZD,QAAQC,KAAK,CAAC,iCAAiCA;QAC/C,OAAO;IACX;AACJ;AAKO,MAAMxB,6BAA6B,OAAOoB;IAC7C,IAAI;QACA,sCAAsC;QACtC,IAAI,CAACC,eAAM,IAAI,CAACA,eAAM,CAACC,YAAY,EAAE;YACjCC,QAAQC,KAAK,CAAC;YACd,OAAO;QACX;QAEA,MAAMH,eAAM,CAACC,YAAY,CAACsB,UAAU,CAAC;YACjCH,OAAO;gBAAErB;YAAO;YAChBe,MAAM;gBAAEO,WAAW;YAAK;QAC5B;QAEA,OAAO;IACX,EAAE,OAAOlB,OAAO;QACZD,QAAQC,KAAK,CAAC,uCAAuCA;QACrD,OAAO;IACX;AACJ;AAMO,MAAM1B,uBAAuB;IAChC,IAAI;QACA,sCAAsC;QACtC,IAAI,CAACuB,eAAM,IAAI,CAACA,eAAM,CAACC,YAAY,EAAE;YACjCC,QAAQC,KAAK,CAAC;YACd;QACJ;QAEA,MAAMqB,MAAM,IAAIhB;QAEhB,MAAMR,eAAM,CAACC,YAAY,CAACwB,UAAU,CAAC;YACjCL,OAAO;gBACHM,IAAI;oBACA;wBAAEnB,WAAW;4BAAEoB,IAAIH;wBAAI;oBAAE;oBACzB;wBAAEH,WAAW;oBAAK;iBACrB;YACL;QACJ;IACJ,EAAE,OAAOlB,OAAO;QACZD,QAAQC,KAAK,CAAC,qCAAqCA;IACvD;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0218d300afb783a7c4204d1a5e4ac60dd1d61c70"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cprhe2as4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cprhe2as4();
cov_cprhe2as4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[0]++;
  cov_cprhe2as4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_cprhe2as4().s[3]++;
_export(exports, {
  cleanupRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[1]++;
    cov_cprhe2as4().s[4]++;
    return cleanupRefreshTokens;
  },
  generateRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[2]++;
    cov_cprhe2as4().s[5]++;
    return generateRefreshToken;
  },
  revokeAllUserRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[3]++;
    cov_cprhe2as4().s[6]++;
    return revokeAllUserRefreshTokens;
  },
  revokeRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[4]++;
    cov_cprhe2as4().s[7]++;
    return revokeRefreshToken;
  },
  verifyRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[5]++;
    cov_cprhe2as4().s[8]++;
    return verifyRefreshToken;
  }
});
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_cprhe2as4().s[9]++, _interop_require_default(require("../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[6]++;
  cov_cprhe2as4().s[10]++;
  return /* istanbul ignore next */(cov_cprhe2as4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_cprhe2as4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_cprhe2as4().b[0][1]++, {
    default: obj
  });
}
// Configuration
const REFRESH_TOKEN_EXPIRES_IN_DAYS =
/* istanbul ignore next */
(cov_cprhe2as4().s[11]++, 30);
// Generate a secure random token using Web Crypto API
/* istanbul ignore next */
cov_cprhe2as4().s[12]++;
const generateSecureToken = (length =
/* istanbul ignore next */
(cov_cprhe2as4().b[2][0]++, 40)) => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[7]++;
  cov_cprhe2as4().s[13]++;
  // Use Web Crypto API which is supported in Edge Runtime
  if (typeof crypto !== "undefined") {
    /* istanbul ignore next */
    cov_cprhe2as4().b[3][0]++;
    const bytes =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[14]++, new Uint8Array(length));
    /* istanbul ignore next */
    cov_cprhe2as4().s[15]++;
    crypto.getRandomValues(bytes);
    /* istanbul ignore next */
    cov_cprhe2as4().s[16]++;
    return Array.from(bytes).map(byte => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[8]++;
      cov_cprhe2as4().s[17]++;
      return byte.toString(16).padStart(2, "0");
    }).join("");
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[3][1]++;
  }
  // Fallback (less secure but works everywhere)
  cov_cprhe2as4().s[18]++;
  return Array.from({
    length
  }, () => {
    /* istanbul ignore next */
    cov_cprhe2as4().f[9]++;
    cov_cprhe2as4().s[19]++;
    return Math.floor(Math.random() * 16).toString(16);
  }).join("");
};
/* istanbul ignore next */
cov_cprhe2as4().s[20]++;
const generateRefreshToken = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[10]++;
  cov_cprhe2as4().s[21]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[22]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[5][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[5][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[4][0]++;
      cov_cprhe2as4().s[23]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[24]++;
      throw new Error("Database client not initialized correctly");
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[4][1]++;
    }
    // Log for debugging
    cov_cprhe2as4().s[25]++;
    console.log("Generating refresh token for user ID:", userId);
    // Generate a random token
    const token =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[26]++, generateSecureToken(40));
    // Calculate expiration date (30 days from now)
    const expiresAt =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[27]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[28]++;
    expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);
    // Log the token details before creating
    /* istanbul ignore next */
    cov_cprhe2as4().s[29]++;
    console.log("Preparing to create refresh token with:", {
      userId,
      token: token.substring(0, 10) + "...",
      expiresAt
    });
    // Store the token in the database
    const createdToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[30]++, await _prisma.default.refreshToken.create({
      data: {
        userId,
        token,
        expiresAt,
        updatedAt: new Date()
      }
    }));
    /* istanbul ignore next */
    cov_cprhe2as4().s[31]++;
    console.log("Successfully created refresh token with ID:", createdToken.id);
    /* istanbul ignore next */
    cov_cprhe2as4().s[32]++;
    return token;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[33]++;
    // More detailed error logging
    console.error("Error generating refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[34]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[6][0]++;
      cov_cprhe2as4().s[35]++;
      console.error("Error message:", error.message);
      /* istanbul ignore next */
      cov_cprhe2as4().s[36]++;
      console.error("Error stack:", error.stack);
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[6][1]++;
    }
    cov_cprhe2as4().s[37]++;
    throw new Error("Failed to generate refresh token");
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[38]++;
const verifyRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[11]++;
  cov_cprhe2as4().s[39]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[40]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[8][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[8][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[7][0]++;
      cov_cprhe2as4().s[41]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[42]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[7][1]++;
    }
    // Find the token in the database
    const refreshToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[43]++, await _prisma.default.refreshToken.findUnique({
      where: {
        token
      }
    }));
    // Check if token exists and is not revoked
    /* istanbul ignore next */
    cov_cprhe2as4().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[10][0]++, !refreshToken) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[10][1]++, refreshToken.isRevoked)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[9][0]++;
      cov_cprhe2as4().s[45]++;
      console.log("Token not found or revoked:", token.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_cprhe2as4().s[46]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[9][1]++;
    }
    // Check if token is expired
    cov_cprhe2as4().s[47]++;
    if (new Date() > refreshToken.expiresAt) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[11][0]++;
      cov_cprhe2as4().s[48]++;
      console.log("Token expired:", token.substring(0, 10) + "...");
      // Revoke expired token
      /* istanbul ignore next */
      cov_cprhe2as4().s[49]++;
      await _prisma.default.refreshToken.update({
        where: {
          id: refreshToken.id
        },
        data: {
          isRevoked: true
        }
      });
      /* istanbul ignore next */
      cov_cprhe2as4().s[50]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[11][1]++;
    }
    cov_cprhe2as4().s[51]++;
    return refreshToken.userId;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[52]++;
    console.error("Error verifying refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[53]++;
    return null;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[54]++;
const revokeRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[12]++;
  cov_cprhe2as4().s[55]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[56]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[13][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[13][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[12][0]++;
      cov_cprhe2as4().s[57]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[58]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[12][1]++;
    }
    cov_cprhe2as4().s[59]++;
    await _prisma.default.refreshToken.updateMany({
      where: {
        token
      },
      data: {
        isRevoked: true
      }
    });
    /* istanbul ignore next */
    cov_cprhe2as4().s[60]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[61]++;
    console.error("Error revoking refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[62]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[63]++;
const revokeAllUserRefreshTokens = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[13]++;
  cov_cprhe2as4().s[64]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[65]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[15][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[15][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[14][0]++;
      cov_cprhe2as4().s[66]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[67]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[14][1]++;
    }
    cov_cprhe2as4().s[68]++;
    await _prisma.default.refreshToken.updateMany({
      where: {
        userId
      },
      data: {
        isRevoked: true
      }
    });
    /* istanbul ignore next */
    cov_cprhe2as4().s[69]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[70]++;
    console.error("Error revoking user refresh tokens:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[71]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[72]++;
const cleanupRefreshTokens = async () => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[14]++;
  cov_cprhe2as4().s[73]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[74]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[17][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[17][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[16][0]++;
      cov_cprhe2as4().s[75]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[76]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[16][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[77]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[78]++;
    await _prisma.default.refreshToken.deleteMany({
      where: {
        OR: [{
          expiresAt: {
            lt: now
          }
        }, {
          isRevoked: true
        }]
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[79]++;
    console.error("Error cleaning up refresh tokens:", error);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,