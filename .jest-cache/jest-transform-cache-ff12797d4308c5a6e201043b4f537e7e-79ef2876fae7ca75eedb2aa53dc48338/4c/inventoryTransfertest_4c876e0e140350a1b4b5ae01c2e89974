f28fe4907603300c2e705f21da4a9928
"use strict";
// Mock external dependencies BEFORE importing route handlers
// 1. next/server (NextResponse)
// Mock NextResponse (and any other exports we need) BEFORE importing route handlers
jest.mock("next/server", ()=>{
    const mockNextResponse = {
        json: (data, init)=>({
                status: init?.status ?? 200,
                json: async ()=>data
            })
    };
    return {
        NextResponse: mockNextResponse
    };
});
// 2. auth utilities – stub verifyToken to avoid ESM 'jose' parsing issues
jest.mock("@/lib/auth", ()=>{
    return {
        verifyToken: jest.fn(async (token)=>{
            if (token === "dev-token") {
                return {
                    sub: "test-user",
                    shopId: "shopA",
                    permissions: [
                        "inventory:transfer",
                        "shop:manage"
                    ]
                };
            }
            return null;
        })
    };
});
// 3. Permission middleware – bypass actual permission checks
jest.mock("@/lib/utils/middleware", ()=>{
    return {
        requirePermission: (_permission)=>{
            return async ()=>null; // Always grant
        }
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _client = require("@prisma/client");
const _route = require("../../src/app/api/inventory/transfers/route");
const _route1 = require("../../src/app/api/inventory/transfers/[id]/route");
const _route2 = require("../../src/app/api/inventory/transfers/batch/route");
// Polyfill minimal global Request/Headers so route modules that rely on them do not crash in Node
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
if (typeof global.Headers === "undefined") {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { Headers: Headers1, Request } = require("node-fetch");
    // @ts-ignore
    global.Headers = Headers1;
    // @ts-ignore
    global.Request = Request;
}
const createMockRequest = (url, opts = {})=>{
    const { method = "GET", body, headers = {} } = opts;
    return {
        method,
        url,
        headers: new Headers(headers),
        json: async ()=>typeof body === "string" ? JSON.parse(body) : body,
        text: async ()=>typeof body === "string" ? body : JSON.stringify(body)
    };
};
const prisma = new _client.PrismaClient();
const DEV_HEADERS = {
    authorization: "Bearer dev-token",
    "content-type": "application/json"
};
(0, _globals.describe)("Inventory transfer reservation flow", ()=>{
    let shopAId;
    let shopBId;
    let productId;
    (0, _globals.beforeAll)(async ()=>{
        // create two shops & product
        // Provide explicit string IDs for shops to satisfy Prisma string primary key type
        const shopA = await prisma.shop.create({
            data: {
                id: "shopA",
                name: "Shop A",
                location: "X"
            },
            select: {
                id: true
            }
        });
        const shopB = await prisma.shop.create({
            data: {
                id: "shopB",
                name: "Shop B",
                location: "Y"
            },
            select: {
                id: true
            }
        });
        shopAId = shopA.id;
        shopBId = shopB.id;
        const product = await prisma.product.create({
            data: {
                name: "Product A",
                price: 15,
                weightedAverageCost: 10.0
            },
            select: {
                id: true
            }
        });
        productId = product.id;
        // add inventory 50 to shop A
        await prisma.inventoryItem.create({
            data: {
                productId,
                shopId: shopAId,
                quantity: 50,
                shopSpecificCost: 10
            }
        });
    });
    (0, _globals.afterAll)(async ()=>{
        await prisma.inventoryItem.deleteMany({});
        await prisma.product.deleteMany({});
        await prisma.shop.deleteMany({});
        await prisma.$disconnect();
    });
    (0, _globals.test)("reservation, cancel, complete flow", async ()=>{
        // 1. Create transfer 30 units pending
        const createReq = createMockRequest("http://localhost/api/inventory/transfers", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                sourceShopId: shopAId,
                destinationShopId: shopBId,
                items: [
                    {
                        productId,
                        quantity: 30
                    }
                ]
            }
        });
        const createRes = await (0, _route.POST)(createReq);
        (0, _globals.expect)(createRes.status).toBe(201);
        const resBody = await createRes.json();
        const transferId = resBody.data.id;
        // verify source qty decreased to 20
        const sourceInventoryAfter = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(sourceInventoryAfter?.quantity).toBe(20);
        // 2. Cancel transfer -> qty back to 50
        const deleteReq = createMockRequest(`http://localhost/api/inventory/transfers/${transferId}`, {
            method: "DELETE",
            headers: DEV_HEADERS
        });
        const deleteRes = await (0, _route1.DELETE)(deleteReq, {
            params: Promise.resolve({
                id: String(transferId)
            })
        });
        (0, _globals.expect)(deleteRes.status).toBe(200);
        const srcAfterCancel = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(srcAfterCancel?.quantity).toBe(50);
        // 3. Re-create transfer and complete it
        const createReq2 = createMockRequest("http://localhost/api/inventory/transfers", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                sourceShopId: shopAId,
                destinationShopId: shopBId,
                items: [
                    {
                        productId,
                        quantity: 30
                    }
                ]
            }
        });
        const createRes2 = await (0, _route.POST)(createReq2);
        const newTransferId = (await createRes2.json()).data.id;
        // batch complete
        const batchReq = createMockRequest("http://localhost/api/inventory/transfers/batch", {
            method: "POST",
            headers: DEV_HEADERS,
            body: {
                transferIds: [
                    newTransferId
                ],
                action: "complete"
            }
        });
        const batchRes = await (0, _route2.POST)(batchReq);
        (0, _globals.expect)(batchRes.status).toBe(200);
        // verify source qty remains 20, dest qty 30
        const srcFinal = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopAId
            }
        });
        (0, _globals.expect)(srcFinal?.quantity).toBe(20);
        const destInv = await prisma.inventoryItem.findFirst({
            where: {
                productId,
                shopId: shopBId
            }
        });
        (0, _globals.expect)(destInv?.quantity).toBe(30);
    });
});

//# sourceMappingURL=data:application/json;base64,