a2dc131381c2ffa87cd540fc22ad9b23
"use strict";

/* istanbul ignore next */
function cov_18rbj5g0f7() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts";
  var hash = "d91b8ac89a3e96607c8e7f685dce410d7a458956";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 71
        }
      },
      "6": {
        start: {
          line: 14,
          column: 14
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "7": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "9": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "12": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "13": {
        start: {
          line: 26,
          column: 37
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "14": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "16": {
        start: {
          line: 48,
          column: 56
        },
        end: {
          line: 51,
          column: 21
        }
      },
      "17": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "18": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "19": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 93,
          column: 2
        }
      },
      "20": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "21": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 94
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "23": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "24": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 91
        }
      },
      "25": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "26": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 66
        }
      },
      "27": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "fetchCustomersData",
        decl: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 42
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 49
          },
          end: {
            line: 48,
            column: 50
          }
        },
        loc: {
          start: {
            line: 48,
            column: 56
          },
          end: {
            line: 51,
            column: 21
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 62,
            column: 61
          },
          end: {
            line: 62,
            column: 62
          }
        },
        loc: {
          start: {
            line: 62,
            column: 87
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 62
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 69
          },
          end: {
            line: 73,
            column: 83
          }
        }, {
          start: {
            line: 73,
            column: 86
          },
          end: {
            line: 73,
            column: 90
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 18
          },
          end: {
            line: 76,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 35
          },
          end: {
            line: 76,
            column: 46
          }
        }, {
          start: {
            line: 76,
            column: 49
          },
          end: {
            line: 76,
            column: 53
          }
        }],
        line: 76
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 77,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 36
          },
          end: {
            line: 77,
            column: 40
          }
        }, {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 77,
            column: 55
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 88,
            column: 57
          }
        }, {
          start: {
            line: 88,
            column: 60
          },
          end: {
            line: 88,
            column: 73
          }
        }],
        line: 88
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// This function can be moved to a lib/data-access layer later\nasync function fetchCustomersData(shopId: string | null) {\n    try {\n        const whereClause: any = {};\n        if (shopId) {\n            whereClause.shopId = shopId;\n        }\n\n        const totalCustomers = await prisma.customer.count({ where });\n        const newCustomersThisWeek = await prisma.customer.count({\n            where: {\n                ...whereClause,\n                createdAt: {\n                    gte: new Date(new Date().setDate(new Date().getDate() - 7)),\n                },\n            },\n        });\n        const customerTypes = await prisma.customer.groupBy({\n            by: ['customerType'],\n            _count: {\n                id: true,\n            },\n            where: whereClause,\n        });\n\n        return {\n            success: true,\n            data: {\n                totalCustomers,\n                newCustomersThisWeek,\n                customerTypes: customerTypes.map(ct => ({\n                    type: ct.customerType,\n                    count: ct._count.id\n                })),\n            },\n        };\n\n    } catch (error) {\n        console.error('Error fetching customers dashboard data:', error);\n        return {\n            success: false,\n            error: 'Failed to fetch customer data'\n        };\n    }\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const result = await fetchCustomersData(context.isFiltered ? context.shopId : null);\n\n        return NextResponse.json({\n            success: result.success,\n            data: result.success ? result.data : null,\n            error: result.success ? null : result.error,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        });\n\n    } catch (error) {\n        console.error('Error in customers dashboard API:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to fetch customers dashboard data',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}); "],
      names: ["GET", "prisma", "PrismaClient", "fetchCustomersData", "shopId", "whereClause", "totalCustomers", "customer", "count", "where", "newCustomersThisWeek", "createdAt", "gte", "Date", "setDate", "getDate", "customerTypes", "groupBy", "by", "_count", "id", "success", "data", "map", "ct", "type", "customerType", "error", "console", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "message", "status", "result", "isFiltered", "meta", "shopFiltered", "Error", "String"],
      mappings: ";;;;+BAqDaA;;;eAAAA;;;wBArD6B;wBACb;gCACK;sBACM;AAExC,MAAMC,SAAS,IAAIC,oBAAY;AAE/B,8DAA8D;AAC9D,eAAeC,mBAAmBC,MAAqB;IACnD,IAAI;QACA,MAAMC,cAAmB,CAAC;QAC1B,IAAID,QAAQ;YACRC,YAAYD,MAAM,GAAGA;QACzB;QAEA,MAAME,iBAAiB,MAAML,OAAOM,QAAQ,CAACC,KAAK,CAAC;YAAEC;QAAM;QAC3D,MAAMC,uBAAuB,MAAMT,OAAOM,QAAQ,CAACC,KAAK,CAAC;YACrDC,OAAO;gBACH,GAAGJ,WAAW;gBACdM,WAAW;oBACPC,KAAK,IAAIC,KAAK,IAAIA,OAAOC,OAAO,CAAC,IAAID,OAAOE,OAAO,KAAK;gBAC5D;YACJ;QACJ;QACA,MAAMC,gBAAgB,MAAMf,OAAOM,QAAQ,CAACU,OAAO,CAAC;YAChDC,IAAI;gBAAC;aAAe;YACpBC,QAAQ;gBACJC,IAAI;YACR;YACAX,OAAOJ;QACX;QAEA,OAAO;YACHgB,SAAS;YACTC,MAAM;gBACFhB;gBACAI;gBACAM,eAAeA,cAAcO,GAAG,CAACC,CAAAA,KAAO,CAAA;wBACpCC,MAAMD,GAAGE,YAAY;wBACrBlB,OAAOgB,GAAGL,MAAM,CAACC,EAAE;oBACvB,CAAA;YACJ;QACJ;IAEJ,EAAE,OAAOO,OAAO;QACZC,QAAQD,KAAK,CAAC,4CAA4CA;QAC1D,OAAO;YACHN,SAAS;YACTM,OAAO;QACX;IACJ;AACJ;AAEO,MAAM3B,MAAM6B,iCAAiB,CAACC,cAAc,CAAC,OAAOC,SAAsBC;IAC7E,IAAI;QACA,iCAAiC;QACjC,MAAMC,aAAa,MAAMC,IAAAA,6BAAuB,EAACH,SAAS;QAC1D,IAAI,CAACE,WAAWE,OAAO,EAAE;YACrB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEV,OAAOM,WAAWK,OAAO;YAAC,GAAG;gBAAEC,QAAQ;YAAI;QAC1E;QAEA,MAAMC,SAAS,MAAMrC,mBAAmB6B,QAAQS,UAAU,GAAGT,QAAQ5B,MAAM,GAAG;QAE9E,OAAOgC,oBAAY,CAACC,IAAI,CAAC;YACrBhB,SAASmB,OAAOnB,OAAO;YACvBC,MAAMkB,OAAOnB,OAAO,GAAGmB,OAAOlB,IAAI,GAAG;YACrCK,OAAOa,OAAOnB,OAAO,GAAG,OAAOmB,OAAOb,KAAK;YAC3Ce,MAAM;gBACFC,cAAcX,QAAQS,UAAU;gBAChCrC,QAAQ4B,QAAQ5B,MAAM;YAC1B;QACJ;IAEJ,EAAE,OAAOuB,OAAO;QACZC,QAAQD,KAAK,CAAC,qCAAqCA;QACnD,OAAOS,oBAAY,CAACC,IAAI,CAAC;YACrBhB,SAAS;YACTiB,SAAS;YACTX,OAAOA,iBAAiBiB,QAAQjB,MAAMW,OAAO,GAAGO,OAAOlB;QAC3D,GAAG;YAAEY,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d91b8ac89a3e96607c8e7f685dce410d7a458956"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18rbj5g0f7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18rbj5g0f7();
cov_18rbj5g0f7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18rbj5g0f7().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_18rbj5g0f7().f[0]++;
    cov_18rbj5g0f7().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[3]++, require("next/server"));
const _client =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[4]++, require("@prisma/client"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[5]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[6]++, require("../../../../lib/auth"));
const prisma =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[7]++, new _client.PrismaClient());
// This function can be moved to a lib/data-access layer later
async function fetchCustomersData(shopId) {
  /* istanbul ignore next */
  cov_18rbj5g0f7().f[1]++;
  cov_18rbj5g0f7().s[8]++;
  try {
    const whereClause =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[9]++, {});
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[10]++;
    if (shopId) {
      /* istanbul ignore next */
      cov_18rbj5g0f7().b[0][0]++;
      cov_18rbj5g0f7().s[11]++;
      whereClause.shopId = shopId;
    } else
    /* istanbul ignore next */
    {
      cov_18rbj5g0f7().b[0][1]++;
    }
    const totalCustomers =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[12]++, await prisma.customer.count({
      where
    }));
    const newCustomersThisWeek =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[13]++, await prisma.customer.count({
      where: {
        ...whereClause,
        createdAt: {
          gte: new Date(new Date().setDate(new Date().getDate() - 7))
        }
      }
    }));
    const customerTypes =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[14]++, await prisma.customer.groupBy({
      by: ["customerType"],
      _count: {
        id: true
      },
      where: whereClause
    }));
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[15]++;
    return {
      success: true,
      data: {
        totalCustomers,
        newCustomersThisWeek,
        customerTypes: customerTypes.map(ct => {
          /* istanbul ignore next */
          cov_18rbj5g0f7().f[2]++;
          cov_18rbj5g0f7().s[16]++;
          return {
            type: ct.customerType,
            count: ct._count.id
          };
        })
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[17]++;
    console.error("Error fetching customers dashboard data:", error);
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[18]++;
    return {
      success: false,
      error: "Failed to fetch customer data"
    };
  }
}
const GET =
/* istanbul ignore next */
(cov_18rbj5g0f7().s[19]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_18rbj5g0f7().f[3]++;
  cov_18rbj5g0f7().s[20]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[21]++, await (0, _auth.validateTokenPermission)(request, "dashboard:view"));
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[22]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_18rbj5g0f7().b[1][0]++;
      cov_18rbj5g0f7().s[23]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18rbj5g0f7().b[1][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_18rbj5g0f7().s[24]++, await fetchCustomersData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[2][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_18rbj5g0f7().b[2][1]++, null)));
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[25]++;
    return _server.NextResponse.json({
      success: result.success,
      data: result.success ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[3][0]++, result.data) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[3][1]++, null),
      error: result.success ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[4][0]++, null) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[4][1]++, result.error),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[26]++;
    console.error("Error in customers dashboard API:", error);
    /* istanbul ignore next */
    cov_18rbj5g0f7().s[27]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch customers dashboard data",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18rbj5g0f7().b[5][1]++, String(error))
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,