{"version":3,"names":["cov_18rbj5g0f7","actualCoverage","s","GET","prisma","_client","PrismaClient","fetchCustomersData","shopId","f","whereClause","b","totalCustomers","customer","count","where","newCustomersThisWeek","createdAt","gte","Date","setDate","getDate","customerTypes","groupBy","by","_count","id","success","data","map","ct","type","customerType","error","console","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","message","status","result","isFiltered","meta","shopFiltered","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/customers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// This function can be moved to a lib/data-access layer later\nasync function fetchCustomersData(shopId: string | null) {\n    try {\n        const whereClause: any = {};\n        if (shopId) {\n            whereClause.shopId = shopId;\n        }\n\n        const totalCustomers = await prisma.customer.count({ where });\n        const newCustomersThisWeek = await prisma.customer.count({\n            where: {\n                ...whereClause,\n                createdAt: {\n                    gte: new Date(new Date().setDate(new Date().getDate() - 7)),\n                },\n            },\n        });\n        const customerTypes = await prisma.customer.groupBy({\n            by: ['customerType'],\n            _count: {\n                id: true,\n            },\n            where: whereClause,\n        });\n\n        return {\n            success: true,\n            data: {\n                totalCustomers,\n                newCustomersThisWeek,\n                customerTypes: customerTypes.map(ct => ({\n                    type: ct.customerType,\n                    count: ct._count.id\n                })),\n            },\n        };\n\n    } catch (error) {\n        console.error('Error fetching customers dashboard data:', error);\n        return {\n            success: false,\n            error: 'Failed to fetch customer data'\n        };\n    }\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const result = await fetchCustomersData(context.isFiltered ? context.shopId : null);\n\n        return NextResponse.json({\n            success: result.success,\n            data: result.success ? result.data : null,\n            error: result.success ? null : result.error,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        });\n\n    } catch (error) {\n        console.error('Error in customers dashboard API:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to fetch customers dashboard data',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}); "],"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","ignoreList":[]}