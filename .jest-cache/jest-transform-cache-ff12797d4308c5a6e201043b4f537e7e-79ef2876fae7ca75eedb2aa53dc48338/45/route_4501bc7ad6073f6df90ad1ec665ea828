a679deda80638ff79597927970f075d2
/**
 * Batch Transfer Operations API
 * Handles multiple transfer operations efficiently with transaction safety
 */"use strict";

/* istanbul ignore next */
function cov_g88sjidbo() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/batch/route.ts";
  var hash = "7f4be64996a4f7099aee9552f1fc609b202d4334";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/batch/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 20
        }
      },
      "6": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "8": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "9": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "10": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "11": {
        start: {
          line: 27,
          column: 15
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "12": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 32,
          column: 2
        }
      },
      "13": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "14": {
        start: {
          line: 37,
          column: 26
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "15": {
        start: {
          line: 48,
          column: 37
        },
        end: {
          line: 53,
          column: 1
        }
      },
      "16": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 56
        }
      },
      "17": {
        start: {
          line: 49,
          column: 47
        },
        end: {
          line: 49,
          column: 56
        }
      },
      "18": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 80
        }
      },
      "19": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 57
        }
      },
      "20": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 38
        }
      },
      "21": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 212,
          column: 1
        }
      },
      "22": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "23": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 37
        }
      },
      "24": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 40
        }
      },
      "25": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 208,
          column: 7
        }
      },
      "26": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 34
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "29": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "30": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 96,
          column: 19
        }
      },
      "31": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 25
        }
      },
      "32": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "33": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "34": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 115,
          column: 23
        }
      },
      "35": {
        start: {
          line: 117,
          column: 49
        },
        end: {
          line: 124,
          column: 22
        }
      },
      "36": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 153,
          column: 21
        }
      },
      "37": {
        start: {
          line: 127,
          column: 52
        },
        end: {
          line: 127,
          column: 223
        }
      },
      "38": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 142,
          column: 27
        }
      },
      "39": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 152,
          column: 27
        }
      },
      "40": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 63
        }
      },
      "41": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 155,
          column: 68
        }
      },
      "42": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 59
        }
      },
      "43": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "44": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 171,
          column: 19
        }
      },
      "45": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 177,
          column: 19
        }
      },
      "46": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "47": {
        start: {
          line: 182,
          column: 35
        },
        end: {
          line: 189,
          column: 14
        }
      },
      "48": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "49": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 34
        }
      },
      "50": {
        start: {
          line: 192,
          column: 36
        },
        end: {
          line: 192,
          column: 37
        }
      },
      "51": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 196,
          column: 17
        }
      },
      "52": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 94
        }
      },
      "53": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 56
        }
      },
      "54": {
        start: {
          line: 197,
          column: 37
        },
        end: {
          line: 197,
          column: 87
        }
      },
      "55": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 205,
          column: 19
        }
      },
      "56": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 210,
          column: 110
        }
      },
      "57": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "58": {
        start: {
          line: 214,
          column: 29
        },
        end: {
          line: 276,
          column: 1
        }
      },
      "59": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 215,
          column: 22
        }
      },
      "60": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 272,
          column: 7
        }
      },
      "61": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 228,
          column: 10
        }
      },
      "62": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "63": {
        start: {
          line: 231,
          column: 34
        },
        end: {
          line: 241,
          column: 14
        }
      },
      "64": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "65": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 247,
          column: 19
        }
      },
      "66": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 25
        }
      },
      "67": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "68": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 259,
          column: 19
        }
      },
      "69": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 263,
          column: 19
        }
      },
      "70": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 269,
          column: 19
        }
      },
      "71": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 72
        }
      },
      "72": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 19
        }
      },
      "73": {
        start: {
          line: 278,
          column: 29
        },
        end: {
          line: 355,
          column: 1
        }
      },
      "74": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 279,
          column: 22
        }
      },
      "75": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 280,
          column: 37
        }
      },
      "76": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 351,
          column: 7
        }
      },
      "77": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "78": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "79": {
        start: {
          line: 285,
          column: 38
        },
        end: {
          line: 295,
          column: 18
        }
      },
      "80": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "81": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 300,
          column: 23
        }
      },
      "82": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 29
        }
      },
      "83": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "84": {
        start: {
          line: 305,
          column: 38
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "85": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 319,
          column: 21
        }
      },
      "86": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 317,
          column: 27
        }
      },
      "87": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 318,
          column: 33
        }
      },
      "88": {
        start: {
          line: 322,
          column: 33
        },
        end: {
          line: 329,
          column: 18
        }
      },
      "89": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 337,
          column: 19
        }
      },
      "90": {
        start: {
          line: 332,
          column: 58
        },
        end: {
          line: 336,
          column: 25
        }
      },
      "91": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 63
        }
      },
      "92": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 68
        }
      },
      "93": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 343,
          column: 19
        }
      },
      "94": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 348,
          column: 19
        }
      },
      "95": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 353,
          column: 110
        }
      },
      "96": {
        start: {
          line: 354,
          column: 4
        },
        end: {
          line: 354,
          column: 19
        }
      },
      "97": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "98": {
        start: {
          line: 358,
          column: 22
        },
        end: {
          line: 358,
          column: 82
        }
      },
      "99": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "100": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 365,
          column: 15
        }
      },
      "101": {
        start: {
          line: 367,
          column: 24
        },
        end: {
          line: 367,
          column: 59
        }
      },
      "102": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "103": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 374,
          column: 15
        }
      },
      "104": {
        start: {
          line: 376,
          column: 21
        },
        end: {
          line: 376,
          column: 41
        }
      },
      "105": {
        start: {
          line: 377,
          column: 27
        },
        end: {
          line: 377,
          column: 31
        }
      },
      "106": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "107": {
        start: {
          line: 382,
          column: 42
        },
        end: {
          line: 382,
          column: 73
        }
      },
      "108": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 102
        }
      },
      "109": {
        start: {
          line: 384,
          column: 20
        },
        end: {
          line: 384,
          column: 26
        }
      },
      "110": {
        start: {
          line: 388,
          column: 42
        },
        end: {
          line: 388,
          column: 71
        }
      },
      "111": {
        start: {
          line: 389,
          column: 20
        },
        end: {
          line: 389,
          column: 100
        }
      },
      "112": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 26
        }
      },
      "113": {
        start: {
          line: 394,
          column: 42
        },
        end: {
          line: 394,
          column: 71
        }
      },
      "114": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 98
        }
      },
      "115": {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 396,
          column: 26
        }
      },
      "116": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 404,
          column: 19
        }
      },
      "117": {
        start: {
          line: 406,
          column: 29
        },
        end: {
          line: 406,
          column: 66
        }
      },
      "118": {
        start: {
          line: 406,
          column: 49
        },
        end: {
          line: 406,
          column: 58
        }
      },
      "119": {
        start: {
          line: 407,
          column: 29
        },
        end: {
          line: 407,
          column: 67
        }
      },
      "120": {
        start: {
          line: 407,
          column: 49
        },
        end: {
          line: 407,
          column: 59
        }
      },
      "121": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 418,
          column: 11
        }
      },
      "122": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 64
        }
      },
      "123": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "124": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 428,
          column: 15
        }
      },
      "125": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 435,
          column: 11
        }
      },
      "126": {
        start: {
          line: 439,
          column: 4
        },
        end: {
          line: 516,
          column: 5
        }
      },
      "127": {
        start: {
          line: 440,
          column: 22
        },
        end: {
          line: 440,
          column: 82
        }
      },
      "128": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "129": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 447,
          column: 15
        }
      },
      "130": {
        start: {
          line: 449,
          column: 24
        },
        end: {
          line: 449,
          column: 59
        }
      },
      "131": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "132": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 456,
          column: 15
        }
      },
      "133": {
        start: {
          line: 458,
          column: 33
        },
        end: {
          line: 458,
          column: 53
        }
      },
      "134": {
        start: {
          line: 459,
          column: 28
        },
        end: {
          line: 459,
          column: 81
        }
      },
      "135": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "136": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 466,
          column: 15
        }
      },
      "137": {
        start: {
          line: 468,
          column: 26
        },
        end: {
          line: 495,
          column: 10
        }
      },
      "138": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 507,
          column: 11
        }
      },
      "139": {
        start: {
          line: 498,
          column: 45
        },
        end: {
          line: 506,
          column: 17
        }
      },
      "140": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 61
        }
      },
      "141": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 515,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 11
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 38
          }
        },
        loc: {
          start: {
            line: 48,
            column: 95
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 31
          },
          end: {
            line: 55,
            column: 32
          }
        },
        loc: {
          start: {
            line: 55,
            column: 60
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 59,
            column: 31
          }
        },
        loc: {
          start: {
            line: 59,
            column: 42
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 214,
            column: 29
          },
          end: {
            line: 214,
            column: 30
          }
        },
        loc: {
          start: {
            line: 214,
            column: 58
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 214
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 216,
            column: 30
          },
          end: {
            line: 216,
            column: 31
          }
        },
        loc: {
          start: {
            line: 216,
            column: 42
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 216
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 278,
            column: 29
          },
          end: {
            line: 278,
            column: 30
          }
        },
        loc: {
          start: {
            line: 278,
            column: 56
          },
          end: {
            line: 355,
            column: 1
          }
        },
        line: 278
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 281,
            column: 30
          },
          end: {
            line: 281,
            column: 31
          }
        },
        loc: {
          start: {
            line: 281,
            column: 42
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 281
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 332,
            column: 49
          },
          end: {
            line: 332,
            column: 50
          }
        },
        loc: {
          start: {
            line: 332,
            column: 58
          },
          end: {
            line: 336,
            column: 25
          }
        },
        line: 332
      },
      "11": {
        name: "POST",
        decl: {
          start: {
            line: 356,
            column: 15
          },
          end: {
            line: 356,
            column: 19
          }
        },
        loc: {
          start: {
            line: 356,
            column: 29
          },
          end: {
            line: 437,
            column: 1
          }
        },
        line: 356
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 406,
            column: 44
          },
          end: {
            line: 406,
            column: 45
          }
        },
        loc: {
          start: {
            line: 406,
            column: 49
          },
          end: {
            line: 406,
            column: 58
          }
        },
        line: 406
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 407,
            column: 44
          },
          end: {
            line: 407,
            column: 45
          }
        },
        loc: {
          start: {
            line: 407,
            column: 49
          },
          end: {
            line: 407,
            column: 59
          }
        },
        line: 407
      },
      "14": {
        name: "GET",
        decl: {
          start: {
            line: 438,
            column: 15
          },
          end: {
            line: 438,
            column: 18
          }
        },
        loc: {
          start: {
            line: 438,
            column: 28
          },
          end: {
            line: 517,
            column: 1
          }
        },
        line: 438
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 498,
            column: 32
          },
          end: {
            line: 498,
            column: 33
          }
        },
        loc: {
          start: {
            line: 498,
            column: 45
          },
          end: {
            line: 506,
            column: 17
          }
        },
        line: 498
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "2": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 153,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 153,
            column: 21
          }
        }, {
          start: {
            line: 143,
            column: 27
          },
          end: {
            line: 153,
            column: 21
          }
        }],
        line: 125
      },
      "3": {
        loc: {
          start: {
            line: 176,
            column: 27
          },
          end: {
            line: 176,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 176,
            column: 65
          }
        }, {
          start: {
            line: 176,
            column: 68
          },
          end: {
            line: 176,
            column: 83
          }
        }],
        line: 176
      },
      "4": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "5": {
        loc: {
          start: {
            line: 197,
            column: 37
          },
          end: {
            line: 197,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 57
          },
          end: {
            line: 197,
            column: 83
          }
        }, {
          start: {
            line: 197,
            column: 86
          },
          end: {
            line: 197,
            column: 87
          }
        }],
        line: 197
      },
      "6": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "7": {
        loc: {
          start: {
            line: 268,
            column: 27
          },
          end: {
            line: 268,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 52
          },
          end: {
            line: 268,
            column: 65
          }
        }, {
          start: {
            line: 268,
            column: 68
          },
          end: {
            line: 268,
            column: 83
          }
        }],
        line: 268
      },
      "8": {
        loc: {
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "9": {
        loc: {
          start: {
            line: 313,
            column: 20
          },
          end: {
            line: 319,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 20
          },
          end: {
            line: 319,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "10": {
        loc: {
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 34
          }
        }, {
          start: {
            line: 313,
            column: 38
          },
          end: {
            line: 313,
            column: 72
          }
        }],
        line: 313
      },
      "11": {
        loc: {
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 347,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 52
          },
          end: {
            line: 347,
            column: 65
          }
        }, {
          start: {
            line: 347,
            column: 68
          },
          end: {
            line: 347,
            column: 83
          }
        }],
        line: 347
      },
      "12": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "13": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "14": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 385,
            column: 17
          }
        }, {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 391,
            column: 17
          }
        }, {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 397,
            column: 17
          }
        }, {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 404,
            column: 19
          }
        }],
        line: 379
      },
      "15": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "16": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "17": {
        loc: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "18": {
        loc: {
          start: {
            line: 459,
            column: 28
          },
          end: {
            line: 459,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 28
          },
          end: {
            line: 459,
            column: 75
          }
        }, {
          start: {
            line: 459,
            column: 79
          },
          end: {
            line: 459,
            column: 81
          }
        }],
        line: 459
      },
      "19": {
        loc: {
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/batch/route.ts"],
      sourcesContent: ["/**\n * Batch Transfer Operations API\n * Handles multiple transfer operations efficiently with transaction safety\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { verifyToken } from '@/lib/auth';\nimport { transferCacheService } from '@/lib/transferCache';\nimport { z } from 'zod';\n\nconst prisma = new PrismaClient();\n\n// Validation schemas\nconst batchCompleteSchema = z.object({\n  transferIds: z.array(z.number().positive()).min(1).max(50), // Limit batch size\n  action: z.literal('complete')\n});\n\nconst batchCancelSchema = z.object({\n  transferIds: z.array(z.number().positive()).min(1).max(50),\n  action: z.literal('cancel')\n});\n\nconst batchCreateSchema = z.object({\n  transfers: z.array(z.object({\n    sourceShopId: z.number().positive(),\n    destinationShopId: z.number().positive(),\n    items: z.array(z.object({\n      productId: z.number().positive(),\n      quantity: z.number().positive()\n    })).min(1)\n  })).min(1).max(20) // Limit batch size\n});\n\ntype BatchCompleteRequest = z.infer<typeof batchCompleteSchema>;\ntype BatchCancelRequest = z.infer<typeof batchCancelSchema>;\ntype BatchCreateRequest = z.infer<typeof batchCreateSchema>;\n\n// Helper function to calculate weighted average cost\nconst calculateWeightedAverageCost = (\n  currentQuantity: number,\n  currentCost: number,\n  addedQuantity: number,\n  addedCost: number\n): number => {\n  if (currentQuantity + addedQuantity === 0) return 0;\n\n  const totalValue = (currentQuantity * currentCost) + (addedQuantity * addedCost);\n  const totalQuantity = currentQuantity + addedQuantity;\n\n  return totalValue / totalQuantity;\n};\n\n// Batch complete transfers\nconst batchCompleteTransfers = async (transferIds: number[], userId: number) => {\n  const results: { id: number; success: boolean; error?: string }[] = [];\n  const affectedShopIds = new Set<number>();\n  const affectedProductIds = new Set<number>();\n\n  await prisma.$transaction(async (tx) => {\n    // Fetch all transfers with their items in one query\n    const transfers = await tx.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds },\n        status: 'pending'\n      },\n      include: {\n        items: {\n          include: {\n            product: true\n          }\n        },\n        sourceShop: true,\n        destinationShop: true\n      }\n    });\n\n    // Validate permissions for all transfers\n    for (const transfer of transfers) {\n      const hasPermission = await tx.userShop.findFirst({\n        where: {\n          userId,\n          shopId: { in: [transfer.sourceShopId, transfer.destinationShopId] }\n        }\n      });\n\n      if (!hasPermission) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: 'Insufficient permissions'\n        });\n        continue;\n      }\n\n      try {\n        // Process each transfer item\n        for (const item of transfer.items) {\n          // Update source inventory (decrease)\n          await tx.inventoryItem.update({\n            where: {\n              productId_shopId: {\n                productId: item.productId,\n                shopId: transfer.sourceShopId\n              }\n            },\n            data: {\n              quantity: { decrement: item.quantity }\n            }\n          });\n\n          // Find or create destination inventory\n          const destinationInventory = await tx.inventoryItem.findUnique({\n            where: {\n              productId_shopId: {\n                productId: item.productId,\n                shopId: transfer.destinationShopId\n              }\n            }\n          });\n\n          if (destinationInventory) {\n            // Calculate new shop-specific WAC\n            const newShopSpecificCost = calculateWeightedAverageCost(\n              destinationInventory.quantity,\n              parseFloat(destinationInventory.shopSpecificCost),\n              item.quantity,\n              parseFloat(item.product.weightedAverageCost)\n            );\n\n            // Update existing inventory\n            await tx.inventoryItem.update({\n              where: {\n                productId_shopId: {\n                  productId: item.productId,\n                  shopId: transfer.destinationShopId\n                }\n              },\n              data: {\n                quantity: { increment: item.quantity },\n                shopSpecificCost: newShopSpecificCost.toFixed(2)\n              }\n            });\n          } else {\n            // Create new inventory item\n            await tx.inventoryItem.create({\n              data: {\n                productId: item.productId,\n                shopId: transfer.destinationShopId,\n                quantity: item.quantity,\n                shopSpecificCost: item.product.weightedAverageCost\n              }\n            });\n          }\n\n          affectedShopIds.add(transfer.sourceShopId);\n          affectedShopIds.add(transfer.destinationShopId);\n          affectedProductIds.add(item.productId);\n        }\n\n        // Mark transfer as completed\n        await tx.inventoryTransfer.update({\n          where: { id: transfer.id },\n          data: {\n            status: 'completed',\n            completedAt: new Date()\n          }\n        });\n\n        results.push({ id: transfer.id, success: true });\n      } catch (error) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    // Batch update global WAC for all affected products\n    for (const productId of affectedProductIds) {\n      const allInventories = await tx.inventoryItem.findMany({\n        where: {\n          productId,\n          quantity: { gt: 0 }\n        }\n      });\n\n      if (allInventories.length > 0) {\n        let totalValue = 0;\n        let totalQuantity = 0;\n\n        for (const inventory of allInventories) {\n          totalValue += inventory.quantity * parseFloat(inventory.shopSpecificCost);\n          totalQuantity += inventory.quantity;\n        }\n\n        const newGlobalWAC = totalQuantity > 0 ? totalValue / totalQuantity : 0;\n\n        await tx.product.update({\n          where: { id: productId },\n          data: { weightedAverageCost: newGlobalWAC.toFixed(2) }\n        });\n      }\n    }\n  });\n\n  // Invalidate cache for affected shops\n  await transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));\n\n  return results;\n};\n\n// Batch cancel transfers\nconst batchCancelTransfers = async (transferIds: number[], userId: number) => {\n  const results: { id: number; success: boolean; error?: string }[] = [];\n\n  await prisma.$transaction(async (tx) => {\n    const transfers = await tx.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds },\n        status: 'pending'\n      },\n      include: {\n        sourceShop: true,\n        destinationShop: true\n      }\n    });\n\n    for (const transfer of transfers) {\n      // Check permissions\n      const hasPermission = await tx.userShop.findFirst({\n        where: {\n          userId,\n          shopId: { in: [transfer.sourceShopId, transfer.destinationShopId] }\n        }\n      });\n\n      if (!hasPermission) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: 'Insufficient permissions'\n        });\n        continue;\n      }\n\n      try {\n        await tx.inventoryTransfer.update({\n          where: { id: transfer.id },\n          data: {\n            status: 'cancelled',\n            completedAt: new Date()\n          }\n        });\n\n        results.push({ id: transfer.id, success: true });\n      } catch (error) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n  });\n\n  // Invalidate transfer cache\n  await transferCacheService.invalidateTransferCache();\n\n  return results;\n};\n\n// Batch create transfers\nconst batchCreateTransfers = async (transfers: BatchCreateRequest['transfers'], userId: number) => {\n  const results: { success: boolean; transferId?: number; error?: string }[] = [];\n  const affectedShopIds = new Set<number>();\n\n  await prisma.$transaction(async (tx) => {\n    for (const transferData of transfers) {\n      try {\n        // Validate permissions\n        const hasPermission = await tx.userShop.findFirst({\n          where: {\n            userId,\n            shopId: { in: [transferData.sourceShopId, transferData.destinationShopId] }\n          }\n        });\n\n        if (!hasPermission) {\n          results.push({\n            success: false,\n            error: 'Insufficient permissions for one or both shops'\n          });\n          continue;\n        }\n\n        // Validate inventory availability\n        for (const item of transferData.items) {\n          const inventory = await tx.inventoryItem.findUnique({\n            where: {\n              productId_shopId: {\n                productId: item.productId,\n                shopId: transferData.sourceShopId\n              }\n            }\n          });\n\n          if (!inventory || inventory.quantity < item.quantity) {\n            results.push({\n              success: false,\n              error: `Insufficient inventory for product ${item.productId}`\n            });\n            continue;\n          }\n        }\n\n        // Create transfer\n        const transfer = await tx.inventoryTransfer.create({\n          data: {\n            sourceShopId: transferData.sourceShopId,\n            destinationShopId: transferData.destinationShopId,\n            initiatedBy: userId,\n            status: 'pending'\n          }\n        });\n\n        // Create transfer items\n        await tx.transferItem.createMany({\n          data: transferData.items.map(item => ({\n            transferId: transfer.id,\n            productId: item.productId,\n            quantity: item.quantity\n          }))\n        });\n\n        affectedShopIds.add(transferData.sourceShopId);\n        affectedShopIds.add(transferData.destinationShopId);\n\n        results.push({\n          success: true,\n          transferId: transfer.id\n        });\n      } catch (error) {\n        results.push({\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n  });\n\n  // Invalidate cache for affected shops\n  await transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));\n\n  return results;\n};\n\n// POST handler for batch operations\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    if (!token) {\n      return NextResponse.json(\n        { success: false, error: 'Authorization token required' },\n        { status: 401 }\n      );\n    }\n\n    const decoded = await verifyToken(token);\n    if (!decoded?.userId) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { action } = body;\n\n    let results;\n\n    switch (action) {\n      case 'complete': {\n        const validatedData = batchCompleteSchema.parse(body);\n        results = await batchCompleteTransfers(validatedData.transferIds, decoded.userId);\n        break;\n      }\n      case 'cancel': {\n        const validatedData = batchCancelSchema.parse(body);\n        results = await batchCancelTransfers(validatedData.transferIds, decoded.userId);\n        break;\n      }\n      case 'create': {\n        const validatedData = batchCreateSchema.parse(body);\n        results = await batchCreateTransfers(validatedData.transfers, decoded.userId);\n        break;\n      }\n      default:\n        return NextResponse.json(\n          { success: false, error: 'Invalid action. Must be \"complete\", \"cancel\", or \"create\"' },\n          { status: 400 }\n        );\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const failureCount = results.filter(r => !r.success).length;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results,\n        summary: {\n          total: results.length,\n          successful: successCount,\n          failed: failureCount\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Batch transfer operation error:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Validation error',\n          details: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET handler for batch operation status\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    if (!token) {\n      return NextResponse.json(\n        { success: false, error: 'Authorization token required' },\n        { status: 401 }\n      );\n    }\n\n    const decoded = await verifyToken(token);\n    if (!decoded?.userId) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const transferIds = searchParams.get('ids')?.split(',').map(Number) || [];\n\n    if (transferIds.length === 0) {\n      return NextResponse.json(\n        { success: false, error: 'Transfer IDs required' },\n        { status: 400 }\n      );\n    }\n\n    const transfers = await prisma.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds }\n      },\n      select: {\n        id: true,\n        status: true,\n        createdAt: true,\n        completedAt: true,\n        sourceShop: { select: { name: true } },\n        destinationShop: { select: { name: true } },\n        _count: {\n          select: { items: true }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: transfers.map(transfer => ({\n        id: transfer.id,\n        status: transfer.status,\n        createdAt: transfer.createdAt,\n        completedAt: transfer.completedAt,\n        sourceShopName: transfer.sourceShop.name,\n        destinationShopName: transfer.destinationShop.name,\n        itemCount: transfer._count.items\n      }))\n    });\n  } catch (error) {\n    console.error('Batch transfer status error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "prisma", "PrismaClient", "batchCompleteSchema", "z", "object", "transferIds", "array", "number", "positive", "min", "max", "action", "literal", "batchCancelSchema", "batchCreateSchema", "transfers", "sourceShopId", "destinationShopId", "items", "productId", "quantity", "calculateWeightedAverageCost", "currentQuantity", "currentCost", "addedQuantity", "addedCost", "totalValue", "totalQuantity", "batchCompleteTransfers", "userId", "results", "affectedShopIds", "Set", "affectedProductIds", "$transaction", "tx", "inventoryTransfer", "findMany", "where", "id", "in", "status", "include", "product", "sourceShop", "destinationShop", "transfer", "hasPermission", "userShop", "findFirst", "shopId", "push", "success", "error", "item", "inventoryItem", "update", "productId_shopId", "data", "decrement", "destinationInventory", "findUnique", "newShopSpecificCost", "parseFloat", "shopSpecificCost", "weightedAverageCost", "increment", "toFixed", "create", "add", "completedAt", "Date", "Error", "message", "allInventories", "gt", "length", "inventory", "newGlobalWAC", "transferCacheService", "invalidateTransferCache", "undefined", "Array", "from", "batchCancelTransfers", "batchCreateTransfers", "transferData", "initiatedBy", "transferItem", "createMany", "map", "transferId", "request", "token", "headers", "get", "replace", "NextResponse", "json", "decoded", "verifyToken", "body", "validatedData", "parse", "successCount", "filter", "r", "failureCount", "summary", "total", "successful", "failed", "console", "ZodError", "details", "errors", "searchParams", "URL", "url", "split", "Number", "select", "createdAt", "name", "_count", "sourceShopName", "destinationShopName", "itemCount"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7f4be64996a4f7099aee9552f1fc609b202d4334"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g88sjidbo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_g88sjidbo();
cov_g88sjidbo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_g88sjidbo().f[0]++;
  cov_g88sjidbo().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_g88sjidbo().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_g88sjidbo().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_g88sjidbo().f[1]++;
    cov_g88sjidbo().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_g88sjidbo().f[2]++;
    cov_g88sjidbo().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_g88sjidbo().s[6]++, require("next/server"));
const _client =
/* istanbul ignore next */
(cov_g88sjidbo().s[7]++, require("@prisma/client"));
const _auth =
/* istanbul ignore next */
(cov_g88sjidbo().s[8]++, require("../../../../../lib/auth"));
const _transferCache =
/* istanbul ignore next */
(cov_g88sjidbo().s[9]++, require("../../../../../lib/transferCache"));
const _zod =
/* istanbul ignore next */
(cov_g88sjidbo().s[10]++, require("zod"));
const prisma =
/* istanbul ignore next */
(cov_g88sjidbo().s[11]++, new _client.PrismaClient());
// Validation schemas
const batchCompleteSchema =
/* istanbul ignore next */
(cov_g88sjidbo().s[12]++, _zod.z.object({
  transferIds: _zod.z.array(_zod.z.number().positive()).min(1).max(50),
  action: _zod.z.literal("complete")
}));
const batchCancelSchema =
/* istanbul ignore next */
(cov_g88sjidbo().s[13]++, _zod.z.object({
  transferIds: _zod.z.array(_zod.z.number().positive()).min(1).max(50),
  action: _zod.z.literal("cancel")
}));
const batchCreateSchema =
/* istanbul ignore next */
(cov_g88sjidbo().s[14]++, _zod.z.object({
  transfers: _zod.z.array(_zod.z.object({
    sourceShopId: _zod.z.number().positive(),
    destinationShopId: _zod.z.number().positive(),
    items: _zod.z.array(_zod.z.object({
      productId: _zod.z.number().positive(),
      quantity: _zod.z.number().positive()
    })).min(1)
  })).min(1).max(20) // Limit batch size
}));
// Helper function to calculate weighted average cost
/* istanbul ignore next */
cov_g88sjidbo().s[15]++;
const calculateWeightedAverageCost = (currentQuantity, currentCost, addedQuantity, addedCost) => {
  /* istanbul ignore next */
  cov_g88sjidbo().f[3]++;
  cov_g88sjidbo().s[16]++;
  if (currentQuantity + addedQuantity === 0) {
    /* istanbul ignore next */
    cov_g88sjidbo().b[0][0]++;
    cov_g88sjidbo().s[17]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_g88sjidbo().b[0][1]++;
  }
  const totalValue =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[18]++, currentQuantity * currentCost + addedQuantity * addedCost);
  const totalQuantity =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[19]++, currentQuantity + addedQuantity);
  /* istanbul ignore next */
  cov_g88sjidbo().s[20]++;
  return totalValue / totalQuantity;
};
// Batch complete transfers
/* istanbul ignore next */
cov_g88sjidbo().s[21]++;
const batchCompleteTransfers = async (transferIds, userId) => {
  /* istanbul ignore next */
  cov_g88sjidbo().f[4]++;
  const results =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[22]++, []);
  const affectedShopIds =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[23]++, new Set());
  const affectedProductIds =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[24]++, new Set());
  /* istanbul ignore next */
  cov_g88sjidbo().s[25]++;
  await prisma.$transaction(async tx => {
    /* istanbul ignore next */
    cov_g88sjidbo().f[5]++;
    // Fetch all transfers with their items in one query
    const transfers =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[26]++, await tx.inventoryTransfer.findMany({
      where: {
        id: {
          in: transferIds
        },
        status: "pending"
      },
      include: {
        items: {
          include: {
            product: true
          }
        },
        sourceShop: true,
        destinationShop: true
      }
    }));
    // Validate permissions for all transfers
    /* istanbul ignore next */
    cov_g88sjidbo().s[27]++;
    for (const transfer of transfers) {
      const hasPermission =
      /* istanbul ignore next */
      (cov_g88sjidbo().s[28]++, await tx.userShop.findFirst({
        where: {
          userId,
          shopId: {
            in: [transfer.sourceShopId, transfer.destinationShopId]
          }
        }
      }));
      /* istanbul ignore next */
      cov_g88sjidbo().s[29]++;
      if (!hasPermission) {
        /* istanbul ignore next */
        cov_g88sjidbo().b[1][0]++;
        cov_g88sjidbo().s[30]++;
        results.push({
          id: transfer.id,
          success: false,
          error: "Insufficient permissions"
        });
        /* istanbul ignore next */
        cov_g88sjidbo().s[31]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_g88sjidbo().b[1][1]++;
      }
      cov_g88sjidbo().s[32]++;
      try {
        /* istanbul ignore next */
        cov_g88sjidbo().s[33]++;
        // Process each transfer item
        for (const item of transfer.items) {
          /* istanbul ignore next */
          cov_g88sjidbo().s[34]++;
          // Update source inventory (decrease)
          await tx.inventoryItem.update({
            where: {
              productId_shopId: {
                productId: item.productId,
                shopId: transfer.sourceShopId
              }
            },
            data: {
              quantity: {
                decrement: item.quantity
              }
            }
          });
          // Find or create destination inventory
          const destinationInventory =
          /* istanbul ignore next */
          (cov_g88sjidbo().s[35]++, await tx.inventoryItem.findUnique({
            where: {
              productId_shopId: {
                productId: item.productId,
                shopId: transfer.destinationShopId
              }
            }
          }));
          /* istanbul ignore next */
          cov_g88sjidbo().s[36]++;
          if (destinationInventory) {
            /* istanbul ignore next */
            cov_g88sjidbo().b[2][0]++;
            // Calculate new shop-specific WAC
            const newShopSpecificCost =
            /* istanbul ignore next */
            (cov_g88sjidbo().s[37]++, calculateWeightedAverageCost(destinationInventory.quantity, parseFloat(destinationInventory.shopSpecificCost), item.quantity, parseFloat(item.product.weightedAverageCost)));
            // Update existing inventory
            /* istanbul ignore next */
            cov_g88sjidbo().s[38]++;
            await tx.inventoryItem.update({
              where: {
                productId_shopId: {
                  productId: item.productId,
                  shopId: transfer.destinationShopId
                }
              },
              data: {
                quantity: {
                  increment: item.quantity
                },
                shopSpecificCost: newShopSpecificCost.toFixed(2)
              }
            });
          } else {
            /* istanbul ignore next */
            cov_g88sjidbo().b[2][1]++;
            cov_g88sjidbo().s[39]++;
            // Create new inventory item
            await tx.inventoryItem.create({
              data: {
                productId: item.productId,
                shopId: transfer.destinationShopId,
                quantity: item.quantity,
                shopSpecificCost: item.product.weightedAverageCost
              }
            });
          }
          /* istanbul ignore next */
          cov_g88sjidbo().s[40]++;
          affectedShopIds.add(transfer.sourceShopId);
          /* istanbul ignore next */
          cov_g88sjidbo().s[41]++;
          affectedShopIds.add(transfer.destinationShopId);
          /* istanbul ignore next */
          cov_g88sjidbo().s[42]++;
          affectedProductIds.add(item.productId);
        }
        // Mark transfer as completed
        /* istanbul ignore next */
        cov_g88sjidbo().s[43]++;
        await tx.inventoryTransfer.update({
          where: {
            id: transfer.id
          },
          data: {
            status: "completed",
            completedAt: new Date()
          }
        });
        /* istanbul ignore next */
        cov_g88sjidbo().s[44]++;
        results.push({
          id: transfer.id,
          success: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_g88sjidbo().s[45]++;
        results.push({
          id: transfer.id,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_g88sjidbo().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_g88sjidbo().b[3][1]++, "Unknown error")
        });
      }
    }
    // Batch update global WAC for all affected products
    /* istanbul ignore next */
    cov_g88sjidbo().s[46]++;
    for (const productId of affectedProductIds) {
      const allInventories =
      /* istanbul ignore next */
      (cov_g88sjidbo().s[47]++, await tx.inventoryItem.findMany({
        where: {
          productId,
          quantity: {
            gt: 0
          }
        }
      }));
      /* istanbul ignore next */
      cov_g88sjidbo().s[48]++;
      if (allInventories.length > 0) {
        /* istanbul ignore next */
        cov_g88sjidbo().b[4][0]++;
        let totalValue =
        /* istanbul ignore next */
        (cov_g88sjidbo().s[49]++, 0);
        let totalQuantity =
        /* istanbul ignore next */
        (cov_g88sjidbo().s[50]++, 0);
        /* istanbul ignore next */
        cov_g88sjidbo().s[51]++;
        for (const inventory of allInventories) {
          /* istanbul ignore next */
          cov_g88sjidbo().s[52]++;
          totalValue += inventory.quantity * parseFloat(inventory.shopSpecificCost);
          /* istanbul ignore next */
          cov_g88sjidbo().s[53]++;
          totalQuantity += inventory.quantity;
        }
        const newGlobalWAC =
        /* istanbul ignore next */
        (cov_g88sjidbo().s[54]++, totalQuantity > 0 ?
        /* istanbul ignore next */
        (cov_g88sjidbo().b[5][0]++, totalValue / totalQuantity) :
        /* istanbul ignore next */
        (cov_g88sjidbo().b[5][1]++, 0));
        /* istanbul ignore next */
        cov_g88sjidbo().s[55]++;
        await tx.product.update({
          where: {
            id: productId
          },
          data: {
            weightedAverageCost: newGlobalWAC.toFixed(2)
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_g88sjidbo().b[4][1]++;
      }
    }
  });
  // Invalidate cache for affected shops
  /* istanbul ignore next */
  cov_g88sjidbo().s[56]++;
  await _transferCache.transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));
  /* istanbul ignore next */
  cov_g88sjidbo().s[57]++;
  return results;
};
// Batch cancel transfers
/* istanbul ignore next */
cov_g88sjidbo().s[58]++;
const batchCancelTransfers = async (transferIds, userId) => {
  /* istanbul ignore next */
  cov_g88sjidbo().f[6]++;
  const results =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[59]++, []);
  /* istanbul ignore next */
  cov_g88sjidbo().s[60]++;
  await prisma.$transaction(async tx => {
    /* istanbul ignore next */
    cov_g88sjidbo().f[7]++;
    const transfers =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[61]++, await tx.inventoryTransfer.findMany({
      where: {
        id: {
          in: transferIds
        },
        status: "pending"
      },
      include: {
        sourceShop: true,
        destinationShop: true
      }
    }));
    /* istanbul ignore next */
    cov_g88sjidbo().s[62]++;
    for (const transfer of transfers) {
      // Check permissions
      const hasPermission =
      /* istanbul ignore next */
      (cov_g88sjidbo().s[63]++, await tx.userShop.findFirst({
        where: {
          userId,
          shopId: {
            in: [transfer.sourceShopId, transfer.destinationShopId]
          }
        }
      }));
      /* istanbul ignore next */
      cov_g88sjidbo().s[64]++;
      if (!hasPermission) {
        /* istanbul ignore next */
        cov_g88sjidbo().b[6][0]++;
        cov_g88sjidbo().s[65]++;
        results.push({
          id: transfer.id,
          success: false,
          error: "Insufficient permissions"
        });
        /* istanbul ignore next */
        cov_g88sjidbo().s[66]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_g88sjidbo().b[6][1]++;
      }
      cov_g88sjidbo().s[67]++;
      try {
        /* istanbul ignore next */
        cov_g88sjidbo().s[68]++;
        await tx.inventoryTransfer.update({
          where: {
            id: transfer.id
          },
          data: {
            status: "cancelled",
            completedAt: new Date()
          }
        });
        /* istanbul ignore next */
        cov_g88sjidbo().s[69]++;
        results.push({
          id: transfer.id,
          success: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_g88sjidbo().s[70]++;
        results.push({
          id: transfer.id,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_g88sjidbo().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_g88sjidbo().b[7][1]++, "Unknown error")
        });
      }
    }
  });
  // Invalidate transfer cache
  /* istanbul ignore next */
  cov_g88sjidbo().s[71]++;
  await _transferCache.transferCacheService.invalidateTransferCache();
  /* istanbul ignore next */
  cov_g88sjidbo().s[72]++;
  return results;
};
// Batch create transfers
/* istanbul ignore next */
cov_g88sjidbo().s[73]++;
const batchCreateTransfers = async (transfers, userId) => {
  /* istanbul ignore next */
  cov_g88sjidbo().f[8]++;
  const results =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[74]++, []);
  const affectedShopIds =
  /* istanbul ignore next */
  (cov_g88sjidbo().s[75]++, new Set());
  /* istanbul ignore next */
  cov_g88sjidbo().s[76]++;
  await prisma.$transaction(async tx => {
    /* istanbul ignore next */
    cov_g88sjidbo().f[9]++;
    cov_g88sjidbo().s[77]++;
    for (const transferData of transfers) {
      /* istanbul ignore next */
      cov_g88sjidbo().s[78]++;
      try {
        // Validate permissions
        const hasPermission =
        /* istanbul ignore next */
        (cov_g88sjidbo().s[79]++, await tx.userShop.findFirst({
          where: {
            userId,
            shopId: {
              in: [transferData.sourceShopId, transferData.destinationShopId]
            }
          }
        }));
        /* istanbul ignore next */
        cov_g88sjidbo().s[80]++;
        if (!hasPermission) {
          /* istanbul ignore next */
          cov_g88sjidbo().b[8][0]++;
          cov_g88sjidbo().s[81]++;
          results.push({
            success: false,
            error: "Insufficient permissions for one or both shops"
          });
          /* istanbul ignore next */
          cov_g88sjidbo().s[82]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_g88sjidbo().b[8][1]++;
        }
        // Validate inventory availability
        cov_g88sjidbo().s[83]++;
        for (const item of transferData.items) {
          const inventory =
          /* istanbul ignore next */
          (cov_g88sjidbo().s[84]++, await tx.inventoryItem.findUnique({
            where: {
              productId_shopId: {
                productId: item.productId,
                shopId: transferData.sourceShopId
              }
            }
          }));
          /* istanbul ignore next */
          cov_g88sjidbo().s[85]++;
          if (
          /* istanbul ignore next */
          (cov_g88sjidbo().b[10][0]++, !inventory) ||
          /* istanbul ignore next */
          (cov_g88sjidbo().b[10][1]++, inventory.quantity < item.quantity)) {
            /* istanbul ignore next */
            cov_g88sjidbo().b[9][0]++;
            cov_g88sjidbo().s[86]++;
            results.push({
              success: false,
              error: `Insufficient inventory for product ${item.productId}`
            });
            /* istanbul ignore next */
            cov_g88sjidbo().s[87]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_g88sjidbo().b[9][1]++;
          }
        }
        // Create transfer
        const transfer =
        /* istanbul ignore next */
        (cov_g88sjidbo().s[88]++, await tx.inventoryTransfer.create({
          data: {
            sourceShopId: transferData.sourceShopId,
            destinationShopId: transferData.destinationShopId,
            initiatedBy: userId,
            status: "pending"
          }
        }));
        // Create transfer items
        /* istanbul ignore next */
        cov_g88sjidbo().s[89]++;
        await tx.transferItem.createMany({
          data: transferData.items.map(item => {
            /* istanbul ignore next */
            cov_g88sjidbo().f[10]++;
            cov_g88sjidbo().s[90]++;
            return {
              transferId: transfer.id,
              productId: item.productId,
              quantity: item.quantity
            };
          })
        });
        /* istanbul ignore next */
        cov_g88sjidbo().s[91]++;
        affectedShopIds.add(transferData.sourceShopId);
        /* istanbul ignore next */
        cov_g88sjidbo().s[92]++;
        affectedShopIds.add(transferData.destinationShopId);
        /* istanbul ignore next */
        cov_g88sjidbo().s[93]++;
        results.push({
          success: true,
          transferId: transfer.id
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_g88sjidbo().s[94]++;
        results.push({
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_g88sjidbo().b[11][0]++, error.message) :
          /* istanbul ignore next */
          (cov_g88sjidbo().b[11][1]++, "Unknown error")
        });
      }
    }
  });
  // Invalidate cache for affected shops
  /* istanbul ignore next */
  cov_g88sjidbo().s[95]++;
  await _transferCache.transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));
  /* istanbul ignore next */
  cov_g88sjidbo().s[96]++;
  return results;
};
async function POST(request) {
  /* istanbul ignore next */
  cov_g88sjidbo().f[11]++;
  cov_g88sjidbo().s[97]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[98]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_g88sjidbo().s[99]++;
    if (!token) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[12][0]++;
      cov_g88sjidbo().s[100]++;
      return _server.NextResponse.json({
        success: false,
        error: "Authorization token required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[12][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[101]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_g88sjidbo().s[102]++;
    if (!decoded?.userId) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[13][0]++;
      cov_g88sjidbo().s[103]++;
      return _server.NextResponse.json({
        success: false,
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[13][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[104]++, await request.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[105]++, body);
    let results;
    /* istanbul ignore next */
    cov_g88sjidbo().s[106]++;
    switch (action) {
      case "complete":
        /* istanbul ignore next */
        cov_g88sjidbo().b[14][0]++;
        {
          const validatedData =
          /* istanbul ignore next */
          (cov_g88sjidbo().s[107]++, batchCompleteSchema.parse(body));
          /* istanbul ignore next */
          cov_g88sjidbo().s[108]++;
          results = await batchCompleteTransfers(validatedData.transferIds, decoded.userId);
          /* istanbul ignore next */
          cov_g88sjidbo().s[109]++;
          break;
        }
      case "cancel":
        /* istanbul ignore next */
        cov_g88sjidbo().b[14][1]++;
        {
          const validatedData =
          /* istanbul ignore next */
          (cov_g88sjidbo().s[110]++, batchCancelSchema.parse(body));
          /* istanbul ignore next */
          cov_g88sjidbo().s[111]++;
          results = await batchCancelTransfers(validatedData.transferIds, decoded.userId);
          /* istanbul ignore next */
          cov_g88sjidbo().s[112]++;
          break;
        }
      case "create":
        /* istanbul ignore next */
        cov_g88sjidbo().b[14][2]++;
        {
          const validatedData =
          /* istanbul ignore next */
          (cov_g88sjidbo().s[113]++, batchCreateSchema.parse(body));
          /* istanbul ignore next */
          cov_g88sjidbo().s[114]++;
          results = await batchCreateTransfers(validatedData.transfers, decoded.userId);
          /* istanbul ignore next */
          cov_g88sjidbo().s[115]++;
          break;
        }
      default:
        /* istanbul ignore next */
        cov_g88sjidbo().b[14][3]++;
        cov_g88sjidbo().s[116]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Invalid action. Must be "complete", "cancel", or "create"'
        }, {
          status: 400
        });
    }
    const successCount =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[117]++, results.filter(r => {
      /* istanbul ignore next */
      cov_g88sjidbo().f[12]++;
      cov_g88sjidbo().s[118]++;
      return r.success;
    }).length);
    const failureCount =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[119]++, results.filter(r => {
      /* istanbul ignore next */
      cov_g88sjidbo().f[13]++;
      cov_g88sjidbo().s[120]++;
      return !r.success;
    }).length);
    /* istanbul ignore next */
    cov_g88sjidbo().s[121]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        results,
        summary: {
          total: results.length,
          successful: successCount,
          failed: failureCount
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_g88sjidbo().s[122]++;
    console.error("Batch transfer operation error:", error);
    /* istanbul ignore next */
    cov_g88sjidbo().s[123]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[15][0]++;
      cov_g88sjidbo().s[124]++;
      return _server.NextResponse.json({
        success: false,
        error: "Validation error",
        details: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[15][1]++;
    }
    cov_g88sjidbo().s[125]++;
    return _server.NextResponse.json({
      success: false,
      error: "Internal server error"
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_g88sjidbo().f[14]++;
  cov_g88sjidbo().s[126]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[127]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_g88sjidbo().s[128]++;
    if (!token) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[16][0]++;
      cov_g88sjidbo().s[129]++;
      return _server.NextResponse.json({
        success: false,
        error: "Authorization token required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[16][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[130]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_g88sjidbo().s[131]++;
    if (!decoded?.userId) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[17][0]++;
      cov_g88sjidbo().s[132]++;
      return _server.NextResponse.json({
        success: false,
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[17][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[133]++, new URL(request.url));
    const transferIds =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[134]++,
    /* istanbul ignore next */
    (cov_g88sjidbo().b[18][0]++, searchParams.get("ids")?.split(",").map(Number)) ||
    /* istanbul ignore next */
    (cov_g88sjidbo().b[18][1]++, []));
    /* istanbul ignore next */
    cov_g88sjidbo().s[135]++;
    if (transferIds.length === 0) {
      /* istanbul ignore next */
      cov_g88sjidbo().b[19][0]++;
      cov_g88sjidbo().s[136]++;
      return _server.NextResponse.json({
        success: false,
        error: "Transfer IDs required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_g88sjidbo().b[19][1]++;
    }
    const transfers =
    /* istanbul ignore next */
    (cov_g88sjidbo().s[137]++, await prisma.inventoryTransfer.findMany({
      where: {
        id: {
          in: transferIds
        }
      },
      select: {
        id: true,
        status: true,
        createdAt: true,
        completedAt: true,
        sourceShop: {
          select: {
            name: true
          }
        },
        destinationShop: {
          select: {
            name: true
          }
        },
        _count: {
          select: {
            items: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_g88sjidbo().s[138]++;
    return _server.NextResponse.json({
      success: true,
      data: transfers.map(transfer => {
        /* istanbul ignore next */
        cov_g88sjidbo().f[15]++;
        cov_g88sjidbo().s[139]++;
        return {
          id: transfer.id,
          status: transfer.status,
          createdAt: transfer.createdAt,
          completedAt: transfer.completedAt,
          sourceShopName: transfer.sourceShop.name,
          destinationShopName: transfer.destinationShop.name,
          itemCount: transfer._count.items
        };
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_g88sjidbo().s[140]++;
    console.error("Batch transfer status error:", error);
    /* istanbul ignore next */
    cov_g88sjidbo().s[141]++;
    return _server.NextResponse.json({
      success: false,
      error: "Internal server error"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,