{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport bcrypt from 'bcryptjs';\nimport { randomUUID } from 'crypto';\n\n// GET: List all users\nexport async function GET(req: NextRequest) {\n    // Check for 'user:manage' permission\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                allowedAccounts: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            users\n        });\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch users' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new user\nexport async function POST(req: NextRequest) {\n    // Temporarily bypass permission check for adding users\n    // const permissionError = await requirePermission('user:manage')(req);\n    // if (permissionError) {\n    //     return permissionError;\n    // }\n\n    try {\n        const userData = await req.json();\n\n        console.log('Received user data:', userData); // Log the incoming data\n\n        // Validation examples\n        if (!userData.name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.password || userData.password.length < 8) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 8 characters' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.shop || userData.shop === '' || userData.shop === 'undefined') {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.permissions || userData.permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Validate shop ID (keep as string since it's a cuid)\n        const shopId = userData.shop;\n        \n        // Verify the shop exists in the database\n        const shopExists = await prisma.shop.findUnique({\n            where: { id: shopId }\n        });\n        \n        if (!shopExists) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid shop ID provided - shop does not exist' },\n                { status: 400 }\n            );\n        }\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(userData.password, 12);\n\n        // Ensure shop:assigned_only permission exists if needed\n        let shopAssignedPermissionId = null;\n        if (userData.permissions.includes('shop:assigned_only')) {\n            const shopAssignedPermission = await prisma.permission.upsert({\n                where: { name: 'shop:assigned_only' },\n                update: {},\n                create: {\n                    name: 'shop:assigned_only',\n                    description: 'Restricts user access to only their assigned shop'\n                }\n            });\n            shopAssignedPermissionId = shopAssignedPermission.id.toString();\n            \n            // Replace the string 'shop:assigned_only' with the actual permission ID\n            userData.permissions = userData.permissions.map(p => \n                p === 'shop:assigned_only' ? shopAssignedPermissionId : p\n            );\n        }\n\n        // Determine role based on permissions\n        let roleId = null;\n        let roleName = null;\n        \n        // Check if user has admin permissions\n        if (userData.permissions.includes('ALL') || \n            userData.permissions.some(p => {\n                // Check if any permission is admin:all (either by name or ID)\n                if (p === 'admin:all') return true;\n                // Check if it's the admin:all permission ID\n                // We need to look up the admin:all permission ID\n                return false; // We'll handle this below\n            })) {\n            // Create or find Admin role\n            const adminRole = await prisma.role.upsert({\n                where: { name: 'Admin' },\n                update: {},\n                create: {\n                    id: 'admin-role-id',\n                    name: 'Admin',\n                    description: 'Full system access with all permissions'\n                }\n            });\n            roleId = adminRole.id;\n            roleName = 'Admin';\n        }\n        // Check if user has shop staff permissions\n        else if (shopAssignedPermissionId && userData.permissions.includes(shopAssignedPermissionId)) {\n            // Create or find Shop Staff role\n            const shopStaffRole = await prisma.role.upsert({\n                where: { name: 'Shop Staff' },\n                update: {},\n                create: {\n                    id: 'shop-staff-role-id',\n                    name: 'Shop Staff',\n                    description: 'Limited access for shop staff members'\n                }\n            });\n            roleId = shopStaffRole.id;\n            roleName = 'Shop Staff';\n        }\n        // If no specific role determined, check for admin:all permission by ID\n        else {\n            // Get the admin:all permission to check if user has it\n            const adminAllPermission = await prisma.permission.findUnique({\n                where: { name: 'admin:all' }\n            });\n            \n            if (adminAllPermission && userData.permissions.includes(adminAllPermission.id.toString())) {\n                // Create or find Admin role\n                const adminRole = await prisma.role.upsert({\n                    where: { name: 'Admin' },\n                    update: {},\n                    create: {\n                        id: 'admin-role-id',\n                        name: 'Admin',\n                        description: 'Full system access with all permissions'\n                    }\n                });\n                roleId = adminRole.id;\n                roleName = 'Admin';\n            }\n        }\n\n        // Prepare user data\n        const userData_final = {\n            id: randomUUID(), // Generate UUID manually\n            name: userData.name,\n            email: userData.email,\n            password: hashedPassword,\n            roleId: roleId,\n            roleName: roleName,\n            shopId: shopId,\n            permissions: userData.permissions || [],\n            allowedAccounts: userData.allowedAccounts || [],\n            isActive: true\n        };\n\n        console.log('Final user data to be saved:', userData_final); // Log the final data\n\n        // Create the user\n        const user = await prisma.user.create({\n            data: userData_final,\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                shopId: true,\n                permissions: true,\n                createdAt: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        // Return success response\n        return NextResponse.json({\n            success: true,\n            message: 'User created successfully',\n            data: user\n        });\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create user' },\n            { status: 500 }\n        );\n    }\n}"],"names":["GET","POST","req","permissionError","requirePermission","users","prisma","user","findMany","select","id","name","email","phone","isActive","roleId","shopId","roleName","permissions","allowedAccounts","createdAt","updatedAt","role","shop","NextResponse","json","success","error","console","message","status","userData","log","password","length","shopExists","findUnique","where","hashedPassword","bcrypt","hash","shopAssignedPermissionId","includes","shopAssignedPermission","permission","upsert","update","create","description","toString","map","p","some","adminRole","shopStaffRole","adminAllPermission","userData_final","randomUUID","data"],"mappings":";;;;;;;;;;;IAQsBA,GAAG;eAAHA;;IAmDAC,IAAI;eAAJA;;;wBA3DoB;+DACvB;4BACe;iEAEf;wBACQ;;;;;;AAGpB,eAAeD,IAAIE,GAAgB;IACtC,qCAAqC;IACrC,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeF;IAC/D,IAAIC,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,MAAME,QAAQ,MAAMC,eAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,QAAQ;gBACJC,IAAI;gBACJC,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,UAAU;gBACVC,QAAQ;gBACRC,QAAQ;gBACRC,UAAU;gBACVC,aAAa;gBACbC,iBAAiB;gBACjBC,WAAW;gBACXC,WAAW;gBACXC,MAAM;oBACFb,QAAQ;wBACJC,IAAI;wBACJC,MAAM;oBACV;gBACJ;gBACAY,MAAM;oBACFd,QAAQ;wBACJC,IAAI;wBACJC,MAAM;oBACV;gBACJ;YACJ;QACJ;QAEA,OAAOa,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTrB;QACJ;IACJ,EAAE,OAAOsB,OAAO;QACZC,QAAQD,KAAK,CAAC,yBAAyBA;QACvC,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAe7B,KAAKC,GAAgB;IACvC,uDAAuD;IACvD,uEAAuE;IACvE,yBAAyB;IACzB,8BAA8B;IAC9B,IAAI;IAEJ,IAAI;QACA,MAAM6B,WAAW,MAAM7B,IAAIuB,IAAI;QAE/BG,QAAQI,GAAG,CAAC,uBAAuBD,WAAW,wBAAwB;QAEtE,sBAAsB;QACtB,IAAI,CAACA,SAASpB,IAAI,EAAE;YAChB,OAAOa,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAmB,GAC9C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASnB,KAAK,EAAE;YACjB,OAAOY,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAoB,GAC/C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASE,QAAQ,IAAIF,SAASE,QAAQ,CAACC,MAAM,GAAG,GAAG;YACpD,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAyC,GACpE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASR,IAAI,IAAIQ,SAASR,IAAI,KAAK,MAAMQ,SAASR,IAAI,KAAK,aAAa;YACzE,OAAOC,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAA8B,GACzD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASb,WAAW,IAAIa,SAASb,WAAW,CAACgB,MAAM,KAAK,GAAG;YAC5D,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAsC,GACjE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,sDAAsD;QACtD,MAAMd,SAASe,SAASR,IAAI;QAE5B,yCAAyC;QACzC,MAAMY,aAAa,MAAM7B,eAAM,CAACiB,IAAI,CAACa,UAAU,CAAC;YAC5CC,OAAO;gBAAE3B,IAAIM;YAAO;QACxB;QAEA,IAAI,CAACmB,YAAY;YACb,OAAOX,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAiD,GAC5E;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,oBAAoB;QACpB,MAAMQ,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACT,SAASE,QAAQ,EAAE;QAE5D,wDAAwD;QACxD,IAAIQ,2BAA2B;QAC/B,IAAIV,SAASb,WAAW,CAACwB,QAAQ,CAAC,uBAAuB;YACrD,MAAMC,yBAAyB,MAAMrC,eAAM,CAACsC,UAAU,CAACC,MAAM,CAAC;gBAC1DR,OAAO;oBAAE1B,MAAM;gBAAqB;gBACpCmC,QAAQ,CAAC;gBACTC,QAAQ;oBACJpC,MAAM;oBACNqC,aAAa;gBACjB;YACJ;YACAP,2BAA2BE,uBAAuBjC,EAAE,CAACuC,QAAQ;YAE7D,wEAAwE;YACxElB,SAASb,WAAW,GAAGa,SAASb,WAAW,CAACgC,GAAG,CAACC,CAAAA,IAC5CA,MAAM,uBAAuBV,2BAA2BU;QAEhE;QAEA,sCAAsC;QACtC,IAAIpC,SAAS;QACb,IAAIE,WAAW;QAEf,sCAAsC;QACtC,IAAIc,SAASb,WAAW,CAACwB,QAAQ,CAAC,UAC9BX,SAASb,WAAW,CAACkC,IAAI,CAACD,CAAAA;YACtB,8DAA8D;YAC9D,IAAIA,MAAM,aAAa,OAAO;YAC9B,4CAA4C;YAC5C,iDAAiD;YACjD,OAAO,OAAO,0BAA0B;QAC5C,IAAI;YACJ,4BAA4B;YAC5B,MAAME,YAAY,MAAM/C,eAAM,CAACgB,IAAI,CAACuB,MAAM,CAAC;gBACvCR,OAAO;oBAAE1B,MAAM;gBAAQ;gBACvBmC,QAAQ,CAAC;gBACTC,QAAQ;oBACJrC,IAAI;oBACJC,MAAM;oBACNqC,aAAa;gBACjB;YACJ;YACAjC,SAASsC,UAAU3C,EAAE;YACrBO,WAAW;QACf,OAEK,IAAIwB,4BAA4BV,SAASb,WAAW,CAACwB,QAAQ,CAACD,2BAA2B;YAC1F,iCAAiC;YACjC,MAAMa,gBAAgB,MAAMhD,eAAM,CAACgB,IAAI,CAACuB,MAAM,CAAC;gBAC3CR,OAAO;oBAAE1B,MAAM;gBAAa;gBAC5BmC,QAAQ,CAAC;gBACTC,QAAQ;oBACJrC,IAAI;oBACJC,MAAM;oBACNqC,aAAa;gBACjB;YACJ;YACAjC,SAASuC,cAAc5C,EAAE;YACzBO,WAAW;QACf,OAEK;YACD,uDAAuD;YACvD,MAAMsC,qBAAqB,MAAMjD,eAAM,CAACsC,UAAU,CAACR,UAAU,CAAC;gBAC1DC,OAAO;oBAAE1B,MAAM;gBAAY;YAC/B;YAEA,IAAI4C,sBAAsBxB,SAASb,WAAW,CAACwB,QAAQ,CAACa,mBAAmB7C,EAAE,CAACuC,QAAQ,KAAK;gBACvF,4BAA4B;gBAC5B,MAAMI,YAAY,MAAM/C,eAAM,CAACgB,IAAI,CAACuB,MAAM,CAAC;oBACvCR,OAAO;wBAAE1B,MAAM;oBAAQ;oBACvBmC,QAAQ,CAAC;oBACTC,QAAQ;wBACJrC,IAAI;wBACJC,MAAM;wBACNqC,aAAa;oBACjB;gBACJ;gBACAjC,SAASsC,UAAU3C,EAAE;gBACrBO,WAAW;YACf;QACJ;QAEA,oBAAoB;QACpB,MAAMuC,iBAAiB;YACnB9C,IAAI+C,IAAAA,kBAAU;YACd9C,MAAMoB,SAASpB,IAAI;YACnBC,OAAOmB,SAASnB,KAAK;YACrBqB,UAAUK;YACVvB,QAAQA;YACRE,UAAUA;YACVD,QAAQA;YACRE,aAAaa,SAASb,WAAW,IAAI,EAAE;YACvCC,iBAAiBY,SAASZ,eAAe,IAAI,EAAE;YAC/CL,UAAU;QACd;QAEAc,QAAQI,GAAG,CAAC,gCAAgCwB,iBAAiB,qBAAqB;QAElF,kBAAkB;QAClB,MAAMjD,OAAO,MAAMD,eAAM,CAACC,IAAI,CAACwC,MAAM,CAAC;YAClCW,MAAMF;YACN/C,QAAQ;gBACJC,IAAI;gBACJC,MAAM;gBACNC,OAAO;gBACPI,QAAQ;gBACRE,aAAa;gBACbE,WAAW;gBACXG,MAAM;oBACFd,QAAQ;wBACJC,IAAI;wBACJC,MAAM;oBACV;gBACJ;YACJ;QACJ;QAEA,0BAA0B;QAC1B,OAAOa,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTG,SAAS;YACT6B,MAAMnD;QACV;IACJ,EAAE,OAAOoB,OAAO;QACZC,QAAQD,KAAK,CAAC,wBAAwBA;QACtC,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"}