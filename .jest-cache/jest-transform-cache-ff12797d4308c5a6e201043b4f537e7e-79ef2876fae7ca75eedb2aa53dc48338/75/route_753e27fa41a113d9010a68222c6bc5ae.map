{"version":3,"names":["GET","cov_vn4mgc0gq","f","s","POST","req","permissionError","_middleware","requirePermission","b","users","_prisma","default","user","findMany","select","id","name","email","phone","isActive","roleId","shopId","roleName","permissions","allowedAccounts","createdAt","updatedAt","role","shop","_server","NextResponse","json","success","error","console","message","status","userData","log","password","length","shopExists","findUnique","where","roleTemplate","roleWithPermissions","include","permissionNames","map","p","warn","hashedPassword","_bcryptjs","hash","shopAssignedPermissionId","includes","permission","upsert","update","create","description","toString","newUser","data","_crypto","randomUUID"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport bcrypt from 'bcryptjs';\nimport { randomUUID } from 'crypto';\nimport { z } from 'zod';\n\n// GET: List all users\nexport async function GET(req: NextRequest) {\n    // Check for 'user:manage' permission\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                allowedAccounts: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            users\n        });\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch users' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new user\nexport async function POST(req: NextRequest) {\n    // Temporarily bypass permission check for adding users\n    // const permissionError = await requirePermission('user:manage')(req);\n    // if (permissionError) {\n    //     return permissionError;\n    // }\n\n    try {\n        const userData = await req.json();\n\n        console.log('Received user data:', userData); // Log the incoming data\n\n        // Validation examples\n        if (!userData.name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.password || userData.password.length < 8) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 8 characters' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.shop || userData.shop === '' || userData.shop === 'undefined') {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.permissions || userData.permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Validate shop ID (keep as string since it's a cuid)\n        const shopId = userData.shop;\n        \n        // Verify the shop exists in the database\n        const shopExists = await prisma.shop.findUnique({\n            where: { id: shopId }\n        });\n        \n        if (!shopExists) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid shop ID provided - shop does not exist' },\n                { status: 400 }\n            );\n        }\n\n        // If a role template is selected, find its permissions\n        if (userData.roleTemplate) {\n            console.log(`Role template \"${userData.roleTemplate}\" selected. Fetching permissions...`);\n\n            const roleWithPermissions = await prisma.role.findUnique({\n                where: { name: userData.roleTemplate },\n                include: { permissions: true }\n            });\n\n            if (roleWithPermissions) {\n                const permissionNames = roleWithPermissions.permissions.map((p: { name: string }) => p.name);\n                console.log(`Permissions for role \"${userData.roleTemplate}\":`, permissionNames);\n                userData.permissions = permissionNames;\n                userData.roleId = roleWithPermissions.id;\n                userData.roleName = roleWithPermissions.name;\n            } else {\n                console.warn(`Role \"${userData.roleTemplate}\" not found in the database.`);\n            }\n        }\n        \n        const hashedPassword = await bcrypt.hash(userData.password, 10);\n\n        // Ensure shop:assigned_only permission exists if needed\n        let shopAssignedPermissionId: string | null = null;\n        if (userData.permissions.includes('shop:assigned_only')) {\n            const permission = await prisma.permission.upsert({\n                where: { name: 'shop:assigned_only' },\n                update: {},\n                create: {\n                    name: 'shop:assigned_only',\n                    description: 'Restricts user access to only their assigned shop',\n                },\n            });\n            shopAssignedPermissionId = permission.id.toString();\n        }\n\n                        // Prepare user data\n        const newUser = await prisma.user.create({\n            data: {\n                id: randomUUID(),\n                name: userData.name,\n                email: userData.email,\n                password: hashedPassword,\n                roleId: userData.roleId,\n                roleName: userData.roleName, // Add this line\n                shopId: shopId,\n                permissions: userData.permissions,\n                allowedAccounts: userData.allowedAccounts || [],\n                isActive: true\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'User created successfully',\n            data: newUser\n        });\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create user' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}