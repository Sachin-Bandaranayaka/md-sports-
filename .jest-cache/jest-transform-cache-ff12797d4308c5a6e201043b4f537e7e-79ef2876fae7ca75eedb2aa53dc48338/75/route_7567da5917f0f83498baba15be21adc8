545493d7f623db807ef8ca2433ccaa4b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../../lib/prisma"));
const _middleware = require("../../../lib/utils/middleware");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _crypto = require("crypto");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function GET(req) {
    // Check for 'user:manage' permission
    const permissionError = await (0, _middleware.requirePermission)("user:manage")(req);
    if (permissionError) {
        return permissionError;
    }
    try {
        const users = await _prisma.default.user.findMany({
            select: {
                id: true,
                name: true,
                email: true,
                phone: true,
                isActive: true,
                roleId: true,
                shopId: true,
                roleName: true,
                permissions: true,
                allowedAccounts: true,
                createdAt: true,
                updatedAt: true,
                role: {
                    select: {
                        id: true,
                        name: true
                    }
                },
                shop: {
                    select: {
                        id: true,
                        name: true
                    }
                }
            }
        });
        return _server.NextResponse.json({
            success: true,
            users
        });
    } catch (error) {
        console.error("Error fetching users:", error);
        return _server.NextResponse.json({
            success: false,
            message: "Failed to fetch users"
        }, {
            status: 500
        });
    }
}
async function POST(req) {
    // Temporarily bypass permission check for adding users
    // const permissionError = await requirePermission('user:manage')(req);
    // if (permissionError) {
    //     return permissionError;
    // }
    try {
        const userData = await req.json();
        console.log("Received user data:", userData); // Log the incoming data
        // Validation examples
        if (!userData.name) {
            return _server.NextResponse.json({
                success: false,
                message: "Name is required"
            }, {
                status: 400
            });
        }
        if (!userData.email) {
            return _server.NextResponse.json({
                success: false,
                message: "Email is required"
            }, {
                status: 400
            });
        }
        if (!userData.password || userData.password.length < 8) {
            return _server.NextResponse.json({
                success: false,
                message: "Password must be at least 8 characters"
            }, {
                status: 400
            });
        }
        if (!userData.shop || userData.shop === "" || userData.shop === "undefined") {
            return _server.NextResponse.json({
                success: false,
                message: "Shop assignment is required"
            }, {
                status: 400
            });
        }
        if (!userData.permissions || userData.permissions.length === 0) {
            return _server.NextResponse.json({
                success: false,
                message: "At least one permission is required"
            }, {
                status: 400
            });
        }
        // Validate shop ID (keep as string since it's a cuid)
        const shopId = userData.shop;
        // Verify the shop exists in the database
        const shopExists = await _prisma.default.shop.findUnique({
            where: {
                id: shopId
            }
        });
        if (!shopExists) {
            return _server.NextResponse.json({
                success: false,
                message: "Invalid shop ID provided - shop does not exist"
            }, {
                status: 400
            });
        }
        // Hash the password
        const hashedPassword = await _bcryptjs.default.hash(userData.password, 12);
        // Ensure shop:assigned_only permission exists if needed
        let shopAssignedPermissionId = null;
        if (userData.permissions.includes("shop:assigned_only")) {
            const shopAssignedPermission = await _prisma.default.permission.upsert({
                where: {
                    name: "shop:assigned_only"
                },
                update: {},
                create: {
                    name: "shop:assigned_only",
                    description: "Restricts user access to only their assigned shop"
                }
            });
            shopAssignedPermissionId = shopAssignedPermission.id.toString();
            // Replace the string 'shop:assigned_only' with the actual permission ID
            userData.permissions = userData.permissions.map((p)=>p === "shop:assigned_only" ? shopAssignedPermissionId : p);
        }
        // Determine role based on permissions
        let roleId = null;
        let roleName = null;
        // Check if user has admin permissions
        if (userData.permissions.includes("ALL") || userData.permissions.some((p)=>{
            // Check if any permission is admin:all (either by name or ID)
            if (p === "admin:all") return true;
            // Check if it's the admin:all permission ID
            // We need to look up the admin:all permission ID
            return false; // We'll handle this below
        })) {
            // Create or find Admin role
            const adminRole = await _prisma.default.role.upsert({
                where: {
                    name: "Admin"
                },
                update: {},
                create: {
                    id: "admin-role-id",
                    name: "Admin",
                    description: "Full system access with all permissions"
                }
            });
            roleId = adminRole.id;
            roleName = "Admin";
        } else if (shopAssignedPermissionId && userData.permissions.includes(shopAssignedPermissionId)) {
            // Create or find Shop Staff role
            const shopStaffRole = await _prisma.default.role.upsert({
                where: {
                    name: "Shop Staff"
                },
                update: {},
                create: {
                    id: "shop-staff-role-id",
                    name: "Shop Staff",
                    description: "Limited access for shop staff members"
                }
            });
            roleId = shopStaffRole.id;
            roleName = "Shop Staff";
        } else {
            // Get the admin:all permission to check if user has it
            const adminAllPermission = await _prisma.default.permission.findUnique({
                where: {
                    name: "admin:all"
                }
            });
            if (adminAllPermission && userData.permissions.includes(adminAllPermission.id.toString())) {
                // Create or find Admin role
                const adminRole = await _prisma.default.role.upsert({
                    where: {
                        name: "Admin"
                    },
                    update: {},
                    create: {
                        id: "admin-role-id",
                        name: "Admin",
                        description: "Full system access with all permissions"
                    }
                });
                roleId = adminRole.id;
                roleName = "Admin";
            }
        }
        // Prepare user data
        const userData_final = {
            id: (0, _crypto.randomUUID)(),
            name: userData.name,
            email: userData.email,
            password: hashedPassword,
            roleId: roleId,
            roleName: roleName,
            shopId: shopId,
            permissions: userData.permissions || [],
            allowedAccounts: userData.allowedAccounts || [],
            isActive: true
        };
        console.log("Final user data to be saved:", userData_final); // Log the final data
        // Create the user
        const user = await _prisma.default.user.create({
            data: userData_final,
            select: {
                id: true,
                name: true,
                email: true,
                shopId: true,
                permissions: true,
                createdAt: true,
                shop: {
                    select: {
                        id: true,
                        name: true
                    }
                }
            }
        });
        // Return success response
        return _server.NextResponse.json({
            success: true,
            message: "User created successfully",
            data: user
        });
    } catch (error) {
        console.error("Error creating user:", error);
        return _server.NextResponse.json({
            success: false,
            message: "Failed to create user"
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,