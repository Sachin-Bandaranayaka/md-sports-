47b3ca41c55d4f7e9b171af1b1e91a4f
"use strict";
// Mock the authentication module
jest.mock("@/lib/auth", ()=>({
        validateTokenPermission: jest.fn()
    }));
// Mock the cache service
jest.mock("@/lib/cache", ()=>({
        cacheService: {
            invalidateInventory: jest.fn()
        }
    }));
// Mock Prisma
jest.mock("@/lib/prisma", ()=>({
        prisma: {
            product: {
                findUnique: jest.fn(),
                create: jest.fn(),
                findMany: jest.fn()
            },
            category: {
                findFirst: jest.fn()
            },
            shop: {
                findFirst: jest.fn(),
                findMany: jest.fn()
            },
            inventoryItem: {
                create: jest.fn()
            },
            $transaction: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../src/app/api/products/bulk-import/route");
const _route1 = require("../../src/app/api/products/bulk-create/route");
const _route2 = require("../../src/app/api/shops/names/route");
const _prisma = require("../../src/lib/prisma");
const _xlsx = /*#__PURE__*/ _interop_require_wildcard(require("xlsx"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockValidateTokenPermission = require("@/lib/auth").validateTokenPermission;
const mockPrisma = _prisma.prisma;
describe("Bulk Import API Tests", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Default successful auth
        mockValidateTokenPermission.mockResolvedValue({
            isValid: true
        });
    });
    describe("POST /api/products/bulk-import", ()=>{
        const createMockExcelFile = (data)=>{
            const ws = _xlsx.utils.json_to_sheet(data);
            const wb = _xlsx.utils.book_new();
            _xlsx.utils.book_append_sheet(wb, ws, "Products");
            const buffer = _xlsx.write(wb, {
                type: "buffer",
                bookType: "xlsx"
            });
            return new File([
                buffer
            ], "products.xlsx", {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            });
        };
        const createMockRequest = (file)=>{
            const formData = new FormData();
            formData.append("file", file);
            return new _server.NextRequest("http://localhost:3000/api/products/bulk-import", {
                method: "POST",
                body: formData
            });
        };
        it("should successfully import valid products", async ()=>{
            const productData = [
                {
                    Name: "Test Product 1",
                    SKU: "TP001",
                    Description: "Test description",
                    RetailPrice: 100,
                    CostPrice: 80,
                    CategoryName: "Sports"
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            // Mock database responses
            mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist
            mockPrisma.category.findFirst.mockResolvedValue({
                id: 1,
                name: "Sports"
            });
            const mockCreatedProduct = {
                id: 1,
                name: "Test Product 1",
                sku: "TP001"
            };
            mockPrisma.$transaction.mockImplementation(async (callback)=>{
                const tx = {
                    product: {
                        create: jest.fn().mockResolvedValue(mockCreatedProduct)
                    },
                    inventoryItem: {
                        create: jest.fn()
                    }
                };
                return await callback(tx);
            });
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.success).toBe(true);
            expect(result.details).toHaveLength(1);
            expect(result.details[0].success).toBe(true);
        });
        it("should handle missing required fields", async ()=>{
            const productData = [
                {
                    Name: "",
                    RetailPrice: 100
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.success).toBe(false);
            expect(result.details[0].success).toBe(false);
            expect(result.details[0].message).toContain("Product Name is required");
        });
        it("should validate InitialQuantity and ShopName relationship", async ()=>{
            const productData = [
                {
                    Name: "Test Product",
                    RetailPrice: 100,
                    InitialQuantity: 50,
                    ShopName: ""
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.details[0].success).toBe(false);
            expect(result.details[0].message).toContain("Shop Name is required when Initial Quantity is greater than 0");
        });
        it("should handle invalid shop names", async ()=>{
            const productData = [
                {
                    Name: "Test Product",
                    RetailPrice: 100,
                    InitialQuantity: 50,
                    ShopName: "Nonexistent Shop"
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            mockPrisma.shop.findFirst.mockResolvedValue(null); // Shop not found
            mockPrisma.shop.findMany.mockResolvedValue([
                {
                    name: "MBA"
                },
                {
                    name: "Zimantra"
                }
            ]);
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.details[0].success).toBe(false);
            expect(result.details[0].message).toContain("Shop 'Nonexistent Shop' not found");
            expect(result.details[0].message).toContain("Available shops: MBA, Zimantra");
        });
        it("should handle duplicate SKUs", async ()=>{
            const productData = [
                {
                    Name: "Test Product 1",
                    SKU: "DUPLICATE",
                    RetailPrice: 100
                },
                {
                    Name: "Test Product 2",
                    SKU: "DUPLICATE",
                    RetailPrice: 200
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist in DB
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.details[1].success).toBe(false);
            expect(result.details[1].message).toContain("SKU 'DUPLICATE' is duplicated within the import file");
        });
        it("should handle database errors gracefully", async ()=>{
            const productData = [
                {
                    Name: "Test Product",
                    SKU: "TP001",
                    RetailPrice: 100
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            mockPrisma.product.findUnique.mockResolvedValue(null);
            mockPrisma.$transaction.mockRejectedValue(new Error("Database error"));
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.details[0].success).toBe(false);
            expect(result.details[0].message).toContain("Database error during import");
        });
        it("should reject requests without proper permissions", async ()=>{
            mockValidateTokenPermission.mockResolvedValue({
                isValid: false,
                message: "Insufficient permissions"
            });
            const productData = [
                {
                    Name: "Test",
                    RetailPrice: 100
                }
            ];
            const file = createMockExcelFile(productData);
            const request = createMockRequest(file);
            const response = await (0, _route.POST)(request);
            expect(response.status).toBe(401);
        });
        it("should reject requests without file", async ()=>{
            const formData = new FormData();
            const request = new _server.NextRequest("http://localhost:3000/api/products/bulk-import", {
                method: "POST",
                body: formData
            });
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(400);
            expect(result.message).toContain("No file uploaded");
        });
    });
    describe("POST /api/products/bulk-create", ()=>{
        const createMockJSONRequest = (products)=>{
            return new _server.NextRequest("http://localhost:3000/api/products/bulk-create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    products
                })
            });
        };
        it("should successfully create products via JSON API", async ()=>{
            const products = [
                {
                    name: "JSON Product 1",
                    sku: "JP001",
                    price: 100,
                    weightedAverageCost: 80
                }
            ];
            const request = createMockJSONRequest(products);
            mockPrisma.product.findUnique.mockResolvedValue(null);
            const mockCreatedProduct = {
                id: 1,
                name: "JSON Product 1",
                sku: "JP001"
            };
            mockPrisma.$transaction.mockImplementation(async (callback)=>{
                const tx = {
                    product: {
                        create: jest.fn().mockResolvedValue(mockCreatedProduct)
                    },
                    inventoryItem: {
                        create: jest.fn()
                    }
                };
                return await callback(tx);
            });
            const response = await (0, _route1.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.success).toBe(true);
            expect(result.successCount).toBe(1);
            expect(result.results[0].success).toBe(true);
        });
        it("should validate required fields in JSON API", async ()=>{
            const products = [
                {
                    name: "Valid Product",
                    price: 100
                },
                {
                    name: "",
                    price: 200
                },
                {
                    name: "Another Product"
                }
            ];
            const request = createMockJSONRequest(products);
            const response = await (0, _route1.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.successCount).toBe(1);
            expect(result.failureCount).toBe(2);
            const failedResults = result.results.filter((r)=>!r.success);
            expect(failedResults).toHaveLength(2);
            expect(failedResults[0].message).toContain("Product name and price are required");
            expect(failedResults[1].message).toContain("Product name and price are required");
        });
        it("should handle empty products array", async ()=>{
            const request = createMockJSONRequest([]);
            const response = await (0, _route1.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(400);
            expect(result.success).toBe(false);
            expect(result.message).toContain("Products array is required and must not be empty");
        });
        it("should detect duplicate SKUs within batch", async ()=>{
            const products = [
                {
                    name: "Product 1",
                    sku: "DUPLICATE",
                    price: 100
                },
                {
                    name: "Product 2",
                    sku: "DUPLICATE",
                    price: 200
                }
            ];
            const request = createMockJSONRequest(products);
            mockPrisma.product.findUnique.mockResolvedValue(null);
            const response = await (0, _route1.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.results[1].success).toBe(false);
            expect(result.results[1].message).toContain("SKU 'DUPLICATE' is duplicated within the batch");
        });
    });
    describe("GET /api/shops/names", ()=>{
        it("should return active shop names", async ()=>{
            const mockShops = [
                {
                    name: "MBA"
                },
                {
                    name: "Zimantra"
                }
            ];
            mockPrisma.shop.findMany.mockResolvedValue(mockShops);
            const request = new _server.NextRequest("http://localhost:3000/api/shops/names");
            const response = await (0, _route2.GET)();
            const result = await response.json();
            expect(response.status).toBe(200);
            expect(result.success).toBe(true);
            expect(result.shopNames).toEqual([
                "MBA",
                "Zimantra"
            ]);
            expect(mockPrisma.shop.findMany).toHaveBeenCalledWith({
                where: {
                    is_active: true
                },
                select: {
                    name: true
                },
                orderBy: {
                    name: "asc"
                }
            });
        });
        it("should handle database errors", async ()=>{
            mockPrisma.shop.findMany.mockRejectedValue(new Error("Database error"));
            const request = new _server.NextRequest("http://localhost:3000/api/shops/names");
            const response = await (0, _route2.GET)();
            const result = await response.json();
            expect(response.status).toBe(500);
            expect(result.success).toBe(false);
            expect(result.message).toContain("Failed to fetch shop names");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,