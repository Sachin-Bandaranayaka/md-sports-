{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/api/bulkImport.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { POST as bulkImportPOST } from '@/app/api/products/bulk-import/route';\nimport { POST as bulkCreatePOST } from '@/app/api/products/bulk-create/route';\nimport { GET as shopNamesGET } from '@/app/api/shops/names/route';\nimport { prisma } from '@/lib/prisma';\nimport * as XLSX from 'xlsx';\n\n// Mock the authentication module\njest.mock('@/lib/auth', () => ({\n  validateTokenPermission: jest.fn(),\n}));\n\n// Mock the cache service\njest.mock('@/lib/cache', () => ({\n  cacheService: {\n    invalidateInventory: jest.fn(),\n  },\n}));\n\n// Mock Prisma\njest.mock('@/lib/prisma', () => ({\n  prisma: {\n    product: {\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n    category: {\n      findFirst: jest.fn(),\n    },\n    shop: {\n      findFirst: jest.fn(),\n      findMany: jest.fn(),\n    },\n    inventoryItem: {\n      create: jest.fn(),\n    },\n    $transaction: jest.fn(),\n  },\n}));\n\nconst mockValidateTokenPermission = require('@/lib/auth').validateTokenPermission;\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\n\ndescribe('Bulk Import API Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default successful auth\n    mockValidateTokenPermission.mockResolvedValue({ isValid: true });\n  });\n\n  describe('POST /api/products/bulk-import', () => {\n    const createMockExcelFile = (data: any[]) => {\n      const ws = XLSX.utils.json_to_sheet(data);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Products');\n      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n      \n      return new File([buffer], 'products.xlsx', {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      });\n    };\n\n    const createMockRequest = (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      return new NextRequest('http://localhost:3000/api/products/bulk-import', {\n        method: 'POST',\n        body: formData,\n      });\n    };\n\n    it('should successfully import valid products', async () => {\n      const productData = [\n        {\n          Name: 'Test Product 1',\n          SKU: 'TP001',\n          Description: 'Test description',\n          RetailPrice: 100,\n          CostPrice: 80,\n          CategoryName: 'Sports',\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      // Mock database responses\n      mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist\n      mockPrisma.category.findFirst.mockResolvedValue({ id: 1, name: 'Sports' });\n      \n      const mockCreatedProduct = { id: 1, name: 'Test Product 1', sku: 'TP001' };\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        const tx = {\n          product: {\n            create: jest.fn().mockResolvedValue(mockCreatedProduct),\n          },\n          inventoryItem: {\n            create: jest.fn(),\n          },\n        };\n        return await callback(tx as any);\n      });\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.details).toHaveLength(1);\n      expect(result.details[0].success).toBe(true);\n    });\n\n    it('should handle missing required fields', async () => {\n      const productData = [\n        {\n          Name: '', // Missing name\n          RetailPrice: 100,\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(false);\n      expect(result.details[0].success).toBe(false);\n      expect(result.details[0].message).toContain('Product Name is required');\n    });\n\n    it('should validate InitialQuantity and ShopName relationship', async () => {\n      const productData = [\n        {\n          Name: 'Test Product',\n          RetailPrice: 100,\n          InitialQuantity: 50, // Has quantity but no shop\n          ShopName: '', // Missing shop name\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details[0].success).toBe(false);\n      expect(result.details[0].message).toContain('Shop Name is required when Initial Quantity is greater than 0');\n    });\n\n    it('should handle invalid shop names', async () => {\n      const productData = [\n        {\n          Name: 'Test Product',\n          RetailPrice: 100,\n          InitialQuantity: 50,\n          ShopName: 'Nonexistent Shop',\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      mockPrisma.shop.findFirst.mockResolvedValue(null); // Shop not found\n      mockPrisma.shop.findMany.mockResolvedValue([\n        { name: 'MBA' },\n        { name: 'Zimantra' },\n      ]);\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details[0].success).toBe(false);\n      expect(result.details[0].message).toContain('Shop \\'Nonexistent Shop\\' not found');\n      expect(result.details[0].message).toContain('Available shops: MBA, Zimantra');\n    });\n\n    it('should handle duplicate SKUs', async () => {\n      const productData = [\n        {\n          Name: 'Test Product 1',\n          SKU: 'DUPLICATE',\n          RetailPrice: 100,\n        },\n        {\n          Name: 'Test Product 2',\n          SKU: 'DUPLICATE', // Duplicate SKU in batch\n          RetailPrice: 200,\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist in DB\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details[1].success).toBe(false);\n      expect(result.details[1].message).toContain('SKU \\'DUPLICATE\\' is duplicated within the import file');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const productData = [\n        {\n          Name: 'Test Product',\n          SKU: 'TP001',\n          RetailPrice: 100,\n        },\n      ];\n\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      mockPrisma.product.findUnique.mockResolvedValue(null);\n      mockPrisma.$transaction.mockRejectedValue(new Error('Database error'));\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.details[0].success).toBe(false);\n      expect(result.details[0].message).toContain('Database error during import');\n    });\n\n    it('should reject requests without proper permissions', async () => {\n      mockValidateTokenPermission.mockResolvedValue({ \n        isValid: false, \n        message: 'Insufficient permissions' \n      });\n\n      const productData = [{ Name: 'Test', RetailPrice: 100 }];\n      const file = createMockExcelFile(productData);\n      const request = createMockRequest(file);\n\n      const response = await bulkImportPOST(request);\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should reject requests without file', async () => {\n      const formData = new FormData();\n      const request = new NextRequest('http://localhost:3000/api/products/bulk-import', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const response = await bulkImportPOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(result.message).toContain('No file uploaded');\n    });\n  });\n\n  describe('POST /api/products/bulk-create', () => {\n    const createMockJSONRequest = (products: any[]) => {\n      return new NextRequest('http://localhost:3000/api/products/bulk-create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ products }),\n      });\n    };\n\n    it('should successfully create products via JSON API', async () => {\n      const products = [\n        {\n          name: 'JSON Product 1',\n          sku: 'JP001',\n          price: 100,\n          weightedAverageCost: 80,\n        },\n      ];\n\n      const request = createMockJSONRequest(products);\n\n      mockPrisma.product.findUnique.mockResolvedValue(null);\n      const mockCreatedProduct = { id: 1, name: 'JSON Product 1', sku: 'JP001' };\n      \n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        const tx = {\n          product: {\n            create: jest.fn().mockResolvedValue(mockCreatedProduct),\n          },\n          inventoryItem: {\n            create: jest.fn(),\n          },\n        };\n        return await callback(tx as any);\n      });\n\n      const response = await bulkCreatePOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.successCount).toBe(1);\n      expect(result.results[0].success).toBe(true);\n    });\n\n    it('should validate required fields in JSON API', async () => {\n      const products = [\n        {\n          name: 'Valid Product',\n          price: 100,\n        },\n        {\n          name: '', // Invalid: empty name\n          price: 200,\n        },\n        {\n          name: 'Another Product',\n          // Missing price\n        },\n      ];\n\n      const request = createMockJSONRequest(products);\n\n      const response = await bulkCreatePOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.successCount).toBe(1);\n      expect(result.failureCount).toBe(2);\n      \n      const failedResults = result.results.filter((r: any) => !r.success);\n      expect(failedResults).toHaveLength(2);\n      expect(failedResults[0].message).toContain('Product name and price are required');\n      expect(failedResults[1].message).toContain('Product name and price are required');\n    });\n\n    it('should handle empty products array', async () => {\n      const request = createMockJSONRequest([]);\n\n      const response = await bulkCreatePOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Products array is required and must not be empty');\n    });\n\n    it('should detect duplicate SKUs within batch', async () => {\n      const products = [\n        {\n          name: 'Product 1',\n          sku: 'DUPLICATE',\n          price: 100,\n        },\n        {\n          name: 'Product 2',\n          sku: 'DUPLICATE',\n          price: 200,\n        },\n      ];\n\n      const request = createMockJSONRequest(products);\n      mockPrisma.product.findUnique.mockResolvedValue(null);\n\n      const response = await bulkCreatePOST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.results[1].success).toBe(false);\n      expect(result.results[1].message).toContain('SKU \\'DUPLICATE\\' is duplicated within the batch');\n    });\n  });\n\n  describe('GET /api/shops/names', () => {\n    it('should return active shop names', async () => {\n      const mockShops = [\n        { name: 'MBA' },\n        { name: 'Zimantra' },\n      ];\n\n      mockPrisma.shop.findMany.mockResolvedValue(mockShops);\n\n      const request = new NextRequest('http://localhost:3000/api/shops/names');\n      const response = await shopNamesGET();\n      const result = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(result.success).toBe(true);\n      expect(result.shopNames).toEqual(['MBA', 'Zimantra']);\n      expect(mockPrisma.shop.findMany).toHaveBeenCalledWith({\n        where: { is_active: true },\n        select: { name: true },\n        orderBy: { name: 'asc' },\n      });\n    });\n\n    it('should handle database errors', async () => {\n      mockPrisma.shop.findMany.mockRejectedValue(new Error('Database error'));\n\n      const request = new NextRequest('http://localhost:3000/api/shops/names');\n      const response = await shopNamesGET();\n      const result = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Failed to fetch shop names');\n    });\n  });\n}); "],"names":["jest","mock","validateTokenPermission","fn","cacheService","invalidateInventory","prisma","product","findUnique","create","findMany","category","findFirst","shop","inventoryItem","$transaction","mockValidateTokenPermission","require","mockPrisma","describe","beforeEach","clearAllMocks","mockResolvedValue","isValid","createMockExcelFile","data","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","buffer","write","type","bookType","File","createMockRequest","file","formData","FormData","append","NextRequest","method","body","it","productData","Name","SKU","Description","RetailPrice","CostPrice","CategoryName","request","id","name","mockCreatedProduct","sku","mockImplementation","callback","tx","response","bulkImportPOST","result","json","expect","status","toBe","success","details","toHaveLength","message","toContain","InitialQuantity","ShopName","mockRejectedValue","Error","createMockJSONRequest","products","headers","JSON","stringify","price","weightedAverageCost","bulkCreatePOST","successCount","results","failureCount","failedResults","filter","r","mockShops","shopNamesGET","shopNames","toEqual","toHaveBeenCalledWith","where","is_active","select","orderBy"],"mappings":"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"}