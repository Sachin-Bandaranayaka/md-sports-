22d616897dc0d6fcc66cc612875b2eea
"use strict";

/* istanbul ignore next */
function cov_vn4mgc0gq() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts";
  var hash = "219132d5b00ca0a816259aa98732b88185976bdf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 60
        }
      },
      "9": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "12": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 88
        }
      },
      "13": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 31
        }
      },
      "15": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "16": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "17": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "18": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 54
        }
      },
      "19": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "20": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "21": {
        start: {
          line: 85,
          column: 25
        },
        end: {
          line: 85,
          column: 41
        }
      },
      "22": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 53
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "24": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 94,
          column: 15
        }
      },
      "25": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "26": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "27": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "28": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "29": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "30": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "31": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "32": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "33": {
        start: {
          line: 129,
          column: 23
        },
        end: {
          line: 129,
          column: 36
        }
      },
      "34": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "35": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "36": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "37": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "38": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 102
        }
      },
      "39": {
        start: {
          line: 147,
          column: 40
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "40": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "41": {
        start: {
          line: 156,
          column: 40
        },
        end: {
          line: 156,
          column: 88
        }
      },
      "42": {
        start: {
          line: 156,
          column: 81
        },
        end: {
          line: 156,
          column: 87
        }
      },
      "43": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 97
        }
      },
      "44": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 55
        }
      },
      "45": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "46": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "47": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 91
        }
      },
      "48": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 82
        }
      },
      "49": {
        start: {
          line: 167,
          column: 39
        },
        end: {
          line: 167,
          column: 43
        }
      },
      "50": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "51": {
        start: {
          line: 169,
          column: 31
        },
        end: {
          line: 178,
          column: 14
        }
      },
      "52": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 64
        }
      },
      "53": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 195,
          column: 10
        }
      },
      "54": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      },
      "55": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 53
        }
      },
      "56": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 19
          }
        },
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 156,
            column: 76
          },
          end: {
            line: 156,
            column: 77
          }
        },
        loc: {
          start: {
            line: 156,
            column: 81
          },
          end: {
            line: 156,
            column: 87
          }
        },
        line: 156
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 14
          }
        }, {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 32
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 30
          }
        }, {
          start: {
            line: 104,
            column: 34
          },
          end: {
            line: 104,
            column: 62
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 26
          }
        }, {
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 112,
            column: 50
          }
        }, {
          start: {
            line: 112,
            column: 54
          },
          end: {
            line: 112,
            column: 83
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 33
          }
        }, {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 120,
            column: 70
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: 161,
            column: 19
          },
          end: {
            line: 163,
            column: 13
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 33
          },
          end: {
            line: 192,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 33
          },
          end: {
            line: 192,
            column: 57
          }
        }, {
          start: {
            line: 192,
            column: 61
          },
          end: {
            line: 192,
            column: 63
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport bcrypt from 'bcryptjs';\nimport { randomUUID } from 'crypto';\nimport { z } from 'zod';\n\n// GET: List all users\nexport async function GET(req: NextRequest) {\n    // Check for 'user:manage' permission\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                allowedAccounts: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            users\n        });\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch users' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new user\nexport async function POST(req: NextRequest) {\n    // Temporarily bypass permission check for adding users\n    // const permissionError = await requirePermission('user:manage')(req);\n    // if (permissionError) {\n    //     return permissionError;\n    // }\n\n    try {\n        const userData = await req.json();\n\n        console.log('Received user data:', userData); // Log the incoming data\n\n        // Validation examples\n        if (!userData.name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.password || userData.password.length < 8) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 8 characters' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.shop || userData.shop === '' || userData.shop === 'undefined') {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.permissions || userData.permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Validate shop ID (keep as string since it's a cuid)\n        const shopId = userData.shop;\n        \n        // Verify the shop exists in the database\n        const shopExists = await prisma.shop.findUnique({\n            where: { id: shopId }\n        });\n        \n        if (!shopExists) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid shop ID provided - shop does not exist' },\n                { status: 400 }\n            );\n        }\n\n        // If a role template is selected, find its permissions\n        if (userData.roleTemplate) {\n            console.log(`Role template \"${userData.roleTemplate}\" selected. Fetching permissions...`);\n\n            const roleWithPermissions = await prisma.role.findUnique({\n                where: { name: userData.roleTemplate },\n                include: { permissions: true }\n            });\n\n            if (roleWithPermissions) {\n                const permissionNames = roleWithPermissions.permissions.map((p: { name: string }) => p.name);\n                console.log(`Permissions for role \"${userData.roleTemplate}\":`, permissionNames);\n                userData.permissions = permissionNames;\n                userData.roleId = roleWithPermissions.id;\n                userData.roleName = roleWithPermissions.name;\n            } else {\n                console.warn(`Role \"${userData.roleTemplate}\" not found in the database.`);\n            }\n        }\n        \n        const hashedPassword = await bcrypt.hash(userData.password, 10);\n\n        // Ensure shop:assigned_only permission exists if needed\n        let shopAssignedPermissionId: string | null = null;\n        if (userData.permissions.includes('shop:assigned_only')) {\n            const permission = await prisma.permission.upsert({\n                where: { name: 'shop:assigned_only' },\n                update: {},\n                create: {\n                    name: 'shop:assigned_only',\n                    description: 'Restricts user access to only their assigned shop',\n                },\n            });\n            shopAssignedPermissionId = permission.id.toString();\n        }\n\n                        // Prepare user data\n        const newUser = await prisma.user.create({\n            data: {\n                id: randomUUID(),\n                name: userData.name,\n                email: userData.email,\n                password: hashedPassword,\n                roleId: userData.roleId,\n                roleName: userData.roleName, // Add this line\n                shopId: shopId,\n                permissions: userData.permissions,\n                allowedAccounts: userData.allowedAccounts || [],\n                isActive: true\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'User created successfully',\n            data: newUser\n        });\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create user' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "req", "permissionError", "requirePermission", "users", "prisma", "user", "findMany", "select", "id", "name", "email", "phone", "isActive", "roleId", "shopId", "roleName", "permissions", "allowedAccounts", "createdAt", "updatedAt", "role", "shop", "NextResponse", "json", "success", "error", "console", "message", "status", "userData", "log", "password", "length", "shopExists", "findUnique", "where", "roleTemplate", "roleWithPermissions", "include", "permissionNames", "map", "p", "warn", "hashedPassword", "bcrypt", "hash", "shopAssignedPermissionId", "includes", "permission", "upsert", "update", "create", "description", "toString", "newUser", "data", "randomUUID"],
      mappings: ";;;;;;;;;;;IASsBA,GAAG;eAAHA;;IAmDAC,IAAI;eAAJA;;;wBA5DoB;+DACvB;4BACe;iEAEf;wBACQ;;;;;;AAIpB,eAAeD,IAAIE,GAAgB;IACtC,qCAAqC;IACrC,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeF;IAC/D,IAAIC,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,MAAME,QAAQ,MAAMC,eAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,QAAQ;gBACJC,IAAI;gBACJC,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,UAAU;gBACVC,QAAQ;gBACRC,QAAQ;gBACRC,UAAU;gBACVC,aAAa;gBACbC,iBAAiB;gBACjBC,WAAW;gBACXC,WAAW;gBACXC,MAAM;oBACFb,QAAQ;wBACJC,IAAI;wBACJC,MAAM;oBACV;gBACJ;gBACAY,MAAM;oBACFd,QAAQ;wBACJC,IAAI;wBACJC,MAAM;oBACV;gBACJ;YACJ;QACJ;QAEA,OAAOa,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTrB;QACJ;IACJ,EAAE,OAAOsB,OAAO;QACZC,QAAQD,KAAK,CAAC,yBAAyBA;QACvC,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAe7B,KAAKC,GAAgB;IACvC,uDAAuD;IACvD,uEAAuE;IACvE,yBAAyB;IACzB,8BAA8B;IAC9B,IAAI;IAEJ,IAAI;QACA,MAAM6B,WAAW,MAAM7B,IAAIuB,IAAI;QAE/BG,QAAQI,GAAG,CAAC,uBAAuBD,WAAW,wBAAwB;QAEtE,sBAAsB;QACtB,IAAI,CAACA,SAASpB,IAAI,EAAE;YAChB,OAAOa,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAmB,GAC9C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASnB,KAAK,EAAE;YACjB,OAAOY,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAoB,GAC/C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASE,QAAQ,IAAIF,SAASE,QAAQ,CAACC,MAAM,GAAG,GAAG;YACpD,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAyC,GACpE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASR,IAAI,IAAIQ,SAASR,IAAI,KAAK,MAAMQ,SAASR,IAAI,KAAK,aAAa;YACzE,OAAOC,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAA8B,GACzD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACC,SAASb,WAAW,IAAIa,SAASb,WAAW,CAACgB,MAAM,KAAK,GAAG;YAC5D,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAsC,GACjE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,sDAAsD;QACtD,MAAMd,SAASe,SAASR,IAAI;QAE5B,yCAAyC;QACzC,MAAMY,aAAa,MAAM7B,eAAM,CAACiB,IAAI,CAACa,UAAU,CAAC;YAC5CC,OAAO;gBAAE3B,IAAIM;YAAO;QACxB;QAEA,IAAI,CAACmB,YAAY;YACb,OAAOX,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOG,SAAS;YAAiD,GAC5E;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,uDAAuD;QACvD,IAAIC,SAASO,YAAY,EAAE;YACvBV,QAAQI,GAAG,CAAC,CAAC,eAAe,EAAED,SAASO,YAAY,CAAC,mCAAmC,CAAC;YAExF,MAAMC,sBAAsB,MAAMjC,eAAM,CAACgB,IAAI,CAACc,UAAU,CAAC;gBACrDC,OAAO;oBAAE1B,MAAMoB,SAASO,YAAY;gBAAC;gBACrCE,SAAS;oBAAEtB,aAAa;gBAAK;YACjC;YAEA,IAAIqB,qBAAqB;gBACrB,MAAME,kBAAkBF,oBAAoBrB,WAAW,CAACwB,GAAG,CAAC,CAACC,IAAwBA,EAAEhC,IAAI;gBAC3FiB,QAAQI,GAAG,CAAC,CAAC,sBAAsB,EAAED,SAASO,YAAY,CAAC,EAAE,CAAC,EAAEG;gBAChEV,SAASb,WAAW,GAAGuB;gBACvBV,SAAShB,MAAM,GAAGwB,oBAAoB7B,EAAE;gBACxCqB,SAASd,QAAQ,GAAGsB,oBAAoB5B,IAAI;YAChD,OAAO;gBACHiB,QAAQgB,IAAI,CAAC,CAAC,MAAM,EAAEb,SAASO,YAAY,CAAC,4BAA4B,CAAC;YAC7E;QACJ;QAEA,MAAMO,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAAChB,SAASE,QAAQ,EAAE;QAE5D,wDAAwD;QACxD,IAAIe,2BAA0C;QAC9C,IAAIjB,SAASb,WAAW,CAAC+B,QAAQ,CAAC,uBAAuB;YACrD,MAAMC,aAAa,MAAM5C,eAAM,CAAC4C,UAAU,CAACC,MAAM,CAAC;gBAC9Cd,OAAO;oBAAE1B,MAAM;gBAAqB;gBACpCyC,QAAQ,CAAC;gBACTC,QAAQ;oBACJ1C,MAAM;oBACN2C,aAAa;gBACjB;YACJ;YACAN,2BAA2BE,WAAWxC,EAAE,CAAC6C,QAAQ;QACrD;QAEgB,oBAAoB;QACpC,MAAMC,UAAU,MAAMlD,eAAM,CAACC,IAAI,CAAC8C,MAAM,CAAC;YACrCI,MAAM;gBACF/C,IAAIgD,IAAAA,kBAAU;gBACd/C,MAAMoB,SAASpB,IAAI;gBACnBC,OAAOmB,SAASnB,KAAK;gBACrBqB,UAAUY;gBACV9B,QAAQgB,SAAShB,MAAM;gBACvBE,UAAUc,SAASd,QAAQ;gBAC3BD,QAAQA;gBACRE,aAAaa,SAASb,WAAW;gBACjCC,iBAAiBY,SAASZ,eAAe,IAAI,EAAE;gBAC/CL,UAAU;YACd;QACJ;QAEA,OAAOU,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTG,SAAS;YACT4B,MAAMD;QACV;IACJ,EAAE,OAAO7B,OAAO;QACZC,QAAQD,KAAK,CAAC,wBAAwBA;QACtC,OAAOH,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOG,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "219132d5b00ca0a816259aa98732b88185976bdf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vn4mgc0gq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vn4mgc0gq();
cov_vn4mgc0gq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[0]++;
  cov_vn4mgc0gq().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_vn4mgc0gq().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_vn4mgc0gq().f[1]++;
    cov_vn4mgc0gq().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_vn4mgc0gq().f[2]++;
    cov_vn4mgc0gq().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_vn4mgc0gq().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_vn4mgc0gq().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_vn4mgc0gq().s[8]++, require("../../../lib/utils/middleware"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_vn4mgc0gq().s[9]++, _interop_require_default(require("bcryptjs")));
const _crypto =
/* istanbul ignore next */
(cov_vn4mgc0gq().s[10]++, require("crypto"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[3]++;
  cov_vn4mgc0gq().s[11]++;
  return /* istanbul ignore next */(cov_vn4mgc0gq().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[4]++;
  // Check for 'user:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_vn4mgc0gq().s[12]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_vn4mgc0gq().s[13]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().b[2][0]++;
    cov_vn4mgc0gq().s[14]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_vn4mgc0gq().b[2][1]++;
  }
  cov_vn4mgc0gq().s[15]++;
  try {
    const users =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[16]++, await _prisma.default.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        isActive: true,
        roleId: true,
        shopId: true,
        roleName: true,
        permissions: true,
        allowedAccounts: true,
        createdAt: true,
        updatedAt: true,
        role: {
          select: {
            id: true,
            name: true
          }
        },
        shop: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[17]++;
    return _server.NextResponse.json({
      success: true,
      users
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[18]++;
    console.error("Error fetching users:", error);
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[19]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch users"
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[5]++;
  cov_vn4mgc0gq().s[20]++;
  // Temporarily bypass permission check for adding users
  // const permissionError = await requirePermission('user:manage')(req);
  // if (permissionError) {
  //     return permissionError;
  // }
  try {
    const userData =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[21]++, await req.json());
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[22]++;
    console.log("Received user data:", userData); // Log the incoming data
    // Validation examples
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[23]++;
    if (!userData.name) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[3][0]++;
      cov_vn4mgc0gq().s[24]++;
      return _server.NextResponse.json({
        success: false,
        message: "Name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[3][1]++;
    }
    cov_vn4mgc0gq().s[25]++;
    if (!userData.email) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[4][0]++;
      cov_vn4mgc0gq().s[26]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[4][1]++;
    }
    cov_vn4mgc0gq().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[6][0]++, !userData.password) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[6][1]++, userData.password.length < 8)) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[5][0]++;
      cov_vn4mgc0gq().s[28]++;
      return _server.NextResponse.json({
        success: false,
        message: "Password must be at least 8 characters"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[5][1]++;
    }
    cov_vn4mgc0gq().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][0]++, !userData.shop) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][1]++, userData.shop === "") ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][2]++, userData.shop === "undefined")) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[7][0]++;
      cov_vn4mgc0gq().s[30]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop assignment is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[7][1]++;
    }
    cov_vn4mgc0gq().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[10][0]++, !userData.permissions) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[10][1]++, userData.permissions.length === 0)) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[9][0]++;
      cov_vn4mgc0gq().s[32]++;
      return _server.NextResponse.json({
        success: false,
        message: "At least one permission is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[9][1]++;
    }
    // Validate shop ID (keep as string since it's a cuid)
    const shopId =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[33]++, userData.shop);
    // Verify the shop exists in the database
    const shopExists =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[34]++, await _prisma.default.shop.findUnique({
      where: {
        id: shopId
      }
    }));
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[35]++;
    if (!shopExists) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[11][0]++;
      cov_vn4mgc0gq().s[36]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid shop ID provided - shop does not exist"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[11][1]++;
    }
    // If a role template is selected, find its permissions
    cov_vn4mgc0gq().s[37]++;
    if (userData.roleTemplate) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[12][0]++;
      cov_vn4mgc0gq().s[38]++;
      console.log(`Role template "${userData.roleTemplate}" selected. Fetching permissions...`);
      const roleWithPermissions =
      /* istanbul ignore next */
      (cov_vn4mgc0gq().s[39]++, await _prisma.default.role.findUnique({
        where: {
          name: userData.roleTemplate
        },
        include: {
          permissions: true
        }
      }));
      /* istanbul ignore next */
      cov_vn4mgc0gq().s[40]++;
      if (roleWithPermissions) {
        /* istanbul ignore next */
        cov_vn4mgc0gq().b[13][0]++;
        const permissionNames =
        /* istanbul ignore next */
        (cov_vn4mgc0gq().s[41]++, roleWithPermissions.permissions.map(p => {
          /* istanbul ignore next */
          cov_vn4mgc0gq().f[6]++;
          cov_vn4mgc0gq().s[42]++;
          return p.name;
        }));
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[43]++;
        console.log(`Permissions for role "${userData.roleTemplate}":`, permissionNames);
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[44]++;
        userData.permissions = permissionNames;
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[45]++;
        userData.roleId = roleWithPermissions.id;
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[46]++;
        userData.roleName = roleWithPermissions.name;
      } else {
        /* istanbul ignore next */
        cov_vn4mgc0gq().b[13][1]++;
        cov_vn4mgc0gq().s[47]++;
        console.warn(`Role "${userData.roleTemplate}" not found in the database.`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[12][1]++;
    }
    const hashedPassword =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[48]++, await _bcryptjs.default.hash(userData.password, 10));
    // Ensure shop:assigned_only permission exists if needed
    let shopAssignedPermissionId =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[49]++, null);
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[50]++;
    if (userData.permissions.includes("shop:assigned_only")) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[14][0]++;
      const permission =
      /* istanbul ignore next */
      (cov_vn4mgc0gq().s[51]++, await _prisma.default.permission.upsert({
        where: {
          name: "shop:assigned_only"
        },
        update: {},
        create: {
          name: "shop:assigned_only",
          description: "Restricts user access to only their assigned shop"
        }
      }));
      /* istanbul ignore next */
      cov_vn4mgc0gq().s[52]++;
      shopAssignedPermissionId = permission.id.toString();
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[14][1]++;
    }
    // Prepare user data
    const newUser =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[53]++, await _prisma.default.user.create({
      data: {
        id: (0, _crypto.randomUUID)(),
        name: userData.name,
        email: userData.email,
        password: hashedPassword,
        roleId: userData.roleId,
        roleName: userData.roleName,
        shopId: shopId,
        permissions: userData.permissions,
        allowedAccounts:
        /* istanbul ignore next */
        (cov_vn4mgc0gq().b[15][0]++, userData.allowedAccounts) ||
        /* istanbul ignore next */
        (cov_vn4mgc0gq().b[15][1]++, []),
        isActive: true
      }
    }));
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[54]++;
    return _server.NextResponse.json({
      success: true,
      message: "User created successfully",
      data: newUser
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[55]++;
    console.error("Error creating user:", error);
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[56]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create user"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,