{"version":3,"names":["cov_17drwboyvr","actualCoverage","s","GET","f","testConnection","_prisma","prisma","$queryRaw","console","log","inventoryCount","inventoryItem","count","inventoryItems","findMany","include","product","take","manualTotal","item","cost","b","weightedaveragecost","quantity","sqlResult","_server","NextResponse","json","success","connection","sampleItems","map","id","productId","productName","name","value","error","Error","message","String","status"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/test/inventory/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n    try {\n        // Test database connection\n        const testConnection = await prisma.$queryRaw`SELECT 1 as connected`;\n        console.log('Database connection test:', testConnection);\n\n        // Count inventory items\n        const inventoryCount = await prisma.inventoryItem.count();\n        console.log('Inventory item count:', inventoryCount);\n\n        // Get all inventory items with products\n        const inventoryItems = await prisma.inventoryItem.findMany({\n            include: {\n                product: true\n            },\n            take: 5 // Limit to 5 items for testing\n        });\n\n        // Calculate inventory value manually\n        let manualTotal = 0;\n        for (const item of inventoryItems) {\n            const cost = item.product?.weightedaveragecost || 0;\n            const quantity = item.quantity || 0;\n            manualTotal += cost * quantity;\n        }\n\n        // Direct SQL query to calculate total value\n        const sqlResult = await prisma.$queryRaw`\n            SELECT SUM(i.quantity * p.weightedaveragecost) as total_value\n            FROM \"InventoryItem\" i\n            JOIN \"Product\" p ON i.\"productId\" = p.id\n        `;\n\n        return NextResponse.json({\n            success: true,\n            connection: testConnection,\n            inventoryCount,\n            sampleItems: inventoryItems.map(item => ({\n                id: item.id,\n                productId: item.productId,\n                productName: item.product?.name,\n                quantity: item.quantity,\n                cost: item.product?.weightedaveragecost,\n                value: (item.quantity || 0) * (item.product?.weightedaveragecost || 0)\n            })),\n            manualTotal,\n            sqlResult\n        });\n    } catch (error) {\n        console.error('Test API error:', error);\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],"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","ignoreList":[]}