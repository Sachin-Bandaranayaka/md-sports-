db85ff134b3a06248b70369bcead5d5a
// jest-dom adds custom jest matchers for asserting on DOM nodes.
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _cache = require("./src/lib/cache");
// Set up environment variables for testing
process.env.JWT_SECRET = "test-secret-key";
process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = "12h";
process.env.NEXTAUTH_SECRET = "test-nextauth-secret";
process.env.NODE_ENV = "test";
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock window.matchMedia
if (typeof window !== "undefined") {
    Object.defineProperty(window, "matchMedia", {
        writable: true,
        value: jest.fn().mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
    });
}
// Clean up cache after all tests
afterAll(()=>{
    (0, _cache.cleanupCache)();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LWRvbSBhZGRzIGN1c3RvbSBqZXN0IG1hdGNoZXJzIGZvciBhc3NlcnRpbmcgb24gRE9NIG5vZGVzLlxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCB7IGNsZWFudXBDYWNoZSB9IGZyb20gJy4vc3JjL2xpYi9jYWNoZSc7XG5cbi8vIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRlc3RpbmdcbnByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1zZWNyZXQta2V5JztcbnByb2Nlc3MuZW52LkpXVF9BQ0NFU1NfVE9LRU5fRVhQSVJFU19JTiA9ICcxMmgnO1xucHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUID0gJ3Rlc3QtbmV4dGF1dGgtc2VjcmV0JztcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgZGlzY29ubmVjdCgpIHt9XG4gIG9ic2VydmUoKSB7fVxuICB1bm9ic2VydmUoKSB7fVxufTtcblxuLy8gTW9jayBSZXNpemVPYnNlcnZlclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gY2xhc3MgUmVzaXplT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIGRpc2Nvbm5lY3QoKSB7fVxuICBvYnNlcnZlKCkge31cbiAgdW5vYnNlcnZlKCkge31cbn07XG5cbi8vIE1vY2sgd2luZG93Lm1hdGNoTWVkaWFcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbWF0Y2hNZWRpYScsIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xuICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICBtZWRpYTogcXVlcnksXG4gICAgICBvbmNoYW5nZTogbnVsbCxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcbiAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gIH0pO1xufVxuXG4vLyBDbGVhbiB1cCBjYWNoZSBhZnRlciBhbGwgdGVzdHNcbmFmdGVyQWxsKCgpID0+IHtcbiAgY2xlYW51cENhY2hlKCk7XG59KTsiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIkpXVF9TRUNSRVQiLCJKV1RfQUNDRVNTX1RPS0VOX0VYUElSRVNfSU4iLCJORVhUQVVUSF9TRUNSRVQiLCJOT0RFX0VOViIsImdsb2JhbCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJkaXNjb25uZWN0Iiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlJlc2l6ZU9ic2VydmVyIiwid2luZG93IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsInZhbHVlIiwiamVzdCIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJhZnRlckFsbCIsImNsZWFudXBDYWNoZSJdLCJtYXBwaW5ncyI6IkFBQUEsaUVBQWlFOzs7OztRQUMxRDt1QkFDc0I7QUFFN0IsMkNBQTJDO0FBQzNDQSxRQUFRQyxHQUFHLENBQUNDLFVBQVUsR0FBRztBQUN6QkYsUUFBUUMsR0FBRyxDQUFDRSwyQkFBMkIsR0FBRztBQUMxQ0gsUUFBUUMsR0FBRyxDQUFDRyxlQUFlLEdBQUc7QUFDOUJKLFFBQVFDLEdBQUcsQ0FBQ0ksUUFBUSxHQUFHO0FBRXZCLDRCQUE0QjtBQUM1QkMsT0FBT0Msb0JBQW9CLEdBQUcsTUFBTUE7SUFDbENDLGFBQWMsQ0FBQztJQUNmQyxhQUFhLENBQUM7SUFDZEMsVUFBVSxDQUFDO0lBQ1hDLFlBQVksQ0FBQztBQUNmO0FBRUEsc0JBQXNCO0FBQ3RCTCxPQUFPTSxjQUFjLEdBQUcsTUFBTUE7SUFDNUJKLGFBQWMsQ0FBQztJQUNmQyxhQUFhLENBQUM7SUFDZEMsVUFBVSxDQUFDO0lBQ1hDLFlBQVksQ0FBQztBQUNmO0FBRUEseUJBQXlCO0FBQ3pCLElBQUksT0FBT0UsV0FBVyxhQUFhO0lBQ2pDQyxPQUFPQyxjQUFjLENBQUNGLFFBQVEsY0FBYztRQUMxQ0csVUFBVTtRQUNWQyxPQUFPQyxLQUFLQyxFQUFFLEdBQUdDLGtCQUFrQixDQUFDQyxDQUFBQSxRQUFVLENBQUE7Z0JBQzVDQyxTQUFTO2dCQUNUQyxPQUFPRjtnQkFDUEcsVUFBVTtnQkFDVkMsYUFBYVAsS0FBS0MsRUFBRTtnQkFDcEJPLGdCQUFnQlIsS0FBS0MsRUFBRTtnQkFDdkJRLGtCQUFrQlQsS0FBS0MsRUFBRTtnQkFDekJTLHFCQUFxQlYsS0FBS0MsRUFBRTtnQkFDNUJVLGVBQWVYLEtBQUtDLEVBQUU7WUFDeEIsQ0FBQTtJQUNGO0FBQ0Y7QUFFQSxpQ0FBaUM7QUFDakNXLFNBQVM7SUFDUEMsSUFBQUEsbUJBQVk7QUFDZCJ9