{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '@/lib/cache';\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index\n        const user = await prisma.user.findFirst({\n            where: {\n                email: email,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from role (handle case where user has no role)\n        let permissions: string[] = [];\n        if (user.role?.permissions) {\n            permissions = user.role.permissions.map(p => p.name);\n        } else if (user.permissions && Array.isArray(user.permissions)) {\n            // Convert permission IDs to names\n            const permissionRecords = await prisma.permission.findMany({\n                where: {\n                    id: {\n                        in: user.permissions.map(id => parseInt(id.toString()))\n                    }\n                },\n                select: { name: true }\n            });\n            permissions = permissionRecords.map(p => p.name);\n        }\n\n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            shopId: user.shopId,\n            permissions\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.role?.name || user.roleName || null,\n            shopId: user.shopId,\n            permissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role?.name || user.roleName || null,\n                shopId: user.shopId,\n                permissions\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n\n    try {\n        // Check cache first for token validation result\n        const cachedResult = await cacheService.get(tokenKey);\n        if (cachedResult) {\n            return cachedResult as TokenPayload;\n        }\n\n        // Verify token\n        const payload = jwt.verify(token, JWT_SECRET) as TokenPayload;\n\n        // Cache the valid token payload (shorter TTL for security)\n        await cacheService.set(tokenKey, payload, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n\n        return payload;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Import the proper permission checking utility\n    const { hasPermission: checkPermission } = await import('@/lib/utils/permissions');\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await prisma.user.findFirst({\n            where: { id: tokenPayload.sub, isActive: true },\n            include: {\n                role: {\n                    include: {\n                        permissions: { select: { name: true } }\n                    }\n                }\n            }\n        });\n\n        if (user) {\n            const permissions = user.role.permissions.map(p => p.name);\n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        return null;\n    }\n\n    const userId = Number(payload.sub);\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await prisma.user.findFirst({\n            where: {\n                id: userId,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: {\n                            select: { name: true }\n                        }\n                    }\n                }\n            }\n        });\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role.name,\n            permissions: user.role.permissions.map(p => p.name)\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],"names":["authenticateUser","generateToken","getUserFromDecodedPayload","getUserFromToken","hasPermission","parseTimeStringToSeconds","verifyToken","JWT_SECRET","process","env","JWT_EXPIRES_IN","JWT_ACCESS_TOKEN_EXPIRES_IN","timeStr","lastChar","slice","num","parseInt","isNaN","email","password","console","time","user","prisma","findFirst","where","isActive","include","role","permissions","select","name","timeEnd","success","message","isPasswordValid","bcrypt","compare","map","p","Array","isArray","permissionRecords","permission","findMany","id","in","toString","token","sub","username","roleId","shopId","userSession","fullName","roleName","cacheKey","cacheService","generateKey","CACHE_CONFIG","KEYS","USER_SESSION","userId","set","TTL","error","payload","jwt","sign","expiresIn","tokenKey","TOKEN_VALIDATION","substring","cachedResult","get","verify","TokenExpiredError","expiredAt","JsonWebTokenError","tokenPayload","checkPermission","permissionsCacheKey","USER_PERMISSIONS","cachedPermissions","log","Number","cachedUser","userWithPermissions"],"mappings":"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"}