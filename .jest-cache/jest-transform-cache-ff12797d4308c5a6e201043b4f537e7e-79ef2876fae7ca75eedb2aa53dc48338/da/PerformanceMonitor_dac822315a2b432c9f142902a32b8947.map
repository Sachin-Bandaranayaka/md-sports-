{"version":3,"names":["cov_8us9wwvxi","actualCoverage","s","default","f","PerformanceMonitor","usePerformanceMonitoring","pageName","showDetails","b","onMetricsUpdate","metrics","setMetrics","_react","useState","isVisible","setIsVisible","history","setHistory","collectMetrics","useCallback","navigation","performance","getEntriesByType","memory","newMetrics","pageLoadTime","loadEventEnd","navigationStart","apiResponseTime","getAverageApiResponseTime","renderTime","domContentLoadedEventEnd","domContentLoadedEventStart","memoryUsage","usedJSHeapSize","cacheHitRate","getCacheHitRate","errorRate","getErrorRate","timestamp","Date","now","prev","slice","apiCalls","length","totalTime","reduce","sum","entry","responseEnd","requestStart","cacheEntries","filter","transferSize","decodedBodySize","totalEntries","Math","random","useEffect","timer","setTimeout","interval","setInterval","clearTimeout","clearInterval","getPerformanceStatus","score","calculatePerformanceScore","status","color","bg","max","min","performanceStatus","_jsxruntime","jsxs","Fragment","jsx","className","_Button","Button","onClick","variant","size","_lucidereact","Activity","Clock","toFixed","Database","Zap","TrendingUp","AlertCircle","toLocaleTimeString","handleMetricsUpdate","process","env","NODE_ENV","console","log","props"],"sources":["/Users/sachin/Documents/md-sports-/src/components/purchases/PerformanceMonitor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Activity, Clock, Database, Zap, TrendingUp, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\n\ninterface PerformanceMetrics {\n  pageLoadTime: number;\n  apiResponseTime: number;\n  renderTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n  errorRate: number;\n  timestamp: number;\n}\n\ninterface PerformanceMonitorProps {\n  pageName: string;\n  showDetails?: boolean;\n  onMetricsUpdate?: (metrics: PerformanceMetrics) => void;\n}\n\nexport default function PerformanceMonitor({\n  pageName,\n  showDetails = false,\n  onMetricsUpdate\n}: PerformanceMonitorProps) {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const [isVisible, setIsVisible] = useState(showDetails);\n  const [history, setHistory] = useState<PerformanceMetrics[]>([]);\n\n  // Collect performance metrics\n  const collectMetrics = useCallback(() => {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const memory = (performance as any).memory;\n\n    const newMetrics: PerformanceMetrics = {\n      pageLoadTime: navigation ? navigation.loadEventEnd - navigation.navigationStart : 0,\n      apiResponseTime: getAverageApiResponseTime(),\n      renderTime: navigation ? navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart : 0,\n      memoryUsage: memory ? memory.usedJSHeapSize / 1024 / 1024 : 0, // MB\n      cacheHitRate: getCacheHitRate(),\n      errorRate: getErrorRate(),\n      timestamp: Date.now()\n    };\n\n    setMetrics(newMetrics);\n    setHistory(prev => [...prev.slice(-9), newMetrics]); // Keep last 10 entries\n\n    if (onMetricsUpdate) {\n      onMetricsUpdate(newMetrics);\n    }\n  }, [onMetricsUpdate]);\n\n  // Get average API response time from performance entries\n  const getAverageApiResponseTime = useCallback(() => {\n    const apiCalls = performance.getEntriesByType('fetch') as PerformanceResourceTiming[];\n    if (apiCalls.length === 0) return 0;\n\n    const totalTime = apiCalls.reduce((sum, entry) => {\n      return sum + (entry.responseEnd - entry.requestStart);\n    }, 0);\n\n    return totalTime / apiCalls.length;\n  }, []);\n\n  // Simulate cache hit rate (in real app, this would come from your caching layer)\n  const getCacheHitRate = useCallback(() => {\n    // This is a simulation - in real implementation, you'd track actual cache hits\n    const cacheEntries = performance.getEntriesByType('resource').filter(\n      entry => entry.transferSize === 0 && entry.decodedBodySize > 0\n    );\n    const totalEntries = performance.getEntriesByType('resource').length;\n\n    return totalEntries > 0 ? (cacheEntries.length / totalEntries) * 100 : 0;\n  }, []);\n\n  // Simulate error rate (in real app, this would come from error tracking)\n  const getErrorRate = useCallback(() => {\n    // This is a simulation - in real implementation, you'd track actual errors\n    return Math.random() * 2; // 0-2% error rate\n  }, []);\n\n  // Collect metrics on mount and periodically\n  useEffect(() => {\n    const timer = setTimeout(collectMetrics, 1000); // Initial collection after 1s\n    const interval = setInterval(collectMetrics, 30000); // Update every 30s\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(interval);\n    };\n  }, [collectMetrics]);\n\n  // Performance status based on metrics\n  const getPerformanceStatus = useCallback((metrics: PerformanceMetrics) => {\n    const score = calculatePerformanceScore(metrics);\n\n    if (score >= 90) return { status: 'excellent', color: 'text-green-600', bg: 'bg-green-50' };\n    if (score >= 75) return { status: 'good', color: 'text-blue-600', bg: 'bg-blue-50' };\n    if (score >= 60) return { status: 'fair', color: 'text-yellow-600', bg: 'bg-yellow-50' };\n    return { status: 'poor', color: 'text-red-600', bg: 'bg-red-50' };\n  }, []);\n\n  // Calculate overall performance score\n  const calculatePerformanceScore = useCallback((metrics: PerformanceMetrics) => {\n    let score = 100;\n\n    // Page load time penalty\n    if (metrics.pageLoadTime > 3000) score -= 20;\n    else if (metrics.pageLoadTime > 2000) score -= 10;\n    else if (metrics.pageLoadTime > 1000) score -= 5;\n\n    // API response time penalty\n    if (metrics.apiResponseTime > 1000) score -= 15;\n    else if (metrics.apiResponseTime > 500) score -= 8;\n    else if (metrics.apiResponseTime > 200) score -= 3;\n\n    // Memory usage penalty\n    if (metrics.memoryUsage > 100) score -= 15;\n    else if (metrics.memoryUsage > 50) score -= 8;\n    else if (metrics.memoryUsage > 25) score -= 3;\n\n    // Cache hit rate bonus/penalty\n    if (metrics.cacheHitRate > 80) score += 5;\n    else if (metrics.cacheHitRate < 50) score -= 10;\n\n    // Error rate penalty\n    if (metrics.errorRate > 5) score -= 20;\n    else if (metrics.errorRate > 2) score -= 10;\n    else if (metrics.errorRate > 1) score -= 5;\n\n    return Math.max(0, Math.min(100, score));\n  }, []);\n\n  if (!metrics) {\n    return null;\n  }\n\n  const performanceStatus = getPerformanceStatus(metrics);\n  const score = calculatePerformanceScore(metrics);\n\n  return (\n    <>\n      {/* Performance Badge */}\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Button\n          onClick={() => setIsVisible(!isVisible)}\n          variant=\"outline\"\n          size=\"sm\"\n          className={`${performanceStatus.bg} ${performanceStatus.color} border-current shadow-lg`}\n        >\n          <Activity className=\"h-4 w-4 mr-2\" />\n          {score}%\n        </Button>\n      </div>\n\n      {/* Detailed Performance Panel */}\n      {isVisible && (\n        <div className=\"fixed bottom-16 right-4 w-80 bg-white border border-gray-200 rounded-lg shadow-xl z-50\">\n          <div className=\"p-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-semibold text-gray-900\">\n                Performance Monitor\n              </h3>\n              <Button\n                onClick={() => setIsVisible(false)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n              >\n                Ã—\n              </Button>\n            </div>\n            <p className=\"text-xs text-gray-600 mt-1\">{pageName}</p>\n          </div>\n\n          <div className=\"p-4 space-y-4\">\n            {/* Overall Score */}\n            <div className={`p-3 rounded-lg ${performanceStatus.bg}`}>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-700\">Overall Score</span>\n                <span className={`text-lg font-bold ${performanceStatus.color}`}>\n                  {score}%\n                </span>\n              </div>\n              <div className=\"text-xs text-gray-600 mt-1 capitalize\">\n                {performanceStatus.status} performance\n              </div>\n            </div>\n\n            {/* Metrics Grid */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              {/* Page Load Time */}\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <Clock className=\"h-4 w-4 text-blue-500 mr-1\" />\n                  <span className=\"text-xs text-gray-600\">Load Time</span>\n                </div>\n                <div className=\"text-sm font-semibold text-gray-900\">\n                  {(metrics.pageLoadTime / 1000).toFixed(2)}s\n                </div>\n              </div>\n\n              {/* API Response Time */}\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <Database className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-xs text-gray-600\">API Time</span>\n                </div>\n                <div className=\"text-sm font-semibold text-gray-900\">\n                  {metrics.apiResponseTime.toFixed(0)}ms\n                </div>\n              </div>\n\n              {/* Memory Usage */}\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <Zap className=\"h-4 w-4 text-purple-500 mr-1\" />\n                  <span className=\"text-xs text-gray-600\">Memory</span>\n                </div>\n                <div className=\"text-sm font-semibold text-gray-900\">\n                  {metrics.memoryUsage.toFixed(1)}MB\n                </div>\n              </div>\n\n              {/* Cache Hit Rate */}\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <TrendingUp className=\"h-4 w-4 text-orange-500 mr-1\" />\n                  <span className=\"text-xs text-gray-600\">Cache Hit</span>\n                </div>\n                <div className=\"text-sm font-semibold text-gray-900\">\n                  {metrics.cacheHitRate.toFixed(1)}%\n                </div>\n              </div>\n            </div>\n\n            {/* Error Rate */}\n            {metrics.errorRate > 0 && (\n              <div className=\"flex items-center justify-between p-2 bg-red-50 rounded\">\n                <div className=\"flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 text-red-500 mr-2\" />\n                  <span className=\"text-sm text-red-700\">Error Rate</span>\n                </div>\n                <span className=\"text-sm font-semibold text-red-700\">\n                  {metrics.errorRate.toFixed(2)}%\n                </span>\n              </div>\n            )}\n\n            {/* Performance Tips */}\n            <div className=\"text-xs text-gray-600 space-y-1\">\n              <div className=\"font-medium\">Optimization Tips:</div>\n              {score < 90 && (\n                <ul className=\"space-y-1 ml-2\">\n                  {metrics.pageLoadTime > 2000 && (\n                    <li>â€¢ Consider code splitting or lazy loading</li>\n                  )}\n                  {metrics.apiResponseTime > 500 && (\n                    <li>â€¢ Optimize API queries or add caching</li>\n                  )}\n                  {metrics.memoryUsage > 50 && (\n                    <li>â€¢ Check for memory leaks or large objects</li>\n                  )}\n                  {metrics.cacheHitRate < 70 && (\n                    <li>â€¢ Improve caching strategy</li>\n                  )}\n                </ul>\n              )}\n              {score >= 90 && (\n                <div className=\"text-green-600\">âœ“ Excellent performance!</div>\n              )}\n            </div>\n\n            {/* Last Updated */}\n            <div className=\"text-xs text-gray-500 text-center pt-2 border-t\">\n              Last updated: {new Date(metrics.timestamp).toLocaleTimeString()}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n// Hook for using performance monitoring\nexport function usePerformanceMonitoring(pageName: string) {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n\n  const handleMetricsUpdate = useCallback((newMetrics: PerformanceMetrics) => {\n    setMetrics(newMetrics);\n\n    // Log performance data (in production, send to analytics service)\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Performance metrics for ${pageName}:`, newMetrics);\n    }\n  }, [pageName]);\n\n  return {\n    metrics,\n    PerformanceMonitor: (props: Omit<PerformanceMonitorProps, 'pageName' | 'onMetricsUpdate'>) => (\n      <PerformanceMonitor\n        {...props}\n        pageName={pageName}\n        onMetricsUpdate={handleMetricsUpdate}\n      />\n    )\n  };\n}"],"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","ignoreList":[]}