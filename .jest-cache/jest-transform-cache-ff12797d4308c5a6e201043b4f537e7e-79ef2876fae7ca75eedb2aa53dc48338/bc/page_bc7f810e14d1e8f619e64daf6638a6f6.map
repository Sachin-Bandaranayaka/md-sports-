{"version":3,"names":["Reports","initialReports","cov_4hxcuvt8z","s","id","name","description","type","lastGenerated","format","getReportTypeBadgeClass","f","b","convertToCSV","data","invoiceDetails","length","csvRows","headers","push","join","forEach","invoice","items","item","row","invoiceNumber","Date","createdAt","toLocaleDateString","customer","replace","shop","product","quantity","price","total","generateSalesSummaryPDF","reportData","reportName","summary","details","console","error","alert","doc","_jspdf","default","setFontSize","text","setTextColor","month","year","totalSales","toLocaleString","undefined","style","currency","numberOfInvoices","tableColumn","tableRows","invoiceDate","ticketData","autoTable","head","body","startY","headStyles","fillColor","styles","fontSize","columnStyles","halign","save","toISOString","split","generateCustomerPaymentsPDF","message","totalPaymentsAmount","numberOfPayments","numberOfCreditCustomersWithPayments","generatedAt","payment","paymentDate","rowData","customerName","paymentMethod","referenceNumber","paymentAmount","cellWidth","generateShopPerformancePDF","totalShopsAnalyzed","overallTotalSales","reduce","sum","totalSalesAmount","shopName","location","minimumFractionDigits","maximumFractionDigits","numberOfTransactions","totalQuantitySold","averageTransactionValue","generateInventoryExcel","worksheetData","map","productName","sku","barcode","category","totalValue","worksheet","_xlsx","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","columnWidths","wch","writeFile","generateProductPerformanceExcel","products","categoryName","totalCategoryQuantity","totalCategorySales","reports","setReports","_react","useState","loading","setLoading","setError","isSalesModalOpen","setIsSalesModalOpen","selectedSaleReportData","setSelectedSaleReportData","isInventoryModalOpen","setIsInventoryModalOpen","selectedInventoryReportData","setSelectedInventoryReportData","isCustomerPaymentsModalOpen","setIsCustomerPaymentsModalOpen","selectedCustomerPaymentsData","setSelectedCustomerPaymentsData","isProductPerformanceModalOpen","setIsProductPerformanceModalOpen","selectedProductPerformanceData","setSelectedProductPerformanceData","isShopPerformanceModalOpen","setIsShopPerformanceModalOpen","selectedShopPerformanceData","setSelectedShopPerformanceData","isDailySalesModalOpen","setIsDailySalesModalOpen","selectedDailySalesData","setSelectedDailySalesData","isScheduleModalOpen","setIsScheduleModalOpen","isGenerateModalOpen","setIsGenerateModalOpen","selectedReportName","setSelectedReportName","searchTerm","setSearchTerm","selectedType","setSelectedType","selectedFormat","setSelectedFormat","filteredReports","setFilteredReports","useEffect","fetchSalesSummary","prev","response","fetch","ok","Error","statusText","json","success","prevReports","report","err","fetchInventoryStatus","totalItems","fetchCustomerPayments","fetchProductPerformance","overallTotalProductsSold","numberOfCategoriesWithSales","overallTotalRevenue","fetchShopPerformance","totalOverallSales","fetchDailySales","totalShops","date","currentReports","liveReportData","find","r","filter","toLowerCase","includes","handleViewReport","handleDownloadReport","csvData","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","visibility","appendChild","click","removeChild","revokeObjectURL","paymentId","totalInvoices","numberOfShops","shopTableData","shopData","toString","_jspdfautotable","wb","summaryData","averagePerShop","summaryWs","shopOverviewData","shopOverviewWs","detailedData","invoices","itemsText","unitPrice","totalAmount","paymentStatus","detailedWs","handleGenerateFromTemplate","reportId","reportToView","handleGenerateAdhocReport","reportOptionsForModal","isLoading","_jsxruntime","jsxs","_MainLayout","className","jsx","_Button","Button","variant","size","onClick","_lucidereact","Calendar","BarChart2","role","placeholder","value","onChange","e","target","title","Filter","disabled","Download","colSpan","FileText","_SalesReportViewModal","isOpen","onClose","_InventoryReportViewModal","_CustomerPaymentsViewModal","_ProductPerformanceViewModal","_ShopPerformanceViewModal","_DailySalesReportModal","_ScheduleReportModal","_GenerateReportModal","onGenerate"],"sources":["/Users/sachin/Documents/md-sports-/src/app/reports/page.tsx"],"sourcesContent":["'use client';\n\nimport MainLayout from '@/components/layout/MainLayout';\nimport { Button } from '@/components/ui/Button';\nimport { BarChart2, Download, Filter, Calendar, FileText } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport SalesReportViewModal from '@/components/reports/SalesReportViewModal';\nimport InventoryReportViewModal from '@/components/reports/InventoryReportViewModal';\nimport CustomerPaymentsViewModal from '@/components/reports/CustomerPaymentsViewModal';\nimport ProductPerformanceViewModal from '@/components/reports/ProductPerformanceViewModal';\nimport ShopPerformanceViewModal from '@/components/reports/ShopPerformanceViewModal';\nimport DailySalesReportModal from '@/components/reports/DailySalesReportModal';\nimport ScheduleReportModal from '@/components/reports/ScheduleReportModal';\nimport GenerateReportModal from '@/components/reports/GenerateReportModal';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n// Extend jsPDF type to include autoTable\ndeclare module 'jspdf' {\n    interface jsPDF {\n        autoTable: (options: any) => jsPDF;\n    }\n}\nimport * as XLSX from 'xlsx';\n\ninterface Report {\n    id: string;\n    name: string;\n    description: string;\n    type: string;\n    lastGenerated: string;\n    format: string;\n    data?: any; // To store fetched data for the report\n}\n\n// Initial dummy data for reports\nconst initialReports: Report[] = [\n    {\n        id: 'REP-006',\n        name: 'Daily Sales Report',\n        description: 'Daily sales breakdown by shop with Excel and PDF export',\n        type: 'Sales',\n        lastGenerated: 'loading...',\n        format: 'Both'\n    },\n    {\n        id: 'REP-001',\n        name: 'Monthly Sales Summary',\n        description: 'Summary of sales across all shops for the current month',\n        type: 'Sales',\n        lastGenerated: 'loading...',\n        format: 'PDF'\n    },\n    {\n        id: 'REP-002',\n        name: 'Inventory Status Report',\n        description: 'Current inventory levels across all products and shops',\n        type: 'Inventory',\n        lastGenerated: '2025-05-14',\n        format: 'Excel'\n    },\n    {\n        id: 'REP-003',\n        name: 'Customer Payment History',\n        description: 'Payment history for all credit customers',\n        type: 'Financial',\n        lastGenerated: '2025-05-10',\n        format: 'PDF'\n    },\n    {\n        id: 'REP-004',\n        name: 'Product Performance Analysis',\n        description: 'Sales performance analysis by product category',\n        type: 'Analytics',\n        lastGenerated: '2025-05-08',\n        format: 'Excel'\n    },\n    {\n        id: 'REP-005',\n        name: 'Shop Performance Comparison',\n        description: 'Comparative analysis of all shop performance',\n        type: 'Analytics',\n        lastGenerated: '2025-05-01',\n        format: 'PDF'\n    }\n];\n\n// Report type badge colors\nconst getReportTypeBadgeClass = (type: string) => {\n    switch (type) {\n        case 'Sales':\n            return 'bg-blue-100 text-blue-800';\n        case 'Inventory':\n            return 'bg-green-100 text-green-800';\n        case 'Financial':\n            return 'bg-yellow-100 text-yellow-800';\n        case 'Analytics':\n            return 'bg-purple-100 text-purple-800';\n        default:\n            return 'bg-gray-100 text-gray-800';\n    }\n};\n\n// Helper function to convert array of objects to CSV string\nconst convertToCSV = (data: any[], invoiceDetails: any) => {\n    if (!data || data.length === 0 || !invoiceDetails) return '';\n\n    const csvRows = [];\n    // Add headers\n    const headers = [\n        'Invoice Number',\n        'Invoice Date',\n        'Customer Name',\n        'Shop Name',\n        'Product Name',\n        'Quantity',\n        'Price Per Unit',\n        'Item Total'\n    ];\n    csvRows.push(headers.join(','));\n\n    // Add data rows\n    invoiceDetails.forEach((invoice: any) => {\n        invoice.items.forEach((item: any) => {\n            const row = [\n                `\"${invoice.invoiceNumber}\"`,\n                `\"${new Date(invoice.createdAt).toLocaleDateString()}\"`,\n                `\"${invoice.customer.name.replace(/\"/g, '\"\"')}\"`,\n                `\"${(invoice.shop?.name || 'N/A').replace(/\"/g, '\"\"')}\"`,\n                `\"${(item.product?.name || 'N/A').replace(/\"/g, '\"\"')}\"`,\n                item.quantity,\n                item.price,\n                item.total\n            ];\n            csvRows.push(row.join(','));\n        });\n    });\n\n    return csvRows.join('\\n');\n};\n\nconst generateSalesSummaryPDF = (reportData: any, reportName: string) => {\n    if (!reportData || !reportData.summary || !reportData.details) {\n        console.error('Missing data for PDF generation');\n        alert('Could not generate PDF: data is missing.');\n        return;\n    }\n\n    const doc = new jsPDF();\n    const { summary, details } = reportData;\n\n    // Title\n    doc.setFontSize(18);\n    doc.text(reportName, 14, 22);\n\n    // Summary Info\n    doc.setFontSize(11);\n    doc.setTextColor(100);\n    doc.text(`Report for: ${summary.month} ${summary.year}`, 14, 32);\n    doc.text(`Total Sales: ${summary.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}`, 14, 38);\n    doc.text(`Number of Invoices: ${summary.numberOfInvoices.toLocaleString()}`, 14, 44);\n    doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 50);\n\n    // Table Data\n    const tableColumn = [\"Invoice #\", \"Date\", \"Customer\", \"Shop\", \"Total Amount\"];\n    const tableRows: any[][] = [];\n\n    details.forEach((invoice: any) => {\n        const invoiceDate = new Date(invoice.createdAt).toLocaleDateString();\n        const ticketData = [\n            invoice.invoiceNumber,\n            invoiceDate,\n            invoice.customer.name,\n            invoice.shop?.name || 'N/A',\n            invoice.total.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })\n        ];\n        tableRows.push(ticketData);\n    });\n\n    // Add table\n    (doc as any).autoTable({\n        head: [tableColumn],\n        body: tableRows,\n        startY: 60,\n        headStyles: { fillColor: [22, 160, 133] }, // Example header color\n        styles: { fontSize: 8 },\n        columnStyles: {\n            4: { halign: 'right' } // Align total amount to the right\n        }\n    });\n\n    doc.save(`${reportName.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);\n};\n\nconst generateCustomerPaymentsPDF = (reportData: any, reportName: string) => {\n    if (!reportData || !reportData.summary || !reportData.details) {\n        console.error('Missing data for PDF generation');\n        alert('Could not generate PDF: data is missing.');\n        return;\n    }\n\n    const doc = new jsPDF();\n    const { summary, details, message } = reportData;\n\n    // Title\n    doc.setFontSize(18);\n    doc.text(reportName, 14, 22);\n\n    // Summary Info / Message\n    doc.setFontSize(11);\n    doc.setTextColor(100);\n    let startY = 32;\n\n    if (message) {\n        doc.text(message, 14, startY);\n        startY += 6;\n    } else if (summary) {\n        doc.text(`Total Payments: ${summary.totalPaymentsAmount.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}`, 14, startY);\n        startY += 6;\n        doc.text(`Number of Transactions: ${summary.numberOfPayments.toLocaleString()}`, 14, startY);\n        startY += 6;\n        doc.text(`Credit Customers w/ Payments: ${summary.numberOfCreditCustomersWithPayments.toLocaleString()}`, 14, startY);\n        startY += 6;\n    }\n    doc.text(`Generated: ${new Date(reportData.generatedAt).toLocaleString()}`, 14, startY);\n    startY += 10; // Space before table\n\n    // Table Data\n    const tableColumn = [\"Customer\", \"Date\", \"Method\", \"Reference #\", \"Invoice #\", \"Amount\"];\n    const tableRows: any[][] = [];\n\n    if (details && details.length > 0) {\n        details.forEach((payment: any) => {\n            const paymentDate = new Date(payment.paymentDate).toLocaleString();\n            const rowData = [\n                payment.customerName,\n                paymentDate,\n                payment.paymentMethod || 'N/A',\n                payment.referenceNumber || 'N/A',\n                payment.invoiceNumber || 'N/A',\n                payment.paymentAmount.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })\n            ];\n            tableRows.push(rowData);\n        });\n    }\n\n    if (tableRows.length > 0) {\n        (doc as any).autoTable({\n            head: [tableColumn],\n            body: tableRows,\n            startY: startY,\n            headStyles: { fillColor: [22, 160, 133] },\n            styles: { fontSize: 8 },\n            columnStyles: {\n                0: { cellWidth: 40 }, // Customer\n                1: { cellWidth: 35 }, // Date\n                2: { cellWidth: 20 }, // Method\n                3: { cellWidth: 25 }, // Reference\n                4: { cellWidth: 25 }, // Invoice\n                5: { halign: 'right', cellWidth: 25 } // Amount\n            }\n        });\n    } else if (!message) {\n        doc.text(\"No payment details found for credit customers.\", 14, startY);\n    }\n\n    doc.save(`${reportName.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);\n};\n\nconst generateShopPerformancePDF = (reportData: any, reportName: string) => {\n    if (!reportData || !reportData.summary || !reportData.details) {\n        console.error('Missing data for PDF generation');\n        alert('Could not generate PDF: data is missing.');\n        return;\n    }\n\n    const doc = new jsPDF();\n    const { summary, details } = reportData;\n\n    // Title\n    doc.setFontSize(18);\n    doc.text(reportName, 14, 22);\n\n    // Summary Info\n    doc.setFontSize(11);\n    doc.setTextColor(100);\n    let startY = 32;\n    doc.text(`Report for: ${summary.month} ${summary.year}`, 14, startY);\n    startY += 6;\n    doc.text(`Total Shops Analyzed: ${summary.totalShopsAnalyzed.toLocaleString()}`, 14, startY);\n    startY += 6;\n    const overallTotalSales = details.reduce((sum: number, shop: any) => sum + shop.totalSalesAmount, 0);\n    doc.text(`Overall Total Sales: ${overallTotalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}`, 14, startY);\n    startY += 6;\n    doc.text(`Generated: ${new Date(reportData.generatedAt).toLocaleString()}`, 14, startY);\n    startY += 10; // Space before table\n\n    // Table Data\n    const tableColumn = [\"Shop Name\", \"Location\", \"Total Sales (LKR)\", \"Transactions\", \"Qty Sold\", \"Avg. Txn Value (LKR)\"];\n    const tableRows: any[][] = [];\n\n    details.forEach((shop: any) => {\n        const rowData = [\n            shop.shopName,\n            shop.location || 'N/A',\n            shop.totalSalesAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }),\n            shop.numberOfTransactions.toLocaleString(),\n            shop.totalQuantitySold.toLocaleString(),\n            shop.averageTransactionValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })\n        ];\n        tableRows.push(rowData);\n    });\n\n    (doc as any).autoTable({\n        head: [tableColumn],\n        body: tableRows,\n        startY: startY,\n        headStyles: { fillColor: [22, 160, 133] },\n        styles: { fontSize: 8 },\n        columnStyles: {\n            0: { cellWidth: 35 }, // Shop Name\n            1: { cellWidth: 30 }, // Location\n            2: { halign: 'right', cellWidth: 30 }, // Total Sales\n            3: { halign: 'right', cellWidth: 25 }, // Transactions\n            4: { halign: 'right', cellWidth: 20 }, // Qty Sold\n            5: { halign: 'right', cellWidth: 30 }  // Avg. Txn Value\n        }\n    });\n\n    doc.save(`${reportName.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);\n};\n\nconst generateInventoryExcel = (reportData: any, reportName: string) => {\n    if (!reportData || !reportData.details) {\n        console.error('Missing data for Excel generation');\n        alert('Could not generate Excel: data is missing.');\n        return;\n    }\n\n    const { details } = reportData;\n    const worksheetData = [\n        ['Product Name', 'SKU', 'Barcode', 'Category', 'Shop Name', 'Quantity', 'Price (Retail)', 'Total Value (Retail)'],\n        ...details.map((item: any) => [\n            item.productName,\n            item.sku || '',\n            item.barcode || '',\n            item.category,\n            item.shopName,\n            item.quantity,\n            item.price,\n            item.totalValue\n        ])\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Inventory Status');\n\n    // Adjust column widths (optional, but improves readability)\n    const columnWidths = [\n        { wch: 30 }, // Product Name\n        { wch: 15 }, // SKU\n        { wch: 15 }, // Barcode\n        { wch: 20 }, // Category\n        { wch: 20 }, // Shop Name\n        { wch: 10 }, // Quantity\n        { wch: 15 }, // Price\n        { wch: 20 }  // Total Value\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    XLSX.writeFile(workbook, `${reportName.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\nconst generateProductPerformanceExcel = (reportData: any, reportName: string) => {\n    if (!reportData || !reportData.details) {\n        console.error('Missing data for Excel generation');\n        alert('Could not generate Excel: data is missing.');\n        return;\n    }\n\n    const { details, summary } = reportData;\n    const worksheetData: any[][] = [];\n\n    // Header\n    worksheetData.push([`Product Performance Analysis for ${summary?.month} ${summary?.year}`]);\n    worksheetData.push([]); // Blank row\n    worksheetData.push([\n        'Category Name',\n        'Product Name',\n        'SKU',\n        'Total Quantity Sold',\n        'Total Sales Amount (LKR)'\n    ]);\n\n    details.forEach((category: any) => {\n        category.products.forEach((product: any) => {\n            worksheetData.push([\n                category.categoryName,\n                product.productName,\n                product.sku || '',\n                product.totalQuantitySold,\n                product.totalSalesAmount\n            ]);\n        });\n        // Add a summary row for the category\n        worksheetData.push([\n            `CATEGORY TOTAL: ${category.categoryName}`,\n            '', // Product Name placeholder\n            '', // SKU placeholder\n            category.totalCategoryQuantity,\n            category.totalCategorySales\n        ]);\n        worksheetData.push([]); // Blank row for separation\n    });\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Product Performance');\n\n    // Adjust column widths\n    const columnWidths = [\n        { wch: 25 }, // Category Name\n        { wch: 30 }, // Product Name\n        { wch: 15 }, // SKU\n        { wch: 20 }, // Total Quantity Sold\n        { wch: 25 }  // Total Sales Amount\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    XLSX.writeFile(workbook, `${reportName.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\ninterface ReportOption {\n    id: string;\n    name: string;\n    description: string;\n    data?: any;\n    isLoading: boolean;\n}\n\nexport default function Reports() {\n    const [reports, setReports] = useState<Report[]>(initialReports);\n    const [loading, setLoading] = useState<Record<string, boolean>>({});\n    const [error, setError] = useState<string | null>(null);\n\n    const [isSalesModalOpen, setIsSalesModalOpen] = useState(false);\n    const [selectedSaleReportData, setSelectedSaleReportData] = useState<any | null>(null);\n\n    const [isInventoryModalOpen, setIsInventoryModalOpen] = useState(false);\n    const [selectedInventoryReportData, setSelectedInventoryReportData] = useState<any | null>(null);\n\n    const [isCustomerPaymentsModalOpen, setIsCustomerPaymentsModalOpen] = useState(false);\n    const [selectedCustomerPaymentsData, setSelectedCustomerPaymentsData] = useState<any | null>(null);\n\n    const [isProductPerformanceModalOpen, setIsProductPerformanceModalOpen] = useState(false);\n    const [selectedProductPerformanceData, setSelectedProductPerformanceData] = useState<any | null>(null);\n\n    const [isShopPerformanceModalOpen, setIsShopPerformanceModalOpen] = useState(false);\n    const [selectedShopPerformanceData, setSelectedShopPerformanceData] = useState<any | null>(null);\n\n    const [isDailySalesModalOpen, setIsDailySalesModalOpen] = useState(false);\n    const [selectedDailySalesData, setSelectedDailySalesData] = useState<any | null>(null);\n\n    const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n    const [isGenerateModalOpen, setIsGenerateModalOpen] = useState(false);\n\n    const [selectedReportName, setSelectedReportName] = useState<string>('');\n\n    // State for Filters\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedType, setSelectedType] = useState('');\n    const [selectedFormat, setSelectedFormat] = useState('');\n    const [filteredReports, setFilteredReports] = useState<Report[]>(initialReports);\n\n    useEffect(() => {\n        const fetchSalesSummary = async () => {\n            setLoading(prev => ({ ...prev, 'REP-001': true }));\n            setError(null);\n            try {\n                const response = await fetch('/api/reports/sales');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch sales summary: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-001') {\n                            return {\n                                ...report,\n                                description: `Sales for ${data.summary.month} ${data.summary.year}: Total ${data.summary.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}, ${data.summary.numberOfInvoices} invoices.`,\n                                lastGenerated: new Date().toLocaleDateString('en-CA'),\n                                data: data // Store full API response { summary: ..., details: ... }\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch sales summary');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setError(err.message);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-001' ? { ...report, description: 'Error loading sales data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-001': false }));\n        };\n\n        const fetchInventoryStatus = async () => {\n            setLoading(prev => ({ ...prev, 'REP-002': true }));\n            try {\n                const response = await fetch('/api/reports/inventory');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch inventory status: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-002') {\n                            const totalItems = data.details.reduce((sum: number, item: any) => sum + item.quantity, 0);\n                            const totalValue = data.details.reduce((sum: number, item: any) => sum + item.totalValue, 0);\n                            return {\n                                ...report,\n                                description: `Total ${totalItems.toLocaleString()} items. Total value (Retail): ${totalValue.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}.`,\n                                lastGenerated: new Date(data.generatedAt).toLocaleDateString('en-CA'),\n                                data: data // Store full API response { details: ..., generatedAt: ... }\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch inventory status');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-002' ? { ...report, description: 'Error loading inventory data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-002': false }));\n        };\n\n        const fetchCustomerPayments = async () => {\n            setLoading(prev => ({ ...prev, 'REP-003': true }));\n            try {\n                const response = await fetch('/api/reports/customer-payments');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch customer payments: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-003') {\n                            let description = `Payment history for all credit customers.`;\n                            if (data.message) {\n                                description = data.message;\n                            } else if (data.summary) {\n                                description = `Total payments: ${data.summary.totalPaymentsAmount.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })} from ${data.summary.numberOfPayments} transactions by ${data.summary.numberOfCreditCustomersWithPayments} credit customer(s).`;\n                            }\n                            return {\n                                ...report,\n                                description,\n                                lastGenerated: new Date(data.generatedAt).toLocaleDateString('en-CA'),\n                                data: data // Store full API response { details: ..., summary: ..., generatedAt: ..., message?: ...}\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch customer payments');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-003' ? { ...report, description: 'Error loading payment data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-003': false }));\n        };\n\n        const fetchProductPerformance = async () => {\n            setLoading(prev => ({ ...prev, 'REP-004': true }));\n            try {\n                const response = await fetch('/api/reports/product-performance');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch product performance: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-004') {\n                            let description = `Sales performance analysis by product category for ${data.summary?.month} ${data.summary?.year}.`;\n                            if (data.message) {\n                                description = data.message;\n                            } else if (data.summary) {\n                                description = `Analysis for ${data.summary.month} ${data.summary.year}: ${data.summary.overallTotalProductsSold.toLocaleString()} items sold across ${data.summary.numberOfCategoriesWithSales} categories, totaling ${data.summary.overallTotalRevenue.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}.`;\n                            }\n                            return {\n                                ...report,\n                                description,\n                                lastGenerated: new Date(data.generatedAt).toLocaleDateString('en-CA'),\n                                data: data\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch product performance');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-004' ? { ...report, description: 'Error loading product performance data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-004': false }));\n        };\n\n        const fetchShopPerformance = async () => {\n            setLoading(prev => ({ ...prev, 'REP-005': true }));\n            try {\n                const response = await fetch('/api/reports/shop-performance');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch shop performance: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-005') {\n                            let description = `Comparative analysis of all shop performance for ${data.summary?.month} ${data.summary?.year}.`;\n                            if (data.message) {\n                                description = data.message;\n                            } else if (data.summary && data.details) {\n                                const totalOverallSales = data.details.reduce((sum: number, shop: any) => sum + shop.totalSalesAmount, 0);\n                                description = `Shop comparison for ${data.summary.month} ${data.summary.year}: ${data.summary.totalShopsAnalyzed} shops analyzed. Overall sales: ${totalOverallSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}.`;\n                            }\n                            return {\n                                ...report,\n                                description,\n                                lastGenerated: new Date(data.generatedAt).toLocaleDateString('en-CA'),\n                                data: data\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch shop performance');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-005' ? { ...report, description: 'Error loading shop performance data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-005': false }));\n        };\n\n        const fetchDailySales = async () => {\n            setLoading(prev => ({ ...prev, 'REP-006': true }));\n            try {\n                const response = await fetch('/api/reports/daily-sales');\n                if (!response.ok) {\n                    throw new Error(`Failed to fetch daily sales: ${response.statusText}`);\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setReports(prevReports => prevReports.map(report => {\n                        if (report.id === 'REP-006') {\n                            const totalSales = data.summary.totalSales;\n                            const totalShops = data.summary.totalShops;\n                            return {\n                                ...report,\n                                description: `Daily sales for ${data.summary.date}: ${totalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })} across ${totalShops} shops.`,\n                                lastGenerated: new Date().toLocaleDateString('en-CA'),\n                                data: data\n                            };\n                        }\n                        return report;\n                    }));\n                } else {\n                    throw new Error(data.message || 'Failed to fetch daily sales');\n                }\n            } catch (err: any) {\n                console.error(err);\n                setReports(prevReports => prevReports.map(report =>\n                    report.id === 'REP-006' ? { ...report, description: 'Error loading daily sales data', lastGenerated: 'Error' } : report\n                ));\n            }\n            setLoading(prev => ({ ...prev, 'REP-006': false }));\n        };\n\n        fetchDailySales();\n        fetchSalesSummary();\n        fetchInventoryStatus();\n        fetchCustomerPayments();\n        fetchProductPerformance();\n        fetchShopPerformance();\n    }, []);\n\n    // useEffect for filtering reports when data or filter criteria change\n    useEffect(() => {\n        let currentReports = reports.map(report => {\n            // Ensure we have the latest data description from the main `reports` state,\n            // rather than `initialReports` which has placeholder descriptions.\n            const liveReportData = reports.find(r => r.id === report.id);\n            return liveReportData || report; // Fallback to original if somehow not found (should not happen)\n        });\n\n        if (searchTerm) {\n            currentReports = currentReports.filter(report =>\n                report.name.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n        }\n        if (selectedType) {\n            currentReports = currentReports.filter(report => report.type === selectedType);\n        }\n        if (selectedFormat) {\n            currentReports = currentReports.filter(report => report.format === selectedFormat);\n        }\n        setFilteredReports(currentReports);\n    }, [searchTerm, selectedType, selectedFormat, reports]);\n\n    const handleViewReport = (report: Report) => {\n        setSelectedReportName(report.name);\n        if (report.id === 'REP-001' && report.data) {\n            setSelectedSaleReportData(report.data);\n            setIsSalesModalOpen(true);\n        } else if (report.id === 'REP-002' && report.data) {\n            setSelectedInventoryReportData(report.data);\n            setIsInventoryModalOpen(true);\n        } else if (report.id === 'REP-003' && report.data) {\n            setSelectedCustomerPaymentsData(report.data);\n            setIsCustomerPaymentsModalOpen(true);\n        } else if (report.id === 'REP-004' && report.data) {\n            setSelectedProductPerformanceData(report.data);\n            setIsProductPerformanceModalOpen(true);\n        } else if (report.id === 'REP-005' && report.data) {\n            setSelectedShopPerformanceData(report.data);\n            setIsShopPerformanceModalOpen(true);\n        } else if (report.id === 'REP-006' && report.data) {\n            setSelectedDailySalesData(report.data);\n            setIsDailySalesModalOpen(true);\n        } else {\n            alert(`View functionality for \"${report.name}\" is not yet implemented or data is missing.`);\n        }\n        if (isGenerateModalOpen) setIsGenerateModalOpen(false);\n    };\n\n    const handleDownloadReport = (report: Report) => {\n        if (report.id === 'REP-001' && report.data) {\n            if (report.format === 'PDF') {\n                generateSalesSummaryPDF(report.data, report.name);\n            } else { // Fallback or other formats like CSV\n                const csvData = convertToCSV(report.data.details, report.data.details);\n                if (csvData) {\n                    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                    const link = document.createElement('a');\n                    const url = URL.createObjectURL(blob);\n                    link.setAttribute('href', url);\n                    link.setAttribute('download', `Monthly_Sales_Summary_${new Date().toISOString().split('T')[0]}.csv`);\n                    link.style.visibility = 'hidden';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    URL.revokeObjectURL(url);\n                } else {\n                    alert('No data available to download for sales report.');\n                }\n            }\n        } else if (report.id === 'REP-002' && report.data && report.data.details) {\n            if (report.format === 'Excel') {\n                generateInventoryExcel(report.data, report.name);\n            } else {\n                // CSV fallback for REP-002\n                const headers = [\n                    'Product Name', 'SKU', 'Barcode', 'Category', 'Shop Name',\n                    'Quantity', 'Price (Retail)', 'Total Value (Retail)'\n                ];\n                const csvRows = [headers.join(',')];\n                report.data.details.forEach((item: any) => {\n                    const row = [\n                        `\"${item.productName.replace(/\"/g, '\"\"')}\"`,\n                        `\"${(item.sku || '').replace(/\"/g, '\"\"')}\"`,\n                        `\"${(item.barcode || '').replace(/\"/g, '\"\"')}\"`,\n                        `\"${item.category.replace(/\"/g, '\"\"')}\"`,\n                        `\"${item.shopName.replace(/\"/g, '\"\"')}\"`,\n                        item.quantity,\n                        item.price,\n                        item.totalValue\n                    ];\n                    csvRows.push(row.join(','));\n                });\n                const csvData = csvRows.join('\\n');\n                const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                const link = document.createElement('a');\n                const url = URL.createObjectURL(blob);\n                link.setAttribute('href', url);\n                link.setAttribute('download', `Inventory_Status_Report_${new Date().toISOString().split('T')[0]}.csv`);\n                link.style.visibility = 'hidden';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n            }\n        } else if (report.id === 'REP-003' && report.data) {\n            if (report.format === 'PDF') {\n                generateCustomerPaymentsPDF(report.data, report.name);\n            } else {\n                // Fallback to CSV for REP-003\n                if (report.data.details) {\n                    const headers = [\n                        'Payment ID', 'Customer Name', 'Payment Date', 'Payment Amount',\n                        'Payment Method', 'Reference Number', 'Invoice Number'\n                    ];\n                    const csvRows = [headers.join(',')];\n                    report.data.details.forEach((payment: any) => {\n                        const row = [\n                            payment.paymentId,\n                            `\"${payment.customerName.replace(/\"/g, '\"\"')}\"`,\n                            `\"${new Date(payment.paymentDate).toLocaleString()}\"`,\n                            payment.paymentAmount,\n                            `\"${(payment.paymentMethod || '').replace(/\"/g, '\"\"')}\"`,\n                            `\"${(payment.referenceNumber || '').replace(/\"/g, '\"\"')}\"`,\n                            `\"${(payment.invoiceNumber || 'N/A').replace(/\"/g, '\"\"')}\"`\n                        ];\n                        csvRows.push(row.join(','));\n                    });\n                    const csvData = csvRows.join('\\n');\n                    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                    const link = document.createElement('a');\n                    const url = URL.createObjectURL(blob);\n                    link.setAttribute('href', url);\n                    link.setAttribute('download', `Customer_Payment_History_${new Date().toISOString().split('T')[0]}.csv`);\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    URL.revokeObjectURL(url);\n                } else {\n                    alert('No details available to download CSV for Customer Payment History.');\n                }\n            }\n        } else if (report.id === 'REP-004' && report.data && report.data.details) {\n            if (report.format === 'Excel') {\n                generateProductPerformanceExcel(report.data, report.name);\n            } else {\n                // CSV fallback for REP-004\n                const headers = [\n                    'Category Name', 'Product Name', 'SKU',\n                    'Total Quantity Sold', 'Total Sales Amount (LKR)'\n                ];\n                const csvRows = [headers.join(',')];\n                report.data.details.forEach((category: any) => {\n                    category.products.forEach((product: any) => {\n                        const row = [\n                            `\"${category.categoryName.replace(/\"/g, '\"\"')}\"`,\n                            `\"${product.productName.replace(/\"/g, '\"\"')}\"`,\n                            `\"${(product.sku || '').replace(/\"/g, '\"\"')}\"`,\n                            product.totalQuantitySold,\n                            product.totalSalesAmount\n                        ];\n                        csvRows.push(row.join(','));\n                    });\n                    csvRows.push([\n                        `\"CATEGORY TOTAL: ${category.categoryName.replace(/\"/g, '\"\"')}\"`,\n                        '', '',\n                        category.totalCategoryQuantity,\n                        category.totalCategorySales\n                    ].join(','));\n                    csvRows.push(['', '', '', '', ''].join(','));\n                });\n                const csvData = csvRows.join('\\n');\n                const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                const link = document.createElement('a');\n                const url = URL.createObjectURL(blob);\n                link.setAttribute('href', url);\n                link.setAttribute('download', `Product_Performance_Analysis_${new Date().toISOString().split('T')[0]}.csv`);\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n            }\n        } else if (report.id === 'REP-005' && report.data && report.data.details) {\n            if (report.format === 'PDF') {\n                generateShopPerformancePDF(report.data, report.name);\n            } else {\n                // Fallback to CSV for REP-005\n                const headers = [\n                    'Shop Name', 'Location', 'Total Sales Amount (LKR)',\n                    'Number of Transactions', 'Total Quantity Sold', 'Avg. Transaction Value (LKR)'\n                ];\n                const csvRows = [headers.join(',')];\n                report.data.details.forEach((shop: any) => {\n                    const row = [\n                        `\"${shop.shopName.replace(/\"/g, '\"\"')}\"`,\n                        `\"${(shop.location || '').replace(/\"/g, '\"\"')}\"`,\n                        shop.totalSalesAmount,\n                        shop.numberOfTransactions,\n                        shop.totalQuantitySold,\n                        shop.averageTransactionValue\n                    ];\n                    csvRows.push(row.join(','));\n                });\n                const csvData = csvRows.join('\\n');\n                const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                const link = document.createElement('a');\n                const url = URL.createObjectURL(blob);\n                link.setAttribute('href', url);\n                link.setAttribute('download', `Shop_Performance_Comparison_${new Date().toISOString().split('T')[0]}.csv`);\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n            }\n        } else if (report.id === 'REP-006' && report.data) {\n            // Daily Sales Report - supports both PDF and Excel\n            if (report.format === 'Both' || report.format === 'PDF') {\n                // Generate PDF using the same logic as in DailySalesReportModal\n                const doc = new jsPDF();\n                \n                // Title\n                doc.setFontSize(20);\n                doc.text('Daily Sales Report', 20, 20);\n                \n                // Date and summary\n                doc.setFontSize(12);\n                doc.text(`Date: ${report.data.summary.date}`, 20, 35);\n                doc.text(`Total Sales: ${report.data.summary.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })}`, 20, 45);\n                doc.text(`Total Invoices: ${report.data.summary.totalInvoices}`, 20, 55);\n                doc.text(`Active Shops: ${report.data.summary.numberOfShops}`, 20, 65);\n                \n                // Shop summary table\n                const shopTableData = report.data.shopData.map((shop: any) => [\n                    shop.shopName,\n                    shop.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'LKR' }),\n                    shop.numberOfInvoices.toString(),\n                    shop.totalQuantitySold.toString(),\n                    shop.averageTransactionValue.toLocaleString(undefined, { style: 'currency', currency: 'LKR' })\n                ]);\n                \n                autoTable(doc, {\n                    head: [['Shop Name', 'Total Sales', 'Invoices', 'Quantity', 'Avg. Transaction']],\n                    body: shopTableData,\n                    startY: 75,\n                    styles: { fontSize: 10 },\n                    headStyles: { fillColor: [66, 139, 202] }\n                });\n                \n                doc.save(`Daily_Sales_Report_${report.data.summary.date}.pdf`);\n            }\n            \n            if (report.format === 'Both' || report.format === 'Excel') {\n                // Generate Excel using the same logic as in DailySalesReportModal\n                const wb = XLSX.utils.book_new();\n                \n                // Summary sheet\n                const summaryData = [\n                    ['Daily Sales Report Summary'],\n                    ['Date', report.data.summary.date],\n                    ['Total Sales', report.data.summary.totalSales],\n                    ['Total Invoices', report.data.summary.totalInvoices],\n                    ['Active Shops', report.data.summary.numberOfShops],\n                    ['Average Per Shop', report.data.summary.averagePerShop]\n                ];\n                const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);\n                XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');\n                \n                // Shop overview sheet\n                const shopOverviewData = [\n                    ['Shop Name', 'Total Sales', 'Invoice Count', 'Total Quantity', 'Average Transaction Value']\n                ];\n                report.data.shopData.forEach((shop: any) => {\n                    shopOverviewData.push([\n                        shop.shopName,\n                        shop.totalSales,\n                        shop.numberOfInvoices,\n                        shop.totalQuantitySold,\n                        shop.averageTransactionValue\n                    ]);\n                });\n                const shopOverviewWs = XLSX.utils.aoa_to_sheet(shopOverviewData);\n                XLSX.utils.book_append_sheet(wb, shopOverviewWs, 'Shop Overview');\n                \n                // Detailed invoices sheet\n                const detailedData = [\n                    ['Invoice Number', 'Shop', 'Customer', 'Total Amount', 'Payment Status', 'Created At', 'Items']\n                ];\n                report.data.shopData.forEach((shop: any) => {\n                    shop.invoices.forEach((invoice: any) => {\n                        const itemsText = invoice.items.map((item: any) => \n                            `${item.productName} (${item.quantity}x${item.unitPrice})`\n                        ).join('; ');\n                        \n                        detailedData.push([\n                            invoice.invoiceNumber,\n                            shop.shopName,\n                            invoice.customerName || 'Walk-in Customer',\n                            invoice.totalAmount,\n                            invoice.paymentStatus,\n                            new Date(invoice.createdAt).toLocaleString(),\n                            itemsText\n                        ]);\n                    });\n                });\n                const detailedWs = XLSX.utils.aoa_to_sheet(detailedData);\n                XLSX.utils.book_append_sheet(wb, detailedWs, 'Detailed Invoices');\n                \n                XLSX.writeFile(wb, `Daily_Sales_Report_${report.data.summary.date}.xlsx`);\n            }\n        } else {\n            alert(`Download functionality for \"${report.name}\" is not yet implemented or data is missing.`);\n        }\n    };\n\n    const handleGenerateFromTemplate = (reportId: string) => {\n        const reportToView = reports.find(r => r.id === reportId);\n        if (reportToView && reportToView.data) {\n            if (loading[reportId]) {\n                alert('Report data is still loading. Please wait.');\n                return;\n            }\n            handleViewReport(reportToView);\n        } else if (reportToView && loading[reportId]) {\n            alert('Report data is still loading. Please wait.');\n        } else {\n            alert('Report data not yet available or template is misconfigured. Please try again shortly.');\n        }\n    };\n\n    const handleGenerateAdhocReport = (reportId: string) => {\n        const reportToView = reports.find(r => r.id === reportId);\n        if (reportToView) {\n            handleViewReport(reportToView);\n        }\n    };\n\n    const reportOptionsForModal: ReportOption[] = reports.map(r => ({\n        id: r.id,\n        name: r.name,\n        description: r.description,\n        data: r.data,\n        isLoading: loading[r.id] || false\n    }));\n\n    return (\n        <MainLayout>\n            <div className=\"space-y-6\">\n                {/* Header with actions */}\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n                    <div>\n                        <h1 className=\"text-2xl font-bold text-gray-900\">Reports</h1>\n                        <p className=\"text-gray-500\">Generate and view business reports</p>\n                    </div>\n                    <div className=\"flex gap-3\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => setIsScheduleModalOpen(true)}>\n                            <Calendar className=\"w-4 h-4 mr-2\" />\n                            Schedule Report\n                        </Button>\n                        <Button variant=\"primary\" size=\"sm\" onClick={() => setIsGenerateModalOpen(true)}>\n                            <BarChart2 className=\"w-4 h-4 mr-2\" />\n                            Generate Report\n                        </Button>\n                    </div>\n                </div>\n\n                {error && (\n                    <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n                        <strong className=\"font-bold\">Error: </strong>\n                        <span className=\"block sm:inline\">{error}</span>\n                    </div>\n                )}\n\n                {/* Filter bar */}\n                <div className=\"bg-tertiary p-4 rounded-lg shadow-sm border border-gray-200\">\n                    <div className=\"flex flex-col md:flex-row gap-4\">\n                        <div className=\"relative flex-grow\">\n                            <input\n                                type=\"text\"\n                                className=\"bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary focus:border-primary block w-full p-2.5\"\n                                placeholder=\"Search reports by name...\"\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"flex gap-2\">\n                            <select\n                                className=\"bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary focus:border-primary block p-2.5\"\n                                value={selectedType}\n                                onChange={(e) => setSelectedType(e.target.value)}\n                            >\n                                <option value=\"\">All Types</option>\n                                <option value=\"Sales\">Sales</option>\n                                <option value=\"Inventory\">Inventory</option>\n                                <option value=\"Financial\">Financial</option>\n                                <option value=\"Analytics\">Analytics</option>\n                            </select>\n                            <select\n                                className=\"bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary focus:border-primary block p-2.5\"\n                                value={selectedFormat}\n                                onChange={(e) => setSelectedFormat(e.target.value)}\n                            >\n                                <option value=\"\">All Formats</option>\n                                <option value=\"PDF\">PDF</option>\n                                <option value=\"Excel\">Excel</option>\n                            </select>\n                            <Button variant=\"outline\" size=\"sm\" title=\"Filters apply automatically\">\n                                <Filter className=\"w-4 h-4\" />\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Reports List - Now uses filteredReports */}\n                <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200\">\n                    <div className=\"overflow-x-auto\">\n                        <table className=\"w-full text-sm text-left text-gray-500\">\n                            <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\n                                <tr>\n                                    <th className=\"px-6 py-3\">Report Name</th>\n                                    <th className=\"px-6 py-3\">Description</th>\n                                    <th className=\"px-6 py-3\">Type</th>\n                                    <th className=\"px-6 py-3\">Last Generated</th>\n                                    <th className=\"px-6 py-3\">Format</th>\n                                    <th className=\"px-6 py-3\">Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {filteredReports.map((report) => (\n                                    <tr key={report.id} className=\"border-b hover:bg-gray-50\">\n                                        <td className=\"px-6 py-4 font-medium text-gray-900\">\n                                            {report.name}\n                                            {loading[report.id] && <span className=\"text-xs text-gray-500 ml-2\">(loading...)</span>}\n                                        </td>\n                                        <td className=\"px-6 py-4\">\n                                            {report.description}\n                                        </td>\n                                        <td className=\"px-6 py-4\">\n                                            <span className={`px-2 py-1 rounded-full text-xs ${getReportTypeBadgeClass(report.type)}`}>\n                                                {report.type}\n                                            </span>\n                                        </td>\n                                        <td className=\"px-6 py-4\">{report.lastGenerated}</td>\n                                        <td className=\"px-6 py-4\">{report.format}</td>\n                                        <td className=\"px-6 py-4\">\n                                            <div className=\"flex gap-2\">\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                    disabled={(report.id === 'REP-001' || report.id === 'REP-002' || report.id === 'REP-003' || report.id === 'REP-004' || report.id === 'REP-005') && (loading[report.id] || !report.data)}\n                                                    onClick={() => handleViewReport(report)}\n                                                >\n                                                    View\n                                                </Button>\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                    disabled={(report.id === 'REP-001' || report.id === 'REP-002' || report.id === 'REP-003' || report.id === 'REP-004' || report.id === 'REP-005') && (loading[report.id] || !report.data)}\n                                                    onClick={() => handleDownloadReport(report)}\n                                                >\n                                                    <Download className=\"w-4 h-4\" />\n                                                </Button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                ))}\n                                {filteredReports.length === 0 && (\n                                    <tr>\n                                        <td colSpan={6} className=\"px-6 py-10 text-center text-gray-500\">\n                                            No reports match your filter criteria.\n                                        </td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n                {/* Report Templates */}\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-semibold text-gray-900\">Report Templates</h2>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        <div className=\"bg-tertiary p-6 rounded-lg shadow-sm border border-gray-200\">\n                            <div className=\"flex items-start justify-between\">\n                                <div>\n                                    <h3 className=\"text-lg font-semibold text-gray-900\">Sales by Shop</h3>\n                                    <p className=\"text-sm text-gray-500 mt-1\">Compare sales performance across different shop locations</p>\n                                </div>\n                                <div className=\"p-3 rounded-full bg-blue-100\">\n                                    <FileText className=\"h-6 w-6 text-blue-600\" />\n                                </div>\n                            </div>\n                            <div className=\"mt-6\">\n                                <Button\n                                    variant=\"outline\"\n                                    className=\"w-full\"\n                                    onClick={() => handleGenerateFromTemplate('REP-005')}\n                                    disabled={loading['REP-005'] || !reports.find(r => r.id === 'REP-005')?.data}\n                                >\n                                    Generate Report {loading['REP-005'] && '(Loading...)'}\n                                </Button>\n                            </div>\n                        </div>\n\n                        <div className=\"bg-tertiary p-6 rounded-lg shadow-sm border border-gray-200\">\n                            <div className=\"flex items-start justify-between\">\n                                <div>\n                                    <h3 className=\"text-lg font-semibold text-gray-900\">Inventory Status</h3>\n                                    <p className=\"text-sm text-gray-500 mt-1\">Current inventory levels with low stock warnings</p>\n                                </div>\n                                <div className=\"p-3 rounded-full bg-green-100\">\n                                    <FileText className=\"h-6 w-6 text-green-600\" />\n                                </div>\n                            </div>\n                            <div className=\"mt-6\">\n                                <Button\n                                    variant=\"outline\"\n                                    className=\"w-full\"\n                                    onClick={() => handleGenerateFromTemplate('REP-002')}\n                                    disabled={loading['REP-002'] || !reports.find(r => r.id === 'REP-002')?.data}\n                                >\n                                    Generate Report {loading['REP-002'] && '(Loading...)'}\n                                </Button>\n                            </div>\n                        </div>\n\n                        <div className=\"bg-tertiary p-6 rounded-lg shadow-sm border border-gray-200\">\n                            <div className=\"flex items-start justify-between\">\n                                <div>\n                                    <h3 className=\"text-lg font-semibold text-gray-900\">Financial Summary</h3>\n                                    <p className=\"text-sm text-gray-500 mt-1\">Monthly financial overview with revenue and expenses</p>\n                                </div>\n                                <div className=\"p-3 rounded-full bg-yellow-100\">\n                                    <FileText className=\"h-6 w-6 text-yellow-600\" />\n                                </div>\n                            </div>\n                            <div className=\"mt-6\">\n                                <Button\n                                    variant=\"outline\"\n                                    className=\"w-full\"\n                                    onClick={() => handleGenerateFromTemplate('REP-001')}\n                                    disabled={loading['REP-001'] || !reports.find(r => r.id === 'REP-001')?.data}\n                                >\n                                    Generate Report {loading['REP-001'] && '(Loading...)'}\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {isSalesModalOpen && selectedSaleReportData && (\n                <SalesReportViewModal\n                    isOpen={isSalesModalOpen}\n                    onClose={() => setIsSalesModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedSaleReportData}\n                />\n            )}\n            {isInventoryModalOpen && selectedInventoryReportData && (\n                <InventoryReportViewModal\n                    isOpen={isInventoryModalOpen}\n                    onClose={() => setIsInventoryModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedInventoryReportData}\n                />\n            )}\n            {isCustomerPaymentsModalOpen && selectedCustomerPaymentsData && (\n                <CustomerPaymentsViewModal\n                    isOpen={isCustomerPaymentsModalOpen}\n                    onClose={() => setIsCustomerPaymentsModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedCustomerPaymentsData}\n                />\n            )}\n            {isProductPerformanceModalOpen && selectedProductPerformanceData && (\n                <ProductPerformanceViewModal\n                    isOpen={isProductPerformanceModalOpen}\n                    onClose={() => setIsProductPerformanceModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedProductPerformanceData}\n                />\n            )}\n            {isShopPerformanceModalOpen && selectedShopPerformanceData && (\n                <ShopPerformanceViewModal\n                    isOpen={isShopPerformanceModalOpen}\n                    onClose={() => setIsShopPerformanceModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedShopPerformanceData}\n                />\n            )}\n            {isDailySalesModalOpen && selectedDailySalesData && (\n                <DailySalesReportModal\n                    isOpen={isDailySalesModalOpen}\n                    onClose={() => setIsDailySalesModalOpen(false)}\n                    reportName={selectedReportName}\n                    reportData={selectedDailySalesData}\n                />\n            )}\n            {isScheduleModalOpen && (\n                <ScheduleReportModal\n                    isOpen={isScheduleModalOpen}\n                    onClose={() => setIsScheduleModalOpen(false)}\n                />\n            )}\n            {isGenerateModalOpen && (\n                <GenerateReportModal\n                    isOpen={isGenerateModalOpen}\n                    onClose={() => setIsGenerateModalOpen(false)}\n                    reports={reportOptionsForModal}\n                    onGenerate={handleGenerateAdhocReport}\n                />\n            )}\n        </MainLayout>\n    );\n}"],"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","ignoreList":[]}