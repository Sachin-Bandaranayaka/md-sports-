{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/auth.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\n// Mock dependencies\njest.mock('bcryptjs');\njest.mock('jsonwebtoken');\njest.mock('@prisma/client');\n\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n  },\n  refreshToken: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn(),\n  },\n  $disconnect: jest.fn(),\n} as any;\n\n// Mock the auth service (we'll test the actual implementation)\nclass AuthService {\n  private prisma: PrismaClient;\n  \n  constructor() {\n    this.prisma = mockPrisma;\n  }\n\n  async login(email: string, password: string) {\n    // Find user by email\n    const user = await this.prisma.user.findUnique({\n      where: { email },\n      select: {\n        id: true,\n        email: true,\n        password: true,\n        name: true,\n        permissions: true,\n        isActive: true,\n        shopId: true,\n      },\n    });\n\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n\n    if (!user.isActive) {\n      throw new Error('Account is deactivated');\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Generate tokens\n    const accessToken = this.generateAccessToken(user);\n    const refreshToken = await this.generateRefreshToken(user.id);\n\n    return {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        permissions: user.permissions,\n        shopId: user.shopId,\n      },\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  private generateAccessToken(user: any) {\n    return jwt.sign(\n      {\n        userId: user.id,\n        email: user.email,\n        permissions: user.permissions,\n        shopId: user.shopId,\n      },\n      process.env.JWT_SECRET || 'test-secret',\n      { expiresIn: '15m' }\n    );\n  }\n\n  private async generateRefreshToken(userId: number) {\n    const token = jwt.sign(\n      { userId },\n      process.env.JWT_REFRESH_SECRET || 'test-refresh-secret',\n      { expiresIn: '7d' }\n    );\n\n    // Store refresh token in database\n    await this.prisma.refreshToken.create({\n      data: {\n        userId,\n        token,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      },\n    });\n\n    return token;\n  }\n\n  async verifyToken(token: string) {\n    try {\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'test-secret');\n      return decoded;\n    } catch (error) {\n      throw new Error('Invalid token');\n    }\n  }\n\n  async refreshAccessToken(refreshToken: string) {\n    // Verify refresh token\n    const decoded = jwt.verify(\n      refreshToken,\n      process.env.JWT_REFRESH_SECRET || 'test-refresh-secret'\n    ) as any;\n\n    // Check if refresh token exists in database\n    const storedToken = await this.prisma.refreshToken.findUnique({\n      where: { token: refreshToken },\n      include: { user: true },\n    });\n\n    if (!storedToken || storedToken.isRevoked) {\n      throw new Error('Invalid refresh token');\n    }\n\n    if (new Date() > storedToken.expiresAt) {\n      throw new Error('Refresh token expired');\n    }\n\n    // Generate new access token\n    const newAccessToken = this.generateAccessToken(storedToken.user);\n\n    return {\n      accessToken: newAccessToken,\n      user: {\n        id: storedToken.user.id,\n        email: storedToken.user.email,\n        name: storedToken.user.name,\n        permissions: storedToken.user.permissions,\n        shopId: storedToken.user.shopId,\n      },\n    };\n  }\n\n  async logout(refreshToken: string) {\n    // Revoke refresh token\n    await this.prisma.refreshToken.deleteMany({\n      where: { token: refreshToken },\n    });\n  }\n\n  async logoutAllDevices(userId: number) {\n    // Revoke all refresh tokens for user\n    await this.prisma.refreshToken.deleteMany({\n      where: { userId },\n    });\n  }\n}\n\ndescribe('AuthService', () => {\n  let authService: AuthService;\n\n  beforeEach(() => {\n    authService = new AuthService();\n    jest.clearAllMocks();\n    \n    // Set up environment variables\n    process.env.JWT_SECRET = 'test-secret';\n    process.env.JWT_REFRESH_SECRET = 'test-refresh-secret';\n    \n    // Mock JWT methods\n    mockJwt.sign.mockReturnValue('mock-token');\n    mockJwt.verify.mockReturnValue({ userId: 1, email: 'test@example.com' });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('login', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      password: 'hashedPassword',\n      name: 'Test User',\n      permissions: ['inventory:read', 'sales:create'],\n      isActive: true,\n      shopId: 'shop-1',\n    };\n\n    it('should successfully login with valid credentials', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(true as never);\n      mockJwt.sign.mockReturnValue('mock-access-token' as never);\n      mockPrisma.refreshToken.create.mockResolvedValue({ token: 'mock-refresh-token' });\n\n      // Act\n      const result = await authService.login('test@example.com', 'password123');\n\n      // Assert\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n        select: {\n          id: true,\n          email: true,\n          password: true,\n          name: true,\n          permissions: true,\n          isActive: true,\n          shopId: true,\n        },\n      });\n      expect(mockBcrypt.compare).toHaveBeenCalledWith('password123', 'hashedPassword');\n      expect(result).toEqual({\n        user: {\n          id: 1,\n          email: 'test@example.com',\n          name: 'Test User',\n          permissions: ['inventory:read', 'sales:create'],\n          shopId: 'shop-1',\n        },\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-access-token', // This would be the refresh token in real implementation\n      });\n    });\n\n    it('should throw error for non-existent user', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(authService.login('nonexistent@example.com', 'password123'))\n        .rejects.toThrow('Invalid credentials');\n      \n      expect(mockBcrypt.compare).not.toHaveBeenCalled();\n    });\n\n    it('should throw error for inactive user', async () => {\n      // Arrange\n      const inactiveUser = { ...mockUser, isActive: false };\n      mockPrisma.user.findUnique.mockResolvedValue(inactiveUser);\n\n      // Act & Assert\n      await expect(authService.login('test@example.com', 'password123'))\n        .rejects.toThrow('Account is deactivated');\n      \n      expect(mockBcrypt.compare).not.toHaveBeenCalled();\n    });\n\n    it('should throw error for invalid password', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(false as never);\n\n      // Act & Assert\n      await expect(authService.login('test@example.com', 'wrongpassword'))\n        .rejects.toThrow('Invalid credentials');\n      \n      expect(mockBcrypt.compare).toHaveBeenCalledWith('wrongpassword', 'hashedPassword');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Database connection failed'));\n\n      // Act & Assert\n      await expect(authService.login('test@example.com', 'password123'))\n        .rejects.toThrow('Database connection failed');\n    });\n  });\n\n  describe('verifyToken', () => {\n    it('should successfully verify valid token', async () => {\n      // Arrange\n      const mockDecoded = { userId: 1, email: 'test@example.com' };\n      mockJwt.verify.mockReturnValue(mockDecoded as never);\n\n      // Act\n      const result = await authService.verifyToken('valid-token');\n\n      // Assert\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret');\n      expect(result).toEqual(mockDecoded);\n    });\n\n    it('should throw error for invalid token', async () => {\n      // Arrange\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt malformed');\n      });\n\n      // Act & Assert\n      await expect(authService.verifyToken('invalid-token'))\n        .rejects.toThrow('Invalid token');\n    });\n\n    it('should throw error for expired token', async () => {\n      // Arrange\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt expired');\n      });\n\n      // Act & Assert\n      await expect(authService.verifyToken('expired-token'))\n        .rejects.toThrow('Invalid token');\n    });\n  });\n\n  describe('refreshAccessToken', () => {\n    const mockRefreshToken = {\n      token: 'valid-refresh-token',\n      userId: 1,\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 1 day from now\n      isRevoked: false,\n      user: {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        permissions: ['inventory:read'],\n        shopId: 'shop-1',\n      },\n    };\n\n    it('should successfully refresh access token', async () => {\n      // Arrange\n      mockJwt.verify.mockReturnValue({ userId: 1 } as never);\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);\n      mockJwt.sign.mockReturnValue('new-access-token' as never);\n\n      // Act\n      const result = await authService.refreshAccessToken('valid-refresh-token');\n\n      // Assert\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-refresh-token', 'test-refresh-secret');\n      expect(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({\n        where: { token: 'valid-refresh-token' },\n        include: { user: true },\n      });\n      expect(result).toEqual({\n        accessToken: 'new-access-token',\n        user: {\n          id: 1,\n          email: 'test@example.com',\n          name: 'Test User',\n          permissions: ['inventory:read'],\n          shopId: 'shop-1',\n        },\n      });\n    });\n\n    it('should throw error for revoked refresh token', async () => {\n      // Arrange\n      const revokedToken = { ...mockRefreshToken, isRevoked: true };\n      mockJwt.verify.mockReturnValue({ userId: 1 } as never);\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(revokedToken);\n\n      // Act & Assert\n      await expect(authService.refreshAccessToken('revoked-token'))\n        .rejects.toThrow('Invalid refresh token');\n    });\n\n    it('should throw error for expired refresh token', async () => {\n      // Arrange\n      const expiredToken = {\n        ...mockRefreshToken,\n        expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n      };\n      mockJwt.verify.mockReturnValue({ userId: 1 } as never);\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(expiredToken);\n\n      // Act & Assert\n      await expect(authService.refreshAccessToken('expired-token'))\n        .rejects.toThrow('Refresh token expired');\n    });\n\n    it('should throw error for non-existent refresh token', async () => {\n      // Arrange\n      mockJwt.verify.mockReturnValue({ userId: 1 } as never);\n      mockPrisma.refreshToken.findUnique.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(authService.refreshAccessToken('non-existent-token'))\n        .rejects.toThrow('Invalid refresh token');\n    });\n  });\n\n  describe('logout', () => {\n    it('should successfully logout user', async () => {\n      // Arrange\n      mockPrisma.refreshToken.deleteMany.mockResolvedValue({ count: 1 });\n\n      // Act\n      await authService.logout('refresh-token');\n\n      // Assert\n      expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({\n        where: { token: 'refresh-token' },\n      });\n    });\n\n    it('should handle logout even if token does not exist', async () => {\n      // Arrange\n      mockPrisma.refreshToken.deleteMany.mockResolvedValue({ count: 0 });\n\n      // Act & Assert\n      await expect(authService.logout('non-existent-token')).resolves.not.toThrow();\n    });\n  });\n\n  describe('logoutAllDevices', () => {\n    it('should successfully logout from all devices', async () => {\n      // Arrange\n      mockPrisma.refreshToken.deleteMany.mockResolvedValue({ count: 3 });\n\n      // Act\n      await authService.logoutAllDevices(1);\n\n      // Assert\n      expect(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({\n        where: { userId: 1 },\n      });\n    });\n\n    it('should handle logout all devices even if no tokens exist', async () => {\n      // Arrange\n      mockPrisma.refreshToken.deleteMany.mockResolvedValue({ count: 0 });\n\n      // Act & Assert\n      await expect(authService.logoutAllDevices(1)).resolves.not.toThrow();\n    });\n  });\n\n  describe('security considerations', () => {\n    it('should use secure JWT configuration', () => {\n      // Arrange\n      const mockUser = { id: 1, email: 'test@example.com', permissions: [], shopId: 'shop-1' };\n      \n      // Act\n      authService['generateAccessToken'](mockUser);\n      \n      // Assert\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: 1,\n          email: 'test@example.com',\n          permissions: [],\n          shopId: 'shop-1',\n        }),\n        'test-secret',\n        { expiresIn: '15m' }\n      );\n    });\n\n    it('should not expose sensitive user data in tokens', () => {\n      // Arrange\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        password: 'hashedPassword',\n        permissions: [],\n        shopId: 'shop-1',\n      };\n      \n      // Act\n      authService['generateAccessToken'](mockUser);\n      \n      // Assert\n      const tokenPayload = (mockJwt.sign as jest.Mock).mock.calls[0][0];\n      expect(tokenPayload).not.toHaveProperty('password');\n    });\n\n    it('should use different secrets for access and refresh tokens', async () => {\n      // This test ensures we're using different secrets for different token types\n      const mockUser = { id: 1, email: 'test@example.com', permissions: [], shopId: 'shop-1' };\n      \n      // Mock the database call for refresh token creation\n      mockPrisma.refreshToken.create.mockResolvedValue({\n        id: 1,\n        userId: 1,\n        token: 'mock-refresh-token',\n        expiresAt: new Date(),\n        createdAt: new Date(),\n      });\n      \n      // Generate access token\n      authService['generateAccessToken'](mockUser);\n      \n      // Generate refresh token\n      await authService['generateRefreshToken'](1);\n      \n      // Assert different secrets are used\n      const calls = (mockJwt.sign as jest.Mock).mock.calls;\n      expect(calls).toHaveLength(2);\n      \n      const accessTokenCall = calls[0];\n      const refreshTokenCall = calls[1];\n      \n      expect(accessTokenCall[1]).toBe('test-secret');\n      expect(refreshTokenCall[1]).toBe('test-refresh-secret');\n      expect(accessTokenCall[1]).not.toBe(refreshTokenCall[1]);\n    });\n  });\n});"],"names":["jest","mock","mockBcrypt","bcrypt","mockJwt","jwt","mockPrisma","user","findUnique","fn","create","update","refreshToken","delete","deleteMany","$disconnect","AuthService","constructor","prisma","login","email","password","where","select","id","name","permissions","isActive","shopId","Error","isValidPassword","compare","accessToken","generateAccessToken","generateRefreshToken","sign","userId","process","env","JWT_SECRET","expiresIn","token","JWT_REFRESH_SECRET","data","expiresAt","Date","now","verifyToken","decoded","verify","error","refreshAccessToken","storedToken","include","isRevoked","newAccessToken","logout","logoutAllDevices","describe","authService","beforeEach","clearAllMocks","mockReturnValue","afterEach","resetAllMocks","mockUser","it","mockResolvedValue","result","expect","toHaveBeenCalledWith","toEqual","rejects","toThrow","not","toHaveBeenCalled","inactiveUser","mockRejectedValue","mockDecoded","mockImplementation","mockRefreshToken","revokedToken","expiredToken","count","resolves","objectContaining","tokenPayload","calls","toHaveProperty","createdAt","toHaveLength","accessTokenCall","refreshTokenCall","toBe"],"mappings":"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"}