a8c0e6f47a70123040af2e88c9b9a0dd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_globals.jest.mock("bcryptjs");
_globals.jest.mock("jsonwebtoken");
_globals.jest.mock("@prisma/client");
const mockBcrypt = _bcryptjs.default;
const mockJwt = _jsonwebtoken.default;
const mockPrisma = {
    user: {
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn()
    },
    refreshToken: {
        create: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    $disconnect: _globals.jest.fn()
};
// Mock the auth service (we'll test the actual implementation)
class AuthService {
    constructor(){
        this.prisma = mockPrisma;
    }
    async login(email, password) {
        // Find user by email
        const user = await this.prisma.user.findUnique({
            where: {
                email
            },
            select: {
                id: true,
                email: true,
                password: true,
                name: true,
                permissions: true,
                isActive: true,
                shopId: true
            }
        });
        if (!user) {
            throw new Error("Invalid credentials");
        }
        if (!user.isActive) {
            throw new Error("Account is deactivated");
        }
        // Verify password
        const isValidPassword = await _bcryptjs.default.compare(password, user.password);
        if (!isValidPassword) {
            throw new Error("Invalid credentials");
        }
        // Generate tokens
        const accessToken = this.generateAccessToken(user);
        const refreshToken = await this.generateRefreshToken(user.id);
        return {
            user: {
                id: user.id,
                email: user.email,
                name: user.name,
                permissions: user.permissions,
                shopId: user.shopId
            },
            accessToken,
            refreshToken
        };
    }
    generateAccessToken(user) {
        return _jsonwebtoken.default.sign({
            userId: user.id,
            email: user.email,
            permissions: user.permissions,
            shopId: user.shopId
        }, process.env.JWT_SECRET || "test-secret", {
            expiresIn: "15m"
        });
    }
    async generateRefreshToken(userId) {
        const token = _jsonwebtoken.default.sign({
            userId
        }, process.env.JWT_REFRESH_SECRET || "test-refresh-secret", {
            expiresIn: "7d"
        });
        // Store refresh token in database
        await this.prisma.refreshToken.create({
            data: {
                userId,
                token,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
            }
        });
        return token;
    }
    async verifyToken(token) {
        try {
            const decoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
            return decoded;
        } catch (error) {
            throw new Error("Invalid token");
        }
    }
    async refreshAccessToken(refreshToken) {
        // Verify refresh token
        const decoded = _jsonwebtoken.default.verify(refreshToken, process.env.JWT_REFRESH_SECRET || "test-refresh-secret");
        // Check if refresh token exists in database
        const storedToken = await this.prisma.refreshToken.findUnique({
            where: {
                token: refreshToken
            },
            include: {
                user: true
            }
        });
        if (!storedToken || storedToken.isRevoked) {
            throw new Error("Invalid refresh token");
        }
        if (new Date() > storedToken.expiresAt) {
            throw new Error("Refresh token expired");
        }
        // Generate new access token
        const newAccessToken = this.generateAccessToken(storedToken.user);
        return {
            accessToken: newAccessToken,
            user: {
                id: storedToken.user.id,
                email: storedToken.user.email,
                name: storedToken.user.name,
                permissions: storedToken.user.permissions,
                shopId: storedToken.user.shopId
            }
        };
    }
    async logout(refreshToken) {
        // Revoke refresh token
        await this.prisma.refreshToken.deleteMany({
            where: {
                token: refreshToken
            }
        });
    }
    async logoutAllDevices(userId) {
        // Revoke all refresh tokens for user
        await this.prisma.refreshToken.deleteMany({
            where: {
                userId
            }
        });
    }
}
(0, _globals.describe)("AuthService", ()=>{
    let authService;
    (0, _globals.beforeEach)(()=>{
        authService = new AuthService();
        _globals.jest.clearAllMocks();
        // Set up environment variables
        process.env.JWT_SECRET = "test-secret";
        process.env.JWT_REFRESH_SECRET = "test-refresh-secret";
        // Mock JWT methods
        mockJwt.sign.mockReturnValue("mock-token");
        mockJwt.verify.mockReturnValue({
            userId: 1,
            email: "test@example.com"
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("login", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            password: "hashedPassword",
            name: "Test User",
            permissions: [
                "inventory:read",
                "sales:create"
            ],
            isActive: true,
            shopId: "shop-1"
        };
        (0, _globals.it)("should successfully login with valid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(true);
            mockJwt.sign.mockReturnValue("mock-access-token");
            mockPrisma.refreshToken.create.mockResolvedValue({
                token: "mock-refresh-token"
            });
            // Act
            const result = await authService.login("test@example.com", "password123");
            // Assert
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    email: "test@example.com"
                },
                select: {
                    id: true,
                    email: true,
                    password: true,
                    name: true,
                    permissions: true,
                    isActive: true,
                    shopId: true
                }
            });
            (0, _globals.expect)(mockBcrypt.compare).toHaveBeenCalledWith("password123", "hashedPassword");
            (0, _globals.expect)(result).toEqual({
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User",
                    permissions: [
                        "inventory:read",
                        "sales:create"
                    ],
                    shopId: "shop-1"
                },
                accessToken: "mock-access-token",
                refreshToken: "mock-access-token"
            });
        });
        (0, _globals.it)("should throw error for non-existent user", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(null);
            // Act & Assert
            await (0, _globals.expect)(authService.login("nonexistent@example.com", "password123")).rejects.toThrow("Invalid credentials");
            (0, _globals.expect)(mockBcrypt.compare).not.toHaveBeenCalled();
        });
        (0, _globals.it)("should throw error for inactive user", async ()=>{
            // Arrange
            const inactiveUser = {
                ...mockUser,
                isActive: false
            };
            mockPrisma.user.findUnique.mockResolvedValue(inactiveUser);
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "password123")).rejects.toThrow("Account is deactivated");
            (0, _globals.expect)(mockBcrypt.compare).not.toHaveBeenCalled();
        });
        (0, _globals.it)("should throw error for invalid password", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(false);
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "wrongpassword")).rejects.toThrow("Invalid credentials");
            (0, _globals.expect)(mockBcrypt.compare).toHaveBeenCalledWith("wrongpassword", "hashedPassword");
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Database connection failed"));
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "password123")).rejects.toThrow("Database connection failed");
        });
    });
    (0, _globals.describe)("verifyToken", ()=>{
        (0, _globals.it)("should successfully verify valid token", async ()=>{
            // Arrange
            const mockDecoded = {
                userId: 1,
                email: "test@example.com"
            };
            mockJwt.verify.mockReturnValue(mockDecoded);
            // Act
            const result = await authService.verifyToken("valid-token");
            // Assert
            (0, _globals.expect)(mockJwt.verify).toHaveBeenCalledWith("valid-token", "test-secret");
            (0, _globals.expect)(result).toEqual(mockDecoded);
        });
        (0, _globals.it)("should throw error for invalid token", async ()=>{
            // Arrange
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("jwt malformed");
            });
            // Act & Assert
            await (0, _globals.expect)(authService.verifyToken("invalid-token")).rejects.toThrow("Invalid token");
        });
        (0, _globals.it)("should throw error for expired token", async ()=>{
            // Arrange
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("jwt expired");
            });
            // Act & Assert
            await (0, _globals.expect)(authService.verifyToken("expired-token")).rejects.toThrow("Invalid token");
        });
    });
    (0, _globals.describe)("refreshAccessToken", ()=>{
        const mockRefreshToken = {
            token: "valid-refresh-token",
            userId: 1,
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
            isRevoked: false,
            user: {
                id: 1,
                email: "test@example.com",
                name: "Test User",
                permissions: [
                    "inventory:read"
                ],
                shopId: "shop-1"
            }
        };
        (0, _globals.it)("should successfully refresh access token", async ()=>{
            // Arrange
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);
            mockJwt.sign.mockReturnValue("new-access-token");
            // Act
            const result = await authService.refreshAccessToken("valid-refresh-token");
            // Assert
            (0, _globals.expect)(mockJwt.verify).toHaveBeenCalledWith("valid-refresh-token", "test-refresh-secret");
            (0, _globals.expect)(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({
                where: {
                    token: "valid-refresh-token"
                },
                include: {
                    user: true
                }
            });
            (0, _globals.expect)(result).toEqual({
                accessToken: "new-access-token",
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User",
                    permissions: [
                        "inventory:read"
                    ],
                    shopId: "shop-1"
                }
            });
        });
        (0, _globals.it)("should throw error for revoked refresh token", async ()=>{
            // Arrange
            const revokedToken = {
                ...mockRefreshToken,
                isRevoked: true
            };
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(revokedToken);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("revoked-token")).rejects.toThrow("Invalid refresh token");
        });
        (0, _globals.it)("should throw error for expired refresh token", async ()=>{
            // Arrange
            const expiredToken = {
                ...mockRefreshToken,
                expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000)
            };
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(expiredToken);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("expired-token")).rejects.toThrow("Refresh token expired");
        });
        (0, _globals.it)("should throw error for non-existent refresh token", async ()=>{
            // Arrange
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(null);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("non-existent-token")).rejects.toThrow("Invalid refresh token");
        });
    });
    (0, _globals.describe)("logout", ()=>{
        (0, _globals.it)("should successfully logout user", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 1
            });
            // Act
            await authService.logout("refresh-token");
            // Assert
            (0, _globals.expect)(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                where: {
                    token: "refresh-token"
                }
            });
        });
        (0, _globals.it)("should handle logout even if token does not exist", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 0
            });
            // Act & Assert
            await (0, _globals.expect)(authService.logout("non-existent-token")).resolves.not.toThrow();
        });
    });
    (0, _globals.describe)("logoutAllDevices", ()=>{
        (0, _globals.it)("should successfully logout from all devices", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 3
            });
            // Act
            await authService.logoutAllDevices(1);
            // Assert
            (0, _globals.expect)(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                where: {
                    userId: 1
                }
            });
        });
        (0, _globals.it)("should handle logout all devices even if no tokens exist", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 0
            });
            // Act & Assert
            await (0, _globals.expect)(authService.logoutAllDevices(1)).resolves.not.toThrow();
        });
    });
    (0, _globals.describe)("security considerations", ()=>{
        (0, _globals.it)("should use secure JWT configuration", ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            };
            // Act
            authService["generateAccessToken"](mockUser);
            // Assert
            (0, _globals.expect)(mockJwt.sign).toHaveBeenCalledWith(_globals.expect.objectContaining({
                userId: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            }), "test-secret", {
                expiresIn: "15m"
            });
        });
        (0, _globals.it)("should not expose sensitive user data in tokens", ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                password: "hashedPassword",
                permissions: [],
                shopId: "shop-1"
            };
            // Act
            authService["generateAccessToken"](mockUser);
            // Assert
            const tokenPayload = mockJwt.sign.mock.calls[0][0];
            (0, _globals.expect)(tokenPayload).not.toHaveProperty("password");
        });
        (0, _globals.it)("should use different secrets for access and refresh tokens", async ()=>{
            // This test ensures we're using different secrets for different token types
            const mockUser = {
                id: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            };
            // Mock the database call for refresh token creation
            mockPrisma.refreshToken.create.mockResolvedValue({
                id: 1,
                userId: 1,
                token: "mock-refresh-token",
                expiresAt: new Date(),
                createdAt: new Date()
            });
            // Generate access token
            authService["generateAccessToken"](mockUser);
            // Generate refresh token
            await authService["generateRefreshToken"](1);
            // Assert different secrets are used
            const calls = mockJwt.sign.mock.calls;
            (0, _globals.expect)(calls).toHaveLength(2);
            const accessTokenCall = calls[0];
            const refreshTokenCall = calls[1];
            (0, _globals.expect)(accessTokenCall[1]).toBe("test-secret");
            (0, _globals.expect)(refreshTokenCall[1]).toBe("test-refresh-secret");
            (0, _globals.expect)(accessTokenCall[1]).not.toBe(refreshTokenCall[1]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvdW5pdC9hdXRoLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGplc3QsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ2JjcnlwdGpzJyk7XG5qZXN0Lm1vY2soJ2pzb253ZWJ0b2tlbicpO1xuamVzdC5tb2NrKCdAcHJpc21hL2NsaWVudCcpO1xuXG5jb25zdCBtb2NrQmNyeXB0ID0gYmNyeXB0IGFzIGplc3QuTW9ja2VkPHR5cGVvZiBiY3J5cHQ+O1xuY29uc3QgbW9ja0p3dCA9IGp3dCBhcyBqZXN0Lk1vY2tlZDx0eXBlb2Ygand0PjtcbmNvbnN0IG1vY2tQcmlzbWEgPSB7XG4gIHVzZXI6IHtcbiAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIH0sXG4gIHJlZnJlc2hUb2tlbjoge1xuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICBkZWxldGU6IGplc3QuZm4oKSxcbiAgICBkZWxldGVNYW55OiBqZXN0LmZuKCksXG4gIH0sXG4gICRkaXNjb25uZWN0OiBqZXN0LmZuKCksXG59IGFzIGFueTtcblxuLy8gTW9jayB0aGUgYXV0aCBzZXJ2aWNlICh3ZSdsbCB0ZXN0IHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24pXG5jbGFzcyBBdXRoU2VydmljZSB7XG4gIHByaXZhdGUgcHJpc21hOiBQcmlzbWFDbGllbnQ7XG4gIFxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByaXNtYSA9IG1vY2tQcmlzbWE7XG4gIH1cblxuICBhc3luYyBsb2dpbihlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMucHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBlbWFpbCB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgICAgcGFzc3dvcmQ6IHRydWUsXG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIHBlcm1pc3Npb25zOiB0cnVlLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgc2hvcElkOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNyZWRlbnRpYWxzJyk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VyLmlzQWN0aXZlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY291bnQgaXMgZGVhY3RpdmF0ZWQnKTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgcGFzc3dvcmRcbiAgICBjb25zdCBpc1ZhbGlkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG4gICAgaWYgKCFpc1ZhbGlkUGFzc3dvcmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjcmVkZW50aWFscycpO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHRva2Vuc1xuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdGhpcy5nZW5lcmF0ZUFjY2Vzc1Rva2VuKHVzZXIpO1xuICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVSZWZyZXNoVG9rZW4odXNlci5pZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjoge1xuICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgcGVybWlzc2lvbnM6IHVzZXIucGVybWlzc2lvbnMsXG4gICAgICAgIHNob3BJZDogdXNlci5zaG9wSWQsXG4gICAgICB9LFxuICAgICAgYWNjZXNzVG9rZW4sXG4gICAgICByZWZyZXNoVG9rZW4sXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVBY2Nlc3NUb2tlbih1c2VyOiBhbnkpIHtcbiAgICByZXR1cm4gand0LnNpZ24oXG4gICAgICB7XG4gICAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICAgIHBlcm1pc3Npb25zOiB1c2VyLnBlcm1pc3Npb25zLFxuICAgICAgICBzaG9wSWQ6IHVzZXIuc2hvcElkLFxuICAgICAgfSxcbiAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ3Rlc3Qtc2VjcmV0JyxcbiAgICAgIHsgZXhwaXJlc0luOiAnMTVtJyB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVSZWZyZXNoVG9rZW4odXNlcklkOiBudW1iZXIpIHtcbiAgICBjb25zdCB0b2tlbiA9IGp3dC5zaWduKFxuICAgICAgeyB1c2VySWQgfSxcbiAgICAgIHByb2Nlc3MuZW52LkpXVF9SRUZSRVNIX1NFQ1JFVCB8fCAndGVzdC1yZWZyZXNoLXNlY3JldCcsXG4gICAgICB7IGV4cGlyZXNJbjogJzdkJyB9XG4gICAgKTtcblxuICAgIC8vIFN0b3JlIHJlZnJlc2ggdG9rZW4gaW4gZGF0YWJhc2VcbiAgICBhd2FpdCB0aGlzLnByaXNtYS5yZWZyZXNoVG9rZW4uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB0b2tlbixcbiAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyA3IGRheXNcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICBhc3luYyB2ZXJpZnlUb2tlbih0b2tlbjogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRlY29kZWQgPSBqd3QudmVyaWZ5KHRva2VuLCBwcm9jZXNzLmVudi5KV1RfU0VDUkVUIHx8ICd0ZXN0LXNlY3JldCcpO1xuICAgICAgcmV0dXJuIGRlY29kZWQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbicpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlZnJlc2hBY2Nlc3NUb2tlbihyZWZyZXNoVG9rZW46IHN0cmluZykge1xuICAgIC8vIFZlcmlmeSByZWZyZXNoIHRva2VuXG4gICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkoXG4gICAgICByZWZyZXNoVG9rZW4sXG4gICAgICBwcm9jZXNzLmVudi5KV1RfUkVGUkVTSF9TRUNSRVQgfHwgJ3Rlc3QtcmVmcmVzaC1zZWNyZXQnXG4gICAgKSBhcyBhbnk7XG5cbiAgICAvLyBDaGVjayBpZiByZWZyZXNoIHRva2VuIGV4aXN0cyBpbiBkYXRhYmFzZVxuICAgIGNvbnN0IHN0b3JlZFRva2VuID0gYXdhaXQgdGhpcy5wcmlzbWEucmVmcmVzaFRva2VuLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgdG9rZW46IHJlZnJlc2hUb2tlbiB9LFxuICAgICAgaW5jbHVkZTogeyB1c2VyOiB0cnVlIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXN0b3JlZFRva2VuIHx8IHN0b3JlZFRva2VuLmlzUmV2b2tlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZnJlc2ggdG9rZW4nKTtcbiAgICB9XG5cbiAgICBpZiAobmV3IERhdGUoKSA+IHN0b3JlZFRva2VuLmV4cGlyZXNBdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWZyZXNoIHRva2VuIGV4cGlyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBuZXcgYWNjZXNzIHRva2VuXG4gICAgY29uc3QgbmV3QWNjZXNzVG9rZW4gPSB0aGlzLmdlbmVyYXRlQWNjZXNzVG9rZW4oc3RvcmVkVG9rZW4udXNlcik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWNjZXNzVG9rZW46IG5ld0FjY2Vzc1Rva2VuLFxuICAgICAgdXNlcjoge1xuICAgICAgICBpZDogc3RvcmVkVG9rZW4udXNlci5pZCxcbiAgICAgICAgZW1haWw6IHN0b3JlZFRva2VuLnVzZXIuZW1haWwsXG4gICAgICAgIG5hbWU6IHN0b3JlZFRva2VuLnVzZXIubmFtZSxcbiAgICAgICAgcGVybWlzc2lvbnM6IHN0b3JlZFRva2VuLnVzZXIucGVybWlzc2lvbnMsXG4gICAgICAgIHNob3BJZDogc3RvcmVkVG9rZW4udXNlci5zaG9wSWQsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBhc3luYyBsb2dvdXQocmVmcmVzaFRva2VuOiBzdHJpbmcpIHtcbiAgICAvLyBSZXZva2UgcmVmcmVzaCB0b2tlblxuICAgIGF3YWl0IHRoaXMucHJpc21hLnJlZnJlc2hUb2tlbi5kZWxldGVNYW55KHtcbiAgICAgIHdoZXJlOiB7IHRva2VuOiByZWZyZXNoVG9rZW4gfSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxvZ291dEFsbERldmljZXModXNlcklkOiBudW1iZXIpIHtcbiAgICAvLyBSZXZva2UgYWxsIHJlZnJlc2ggdG9rZW5zIGZvciB1c2VyXG4gICAgYXdhaXQgdGhpcy5wcmlzbWEucmVmcmVzaFRva2VuLmRlbGV0ZU1hbnkoe1xuICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZGVzY3JpYmUoJ0F1dGhTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGF1dGhTZXJ2aWNlID0gbmV3IEF1dGhTZXJ2aWNlKCk7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgXG4gICAgLy8gU2V0IHVwIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1zZWNyZXQnO1xuICAgIHByb2Nlc3MuZW52LkpXVF9SRUZSRVNIX1NFQ1JFVCA9ICd0ZXN0LXJlZnJlc2gtc2VjcmV0JztcbiAgICBcbiAgICAvLyBNb2NrIEpXVCBtZXRob2RzXG4gICAgbW9ja0p3dC5zaWduLm1vY2tSZXR1cm5WYWx1ZSgnbW9jay10b2tlbicpO1xuICAgIG1vY2tKd3QudmVyaWZ5Lm1vY2tSZXR1cm5WYWx1ZSh7IHVzZXJJZDogMSwgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xvZ2luJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tVc2VyID0ge1xuICAgICAgaWQ6IDEsXG4gICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICdoYXNoZWRQYXNzd29yZCcsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIHBlcm1pc3Npb25zOiBbJ2ludmVudG9yeTpyZWFkJywgJ3NhbGVzOmNyZWF0ZSddLFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHN1Y2Nlc3NmdWxseSBsb2dpbiB3aXRoIHZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuICAgICAgbW9ja0JjcnlwdC5jb21wYXJlLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUgYXMgbmV2ZXIpO1xuICAgICAgbW9ja0p3dC5zaWduLm1vY2tSZXR1cm5WYWx1ZSgnbW9jay1hY2Nlc3MtdG9rZW4nIGFzIG5ldmVyKTtcbiAgICAgIG1vY2tQcmlzbWEucmVmcmVzaFRva2VuLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHRva2VuOiAnbW9jay1yZWZyZXNoLXRva2VuJyB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5sb2dpbigndGVzdEBleGFtcGxlLmNvbScsICdwYXNzd29yZDEyMycpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB3aGVyZTogeyBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICAgIHBhc3N3b3JkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgcGVybWlzc2lvbnM6IHRydWUsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgc2hvcElkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja0JjcnlwdC5jb21wYXJlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncGFzc3dvcmQxMjMnLCAnaGFzaGVkUGFzc3dvcmQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgICBwZXJtaXNzaW9uczogWydpbnZlbnRvcnk6cmVhZCcsICdzYWxlczpjcmVhdGUnXSxcbiAgICAgICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgICAgICB9LFxuICAgICAgICBhY2Nlc3NUb2tlbjogJ21vY2stYWNjZXNzLXRva2VuJyxcbiAgICAgICAgcmVmcmVzaFRva2VuOiAnbW9jay1hY2Nlc3MtdG9rZW4nLCAvLyBUaGlzIHdvdWxkIGJlIHRoZSByZWZyZXNoIHRva2VuIGluIHJlYWwgaW1wbGVtZW50YXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBmb3Igbm9uLWV4aXN0ZW50IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UubG9naW4oJ25vbmV4aXN0ZW50QGV4YW1wbGUuY29tJywgJ3Bhc3N3b3JkMTIzJykpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tCY3J5cHQuY29tcGFyZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGluYWN0aXZlIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBpbmFjdGl2ZVVzZXIgPSB7IC4uLm1vY2tVc2VyLCBpc0FjdGl2ZTogZmFsc2UgfTtcbiAgICAgIG1vY2tQcmlzbWEudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKGluYWN0aXZlVXNlcik7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLmxvZ2luKCd0ZXN0QGV4YW1wbGUuY29tJywgJ3Bhc3N3b3JkMTIzJykpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ0FjY291bnQgaXMgZGVhY3RpdmF0ZWQnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tCY3J5cHQuY29tcGFyZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGludmFsaWQgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG4gICAgICBtb2NrQmNyeXB0LmNvbXBhcmUubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UgYXMgbmV2ZXIpO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5sb2dpbigndGVzdEBleGFtcGxlLmNvbScsICd3cm9uZ3Bhc3N3b3JkJykpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tCY3J5cHQuY29tcGFyZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3dyb25ncGFzc3dvcmQnLCAnaGFzaGVkUGFzc3dvcmQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGRhdGFiYXNlIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZCcpKTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UubG9naW4oJ3Rlc3RAZXhhbXBsZS5jb20nLCAncGFzc3dvcmQxMjMnKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZlcmlmeVRva2VuJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHZlcmlmeSB2YWxpZCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IG1vY2tEZWNvZGVkID0geyB1c2VySWQ6IDEsIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScgfTtcbiAgICAgIG1vY2tKd3QudmVyaWZ5Lm1vY2tSZXR1cm5WYWx1ZShtb2NrRGVjb2RlZCBhcyBuZXZlcik7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UudmVyaWZ5VG9rZW4oJ3ZhbGlkLXRva2VuJyk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tKd3QudmVyaWZ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndmFsaWQtdG9rZW4nLCAndGVzdC1zZWNyZXQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0RlY29kZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBmb3IgaW52YWxpZCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tKd3QudmVyaWZ5Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignand0IG1hbGZvcm1lZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLnZlcmlmeVRva2VuKCdpbnZhbGlkLXRva2VuJykpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ0ludmFsaWQgdG9rZW4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGV4cGlyZWQgdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrSnd0LnZlcmlmeS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2p3dCBleHBpcmVkJyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UudmVyaWZ5VG9rZW4oJ2V4cGlyZWQtdG9rZW4nKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCB0b2tlbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVmcmVzaEFjY2Vzc1Rva2VuJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tSZWZyZXNoVG9rZW4gPSB7XG4gICAgICB0b2tlbjogJ3ZhbGlkLXJlZnJlc2gtdG9rZW4nLFxuICAgICAgdXNlcklkOiAxLFxuICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCksIC8vIDEgZGF5IGZyb20gbm93XG4gICAgICBpc1Jldm9rZWQ6IGZhbHNlLFxuICAgICAgdXNlcjoge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgIHBlcm1pc3Npb25zOiBbJ2ludmVudG9yeTpyZWFkJ10sXG4gICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHN1Y2Nlc3NmdWxseSByZWZyZXNoIGFjY2VzcyB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tKd3QudmVyaWZ5Lm1vY2tSZXR1cm5WYWx1ZSh7IHVzZXJJZDogMSB9IGFzIG5ldmVyKTtcbiAgICAgIG1vY2tQcmlzbWEucmVmcmVzaFRva2VuLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1JlZnJlc2hUb2tlbik7XG4gICAgICBtb2NrSnd0LnNpZ24ubW9ja1JldHVyblZhbHVlKCduZXctYWNjZXNzLXRva2VuJyBhcyBuZXZlcik7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UucmVmcmVzaEFjY2Vzc1Rva2VuKCd2YWxpZC1yZWZyZXNoLXRva2VuJyk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tKd3QudmVyaWZ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndmFsaWQtcmVmcmVzaC10b2tlbicsICd0ZXN0LXJlZnJlc2gtc2VjcmV0Jyk7XG4gICAgICBleHBlY3QobW9ja1ByaXNtYS5yZWZyZXNoVG9rZW4uZmluZFVuaXF1ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB3aGVyZTogeyB0b2tlbjogJ3ZhbGlkLXJlZnJlc2gtdG9rZW4nIH0sXG4gICAgICAgIGluY2x1ZGU6IHsgdXNlcjogdHJ1ZSB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgYWNjZXNzVG9rZW46ICduZXctYWNjZXNzLXRva2VuJyxcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgICAgcGVybWlzc2lvbnM6IFsnaW52ZW50b3J5OnJlYWQnXSxcbiAgICAgICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZvciByZXZva2VkIHJlZnJlc2ggdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCByZXZva2VkVG9rZW4gPSB7IC4uLm1vY2tSZWZyZXNoVG9rZW4sIGlzUmV2b2tlZDogdHJ1ZSB9O1xuICAgICAgbW9ja0p3dC52ZXJpZnkubW9ja1JldHVyblZhbHVlKHsgdXNlcklkOiAxIH0gYXMgbmV2ZXIpO1xuICAgICAgbW9ja1ByaXNtYS5yZWZyZXNoVG9rZW4uZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShyZXZva2VkVG9rZW4pO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5yZWZyZXNoQWNjZXNzVG9rZW4oJ3Jldm9rZWQtdG9rZW4nKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCByZWZyZXNoIHRva2VuJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZvciBleHBpcmVkIHJlZnJlc2ggdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBleHBpcmVkVG9rZW4gPSB7XG4gICAgICAgIC4uLm1vY2tSZWZyZXNoVG9rZW4sXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyAxIGRheSBhZ29cbiAgICAgIH07XG4gICAgICBtb2NrSnd0LnZlcmlmeS5tb2NrUmV0dXJuVmFsdWUoeyB1c2VySWQ6IDEgfSBhcyBuZXZlcik7XG4gICAgICBtb2NrUHJpc21hLnJlZnJlc2hUb2tlbi5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKGV4cGlyZWRUb2tlbik7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLnJlZnJlc2hBY2Nlc3NUb2tlbignZXhwaXJlZC10b2tlbicpKVxuICAgICAgICAucmVqZWN0cy50b1Rocm93KCdSZWZyZXNoIHRva2VuIGV4cGlyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIG5vbi1leGlzdGVudCByZWZyZXNoIHRva2VuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja0p3dC52ZXJpZnkubW9ja1JldHVyblZhbHVlKHsgdXNlcklkOiAxIH0gYXMgbmV2ZXIpO1xuICAgICAgbW9ja1ByaXNtYS5yZWZyZXNoVG9rZW4uZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UucmVmcmVzaEFjY2Vzc1Rva2VuKCdub24tZXhpc3RlbnQtdG9rZW4nKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCByZWZyZXNoIHRva2VuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdsb2dvdXQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgbG9nb3V0IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnJlZnJlc2hUb2tlbi5kZWxldGVNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKHsgY291bnQ6IDEgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgYXdhaXQgYXV0aFNlcnZpY2UubG9nb3V0KCdyZWZyZXNoLXRva2VuJyk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tQcmlzbWEucmVmcmVzaFRva2VuLmRlbGV0ZU1hbnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgd2hlcmU6IHsgdG9rZW46ICdyZWZyZXNoLXRva2VuJyB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsb2dvdXQgZXZlbiBpZiB0b2tlbiBkb2VzIG5vdCBleGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tQcmlzbWEucmVmcmVzaFRva2VuLmRlbGV0ZU1hbnkubW9ja1Jlc29sdmVkVmFsdWUoeyBjb3VudDogMCB9KTtcblxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UubG9nb3V0KCdub24tZXhpc3RlbnQtdG9rZW4nKSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xvZ291dEFsbERldmljZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgbG9nb3V0IGZyb20gYWxsIGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJpc21hLnJlZnJlc2hUb2tlbi5kZWxldGVNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKHsgY291bnQ6IDMgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgYXdhaXQgYXV0aFNlcnZpY2UubG9nb3V0QWxsRGV2aWNlcygxKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QobW9ja1ByaXNtYS5yZWZyZXNoVG9rZW4uZGVsZXRlTWFueSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB3aGVyZTogeyB1c2VySWQ6IDEgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9nb3V0IGFsbCBkZXZpY2VzIGV2ZW4gaWYgbm8gdG9rZW5zIGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1ByaXNtYS5yZWZyZXNoVG9rZW4uZGVsZXRlTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGNvdW50OiAwIH0pO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5sb2dvdXRBbGxEZXZpY2VzKDEpKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2VjdXJpdHkgY29uc2lkZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB1c2Ugc2VjdXJlIEpXVCBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7IGlkOiAxLCBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLCBwZXJtaXNzaW9uczogW10sIHNob3BJZDogJ3Nob3AtMScgfTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBhdXRoU2VydmljZVsnZ2VuZXJhdGVBY2Nlc3NUb2tlbiddKG1vY2tVc2VyKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QobW9ja0p3dC5zaWduKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVzZXJJZDogMSxcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBlcm1pc3Npb25zOiBbXSxcbiAgICAgICAgICBzaG9wSWQ6ICdzaG9wLTEnLFxuICAgICAgICB9KSxcbiAgICAgICAgJ3Rlc3Qtc2VjcmV0JyxcbiAgICAgICAgeyBleHBpcmVzSW46ICcxNW0nIH1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBleHBvc2Ugc2Vuc2l0aXZlIHVzZXIgZGF0YSBpbiB0b2tlbnMnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAnaGFzaGVkUGFzc3dvcmQnLFxuICAgICAgICBwZXJtaXNzaW9uczogW10sXG4gICAgICAgIHNob3BJZDogJ3Nob3AtMScsXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGF1dGhTZXJ2aWNlWydnZW5lcmF0ZUFjY2Vzc1Rva2VuJ10obW9ja1VzZXIpO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGNvbnN0IHRva2VuUGF5bG9hZCA9IChtb2NrSnd0LnNpZ24gYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzWzBdWzBdO1xuICAgICAgZXhwZWN0KHRva2VuUGF5bG9hZCkubm90LnRvSGF2ZVByb3BlcnR5KCdwYXNzd29yZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1c2UgZGlmZmVyZW50IHNlY3JldHMgZm9yIGFjY2VzcyBhbmQgcmVmcmVzaCB0b2tlbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBUaGlzIHRlc3QgZW5zdXJlcyB3ZSdyZSB1c2luZyBkaWZmZXJlbnQgc2VjcmV0cyBmb3IgZGlmZmVyZW50IHRva2VuIHR5cGVzXG4gICAgICBjb25zdCBtb2NrVXNlciA9IHsgaWQ6IDEsIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsIHBlcm1pc3Npb25zOiBbXSwgc2hvcElkOiAnc2hvcC0xJyB9O1xuICAgICAgXG4gICAgICAvLyBNb2NrIHRoZSBkYXRhYmFzZSBjYWxsIGZvciByZWZyZXNoIHRva2VuIGNyZWF0aW9uXG4gICAgICBtb2NrUHJpc21hLnJlZnJlc2hUb2tlbi5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBpZDogMSxcbiAgICAgICAgdXNlcklkOiAxLFxuICAgICAgICB0b2tlbjogJ21vY2stcmVmcmVzaC10b2tlbicsXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoKSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEdlbmVyYXRlIGFjY2VzcyB0b2tlblxuICAgICAgYXV0aFNlcnZpY2VbJ2dlbmVyYXRlQWNjZXNzVG9rZW4nXShtb2NrVXNlcik7XG4gICAgICBcbiAgICAgIC8vIEdlbmVyYXRlIHJlZnJlc2ggdG9rZW5cbiAgICAgIGF3YWl0IGF1dGhTZXJ2aWNlWydnZW5lcmF0ZVJlZnJlc2hUb2tlbiddKDEpO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnQgZGlmZmVyZW50IHNlY3JldHMgYXJlIHVzZWRcbiAgICAgIGNvbnN0IGNhbGxzID0gKG1vY2tKd3Quc2lnbiBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHM7XG4gICAgICBleHBlY3QoY2FsbHMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIFxuICAgICAgY29uc3QgYWNjZXNzVG9rZW5DYWxsID0gY2FsbHNbMF07XG4gICAgICBjb25zdCByZWZyZXNoVG9rZW5DYWxsID0gY2FsbHNbMV07XG4gICAgICBcbiAgICAgIGV4cGVjdChhY2Nlc3NUb2tlbkNhbGxbMV0pLnRvQmUoJ3Rlc3Qtc2VjcmV0Jyk7XG4gICAgICBleHBlY3QocmVmcmVzaFRva2VuQ2FsbFsxXSkudG9CZSgndGVzdC1yZWZyZXNoLXNlY3JldCcpO1xuICAgICAgZXhwZWN0KGFjY2Vzc1Rva2VuQ2FsbFsxXSkubm90LnRvQmUocmVmcmVzaFRva2VuQ2FsbFsxXSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0JjcnlwdCIsImJjcnlwdCIsIm1vY2tKd3QiLCJqd3QiLCJtb2NrUHJpc21hIiwidXNlciIsImZpbmRVbmlxdWUiLCJmbiIsImNyZWF0ZSIsInVwZGF0ZSIsInJlZnJlc2hUb2tlbiIsImRlbGV0ZSIsImRlbGV0ZU1hbnkiLCIkZGlzY29ubmVjdCIsIkF1dGhTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJwcmlzbWEiLCJsb2dpbiIsImVtYWlsIiwicGFzc3dvcmQiLCJ3aGVyZSIsInNlbGVjdCIsImlkIiwibmFtZSIsInBlcm1pc3Npb25zIiwiaXNBY3RpdmUiLCJzaG9wSWQiLCJFcnJvciIsImlzVmFsaWRQYXNzd29yZCIsImNvbXBhcmUiLCJhY2Nlc3NUb2tlbiIsImdlbmVyYXRlQWNjZXNzVG9rZW4iLCJnZW5lcmF0ZVJlZnJlc2hUb2tlbiIsInNpZ24iLCJ1c2VySWQiLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsImV4cGlyZXNJbiIsInRva2VuIiwiSldUX1JFRlJFU0hfU0VDUkVUIiwiZGF0YSIsImV4cGlyZXNBdCIsIkRhdGUiLCJub3ciLCJ2ZXJpZnlUb2tlbiIsImRlY29kZWQiLCJ2ZXJpZnkiLCJlcnJvciIsInJlZnJlc2hBY2Nlc3NUb2tlbiIsInN0b3JlZFRva2VuIiwiaW5jbHVkZSIsImlzUmV2b2tlZCIsIm5ld0FjY2Vzc1Rva2VuIiwibG9nb3V0IiwibG9nb3V0QWxsRGV2aWNlcyIsImRlc2NyaWJlIiwiYXV0aFNlcnZpY2UiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsImFmdGVyRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJtb2NrVXNlciIsIml0IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvRXF1YWwiLCJyZWplY3RzIiwidG9UaHJvdyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJpbmFjdGl2ZVVzZXIiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIm1vY2tEZWNvZGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja1JlZnJlc2hUb2tlbiIsInJldm9rZWRUb2tlbiIsImV4cGlyZWRUb2tlbiIsImNvdW50IiwicmVzb2x2ZXMiLCJvYmplY3RDb250YWluaW5nIiwidG9rZW5QYXlsb2FkIiwiY2FsbHMiLCJ0b0hhdmVQcm9wZXJ0eSIsImNyZWF0ZWRBdCIsInRvSGF2ZUxlbmd0aCIsImFjY2Vzc1Rva2VuQ2FsbCIsInJlZnJlc2hUb2tlbkNhbGwiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiOzs7O3lCQUFrRTtpRUFDL0M7cUVBQ0g7Ozs7OztBQUdoQixvQkFBb0I7QUFDcEJBLGFBQUksQ0FBQ0MsSUFBSSxDQUFDO0FBQ1ZELGFBQUksQ0FBQ0MsSUFBSSxDQUFDO0FBQ1ZELGFBQUksQ0FBQ0MsSUFBSSxDQUFDO0FBRVYsTUFBTUMsYUFBYUMsaUJBQU07QUFDekIsTUFBTUMsVUFBVUMscUJBQUc7QUFDbkIsTUFBTUMsYUFBYTtJQUNqQkMsTUFBTTtRQUNKQyxZQUFZUixhQUFJLENBQUNTLEVBQUU7UUFDbkJDLFFBQVFWLGFBQUksQ0FBQ1MsRUFBRTtRQUNmRSxRQUFRWCxhQUFJLENBQUNTLEVBQUU7SUFDakI7SUFDQUcsY0FBYztRQUNaRixRQUFRVixhQUFJLENBQUNTLEVBQUU7UUFDZkQsWUFBWVIsYUFBSSxDQUFDUyxFQUFFO1FBQ25CSSxRQUFRYixhQUFJLENBQUNTLEVBQUU7UUFDZkssWUFBWWQsYUFBSSxDQUFDUyxFQUFFO0lBQ3JCO0lBQ0FNLGFBQWFmLGFBQUksQ0FBQ1MsRUFBRTtBQUN0QjtBQUVBLCtEQUErRDtBQUMvRCxNQUFNTztJQUdKQyxhQUFjO1FBQ1osSUFBSSxDQUFDQyxNQUFNLEdBQUdaO0lBQ2hCO0lBRUEsTUFBTWEsTUFBTUMsS0FBYSxFQUFFQyxRQUFnQixFQUFFO1FBQzNDLHFCQUFxQjtRQUNyQixNQUFNZCxPQUFPLE1BQU0sSUFBSSxDQUFDVyxNQUFNLENBQUNYLElBQUksQ0FBQ0MsVUFBVSxDQUFDO1lBQzdDYyxPQUFPO2dCQUFFRjtZQUFNO1lBQ2ZHLFFBQVE7Z0JBQ05DLElBQUk7Z0JBQ0pKLE9BQU87Z0JBQ1BDLFVBQVU7Z0JBQ1ZJLE1BQU07Z0JBQ05DLGFBQWE7Z0JBQ2JDLFVBQVU7Z0JBQ1ZDLFFBQVE7WUFDVjtRQUNGO1FBRUEsSUFBSSxDQUFDckIsTUFBTTtZQUNULE1BQU0sSUFBSXNCLE1BQU07UUFDbEI7UUFFQSxJQUFJLENBQUN0QixLQUFLb0IsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLGtCQUFrQjtRQUNsQixNQUFNQyxrQkFBa0IsTUFBTTNCLGlCQUFNLENBQUM0QixPQUFPLENBQUNWLFVBQVVkLEtBQUtjLFFBQVE7UUFDcEUsSUFBSSxDQUFDUyxpQkFBaUI7WUFDcEIsTUFBTSxJQUFJRCxNQUFNO1FBQ2xCO1FBRUEsa0JBQWtCO1FBQ2xCLE1BQU1HLGNBQWMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQzFCO1FBQzdDLE1BQU1LLGVBQWUsTUFBTSxJQUFJLENBQUNzQixvQkFBb0IsQ0FBQzNCLEtBQUtpQixFQUFFO1FBRTVELE9BQU87WUFDTGpCLE1BQU07Z0JBQ0ppQixJQUFJakIsS0FBS2lCLEVBQUU7Z0JBQ1hKLE9BQU9iLEtBQUthLEtBQUs7Z0JBQ2pCSyxNQUFNbEIsS0FBS2tCLElBQUk7Z0JBQ2ZDLGFBQWFuQixLQUFLbUIsV0FBVztnQkFDN0JFLFFBQVFyQixLQUFLcUIsTUFBTTtZQUNyQjtZQUNBSTtZQUNBcEI7UUFDRjtJQUNGO0lBRVFxQixvQkFBb0IxQixJQUFTLEVBQUU7UUFDckMsT0FBT0YscUJBQUcsQ0FBQzhCLElBQUksQ0FDYjtZQUNFQyxRQUFRN0IsS0FBS2lCLEVBQUU7WUFDZkosT0FBT2IsS0FBS2EsS0FBSztZQUNqQk0sYUFBYW5CLEtBQUttQixXQUFXO1lBQzdCRSxRQUFRckIsS0FBS3FCLE1BQU07UUFDckIsR0FDQVMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVLElBQUksZUFDMUI7WUFBRUMsV0FBVztRQUFNO0lBRXZCO0lBRUEsTUFBY04scUJBQXFCRSxNQUFjLEVBQUU7UUFDakQsTUFBTUssUUFBUXBDLHFCQUFHLENBQUM4QixJQUFJLENBQ3BCO1lBQUVDO1FBQU8sR0FDVEMsUUFBUUMsR0FBRyxDQUFDSSxrQkFBa0IsSUFBSSx1QkFDbEM7WUFBRUYsV0FBVztRQUFLO1FBR3BCLGtDQUFrQztRQUNsQyxNQUFNLElBQUksQ0FBQ3RCLE1BQU0sQ0FBQ04sWUFBWSxDQUFDRixNQUFNLENBQUM7WUFDcENpQyxNQUFNO2dCQUNKUDtnQkFDQUs7Z0JBQ0FHLFdBQVcsSUFBSUMsS0FBS0EsS0FBS0MsR0FBRyxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUs7WUFDdEQ7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7SUFFQSxNQUFNTSxZQUFZTixLQUFhLEVBQUU7UUFDL0IsSUFBSTtZQUNGLE1BQU1PLFVBQVUzQyxxQkFBRyxDQUFDNEMsTUFBTSxDQUFDUixPQUFPSixRQUFRQyxHQUFHLENBQUNDLFVBQVUsSUFBSTtZQUM1RCxPQUFPUztRQUNULEVBQUUsT0FBT0UsT0FBTztZQUNkLE1BQU0sSUFBSXJCLE1BQU07UUFDbEI7SUFDRjtJQUVBLE1BQU1zQixtQkFBbUJ2QyxZQUFvQixFQUFFO1FBQzdDLHVCQUF1QjtRQUN2QixNQUFNb0MsVUFBVTNDLHFCQUFHLENBQUM0QyxNQUFNLENBQ3hCckMsY0FDQXlCLFFBQVFDLEdBQUcsQ0FBQ0ksa0JBQWtCLElBQUk7UUFHcEMsNENBQTRDO1FBQzVDLE1BQU1VLGNBQWMsTUFBTSxJQUFJLENBQUNsQyxNQUFNLENBQUNOLFlBQVksQ0FBQ0osVUFBVSxDQUFDO1lBQzVEYyxPQUFPO2dCQUFFbUIsT0FBTzdCO1lBQWE7WUFDN0J5QyxTQUFTO2dCQUFFOUMsTUFBTTtZQUFLO1FBQ3hCO1FBRUEsSUFBSSxDQUFDNkMsZUFBZUEsWUFBWUUsU0FBUyxFQUFFO1lBQ3pDLE1BQU0sSUFBSXpCLE1BQU07UUFDbEI7UUFFQSxJQUFJLElBQUlnQixTQUFTTyxZQUFZUixTQUFTLEVBQUU7WUFDdEMsTUFBTSxJQUFJZixNQUFNO1FBQ2xCO1FBRUEsNEJBQTRCO1FBQzVCLE1BQU0wQixpQkFBaUIsSUFBSSxDQUFDdEIsbUJBQW1CLENBQUNtQixZQUFZN0MsSUFBSTtRQUVoRSxPQUFPO1lBQ0x5QixhQUFhdUI7WUFDYmhELE1BQU07Z0JBQ0ppQixJQUFJNEIsWUFBWTdDLElBQUksQ0FBQ2lCLEVBQUU7Z0JBQ3ZCSixPQUFPZ0MsWUFBWTdDLElBQUksQ0FBQ2EsS0FBSztnQkFDN0JLLE1BQU0yQixZQUFZN0MsSUFBSSxDQUFDa0IsSUFBSTtnQkFDM0JDLGFBQWEwQixZQUFZN0MsSUFBSSxDQUFDbUIsV0FBVztnQkFDekNFLFFBQVF3QixZQUFZN0MsSUFBSSxDQUFDcUIsTUFBTTtZQUNqQztRQUNGO0lBQ0Y7SUFFQSxNQUFNNEIsT0FBTzVDLFlBQW9CLEVBQUU7UUFDakMsdUJBQXVCO1FBQ3ZCLE1BQU0sSUFBSSxDQUFDTSxNQUFNLENBQUNOLFlBQVksQ0FBQ0UsVUFBVSxDQUFDO1lBQ3hDUSxPQUFPO2dCQUFFbUIsT0FBTzdCO1lBQWE7UUFDL0I7SUFDRjtJQUVBLE1BQU02QyxpQkFBaUJyQixNQUFjLEVBQUU7UUFDckMscUNBQXFDO1FBQ3JDLE1BQU0sSUFBSSxDQUFDbEIsTUFBTSxDQUFDTixZQUFZLENBQUNFLFVBQVUsQ0FBQztZQUN4Q1EsT0FBTztnQkFBRWM7WUFBTztRQUNsQjtJQUNGO0FBQ0Y7QUFFQXNCLElBQUFBLGlCQUFRLEVBQUMsZUFBZTtJQUN0QixJQUFJQztJQUVKQyxJQUFBQSxtQkFBVSxFQUFDO1FBQ1RELGNBQWMsSUFBSTNDO1FBQ2xCaEIsYUFBSSxDQUFDNkQsYUFBYTtRQUVsQiwrQkFBK0I7UUFDL0J4QixRQUFRQyxHQUFHLENBQUNDLFVBQVUsR0FBRztRQUN6QkYsUUFBUUMsR0FBRyxDQUFDSSxrQkFBa0IsR0FBRztRQUVqQyxtQkFBbUI7UUFDbkJ0QyxRQUFRK0IsSUFBSSxDQUFDMkIsZUFBZSxDQUFDO1FBQzdCMUQsUUFBUTZDLE1BQU0sQ0FBQ2EsZUFBZSxDQUFDO1lBQUUxQixRQUFRO1lBQUdoQixPQUFPO1FBQW1CO0lBQ3hFO0lBRUEyQyxJQUFBQSxrQkFBUyxFQUFDO1FBQ1IvRCxhQUFJLENBQUNnRSxhQUFhO0lBQ3BCO0lBRUFOLElBQUFBLGlCQUFRLEVBQUMsU0FBUztRQUNoQixNQUFNTyxXQUFXO1lBQ2Z6QyxJQUFJO1lBQ0pKLE9BQU87WUFDUEMsVUFBVTtZQUNWSSxNQUFNO1lBQ05DLGFBQWE7Z0JBQUM7Z0JBQWtCO2FBQWU7WUFDL0NDLFVBQVU7WUFDVkMsUUFBUTtRQUNWO1FBRUFzQyxJQUFBQSxXQUFFLEVBQUMsb0RBQW9EO1lBQ3JELFVBQVU7WUFDVjVELFdBQVdDLElBQUksQ0FBQ0MsVUFBVSxDQUFDMkQsaUJBQWlCLENBQUNGO1lBQzdDL0QsV0FBVzZCLE9BQU8sQ0FBQ29DLGlCQUFpQixDQUFDO1lBQ3JDL0QsUUFBUStCLElBQUksQ0FBQzJCLGVBQWUsQ0FBQztZQUM3QnhELFdBQVdNLFlBQVksQ0FBQ0YsTUFBTSxDQUFDeUQsaUJBQWlCLENBQUM7Z0JBQUUxQixPQUFPO1lBQXFCO1lBRS9FLE1BQU07WUFDTixNQUFNMkIsU0FBUyxNQUFNVCxZQUFZeEMsS0FBSyxDQUFDLG9CQUFvQjtZQUUzRCxTQUFTO1lBQ1RrRCxJQUFBQSxlQUFNLEVBQUMvRCxXQUFXQyxJQUFJLENBQUNDLFVBQVUsRUFBRThELG9CQUFvQixDQUFDO2dCQUN0RGhELE9BQU87b0JBQUVGLE9BQU87Z0JBQW1CO2dCQUNuQ0csUUFBUTtvQkFDTkMsSUFBSTtvQkFDSkosT0FBTztvQkFDUEMsVUFBVTtvQkFDVkksTUFBTTtvQkFDTkMsYUFBYTtvQkFDYkMsVUFBVTtvQkFDVkMsUUFBUTtnQkFDVjtZQUNGO1lBQ0F5QyxJQUFBQSxlQUFNLEVBQUNuRSxXQUFXNkIsT0FBTyxFQUFFdUMsb0JBQW9CLENBQUMsZUFBZTtZQUMvREQsSUFBQUEsZUFBTSxFQUFDRCxRQUFRRyxPQUFPLENBQUM7Z0JBQ3JCaEUsTUFBTTtvQkFDSmlCLElBQUk7b0JBQ0pKLE9BQU87b0JBQ1BLLE1BQU07b0JBQ05DLGFBQWE7d0JBQUM7d0JBQWtCO3FCQUFlO29CQUMvQ0UsUUFBUTtnQkFDVjtnQkFDQUksYUFBYTtnQkFDYnBCLGNBQWM7WUFDaEI7UUFDRjtRQUVBc0QsSUFBQUEsV0FBRSxFQUFDLDRDQUE0QztZQUM3QyxVQUFVO1lBQ1Y1RCxXQUFXQyxJQUFJLENBQUNDLFVBQVUsQ0FBQzJELGlCQUFpQixDQUFDO1lBRTdDLGVBQWU7WUFDZixNQUFNRSxJQUFBQSxlQUFNLEVBQUNWLFlBQVl4QyxLQUFLLENBQUMsMkJBQTJCLGdCQUN2RHFELE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1lBRW5CSixJQUFBQSxlQUFNLEVBQUNuRSxXQUFXNkIsT0FBTyxFQUFFMkMsR0FBRyxDQUFDQyxnQkFBZ0I7UUFDakQ7UUFFQVQsSUFBQUEsV0FBRSxFQUFDLHdDQUF3QztZQUN6QyxVQUFVO1lBQ1YsTUFBTVUsZUFBZTtnQkFBRSxHQUFHWCxRQUFRO2dCQUFFdEMsVUFBVTtZQUFNO1lBQ3BEckIsV0FBV0MsSUFBSSxDQUFDQyxVQUFVLENBQUMyRCxpQkFBaUIsQ0FBQ1M7WUFFN0MsZUFBZTtZQUNmLE1BQU1QLElBQUFBLGVBQU0sRUFBQ1YsWUFBWXhDLEtBQUssQ0FBQyxvQkFBb0IsZ0JBQ2hEcUQsT0FBTyxDQUFDQyxPQUFPLENBQUM7WUFFbkJKLElBQUFBLGVBQU0sRUFBQ25FLFdBQVc2QixPQUFPLEVBQUUyQyxHQUFHLENBQUNDLGdCQUFnQjtRQUNqRDtRQUVBVCxJQUFBQSxXQUFFLEVBQUMsMkNBQTJDO1lBQzVDLFVBQVU7WUFDVjVELFdBQVdDLElBQUksQ0FBQ0MsVUFBVSxDQUFDMkQsaUJBQWlCLENBQUNGO1lBQzdDL0QsV0FBVzZCLE9BQU8sQ0FBQ29DLGlCQUFpQixDQUFDO1lBRXJDLGVBQWU7WUFDZixNQUFNRSxJQUFBQSxlQUFNLEVBQUNWLFlBQVl4QyxLQUFLLENBQUMsb0JBQW9CLGtCQUNoRHFELE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1lBRW5CSixJQUFBQSxlQUFNLEVBQUNuRSxXQUFXNkIsT0FBTyxFQUFFdUMsb0JBQW9CLENBQUMsaUJBQWlCO1FBQ25FO1FBRUFKLElBQUFBLFdBQUUsRUFBQyw0Q0FBNEM7WUFDN0MsVUFBVTtZQUNWNUQsV0FBV0MsSUFBSSxDQUFDQyxVQUFVLENBQUNxRSxpQkFBaUIsQ0FBQyxJQUFJaEQsTUFBTTtZQUV2RCxlQUFlO1lBQ2YsTUFBTXdDLElBQUFBLGVBQU0sRUFBQ1YsWUFBWXhDLEtBQUssQ0FBQyxvQkFBb0IsZ0JBQ2hEcUQsT0FBTyxDQUFDQyxPQUFPLENBQUM7UUFDckI7SUFDRjtJQUVBZixJQUFBQSxpQkFBUSxFQUFDLGVBQWU7UUFDdEJRLElBQUFBLFdBQUUsRUFBQywwQ0FBMEM7WUFDM0MsVUFBVTtZQUNWLE1BQU1ZLGNBQWM7Z0JBQUUxQyxRQUFRO2dCQUFHaEIsT0FBTztZQUFtQjtZQUMzRGhCLFFBQVE2QyxNQUFNLENBQUNhLGVBQWUsQ0FBQ2dCO1lBRS9CLE1BQU07WUFDTixNQUFNVixTQUFTLE1BQU1ULFlBQVlaLFdBQVcsQ0FBQztZQUU3QyxTQUFTO1lBQ1RzQixJQUFBQSxlQUFNLEVBQUNqRSxRQUFRNkMsTUFBTSxFQUFFcUIsb0JBQW9CLENBQUMsZUFBZTtZQUMzREQsSUFBQUEsZUFBTSxFQUFDRCxRQUFRRyxPQUFPLENBQUNPO1FBQ3pCO1FBRUFaLElBQUFBLFdBQUUsRUFBQyx3Q0FBd0M7WUFDekMsVUFBVTtZQUNWOUQsUUFBUTZDLE1BQU0sQ0FBQzhCLGtCQUFrQixDQUFDO2dCQUNoQyxNQUFNLElBQUlsRCxNQUFNO1lBQ2xCO1lBRUEsZUFBZTtZQUNmLE1BQU13QyxJQUFBQSxlQUFNLEVBQUNWLFlBQVlaLFdBQVcsQ0FBQyxrQkFDbEN5QixPQUFPLENBQUNDLE9BQU8sQ0FBQztRQUNyQjtRQUVBUCxJQUFBQSxXQUFFLEVBQUMsd0NBQXdDO1lBQ3pDLFVBQVU7WUFDVjlELFFBQVE2QyxNQUFNLENBQUM4QixrQkFBa0IsQ0FBQztnQkFDaEMsTUFBTSxJQUFJbEQsTUFBTTtZQUNsQjtZQUVBLGVBQWU7WUFDZixNQUFNd0MsSUFBQUEsZUFBTSxFQUFDVixZQUFZWixXQUFXLENBQUMsa0JBQ2xDeUIsT0FBTyxDQUFDQyxPQUFPLENBQUM7UUFDckI7SUFDRjtJQUVBZixJQUFBQSxpQkFBUSxFQUFDLHNCQUFzQjtRQUM3QixNQUFNc0IsbUJBQW1CO1lBQ3ZCdkMsT0FBTztZQUNQTCxRQUFRO1lBQ1JRLFdBQVcsSUFBSUMsS0FBS0EsS0FBS0MsR0FBRyxLQUFLLEtBQUssS0FBSyxLQUFLO1lBQ2hEUSxXQUFXO1lBQ1gvQyxNQUFNO2dCQUNKaUIsSUFBSTtnQkFDSkosT0FBTztnQkFDUEssTUFBTTtnQkFDTkMsYUFBYTtvQkFBQztpQkFBaUI7Z0JBQy9CRSxRQUFRO1lBQ1Y7UUFDRjtRQUVBc0MsSUFBQUEsV0FBRSxFQUFDLDRDQUE0QztZQUM3QyxVQUFVO1lBQ1Y5RCxRQUFRNkMsTUFBTSxDQUFDYSxlQUFlLENBQUM7Z0JBQUUxQixRQUFRO1lBQUU7WUFDM0M5QixXQUFXTSxZQUFZLENBQUNKLFVBQVUsQ0FBQzJELGlCQUFpQixDQUFDYTtZQUNyRDVFLFFBQVErQixJQUFJLENBQUMyQixlQUFlLENBQUM7WUFFN0IsTUFBTTtZQUNOLE1BQU1NLFNBQVMsTUFBTVQsWUFBWVIsa0JBQWtCLENBQUM7WUFFcEQsU0FBUztZQUNUa0IsSUFBQUEsZUFBTSxFQUFDakUsUUFBUTZDLE1BQU0sRUFBRXFCLG9CQUFvQixDQUFDLHVCQUF1QjtZQUNuRUQsSUFBQUEsZUFBTSxFQUFDL0QsV0FBV00sWUFBWSxDQUFDSixVQUFVLEVBQUU4RCxvQkFBb0IsQ0FBQztnQkFDOURoRCxPQUFPO29CQUFFbUIsT0FBTztnQkFBc0I7Z0JBQ3RDWSxTQUFTO29CQUFFOUMsTUFBTTtnQkFBSztZQUN4QjtZQUNBOEQsSUFBQUEsZUFBTSxFQUFDRCxRQUFRRyxPQUFPLENBQUM7Z0JBQ3JCdkMsYUFBYTtnQkFDYnpCLE1BQU07b0JBQ0ppQixJQUFJO29CQUNKSixPQUFPO29CQUNQSyxNQUFNO29CQUNOQyxhQUFhO3dCQUFDO3FCQUFpQjtvQkFDL0JFLFFBQVE7Z0JBQ1Y7WUFDRjtRQUNGO1FBRUFzQyxJQUFBQSxXQUFFLEVBQUMsZ0RBQWdEO1lBQ2pELFVBQVU7WUFDVixNQUFNZSxlQUFlO2dCQUFFLEdBQUdELGdCQUFnQjtnQkFBRTFCLFdBQVc7WUFBSztZQUM1RGxELFFBQVE2QyxNQUFNLENBQUNhLGVBQWUsQ0FBQztnQkFBRTFCLFFBQVE7WUFBRTtZQUMzQzlCLFdBQVdNLFlBQVksQ0FBQ0osVUFBVSxDQUFDMkQsaUJBQWlCLENBQUNjO1lBRXJELGVBQWU7WUFDZixNQUFNWixJQUFBQSxlQUFNLEVBQUNWLFlBQVlSLGtCQUFrQixDQUFDLGtCQUN6Q3FCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1FBQ3JCO1FBRUFQLElBQUFBLFdBQUUsRUFBQyxnREFBZ0Q7WUFDakQsVUFBVTtZQUNWLE1BQU1nQixlQUFlO2dCQUNuQixHQUFHRixnQkFBZ0I7Z0JBQ25CcEMsV0FBVyxJQUFJQyxLQUFLQSxLQUFLQyxHQUFHLEtBQUssS0FBSyxLQUFLLEtBQUs7WUFDbEQ7WUFDQTFDLFFBQVE2QyxNQUFNLENBQUNhLGVBQWUsQ0FBQztnQkFBRTFCLFFBQVE7WUFBRTtZQUMzQzlCLFdBQVdNLFlBQVksQ0FBQ0osVUFBVSxDQUFDMkQsaUJBQWlCLENBQUNlO1lBRXJELGVBQWU7WUFDZixNQUFNYixJQUFBQSxlQUFNLEVBQUNWLFlBQVlSLGtCQUFrQixDQUFDLGtCQUN6Q3FCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1FBQ3JCO1FBRUFQLElBQUFBLFdBQUUsRUFBQyxxREFBcUQ7WUFDdEQsVUFBVTtZQUNWOUQsUUFBUTZDLE1BQU0sQ0FBQ2EsZUFBZSxDQUFDO2dCQUFFMUIsUUFBUTtZQUFFO1lBQzNDOUIsV0FBV00sWUFBWSxDQUFDSixVQUFVLENBQUMyRCxpQkFBaUIsQ0FBQztZQUVyRCxlQUFlO1lBQ2YsTUFBTUUsSUFBQUEsZUFBTSxFQUFDVixZQUFZUixrQkFBa0IsQ0FBQyx1QkFDekNxQixPQUFPLENBQUNDLE9BQU8sQ0FBQztRQUNyQjtJQUNGO0lBRUFmLElBQUFBLGlCQUFRLEVBQUMsVUFBVTtRQUNqQlEsSUFBQUEsV0FBRSxFQUFDLG1DQUFtQztZQUNwQyxVQUFVO1lBQ1Y1RCxXQUFXTSxZQUFZLENBQUNFLFVBQVUsQ0FBQ3FELGlCQUFpQixDQUFDO2dCQUFFZ0IsT0FBTztZQUFFO1lBRWhFLE1BQU07WUFDTixNQUFNeEIsWUFBWUgsTUFBTSxDQUFDO1lBRXpCLFNBQVM7WUFDVGEsSUFBQUEsZUFBTSxFQUFDL0QsV0FBV00sWUFBWSxDQUFDRSxVQUFVLEVBQUV3RCxvQkFBb0IsQ0FBQztnQkFDOURoRCxPQUFPO29CQUFFbUIsT0FBTztnQkFBZ0I7WUFDbEM7UUFDRjtRQUVBeUIsSUFBQUEsV0FBRSxFQUFDLHFEQUFxRDtZQUN0RCxVQUFVO1lBQ1Y1RCxXQUFXTSxZQUFZLENBQUNFLFVBQVUsQ0FBQ3FELGlCQUFpQixDQUFDO2dCQUFFZ0IsT0FBTztZQUFFO1lBRWhFLGVBQWU7WUFDZixNQUFNZCxJQUFBQSxlQUFNLEVBQUNWLFlBQVlILE1BQU0sQ0FBQyx1QkFBdUI0QixRQUFRLENBQUNWLEdBQUcsQ0FBQ0QsT0FBTztRQUM3RTtJQUNGO0lBRUFmLElBQUFBLGlCQUFRLEVBQUMsb0JBQW9CO1FBQzNCUSxJQUFBQSxXQUFFLEVBQUMsK0NBQStDO1lBQ2hELFVBQVU7WUFDVjVELFdBQVdNLFlBQVksQ0FBQ0UsVUFBVSxDQUFDcUQsaUJBQWlCLENBQUM7Z0JBQUVnQixPQUFPO1lBQUU7WUFFaEUsTUFBTTtZQUNOLE1BQU14QixZQUFZRixnQkFBZ0IsQ0FBQztZQUVuQyxTQUFTO1lBQ1RZLElBQUFBLGVBQU0sRUFBQy9ELFdBQVdNLFlBQVksQ0FBQ0UsVUFBVSxFQUFFd0Qsb0JBQW9CLENBQUM7Z0JBQzlEaEQsT0FBTztvQkFBRWMsUUFBUTtnQkFBRTtZQUNyQjtRQUNGO1FBRUE4QixJQUFBQSxXQUFFLEVBQUMsNERBQTREO1lBQzdELFVBQVU7WUFDVjVELFdBQVdNLFlBQVksQ0FBQ0UsVUFBVSxDQUFDcUQsaUJBQWlCLENBQUM7Z0JBQUVnQixPQUFPO1lBQUU7WUFFaEUsZUFBZTtZQUNmLE1BQU1kLElBQUFBLGVBQU0sRUFBQ1YsWUFBWUYsZ0JBQWdCLENBQUMsSUFBSTJCLFFBQVEsQ0FBQ1YsR0FBRyxDQUFDRCxPQUFPO1FBQ3BFO0lBQ0Y7SUFFQWYsSUFBQUEsaUJBQVEsRUFBQywyQkFBMkI7UUFDbENRLElBQUFBLFdBQUUsRUFBQyx1Q0FBdUM7WUFDeEMsVUFBVTtZQUNWLE1BQU1ELFdBQVc7Z0JBQUV6QyxJQUFJO2dCQUFHSixPQUFPO2dCQUFvQk0sYUFBYSxFQUFFO2dCQUFFRSxRQUFRO1lBQVM7WUFFdkYsTUFBTTtZQUNOK0IsV0FBVyxDQUFDLHNCQUFzQixDQUFDTTtZQUVuQyxTQUFTO1lBQ1RJLElBQUFBLGVBQU0sRUFBQ2pFLFFBQVErQixJQUFJLEVBQUVtQyxvQkFBb0IsQ0FDdkNELGVBQU0sQ0FBQ2dCLGdCQUFnQixDQUFDO2dCQUN0QmpELFFBQVE7Z0JBQ1JoQixPQUFPO2dCQUNQTSxhQUFhLEVBQUU7Z0JBQ2ZFLFFBQVE7WUFDVixJQUNBLGVBQ0E7Z0JBQUVZLFdBQVc7WUFBTTtRQUV2QjtRQUVBMEIsSUFBQUEsV0FBRSxFQUFDLG1EQUFtRDtZQUNwRCxVQUFVO1lBQ1YsTUFBTUQsV0FBVztnQkFDZnpDLElBQUk7Z0JBQ0pKLE9BQU87Z0JBQ1BDLFVBQVU7Z0JBQ1ZLLGFBQWEsRUFBRTtnQkFDZkUsUUFBUTtZQUNWO1lBRUEsTUFBTTtZQUNOK0IsV0FBVyxDQUFDLHNCQUFzQixDQUFDTTtZQUVuQyxTQUFTO1lBQ1QsTUFBTXFCLGVBQWUsQUFBQ2xGLFFBQVErQixJQUFJLENBQWVsQyxJQUFJLENBQUNzRixLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDakVsQixJQUFBQSxlQUFNLEVBQUNpQixjQUFjWixHQUFHLENBQUNjLGNBQWMsQ0FBQztRQUMxQztRQUVBdEIsSUFBQUEsV0FBRSxFQUFDLDhEQUE4RDtZQUMvRCw0RUFBNEU7WUFDNUUsTUFBTUQsV0FBVztnQkFBRXpDLElBQUk7Z0JBQUdKLE9BQU87Z0JBQW9CTSxhQUFhLEVBQUU7Z0JBQUVFLFFBQVE7WUFBUztZQUV2RixvREFBb0Q7WUFDcER0QixXQUFXTSxZQUFZLENBQUNGLE1BQU0sQ0FBQ3lELGlCQUFpQixDQUFDO2dCQUMvQzNDLElBQUk7Z0JBQ0pZLFFBQVE7Z0JBQ1JLLE9BQU87Z0JBQ1BHLFdBQVcsSUFBSUM7Z0JBQ2Y0QyxXQUFXLElBQUk1QztZQUNqQjtZQUVBLHdCQUF3QjtZQUN4QmMsV0FBVyxDQUFDLHNCQUFzQixDQUFDTTtZQUVuQyx5QkFBeUI7WUFDekIsTUFBTU4sV0FBVyxDQUFDLHVCQUF1QixDQUFDO1lBRTFDLG9DQUFvQztZQUNwQyxNQUFNNEIsUUFBUSxBQUFDbkYsUUFBUStCLElBQUksQ0FBZWxDLElBQUksQ0FBQ3NGLEtBQUs7WUFDcERsQixJQUFBQSxlQUFNLEVBQUNrQixPQUFPRyxZQUFZLENBQUM7WUFFM0IsTUFBTUMsa0JBQWtCSixLQUFLLENBQUMsRUFBRTtZQUNoQyxNQUFNSyxtQkFBbUJMLEtBQUssQ0FBQyxFQUFFO1lBRWpDbEIsSUFBQUEsZUFBTSxFQUFDc0IsZUFBZSxDQUFDLEVBQUUsRUFBRUUsSUFBSSxDQUFDO1lBQ2hDeEIsSUFBQUEsZUFBTSxFQUFDdUIsZ0JBQWdCLENBQUMsRUFBRSxFQUFFQyxJQUFJLENBQUM7WUFDakN4QixJQUFBQSxlQUFNLEVBQUNzQixlQUFlLENBQUMsRUFBRSxFQUFFakIsR0FBRyxDQUFDbUIsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ3pEO0lBQ0Y7QUFDRiJ9