{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/prisma.test.ts"],"sourcesContent":["// Unit tests for Prisma utilities\n// Testing the safeQuery helper function and Prisma client configuration\n\nimport { PrismaClient } from '@prisma/client';\n\n// Mock PrismaClient\nconst mockPrismaClient = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  shop: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n};\n\n// Mock the PrismaClient constructor\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => mockPrismaClient),\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Prisma Utilities', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('PrismaClient Configuration', () => {\n    it('should export prisma client instance', () => {\n      expect(mockPrismaClient).toBeDefined();\n      expect(typeof mockPrismaClient.$connect).toBe('function');\n      expect(typeof mockPrismaClient.$disconnect).toBe('function');\n    });\n  });\n\n  describe('safeQuery function (isolated implementation)', () => {\n    // Isolated implementation of safeQuery matching the actual implementation\n    const safeQuery = async <T>(\n      queryFn: () => Promise<T>,\n      fallback: T,\n      logMessage = 'Database operation failed'\n    ): Promise<T> => {\n      try {\n        return await queryFn();\n      } catch (error) {\n        console.error(`${logMessage}:`, error);\n        return fallback;\n      }\n    };\n\n    it('should return result for successful operation', async () => {\n      const mockOperation = jest.fn().mockResolvedValue({ id: 1, name: 'Test User' });\n      \n      const result = await safeQuery(mockOperation, null, 'Find user');\n      \n      expect(result).toEqual({ id: 1, name: 'Test User' });\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).not.toHaveBeenCalled();\n    });\n\n    it('should return fallback and log error for failed operation', async () => {\n      const mockError = new Error('Database connection failed');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, null, 'Find user failed');\n      \n      expect(result).toBeNull();\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Find user failed:',\n        mockError\n      );\n    });\n\n    it('should handle database errors with fallback', async () => {\n      const mockError = { code: 'P2002', message: 'Unique constraint failed' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      const fallbackValue = { error: 'Operation failed' };\n      \n      const result = await safeQuery(mockOperation, fallbackValue, 'Create user failed');\n      \n      expect(result).toEqual(fallbackValue);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Create user failed:',\n        mockError\n      );\n    });\n\n    it('should use default log message when none provided', async () => {\n      const mockError = new Error('Generic error');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'default');\n      \n      expect(result).toBe('default');\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Database operation failed:',\n        mockError\n      );\n    });\n\n    it('should handle different fallback types', async () => {\n      const mockError = new Error('Operation failed');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      // Test with array fallback\n      const result1 = await safeQuery(mockOperation, [], 'Array operation failed');\n      expect(result1).toEqual([]);\n      \n      // Test with object fallback\n      const result2 = await safeQuery(mockOperation, { error: true }, 'Object operation failed');\n      expect(result2).toEqual({ error: true });\n      \n      // Test with number fallback\n      const result3 = await safeQuery(mockOperation, 0, 'Number operation failed');\n      expect(result3).toBe(0);\n    });\n\n    it('should handle async operations correctly', async () => {\n      const mockData = { id: 1, name: 'Async User' };\n      const mockOperation = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve(mockData), 10))\n      );\n      \n      const result = await safeQuery(mockOperation, null, 'Async operation');\n      \n      expect(result).toEqual(mockData);\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n    });\n\n    it('should preserve error objects in logs', async () => {\n      const mockError = {\n        code: 'P2002',\n        message: 'Unique constraint failed',\n        meta: { target: ['email'] }\n      };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, null, 'Constraint error');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Constraint error:',\n        mockError\n      );\n    });\n\n\n\n\n\n\n  });\n\n  describe('Database Operations with safeQuery', () => {\n    // Use the actual safeQuery implementation for integration testing\n    const safeQuery = async <T>(\n      queryFn: () => Promise<T>,\n      fallback: T,\n      logMessage = 'Database operation failed'\n    ): Promise<T> => {\n      try {\n        return await queryFn();\n      } catch (error) {\n        console.error(`${logMessage}:`, error);\n        return fallback;\n      }\n    };\n\n    it('should safely execute user findMany operation', async () => {\n      const mockUsers = [{ id: 1, name: 'User 1' }, { id: 2, name: 'User 2' }];\n      mockPrismaClient.user.findMany.mockResolvedValue(mockUsers);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.findMany(),\n        [],\n        'Find all users'\n      );\n      \n      expect(result).toEqual(mockUsers);\n      expect(mockPrismaClient.user.findMany).toHaveBeenCalledTimes(1);\n    });\n\n    it('should safely execute user create operation', async () => {\n      const newUser = { id: 1, name: 'New User', email: 'new@example.com' };\n      mockPrismaClient.user.create.mockResolvedValue(newUser);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.create({\n          data: { name: 'New User', email: 'new@example.com' }\n        }),\n        null,\n        'Create user'\n      );\n      \n      expect(result).toEqual(newUser);\n      expect(mockPrismaClient.user.create).toHaveBeenCalledWith({\n        data: { name: 'New User', email: 'new@example.com' }\n      });\n    });\n\n    it('should safely execute shop operations', async () => {\n      const mockShop = { id: 'shop1', name: 'Test Shop' };\n      mockPrismaClient.shop.findUnique.mockResolvedValue(mockShop);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.shop.findUnique({ where: { id: 'shop1' } }),\n        null,\n        'Find shop'\n      );\n      \n      expect(result).toEqual(mockShop);\n      expect(mockPrismaClient.shop.findUnique).toHaveBeenCalledWith({ where: { id: 'shop1' } });\n    });\n\n    it('should return fallback when operation fails', async () => {\n      const mockError = new Error('Database error');\n      mockPrismaClient.user.findUnique.mockRejectedValue(mockError);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.findUnique({ where: { id: 999 } }),\n        null,\n        'Find non-existent user'\n      );\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Find non-existent user:', mockError);\n    });\n  });\n\n  describe('Prisma Client Lifecycle', () => {\n    it('should handle connection operations', async () => {\n      mockPrismaClient.$connect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$connect();\n      \n      expect(mockPrismaClient.$connect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle disconnection operations', async () => {\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$disconnect();\n      \n      expect(mockPrismaClient.$disconnect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle connection errors', async () => {\n      const connectionError = new Error('Connection failed');\n      mockPrismaClient.$connect.mockRejectedValue(connectionError);\n      \n      await expect(mockPrismaClient.$connect()).rejects.toThrow('Connection failed');\n    });\n  });\n});"],"names":["jest","mock","PrismaClient","fn","mockImplementation","mockPrismaClient","$connect","$disconnect","user","findMany","findUnique","create","update","delete","shop","consoleSpy","log","spyOn","console","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","expect","toBeDefined","toBe","safeQuery","queryFn","fallback","logMessage","mockOperation","mockResolvedValue","id","name","result","toEqual","toHaveBeenCalledTimes","not","toHaveBeenCalled","mockError","Error","mockRejectedValue","toBeNull","toHaveBeenCalledWith","code","message","fallbackValue","result1","result2","result3","mockData","Promise","resolve","setTimeout","meta","target","mockUsers","newUser","email","data","mockShop","where","undefined","connectionError","rejects","toThrow"],"mappings":"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"}