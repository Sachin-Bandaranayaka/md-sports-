3d1147666c0b19036c90abd6f28f3d91
"use strict";

/* istanbul ignore next */
function cov_trd22sxb5() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts";
  var hash = "4cdd78f72f145ca57473fa1070bda07c2bfce0cc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "10": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 63
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "12": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "13": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "14": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 54
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 64
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "20": {
        start: {
          line: 49,
          column: 28
        },
        end: {
          line: 49,
          column: 99
        }
      },
      "21": {
        start: {
          line: 51,
          column: 36
        },
        end: {
          line: 51,
          column: 160
        }
      },
      "22": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 125
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "25": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 81
        }
      },
      "26": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "27": {
        start: {
          line: 63,
          column: 21
        },
        end: {
          line: 63,
          column: 79
        }
      },
      "28": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 96
        }
      },
      "29": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "30": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "31": {
        start: {
          line: 70,
          column: 23
        },
        end: {
          line: 70,
          column: 55
        }
      },
      "32": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 57
        }
      },
      "33": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 55
        }
      },
      "34": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 51
        }
      },
      "35": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "37": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "38": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 58
        }
      },
      "39": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "40": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "41": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 92
        }
      },
      "42": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "43": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 124,
          column: 10
        }
      },
      "44": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 129
        }
      },
      "45": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "46": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "47": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "48": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 60
        }
      },
      "49": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "50": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 319,
          column: 5
        }
      },
      "51": {
        start: {
          line: 156,
          column: 22
        },
        end: {
          line: 156,
          column: 54
        }
      },
      "52": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "53": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "54": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "55": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "56": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "57": {
        start: {
          line: 173,
          column: 21
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "58": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "59": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "60": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 190,
          column: 96
        }
      },
      "61": {
        start: {
          line: 191,
          column: 30
        },
        end: {
          line: 191,
          column: 100
        }
      },
      "62": {
        start: {
          line: 192,
          column: 35
        },
        end: {
          line: 192,
          column: 104
        }
      },
      "63": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "64": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "65": {
        start: {
          line: 200,
          column: 21
        },
        end: {
          line: 200,
          column: 41
        }
      },
      "66": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "67": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 105
        }
      },
      "68": {
        start: {
          line: 208,
          column: 44
        },
        end: {
          line: 208,
          column: 48
        }
      },
      "69": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "70": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 78
        }
      },
      "71": {
        start: {
          line: 212,
          column: 15
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "72": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "73": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "74": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 46
        }
      },
      "75": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "76": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 38
        }
      },
      "77": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "78": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 74
        }
      },
      "79": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 44
        }
      },
      "80": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 44
        }
      },
      "81": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 44
        }
      },
      "82": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "83": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 42
        }
      },
      "84": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "85": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 42
        }
      },
      "86": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "87": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "88": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "89": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 40
        }
      },
      "90": {
        start: {
          line: 252,
          column: 26
        },
        end: {
          line: 290,
          column: 10
        }
      },
      "91": {
        start: {
          line: 254,
          column: 37
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "92": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "93": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 274,
          column: 17
        }
      },
      "94": {
        start: {
          line: 260,
          column: 37
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "95": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 273,
          column: 23
        }
      },
      "96": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 289,
          column: 15
        }
      },
      "97": {
        start: {
          line: 292,
          column: 29
        },
        end: {
          line: 292,
          column: 69
        }
      },
      "98": {
        start: {
          line: 293,
          column: 21
        },
        end: {
          line: 293,
          column: 40
        }
      },
      "99": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "100": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 57
        }
      },
      "101": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 308,
          column: 11
        }
      },
      "102": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "103": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 58
        }
      },
      "104": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 153,
            column: 15
          },
          end: {
            line: 153,
            column: 19
          }
        },
        loc: {
          start: {
            line: 153,
            column: 29
          },
          end: {
            line: 320,
            column: 1
          }
        },
        line: 153
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 252,
            column: 61
          },
          end: {
            line: 252,
            column: 62
          }
        },
        loc: {
          start: {
            line: 252,
            column: 73
          },
          end: {
            line: 290,
            column: 9
          }
        },
        line: 252
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 14
          }
        }, {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 32
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 49,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 70
          },
          end: {
            line: 49,
            column: 94
          }
        }, {
          start: {
            line: 49,
            column: 97
          },
          end: {
            line: 49,
            column: 99
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 36
          },
          end: {
            line: 51,
            column: 160
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 36
          },
          end: {
            line: 51,
            column: 94
          }
        }, {
          start: {
            line: 51,
            column: 98
          },
          end: {
            line: 51,
            column: 160
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 69
          }
        }, {
          start: {
            line: 52,
            column: 73
          },
          end: {
            line: 52,
            column: 125
          }
        }],
        line: 52
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 32
          }
        }, {
          start: {
            line: 53,
            column: 36
          },
          end: {
            line: 53,
            column: 48
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 63,
            column: 42
          },
          end: {
            line: 63,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 42
          },
          end: {
            line: 63,
            column: 66
          }
        }, {
          start: {
            line: 63,
            column: 70
          },
          end: {
            line: 63,
            column: 73
          }
        }],
        line: 63
      },
      "10": {
        loc: {
          start: {
            line: 64,
            column: 56
          },
          end: {
            line: 64,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 56
          },
          end: {
            line: 64,
            column: 81
          }
        }, {
          start: {
            line: 64,
            column: 85
          },
          end: {
            line: 64,
            column: 89
          }
        }],
        line: 64
      },
      "11": {
        loc: {
          start: {
            line: 70,
            column: 23
          },
          end: {
            line: 70,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 23
          },
          end: {
            line: 70,
            column: 49
          }
        }, {
          start: {
            line: 70,
            column: 53
          },
          end: {
            line: 70,
            column: 55
          }
        }],
        line: 70
      },
      "12": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "13": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "14": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "15": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 21
          }
        }, {
          start: {
            line: 97,
            column: 25
          },
          end: {
            line: 97,
            column: 32
          }
        }],
        line: 97
      },
      "16": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "19": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 165,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 165,
            column: 20
          }
        }, {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 36
          }
        }],
        line: 165
      },
      "20": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "21": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "22": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 27
          }
        }, {
          start: {
            line: 193,
            column: 31
          },
          end: {
            line: 193,
            column: 45
          }
        }, {
          start: {
            line: 193,
            column: 49
          },
          end: {
            line: 193,
            column: 68
          }
        }],
        line: 193
      },
      "23": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "24": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 212,
            column: 15
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 210
      },
      "25": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 36
          }
        }, {
          start: {
            line: 210,
            column: 40
          },
          end: {
            line: 210,
            column: 84
          }
        }],
        line: 210
      },
      "26": {
        loc: {
          start: {
            line: 212,
            column: 15
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 15
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "27": {
        loc: {
          start: {
            line: 212,
            column: 19
          },
          end: {
            line: 212,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 19
          },
          end: {
            line: 212,
            column: 43
          }
        }, {
          start: {
            line: 212,
            column: 47
          },
          end: {
            line: 212,
            column: 91
          }
        }],
        line: 212
      },
      "28": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "29": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "30": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: 229,
            column: 15
          },
          end: {
            line: 235,
            column: 9
          }
        }],
        line: 226
      },
      "31": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "32": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "33": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "34": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "35": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "36": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 258,
            column: 21
          }
        }, {
          start: {
            line: 258,
            column: 25
          },
          end: {
            line: 258,
            column: 45
          }
        }],
        line: 258
      },
      "37": {
        loc: {
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 264,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 264,
            column: 56
          }
        }, {
          start: {
            line: 264,
            column: 60
          },
          end: {
            line: 264,
            column: 70
          }
        }],
        line: 264
      },
      "38": {
        loc: {
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 293,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 21
          },
          end: {
            line: 293,
            column: 32
          }
        }, {
          start: {
            line: 293,
            column: 36
          },
          end: {
            line: 293,
            column: 40
          }
        }],
        line: 293
      },
      "39": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "40": {
        loc: {
          start: {
            line: 303,
            column: 33
          },
          end: {
            line: 303,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 33
          },
          end: {
            line: 303,
            column: 58
          }
        }, {
          start: {
            line: 303,
            column: 62
          },
          end: {
            line: 303,
            column: 64
          }
        }],
        line: 303
      },
      "41": {
        loc: {
          start: {
            line: 304,
            column: 28
          },
          end: {
            line: 304,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 28
          },
          end: {
            line: 304,
            column: 48
          }
        }, {
          start: {
            line: 304,
            column: 52
          },
          end: {
            line: 304,
            column: 56
          }
        }],
        line: 304
      },
      "42": {
        loc: {
          start: {
            line: 305,
            column: 23
          },
          end: {
            line: 305,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 23
          },
          end: {
            line: 305,
            column: 38
          }
        }, {
          start: {
            line: 305,
            column: 42
          },
          end: {
            line: 305,
            column: 43
          }
        }],
        line: 305
      },
      "43": {
        loc: {
          start: {
            line: 306,
            column: 28
          },
          end: {
            line: 306,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 28
          },
          end: {
            line: 306,
            column: 51
          }
        }, {
          start: {
            line: 306,
            column: 55
          },
          end: {
            line: 306,
            column: 56
          }
        }],
        line: 306
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { Prisma } from '@prisma/client';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { AuditService } from '@/services/auditService';\n\ntype QuotationWhereInput = Prisma.QuotationWhereInput;\n\n// GET /api/quotations - Get quotations with pagination\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n\n        // Build context for shop access control\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n        }\n        const decodedToken = await verifyToken(token);\n        if (!decodedToken) {\n            return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n        }\n\n        const permissions = Array.isArray(decodedToken.permissions) ? decodedToken.permissions : [];\n\n        // Check for view permissions before proceeding\n        const canViewByPermission = hasPermission(permissions, 'sales:view') || hasPermission(permissions, 'quotation:view');\n        const isShopStaff = typeof decodedToken.roleName === 'string' && decodedToken.roleName.toLowerCase() === 'shop staff';\n\n        if (!canViewByPermission && !isShopStaff) {\n            return NextResponse.json({ error: 'Insufficient permissions to view quotations' }, { status: 403 });\n        }\n\n        const isAdmin = hasPermission(permissions, 'admin:all');\n        const shopIdFromUrl = searchParams.get('shopId');\n\n        // Pagination parameters\n        const page = Math.max(1, parseInt(searchParams.get('page') || '1', 10));\n        const limit = Math.min(50, Math.max(1, parseInt(searchParams.get('limit') || '15', 10))); // Max 50 items per page\n        const skip = (page - 1) * limit;\n\n        // For quotations, we don't filter by shop since quotations are not shop-specific\n        // Unlike invoices, quotations don't have shops assigned to them\n        const whereClause: any = {};\n\n        // Add other filters\n        const search = searchParams.get('search') || '';\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n\n        if (search) {\n            whereClause.OR = [\n                { quotationNumber: { contains: search, mode: 'insensitive' } },\n                { customer: { is: { name: { contains: search, mode: 'insensitive' } } } },\n            ];\n        }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate),\n            };\n        }\n\n        console.log('[Quotations API] Where clause:', JSON.stringify(whereClause, null, 2));\n\n        // Get total count for pagination\n        const totalCount = await prisma.quotation.count({\n            where: whereClause,\n        });\n\n        // Get paginated quotations\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n            skip,\n            take: limit,\n        });\n\n        console.log(`[Quotations API] Found ${quotations.length} quotations (page ${page} of ${Math.ceil(totalCount / limit)})`);\n        if (quotations.length > 0) {\n            console.log('[Quotations API] First quotation:', {\n                id: quotations[0].id,\n                quotationNumber: quotations[0].quotationNumber,\n                shopId: quotations[0].shopId\n            });\n        }\n\n        return NextResponse.json({\n            quotations,\n            pagination: {\n                page,\n                limit,\n                totalCount,\n                totalPages: Math.ceil(totalCount / limit),\n                hasNext: page < Math.ceil(totalCount / limit),\n                hasPrev: page > 1\n            }\n        });\n    } catch (error) {\n        console.error('Failed to fetch quotations:', error);\n        return NextResponse.json({ error: 'Failed to fetch quotations' }, { status: 500 });\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        const canCreateShop = hasPermission(user.permissions, 'sales:create:shop');\n        const canCreateQuotation = hasPermission(user.permissions, 'quotation:create');\n        \n        if (!canManageSales && !canCreateShop && !canCreateQuotation) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const body = await request.json();\n        \n        // For quotations, we don't need to validate or set shopId\n        // Quotations are not shop-specific unlike invoices\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        // After transaction\n        const auditService = AuditService.getInstance();\n        let userId: string | null = payload.sub || null;\n\n        if (!quotation) {\n            throw new Error('Quotation creation failed');\n        }\n\n        await auditService.logAction({\n            userId,\n            action: 'CREATE',\n            entity: 'Quotation',\n            entityId: quotation.id,\n            details: {\n                quotationNumber: quotation.quotationNumber || '',\n                customerId: quotation.customerId || null,\n                total: quotation.total || 0,\n                itemsCount: quotation.items?.length || 0\n            }\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "searchParams", "URL", "url", "token", "extractToken", "NextResponse", "json", "error", "status", "decodedToken", "verifyToken", "permissions", "Array", "isArray", "canViewByPermission", "hasPermission", "isShopStaff", "roleName", "toLowerCase", "isAdmin", "shopIdFromUrl", "get", "page", "Math", "max", "parseInt", "limit", "min", "skip", "whereClause", "search", "customerId", "startDate", "endDate", "OR", "quotationNumber", "contains", "mode", "customer", "is", "name", "createdAt", "gte", "Date", "lte", "console", "log", "JSON", "stringify", "totalCount", "prisma", "quotation", "count", "where", "quotations", "findMany", "include", "items", "product", "orderBy", "take", "length", "ceil", "id", "shopId", "pagination", "totalPages", "hasNext", "hasPrev", "payload", "sub", "user", "findUnique", "select", "canManageSales", "canCreateShop", "canCreateQuotation", "body", "floor", "random", "toString", "padStart", "quotationData", "customerName", "date", "expiryDate", "validUntil", "subtotal", "discount", "notes", "$transaction", "tx", "createdQuotation", "create", "data", "item", "itemData", "quotationId", "productId", "quantity", "price", "parseFloat", "unitPrice", "total", "quotationItem", "auditService", "AuditService", "getInstance", "userId", "Error", "logAction", "action", "entity", "entityId", "details", "itemsCount"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4cdd78f72f145ca57473fa1070bda07c2bfce0cc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_trd22sxb5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_trd22sxb5();
cov_trd22sxb5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[0]++;
  cov_trd22sxb5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_trd22sxb5().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[1]++;
    cov_trd22sxb5().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[2]++;
    cov_trd22sxb5().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_trd22sxb5().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_trd22sxb5().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_trd22sxb5().s[8]++, require("../../../lib/auth"));
const _permissions =
/* istanbul ignore next */
(cov_trd22sxb5().s[9]++, require("../../../lib/utils/permissions"));
const _auditService =
/* istanbul ignore next */
(cov_trd22sxb5().s[10]++, require("../../../services/auditService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[3]++;
  cov_trd22sxb5().s[11]++;
  return /* istanbul ignore next */(cov_trd22sxb5().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_trd22sxb5().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[4]++;
  cov_trd22sxb5().s[12]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[13]++, new URL(request.url));
    // Build context for shop access control
    const token =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[14]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_trd22sxb5().s[15]++;
    if (!token) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[2][0]++;
      cov_trd22sxb5().s[16]++;
      return _server.NextResponse.json({
        error: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[2][1]++;
    }
    const decodedToken =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[17]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_trd22sxb5().s[18]++;
    if (!decodedToken) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[3][0]++;
      cov_trd22sxb5().s[19]++;
      return _server.NextResponse.json({
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[3][1]++;
    }
    const permissions =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[20]++, Array.isArray(decodedToken.permissions) ?
    /* istanbul ignore next */
    (cov_trd22sxb5().b[4][0]++, decodedToken.permissions) :
    /* istanbul ignore next */
    (cov_trd22sxb5().b[4][1]++, []));
    // Check for view permissions before proceeding
    const canViewByPermission =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[21]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[5][0]++, (0, _permissions.hasPermission)(permissions, "sales:view")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[5][1]++, (0, _permissions.hasPermission)(permissions, "quotation:view")));
    const isShopStaff =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[22]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[6][0]++, typeof decodedToken.roleName === "string") &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[6][1]++, decodedToken.roleName.toLowerCase() === "shop staff"));
    /* istanbul ignore next */
    cov_trd22sxb5().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[8][0]++, !canViewByPermission) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[8][1]++, !isShopStaff)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[7][0]++;
      cov_trd22sxb5().s[24]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions to view quotations"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[7][1]++;
    }
    const isAdmin =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[25]++, (0, _permissions.hasPermission)(permissions, "admin:all"));
    const shopIdFromUrl =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[26]++, searchParams.get("shopId"));
    // Pagination parameters
    const page =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[27]++, Math.max(1, parseInt(
    /* istanbul ignore next */
    (cov_trd22sxb5().b[9][0]++, searchParams.get("page")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[9][1]++, "1"), 10)));
    const limit =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[28]++, Math.min(50, Math.max(1, parseInt(
    /* istanbul ignore next */
    (cov_trd22sxb5().b[10][0]++, searchParams.get("limit")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[10][1]++, "15"), 10)))); // Max 50 items per page
    const skip =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[29]++, (page - 1) * limit);
    // For quotations, we don't filter by shop since quotations are not shop-specific
    // Unlike invoices, quotations don't have shops assigned to them
    const whereClause =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[30]++, {});
    // Add other filters
    const search =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[31]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[11][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[11][1]++, ""));
    const customerId =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[32]++, searchParams.get("customerId"));
    const startDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[33]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[34]++, searchParams.get("endDate"));
    /* istanbul ignore next */
    cov_trd22sxb5().s[35]++;
    if (search) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[12][0]++;
      cov_trd22sxb5().s[36]++;
      whereClause.OR = [{
        quotationNumber: {
          contains: search,
          mode: "insensitive"
        }
      }, {
        customer: {
          is: {
            name: {
              contains: search,
              mode: "insensitive"
            }
          }
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[12][1]++;
    }
    cov_trd22sxb5().s[37]++;
    if (customerId) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[13][0]++;
      cov_trd22sxb5().s[38]++;
      whereClause.customerId = parseInt(customerId);
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[13][1]++;
    }
    cov_trd22sxb5().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[15][0]++, startDate) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[15][1]++, endDate)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[14][0]++;
      cov_trd22sxb5().s[40]++;
      whereClause.createdAt = {
        gte: new Date(startDate),
        lte: new Date(endDate)
      };
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[14][1]++;
    }
    cov_trd22sxb5().s[41]++;
    console.log("[Quotations API] Where clause:", JSON.stringify(whereClause, null, 2));
    // Get total count for pagination
    const totalCount =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[42]++, await _prisma.default.quotation.count({
      where: whereClause
    }));
    // Get paginated quotations
    const quotations =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[43]++, await _prisma.default.quotation.findMany({
      where: whereClause,
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      skip,
      take: limit
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[44]++;
    console.log(`[Quotations API] Found ${quotations.length} quotations (page ${page} of ${Math.ceil(totalCount / limit)})`);
    /* istanbul ignore next */
    cov_trd22sxb5().s[45]++;
    if (quotations.length > 0) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[16][0]++;
      cov_trd22sxb5().s[46]++;
      console.log("[Quotations API] First quotation:", {
        id: quotations[0].id,
        quotationNumber: quotations[0].quotationNumber,
        shopId: quotations[0].shopId
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[16][1]++;
    }
    cov_trd22sxb5().s[47]++;
    return _server.NextResponse.json({
      quotations,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit),
        hasNext: page < Math.ceil(totalCount / limit),
        hasPrev: page > 1
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[48]++;
    console.error("Failed to fetch quotations:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[49]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotations"
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[5]++;
  cov_trd22sxb5().s[50]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[51]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_trd22sxb5().s[52]++;
    if (!token) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[17][0]++;
      cov_trd22sxb5().s[53]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[17][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[54]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_trd22sxb5().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[19][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[19][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[18][0]++;
      cov_trd22sxb5().s[56]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[18][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[57]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[58]++;
    if (!user) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[20][0]++;
      cov_trd22sxb5().s[59]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[20][1]++;
    }
    // Check permissions
    const canManageSales =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[60]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    const canCreateShop =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[61]++, (0, _permissions.hasPermission)(user.permissions, "sales:create:shop"));
    const canCreateQuotation =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[62]++, (0, _permissions.hasPermission)(user.permissions, "quotation:create"));
    /* istanbul ignore next */
    cov_trd22sxb5().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[22][0]++, !canManageSales) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[22][1]++, !canCreateShop) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[22][2]++, !canCreateQuotation)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[21][0]++;
      cov_trd22sxb5().s[64]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[21][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[65]++, await request.json());
    // For quotations, we don't need to validate or set shopId
    // Quotations are not shop-specific unlike invoices
    // Generate a quotation number if not provided
    /* istanbul ignore next */
    cov_trd22sxb5().s[66]++;
    if (!body.quotationNumber) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[23][0]++;
      cov_trd22sxb5().s[67]++;
      body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, "0")}`;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[23][1]++;
    }
    // Extract items from the request
    const {
      items,
      ...quotationData
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[68]++, body);
    // Ensure customerId is an integer
    /* istanbul ignore next */
    cov_trd22sxb5().s[69]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[25][0]++, quotationData.customerId) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[25][1]++, typeof quotationData.customerId === "string")) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[24][0]++;
      cov_trd22sxb5().s[70]++;
      quotationData.customerId = parseInt(quotationData.customerId, 10);
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[24][1]++;
      cov_trd22sxb5().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[27][0]++, quotationData.customerId) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[27][1]++, typeof quotationData.customerId !== "number")) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[26][0]++;
        cov_trd22sxb5().s[72]++;
        // Potentially return an error if customerId is not a parsable string or number
        console.error("Invalid customerId format:", quotationData.customerId);
        // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[26][1]++;
      }
    }
    // Remove customerName as it's not a direct field of Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[73]++;
    if ("customerName" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[28][0]++;
      cov_trd22sxb5().s[74]++;
      delete quotationData.customerName;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[28][1]++;
    }
    // Remove date as createdAt is automatically handled by Prisma
    cov_trd22sxb5().s[75]++;
    if ("date" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[29][0]++;
      cov_trd22sxb5().s[76]++;
      delete quotationData.date;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[29][1]++;
    }
    // Rename expiryDate to validUntil and convert to Date object
    cov_trd22sxb5().s[77]++;
    if (quotationData.expiryDate) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[30][0]++;
      cov_trd22sxb5().s[78]++;
      quotationData.validUntil = new Date(quotationData.expiryDate);
      /* istanbul ignore next */
      cov_trd22sxb5().s[79]++;
      delete quotationData.expiryDate;
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[30][1]++;
      cov_trd22sxb5().s[80]++;
      // Set validUntil to null or a default if expiryDate is not provided and it's optional
      // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.
      // If you want to ensure it's always set, you might add a default here or make it required in the request.
      quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields
      /* istanbul ignore next */
      cov_trd22sxb5().s[81]++;
      delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar
    }
    // Remove subtotal and discount as they are not direct fields of the Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[82]++;
    if ("subtotal" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[31][0]++;
      cov_trd22sxb5().s[83]++;
      delete quotationData.subtotal;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[31][1]++;
    }
    cov_trd22sxb5().s[84]++;
    if ("discount" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[32][0]++;
      cov_trd22sxb5().s[85]++;
      delete quotationData.discount;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[32][1]++;
    }
    // Remove notes as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[86]++;
    if ("notes" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[33][0]++;
      cov_trd22sxb5().s[87]++;
      delete quotationData.notes;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[33][1]++;
    }
    // Remove status as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[88]++;
    if ("status" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[34][0]++;
      cov_trd22sxb5().s[89]++;
      delete quotationData.status;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[34][1]++;
    }
    // Create the quotation with items in a transaction
    const quotation =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[90]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_trd22sxb5().f[6]++;
      // Create the quotation
      const createdQuotation =
      /* istanbul ignore next */
      (cov_trd22sxb5().s[91]++, await tx.quotation.create({
        data: quotationData
      }));
      // Create the quotation items
      /* istanbul ignore next */
      cov_trd22sxb5().s[92]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[36][0]++, items) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[36][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[35][0]++;
        cov_trd22sxb5().s[93]++;
        for (const item of items) {
          const itemData =
          /* istanbul ignore next */
          (cov_trd22sxb5().s[94]++, {
            quotationId: createdQuotation.id,
            productId: parseInt(item.productId, 10),
            quantity: parseInt(item.quantity, 10),
            price: parseFloat(
            /* istanbul ignore next */
            (cov_trd22sxb5().b[37][0]++, item.unitPrice) ||
            /* istanbul ignore next */
            (cov_trd22sxb5().b[37][1]++, item.price)),
            total: parseFloat(item.total) // Ensure total is also a float
          });
          // Remove productName if it exists, as it's not part of QuotationItem schema
          // The actual product details are linked via productId
          // We also remove unitPrice explicitly if it was the original field name
          // and any other unexpected fields that might have come from `...item` spread previously.
          /* istanbul ignore next */
          cov_trd22sxb5().s[95]++;
          await tx.quotationItem.create({
            data: itemData
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[35][1]++;
      }
      // Return the complete quotation with relations
      cov_trd22sxb5().s[96]++;
      return tx.quotation.findUnique({
        where: {
          id: createdQuotation.id
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    // After transaction
    const auditService =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[97]++, _auditService.AuditService.getInstance());
    let userId =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[98]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[38][0]++, payload.sub) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[38][1]++, null));
    /* istanbul ignore next */
    cov_trd22sxb5().s[99]++;
    if (!quotation) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[39][0]++;
      cov_trd22sxb5().s[100]++;
      throw new Error("Quotation creation failed");
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[39][1]++;
    }
    cov_trd22sxb5().s[101]++;
    await auditService.logAction({
      userId,
      action: "CREATE",
      entity: "Quotation",
      entityId: quotation.id,
      details: {
        quotationNumber:
        /* istanbul ignore next */
        (cov_trd22sxb5().b[40][0]++, quotation.quotationNumber) ||
        /* istanbul ignore next */
        (cov_trd22sxb5().b[40][1]++, ""),
        customerId:
        /* istanbul ignore next */
        (cov_trd22sxb5().b[41][0]++, quotation.customerId) ||
        /* istanbul ignore next */
        (cov_trd22sxb5().b[41][1]++, null),
        total:
        /* istanbul ignore next */
        (cov_trd22sxb5().b[42][0]++, quotation.total) ||
        /* istanbul ignore next */
        (cov_trd22sxb5().b[42][1]++, 0),
        itemsCount:
        /* istanbul ignore next */
        (cov_trd22sxb5().b[43][0]++, quotation.items?.length) ||
        /* istanbul ignore next */
        (cov_trd22sxb5().b[43][1]++, 0)
      }
    });
    /* istanbul ignore next */
    cov_trd22sxb5().s[102]++;
    return _server.NextResponse.json(quotation, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[103]++;
    console.error("Error creating quotation:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[104]++;
    return _server.NextResponse.json({
      error: "Failed to create quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfdHJkMjJzeGI1IiwiZiIsInMiLCJQT1NUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsInRva2VuIiwiX2F1dGgiLCJleHRyYWN0VG9rZW4iLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImRlY29kZWRUb2tlbiIsInZlcmlmeVRva2VuIiwicGVybWlzc2lvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJjYW5WaWV3QnlQZXJtaXNzaW9uIiwiX3Blcm1pc3Npb25zIiwiaGFzUGVybWlzc2lvbiIsImlzU2hvcFN0YWZmIiwicm9sZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImlzQWRtaW4iLCJzaG9wSWRGcm9tVXJsIiwiZ2V0IiwicGFnZSIsIk1hdGgiLCJtYXgiLCJwYXJzZUludCIsImxpbWl0IiwibWluIiwic2tpcCIsIndoZXJlQ2xhdXNlIiwic2VhcmNoIiwiY3VzdG9tZXJJZCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJPUiIsInF1b3RhdGlvbk51bWJlciIsImNvbnRhaW5zIiwibW9kZSIsImN1c3RvbWVyIiwiaXMiLCJuYW1lIiwiY3JlYXRlZEF0IiwiZ3RlIiwiRGF0ZSIsImx0ZSIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwidG90YWxDb3VudCIsIl9wcmlzbWEiLCJkZWZhdWx0IiwicXVvdGF0aW9uIiwiY291bnQiLCJ3aGVyZSIsInF1b3RhdGlvbnMiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJpdGVtcyIsInByb2R1Y3QiLCJvcmRlckJ5IiwidGFrZSIsImxlbmd0aCIsImNlaWwiLCJpZCIsInNob3BJZCIsInBhZ2luYXRpb24iLCJ0b3RhbFBhZ2VzIiwiaGFzTmV4dCIsImhhc1ByZXYiLCJwYXlsb2FkIiwic3ViIiwidXNlciIsImZpbmRVbmlxdWUiLCJzZWxlY3QiLCJjYW5NYW5hZ2VTYWxlcyIsImNhbkNyZWF0ZVNob3AiLCJjYW5DcmVhdGVRdW90YXRpb24iLCJib2R5IiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwicXVvdGF0aW9uRGF0YSIsImN1c3RvbWVyTmFtZSIsImRhdGUiLCJleHBpcnlEYXRlIiwidmFsaWRVbnRpbCIsInN1YnRvdGFsIiwiZGlzY291bnQiLCJub3RlcyIsIiR0cmFuc2FjdGlvbiIsInR4IiwiY3JlYXRlZFF1b3RhdGlvbiIsImNyZWF0ZSIsImRhdGEiLCJpdGVtIiwiaXRlbURhdGEiLCJxdW90YXRpb25JZCIsInByb2R1Y3RJZCIsInF1YW50aXR5IiwicHJpY2UiLCJwYXJzZUZsb2F0IiwidW5pdFByaWNlIiwidG90YWwiLCJxdW90YXRpb25JdGVtIiwiYXVkaXRTZXJ2aWNlIiwiX2F1ZGl0U2VydmljZSIsIkF1ZGl0U2VydmljZSIsImdldEluc3RhbmNlIiwidXNlcklkIiwiRXJyb3IiLCJsb2dBY3Rpb24iLCJhY3Rpb24iLCJlbnRpdHkiLCJlbnRpdHlJZCIsImRldGFpbHMiLCJpdGVtc0NvdW50Il0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9xdW90YXRpb25zL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBQcmlzbWEgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5pbXBvcnQgcHJpc21hIGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyB2ZXJpZnlUb2tlbiwgZXh0cmFjdFRva2VuIH0gZnJvbSAnQC9saWIvYXV0aCc7XG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uIH0gZnJvbSAnQC9saWIvdXRpbHMvcGVybWlzc2lvbnMnO1xuaW1wb3J0IHsgU2hvcEFjY2Vzc0NvbnRyb2wgfSBmcm9tICdAL2xpYi91dGlscy9zaG9wTWlkZGxld2FyZSc7XG5pbXBvcnQgeyBBdWRpdFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2F1ZGl0U2VydmljZSc7XG5cbnR5cGUgUXVvdGF0aW9uV2hlcmVJbnB1dCA9IFByaXNtYS5RdW90YXRpb25XaGVyZUlucHV0O1xuXG4vLyBHRVQgL2FwaS9xdW90YXRpb25zIC0gR2V0IHF1b3RhdGlvbnMgd2l0aCBwYWdpbmF0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuXG4gICAgICAgIC8vIEJ1aWxkIGNvbnRleHQgZm9yIHNob3AgYWNjZXNzIGNvbnRyb2xcbiAgICAgICAgY29uc3QgdG9rZW4gPSBleHRyYWN0VG9rZW4ocmVxdWVzdCk7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlY29kZWRUb2tlbiA9IGF3YWl0IHZlcmlmeVRva2VuKHRva2VuKTtcbiAgICAgICAgaWYgKCFkZWNvZGVkVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbicgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBlcm1pc3Npb25zID0gQXJyYXkuaXNBcnJheShkZWNvZGVkVG9rZW4ucGVybWlzc2lvbnMpID8gZGVjb2RlZFRva2VuLnBlcm1pc3Npb25zIDogW107XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHZpZXcgcGVybWlzc2lvbnMgYmVmb3JlIHByb2NlZWRpbmdcbiAgICAgICAgY29uc3QgY2FuVmlld0J5UGVybWlzc2lvbiA9IGhhc1Blcm1pc3Npb24ocGVybWlzc2lvbnMsICdzYWxlczp2aWV3JykgfHwgaGFzUGVybWlzc2lvbihwZXJtaXNzaW9ucywgJ3F1b3RhdGlvbjp2aWV3Jyk7XG4gICAgICAgIGNvbnN0IGlzU2hvcFN0YWZmID0gdHlwZW9mIGRlY29kZWRUb2tlbi5yb2xlTmFtZSA9PT0gJ3N0cmluZycgJiYgZGVjb2RlZFRva2VuLnJvbGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzaG9wIHN0YWZmJztcblxuICAgICAgICBpZiAoIWNhblZpZXdCeVBlcm1pc3Npb24gJiYgIWlzU2hvcFN0YWZmKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byB2aWV3IHF1b3RhdGlvbnMnIH0sIHsgc3RhdHVzOiA0MDMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc0FkbWluID0gaGFzUGVybWlzc2lvbihwZXJtaXNzaW9ucywgJ2FkbWluOmFsbCcpO1xuICAgICAgICBjb25zdCBzaG9wSWRGcm9tVXJsID0gc2VhcmNoUGFyYW1zLmdldCgnc2hvcElkJyk7XG5cbiAgICAgICAgLy8gUGFnaW5hdGlvbiBwYXJhbWV0ZXJzXG4gICAgICAgIGNvbnN0IHBhZ2UgPSBNYXRoLm1heCgxLCBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJykgfHwgJzEnLCAxMCkpO1xuICAgICAgICBjb25zdCBsaW1pdCA9IE1hdGgubWluKDUwLCBNYXRoLm1heCgxLCBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICcxNScsIDEwKSkpOyAvLyBNYXggNTAgaXRlbXMgcGVyIHBhZ2VcbiAgICAgICAgY29uc3Qgc2tpcCA9IChwYWdlIC0gMSkgKiBsaW1pdDtcblxuICAgICAgICAvLyBGb3IgcXVvdGF0aW9ucywgd2UgZG9uJ3QgZmlsdGVyIGJ5IHNob3Agc2luY2UgcXVvdGF0aW9ucyBhcmUgbm90IHNob3Atc3BlY2lmaWNcbiAgICAgICAgLy8gVW5saWtlIGludm9pY2VzLCBxdW90YXRpb25zIGRvbid0IGhhdmUgc2hvcHMgYXNzaWduZWQgdG8gdGhlbVxuICAgICAgICBjb25zdCB3aGVyZUNsYXVzZTogYW55ID0ge307XG5cbiAgICAgICAgLy8gQWRkIG90aGVyIGZpbHRlcnNcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gc2VhcmNoUGFyYW1zLmdldCgnc2VhcmNoJykgfHwgJyc7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVySWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjdXN0b21lcklkJyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0RGF0ZScpO1xuICAgICAgICBjb25zdCBlbmREYXRlID0gc2VhcmNoUGFyYW1zLmdldCgnZW5kRGF0ZScpO1xuXG4gICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICAgIHdoZXJlQ2xhdXNlLk9SID0gW1xuICAgICAgICAgICAgICAgIHsgcXVvdGF0aW9uTnVtYmVyOiB7IGNvbnRhaW5zOiBzZWFyY2gsIG1vZGU6ICdpbnNlbnNpdGl2ZScgfSB9LFxuICAgICAgICAgICAgICAgIHsgY3VzdG9tZXI6IHsgaXM6IHsgbmFtZTogeyBjb250YWluczogc2VhcmNoLCBtb2RlOiAnaW5zZW5zaXRpdmUnIH0gfSB9IH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1c3RvbWVySWQpIHtcbiAgICAgICAgICAgIHdoZXJlQ2xhdXNlLmN1c3RvbWVySWQgPSBwYXJzZUludChjdXN0b21lcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xuICAgICAgICAgICAgd2hlcmVDbGF1c2UuY3JlYXRlZEF0ID0ge1xuICAgICAgICAgICAgICAgIGd0ZTogbmV3IERhdGUoc3RhcnREYXRlKSxcbiAgICAgICAgICAgICAgICBsdGU6IG5ldyBEYXRlKGVuZERhdGUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbUXVvdGF0aW9ucyBBUEldIFdoZXJlIGNsYXVzZTonLCBKU09OLnN0cmluZ2lmeSh3aGVyZUNsYXVzZSwgbnVsbCwgMikpO1xuXG4gICAgICAgIC8vIEdldCB0b3RhbCBjb3VudCBmb3IgcGFnaW5hdGlvblxuICAgICAgICBjb25zdCB0b3RhbENvdW50ID0gYXdhaXQgcHJpc21hLnF1b3RhdGlvbi5jb3VudCh7XG4gICAgICAgICAgICB3aGVyZTogd2hlcmVDbGF1c2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdldCBwYWdpbmF0ZWQgcXVvdGF0aW9uc1xuICAgICAgICBjb25zdCBxdW90YXRpb25zID0gYXdhaXQgcHJpc21hLnF1b3RhdGlvbi5maW5kTWFueSh7XG4gICAgICAgICAgICB3aGVyZTogd2hlcmVDbGF1c2UsXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgY3VzdG9tZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6ICdkZXNjJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgdGFrZTogbGltaXQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGBbUXVvdGF0aW9ucyBBUEldIEZvdW5kICR7cXVvdGF0aW9ucy5sZW5ndGh9IHF1b3RhdGlvbnMgKHBhZ2UgJHtwYWdlfSBvZiAke01hdGguY2VpbCh0b3RhbENvdW50IC8gbGltaXQpfSlgKTtcbiAgICAgICAgaWYgKHF1b3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tRdW90YXRpb25zIEFQSV0gRmlyc3QgcXVvdGF0aW9uOicsIHtcbiAgICAgICAgICAgICAgICBpZDogcXVvdGF0aW9uc1swXS5pZCxcbiAgICAgICAgICAgICAgICBxdW90YXRpb25OdW1iZXI6IHF1b3RhdGlvbnNbMF0ucXVvdGF0aW9uTnVtYmVyLFxuICAgICAgICAgICAgICAgIHNob3BJZDogcXVvdGF0aW9uc1swXS5zaG9wSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHF1b3RhdGlvbnMsXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgcGFnZSxcbiAgICAgICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgICAgICB0b3RhbENvdW50LFxuICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbENvdW50IC8gbGltaXQpLFxuICAgICAgICAgICAgICAgIGhhc05leHQ6IHBhZ2UgPCBNYXRoLmNlaWwodG90YWxDb3VudCAvIGxpbWl0KSxcbiAgICAgICAgICAgICAgICBoYXNQcmV2OiBwYWdlID4gMVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcXVvdGF0aW9uczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIHF1b3RhdGlvbnMnIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxufVxuXG4vLyBQT1NUIC9hcGkvcXVvdGF0aW9ucyAtIENyZWF0ZSBhIG5ldyBxdW90YXRpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ2hlY2sgYXV0aGVudGljYXRpb25cbiAgICAgICAgY29uc3QgdG9rZW4gPSBleHRyYWN0VG9rZW4ocmVxdWVzdCk7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkIC0gTm8gdG9rZW4gcHJvdmlkZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4pO1xuICAgICAgICBpZiAoIXBheWxvYWQgfHwgIXBheWxvYWQuc3ViKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCAtIEludmFsaWQgdG9rZW4nIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdXNlciBkZXRhaWxzXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXlsb2FkLnN1YiBhcyBzdHJpbmcgfSxcbiAgICAgICAgICAgIHNlbGVjdDogeyBwZXJtaXNzaW9uczogdHJ1ZSwgc2hvcElkOiB0cnVlIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9LCB7IHN0YXR1czogNDA0IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgcGVybWlzc2lvbnNcbiAgICAgICAgY29uc3QgY2FuTWFuYWdlU2FsZXMgPSBoYXNQZXJtaXNzaW9uKHVzZXIucGVybWlzc2lvbnMsICdzYWxlczptYW5hZ2UnKTtcbiAgICAgICAgY29uc3QgY2FuQ3JlYXRlU2hvcCA9IGhhc1Blcm1pc3Npb24odXNlci5wZXJtaXNzaW9ucywgJ3NhbGVzOmNyZWF0ZTpzaG9wJyk7XG4gICAgICAgIGNvbnN0IGNhbkNyZWF0ZVF1b3RhdGlvbiA9IGhhc1Blcm1pc3Npb24odXNlci5wZXJtaXNzaW9ucywgJ3F1b3RhdGlvbjpjcmVhdGUnKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghY2FuTWFuYWdlU2FsZXMgJiYgIWNhbkNyZWF0ZVNob3AgJiYgIWNhbkNyZWF0ZVF1b3RhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMnIH0sIHsgc3RhdHVzOiA0MDMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBGb3IgcXVvdGF0aW9ucywgd2UgZG9uJ3QgbmVlZCB0byB2YWxpZGF0ZSBvciBzZXQgc2hvcElkXG4gICAgICAgIC8vIFF1b3RhdGlvbnMgYXJlIG5vdCBzaG9wLXNwZWNpZmljIHVubGlrZSBpbnZvaWNlc1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGEgcXVvdGF0aW9uIG51bWJlciBpZiBub3QgcHJvdmlkZWRcbiAgICAgICAgaWYgKCFib2R5LnF1b3RhdGlvbk51bWJlcikge1xuICAgICAgICAgICAgYm9keS5xdW90YXRpb25OdW1iZXIgPSBgUVVPJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkudG9TdHJpbmcoKS5wYWRTdGFydCg0LCAnMCcpfWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRyYWN0IGl0ZW1zIGZyb20gdGhlIHJlcXVlc3RcbiAgICAgICAgY29uc3QgeyBpdGVtcywgLi4ucXVvdGF0aW9uRGF0YSB9ID0gYm9keTtcblxuICAgICAgICAvLyBFbnN1cmUgY3VzdG9tZXJJZCBpcyBhbiBpbnRlZ2VyXG4gICAgICAgIGlmIChxdW90YXRpb25EYXRhLmN1c3RvbWVySWQgJiYgdHlwZW9mIHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJJZCA9IHBhcnNlSW50KHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJJZCwgMTApO1xuICAgICAgICB9IGVsc2UgaWYgKHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJJZCAmJiB0eXBlb2YgcXVvdGF0aW9uRGF0YS5jdXN0b21lcklkICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy8gUG90ZW50aWFsbHkgcmV0dXJuIGFuIGVycm9yIGlmIGN1c3RvbWVySWQgaXMgbm90IGEgcGFyc2FibGUgc3RyaW5nIG9yIG51bWJlclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgY3VzdG9tZXJJZCBmb3JtYXQ6XCIsIHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJJZCk7XG4gICAgICAgICAgICAvLyByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY3VzdG9tZXJJZCBmb3JtYXQnIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgY3VzdG9tZXJOYW1lIGFzIGl0J3Mgbm90IGEgZGlyZWN0IGZpZWxkIG9mIFF1b3RhdGlvbiBtb2RlbFxuICAgICAgICBpZiAoJ2N1c3RvbWVyTmFtZScgaW4gcXVvdGF0aW9uRGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHF1b3RhdGlvbkRhdGEuY3VzdG9tZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGRhdGUgYXMgY3JlYXRlZEF0IGlzIGF1dG9tYXRpY2FsbHkgaGFuZGxlZCBieSBQcmlzbWFcbiAgICAgICAgaWYgKCdkYXRlJyBpbiBxdW90YXRpb25EYXRhKSB7XG4gICAgICAgICAgICBkZWxldGUgcXVvdGF0aW9uRGF0YS5kYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVuYW1lIGV4cGlyeURhdGUgdG8gdmFsaWRVbnRpbCBhbmQgY29udmVydCB0byBEYXRlIG9iamVjdFxuICAgICAgICBpZiAocXVvdGF0aW9uRGF0YS5leHBpcnlEYXRlKSB7XG4gICAgICAgICAgICBxdW90YXRpb25EYXRhLnZhbGlkVW50aWwgPSBuZXcgRGF0ZShxdW90YXRpb25EYXRhLmV4cGlyeURhdGUpO1xuICAgICAgICAgICAgZGVsZXRlIHF1b3RhdGlvbkRhdGEuZXhwaXJ5RGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNldCB2YWxpZFVudGlsIHRvIG51bGwgb3IgYSBkZWZhdWx0IGlmIGV4cGlyeURhdGUgaXMgbm90IHByb3ZpZGVkIGFuZCBpdCdzIG9wdGlvbmFsXG4gICAgICAgICAgICAvLyBCYXNlZCBvbiBzY2hlbWEgKERhdGVUaW1lPyksIGl0J3Mgb3B0aW9uYWwuIFNvLCBpZiBub3QgcHJvdmlkZWQsIGl0IGNhbiBiZSBvbWl0dGVkIG9yIGV4cGxpY2l0bHkgbnVsbC5cbiAgICAgICAgICAgIC8vIElmIHlvdSB3YW50IHRvIGVuc3VyZSBpdCdzIGFsd2F5cyBzZXQsIHlvdSBtaWdodCBhZGQgYSBkZWZhdWx0IGhlcmUgb3IgbWFrZSBpdCByZXF1aXJlZCBpbiB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgIHF1b3RhdGlvbkRhdGEudmFsaWRVbnRpbCA9IG51bGw7IC8vIE9yIHNpbXBseSBkb24ndCBzZXQgaXQgaWYgbm90IHByb3ZpZGVkLCBQcmlzbWEgaGFuZGxlcyBvcHRpb25hbCBmaWVsZHNcbiAgICAgICAgICAgIGRlbGV0ZSBxdW90YXRpb25EYXRhLmV4cGlyeURhdGU7IC8vIEVuc3VyZSBpdCdzIHJlbW92ZWQgaWYgaXQgd2FzIGFuIGVtcHR5IHN0cmluZyBvciBzaW1pbGFyXG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgc3VidG90YWwgYW5kIGRpc2NvdW50IGFzIHRoZXkgYXJlIG5vdCBkaXJlY3QgZmllbGRzIG9mIHRoZSBRdW90YXRpb24gbW9kZWxcbiAgICAgICAgaWYgKCdzdWJ0b3RhbCcgaW4gcXVvdGF0aW9uRGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHF1b3RhdGlvbkRhdGEuc3VidG90YWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdkaXNjb3VudCcgaW4gcXVvdGF0aW9uRGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHF1b3RhdGlvbkRhdGEuZGlzY291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgbm90ZXMgYXMgaXQgaXMgbm90IGEgZGlyZWN0IGZpZWxkIG9mIHRoZSBRdW90YXRpb24gbW9kZWxcbiAgICAgICAgaWYgKCdub3RlcycgaW4gcXVvdGF0aW9uRGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHF1b3RhdGlvbkRhdGEubm90ZXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgc3RhdHVzIGFzIGl0IGlzIG5vdCBhIGRpcmVjdCBmaWVsZCBvZiB0aGUgUXVvdGF0aW9uIG1vZGVsXG4gICAgICAgIGlmICgnc3RhdHVzJyBpbiBxdW90YXRpb25EYXRhKSB7XG4gICAgICAgICAgICBkZWxldGUgcXVvdGF0aW9uRGF0YS5zdGF0dXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgdGhlIHF1b3RhdGlvbiB3aXRoIGl0ZW1zIGluIGEgdHJhbnNhY3Rpb25cbiAgICAgICAgY29uc3QgcXVvdGF0aW9uID0gYXdhaXQgcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcXVvdGF0aW9uXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkUXVvdGF0aW9uID0gYXdhaXQgdHgucXVvdGF0aW9uLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTogcXVvdGF0aW9uRGF0YVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcXVvdGF0aW9uIGl0ZW1zXG4gICAgICAgICAgICBpZiAoaXRlbXMgJiYgQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbURhdGE6IGFueSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RhdGlvbklkOiBjcmVhdGVkUXVvdGF0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiBwYXJzZUludChpdGVtLnByb2R1Y3RJZCwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHBhcnNlSW50KGl0ZW0ucXVhbnRpdHksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBwYXJzZUZsb2F0KGl0ZW0udW5pdFByaWNlIHx8IGl0ZW0ucHJpY2UpLCAvLyBIYW5kbGUgaWYgaXQncyBhbHJlYWR5IHByaWNlIG9yIHVuaXRQcmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHBhcnNlRmxvYXQoaXRlbS50b3RhbCkgLy8gRW5zdXJlIHRvdGFsIGlzIGFsc28gYSBmbG9hdFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9kdWN0TmFtZSBpZiBpdCBleGlzdHMsIGFzIGl0J3Mgbm90IHBhcnQgb2YgUXVvdGF0aW9uSXRlbSBzY2hlbWFcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGFjdHVhbCBwcm9kdWN0IGRldGFpbHMgYXJlIGxpbmtlZCB2aWEgcHJvZHVjdElkXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFsc28gcmVtb3ZlIHVuaXRQcmljZSBleHBsaWNpdGx5IGlmIGl0IHdhcyB0aGUgb3JpZ2luYWwgZmllbGQgbmFtZVxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYW55IG90aGVyIHVuZXhwZWN0ZWQgZmllbGRzIHRoYXQgbWlnaHQgaGF2ZSBjb21lIGZyb20gYC4uLml0ZW1gIHNwcmVhZCBwcmV2aW91c2x5LlxuXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHR4LnF1b3RhdGlvbkl0ZW0uY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGl0ZW1EYXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBjb21wbGV0ZSBxdW90YXRpb24gd2l0aCByZWxhdGlvbnNcbiAgICAgICAgICAgIHJldHVybiB0eC5xdW90YXRpb24uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNyZWF0ZWRRdW90YXRpb24uaWRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFmdGVyIHRyYW5zYWN0aW9uXG4gICAgICAgIGNvbnN0IGF1ZGl0U2VydmljZSA9IEF1ZGl0U2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBsZXQgdXNlcklkOiBzdHJpbmcgfCBudWxsID0gcGF5bG9hZC5zdWIgfHwgbnVsbDtcblxuICAgICAgICBpZiAoIXF1b3RhdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdW90YXRpb24gY3JlYXRpb24gZmFpbGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBhdWRpdFNlcnZpY2UubG9nQWN0aW9uKHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIGFjdGlvbjogJ0NSRUFURScsXG4gICAgICAgICAgICBlbnRpdHk6ICdRdW90YXRpb24nLFxuICAgICAgICAgICAgZW50aXR5SWQ6IHF1b3RhdGlvbi5pZCxcbiAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICBxdW90YXRpb25OdW1iZXI6IHF1b3RhdGlvbi5xdW90YXRpb25OdW1iZXIgfHwgJycsXG4gICAgICAgICAgICAgICAgY3VzdG9tZXJJZDogcXVvdGF0aW9uLmN1c3RvbWVySWQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB0b3RhbDogcXVvdGF0aW9uLnRvdGFsIHx8IDAsXG4gICAgICAgICAgICAgICAgaXRlbXNDb3VudDogcXVvdGF0aW9uLml0ZW1zPy5sZW5ndGggfHwgMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocXVvdGF0aW9uLCB7IHN0YXR1czogMjAxIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHF1b3RhdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHF1b3RhdGlvbicgfSxcbiAgICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgICApO1xuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUFBLEVBQVc7TUFBQTtNQUFBN0QsYUFBQSxHQUFBVyxDQUFBO01BQUFYLGFBQUEsR0FBQUUsQ0FBQTtNQUNaLE1BQU0sSUFBSXNILEtBQUEsQ0FBTTtJQUNwQjtJQUFBO0lBQUE7TUFBQXhILGFBQUEsR0FBQVcsQ0FBQTtJQUFBO0lBQUFYLGFBQUEsR0FBQUUsQ0FBQTtJQUVBLE1BQU1pSCxZQUFBLENBQWFNLFNBQVMsQ0FBQztNQUN6QkYsTUFBQTtNQUNBRyxNQUFBLEVBQVE7TUFDUkMsTUFBQSxFQUFRO01BQ1JDLFFBQUEsRUFBVS9ELFNBQUEsQ0FBVVksRUFBRTtNQUN0Qm9ELE9BQUEsRUFBUztRQUNMakYsZUFBQTtRQUFpQjtRQUFBLENBQUE1QyxhQUFBLEdBQUFXLENBQUEsV0FBQWtELFNBQUEsQ0FBVWpCLGVBQWU7UUFBQTtRQUFBLENBQUE1QyxhQUFBLEdBQUFXLENBQUEsV0FBSTtRQUM5QzZCLFVBQUE7UUFBWTtRQUFBLENBQUF4QyxhQUFBLEdBQUFXLENBQUEsV0FBQWtELFNBQUEsQ0FBVXJCLFVBQVU7UUFBQTtRQUFBLENBQUF4QyxhQUFBLEdBQUFXLENBQUEsV0FBSTtRQUNwQ3NHLEtBQUE7UUFBTztRQUFBLENBQUFqSCxhQUFBLEdBQUFXLENBQUEsV0FBQWtELFNBQUEsQ0FBVW9ELEtBQUs7UUFBQTtRQUFBLENBQUFqSCxhQUFBLEdBQUFXLENBQUEsV0FBSTtRQUMxQm1ILFVBQUE7UUFBWTtRQUFBLENBQUE5SCxhQUFBLEdBQUFXLENBQUEsV0FBQWtELFNBQUEsQ0FBVU0sS0FBSyxFQUFFSSxNQUFBO1FBQUE7UUFBQSxDQUFBdkUsYUFBQSxHQUFBVyxDQUFBLFdBQVU7TUFDM0M7SUFDSjtJQUFBO0lBQUFYLGFBQUEsR0FBQUUsQ0FBQTtJQUVBLE9BQU9VLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUMrQyxTQUFBLEVBQVc7TUFBRTdDLE1BQUEsRUFBUTtJQUFJO0VBQ3RELEVBQUUsT0FBT0QsS0FBQSxFQUFPO0lBQUE7SUFBQWYsYUFBQSxHQUFBRSxDQUFBO0lBQ1pvRCxPQUFBLENBQVF2QyxLQUFLLENBQUMsNkJBQTZCQSxLQUFBO0lBQUE7SUFBQWYsYUFBQSxHQUFBRSxDQUFBO0lBQzNDLE9BQU9VLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3BCO01BQUVDLEtBQUEsRUFBTztJQUE2QixHQUN0QztNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUV0QjtBQUNKIiwiaWdub3JlTGlzdCI6W119