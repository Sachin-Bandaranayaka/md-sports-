{"version":3,"names":["GET","cov_trd22sxb5","f","s","POST","request","searchParams","URL","url","token","_auth","extractToken","b","_server","NextResponse","json","error","status","decodedToken","verifyToken","permissions","Array","isArray","canViewByPermission","_permissions","hasPermission","isShopStaff","roleName","toLowerCase","isAdmin","shopIdFromUrl","get","page","Math","max","parseInt","limit","min","skip","whereClause","search","customerId","startDate","endDate","OR","quotationNumber","contains","mode","customer","is","name","createdAt","gte","Date","lte","console","log","JSON","stringify","totalCount","_prisma","default","quotation","count","where","quotations","findMany","include","items","product","orderBy","take","length","ceil","id","shopId","pagination","totalPages","hasNext","hasPrev","payload","sub","user","findUnique","select","canManageSales","canCreateShop","canCreateQuotation","body","floor","random","toString","padStart","quotationData","customerName","date","expiryDate","validUntil","subtotal","discount","notes","$transaction","tx","createdQuotation","create","data","item","itemData","quotationId","productId","quantity","price","parseFloat","unitPrice","total","quotationItem","auditService","_auditService","AuditService","getInstance","userId","Error","logAction","action","entity","entityId","details","itemsCount"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { Prisma } from '@prisma/client';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { AuditService } from '@/services/auditService';\n\ntype QuotationWhereInput = Prisma.QuotationWhereInput;\n\n// GET /api/quotations - Get quotations with pagination\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n\n        // Build context for shop access control\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n        }\n        const decodedToken = await verifyToken(token);\n        if (!decodedToken) {\n            return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n        }\n\n        const permissions = Array.isArray(decodedToken.permissions) ? decodedToken.permissions : [];\n\n        // Check for view permissions before proceeding\n        const canViewByPermission = hasPermission(permissions, 'sales:view') || hasPermission(permissions, 'quotation:view');\n        const isShopStaff = typeof decodedToken.roleName === 'string' && decodedToken.roleName.toLowerCase() === 'shop staff';\n\n        if (!canViewByPermission && !isShopStaff) {\n            return NextResponse.json({ error: 'Insufficient permissions to view quotations' }, { status: 403 });\n        }\n\n        const isAdmin = hasPermission(permissions, 'admin:all');\n        const shopIdFromUrl = searchParams.get('shopId');\n\n        // Pagination parameters\n        const page = Math.max(1, parseInt(searchParams.get('page') || '1', 10));\n        const limit = Math.min(50, Math.max(1, parseInt(searchParams.get('limit') || '15', 10))); // Max 50 items per page\n        const skip = (page - 1) * limit;\n\n        // For quotations, we don't filter by shop since quotations are not shop-specific\n        // Unlike invoices, quotations don't have shops assigned to them\n        const whereClause: any = {};\n\n        // Add other filters\n        const search = searchParams.get('search') || '';\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n\n        if (search) {\n            whereClause.OR = [\n                { quotationNumber: { contains: search, mode: 'insensitive' } },\n                { customer: { is: { name: { contains: search, mode: 'insensitive' } } } },\n            ];\n        }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate),\n            };\n        }\n\n        console.log('[Quotations API] Where clause:', JSON.stringify(whereClause, null, 2));\n\n        // Get total count for pagination\n        const totalCount = await prisma.quotation.count({\n            where: whereClause,\n        });\n\n        // Get paginated quotations\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n            skip,\n            take: limit,\n        });\n\n        console.log(`[Quotations API] Found ${quotations.length} quotations (page ${page} of ${Math.ceil(totalCount / limit)})`);\n        if (quotations.length > 0) {\n            console.log('[Quotations API] First quotation:', {\n                id: quotations[0].id,\n                quotationNumber: quotations[0].quotationNumber,\n                shopId: quotations[0].shopId\n            });\n        }\n\n        return NextResponse.json({\n            quotations,\n            pagination: {\n                page,\n                limit,\n                totalCount,\n                totalPages: Math.ceil(totalCount / limit),\n                hasNext: page < Math.ceil(totalCount / limit),\n                hasPrev: page > 1\n            }\n        });\n    } catch (error) {\n        console.error('Failed to fetch quotations:', error);\n        return NextResponse.json({ error: 'Failed to fetch quotations' }, { status: 500 });\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        const canManageSales = hasPermission(user.permissions, 'sales:manage');\n        const canCreateShop = hasPermission(user.permissions, 'sales:create:shop');\n        const canCreateQuotation = hasPermission(user.permissions, 'quotation:create');\n        \n        if (!canManageSales && !canCreateShop && !canCreateQuotation) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const body = await request.json();\n        \n        // For quotations, we don't need to validate or set shopId\n        // Quotations are not shop-specific unlike invoices\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        // After transaction\n        const auditService = AuditService.getInstance();\n        let userId: string | null = payload.sub || null;\n\n        if (!quotation) {\n            throw new Error('Quotation creation failed');\n        }\n\n        await auditService.logAction({\n            userId,\n            action: 'CREATE',\n            entity: 'Quotation',\n            entityId: quotation.id,\n            details: {\n                quotationNumber: quotation.quotationNumber || '',\n                customerId: quotation.customerId || null,\n                total: quotation.total || 0,\n                itemsCount: quotation.items?.length || 0\n            }\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}