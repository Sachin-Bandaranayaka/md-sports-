{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Fixed Database connection and configuration tests\n\nimport { jest } from '@jest/globals';\n\n// Create comprehensive mocks for database operations\nconst mockSequelize = {\n  authenticate: jest.fn(),\n  close: jest.fn(),\n  sync: jest.fn(),\n  transaction: jest.fn(),\n  query: jest.fn(),\n  queryInterface: {\n    showAllTables: jest.fn(),\n    describeTable: jest.fn(),\n  },\n  getQueryInterface: jest.fn(),\n  isDefined: jest.fn(),\n  model: jest.fn(),\n  models: {},\n  options: {\n    dialect: 'postgres',\n    logging: false,\n  },\n  config: {\n    database: 'test_db',\n    username: 'test_user',\n    password: 'test_pass',\n    host: 'localhost',\n    port: 5432,\n  },\n  connectionManager: {\n    getConnection: jest.fn(),\n    releaseConnection: jest.fn(),\n  },\n};\n\n// Mock Prisma operations\nconst mockPrismaOperations = {\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  upsert: jest.fn(),\n  deleteMany: jest.fn(),\n  updateMany: jest.fn(),\n};\n\nconst mockPrisma = {\n  user: { ...mockPrismaOperations },\n  product: { ...mockPrismaOperations },\n  customer: { ...mockPrismaOperations },\n  invoice: { ...mockPrismaOperations },\n  inventoryItem: { ...mockPrismaOperations },\n  category: { ...mockPrismaOperations },\n  supplier: { ...mockPrismaOperations },\n  purchaseInvoice: { ...mockPrismaOperations },\n  purchaseInvoiceItem: { ...mockPrismaOperations },\n  salesInvoice: { ...mockPrismaOperations },\n  salesInvoiceItem: { ...mockPrismaOperations },\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $transaction: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n  $on: jest.fn(),\n  $use: jest.fn(),\n};\n\n// Mock Sequelize constructor and static methods\nconst MockSequelizeConstructor = jest.fn().mockImplementation(() => mockSequelize);\nMockSequelizeConstructor.authenticate = jest.fn();\nMockSequelizeConstructor.close = jest.fn();\nMockSequelizeConstructor.sync = jest.fn();\n\n// Mock Sequelize module\njest.mock('sequelize', () => ({\n  Sequelize: MockSequelizeConstructor,\n  DataTypes: {\n    STRING: 'STRING',\n    INTEGER: 'INTEGER',\n    BOOLEAN: 'BOOLEAN',\n    DATE: 'DATE',\n    DECIMAL: 'DECIMAL',\n    TEXT: 'TEXT',\n    UUID: 'UUID',\n    ENUM: 'ENUM',\n  },\n}));\n\n// Mock prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\n// Mock the process.env for database configuration\nconst originalEnv = process.env;\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('db export', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrisma);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have product methods', () => {\n      expect(db.product).toBeDefined();\n      expect(db.product.findMany).toBeDefined();\n      expect(db.product.findUnique).toBeDefined();\n      expect(db.product.create).toBeDefined();\n      expect(db.product.update).toBeDefined();\n      expect(db.product.delete).toBeDefined();\n    });\n\n    it('should have connection methods', () => {\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n      expect(db.$transaction).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n      expect(prisma).toBe(db);\n    });\n  });\n\n  describe('default export', () => {\n    it('should export db as default', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrisma);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow user queries', async () => {\n      const mockUser = { id: 1, name: 'Test User', email: 'test@example.com' };\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const result = await db.user.findUnique({ where: { id: 1 } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({ where: { id: 1 } });\n    });\n\n    it('should allow product queries', async () => {\n      const mockProduct = { id: 'product1', name: 'Test Product' };\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct);\n\n      const result = await db.product.findUnique({ where: { id: 'product1' } });\n      \n      expect(result).toEqual(mockProduct);\n      expect(mockPrisma.product.findUnique).toHaveBeenCalledWith({ where: { id: 'product1' } });\n    });\n\n    it('should allow transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n\n    it('should handle connection operations', async () => {\n      mockPrisma.$connect.mockResolvedValue(undefined);\n      mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n      await db.$connect();\n      await db.$disconnect();\n      \n      expect(mockPrisma.$connect).toHaveBeenCalled();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should propagate database errors', async () => {\n      const dbError = new Error('Database connection failed');\n      mockPrisma.user.findUnique.mockRejectedValue(dbError);\n\n      await expect(db.user.findUnique({ where: { id: 1 } })).rejects.toThrow('Database connection failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      const transactionError = new Error('Transaction failed');\n      mockPrisma.$transaction.mockRejectedValue(transactionError);\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["mockSequelize","authenticate","jest","fn","close","sync","transaction","query","queryInterface","showAllTables","describeTable","getQueryInterface","isDefined","model","models","options","dialect","logging","config","database","username","password","host","port","connectionManager","getConnection","releaseConnection","mockPrismaOperations","findMany","findUnique","findFirst","create","update","delete","count","aggregate","upsert","deleteMany","updateMany","mockPrisma","user","product","customer","invoice","inventoryItem","category","supplier","purchaseInvoice","purchaseInvoiceItem","salesInvoice","salesInvoiceItem","$connect","$disconnect","$transaction","$executeRaw","$queryRaw","$on","$use","MockSequelizeConstructor","mockImplementation","mock","Sequelize","DataTypes","STRING","INTEGER","BOOLEAN","DATE","DECIMAL","TEXT","UUID","ENUM","__esModule","default","originalEnv","process","env","beforeAll","DATABASE_URL","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","it","expect","db","toBeDefined","toBe","prisma","defaultExport","mockUser","id","name","email","mockResolvedValue","result","where","toEqual","toHaveBeenCalledWith","mockProduct","mockResult","success","transactionFn","undefined","toHaveBeenCalled","dbError","Error","mockRejectedValue","rejects","toThrow","transactionError"],"mappings":"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"}