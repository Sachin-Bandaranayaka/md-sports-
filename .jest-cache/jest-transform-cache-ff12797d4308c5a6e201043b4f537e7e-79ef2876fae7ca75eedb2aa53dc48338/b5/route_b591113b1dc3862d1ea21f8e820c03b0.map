{"version":3,"names":["GET","cov_2e7fw92rdr","f","s","POST","req","permissionError","_middleware","requirePermission","b","url","URL","categoryId","searchParams","get","searchTerm","where","parseInt","searchWords","toLowerCase","trim","split","length","OR","name","contains","mode","sku","category","AND","map","word","products","_prisma","default","product","findMany","include","select","id","orderBy","_server","NextResponse","json","success","error","console","message","status","body","barcode","description","price","weightedAverageCost","existingProduct","findFirst","create","data"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: List all products\nexport async function GET(req: NextRequest) {\n    // First check for 'inventory:view' permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const url = new URL(req.url);\n        const categoryId = url.searchParams.get('categoryId');\n        const searchTerm = url.searchParams.get('search');\n\n        // Build query conditions for Prisma\n        const where: any = {};\n\n        if (categoryId) {\n            where.categoryId = parseInt(categoryId);\n        }\n\n        if (searchTerm) {\n            const searchWords = searchTerm.toLowerCase().trim().split(/\\s+/);\n            \n            if (searchWords.length === 1) {\n                // Single word search - search across name, SKU, and category\n                where.OR = [\n                    { name: { contains: searchWords[0], mode: 'insensitive' } },\n                    { sku: { contains: searchWords[0], mode: 'insensitive' } },\n                    { category: { name: { contains: searchWords[0], mode: 'insensitive' } } }\n                ];\n            } else {\n                // Multi-word search - each word must appear somewhere in the searchable fields\n                where.AND = searchWords.map(word => ({\n                    OR: [\n                        { name: { contains: word, mode: 'insensitive' } },\n                        { sku: { contains: word, mode: 'insensitive' } },\n                        { category: { name: { contains: word, mode: 'insensitive' } } }\n                    ]\n                }));\n            }\n        }\n\n        const products = await prisma.product.findMany({\n            where,\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            products\n        });\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch products' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new product\nexport async function POST(req: NextRequest) {\n    // Check for 'inventory:manage' permission\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price, // retailPrice in request\n            weightedAverageCost, // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Validate required fields\n        if (!name || !sku || !weightedAverageCost || !price || !categoryId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Required fields are missing.'\n            }, { status: 400 });\n        }\n\n        // Check if SKU or barcode already exists\n        const existingProduct = await prisma.product.findFirst({\n            where: {\n                OR: [\n                    { sku },\n                    { barcode }\n                ]\n            }\n        });\n\n        if (existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'SKU or barcode already exists' },\n                { status: 409 }\n            );\n        }\n\n        // Create product\n        const product = await prisma.product.create({\n            data: {\n                name,\n                sku,\n                barcode: barcode || null,\n                description: description || null,\n                price,\n                weightedAverageCost,\n                categoryId\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating product:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create product' },\n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}