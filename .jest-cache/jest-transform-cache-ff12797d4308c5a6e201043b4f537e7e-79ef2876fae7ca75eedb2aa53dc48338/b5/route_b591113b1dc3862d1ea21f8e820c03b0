52da274a9c9679c1af08706d5f01ce0e
"use strict";

/* istanbul ignore next */
function cov_2e7fw92rdr() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts";
  var hash = "123e69e7e0817134809bb7dd65411e0b5820cf7b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 89
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 91
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 36
        }
      },
      "15": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "16": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 57
        }
      },
      "17": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 52
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "21": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "22": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 67,
          column: 18
        }
      },
      "24": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "25": {
        start: {
          line: 70,
          column: 53
        },
        end: {
          line: 93,
          column: 21
        }
      },
      "26": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "27": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "28": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "29": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "30": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 126,
          column: 93
        }
      },
      "31": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "32": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 31
        }
      },
      "33": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 189,
          column: 5
        }
      },
      "34": {
        start: {
          line: 131,
          column: 21
        },
        end: {
          line: 131,
          column: 37
        }
      },
      "35": {
        start: {
          line: 132,
          column: 92
        },
        end: {
          line: 132,
          column: 96
        }
      },
      "36": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "37": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "38": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 154,
          column: 10
        }
      },
      "39": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "40": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "41": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 174,
          column: 10
        }
      },
      "42": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "43": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 56
        }
      },
      "44": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 44
          },
          end: {
            line: 70,
            column: 45
          }
        },
        loc: {
          start: {
            line: 70,
            column: 53
          },
          end: {
            line: 93,
            column: 21
          }
        },
        line: 70
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 124,
            column: 15
          },
          end: {
            line: 124,
            column: 19
          }
        },
        loc: {
          start: {
            line: 124,
            column: 25
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 124
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 94,
            column: 13
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "7": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 17
          }
        }, {
          start: {
            line: 134,
            column: 21
          },
          end: {
            line: 134,
            column: 25
          }
        }, {
          start: {
            line: 134,
            column: 29
          },
          end: {
            line: 134,
            column: 49
          }
        }, {
          start: {
            line: 134,
            column: 53
          },
          end: {
            line: 134,
            column: 59
          }
        }, {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 134,
            column: 74
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "10": {
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 32
          }
        }, {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 40
          }
        }],
        line: 168
      },
      "11": {
        loc: {
          start: {
            line: 169,
            column: 29
          },
          end: {
            line: 169,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 29
          },
          end: {
            line: 169,
            column: 40
          }
        }, {
          start: {
            line: 169,
            column: 44
          },
          end: {
            line: 169,
            column: 48
          }
        }],
        line: 169
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/products/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: List all products\nexport async function GET(req: NextRequest) {\n    // First check for 'inventory:view' permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const url = new URL(req.url);\n        const categoryId = url.searchParams.get('categoryId');\n        const searchTerm = url.searchParams.get('search');\n\n        // Build query conditions for Prisma\n        const where: any = {};\n\n        if (categoryId) {\n            where.categoryId = parseInt(categoryId);\n        }\n\n        if (searchTerm) {\n            const searchWords = searchTerm.toLowerCase().trim().split(/\\s+/);\n            \n            if (searchWords.length === 1) {\n                // Single word search - search across name, SKU, and category\n                where.OR = [\n                    { name: { contains: searchWords[0], mode: 'insensitive' } },\n                    { sku: { contains: searchWords[0], mode: 'insensitive' } },\n                    { category: { name: { contains: searchWords[0], mode: 'insensitive' } } }\n                ];\n            } else {\n                // Multi-word search - each word must appear somewhere in the searchable fields\n                where.AND = searchWords.map(word => ({\n                    OR: [\n                        { name: { contains: word, mode: 'insensitive' } },\n                        { sku: { contains: word, mode: 'insensitive' } },\n                        { category: { name: { contains: word, mode: 'insensitive' } } }\n                    ]\n                }));\n            }\n        }\n\n        const products = await prisma.product.findMany({\n            where,\n            include: {\n                category: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            products\n        });\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch products' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new product\nexport async function POST(req: NextRequest) {\n    // Check for 'inventory:manage' permission\n    const permissionError = await requirePermission('inventory:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const body = await req.json();\n        const {\n            name,\n            sku,\n            barcode,\n            description,\n            price, // retailPrice in request\n            weightedAverageCost, // renamed from basePrice in Prisma\n            categoryId\n        } = body;\n\n        // Validate required fields\n        if (!name || !sku || !weightedAverageCost || !price || !categoryId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Required fields are missing.'\n            }, { status: 400 });\n        }\n\n        // Check if SKU or barcode already exists\n        const existingProduct = await prisma.product.findFirst({\n            where: {\n                OR: [\n                    { sku },\n                    { barcode }\n                ]\n            }\n        });\n\n        if (existingProduct) {\n            return NextResponse.json(\n                { success: false, message: 'SKU or barcode already exists' },\n                { status: 409 }\n            );\n        }\n\n        // Create product\n        const product = await prisma.product.create({\n            data: {\n                name,\n                sku,\n                barcode: barcode || null,\n                description: description || null,\n                price,\n                weightedAverageCost,\n                categoryId\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            product\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating product:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create product' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "POST", "req", "permissionError", "requirePermission", "url", "URL", "categoryId", "searchParams", "get", "searchTerm", "where", "parseInt", "searchWords", "toLowerCase", "trim", "split", "length", "OR", "name", "contains", "mode", "sku", "category", "AND", "map", "word", "products", "prisma", "product", "findMany", "include", "select", "id", "orderBy", "NextResponse", "json", "success", "error", "console", "message", "status", "body", "barcode", "description", "price", "weightedAverageCost", "existingProduct", "findFirst", "create", "data"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "123e69e7e0817134809bb7dd65411e0b5820cf7b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2e7fw92rdr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2e7fw92rdr();
cov_2e7fw92rdr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[0]++;
  cov_2e7fw92rdr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2e7fw92rdr().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2e7fw92rdr().f[1]++;
    cov_2e7fw92rdr().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2e7fw92rdr().f[2]++;
    cov_2e7fw92rdr().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2e7fw92rdr().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2e7fw92rdr().s[7]++, _interop_require_default(require("../../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_2e7fw92rdr().s[8]++, require("../../../../lib/utils/middleware"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[3]++;
  cov_2e7fw92rdr().s[9]++;
  return /* istanbul ignore next */(cov_2e7fw92rdr().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2e7fw92rdr().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[4]++;
  // First check for 'inventory:view' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2e7fw92rdr().s[10]++, await (0, _middleware.requirePermission)("inventory:view")(req));
  /* istanbul ignore next */
  cov_2e7fw92rdr().s[11]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().b[2][0]++;
    cov_2e7fw92rdr().s[12]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2e7fw92rdr().b[2][1]++;
  }
  cov_2e7fw92rdr().s[13]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[14]++, new URL(req.url));
    const categoryId =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[15]++, url.searchParams.get("categoryId"));
    const searchTerm =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[16]++, url.searchParams.get("search"));
    // Build query conditions for Prisma
    const where =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[17]++, {});
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[18]++;
    if (categoryId) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[3][0]++;
      cov_2e7fw92rdr().s[19]++;
      where.categoryId = parseInt(categoryId);
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[3][1]++;
    }
    cov_2e7fw92rdr().s[20]++;
    if (searchTerm) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[4][0]++;
      const searchWords =
      /* istanbul ignore next */
      (cov_2e7fw92rdr().s[21]++, searchTerm.toLowerCase().trim().split(/\s+/));
      /* istanbul ignore next */
      cov_2e7fw92rdr().s[22]++;
      if (searchWords.length === 1) {
        /* istanbul ignore next */
        cov_2e7fw92rdr().b[5][0]++;
        cov_2e7fw92rdr().s[23]++;
        // Single word search - search across name, SKU, and category
        where.OR = [{
          name: {
            contains: searchWords[0],
            mode: "insensitive"
          }
        }, {
          sku: {
            contains: searchWords[0],
            mode: "insensitive"
          }
        }, {
          category: {
            name: {
              contains: searchWords[0],
              mode: "insensitive"
            }
          }
        }];
      } else {
        /* istanbul ignore next */
        cov_2e7fw92rdr().b[5][1]++;
        cov_2e7fw92rdr().s[24]++;
        // Multi-word search - each word must appear somewhere in the searchable fields
        where.AND = searchWords.map(word => {
          /* istanbul ignore next */
          cov_2e7fw92rdr().f[5]++;
          cov_2e7fw92rdr().s[25]++;
          return {
            OR: [{
              name: {
                contains: word,
                mode: "insensitive"
              }
            }, {
              sku: {
                contains: word,
                mode: "insensitive"
              }
            }, {
              category: {
                name: {
                  contains: word,
                  mode: "insensitive"
                }
              }
            }]
          };
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[4][1]++;
    }
    const products =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[26]++, await _prisma.default.product.findMany({
      where,
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: {
        name: "asc"
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[27]++;
    return _server.NextResponse.json({
      success: true,
      products
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[28]++;
    console.error("Error fetching products:", error);
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[29]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch products"
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_2e7fw92rdr().f[6]++;
  // Check for 'inventory:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2e7fw92rdr().s[30]++, await (0, _middleware.requirePermission)("inventory:manage")(req));
  /* istanbul ignore next */
  cov_2e7fw92rdr().s[31]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().b[6][0]++;
    cov_2e7fw92rdr().s[32]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2e7fw92rdr().b[6][1]++;
  }
  cov_2e7fw92rdr().s[33]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[34]++, await req.json());
    const {
      name,
      sku,
      barcode,
      description,
      price,
      weightedAverageCost,
      categoryId
    } =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[35]++, body);
    // Validate required fields
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[8][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[8][1]++, !sku) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[8][2]++, !weightedAverageCost) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[8][3]++, !price) ||
    /* istanbul ignore next */
    (cov_2e7fw92rdr().b[8][4]++, !categoryId)) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[7][0]++;
      cov_2e7fw92rdr().s[37]++;
      return _server.NextResponse.json({
        success: false,
        message: "Required fields are missing."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[7][1]++;
    }
    // Check if SKU or barcode already exists
    const existingProduct =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[38]++, await _prisma.default.product.findFirst({
      where: {
        OR: [{
          sku
        }, {
          barcode
        }]
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[39]++;
    if (existingProduct) {
      /* istanbul ignore next */
      cov_2e7fw92rdr().b[9][0]++;
      cov_2e7fw92rdr().s[40]++;
      return _server.NextResponse.json({
        success: false,
        message: "SKU or barcode already exists"
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e7fw92rdr().b[9][1]++;
    }
    // Create product
    const product =
    /* istanbul ignore next */
    (cov_2e7fw92rdr().s[41]++, await _prisma.default.product.create({
      data: {
        name,
        sku,
        barcode:
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[10][0]++, barcode) ||
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[10][1]++, null),
        description:
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[11][0]++, description) ||
        /* istanbul ignore next */
        (cov_2e7fw92rdr().b[11][1]++, null),
        price,
        weightedAverageCost,
        categoryId
      }
    }));
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[42]++;
    return _server.NextResponse.json({
      success: true,
      product
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[43]++;
    console.error("Error creating product:", error);
    /* istanbul ignore next */
    cov_2e7fw92rdr().s[44]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create product"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,