8cc1673e3f69723db2c5a35a3ce3bebf
"use strict";

/* istanbul ignore next */
function cov_cprhe2as4() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts";
  var hash = "53b5318577ff1bb79832acc5df649647ac9835a1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "9": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 81
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "11": {
        start: {
          line: 30,
          column: 39
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "12": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "13": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 20
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "16": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "18": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "20": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "21": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 30
        }
      },
      "23": {
        start: {
          line: 50,
          column: 17
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "24": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 88
        }
      },
      "25": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "27": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 95
        }
      },
      "28": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "29": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "30": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "31": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "32": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "33": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "34": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 18
        }
      },
      "35": {
        start: {
          line: 71,
          column: 38
        },
        end: {
          line: 71,
          column: 40
        }
      },
      "36": {
        start: {
          line: 73,
          column: 28
        },
        end: {
          line: 84,
          column: 1
        }
      },
      "37": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "38": {
        start: {
          line: 76,
          column: 22
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "39": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 38
        }
      },
      "40": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 90
        }
      },
      "41": {
        start: {
          line: 78,
          column: 45
        },
        end: {
          line: 78,
          column: 79
        }
      },
      "42": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 83,
          column: 65
        }
      },
      "43": {
        start: {
          line: 83,
          column: 11
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "44": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 143,
          column: 1
        }
      },
      "45": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 142,
          column: 5
        }
      },
      "46": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "47": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 79
        }
      },
      "48": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "49": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 69
        }
      },
      "50": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 93
        }
      },
      "51": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 108,
          column: 66
        }
      },
      "52": {
        start: {
          line: 97,
          column: 41
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "53": {
        start: {
          line: 110,
          column: 22
        },
        end: {
          line: 110,
          column: 45
        }
      },
      "54": {
        start: {
          line: 112,
          column: 26
        },
        end: {
          line: 112,
          column: 36
        }
      },
      "55": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 79
        }
      },
      "56": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "57": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 128,
          column: 55
        }
      },
      "58": {
        start: {
          line: 121,
          column: 62
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "59": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "60": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 74
        }
      },
      "61": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 84
        }
      },
      "62": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 21
        }
      },
      "63": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 64
        }
      },
      "64": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "65": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 59
        }
      },
      "66": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 55
        }
      },
      "67": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 60
        }
      },
      "68": {
        start: {
          line: 144,
          column: 27
        },
        end: {
          line: 181,
          column: 1
        }
      },
      "69": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "70": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "71": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 79
        }
      },
      "72": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 24
        }
      },
      "73": {
        start: {
          line: 152,
          column: 29
        },
        end: {
          line: 156,
          column: 53
        }
      },
      "74": {
        start: {
          line: 152,
          column: 62
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "75": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "76": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 87
        }
      },
      "77": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 24
        }
      },
      "78": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "79": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 74
        }
      },
      "80": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 173,
          column: 68
        }
      },
      "81": {
        start: {
          line: 166,
          column: 45
        },
        end: {
          line: 173,
          column: 18
        }
      },
      "82": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "83": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 35
        }
      },
      "84": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "85": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 20
        }
      },
      "86": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 202,
          column: 1
        }
      },
      "87": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "88": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "89": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 79
        }
      },
      "90": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 25
        }
      },
      "91": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 196,
          column: 56
        }
      },
      "92": {
        start: {
          line: 189,
          column: 41
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "93": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 20
        }
      },
      "94": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "95": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 21
        }
      },
      "96": {
        start: {
          line: 203,
          column: 35
        },
        end: {
          line: 223,
          column: 1
        }
      },
      "97": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "98": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "99": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 79
        }
      },
      "100": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 25
        }
      },
      "101": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 217,
          column: 66
        }
      },
      "102": {
        start: {
          line: 210,
          column: 41
        },
        end: {
          line: 217,
          column: 14
        }
      },
      "103": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 20
        }
      },
      "104": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 68
        }
      },
      "105": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "106": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 249,
          column: 1
        }
      },
      "107": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "108": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "109": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 79
        }
      },
      "110": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 19
        }
      },
      "111": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 30
        }
      },
      "112": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 245,
          column: 66
        }
      },
      "113": {
        start: {
          line: 232,
          column: 41
        },
        end: {
          line: 245,
          column: 14
        }
      },
      "114": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 27
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 25
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 47
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 40
          }
        },
        loc: {
          start: {
            line: 33,
            column: 61
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 34
          }
        },
        loc: {
          start: {
            line: 37,
            column: 53
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 37
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 29
          }
        },
        loc: {
          start: {
            line: 73,
            column: 43
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 73
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 78,
            column: 38
          }
        },
        loc: {
          start: {
            line: 78,
            column: 45
          },
          end: {
            line: 78,
            column: 79
          }
        },
        line: 78
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 7
          },
          end: {
            line: 83,
            column: 8
          }
        },
        loc: {
          start: {
            line: 83,
            column: 11
          },
          end: {
            line: 83,
            column: 54
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 29
          },
          end: {
            line: 85,
            column: 30
          }
        },
        loc: {
          start: {
            line: 85,
            column: 45
          },
          end: {
            line: 143,
            column: 1
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 97,
            column: 37
          },
          end: {
            line: 97,
            column: 38
          }
        },
        loc: {
          start: {
            line: 97,
            column: 41
          },
          end: {
            line: 108,
            column: 14
          }
        },
        line: 97
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 121,
            column: 58
          },
          end: {
            line: 121,
            column: 59
          }
        },
        loc: {
          start: {
            line: 121,
            column: 62
          },
          end: {
            line: 128,
            column: 14
          }
        },
        line: 121
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 144,
            column: 27
          },
          end: {
            line: 144,
            column: 28
          }
        },
        loc: {
          start: {
            line: 144,
            column: 42
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 144
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 152,
            column: 58
          },
          end: {
            line: 152,
            column: 59
          }
        },
        loc: {
          start: {
            line: 152,
            column: 62
          },
          end: {
            line: 156,
            column: 14
          }
        },
        line: 152
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 166,
            column: 41
          },
          end: {
            line: 166,
            column: 42
          }
        },
        loc: {
          start: {
            line: 166,
            column: 45
          },
          end: {
            line: 173,
            column: 18
          }
        },
        line: 166
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 182,
            column: 28
          }
        },
        loc: {
          start: {
            line: 182,
            column: 42
          },
          end: {
            line: 202,
            column: 1
          }
        },
        line: 182
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 189,
            column: 37
          },
          end: {
            line: 189,
            column: 38
          }
        },
        loc: {
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 196,
            column: 14
          }
        },
        line: 189
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 203,
            column: 35
          },
          end: {
            line: 203,
            column: 36
          }
        },
        loc: {
          start: {
            line: 203,
            column: 51
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 203
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 210,
            column: 37
          },
          end: {
            line: 210,
            column: 38
          }
        },
        loc: {
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 217,
            column: 14
          }
        },
        line: 210
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 30
          }
        },
        loc: {
          start: {
            line: 224,
            column: 39
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 224
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 232,
            column: 37
          },
          end: {
            line: 232,
            column: 38
          }
        },
        loc: {
          start: {
            line: 232,
            column: 41
          },
          end: {
            line: 245,
            column: 14
          }
        },
        line: 232
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 45
          }
        }, {
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 34,
            column: 65
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 20
          }
        }, {
          start: {
            line: 38,
            column: 24
          },
          end: {
            line: 38,
            column: 27
          }
        }, {
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 38,
            column: 45
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 20
          }
        }, {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 76
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 47,
            column: 31
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 53
          }
        }, {
          start: {
            line: 53,
            column: 57
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 29
          }
        }, {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 79
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 56,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 47
          },
          end: {
            line: 56,
            column: 88
          }
        }, {
          start: {
            line: 56,
            column: 91
          },
          end: {
            line: 56,
            column: 95
          }
        }],
        line: 56
      },
      "12": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 61,
            column: 13
          }
        }],
        line: 57
      },
      "13": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 20
          }
        }, {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 33
          }
        }, {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 45
          }
        }],
        line: 57
      },
      "14": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "15": {
        loc: {
          start: {
            line: 73,
            column: 29
          },
          end: {
            line: 73,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 38
          },
          end: {
            line: 73,
            column: 40
          }
        }],
        line: 73
      },
      "16": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "17": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "18": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 28
          }
        }, {
          start: {
            line: 88,
            column: 32
          },
          end: {
            line: 88,
            column: 61
          }
        }],
        line: 88
      },
      "19": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "22": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 28
          }
        }, {
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 61
          }
        }],
        line: 147
      },
      "23": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "24": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 158,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 158,
            column: 25
          }
        }, {
          start: {
            line: 158,
            column: 29
          },
          end: {
            line: 158,
            column: 51
          }
        }],
        line: 158
      },
      "25": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "26": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "27": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 28
          }
        }, {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 61
          }
        }],
        line: 185
      },
      "28": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "29": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 28
          }
        }, {
          start: {
            line: 206,
            column: 32
          },
          end: {
            line: 206,
            column: 61
          }
        }],
        line: 206
      },
      "30": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "31": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 28
          }
        }, {
          start: {
            line: 227,
            column: 32
          },
          end: {
            line: 227,
            column: 61
          }
        }],
        line: 227
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts"],
      sourcesContent: ["import prisma, { safeQuery } from '@/lib/prisma';\n\n// Configuration\nconst REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;\n\n// Generate a secure random token using Web Crypto API\nconst generateSecureToken = (length = 40): string => {\n    // Use Web Crypto API which is supported in Edge Runtime\n    if (typeof crypto !== 'undefined') {\n        const bytes = new Uint8Array(length);\n        crypto.getRandomValues(bytes);\n        return Array.from(bytes)\n            .map(byte => byte.toString(16).padStart(2, '0'))\n            .join('');\n    }\n\n    // Fallback (less secure but works everywhere)\n    return Array.from(\n        { length },\n        () => Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n};\n\n/**\n * Generate a new refresh token for a user\n */\nexport const generateRefreshToken = async (userId: string): Promise<string> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            throw new Error('Database client not initialized correctly');\n        }\n\n        // Log for debugging\n        console.log('Generating refresh token for user ID:', userId);\n\n        // IMPORTANT: Revoke all existing non-expired refresh tokens for this user\n        // This ensures only one active session per user at a time\n        console.log('Revoking all existing refresh tokens for user before creating new one');\n        await safeQuery(\n            () => prisma.refreshToken.updateMany({\n                where: {\n                    userId,\n                    isRevoked: false,\n                    expiresAt: { gt: new Date() }\n                },\n                data: { isRevoked: true },\n            }),\n            null,\n            'Failed to revoke existing refresh tokens'\n        );\n\n        // Generate a random token\n        const token = generateSecureToken(40);\n\n        // Calculate expiration date (30 days from now)\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);\n\n        // Log the token details before creating\n        console.log('Preparing to create refresh token with:', {\n            userId,\n            token: token.substring(0, 10) + '...',\n            expiresAt,\n        });\n\n        // Store the token in the database with retry logic\n        const createdToken = await safeQuery(\n            () => prisma.refreshToken.create({\n                data: {\n                    userId,\n                    token,\n                    expiresAt,\n                    updatedAt: new Date(),\n                },\n            }),\n            null,\n            'Failed to create refresh token'\n        );\n\n        if (!createdToken) {\n            throw new Error('Failed to create refresh token in database');\n        }\n\n        console.log('Successfully created refresh token with ID:', createdToken.id);\n\n        return token;\n    } catch (error) {\n        // More detailed error logging\n        console.error('Error generating refresh token:', error);\n        if (error instanceof Error) {\n            console.error('Error message:', error.message);\n            console.error('Error stack:', error.stack);\n        }\n        throw new Error('Failed to generate refresh token');\n    }\n};\n\n/**\n * Verify a refresh token and return the associated user ID if valid\n */\nexport const verifyRefreshToken = async (token: string): Promise<string | null> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return null;\n        }\n\n        // Find the token in the database with retry logic\n        const refreshToken = await safeQuery(\n            () => prisma.refreshToken.findUnique({\n                where: { token },\n            }),\n            null,\n            'Failed to find refresh token'\n        );\n\n        // Check if token exists and is not revoked\n        if (!refreshToken || refreshToken.isRevoked) {\n            console.log('Token not found or revoked:', token.substring(0, 10) + '...');\n            return null;\n        }\n\n        // Check if token is expired\n        if (new Date() > refreshToken.expiresAt) {\n            console.log('Token expired:', token.substring(0, 10) + '...');\n\n            // Revoke expired token with retry logic\n            await safeQuery(\n                () => prisma.refreshToken.update({\n                    where: { id: refreshToken.id },\n                    data: { isRevoked: true },\n                }),\n                null,\n                'Failed to revoke expired refresh token'\n            );\n\n            return null;\n        }\n\n        return refreshToken.userId;\n    } catch (error) {\n        console.error('Error verifying refresh token:', error);\n        return null;\n    }\n};\n\n/**\n * Revoke a specific refresh token\n */\nexport const revokeRefreshToken = async (token: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await safeQuery(\n            () => prisma.refreshToken.updateMany({\n                where: { token },\n                data: { isRevoked: true },\n            }),\n            null,\n            'Failed to revoke refresh token'\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking refresh token:', error);\n        return false;\n    }\n};\n\n/**\n * Revoke all refresh tokens for a specific user\n */\nexport const revokeAllUserRefreshTokens = async (userId: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await safeQuery(\n            () => prisma.refreshToken.updateMany({\n                where: { userId },\n                data: { isRevoked: true },\n            }),\n            null,\n            'Failed to revoke all user refresh tokens'\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking user refresh tokens:', error);\n        return false;\n    }\n};\n\n/**\n * Clean up expired and revoked tokens\n * Note: This should be run periodically via a cron job\n */\nexport const cleanupRefreshTokens = async (): Promise<void> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return;\n        }\n\n        const now = new Date();\n\n        await safeQuery(\n            () => prisma.refreshToken.deleteMany({\n                where: {\n                    OR: [\n                        { expiresAt: { lt: now } },\n                        { isRevoked: true },\n                    ],\n                },\n            }),\n            null,\n            'Failed to cleanup expired refresh tokens'\n        );\n    } catch (error) {\n        console.error('Error cleaning up refresh tokens:', error);\n    }\n};"],
      names: ["cleanupRefreshTokens", "generateRefreshToken", "revokeAllUserRefreshTokens", "revokeRefreshToken", "verifyRefreshToken", "REFRESH_TOKEN_EXPIRES_IN_DAYS", "generateSecureToken", "length", "crypto", "bytes", "Uint8Array", "getRandomValues", "Array", "from", "map", "byte", "toString", "padStart", "join", "Math", "floor", "random", "userId", "prisma", "refreshToken", "console", "error", "Error", "log", "safeQuery", "updateMany", "where", "isRevoked", "expiresAt", "gt", "Date", "data", "token", "setDate", "getDate", "substring", "createdToken", "create", "updatedAt", "id", "message", "stack", "findUnique", "update", "now", "deleteMany", "OR", "lt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53b5318577ff1bb79832acc5df649647ac9835a1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cprhe2as4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cprhe2as4();
cov_cprhe2as4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[0]++;
  cov_cprhe2as4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_cprhe2as4().s[3]++;
_export(exports, {
  cleanupRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[1]++;
    cov_cprhe2as4().s[4]++;
    return cleanupRefreshTokens;
  },
  generateRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[2]++;
    cov_cprhe2as4().s[5]++;
    return generateRefreshToken;
  },
  revokeAllUserRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[3]++;
    cov_cprhe2as4().s[6]++;
    return revokeAllUserRefreshTokens;
  },
  revokeRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[4]++;
    cov_cprhe2as4().s[7]++;
    return revokeRefreshToken;
  },
  verifyRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[5]++;
    cov_cprhe2as4().s[8]++;
    return verifyRefreshToken;
  }
});
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_cprhe2as4().s[9]++, _interop_require_wildcard(require("../lib/prisma")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[6]++;
  cov_cprhe2as4().s[10]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_cprhe2as4().b[0][0]++;
    cov_cprhe2as4().s[11]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[12]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[13]++, new WeakMap());
  /* istanbul ignore next */
  cov_cprhe2as4().s[14]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_cprhe2as4().f[7]++;
    cov_cprhe2as4().s[15]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_cprhe2as4().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_cprhe2as4().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[8]++;
  cov_cprhe2as4().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_cprhe2as4().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_cprhe2as4().b[2][0]++;
    cov_cprhe2as4().s[17]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[2][1]++;
  }
  cov_cprhe2as4().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_cprhe2as4().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_cprhe2as4().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_cprhe2as4().b[4][0]++;
    cov_cprhe2as4().s[19]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[20]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_cprhe2as4().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_cprhe2as4().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_cprhe2as4().b[6][0]++;
    cov_cprhe2as4().s[22]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[23]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[24]++,
  /* istanbul ignore next */
  (cov_cprhe2as4().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_cprhe2as4().s[25]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_cprhe2as4().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_cprhe2as4().s[27]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_cprhe2as4().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_cprhe2as4().b[11][1]++, null));
      /* istanbul ignore next */
      cov_cprhe2as4().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_cprhe2as4().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_cprhe2as4().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_cprhe2as4().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_cprhe2as4().b[12][0]++;
        cov_cprhe2as4().s[29]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_cprhe2as4().b[12][1]++;
        cov_cprhe2as4().s[30]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_cprhe2as4().s[31]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_cprhe2as4().s[32]++;
  if (cache) {
    /* istanbul ignore next */
    cov_cprhe2as4().b[14][0]++;
    cov_cprhe2as4().s[33]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[14][1]++;
  }
  cov_cprhe2as4().s[34]++;
  return newObj;
}
// Configuration
const REFRESH_TOKEN_EXPIRES_IN_DAYS =
/* istanbul ignore next */
(cov_cprhe2as4().s[35]++, 30);
// Generate a secure random token using Web Crypto API
/* istanbul ignore next */
cov_cprhe2as4().s[36]++;
const generateSecureToken = (length =
/* istanbul ignore next */
(cov_cprhe2as4().b[15][0]++, 40)) => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[9]++;
  cov_cprhe2as4().s[37]++;
  // Use Web Crypto API which is supported in Edge Runtime
  if (typeof crypto !== "undefined") {
    /* istanbul ignore next */
    cov_cprhe2as4().b[16][0]++;
    const bytes =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[38]++, new Uint8Array(length));
    /* istanbul ignore next */
    cov_cprhe2as4().s[39]++;
    crypto.getRandomValues(bytes);
    /* istanbul ignore next */
    cov_cprhe2as4().s[40]++;
    return Array.from(bytes).map(byte => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[10]++;
      cov_cprhe2as4().s[41]++;
      return byte.toString(16).padStart(2, "0");
    }).join("");
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[16][1]++;
  }
  // Fallback (less secure but works everywhere)
  cov_cprhe2as4().s[42]++;
  return Array.from({
    length
  }, () => {
    /* istanbul ignore next */
    cov_cprhe2as4().f[11]++;
    cov_cprhe2as4().s[43]++;
    return Math.floor(Math.random() * 16).toString(16);
  }).join("");
};
/* istanbul ignore next */
cov_cprhe2as4().s[44]++;
const generateRefreshToken = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[12]++;
  cov_cprhe2as4().s[45]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[46]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[18][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[18][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[17][0]++;
      cov_cprhe2as4().s[47]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[48]++;
      throw new Error("Database client not initialized correctly");
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[17][1]++;
    }
    // Log for debugging
    cov_cprhe2as4().s[49]++;
    console.log("Generating refresh token for user ID:", userId);
    // IMPORTANT: Revoke all existing non-expired refresh tokens for this user
    // This ensures only one active session per user at a time
    /* istanbul ignore next */
    cov_cprhe2as4().s[50]++;
    console.log("Revoking all existing refresh tokens for user before creating new one");
    /* istanbul ignore next */
    cov_cprhe2as4().s[51]++;
    await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[13]++;
      cov_cprhe2as4().s[52]++;
      return _prisma.default.refreshToken.updateMany({
        where: {
          userId,
          isRevoked: false,
          expiresAt: {
            gt: new Date()
          }
        },
        data: {
          isRevoked: true
        }
      });
    }, null, "Failed to revoke existing refresh tokens");
    // Generate a random token
    const token =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[53]++, generateSecureToken(40));
    // Calculate expiration date (30 days from now)
    const expiresAt =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[54]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[55]++;
    expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);
    // Log the token details before creating
    /* istanbul ignore next */
    cov_cprhe2as4().s[56]++;
    console.log("Preparing to create refresh token with:", {
      userId,
      token: token.substring(0, 10) + "...",
      expiresAt
    });
    // Store the token in the database with retry logic
    const createdToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[57]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[14]++;
      cov_cprhe2as4().s[58]++;
      return _prisma.default.refreshToken.create({
        data: {
          userId,
          token,
          expiresAt,
          updatedAt: new Date()
        }
      });
    }, null, "Failed to create refresh token"));
    /* istanbul ignore next */
    cov_cprhe2as4().s[59]++;
    if (!createdToken) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[19][0]++;
      cov_cprhe2as4().s[60]++;
      throw new Error("Failed to create refresh token in database");
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[19][1]++;
    }
    cov_cprhe2as4().s[61]++;
    console.log("Successfully created refresh token with ID:", createdToken.id);
    /* istanbul ignore next */
    cov_cprhe2as4().s[62]++;
    return token;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[63]++;
    // More detailed error logging
    console.error("Error generating refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[64]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[20][0]++;
      cov_cprhe2as4().s[65]++;
      console.error("Error message:", error.message);
      /* istanbul ignore next */
      cov_cprhe2as4().s[66]++;
      console.error("Error stack:", error.stack);
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[20][1]++;
    }
    cov_cprhe2as4().s[67]++;
    throw new Error("Failed to generate refresh token");
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[68]++;
const verifyRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[15]++;
  cov_cprhe2as4().s[69]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[70]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[22][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[22][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[21][0]++;
      cov_cprhe2as4().s[71]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[72]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[21][1]++;
    }
    // Find the token in the database with retry logic
    const refreshToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[73]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[16]++;
      cov_cprhe2as4().s[74]++;
      return _prisma.default.refreshToken.findUnique({
        where: {
          token
        }
      });
    }, null, "Failed to find refresh token"));
    // Check if token exists and is not revoked
    /* istanbul ignore next */
    cov_cprhe2as4().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[24][0]++, !refreshToken) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[24][1]++, refreshToken.isRevoked)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[23][0]++;
      cov_cprhe2as4().s[76]++;
      console.log("Token not found or revoked:", token.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_cprhe2as4().s[77]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[23][1]++;
    }
    // Check if token is expired
    cov_cprhe2as4().s[78]++;
    if (new Date() > refreshToken.expiresAt) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[25][0]++;
      cov_cprhe2as4().s[79]++;
      console.log("Token expired:", token.substring(0, 10) + "...");
      // Revoke expired token with retry logic
      /* istanbul ignore next */
      cov_cprhe2as4().s[80]++;
      await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_cprhe2as4().f[17]++;
        cov_cprhe2as4().s[81]++;
        return _prisma.default.refreshToken.update({
          where: {
            id: refreshToken.id
          },
          data: {
            isRevoked: true
          }
        });
      }, null, "Failed to revoke expired refresh token");
      /* istanbul ignore next */
      cov_cprhe2as4().s[82]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[25][1]++;
    }
    cov_cprhe2as4().s[83]++;
    return refreshToken.userId;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[84]++;
    console.error("Error verifying refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[85]++;
    return null;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[86]++;
const revokeRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[18]++;
  cov_cprhe2as4().s[87]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[88]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[27][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[27][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[26][0]++;
      cov_cprhe2as4().s[89]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[90]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[26][1]++;
    }
    cov_cprhe2as4().s[91]++;
    await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[19]++;
      cov_cprhe2as4().s[92]++;
      return _prisma.default.refreshToken.updateMany({
        where: {
          token
        },
        data: {
          isRevoked: true
        }
      });
    }, null, "Failed to revoke refresh token");
    /* istanbul ignore next */
    cov_cprhe2as4().s[93]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[94]++;
    console.error("Error revoking refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[95]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[96]++;
const revokeAllUserRefreshTokens = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[20]++;
  cov_cprhe2as4().s[97]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[98]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[29][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[29][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[28][0]++;
      cov_cprhe2as4().s[99]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[100]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[28][1]++;
    }
    cov_cprhe2as4().s[101]++;
    await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[21]++;
      cov_cprhe2as4().s[102]++;
      return _prisma.default.refreshToken.updateMany({
        where: {
          userId
        },
        data: {
          isRevoked: true
        }
      });
    }, null, "Failed to revoke all user refresh tokens");
    /* istanbul ignore next */
    cov_cprhe2as4().s[103]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[104]++;
    console.error("Error revoking user refresh tokens:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[105]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[106]++;
const cleanupRefreshTokens = async () => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[22]++;
  cov_cprhe2as4().s[107]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[108]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[31][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[31][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[30][0]++;
      cov_cprhe2as4().s[109]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[110]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[30][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[111]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[112]++;
    await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[23]++;
      cov_cprhe2as4().s[113]++;
      return _prisma.default.refreshToken.deleteMany({
        where: {
          OR: [{
            expiresAt: {
              lt: now
            }
          }, {
            isRevoked: true
          }]
        }
      });
    }, null, "Failed to cleanup expired refresh tokens");
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[114]++;
    console.error("Error cleaning up refresh tokens:", error);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,