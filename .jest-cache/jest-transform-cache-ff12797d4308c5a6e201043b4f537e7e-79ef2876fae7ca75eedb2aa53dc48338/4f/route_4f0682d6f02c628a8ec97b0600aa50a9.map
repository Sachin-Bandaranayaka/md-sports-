{"version":3,"names":["cov_h9muhp4c7","actualCoverage","s","GET","request","f","now","Date","firstDayOfMonth","getFullYear","getMonth","lastDayOfMonth","shops","_prisma","prisma","shop","findMany","where","is_active","include","invoices","status","createdAt","gte","lte","items","length","b","_server","NextResponse","json","success","details","summary","month","toLocaleString","year","totalShopsAnalyzed","generatedAt","toISOString","message","reportDetails","map","totalSalesAmount","reduce","sum","inv","total","numberOfTransactions","totalQuantitySold","itemSum","item","quantity","averageTransactionValue","shopId","id","shopName","name","location","sort","a","error","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/reports/shop-performance/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const shops = await prisma.shop.findMany({\n            where: {\n                is_active: true, // Consider only active shops\n            },\n            include: {\n                invoices: {\n                    where: {\n                        status: 'paid',\n                        createdAt: {\n                            gte: firstDayOfMonth,\n                            lte: lastDayOfMonth,\n                        },\n                    },\n                    include: {\n                        items: true, // To sum quantity sold\n                    }\n                },\n            },\n        });\n\n        if (shops.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [],\n                summary: { month: now.toLocaleString('default', { month: 'long' }), year: now.getFullYear(), totalShopsAnalyzed: 0 },\n                generatedAt: new Date().toISOString(),\n                message: 'No active shops found to analyze.'\n            });\n        }\n\n        const reportDetails = shops.map(shop => {\n            const totalSalesAmount = shop.invoices.reduce((sum, inv) => sum + inv.total, 0);\n            const numberOfTransactions = shop.invoices.length;\n            const totalQuantitySold = shop.invoices.reduce((sum, inv) =>\n                sum + inv.items.reduce((itemSum, item) => itemSum + item.quantity, 0),\n                0);\n            const averageTransactionValue = numberOfTransactions > 0 ? totalSalesAmount / numberOfTransactions : 0;\n\n            return {\n                shopId: shop.id,\n                shopName: shop.name,\n                location: shop.location,\n                totalSalesAmount,\n                numberOfTransactions,\n                totalQuantitySold,\n                averageTransactionValue,\n            };\n        }).sort((a, b) => b.totalSalesAmount - a.totalSalesAmount); // Sort by sales amount desc\n\n        return NextResponse.json({\n            success: true,\n            details: reportDetails,\n            summary: {\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n                totalShopsAnalyzed: reportDetails.length,\n                // Could add overall totals here if needed\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching shop performance report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch shop performance report', error: error.message },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}