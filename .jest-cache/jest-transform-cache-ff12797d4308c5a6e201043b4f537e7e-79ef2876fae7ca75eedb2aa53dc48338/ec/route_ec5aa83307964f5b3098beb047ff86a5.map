{"version":3,"names":["GET","cov_vzq0avkdi","f","s","fetchSummaryData","fetchSummaryDataFiltered","shopId","periodDays","startDate","endDate","userId","getRandomTrend","isPercentage","b","randomValue","Math","random","formatted","toFixed","round","trend","trendUp","transfersTrendData","console","time","pendingTransfers","_prisma","safeQuery","where","status","OR","fromShopId","toShopId","Date","setDate","getDate","setHours","createdAt","gte","prisma","inventoryTransfer","count","timeEnd","data","title","value","icon","success","debug","pendingTransfersCount","dateFilter","endDateTime","lte","totalValueResult","$queryRaw","totalinventoryvalue","totalValue","Number","pendingTransfersResult","Object","keys","length","outstandingInvoicesResult","invoice","aggregate","in","createdBy","_sum","total","lowStockItemsResult","inventoryItem","quantity","floor","inventoryTrend","transfersTrend","invoicesTrend","stockTrend","totalProfitResult","totalProfit","profitTrend","summaryData","toLocaleString","toString","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","searchParams","URL","url","period","get","parsedPeriod","parseInt","getUserIdFromToken","user","findUnique","id","select","roleName","permissions","isAdmin","includes","userContext","cacheKey","isFiltered","cachedData","_cache","cacheService","log","meta","shopFiltered","fromCache","filterUserId","userRole","summaryResult","undefined","responseData","set","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/summary/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Extracted function to fetch dashboard summary data\nexport async function fetchSummaryData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    // Generate trend data for transfers\n    const getRandomTrend = (isPercentage = true) => {\n        const randomValue = Math.random() * 10 - 5;\n        const formatted = isPercentage\n            ? `${randomValue > 0 ? '+' : ''}${randomValue.toFixed(1)}%`\n            : `${randomValue > 0 ? '+' : ''}${Math.round(randomValue)}`;\n        return {\n            trend: formatted,\n            trendUp: randomValue >= 0\n        };\n    };\n    const transfersTrendData = getRandomTrend(false);\n\n    // Count pending transfers with shop filtering and optional date filtering\n    console.time('countPendingTransfers');\n    const pendingTransfers = await safeQuery(\n        () => {\n            const where: any = { status: 'pending' };\n            if (shopId) {\n                where.OR = [\n                    { fromShopId: shopId },\n                    { toShopId: shopId }\n                ];\n            }\n            // Add date filtering if periodDays is provided\n            if (periodDays) {\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() - periodDays);\n                startDate.setHours(0, 0, 0, 0);\n                where.createdAt = { gte: startDate };\n            }\n            return prisma.inventoryTransfer.count({ where });\n        },\n        0,\n        'Failed to count pending transfers'\n    );\n    console.timeEnd('countPendingTransfers');\n\n\n\n\n\n    const data = [\n        { title: 'Pending Transfers', value: `${pendingTransfers}`, icon: 'Truck', trend: transfersTrendData.trend, trendUp: transfersTrendData.trendUp },\n    ];\n\n    return {\n        success: true,\n        data,\n        debug: {\n            pendingTransfersCount: pendingTransfers\n        }\n    };\n}\n\n// GET: Fetch dashboard summary statistics\n// Filtered version of fetchSummaryData with date range support\nexport async function fetchSummaryDataFiltered(startDate?: string | null, endDate?: string | null, userId?: string | null) {\n    // Build date filter for queries\n    const dateFilter: any = {};\n    if (startDate) {\n        dateFilter.gte = new Date(startDate);\n    }\n    if (endDate) {\n        // Set end date to end of day\n        const endDateTime = new Date(endDate);\n        endDateTime.setHours(23, 59, 59, 999);\n        dateFilter.lte = endDateTime;\n    }\n\n    // 1. Calculate Total Inventory Value using shop-specific cost (inventory doesn't need date filtering)\n    console.time('calculateInventoryValueRaw');\n    const totalValueResult = await safeQuery<Array<{ totalinventoryvalue: bigint | number | null }>>(\n        () => prisma.$queryRaw`\n                SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as \"totalinventoryvalue\"\n                FROM \"InventoryItem\" i\n                WHERE i.quantity > 0 AND i.shopspecificcost IS NOT NULL AND i.shopspecificcost > 0;\n        `,\n        [{ totalinventoryvalue: 0 }],\n        'Failed to calculate total inventory value via raw query'\n    );\n    console.timeEnd('calculateInventoryValueRaw');\n\n    let totalValue: number = 0;\n    if (totalValueResult && totalValueResult[0] && totalValueResult[0].totalinventoryvalue !== null) {\n        totalValue = Number(totalValueResult[0].totalinventoryvalue);\n    }\n\n    // 2. Count Pending Transfers with date filter\n    console.time('countPendingTransfers');\n    const pendingTransfersResult = await safeQuery(\n        () => prisma.inventoryTransfer.count({\n            where: {\n                status: 'pending',\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter })\n            }\n        }),\n        0,\n        'Failed to count pending transfers'\n    );\n    console.timeEnd('countPendingTransfers');\n\n    // 3. Calculate Outstanding Invoices with date filter\n    console.time('calculateOutstandingInvoices');\n    const outstandingInvoicesResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                status: { in: ['pending', 'overdue'] },\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { total: true }\n        }),\n        { _sum: { total: 0 } },\n        'Failed to calculate outstanding invoices'\n    );\n    console.timeEnd('calculateOutstandingInvoices');\n\n    // 4. Count Low Stock Items (same as original - doesn't need date filtering)\n    console.time('countLowStockItems');\n    const lowStockItemsResult = await safeQuery(\n        () => prisma.inventoryItem.count({\n            where: {\n                quantity: { lte: 10 }\n            }\n        }),\n        0,\n        'Failed to count low stock items'\n    );\n    console.timeEnd('countLowStockItems');\n\n    // Generate random trends\n    const getRandomTrend = (isPercentage = true) => {\n        const randomValue = Math.random() * 10 - 5;\n        const formatted = isPercentage\n            ? `${randomValue >= 0 ? '+' : ''}${randomValue.toFixed(1)}%`\n            : `${randomValue >= 0 ? '+' : ''}${Math.floor(randomValue)}`;\n        return {\n            trend: formatted,\n            trendUp: randomValue >= 0\n        };\n    };\n\n    const inventoryTrend = getRandomTrend(true);\n    const transfersTrend = getRandomTrend(false);\n    const invoicesTrend = getRandomTrend(true);\n    const stockTrend = getRandomTrend(false);\n\n    // 5. Calculate Total Profit with date filter (including all invoices, not just paid ones)\n    console.time('calculateTotalProfit');\n    const totalProfitResult = await safeQuery(\n        () => prisma.invoice.aggregate({\n            where: {\n                // Removed status filter to include all invoices (paid and unpaid)\n                ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter }),\n                ...(userId ? { createdBy: userId } : {})\n            },\n            _sum: { totalProfit: true }\n        }),\n        { _sum: { totalProfit: 0 } },\n        'Failed to calculate total profit'\n    );\n    console.timeEnd('calculateTotalProfit');\n\n    const profitTrend = getRandomTrend(true);\n\n    const summaryData = [\n        {\n            title: 'Total Inventory Value',\n            value: `Rs. ${totalValue.toLocaleString()}`,\n            icon: 'Package',\n            trend: inventoryTrend.trend,\n            trendUp: inventoryTrend.trendUp\n        },\n        {\n            title: 'Total Profit',\n            value: `Rs. ${(totalProfitResult._sum.totalProfit || 0).toLocaleString()}`,\n            icon: 'TrendingUp',\n            trend: profitTrend.trend,\n            trendUp: profitTrend.trendUp\n        },\n        {\n            title: 'Pending Transfers',\n            value: pendingTransfersResult.toString(),\n            icon: 'Truck',\n            trend: transfersTrend.trend,\n            trendUp: transfersTrend.trendUp\n        },\n        {\n            title: 'Outstanding Invoices',\n            value: `Rs. ${(outstandingInvoicesResult._sum.total || 0).toLocaleString()}`,\n            icon: 'CreditCard',\n            trend: invoicesTrend.trend,\n            trendUp: invoicesTrend.trendUp\n        },\n        {\n            title: 'Low Stock Items',\n            value: lowStockItemsResult.toString(),\n            icon: 'AlertTriangle',\n            trend: stockTrend.trend,\n            trendUp: stockTrend.trendUp\n        }\n    ];\n\n    return {\n        success: true,\n        data: summaryData\n    };\n}\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract period parameter from URL\n        const { searchParams } = new URL(request.url);\n        const period = searchParams.get('period');\n        let periodDays: number | undefined;\n        \n        if (period) {\n            const parsedPeriod = parseInt(period);\n            if (parsedPeriod === 7 || parsedPeriod === 30) {\n                periodDays = parsedPeriod;\n            }\n        }\n\n        // Get user ID from token for cache key\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                roleName: true,\n                permissions: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       (user.permissions && user.permissions.includes('admin:all'));\n\n        // Check cache first with shop context, period, and user context\n        const userContext = isAdmin ? 'admin' : userId;\n        const cacheKey = `dashboard:summary:${context.isFiltered ? context.shopId : 'all'}:${periodDays || 'all'}:user:${userContext}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('✅ Summary data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        // Determine if user-specific filtering is needed\n        const filterUserId = isAdmin ? null : userId;\n\n        // Fetch summary data with user filtering\n\n        console.log('🔄 Fetching fresh summary data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            periodDays,\n            userId: userId,\n            userRole: user.roleName,\n            filterUserId: filterUserId\n        });\n        console.time('fetchSummaryDataOverall');\n        const summaryResult = await fetchSummaryData(\n            context.isFiltered ? context.shopId : null, \n            periodDays, \n            undefined, \n            undefined, \n            filterUserId\n        );\n        console.timeEnd('fetchSummaryDataOverall');\n\n        // Add metadata to response\n        const responseData = {\n            ...summaryResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 1 minute (summary data changes frequently)\n        await cacheService.set(cacheKey, responseData, 60);\n        console.log('💾 Summary data cached for 1 minute');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching dashboard summary data:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching dashboard summary data',\n            error: error instanceof Error ? error.message : String(error),\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],"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","ignoreList":[]}