{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/inventoryTransfer.test.ts"],"sourcesContent":["import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\nimport { POST as createTransferHandler } from '@/app/api/inventory/transfers/route';\nimport { DELETE as deleteTransferHandler } from '@/app/api/inventory/transfers/[id]/route';\nimport { POST as batchTransferHandler } from '@/app/api/inventory/transfers/batch/route';\n\n// Simple mock NextRequest / NextResponse similar to existing integration tests\ninterface MockRequest {\n  method: string;\n  url: string;\n  headers: Headers;\n  json(): Promise<any>;\n  text(): Promise<string>;\n}\n\nconst mockNextResponse = {\n  json: (data: any, init?: { status?: number }) => ({\n    status: init?.status || 200,\n    json: async () => data,\n  }),\n};\n\nconst createMockRequest = (url: string, opts: { method?: string; body?: any; headers?: Record<string, string> } = {}): MockRequest => {\n  const { method = 'GET', body, headers = {} } = opts;\n  return {\n    method,\n    url,\n    headers: new Headers(headers),\n    json: async () => (typeof body === 'string' ? JSON.parse(body) : body),\n    text: async () => (typeof body === 'string' ? body : JSON.stringify(body)),\n  } as unknown as MockRequest;\n};\n\n// Patch global NextResponse used in route handlers\njest.mock('next/server', () => {\n  const actual = jest.requireActual('next/server');\n  return {\n    ...actual,\n    NextResponse: mockNextResponse,\n  };\n});\n\nconst prisma = new PrismaClient();\n\nconst DEV_HEADERS = {\n  authorization: 'Bearer dev-token',\n  'content-type': 'application/json',\n};\n\ndescribe('Inventory transfer reservation flow', () => {\n  let shopAId: number;\n  let shopBId: number;\n  let productId: number;\n\n  beforeAll(async () => {\n    // create two shops & product\n    const shopA = await prisma.shop.create({ data: { name: 'Shop A', location: 'X' }, select: { id: true } });\n    const shopB = await prisma.shop.create({ data: { name: 'Shop B', location: 'Y' }, select: { id: true } });\n    shopAId = shopA.id;\n    shopBId = shopB.id;\n\n    const product = await prisma.product.create({\n      data: { name: 'Product A', price: 15, weightedAverageCost: 10.0 },\n      select: { id: true },\n    });\n    productId = product.id;\n\n    // add inventory 50 to shop A\n    await prisma.inventoryItem.create({ data: { productId, shopId: shopAId, quantity: 50, shopSpecificCost: 10 } });\n  });\n\n  afterAll(async () => {\n    await prisma.inventoryItem.deleteMany({});\n    await prisma.product.deleteMany({});\n    await prisma.shop.deleteMany({});\n    await prisma.$disconnect();\n  });\n\n  test('reservation, cancel, complete flow', async () => {\n    // 1. Create transfer 30 units pending\n    const createReq = createMockRequest('http://localhost/api/inventory/transfers', {\n      method: 'POST',\n      headers: DEV_HEADERS,\n      body: {\n        sourceShopId: shopAId,\n        destinationShopId: shopBId,\n        items: [{ productId, quantity: 30 }],\n      },\n    });\n\n    const createRes: any = await createTransferHandler(createReq as any);\n    expect(createRes.status).toBe(201);\n    const resBody = await createRes.json();\n    const transferId = resBody.data.id;\n\n    // verify source qty decreased to 20\n    const sourceInventoryAfter = await prisma.inventoryItem.findFirst({ where: { productId, shopId: shopAId } });\n    expect(sourceInventoryAfter?.quantity).toBe(20);\n\n    // 2. Cancel transfer -> qty back to 50\n    const deleteReq = createMockRequest(`http://localhost/api/inventory/transfers/${transferId}`, {\n      method: 'DELETE',\n      headers: DEV_HEADERS,\n    });\n    const deleteRes: any = await deleteTransferHandler(deleteReq as any, { params: Promise.resolve({ id: String(transferId) }) } as any);\n    expect(deleteRes.status).toBe(200);\n\n    const srcAfterCancel = await prisma.inventoryItem.findFirst({ where: { productId, shopId: shopAId } });\n    expect(srcAfterCancel?.quantity).toBe(50);\n\n    // 3. Re-create transfer and complete it\n    const createReq2 = createMockRequest('http://localhost/api/inventory/transfers', {\n      method: 'POST',\n      headers: DEV_HEADERS,\n      body: {\n        sourceShopId: shopAId,\n        destinationShopId: shopBId,\n        items: [{ productId, quantity: 30 }],\n      },\n    });\n    const createRes2: any = await createTransferHandler(createReq2 as any);\n    const newTransferId = (await createRes2.json()).data.id;\n\n    // batch complete\n    const batchReq = createMockRequest('http://localhost/api/inventory/transfers/batch', {\n      method: 'POST',\n      headers: DEV_HEADERS,\n      body: { transferIds: [newTransferId], action: 'complete' },\n    });\n    const batchRes: any = await batchTransferHandler(batchReq as any);\n    expect(batchRes.status).toBe(200);\n\n    // verify source qty remains 20, dest qty 30\n    const srcFinal = await prisma.inventoryItem.findFirst({ where: { productId, shopId: shopAId } });\n    expect(srcFinal?.quantity).toBe(20);\n\n    const destInv = await prisma.inventoryItem.findFirst({ where: { productId, shopId: shopBId } });\n    expect(destInv?.quantity).toBe(30);\n  });\n}); "],"names":["jest","mock","actual","requireActual","NextResponse","mockNextResponse","json","data","init","status","createMockRequest","url","opts","method","body","headers","Headers","JSON","parse","text","stringify","prisma","PrismaClient","DEV_HEADERS","authorization","describe","shopAId","shopBId","productId","beforeAll","shopA","shop","create","name","location","select","id","shopB","product","price","weightedAverageCost","inventoryItem","shopId","quantity","shopSpecificCost","afterAll","deleteMany","$disconnect","test","createReq","sourceShopId","destinationShopId","items","createRes","createTransferHandler","expect","toBe","resBody","transferId","sourceInventoryAfter","findFirst","where","deleteReq","deleteRes","deleteTransferHandler","params","Promise","resolve","String","srcAfterCancel","createReq2","createRes2","newTransferId","batchReq","transferIds","action","batchRes","batchTransferHandler","srcFinal","destInv"],"mappings":"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"}