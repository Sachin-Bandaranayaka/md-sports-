{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/salesInvoices.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('Sales Invoice Management', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with sales permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Sales User',\n        email: 'sales@test.com',\n        permissions: ['sales:view', 'sales:create', 'sales:edit', 'sales:delete', 'payments:create']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n    });\n  });\n\n  describe('Invoice Creation Logic', () => {\n    test('should validate invoice creation data', () => {\n      const validateInvoiceData = (invoiceData: any) => {\n        const errors: string[] = [];\n        \n        if (!invoiceData.customerId) {\n          errors.push('Customer is required');\n        }\n        \n        if (!invoiceData.items || invoiceData.items.length === 0) {\n          errors.push('At least one item is required');\n        }\n        \n        if (invoiceData.items) {\n          invoiceData.items.forEach((item: any, index: number) => {\n            if (!item.productId) {\n              errors.push(`Product is required for item ${index + 1}`);\n            }\n            if (!item.quantity || item.quantity <= 0) {\n              errors.push(`Valid quantity is required for item ${index + 1}`);\n            }\n            if (!item.unitPrice || item.unitPrice <= 0) {\n              errors.push(`Valid unit price is required for item ${index + 1}`);\n            }\n          });\n        }\n        \n        return errors;\n      };\n\n      const validInvoice = {\n        customerId: 1,\n        items: [\n          { productId: 1, quantity: 2, unitPrice: 100 },\n          { productId: 2, quantity: 1, unitPrice: 50 }\n        ]\n      };\n\n      const invalidInvoice = {\n        customerId: null,\n        items: []\n      };\n\n      const partiallyInvalidInvoice = {\n        customerId: 1,\n        items: [\n          { productId: 1, quantity: 0, unitPrice: 100 },\n          { productId: null, quantity: 1, unitPrice: -50 }\n        ]\n      };\n\n      expect(validateInvoiceData(validInvoice)).toHaveLength(0);\n      \n      const invalidErrors = validateInvoiceData(invalidInvoice);\n      expect(invalidErrors).toContain('Customer is required');\n      expect(invalidErrors).toContain('At least one item is required');\n      \n      const partialErrors = validateInvoiceData(partiallyInvalidInvoice);\n      expect(partialErrors).toContain('Valid quantity is required for item 1');\n      expect(partialErrors).toContain('Product is required for item 2');\n      expect(partialErrors).toContain('Valid unit price is required for item 2');\n    });\n\n    test('should calculate invoice totals correctly', () => {\n      const calculateInvoiceTotals = (items: any[], taxRate: number = 0.1) => {\n        const subtotal = items.reduce((sum, item) => {\n          return sum + (item.quantity * item.unitPrice);\n        }, 0);\n        \n        const taxAmount = subtotal * taxRate;\n        const total = subtotal + taxAmount;\n        \n        return {\n          subtotal: parseFloat(subtotal.toFixed(2)),\n          taxAmount: parseFloat(taxAmount.toFixed(2)),\n          total: parseFloat(total.toFixed(2))\n        };\n      };\n\n      const items = [\n        { quantity: 2, unitPrice: 100 }, // 200\n        { quantity: 1, unitPrice: 50 },  // 50\n        { quantity: 3, unitPrice: 25 }   // 75\n      ];\n\n      const totals = calculateInvoiceTotals(items, 0.1);\n      \n      expect(totals.subtotal).toBe(325);\n      expect(totals.taxAmount).toBe(32.5);\n      expect(totals.total).toBe(357.5);\n    });\n\n    test('should handle discount calculations', () => {\n      const calculateWithDiscount = (subtotal: number, discountType: 'percentage' | 'fixed', discountValue: number, taxRate: number = 0.1) => {\n        let discountAmount = 0;\n        \n        if (discountType === 'percentage') {\n          discountAmount = subtotal * (discountValue / 100);\n        } else {\n          discountAmount = discountValue;\n        }\n        \n        const discountedSubtotal = subtotal - discountAmount;\n        const taxAmount = discountedSubtotal * taxRate;\n        const total = discountedSubtotal + taxAmount;\n        \n        return {\n          subtotal,\n          discountAmount: parseFloat(discountAmount.toFixed(2)),\n          discountedSubtotal: parseFloat(discountedSubtotal.toFixed(2)),\n          taxAmount: parseFloat(taxAmount.toFixed(2)),\n          total: parseFloat(total.toFixed(2))\n        };\n      };\n\n      // Test percentage discount\n      const percentageResult = calculateWithDiscount(1000, 'percentage', 10, 0.1);\n      expect(percentageResult.discountAmount).toBe(100);\n      expect(percentageResult.discountedSubtotal).toBe(900);\n      expect(percentageResult.total).toBe(990);\n\n      // Test fixed discount\n      const fixedResult = calculateWithDiscount(1000, 'fixed', 150, 0.1);\n      expect(fixedResult.discountAmount).toBe(150);\n      expect(fixedResult.discountedSubtotal).toBe(850);\n      expect(fixedResult.total).toBe(935);\n    });\n  });\n\n  describe('Invoice Update Logic', () => {\n    test('should validate invoice update permissions', () => {\n      const checkUpdatePermissions = (invoice: any, currentUser: any) => {\n        const errors: string[] = [];\n        \n        // Check if user has edit permission\n        if (!currentUser.permissions.includes('sales:edit')) {\n          errors.push('You do not have permission to edit invoices');\n        }\n        \n        // Check if invoice is already paid\n        if (invoice.status === 'paid') {\n          errors.push('Cannot edit a paid invoice');\n        }\n        \n        // Check if invoice is cancelled\n        if (invoice.status === 'cancelled') {\n          errors.push('Cannot edit a cancelled invoice');\n        }\n        \n        return errors;\n      };\n\n      const user = {\n        permissions: ['sales:edit']\n      };\n\n      const userWithoutPermission = {\n        permissions: ['sales:view']\n      };\n\n      const draftInvoice = { status: 'draft' };\n      const paidInvoice = { status: 'paid' };\n      const cancelledInvoice = { status: 'cancelled' };\n\n      expect(checkUpdatePermissions(draftInvoice, user)).toHaveLength(0);\n      expect(checkUpdatePermissions(paidInvoice, user)).toContain('Cannot edit a paid invoice');\n      expect(checkUpdatePermissions(cancelledInvoice, user)).toContain('Cannot edit a cancelled invoice');\n      expect(checkUpdatePermissions(draftInvoice, userWithoutPermission)).toContain('You do not have permission to edit invoices');\n    });\n\n    test('should track invoice changes', () => {\n      const trackInvoiceChanges = (originalInvoice: any, updatedInvoice: any) => {\n        const changes: any[] = [];\n        \n        // Compare basic fields\n        const fieldsToTrack = ['customerId', 'dueDate', 'notes', 'status'];\n        fieldsToTrack.forEach(field => {\n          if (originalInvoice[field] !== updatedInvoice[field]) {\n            changes.push({\n              field,\n              oldValue: originalInvoice[field],\n              newValue: updatedInvoice[field]\n            });\n          }\n        });\n        \n        // Compare items\n        if (JSON.stringify(originalInvoice.items) !== JSON.stringify(updatedInvoice.items)) {\n          changes.push({\n            field: 'items',\n            oldValue: originalInvoice.items,\n            newValue: updatedInvoice.items\n          });\n        }\n        \n        return changes;\n      };\n\n      const original = {\n        customerId: 1,\n        dueDate: '2024-01-15',\n        notes: 'Original notes',\n        status: 'draft',\n        items: [{ productId: 1, quantity: 2, unitPrice: 100 }]\n      };\n\n      const updated = {\n        customerId: 2,\n        dueDate: '2024-01-20',\n        notes: 'Updated notes',\n        status: 'sent',\n        items: [{ productId: 1, quantity: 3, unitPrice: 100 }]\n      };\n\n      const changes = trackInvoiceChanges(original, updated);\n      \n      expect(changes).toHaveLength(5);\n      expect(changes.find(c => c.field === 'customerId')).toBeTruthy();\n      expect(changes.find(c => c.field === 'dueDate')).toBeTruthy();\n      expect(changes.find(c => c.field === 'items')).toBeTruthy();\n    });\n  });\n\n  describe('Invoice Deletion Logic', () => {\n    test('should validate invoice deletion permissions', () => {\n      const checkDeletePermissions = (invoice: any, currentUser: any) => {\n        const errors: string[] = [];\n        \n        // Check if user has delete permission\n        if (!currentUser.permissions.includes('sales:delete')) {\n          errors.push('You do not have permission to delete invoices');\n        }\n        \n        // Check if invoice has payments\n        if (invoice.payments && invoice.payments.length > 0) {\n          errors.push('Cannot delete an invoice with payments');\n        }\n        \n        // Check if invoice is sent to customer\n        if (invoice.status === 'sent' || invoice.status === 'paid') {\n          errors.push('Cannot delete an invoice that has been sent to customer');\n        }\n        \n        return errors;\n      };\n\n      const user = {\n        permissions: ['sales:delete']\n      };\n\n      const userWithoutPermission = {\n        permissions: ['sales:view']\n      };\n\n      const draftInvoice = { status: 'draft', payments: [] };\n      const sentInvoice = { status: 'sent', payments: [] };\n      const invoiceWithPayments = { status: 'draft', payments: [{ id: 1, amount: 100 }] };\n\n      expect(checkDeletePermissions(draftInvoice, user)).toHaveLength(0);\n      expect(checkDeletePermissions(sentInvoice, user)).toContain('Cannot delete an invoice that has been sent to customer');\n      expect(checkDeletePermissions(invoiceWithPayments, user)).toContain('Cannot delete an invoice with payments');\n      expect(checkDeletePermissions(draftInvoice, userWithoutPermission)).toContain('You do not have permission to delete invoices');\n    });\n\n    test('should handle soft delete vs hard delete', () => {\n      const deleteInvoice = (invoice: any, deleteType: 'soft' | 'hard') => {\n        if (deleteType === 'soft') {\n          return {\n            ...invoice,\n            status: 'deleted',\n            deletedAt: new Date().toISOString()\n          };\n        } else {\n          // Hard delete - return null to indicate removal\n          return null;\n        }\n      };\n\n      const invoice = {\n        id: 1,\n        status: 'draft',\n        customerId: 1\n      };\n\n      const softDeleted = deleteInvoice(invoice, 'soft');\n      const hardDeleted = deleteInvoice(invoice, 'hard');\n\n      expect(softDeleted?.status).toBe('deleted');\n      expect(softDeleted?.deletedAt).toBeTruthy();\n      expect(hardDeleted).toBeNull();\n    });\n  });\n\n  describe('Payment Processing Logic', () => {\n    test('should validate payment data', () => {\n      const validatePaymentData = (paymentData: any, invoice: any) => {\n        const errors: string[] = [];\n        \n        if (!paymentData.amount || paymentData.amount <= 0) {\n          errors.push('Payment amount must be greater than 0');\n        }\n        \n        if (!paymentData.paymentMethod) {\n          errors.push('Payment method is required');\n        }\n        \n        if (!paymentData.paymentDate) {\n          errors.push('Payment date is required');\n        }\n        \n        // Check if payment amount exceeds remaining balance\n        const totalPaid = invoice.payments?.reduce((sum: number, p: any) => sum + p.amount, 0) || 0;\n        const remainingBalance = invoice.total - totalPaid;\n        \n        if (paymentData.amount > remainingBalance) {\n          errors.push(`Payment amount cannot exceed remaining balance of ${remainingBalance}`);\n        }\n        \n        return errors;\n      };\n\n      const invoice = {\n        total: 1000,\n        payments: [{ amount: 300 }] // 700 remaining\n      };\n\n      const validPayment = {\n        amount: 500,\n        paymentMethod: 'cash',\n        paymentDate: '2024-01-15'\n      };\n\n      const invalidPayment = {\n        amount: 800, // Exceeds remaining balance\n        paymentMethod: '',\n        paymentDate: ''\n      };\n\n      expect(validatePaymentData(validPayment, invoice)).toHaveLength(0);\n      \n      const errors = validatePaymentData(invalidPayment, invoice);\n      expect(errors).toContain('Payment method is required');\n      expect(errors).toContain('Payment date is required');\n      expect(errors).toContain('Payment amount cannot exceed remaining balance of 700');\n    });\n\n    test('should calculate payment status correctly', () => {\n      const calculatePaymentStatus = (invoice: any) => {\n        const totalPaid = invoice.payments?.reduce((sum: number, p: any) => sum + p.amount, 0) || 0;\n        const remainingBalance = invoice.total - totalPaid;\n        \n        if (remainingBalance <= 0) {\n          return 'paid';\n        } else if (totalPaid > 0) {\n          return 'partial';\n        } else {\n          return 'unpaid';\n        }\n      };\n\n      const unpaidInvoice = {\n        total: 1000,\n        payments: []\n      };\n\n      const partiallyPaidInvoice = {\n        total: 1000,\n        payments: [{ amount: 300 }, { amount: 200 }]\n      };\n\n      const fullyPaidInvoice = {\n        total: 1000,\n        payments: [{ amount: 600 }, { amount: 400 }]\n      };\n\n      const overpaidInvoice = {\n        total: 1000,\n        payments: [{ amount: 1200 }]\n      };\n\n      expect(calculatePaymentStatus(unpaidInvoice)).toBe('unpaid');\n      expect(calculatePaymentStatus(partiallyPaidInvoice)).toBe('partial');\n      expect(calculatePaymentStatus(fullyPaidInvoice)).toBe('paid');\n      expect(calculatePaymentStatus(overpaidInvoice)).toBe('paid');\n    });\n\n    test('should handle multiple payment methods', () => {\n      const processPayment = (paymentData: any) => {\n        const supportedMethods = ['cash', 'card', 'bank_transfer', 'check', 'mobile_payment'];\n        \n        if (!supportedMethods.includes(paymentData.paymentMethod)) {\n          throw new Error(`Unsupported payment method: ${paymentData.paymentMethod}`);\n        }\n        \n        // Simulate different processing logic for different methods\n        const processedPayment = {\n          ...paymentData,\n          id: Math.random().toString(36).substr(2, 9),\n          processedAt: new Date().toISOString(),\n          status: 'completed'\n        };\n        \n        // Add method-specific fields\n        switch (paymentData.paymentMethod) {\n          case 'card':\n            processedPayment.transactionId = 'TXN_' + Math.random().toString(36).substr(2, 9);\n            break;\n          case 'bank_transfer':\n            processedPayment.referenceNumber = 'REF_' + Math.random().toString(36).substr(2, 9);\n            break;\n          case 'check':\n            processedPayment.checkNumber = paymentData.checkNumber;\n            break;\n        }\n        \n        return processedPayment;\n      };\n\n      const cashPayment = {\n        amount: 500,\n        paymentMethod: 'cash',\n        paymentDate: '2024-01-15'\n      };\n\n      const cardPayment = {\n        amount: 300,\n        paymentMethod: 'card',\n        paymentDate: '2024-01-15'\n      };\n\n      const checkPayment = {\n        amount: 200,\n        paymentMethod: 'check',\n        paymentDate: '2024-01-15',\n        checkNumber: 'CHK001'\n      };\n\n      const invalidPayment = {\n        amount: 100,\n        paymentMethod: 'crypto',\n        paymentDate: '2024-01-15'\n      };\n\n      const processedCash = processPayment(cashPayment);\n      const processedCard = processPayment(cardPayment);\n      const processedCheck = processPayment(checkPayment);\n\n      expect(processedCash.status).toBe('completed');\n      expect(processedCard.transactionId).toBeTruthy();\n      expect(processedCheck.checkNumber).toBe('CHK001');\n      \n      expect(() => processPayment(invalidPayment)).toThrow('Unsupported payment method: crypto');\n    });\n  });\n\n  describe('Invoice Status Workflow', () => {\n    test('should handle invoice status transitions', () => {\n      const validateStatusTransition = (currentStatus: string, newStatus: string) => {\n        const validTransitions: Record<string, string[]> = {\n          'draft': ['sent', 'cancelled'],\n          'sent': ['paid', 'partial', 'overdue', 'cancelled'],\n          'partial': ['paid', 'overdue', 'cancelled'],\n          'overdue': ['paid', 'partial', 'cancelled'],\n          'paid': [], // No transitions from paid\n          'cancelled': [] // No transitions from cancelled\n        };\n        \n        return validTransitions[currentStatus]?.includes(newStatus) || false;\n      };\n\n      expect(validateStatusTransition('draft', 'sent')).toBe(true);\n      expect(validateStatusTransition('sent', 'paid')).toBe(true);\n      expect(validateStatusTransition('paid', 'cancelled')).toBe(false);\n      expect(validateStatusTransition('cancelled', 'sent')).toBe(false);\n      expect(validateStatusTransition('partial', 'paid')).toBe(true);\n    });\n\n    test('should auto-update status based on payments', () => {\n      const updateInvoiceStatus = (invoice: any) => {\n        const totalPaid = invoice.payments?.reduce((sum: number, p: any) => sum + p.amount, 0) || 0;\n        const remainingBalance = invoice.total - totalPaid;\n        \n        if (remainingBalance <= 0) {\n          return { ...invoice, status: 'paid' };\n        } else if (totalPaid > 0) {\n          return { ...invoice, status: 'partial' };\n        } else if (invoice.status === 'sent' && new Date(invoice.dueDate) < new Date()) {\n          return { ...invoice, status: 'overdue' };\n        }\n        \n        return invoice;\n      };\n\n      const invoice = {\n        id: 1,\n        total: 1000,\n        status: 'sent',\n        dueDate: '2024-01-01', // Past due\n        payments: []\n      };\n\n      const partialPaymentInvoice = {\n        ...invoice,\n        payments: [{ amount: 500 }]\n      };\n\n      const fullPaymentInvoice = {\n        ...invoice,\n        payments: [{ amount: 1000 }]\n      };\n\n      expect(updateInvoiceStatus(invoice).status).toBe('overdue');\n      expect(updateInvoiceStatus(partialPaymentInvoice).status).toBe('partial');\n      expect(updateInvoiceStatus(fullPaymentInvoice).status).toBe('paid');\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","test","validateInvoiceData","invoiceData","errors","customerId","items","length","forEach","item","index","productId","quantity","unitPrice","validInvoice","invalidInvoice","partiallyInvalidInvoice","expect","toHaveLength","invalidErrors","toContain","partialErrors","calculateInvoiceTotals","taxRate","subtotal","reduce","sum","taxAmount","total","parseFloat","toFixed","totals","toBe","calculateWithDiscount","discountType","discountValue","discountAmount","discountedSubtotal","percentageResult","fixedResult","checkUpdatePermissions","invoice","currentUser","includes","status","userWithoutPermission","draftInvoice","paidInvoice","cancelledInvoice","trackInvoiceChanges","originalInvoice","updatedInvoice","changes","fieldsToTrack","field","oldValue","newValue","JSON","stringify","original","dueDate","notes","updated","find","c","toBeTruthy","checkDeletePermissions","payments","sentInvoice","invoiceWithPayments","amount","deleteInvoice","deleteType","deletedAt","Date","toISOString","softDeleted","hardDeleted","toBeNull","validatePaymentData","paymentData","paymentMethod","paymentDate","totalPaid","p","remainingBalance","validPayment","invalidPayment","calculatePaymentStatus","unpaidInvoice","partiallyPaidInvoice","fullyPaidInvoice","overpaidInvoice","processPayment","supportedMethods","Error","processedPayment","Math","random","toString","substr","processedAt","transactionId","referenceNumber","checkNumber","cashPayment","cardPayment","checkPayment","processedCash","processedCard","processedCheck","toThrow","validateStatusTransition","currentStatus","newStatus","validTransitions","updateInvoiceStatus","partialPaymentInvoice","fullPaymentInvoice"],"mappings":"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"}