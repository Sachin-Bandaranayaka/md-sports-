{"version":3,"names":["DELETE","cov_2bhih41kwf","f","s","GET","PATCH","POST","transformAccountForClient","account","balance","Number","parent","b","subAccounts","map","request","userId","_auth","getUserIdFromToken","_server","NextResponse","json","success","message","status","user","_prisma","default","findUnique","where","id","select","allowedAccounts","roleName","searchParams","URL","url","get","summary","adminPermission","validateTokenPermission","isAdmin","isValid","parseInt","include","orderBy","name","length","includes","toString","data","accounts","findMany","type","parentId","isActive","allowedAccountIds","filter","console","log","join","error","Error","String","description","validTypes","parentAccount","newAccount","create","undefined","existingAccount","newBalance","updatedAccount","update","transactions","delete"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Helper function to transform account data for client consumption\nconst transformAccountForClient = (account: any): any => {\n    return {\n        ...account,\n        balance: Number(account.balance), // Convert Decimal to number\n        parent: account.parent ? transformAccountForClient(account.parent) : null,\n        subAccounts: account.subAccounts ? account.subAccounts.map(transformAccountForClient) : []\n    };\n};\n\n// GET: Fetch all accounts or a single account by ID\nexport async function GET(request: NextRequest) {\n    try {\n        // Get user information for permission filtering\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found'\n            }, { status: 401 });\n        }\n\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                allowedAccounts: true,\n                roleName: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found'\n            }, { status: 401 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n        const summary = searchParams.get('summary');\n\n        // Check if user is admin\n        const adminPermission = await validateTokenPermission(request, 'admin:all');\n        const isAdmin = adminPermission.isValid;\n\n        if (id) {\n            // Fetch a single account by ID with relationships\n            const account = await prisma.account.findUnique({\n                where: { id: parseInt(id, 10) },\n                include: {\n                    parent: true,\n                    subAccounts: {\n                        orderBy: {\n                            name: 'asc'\n                        }\n                    }\n                }\n            });\n\n            if (!account) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account not found'\n                }, { status: 404 });\n            }\n\n            // Check if non-admin user has access to this specific account\n            if (!isAdmin && user.allowedAccounts && user.allowedAccounts.length > 0) {\n                if (!user.allowedAccounts.includes(account.id.toString())) {\n                    return NextResponse.json({\n                        success: false,\n                        message: 'Access denied to this account'\n                    }, { status: 403 });\n                }\n            }\n\n            return NextResponse.json({\n                success: true,\n                data: transformAccountForClient(account)\n            });\n        }\n\n        let accounts;\n\n        if (summary === '1') {\n            // Lightweight fetch\n            accounts = await prisma.account.findMany({\n                select: {\n                    id: true,\n                    name: true,\n                    balance: true,\n                    type: true,\n                    parentId: true,\n                    isActive: true\n                },\n                orderBy: { name: 'asc' }\n            });\n        } else {\n            // Full fetch with relationships\n            accounts = await prisma.account.findMany({\n                include: {\n                    parent: true,\n                    subAccounts: { orderBy: { name: 'asc' } }\n                },\n                orderBy: { name: 'asc' }\n            });\n        }\n\n        // Filter accounts for non-admin users based on allowedAccounts\n        if (!isAdmin && user.allowedAccounts && user.allowedAccounts.length > 0) {\n            const allowedAccountIds = user.allowedAccounts.map(id => parseInt(id, 10));\n            accounts = accounts.filter(account => allowedAccountIds.includes(account.id));\n            console.log(`Non-admin user ${user.id} - filtered accounts to allowed ones: ${allowedAccountIds.join(', ')}`);\n        } else if (isAdmin) {\n            console.log(`Admin user ${user.id} - showing all accounts`);\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: accounts.map(transformAccountForClient)\n        });\n    } catch (error) {\n        console.error('Error fetching accounts:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching accounts',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new account\nexport async function POST(request: Request) {\n    try {\n        const { name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n        }\n\n        // Create the account\n        const newAccount = await prisma.account.create({\n            data: {\n                name,\n                type,\n                balance: balance || 0,\n                description,\n                isActive: isActive !== undefined ? isActive : true,\n                parentId: parentId ? parseInt(parentId, 10) : null\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account created successfully',\n            data: transformAccountForClient(newAccount)\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update an account\nexport async function PATCH(request: Request) {\n    try {\n        const { id, name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!id || !name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID, name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Calculate new balance if provided\n        const newBalance = balance !== undefined ? balance : existingAccount.balance;\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n\n            // Prevent circular reference\n            if (parseInt(parentId, 10) === parseInt(id, 10)) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account cannot be its own parent'\n                }, { status: 400 });\n            }\n        }\n\n        // Update the account\n        const updatedAccount = await prisma.account.update({\n            where: { id: parseInt(id, 10) },\n            data: {\n                name,\n                type,\n                balance: newBalance,\n                description,\n                isActive: isActive !== undefined ? isActive : existingAccount.isActive,\n                parentId: parentId !== undefined ? (parentId ? parseInt(parentId, 10) : null) : existingAccount.parentId\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account updated successfully',\n            data: transformAccountForClient(updatedAccount)\n        });\n    } catch (error) {\n        console.error('Error updating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete an account\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (!id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID is required'\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                subAccounts: true,\n                transactions: true\n            }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Check if account has sub-accounts\n        if (existingAccount.subAccounts.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with sub-accounts. Please delete or reassign sub-accounts first.'\n            }, { status: 400 });\n        }\n\n        // Check if account has transactions\n        if (existingAccount.transactions.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with existing transactions. Please delete or reassign transactions first.'\n            }, { status: 400 });\n        }\n\n        // Delete the account\n        await prisma.account.delete({\n            where: { id: parseInt(id, 10) }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}