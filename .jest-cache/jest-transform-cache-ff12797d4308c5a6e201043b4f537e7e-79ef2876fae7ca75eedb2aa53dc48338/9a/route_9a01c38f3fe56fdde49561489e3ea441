89d2691a453b98068d96d70ede615fc0
"use strict";

/* istanbul ignore next */
function cov_7f8tk9lo8() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/sales/route.ts";
  var hash = "dc815f5b6d14b0ee6af4c3faed38d0495c2c52d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/sales/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 92
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "7": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "10": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "11": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "12": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "13": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "14": {
        start: {
          line: 61,
          column: 52
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "15": {
        start: {
          line: 71,
          column: 34
        },
        end: {
          line: 71,
          column: 90
        }
      },
      "16": {
        start: {
          line: 71,
          column: 67
        },
        end: {
          line: 71,
          column: 86
        }
      },
      "17": {
        start: {
          line: 72,
          column: 32
        },
        end: {
          line: 72,
          column: 85
        }
      },
      "18": {
        start: {
          line: 72,
          column: 65
        },
        end: {
          line: 72,
          column: 81
        }
      },
      "19": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 30
        }
      },
      "20": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 75,
          column: 71
        }
      },
      "21": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 76
        }
      },
      "22": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 78
        }
      },
      "23": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 135
        }
      },
      "24": {
        start: {
          line: 78,
          column: 55
        },
        end: {
          line: 78,
          column: 90
        }
      },
      "25": {
        start: {
          line: 78,
          column: 112
        },
        end: {
          line: 78,
          column: 131
        }
      },
      "26": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 137
        }
      },
      "27": {
        start: {
          line: 79,
          column: 56
        },
        end: {
          line: 79,
          column: 92
        }
      },
      "28": {
        start: {
          line: 79,
          column: 114
        },
        end: {
          line: 79,
          column: 133
        }
      },
      "29": {
        start: {
          line: 80,
          column: 29
        },
        end: {
          line: 80,
          column: 139
        }
      },
      "30": {
        start: {
          line: 80,
          column: 57
        },
        end: {
          line: 80,
          column: 94
        }
      },
      "31": {
        start: {
          line: 80,
          column: 116
        },
        end: {
          line: 80,
          column: 135
        }
      },
      "32": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 87
        }
      },
      "34": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 43
          },
          end: {
            line: 61,
            column: 44
          }
        },
        loc: {
          start: {
            line: 61,
            column: 52
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 54
          },
          end: {
            line: 71,
            column: 55
          }
        },
        loc: {
          start: {
            line: 71,
            column: 67
          },
          end: {
            line: 71,
            column: 86
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 72,
            column: 52
          },
          end: {
            line: 72,
            column: 53
          }
        },
        loc: {
          start: {
            line: 72,
            column: 65
          },
          end: {
            line: 72,
            column: 81
          }
        },
        line: 72
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 47
          },
          end: {
            line: 78,
            column: 48
          }
        },
        loc: {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 90
          }
        },
        line: 78
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 78,
            column: 99
          },
          end: {
            line: 78,
            column: 100
          }
        },
        loc: {
          start: {
            line: 78,
            column: 112
          },
          end: {
            line: 78,
            column: 131
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 48
          },
          end: {
            line: 79,
            column: 49
          }
        },
        loc: {
          start: {
            line: 79,
            column: 56
          },
          end: {
            line: 79,
            column: 92
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 79,
            column: 101
          },
          end: {
            line: 79,
            column: 102
          }
        },
        loc: {
          start: {
            line: 79,
            column: 114
          },
          end: {
            line: 79,
            column: 133
          }
        },
        line: 79
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 80,
            column: 49
          },
          end: {
            line: 80,
            column: 50
          }
        },
        loc: {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 80,
            column: 94
          }
        },
        line: 80
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 80,
            column: 103
          },
          end: {
            line: 80,
            column: 104
          }
        },
        loc: {
          start: {
            line: 80,
            column: 116
          },
          end: {
            line: 80,
            column: 135
          }
        },
        line: 80
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 25
          }
        }, {
          start: {
            line: 53,
            column: 29
          },
          end: {
            line: 53,
            column: 54
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 46
          }
        }, {
          start: {
            line: 62,
            column: 50
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 26
          },
          end: {
            line: 65,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 26
          },
          end: {
            line: 65,
            column: 49
          }
        }, {
          start: {
            line: 65,
            column: 53
          },
          end: {
            line: 65,
            column: 67
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 29
          },
          end: {
            line: 66,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 29
          },
          end: {
            line: 66,
            column: 52
          }
        }, {
          start: {
            line: 66,
            column: 56
          },
          end: {
            line: 66,
            column: 70
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 99,
            column: 19
          },
          end: {
            line: 99,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 44
          },
          end: {
            line: 99,
            column: 57
          }
        }, {
          start: {
            line: 99,
            column: 60
          },
          end: {
            line: 99,
            column: 73
          }
        }],
        line: 99
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/sales/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n/**\n * API endpoint to fetch sales history for a specific product\n * GET /api/products/[id]/sales\n */\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        // Get all invoice items for this product\n        const invoiceItems = await prisma.invoiceItem.findMany({\n            where: {\n                productId: productId\n            },\n            include: {\n                invoice: {\n                    include: {\n                        // shop: true, // Error: Unknown field 'shop' for include statement on model 'Invoice'.\n                        // This line needs to be removed or fixed based on actual Invoice model schema.\n                        user: {\n                            select: {\n                                id: true,\n                                name: true\n                            }\n                        },\n                        customer: true // Assuming 'customer' is a valid relation on Invoice\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        if (!invoiceItems || invoiceItems.length === 0) {\n            return NextResponse.json({ success: true, data: [], message: 'No sales history found for this product.' });\n        }\n\n        // Format the data for the frontend\n        const salesData = invoiceItems.map(item => ({\n            id: item.invoice.invoiceNumber || `INV-${item.invoiceId}`,\n            date: item.invoice.createdAt,\n            shopId: item.invoice.shopId.toString(),\n            shopName: item.invoice.shop?.name || 'Unknown Shop',\n            cashierName: item.invoice.user?.name || 'Unknown User',\n            quantity: item.quantity,\n            total: item.total\n        }));\n\n        // Calculate sales metrics\n        const totalQuantitySold = invoiceItems.reduce((sum, item) => sum + item.quantity, 0);\n        const totalSalesValue = invoiceItems.reduce((sum, item) => sum + item.total, 0);\n\n        // Calculate daily, weekly and monthly sales (using date filtering)\n        const now = new Date();\n        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const dailySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneDayAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        const weeklySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneWeekAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        const monthlySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneMonthAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                invoices: salesData,\n                metrics: {\n                    totalQuantitySold,\n                    totalSalesValue,\n                    daily: dailySales,\n                    weekly: weeklySales,\n                    monthly: monthlySales\n                }\n            }\n        });\n    } catch (error) {\n        console.error(`Error fetching sales history for product ${params.id}:`, error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to fetch sales history',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "request", "params", "productId", "parseInt", "id", "isNaN", "NextResponse", "json", "success", "message", "status", "invoiceItems", "prisma", "invoiceItem", "findMany", "where", "include", "invoice", "user", "select", "name", "customer", "orderBy", "createdAt", "length", "data", "salesData", "map", "item", "invoiceNumber", "invoiceId", "date", "shopId", "toString", "shopName", "shop", "cashierName", "quantity", "total", "totalQuantitySold", "reduce", "sum", "totalSalesValue", "now", "Date", "oneDayAgo", "getTime", "oneWeekAgo", "oneMonthAgo", "dailySales", "filter", "weeklySales", "monthlySales", "invoices", "metrics", "daily", "weekly", "monthly", "error", "console", "Error", "String"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dc815f5b6d14b0ee6af4c3faed38d0495c2c52d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7f8tk9lo8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7f8tk9lo8();
cov_7f8tk9lo8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_7f8tk9lo8().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_7f8tk9lo8().f[0]++;
    cov_7f8tk9lo8().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_7f8tk9lo8().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_7f8tk9lo8().s[4]++, _interop_require_default(require("../../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_7f8tk9lo8().f[1]++;
  cov_7f8tk9lo8().s[5]++;
  return /* istanbul ignore next */(cov_7f8tk9lo8().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_7f8tk9lo8().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_7f8tk9lo8().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_7f8tk9lo8().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_7f8tk9lo8().f[2]++;
  cov_7f8tk9lo8().s[6]++;
  try {
    const productId =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[7]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_7f8tk9lo8().s[8]++;
    if (isNaN(productId)) {
      /* istanbul ignore next */
      cov_7f8tk9lo8().b[2][0]++;
      cov_7f8tk9lo8().s[9]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8tk9lo8().b[2][1]++;
    }
    // Get all invoice items for this product
    const invoiceItems =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[10]++, await _prisma.default.invoiceItem.findMany({
      where: {
        productId: productId
      },
      include: {
        invoice: {
          include: {
            // shop: true, // Error: Unknown field 'shop' for include statement on model 'Invoice'.
            // This line needs to be removed or fixed based on actual Invoice model schema.
            user: {
              select: {
                id: true,
                name: true
              }
            },
            customer: true // Assuming 'customer' is a valid relation on Invoice
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_7f8tk9lo8().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_7f8tk9lo8().b[4][0]++, !invoiceItems) ||
    /* istanbul ignore next */
    (cov_7f8tk9lo8().b[4][1]++, invoiceItems.length === 0)) {
      /* istanbul ignore next */
      cov_7f8tk9lo8().b[3][0]++;
      cov_7f8tk9lo8().s[12]++;
      return _server.NextResponse.json({
        success: true,
        data: [],
        message: "No sales history found for this product."
      });
    } else
    /* istanbul ignore next */
    {
      cov_7f8tk9lo8().b[3][1]++;
    }
    // Format the data for the frontend
    const salesData =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[13]++, invoiceItems.map(item => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[3]++;
      cov_7f8tk9lo8().s[14]++;
      return {
        id:
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[5][0]++, item.invoice.invoiceNumber) ||
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[5][1]++, `INV-${item.invoiceId}`),
        date: item.invoice.createdAt,
        shopId: item.invoice.shopId.toString(),
        shopName:
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[6][0]++, item.invoice.shop?.name) ||
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[6][1]++, "Unknown Shop"),
        cashierName:
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[7][0]++, item.invoice.user?.name) ||
        /* istanbul ignore next */
        (cov_7f8tk9lo8().b[7][1]++, "Unknown User"),
        quantity: item.quantity,
        total: item.total
      };
    }));
    // Calculate sales metrics
    const totalQuantitySold =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[15]++, invoiceItems.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[4]++;
      cov_7f8tk9lo8().s[16]++;
      return sum + item.quantity;
    }, 0));
    const totalSalesValue =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[17]++, invoiceItems.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[5]++;
      cov_7f8tk9lo8().s[18]++;
      return sum + item.total;
    }, 0));
    // Calculate daily, weekly and monthly sales (using date filtering)
    const now =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[19]++, new Date());
    const oneDayAgo =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[20]++, new Date(now.getTime() - 24 * 60 * 60 * 1000));
    const oneWeekAgo =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[21]++, new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000));
    const oneMonthAgo =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[22]++, new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000));
    const dailySales =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[23]++, invoiceItems.filter(item => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[6]++;
      cov_7f8tk9lo8().s[24]++;
      return item.invoice.createdAt >= oneDayAgo;
    }).reduce((sum, item) => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[7]++;
      cov_7f8tk9lo8().s[25]++;
      return sum + item.quantity;
    }, 0));
    const weeklySales =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[26]++, invoiceItems.filter(item => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[8]++;
      cov_7f8tk9lo8().s[27]++;
      return item.invoice.createdAt >= oneWeekAgo;
    }).reduce((sum, item) => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[9]++;
      cov_7f8tk9lo8().s[28]++;
      return sum + item.quantity;
    }, 0));
    const monthlySales =
    /* istanbul ignore next */
    (cov_7f8tk9lo8().s[29]++, invoiceItems.filter(item => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[10]++;
      cov_7f8tk9lo8().s[30]++;
      return item.invoice.createdAt >= oneMonthAgo;
    }).reduce((sum, item) => {
      /* istanbul ignore next */
      cov_7f8tk9lo8().f[11]++;
      cov_7f8tk9lo8().s[31]++;
      return sum + item.quantity;
    }, 0));
    /* istanbul ignore next */
    cov_7f8tk9lo8().s[32]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        invoices: salesData,
        metrics: {
          totalQuantitySold,
          totalSalesValue,
          daily: dailySales,
          weekly: weeklySales,
          monthly: monthlySales
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_7f8tk9lo8().s[33]++;
    console.error(`Error fetching sales history for product ${params.id}:`, error);
    /* istanbul ignore next */
    cov_7f8tk9lo8().s[34]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch sales history",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_7f8tk9lo8().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_7f8tk9lo8().b[8][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,