7e33e6199dce7e376da5c0d27b9c0201
"use strict";

/* istanbul ignore next */
function cov_2bhih41kwf() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts";
  var hash = "33f0ba4d1eb85bc01dc9dea1071a7592ac87499e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "10": {
        start: {
          line: 27,
          column: 14
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "12": {
        start: {
          line: 34,
          column: 34
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 40,
          column: 6
        }
      },
      "14": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "15": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 67
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "17": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "18": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "19": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "20": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "21": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 72,
          column: 53
        }
      },
      "22": {
        start: {
          line: 73,
          column: 19
        },
        end: {
          line: 73,
          column: 41
        }
      },
      "23": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 51
        }
      },
      "24": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 76,
          column: 94
        }
      },
      "25": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "26": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "27": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "28": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "29": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "30": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "31": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 110,
          column: 17
        }
      },
      "32": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "33": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "34": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "35": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "36": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "37": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "38": {
        start: {
          line: 151,
          column: 38
        },
        end: {
          line: 151,
          column: 86
        }
      },
      "39": {
        start: {
          line: 151,
          column: 69
        },
        end: {
          line: 151,
          column: 85
        }
      },
      "40": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 90
        }
      },
      "41": {
        start: {
          line: 152,
          column: 50
        },
        end: {
          line: 152,
          column: 88
        }
      },
      "42": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 122
        }
      },
      "43": {
        start: {
          line: 154,
          column: 15
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "44": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 72
        }
      },
      "45": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "46": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 57
        }
      },
      "47": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "48": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 256,
          column: 5
        }
      },
      "49": {
        start: {
          line: 174,
          column: 73
        },
        end: {
          line: 174,
          column: 93
        }
      },
      "50": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "51": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "52": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "53": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "54": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "55": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "56": {
        start: {
          line: 202,
          column: 34
        },
        end: {
          line: 206,
          column: 14
        }
      },
      "57": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "58": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 213,
          column: 19
        }
      },
      "59": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "60": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 222,
          column: 19
        }
      },
      "61": {
        start: {
          line: 226,
          column: 27
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "62": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "63": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 56
        }
      },
      "64": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 255,
          column: 11
        }
      },
      "65": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 368,
          column: 5
        }
      },
      "66": {
        start: {
          line: 260,
          column: 77
        },
        end: {
          line: 260,
          column: 97
        }
      },
      "67": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "68": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "69": {
        start: {
          line: 271,
          column: 27
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "70": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "71": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 284,
          column: 15
        }
      },
      "72": {
        start: {
          line: 287,
          column: 32
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "73": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "74": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "75": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 84
        }
      },
      "76": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "77": {
        start: {
          line: 304,
          column: 34
        },
        end: {
          line: 308,
          column: 14
        }
      },
      "78": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 316,
          column: 13
        }
      },
      "79": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 315,
          column: 19
        }
      },
      "80": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "81": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 324,
          column: 19
        }
      },
      "82": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "83": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 333,
          column: 19
        }
      },
      "84": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 353,
          column: 10
        }
      },
      "85": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 358,
          column: 11
        }
      },
      "86": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 56
        }
      },
      "87": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "88": {
        start: {
          line: 371,
          column: 4
        },
        end: {
          line: 437,
          column: 5
        }
      },
      "89": {
        start: {
          line: 372,
          column: 33
        },
        end: {
          line: 372,
          column: 53
        }
      },
      "90": {
        start: {
          line: 373,
          column: 19
        },
        end: {
          line: 373,
          column: 41
        }
      },
      "91": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "92": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 380,
          column: 15
        }
      },
      "93": {
        start: {
          line: 383,
          column: 32
        },
        end: {
          line: 391,
          column: 10
        }
      },
      "94": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "95": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 398,
          column: 15
        }
      },
      "96": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "97": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 407,
          column: 15
        }
      },
      "98": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "99": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 416,
          column: 15
        }
      },
      "100": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 423,
          column: 11
        }
      },
      "101": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 427,
          column: 11
        }
      },
      "102": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 56
        }
      },
      "103": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 436,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 28,
            column: 9
          },
          end: {
            line: 28,
            column: 33
          }
        },
        loc: {
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 34,
            column: 34
          },
          end: {
            line: 34,
            column: 35
          }
        },
        loc: {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 34
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 42,
            column: 15
          },
          end: {
            line: 42,
            column: 18
          }
        },
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 42
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 151,
            column: 63
          },
          end: {
            line: 151,
            column: 64
          }
        },
        loc: {
          start: {
            line: 151,
            column: 69
          },
          end: {
            line: 151,
            column: 85
          }
        },
        line: 151
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 152,
            column: 39
          },
          end: {
            line: 152,
            column: 40
          }
        },
        loc: {
          start: {
            line: 152,
            column: 50
          },
          end: {
            line: 152,
            column: 88
          }
        },
        line: 152
      },
      "10": {
        name: "POST",
        decl: {
          start: {
            line: 172,
            column: 15
          },
          end: {
            line: 172,
            column: 19
          }
        },
        loc: {
          start: {
            line: 172,
            column: 29
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 172
      },
      "11": {
        name: "PATCH",
        decl: {
          start: {
            line: 258,
            column: 15
          },
          end: {
            line: 258,
            column: 20
          }
        },
        loc: {
          start: {
            line: 258,
            column: 30
          },
          end: {
            line: 369,
            column: 1
          }
        },
        line: 258
      },
      "12": {
        name: "DELETE",
        decl: {
          start: {
            line: 370,
            column: 15
          },
          end: {
            line: 370,
            column: 21
          }
        },
        loc: {
          start: {
            line: 370,
            column: 31
          },
          end: {
            line: 438,
            column: 1
          }
        },
        line: 370
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 35
          },
          end: {
            line: 29,
            column: 38
          }
        }, {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 31,
            column: 5
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 29,
            column: 14
          }
        }, {
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 32
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 38,
            column: 74
          }
        }, {
          start: {
            line: 38,
            column: 77
          },
          end: {
            line: 38,
            column: 81
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 43
          },
          end: {
            line: 39,
            column: 93
          }
        }, {
          start: {
            line: 39,
            column: 96
          },
          end: {
            line: 39,
            column: 98
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 24
          }
        }, {
          start: {
            line: 102,
            column: 28
          },
          end: {
            line: 102,
            column: 48
          }
        }, {
          start: {
            line: 102,
            column: 52
          },
          end: {
            line: 102,
            column: 83
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 110,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 110,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: 133,
            column: 15
          },
          end: {
            line: 148,
            column: 9
          }
        }],
        line: 118
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 156,
            column: 9
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 20
          }
        }, {
          start: {
            line: 150,
            column: 24
          },
          end: {
            line: 150,
            column: 44
          }
        }, {
          start: {
            line: 150,
            column: 48
          },
          end: {
            line: 150,
            column: 79
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "15": {
        loc: {
          start: {
            line: 166,
            column: 19
          },
          end: {
            line: 166,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 44
          },
          end: {
            line: 166,
            column: 57
          }
        }, {
          start: {
            line: 166,
            column: 60
          },
          end: {
            line: 166,
            column: 73
          }
        }],
        line: 166
      },
      "16": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "17": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 26
          }
        }],
        line: 176
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "20": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 25
          },
          end: {
            line: 230,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 25
          },
          end: {
            line: 230,
            column: 32
          }
        }, {
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 230,
            column: 37
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 26
          },
          end: {
            line: 232,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 51
          },
          end: {
            line: 232,
            column: 59
          }
        }, {
          start: {
            line: 232,
            column: 62
          },
          end: {
            line: 232,
            column: 66
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 233,
            column: 26
          },
          end: {
            line: 233,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 37
          },
          end: {
            line: 233,
            column: 59
          }
        }, {
          start: {
            line: 233,
            column: 62
          },
          end: {
            line: 233,
            column: 66
          }
        }],
        line: 233
      },
      "25": {
        loc: {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 252,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 44
          },
          end: {
            line: 252,
            column: 57
          }
        }, {
          start: {
            line: 252,
            column: 60
          },
          end: {
            line: 252,
            column: 73
          }
        }],
        line: 252
      },
      "26": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "27": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 262,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 262,
            column: 15
          }
        }, {
          start: {
            line: 262,
            column: 19
          },
          end: {
            line: 262,
            column: 24
          }
        }, {
          start: {
            line: 262,
            column: 28
          },
          end: {
            line: 262,
            column: 33
          }
        }],
        line: 262
      },
      "28": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "29": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 27
          },
          end: {
            line: 301,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 51
          },
          end: {
            line: 301,
            column: 58
          }
        }, {
          start: {
            line: 301,
            column: 61
          },
          end: {
            line: 301,
            column: 84
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "32": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "33": {
        loc: {
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "34": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "35": {
        loc: {
          start: {
            line: 346,
            column: 26
          },
          end: {
            line: 346,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 346,
            column: 51
          },
          end: {
            line: 346,
            column: 59
          }
        }, {
          start: {
            line: 346,
            column: 62
          },
          end: {
            line: 346,
            column: 86
          }
        }],
        line: 346
      },
      "36": {
        loc: {
          start: {
            line: 347,
            column: 26
          },
          end: {
            line: 347,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 51
          },
          end: {
            line: 347,
            column: 91
          }
        }, {
          start: {
            line: 347,
            column: 94
          },
          end: {
            line: 347,
            column: 118
          }
        }],
        line: 347
      },
      "37": {
        loc: {
          start: {
            line: 347,
            column: 51
          },
          end: {
            line: 347,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 62
          },
          end: {
            line: 347,
            column: 84
          }
        }, {
          start: {
            line: 347,
            column: 87
          },
          end: {
            line: 347,
            column: 91
          }
        }],
        line: 347
      },
      "38": {
        loc: {
          start: {
            line: 364,
            column: 19
          },
          end: {
            line: 364,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 364,
            column: 44
          },
          end: {
            line: 364,
            column: 57
          }
        }, {
          start: {
            line: 364,
            column: 60
          },
          end: {
            line: 364,
            column: 73
          }
        }],
        line: 364
      },
      "39": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "40": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "41": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "42": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "43": {
        loc: {
          start: {
            line: 433,
            column: 19
          },
          end: {
            line: 433,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 433,
            column: 44
          },
          end: {
            line: 433,
            column: 57
          }
        }, {
          start: {
            line: 433,
            column: 60
          },
          end: {
            line: 433,
            column: 73
          }
        }],
        line: 433
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/accounting/accounts/route.ts"],
      sourcesContent: ["import { NextResponse, NextRequest } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\n\n// Helper function to transform account data for client consumption\nconst transformAccountForClient = (account: any): any => {\n    return {\n        ...account,\n        balance: Number(account.balance), // Convert Decimal to number\n        parent: account.parent ? transformAccountForClient(account.parent) : null,\n        subAccounts: account.subAccounts ? account.subAccounts.map(transformAccountForClient) : []\n    };\n};\n\n// GET: Fetch all accounts or a single account by ID\nexport async function GET(request: NextRequest) {\n    try {\n        // Get user information for permission filtering\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found'\n            }, { status: 401 });\n        }\n\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                allowedAccounts: true,\n                roleName: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found'\n            }, { status: 401 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n        const summary = searchParams.get('summary');\n\n        // Check if user is admin\n        const adminPermission = await validateTokenPermission(request, 'admin:all');\n        const isAdmin = adminPermission.isValid;\n\n        if (id) {\n            // Fetch a single account by ID with relationships\n            const account = await prisma.account.findUnique({\n                where: { id: parseInt(id, 10) },\n                include: {\n                    parent: true,\n                    subAccounts: {\n                        orderBy: {\n                            name: 'asc'\n                        }\n                    }\n                }\n            });\n\n            if (!account) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account not found'\n                }, { status: 404 });\n            }\n\n            // Check if non-admin user has access to this specific account\n            if (!isAdmin && user.allowedAccounts && user.allowedAccounts.length > 0) {\n                if (!user.allowedAccounts.includes(account.id.toString())) {\n                    return NextResponse.json({\n                        success: false,\n                        message: 'Access denied to this account'\n                    }, { status: 403 });\n                }\n            }\n\n            return NextResponse.json({\n                success: true,\n                data: transformAccountForClient(account)\n            });\n        }\n\n        let accounts;\n\n        if (summary === '1') {\n            // Lightweight fetch\n            accounts = await prisma.account.findMany({\n                select: {\n                    id: true,\n                    name: true,\n                    balance: true,\n                    type: true,\n                    parentId: true,\n                    isActive: true\n                },\n                orderBy: { name: 'asc' }\n            });\n        } else {\n            // Full fetch with relationships\n            accounts = await prisma.account.findMany({\n                include: {\n                    parent: true,\n                    subAccounts: { orderBy: { name: 'asc' } }\n                },\n                orderBy: { name: 'asc' }\n            });\n        }\n\n        // Filter accounts for non-admin users based on allowedAccounts\n        if (!isAdmin && user.allowedAccounts && user.allowedAccounts.length > 0) {\n            const allowedAccountIds = user.allowedAccounts.map(id => parseInt(id, 10));\n            accounts = accounts.filter(account => allowedAccountIds.includes(account.id));\n            console.log(`Non-admin user ${user.id} - filtered accounts to allowed ones: ${allowedAccountIds.join(', ')}`);\n        } else if (isAdmin) {\n            console.log(`Admin user ${user.id} - showing all accounts`);\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: accounts.map(transformAccountForClient)\n        });\n    } catch (error) {\n        console.error('Error fetching accounts:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching accounts',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new account\nexport async function POST(request: Request) {\n    try {\n        const { name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n        }\n\n        // Create the account\n        const newAccount = await prisma.account.create({\n            data: {\n                name,\n                type,\n                balance: balance || 0,\n                description,\n                isActive: isActive !== undefined ? isActive : true,\n                parentId: parentId ? parseInt(parentId, 10) : null\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account created successfully',\n            data: transformAccountForClient(newAccount)\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update an account\nexport async function PATCH(request: Request) {\n    try {\n        const { id, name, type, balance, description, isActive, parentId } = await request.json();\n\n        // Validate required fields\n        if (!id || !name || !type) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID, name and type are required'\n            }, { status: 400 });\n        }\n\n        // Validate account type\n        const validTypes = ['asset', 'liability', 'equity', 'income', 'expense'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Account type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Calculate new balance if provided\n        const newBalance = balance !== undefined ? balance : existingAccount.balance;\n\n        // Validate parent account if parentId is provided\n        if (parentId) {\n            const parentAccount = await prisma.account.findUnique({\n                where: { id: parseInt(parentId, 10) }\n            });\n\n            if (!parentAccount) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Parent account not found'\n                }, { status: 400 });\n            }\n\n            // Ensure parent and child have compatible types\n            if (parentAccount.type !== type) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Sub-account type must match parent account type'\n                }, { status: 400 });\n            }\n\n            // Prevent circular reference\n            if (parseInt(parentId, 10) === parseInt(id, 10)) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Account cannot be its own parent'\n                }, { status: 400 });\n            }\n        }\n\n        // Update the account\n        const updatedAccount = await prisma.account.update({\n            where: { id: parseInt(id, 10) },\n            data: {\n                name,\n                type,\n                balance: newBalance,\n                description,\n                isActive: isActive !== undefined ? isActive : existingAccount.isActive,\n                parentId: parentId !== undefined ? (parentId ? parseInt(parentId, 10) : null) : existingAccount.parentId\n            },\n            include: {\n                parent: true,\n                subAccounts: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account updated successfully',\n            data: transformAccountForClient(updatedAccount)\n        });\n    } catch (error) {\n        console.error('Error updating account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete an account\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (!id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account ID is required'\n            }, { status: 400 });\n        }\n\n        // Check if account exists\n        const existingAccount = await prisma.account.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                subAccounts: true,\n                transactions: true\n            }\n        });\n\n        if (!existingAccount) {\n            return NextResponse.json({\n                success: false,\n                message: 'Account not found'\n            }, { status: 404 });\n        }\n\n        // Check if account has sub-accounts\n        if (existingAccount.subAccounts.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with sub-accounts. Please delete or reassign sub-accounts first.'\n            }, { status: 400 });\n        }\n\n        // Check if account has transactions\n        if (existingAccount.transactions.length > 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'Cannot delete account with existing transactions. Please delete or reassign transactions first.'\n            }, { status: 400 });\n        }\n\n        // Delete the account\n        await prisma.account.delete({\n            where: { id: parseInt(id, 10) }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Account deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting account:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting account',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "POST", "transformAccountForClient", "account", "balance", "Number", "parent", "subAccounts", "map", "request", "userId", "getUserIdFromToken", "NextResponse", "json", "success", "message", "status", "user", "prisma", "findUnique", "where", "id", "select", "allowedAccounts", "roleName", "searchParams", "URL", "url", "get", "summary", "adminPermission", "validateTokenPermission", "isAdmin", "isValid", "parseInt", "include", "orderBy", "name", "length", "includes", "toString", "data", "accounts", "findMany", "type", "parentId", "isActive", "allowedAccountIds", "filter", "console", "log", "join", "error", "Error", "String", "description", "validTypes", "parentAccount", "newAccount", "create", "undefined", "existingAccount", "newBalance", "updatedAccount", "update", "transactions", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "33f0ba4d1eb85bc01dc9dea1071a7592ac87499e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bhih41kwf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bhih41kwf();
cov_2bhih41kwf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[0]++;
  cov_2bhih41kwf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2bhih41kwf().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[1]++;
    cov_2bhih41kwf().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[2]++;
    cov_2bhih41kwf().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[3]++;
    cov_2bhih41kwf().s[6]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2bhih41kwf().f[4]++;
    cov_2bhih41kwf().s[7]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2bhih41kwf().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2bhih41kwf().s[9]++, _interop_require_default(require("../../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_2bhih41kwf().s[10]++, require("../../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[5]++;
  cov_2bhih41kwf().s[11]++;
  return /* istanbul ignore next */(cov_2bhih41kwf().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2bhih41kwf().b[0][1]++, {
    default: obj
  });
}
// Helper function to transform account data for client consumption
/* istanbul ignore next */
cov_2bhih41kwf().s[12]++;
const transformAccountForClient = account => {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[6]++;
  cov_2bhih41kwf().s[13]++;
  return {
    ...account,
    balance: Number(account.balance),
    parent: account.parent ?
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[2][0]++, transformAccountForClient(account.parent)) :
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[2][1]++, null),
    subAccounts: account.subAccounts ?
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[3][0]++, account.subAccounts.map(transformAccountForClient)) :
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[3][1]++, [])
  };
};
async function GET(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[7]++;
  cov_2bhih41kwf().s[14]++;
  try {
    // Get user information for permission filtering
    const userId =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[15]++, await (0, _auth.getUserIdFromToken)(request));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[16]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[4][0]++;
      cov_2bhih41kwf().s[17]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[4][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[18]++, await _prisma.default.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        allowedAccounts: true,
        roleName: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[19]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[5][0]++;
      cov_2bhih41kwf().s[20]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[5][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[21]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[22]++, searchParams.get("id"));
    const summary =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[23]++, searchParams.get("summary"));
    // Check if user is admin
    const adminPermission =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[24]++, await (0, _auth.validateTokenPermission)(request, "admin:all"));
    const isAdmin =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[25]++, adminPermission.isValid);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[26]++;
    if (id) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[6][0]++;
      // Fetch a single account by ID with relationships
      const account =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[27]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(id, 10)
        },
        include: {
          parent: true,
          subAccounts: {
            orderBy: {
              name: "asc"
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[28]++;
      if (!account) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[7][0]++;
        cov_2bhih41kwf().s[29]++;
        return _server.NextResponse.json({
          success: false,
          message: "Account not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[7][1]++;
      }
      // Check if non-admin user has access to this specific account
      cov_2bhih41kwf().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[9][0]++, !isAdmin) &&
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[9][1]++, user.allowedAccounts) &&
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[9][2]++, user.allowedAccounts.length > 0)) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[8][0]++;
        cov_2bhih41kwf().s[31]++;
        if (!user.allowedAccounts.includes(account.id.toString())) {
          /* istanbul ignore next */
          cov_2bhih41kwf().b[10][0]++;
          cov_2bhih41kwf().s[32]++;
          return _server.NextResponse.json({
            success: false,
            message: "Access denied to this account"
          }, {
            status: 403
          });
        } else
        /* istanbul ignore next */
        {
          cov_2bhih41kwf().b[10][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[8][1]++;
      }
      cov_2bhih41kwf().s[33]++;
      return _server.NextResponse.json({
        success: true,
        data: transformAccountForClient(account)
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[6][1]++;
    }
    let accounts;
    /* istanbul ignore next */
    cov_2bhih41kwf().s[34]++;
    if (summary === "1") {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[11][0]++;
      cov_2bhih41kwf().s[35]++;
      // Lightweight fetch
      accounts = await _prisma.default.account.findMany({
        select: {
          id: true,
          name: true,
          balance: true,
          type: true,
          parentId: true,
          isActive: true
        },
        orderBy: {
          name: "asc"
        }
      });
    } else {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[11][1]++;
      cov_2bhih41kwf().s[36]++;
      // Full fetch with relationships
      accounts = await _prisma.default.account.findMany({
        include: {
          parent: true,
          subAccounts: {
            orderBy: {
              name: "asc"
            }
          }
        },
        orderBy: {
          name: "asc"
        }
      });
    }
    // Filter accounts for non-admin users based on allowedAccounts
    /* istanbul ignore next */
    cov_2bhih41kwf().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[13][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[13][1]++, user.allowedAccounts) &&
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[13][2]++, user.allowedAccounts.length > 0)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[12][0]++;
      const allowedAccountIds =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[38]++, user.allowedAccounts.map(id => {
        /* istanbul ignore next */
        cov_2bhih41kwf().f[8]++;
        cov_2bhih41kwf().s[39]++;
        return parseInt(id, 10);
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[40]++;
      accounts = accounts.filter(account => {
        /* istanbul ignore next */
        cov_2bhih41kwf().f[9]++;
        cov_2bhih41kwf().s[41]++;
        return allowedAccountIds.includes(account.id);
      });
      /* istanbul ignore next */
      cov_2bhih41kwf().s[42]++;
      console.log(`Non-admin user ${user.id} - filtered accounts to allowed ones: ${allowedAccountIds.join(", ")}`);
    } else {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[12][1]++;
      cov_2bhih41kwf().s[43]++;
      if (isAdmin) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[14][0]++;
        cov_2bhih41kwf().s[44]++;
        console.log(`Admin user ${user.id} - showing all accounts`);
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[14][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2bhih41kwf().s[45]++;
    return _server.NextResponse.json({
      success: true,
      data: accounts.map(transformAccountForClient)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[46]++;
    console.error("Error fetching accounts:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[47]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching accounts",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[15][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[10]++;
  cov_2bhih41kwf().s[48]++;
  try {
    const {
      name,
      type,
      balance,
      description,
      isActive,
      parentId
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[49]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2bhih41kwf().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[17][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[17][1]++, !type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[16][0]++;
      cov_2bhih41kwf().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account name and type are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[16][1]++;
    }
    // Validate account type
    const validTypes =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[52]++, ["asset", "liability", "equity", "income", "expense"]);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[53]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[18][0]++;
      cov_2bhih41kwf().s[54]++;
      return _server.NextResponse.json({
        success: false,
        message: `Account type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[18][1]++;
    }
    // Validate parent account if parentId is provided
    cov_2bhih41kwf().s[55]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[19][0]++;
      const parentAccount =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[56]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(parentId, 10)
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[57]++;
      if (!parentAccount) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[20][0]++;
        cov_2bhih41kwf().s[58]++;
        return _server.NextResponse.json({
          success: false,
          message: "Parent account not found"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[20][1]++;
      }
      // Ensure parent and child have compatible types
      cov_2bhih41kwf().s[59]++;
      if (parentAccount.type !== type) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[21][0]++;
        cov_2bhih41kwf().s[60]++;
        return _server.NextResponse.json({
          success: false,
          message: "Sub-account type must match parent account type"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[19][1]++;
    }
    // Create the account
    const newAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[61]++, await _prisma.default.account.create({
      data: {
        name,
        type,
        balance:
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[22][0]++, balance) ||
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[22][1]++, 0),
        description,
        isActive: isActive !== undefined ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[23][0]++, isActive) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[23][1]++, true),
        parentId: parentId ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[24][0]++, parseInt(parentId, 10)) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[24][1]++, null)
      },
      include: {
        parent: true,
        subAccounts: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[62]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account created successfully",
      data: transformAccountForClient(newAccount)
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[63]++;
    console.error("Error creating account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[64]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[25][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[11]++;
  cov_2bhih41kwf().s[65]++;
  try {
    const {
      id,
      name,
      type,
      balance,
      description,
      isActive,
      parentId
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[66]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2bhih41kwf().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[27][0]++, !id) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[27][1]++, !name) ||
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[27][2]++, !type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[26][0]++;
      cov_2bhih41kwf().s[68]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account ID, name and type are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[26][1]++;
    }
    // Validate account type
    const validTypes =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[69]++, ["asset", "liability", "equity", "income", "expense"]);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[70]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[28][0]++;
      cov_2bhih41kwf().s[71]++;
      return _server.NextResponse.json({
        success: false,
        message: `Account type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[28][1]++;
    }
    // Check if account exists
    const existingAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[72]++, await _prisma.default.account.findUnique({
      where: {
        id: parseInt(id, 10)
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[73]++;
    if (!existingAccount) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[29][0]++;
      cov_2bhih41kwf().s[74]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[29][1]++;
    }
    // Calculate new balance if provided
    const newBalance =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[75]++, balance !== undefined ?
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[30][0]++, balance) :
    /* istanbul ignore next */
    (cov_2bhih41kwf().b[30][1]++, existingAccount.balance));
    // Validate parent account if parentId is provided
    /* istanbul ignore next */
    cov_2bhih41kwf().s[76]++;
    if (parentId) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[31][0]++;
      const parentAccount =
      /* istanbul ignore next */
      (cov_2bhih41kwf().s[77]++, await _prisma.default.account.findUnique({
        where: {
          id: parseInt(parentId, 10)
        }
      }));
      /* istanbul ignore next */
      cov_2bhih41kwf().s[78]++;
      if (!parentAccount) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[32][0]++;
        cov_2bhih41kwf().s[79]++;
        return _server.NextResponse.json({
          success: false,
          message: "Parent account not found"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[32][1]++;
      }
      // Ensure parent and child have compatible types
      cov_2bhih41kwf().s[80]++;
      if (parentAccount.type !== type) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[33][0]++;
        cov_2bhih41kwf().s[81]++;
        return _server.NextResponse.json({
          success: false,
          message: "Sub-account type must match parent account type"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[33][1]++;
      }
      // Prevent circular reference
      cov_2bhih41kwf().s[82]++;
      if (parseInt(parentId, 10) === parseInt(id, 10)) {
        /* istanbul ignore next */
        cov_2bhih41kwf().b[34][0]++;
        cov_2bhih41kwf().s[83]++;
        return _server.NextResponse.json({
          success: false,
          message: "Account cannot be its own parent"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bhih41kwf().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[31][1]++;
    }
    // Update the account
    const updatedAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[84]++, await _prisma.default.account.update({
      where: {
        id: parseInt(id, 10)
      },
      data: {
        name,
        type,
        balance: newBalance,
        description,
        isActive: isActive !== undefined ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[35][0]++, isActive) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[35][1]++, existingAccount.isActive),
        parentId: parentId !== undefined ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[36][0]++, parentId ?
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[37][0]++, parseInt(parentId, 10)) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[37][1]++, null)) :
        /* istanbul ignore next */
        (cov_2bhih41kwf().b[36][1]++, existingAccount.parentId)
      },
      include: {
        parent: true,
        subAccounts: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[85]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account updated successfully",
      data: transformAccountForClient(updatedAccount)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[86]++;
    console.error("Error updating account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[87]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[38][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[38][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_2bhih41kwf().f[12]++;
  cov_2bhih41kwf().s[88]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[89]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[90]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[91]++;
    if (!id) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[39][0]++;
      cov_2bhih41kwf().s[92]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[39][1]++;
    }
    // Check if account exists
    const existingAccount =
    /* istanbul ignore next */
    (cov_2bhih41kwf().s[93]++, await _prisma.default.account.findUnique({
      where: {
        id: parseInt(id, 10)
      },
      include: {
        subAccounts: true,
        transactions: true
      }
    }));
    /* istanbul ignore next */
    cov_2bhih41kwf().s[94]++;
    if (!existingAccount) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[40][0]++;
      cov_2bhih41kwf().s[95]++;
      return _server.NextResponse.json({
        success: false,
        message: "Account not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[40][1]++;
    }
    // Check if account has sub-accounts
    cov_2bhih41kwf().s[96]++;
    if (existingAccount.subAccounts.length > 0) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[41][0]++;
      cov_2bhih41kwf().s[97]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete account with sub-accounts. Please delete or reassign sub-accounts first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[41][1]++;
    }
    // Check if account has transactions
    cov_2bhih41kwf().s[98]++;
    if (existingAccount.transactions.length > 0) {
      /* istanbul ignore next */
      cov_2bhih41kwf().b[42][0]++;
      cov_2bhih41kwf().s[99]++;
      return _server.NextResponse.json({
        success: false,
        message: "Cannot delete account with existing transactions. Please delete or reassign transactions first."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bhih41kwf().b[42][1]++;
    }
    // Delete the account
    cov_2bhih41kwf().s[100]++;
    await _prisma.default.account.delete({
      where: {
        id: parseInt(id, 10)
      }
    });
    /* istanbul ignore next */
    cov_2bhih41kwf().s[101]++;
    return _server.NextResponse.json({
      success: true,
      message: "Account deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bhih41kwf().s[102]++;
    console.error("Error deleting account:", error);
    /* istanbul ignore next */
    cov_2bhih41kwf().s[103]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting account",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[43][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2bhih41kwf().b[43][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUxFVEUiLCJjb3ZfMmJoaWg0MWt3ZiIsImYiLCJzIiwiR0VUIiwiUEFUQ0giLCJQT1NUIiwidHJhbnNmb3JtQWNjb3VudEZvckNsaWVudCIsImFjY291bnQiLCJiYWxhbmNlIiwiTnVtYmVyIiwicGFyZW50IiwiYiIsInN1YkFjY291bnRzIiwibWFwIiwicmVxdWVzdCIsInVzZXJJZCIsIl9hdXRoIiwiZ2V0VXNlcklkRnJvbVRva2VuIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsInN0YXR1cyIsInVzZXIiLCJfcHJpc21hIiwiZGVmYXVsdCIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlkIiwic2VsZWN0IiwiYWxsb3dlZEFjY291bnRzIiwicm9sZU5hbWUiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJnZXQiLCJzdW1tYXJ5IiwiYWRtaW5QZXJtaXNzaW9uIiwidmFsaWRhdGVUb2tlblBlcm1pc3Npb24iLCJpc0FkbWluIiwiaXNWYWxpZCIsInBhcnNlSW50IiwiaW5jbHVkZSIsIm9yZGVyQnkiLCJuYW1lIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJ0b1N0cmluZyIsImRhdGEiLCJhY2NvdW50cyIsImZpbmRNYW55IiwidHlwZSIsInBhcmVudElkIiwiaXNBY3RpdmUiLCJhbGxvd2VkQWNjb3VudElkcyIsImZpbHRlciIsImNvbnNvbGUiLCJsb2ciLCJqb2luIiwiZXJyb3IiLCJFcnJvciIsIlN0cmluZyIsImRlc2NyaXB0aW9uIiwidmFsaWRUeXBlcyIsInBhcmVudEFjY291bnQiLCJuZXdBY2NvdW50IiwiY3JlYXRlIiwidW5kZWZpbmVkIiwiZXhpc3RpbmdBY2NvdW50IiwibmV3QmFsYW5jZSIsInVwZGF0ZWRBY2NvdW50IiwidXBkYXRlIiwidHJhbnNhY3Rpb25zIiwiZGVsZXRlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9hY2NvdW50aW5nL2FjY291bnRzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSwgTmV4dFJlcXVlc3QgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgcHJpc21hIGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgeyB2YWxpZGF0ZVRva2VuUGVybWlzc2lvbiwgZ2V0VXNlcklkRnJvbVRva2VuIH0gZnJvbSAnQC9saWIvYXV0aCc7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gYWNjb3VudCBkYXRhIGZvciBjbGllbnQgY29uc3VtcHRpb25cbmNvbnN0IHRyYW5zZm9ybUFjY291bnRGb3JDbGllbnQgPSAoYWNjb3VudDogYW55KTogYW55ID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5hY2NvdW50LFxuICAgICAgICBiYWxhbmNlOiBOdW1iZXIoYWNjb3VudC5iYWxhbmNlKSwgLy8gQ29udmVydCBEZWNpbWFsIHRvIG51bWJlclxuICAgICAgICBwYXJlbnQ6IGFjY291bnQucGFyZW50ID8gdHJhbnNmb3JtQWNjb3VudEZvckNsaWVudChhY2NvdW50LnBhcmVudCkgOiBudWxsLFxuICAgICAgICBzdWJBY2NvdW50czogYWNjb3VudC5zdWJBY2NvdW50cyA/IGFjY291bnQuc3ViQWNjb3VudHMubWFwKHRyYW5zZm9ybUFjY291bnRGb3JDbGllbnQpIDogW11cbiAgICB9O1xufTtcblxuLy8gR0VUOiBGZXRjaCBhbGwgYWNjb3VudHMgb3IgYSBzaW5nbGUgYWNjb3VudCBieSBJRFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCB1c2VyIGluZm9ybWF0aW9uIGZvciBwZXJtaXNzaW9uIGZpbHRlcmluZ1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCBnZXRVc2VySWRGcm9tVG9rZW4ocmVxdWVzdCk7XG4gICAgICAgIGlmICghdXNlcklkKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkQWNjb3VudHM6IHRydWUsXG4gICAgICAgICAgICAgICAgcm9sZU5hbWU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGNvbnN0IGlkID0gc2VhcmNoUGFyYW1zLmdldCgnaWQnKTtcbiAgICAgICAgY29uc3Qgc3VtbWFyeSA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N1bW1hcnknKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB1c2VyIGlzIGFkbWluXG4gICAgICAgIGNvbnN0IGFkbWluUGVybWlzc2lvbiA9IGF3YWl0IHZhbGlkYXRlVG9rZW5QZXJtaXNzaW9uKHJlcXVlc3QsICdhZG1pbjphbGwnKTtcbiAgICAgICAgY29uc3QgaXNBZG1pbiA9IGFkbWluUGVybWlzc2lvbi5pc1ZhbGlkO1xuXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgLy8gRmV0Y2ggYSBzaW5nbGUgYWNjb3VudCBieSBJRCB3aXRoIHJlbGF0aW9uc2hpcHNcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCBwcmlzbWEuYWNjb3VudC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoaWQsIDEwKSB9LFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdWJBY2NvdW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhc2MnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFhY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBY2NvdW50IG5vdCBmb3VuZCdcbiAgICAgICAgICAgICAgICB9LCB7IHN0YXR1czogNDA0IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBub24tYWRtaW4gdXNlciBoYXMgYWNjZXNzIHRvIHRoaXMgc3BlY2lmaWMgYWNjb3VudFxuICAgICAgICAgICAgaWYgKCFpc0FkbWluICYmIHVzZXIuYWxsb3dlZEFjY291bnRzICYmIHVzZXIuYWxsb3dlZEFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZXIuYWxsb3dlZEFjY291bnRzLmluY2x1ZGVzKGFjY291bnQuaWQudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FjY2VzcyBkZW5pZWQgdG8gdGhpcyBhY2NvdW50J1xuICAgICAgICAgICAgICAgICAgICB9LCB7IHN0YXR1czogNDAzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybUFjY291bnRGb3JDbGllbnQoYWNjb3VudClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFjY291bnRzO1xuXG4gICAgICAgIGlmIChzdW1tYXJ5ID09PSAnMScpIHtcbiAgICAgICAgICAgIC8vIExpZ2h0d2VpZ2h0IGZldGNoXG4gICAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IHByaXNtYS5hY2NvdW50LmZpbmRNYW55KHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudElkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3JkZXJCeTogeyBuYW1lOiAnYXNjJyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZ1bGwgZmV0Y2ggd2l0aCByZWxhdGlvbnNoaXBzXG4gICAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IHByaXNtYS5hY2NvdW50LmZpbmRNYW55KHtcbiAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3ViQWNjb3VudHM6IHsgb3JkZXJCeTogeyBuYW1lOiAnYXNjJyB9IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9yZGVyQnk6IHsgbmFtZTogJ2FzYycgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaWx0ZXIgYWNjb3VudHMgZm9yIG5vbi1hZG1pbiB1c2VycyBiYXNlZCBvbiBhbGxvd2VkQWNjb3VudHNcbiAgICAgICAgaWYgKCFpc0FkbWluICYmIHVzZXIuYWxsb3dlZEFjY291bnRzICYmIHVzZXIuYWxsb3dlZEFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRBY2NvdW50SWRzID0gdXNlci5hbGxvd2VkQWNjb3VudHMubWFwKGlkID0+IHBhcnNlSW50KGlkLCAxMCkpO1xuICAgICAgICAgICAgYWNjb3VudHMgPSBhY2NvdW50cy5maWx0ZXIoYWNjb3VudCA9PiBhbGxvd2VkQWNjb3VudElkcy5pbmNsdWRlcyhhY2NvdW50LmlkKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTm9uLWFkbWluIHVzZXIgJHt1c2VyLmlkfSAtIGZpbHRlcmVkIGFjY291bnRzIHRvIGFsbG93ZWQgb25lczogJHthbGxvd2VkQWNjb3VudElkcy5qb2luKCcsICcpfWApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQWRtaW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBZG1pbiB1c2VyICR7dXNlci5pZH0gLSBzaG93aW5nIGFsbCBhY2NvdW50c2ApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiBhY2NvdW50cy5tYXAodHJhbnNmb3JtQWNjb3VudEZvckNsaWVudClcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYWNjb3VudHM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgYWNjb3VudHMnLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICAgIH1cbn1cblxuLy8gUE9TVDogQ3JlYXRlIGEgbmV3IGFjY291bnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IG5hbWUsIHR5cGUsIGJhbGFuY2UsIGRlc2NyaXB0aW9uLCBpc0FjdGl2ZSwgcGFyZW50SWQgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgICBpZiAoIW5hbWUgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FjY291bnQgbmFtZSBhbmQgdHlwZSBhcmUgcmVxdWlyZWQnXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgYWNjb3VudCB0eXBlXG4gICAgICAgIGNvbnN0IHZhbGlkVHlwZXMgPSBbJ2Fzc2V0JywgJ2xpYWJpbGl0eScsICdlcXVpdHknLCAnaW5jb21lJywgJ2V4cGVuc2UnXTtcbiAgICAgICAgaWYgKCF2YWxpZFR5cGVzLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBY2NvdW50IHR5cGUgbXVzdCBiZSBvbmUgb2Y6ICR7dmFsaWRUeXBlcy5qb2luKCcsICcpfWBcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWxpZGF0ZSBwYXJlbnQgYWNjb3VudCBpZiBwYXJlbnRJZCBpcyBwcm92aWRlZFxuICAgICAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEFjY291bnQgPSBhd2FpdCBwcmlzbWEuYWNjb3VudC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQocGFyZW50SWQsIDEwKSB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFwYXJlbnRBY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXJlbnQgYWNjb3VudCBub3QgZm91bmQnXG4gICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5zdXJlIHBhcmVudCBhbmQgY2hpbGQgaGF2ZSBjb21wYXRpYmxlIHR5cGVzXG4gICAgICAgICAgICBpZiAocGFyZW50QWNjb3VudC50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdWItYWNjb3VudCB0eXBlIG11c3QgbWF0Y2ggcGFyZW50IGFjY291bnQgdHlwZSdcbiAgICAgICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBhY2NvdW50XG4gICAgICAgIGNvbnN0IG5ld0FjY291bnQgPSBhd2FpdCBwcmlzbWEuYWNjb3VudC5jcmVhdGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlIHx8IDAsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlICE9PSB1bmRlZmluZWQgPyBpc0FjdGl2ZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyZW50SWQ6IHBhcmVudElkID8gcGFyc2VJbnQocGFyZW50SWQsIDEwKSA6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YkFjY291bnRzOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0FjY291bnQgY3JlYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICAgICAgZGF0YTogdHJhbnNmb3JtQWNjb3VudEZvckNsaWVudChuZXdBY2NvdW50KVxuICAgICAgICB9LCB7IHN0YXR1czogMjAxIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGFjY291bnQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgY3JlYXRpbmcgYWNjb3VudCcsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxufVxuXG4vLyBQQVRDSDogVXBkYXRlIGFuIGFjY291bnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQQVRDSChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBpZCwgbmFtZSwgdHlwZSwgYmFsYW5jZSwgZGVzY3JpcHRpb24sIGlzQWN0aXZlLCBwYXJlbnRJZCB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgIGlmICghaWQgfHwgIW5hbWUgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FjY291bnQgSUQsIG5hbWUgYW5kIHR5cGUgYXJlIHJlcXVpcmVkJ1xuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIGFjY291bnQgdHlwZVxuICAgICAgICBjb25zdCB2YWxpZFR5cGVzID0gWydhc3NldCcsICdsaWFiaWxpdHknLCAnZXF1aXR5JywgJ2luY29tZScsICdleHBlbnNlJ107XG4gICAgICAgIGlmICghdmFsaWRUeXBlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQWNjb3VudCB0eXBlIG11c3QgYmUgb25lIG9mOiAke3ZhbGlkVHlwZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYWNjb3VudCBleGlzdHNcbiAgICAgICAgY29uc3QgZXhpc3RpbmdBY2NvdW50ID0gYXdhaXQgcHJpc21hLmFjY291bnQuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoaWQsIDEwKSB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghZXhpc3RpbmdBY2NvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBY2NvdW50IG5vdCBmb3VuZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGJhbGFuY2UgaWYgcHJvdmlkZWRcbiAgICAgICAgY29uc3QgbmV3QmFsYW5jZSA9IGJhbGFuY2UgIT09IHVuZGVmaW5lZCA/IGJhbGFuY2UgOiBleGlzdGluZ0FjY291bnQuYmFsYW5jZTtcblxuICAgICAgICAvLyBWYWxpZGF0ZSBwYXJlbnQgYWNjb3VudCBpZiBwYXJlbnRJZCBpcyBwcm92aWRlZFxuICAgICAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEFjY291bnQgPSBhd2FpdCBwcmlzbWEuYWNjb3VudC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQocGFyZW50SWQsIDEwKSB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFwYXJlbnRBY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXJlbnQgYWNjb3VudCBub3QgZm91bmQnXG4gICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5zdXJlIHBhcmVudCBhbmQgY2hpbGQgaGF2ZSBjb21wYXRpYmxlIHR5cGVzXG4gICAgICAgICAgICBpZiAocGFyZW50QWNjb3VudC50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdWItYWNjb3VudCB0eXBlIG11c3QgbWF0Y2ggcGFyZW50IGFjY291bnQgdHlwZSdcbiAgICAgICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGNpcmN1bGFyIHJlZmVyZW5jZVxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KHBhcmVudElkLCAxMCkgPT09IHBhcnNlSW50KGlkLCAxMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FjY291bnQgY2Fubm90IGJlIGl0cyBvd24gcGFyZW50J1xuICAgICAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGFjY291bnRcbiAgICAgICAgY29uc3QgdXBkYXRlZEFjY291bnQgPSBhd2FpdCBwcmlzbWEuYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGlkLCAxMCkgfSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgYmFsYW5jZTogbmV3QmFsYW5jZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZTogaXNBY3RpdmUgIT09IHVuZGVmaW5lZCA/IGlzQWN0aXZlIDogZXhpc3RpbmdBY2NvdW50LmlzQWN0aXZlLFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiBwYXJlbnRJZCAhPT0gdW5kZWZpbmVkID8gKHBhcmVudElkID8gcGFyc2VJbnQocGFyZW50SWQsIDEwKSA6IG51bGwpIDogZXhpc3RpbmdBY2NvdW50LnBhcmVudElkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgIHBhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWJBY2NvdW50czogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdBY2NvdW50IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybUFjY291bnRGb3JDbGllbnQodXBkYXRlZEFjY291bnQpXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGFjY291bnQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgdXBkYXRpbmcgYWNjb3VudCcsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxufVxuXG4vLyBERUxFVEU6IERlbGV0ZSBhbiBhY2NvdW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGNvbnN0IGlkID0gc2VhcmNoUGFyYW1zLmdldCgnaWQnKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBY2NvdW50IElEIGlzIHJlcXVpcmVkJ1xuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgZXhpc3RzXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQWNjb3VudCA9IGF3YWl0IHByaXNtYS5hY2NvdW50LmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGlkLCAxMCkgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICBzdWJBY2NvdW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnM6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFleGlzdGluZ0FjY291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FjY291bnQgbm90IGZvdW5kJ1xuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgaGFzIHN1Yi1hY2NvdW50c1xuICAgICAgICBpZiAoZXhpc3RpbmdBY2NvdW50LnN1YkFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCBkZWxldGUgYWNjb3VudCB3aXRoIHN1Yi1hY2NvdW50cy4gUGxlYXNlIGRlbGV0ZSBvciByZWFzc2lnbiBzdWItYWNjb3VudHMgZmlyc3QuJ1xuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgaGFzIHRyYW5zYWN0aW9uc1xuICAgICAgICBpZiAoZXhpc3RpbmdBY2NvdW50LnRyYW5zYWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDYW5ub3QgZGVsZXRlIGFjY291bnQgd2l0aCBleGlzdGluZyB0cmFuc2FjdGlvbnMuIFBsZWFzZSBkZWxldGUgb3IgcmVhc3NpZ24gdHJhbnNhY3Rpb25zIGZpcnN0LidcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWxldGUgdGhlIGFjY291bnRcbiAgICAgICAgYXdhaXQgcHJpc21hLmFjY291bnQuZGVsZXRlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXJzZUludChpZCwgMTApIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiAnQWNjb3VudCBkZWxldGVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgYWNjb3VudDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBkZWxldGluZyBhY2NvdW50JyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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