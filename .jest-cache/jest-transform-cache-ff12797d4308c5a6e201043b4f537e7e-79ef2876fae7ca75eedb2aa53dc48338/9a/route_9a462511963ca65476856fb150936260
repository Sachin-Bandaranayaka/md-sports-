8f02bc38091390c2528bef944564deac
"use strict";

/* istanbul ignore next */
function cov_1ejhkpqkkv() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/pdf/route.ts";
  var hash = "a90001652809d8877edb7b1b6c718a407d8c8659";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/pdf/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 19
        },
        end: {
          line: 15,
          column: 38
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 21,
          column: 15
        }
      },
      "9": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "10": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "11": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "12": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 50
        }
      },
      "13": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 62
        }
      },
      "14": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 44
          },
          end: {
            line: 53,
            column: 57
          }
        }, {
          start: {
            line: 53,
            column: 60
          },
          end: {
            line: 53,
            column: 73
          }
        }],
        line: 53
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/[id]/pdf/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid invoice ID' },\n                { status: 400 }\n            );\n        }\n\n        // Fetch invoice with all related data\n        const invoice = await prisma.invoice.findUnique({\n            where: { id },\n            include: {\n                customer: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                },\n                payments: true\n            }\n        });\n\n        if (!invoice) {\n            return NextResponse.json(\n                { error: 'Invoice not found' },\n                { status: 404 }\n            );\n        }\n\n        // Return the invoice data for client-side PDF generation\n        // This way we avoid server-side PDF generation which can be complex with Next.js API routes\n        return NextResponse.json(invoice);\n    } catch (error) {\n        console.error('Error generating invoice PDF:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error generating invoice PDF',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "params", "id", "parseInt", "isNaN", "NextResponse", "json", "error", "status", "invoice", "prisma", "findUnique", "where", "include", "customer", "items", "product", "payments", "console", "success", "message", "Error", "String"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA,IAClBC,OAAgB,EAChB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACA,MAAMC,KAAKC,SAASF,OAAOC,EAAE;QAE7B,IAAIE,MAAMF,KAAK;YACX,OAAOG,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAqB,GAC9B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,sCAAsC;QACtC,MAAMC,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,UAAU,CAAC;YAC5CC,OAAO;gBAAEV;YAAG;YACZW,SAAS;gBACLC,UAAU;gBACVC,OAAO;oBACHF,SAAS;wBACLG,SAAS;oBACb;gBACJ;gBACAC,UAAU;YACd;QACJ;QAEA,IAAI,CAACR,SAAS;YACV,OAAOJ,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAoB,GAC7B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,yDAAyD;QACzD,4FAA4F;QAC5F,OAAOH,oBAAY,CAACC,IAAI,CAACG;IAC7B,EAAE,OAAOF,OAAO;QACZW,QAAQX,KAAK,CAAC,iCAAiCA;QAC/C,OAAOF,oBAAY,CAACC,IAAI,CACpB;YACIa,SAAS;YACTC,SAAS;YACTb,OAAOA,iBAAiBc,QAAQd,MAAMa,OAAO,GAAGE,OAAOf;QAC3D,GACA;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a90001652809d8877edb7b1b6c718a407d8c8659"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ejhkpqkkv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ejhkpqkkv();
cov_1ejhkpqkkv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ejhkpqkkv().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ejhkpqkkv().f[0]++;
    cov_1ejhkpqkkv().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ejhkpqkkv().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1ejhkpqkkv().s[4]++, require("../../../../../lib/prisma"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1ejhkpqkkv().f[1]++;
  cov_1ejhkpqkkv().s[5]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_1ejhkpqkkv().s[6]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_1ejhkpqkkv().s[7]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1ejhkpqkkv().b[0][0]++;
      cov_1ejhkpqkkv().s[8]++;
      return _server.NextResponse.json({
        error: "Invalid invoice ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ejhkpqkkv().b[0][1]++;
    }
    // Fetch invoice with all related data
    const invoice =
    /* istanbul ignore next */
    (cov_1ejhkpqkkv().s[9]++, await _prisma.prisma.invoice.findUnique({
      where: {
        id
      },
      include: {
        customer: true,
        items: {
          include: {
            product: true
          }
        },
        payments: true
      }
    }));
    /* istanbul ignore next */
    cov_1ejhkpqkkv().s[10]++;
    if (!invoice) {
      /* istanbul ignore next */
      cov_1ejhkpqkkv().b[1][0]++;
      cov_1ejhkpqkkv().s[11]++;
      return _server.NextResponse.json({
        error: "Invoice not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ejhkpqkkv().b[1][1]++;
    }
    // Return the invoice data for client-side PDF generation
    // This way we avoid server-side PDF generation which can be complex with Next.js API routes
    cov_1ejhkpqkkv().s[12]++;
    return _server.NextResponse.json(invoice);
  } catch (error) {
    /* istanbul ignore next */
    cov_1ejhkpqkkv().s[13]++;
    console.error("Error generating invoice PDF:", error);
    /* istanbul ignore next */
    cov_1ejhkpqkkv().s[14]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error generating invoice PDF",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ejhkpqkkv().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ejhkpqkkv().b[2][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWVqaGtwcWtrdiIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJwYXJhbXMiLCJmIiwiaWQiLCJwYXJzZUludCIsImlzTmFOIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJpbnZvaWNlIiwiX3ByaXNtYSIsInByaXNtYSIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImluY2x1ZGUiLCJjdXN0b21lciIsIml0ZW1zIiwicHJvZHVjdCIsInBheW1lbnRzIiwiY29uc29sZSIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiRXJyb3IiLCJTdHJpbmciXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL2ludm9pY2VzL1tpZF0vcGRmL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICB7IHBhcmFtcyB9OiB7IHBhcmFtczogeyBpZDogc3RyaW5nIH0gfVxuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludChwYXJhbXMuaWQpO1xuXG4gICAgICAgIGlmIChpc05hTihpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgICAgICB7IGVycm9yOiAnSW52YWxpZCBpbnZvaWNlIElEJyB9LFxuICAgICAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZldGNoIGludm9pY2Ugd2l0aCBhbGwgcmVsYXRlZCBkYXRhXG4gICAgICAgIGNvbnN0IGludm9pY2UgPSBhd2FpdCBwcmlzbWEuaW52b2ljZS5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgY3VzdG9tZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXltZW50czogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWludm9pY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgICAgICB7IGVycm9yOiAnSW52b2ljZSBub3QgZm91bmQnIH0sXG4gICAgICAgICAgICAgICAgeyBzdGF0dXM6IDQwNCB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnZvaWNlIGRhdGEgZm9yIGNsaWVudC1zaWRlIFBERiBnZW5lcmF0aW9uXG4gICAgICAgIC8vIFRoaXMgd2F5IHdlIGF2b2lkIHNlcnZlci1zaWRlIFBERiBnZW5lcmF0aW9uIHdoaWNoIGNhbiBiZSBjb21wbGV4IHdpdGggTmV4dC5qcyBBUEkgcm91dGVzXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihpbnZvaWNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGludm9pY2UgUERGOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBnZW5lcmF0aW5nIGludm9pY2UgUERGJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQVVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7K0JBUFU7Ozs7OztXQUFBQyxHQUFBOzs7OztrQ0FITzs7O2tDQUNOO0FBRWhCLGVBQWVBLElBQ2xCQyxPQUFnQixFQUNoQjtFQUFFQztBQUFNLENBQThCO0VBQUE7RUFBQUwsY0FBQSxHQUFBTSxDQUFBO0VBQUFOLGNBQUEsR0FBQUUsQ0FBQTtFQUV0QyxJQUFJO0lBQ0EsTUFBTUssRUFBQTtJQUFBO0lBQUEsQ0FBQVAsY0FBQSxHQUFBRSxDQUFBLE9BQUtNLFFBQUEsQ0FBU0gsTUFBQSxDQUFPRSxFQUFFO0lBQUE7SUFBQVAsY0FBQSxHQUFBRSxDQUFBO0lBRTdCLElBQUlPLEtBQUEsQ0FBTUYsRUFBQSxHQUFLO01BQUE7TUFBQVAsY0FBQSxHQUFBVSxDQUFBO01BQUFWLGNBQUEsR0FBQUUsQ0FBQTtNQUNYLE9BQU9TLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3BCO1FBQUVDLEtBQUEsRUFBTztNQUFxQixHQUM5QjtRQUFFQyxNQUFBLEVBQVE7TUFBSTtJQUV0QjtJQUFBO0lBQUE7TUFBQWYsY0FBQSxHQUFBVSxDQUFBO0lBQUE7SUFFQTtJQUNBLE1BQU1NLE9BQUE7SUFBQTtJQUFBLENBQUFoQixjQUFBLEdBQUFFLENBQUEsT0FBVSxNQUFNZSxPQUFBLENBQUFDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDRyxVQUFVLENBQUM7TUFDNUNDLEtBQUEsRUFBTztRQUFFYjtNQUFHO01BQ1pjLE9BQUEsRUFBUztRQUNMQyxRQUFBLEVBQVU7UUFDVkMsS0FBQSxFQUFPO1VBQ0hGLE9BQUEsRUFBUztZQUNMRyxPQUFBLEVBQVM7VUFDYjtRQUNKO1FBQ0FDLFFBQUEsRUFBVTtNQUNkO0lBQ0o7SUFBQTtJQUFBekIsY0FBQSxHQUFBRSxDQUFBO0lBRUEsSUFBSSxDQUFDYyxPQUFBLEVBQVM7TUFBQTtNQUFBaEIsY0FBQSxHQUFBVSxDQUFBO01BQUFWLGNBQUEsR0FBQUUsQ0FBQTtNQUNWLE9BQU9TLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3BCO1FBQUVDLEtBQUEsRUFBTztNQUFvQixHQUM3QjtRQUFFQyxNQUFBLEVBQVE7TUFBSTtJQUV0QjtJQUFBO0lBQUE7TUFBQWYsY0FBQSxHQUFBVSxDQUFBO0lBQUE7SUFFQTtJQUNBO0lBQUFWLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLE9BQU9TLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUNHLE9BQUE7RUFDN0IsRUFBRSxPQUFPRixLQUFBLEVBQU87SUFBQTtJQUFBZCxjQUFBLEdBQUFFLENBQUE7SUFDWndCLE9BQUEsQ0FBUVosS0FBSyxDQUFDLGlDQUFpQ0EsS0FBQTtJQUFBO0lBQUFkLGNBQUEsR0FBQUUsQ0FBQTtJQUMvQyxPQUFPUyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUNwQjtNQUNJYyxPQUFBLEVBQVM7TUFDVEMsT0FBQSxFQUFTO01BQ1RkLEtBQUEsRUFBT0EsS0FBQSxZQUFpQmUsS0FBQTtNQUFBO01BQUEsQ0FBQTdCLGNBQUEsR0FBQVUsQ0FBQSxVQUFRSSxLQUFBLENBQU1jLE9BQU87TUFBQTtNQUFBLENBQUE1QixjQUFBLEdBQUFVLENBQUEsVUFBR29CLE1BQUEsQ0FBT2hCLEtBQUE7SUFDM0QsR0FDQTtNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUV0QjtBQUNKIiwiaWdub3JlTGlzdCI6W119