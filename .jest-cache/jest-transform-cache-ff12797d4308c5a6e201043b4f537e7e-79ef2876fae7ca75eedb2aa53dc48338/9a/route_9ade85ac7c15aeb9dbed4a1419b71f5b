9891ebc0e7b68431d82a93f3519b14e5
"use strict";

/* istanbul ignore next */
function cov_bxvohm3py() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/route.ts";
  var hash = "fb50aec8a2a032b39dbce899aa7b1291ee003808";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "9": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "10": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 77
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "12": {
        start: {
          line: 32,
          column: 28
        },
        end: {
          line: 32,
          column: 88
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "15": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "16": {
        start: {
          line: 38,
          column: 31
        },
        end: {
          line: 38,
          column: 43
        }
      },
      "17": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 40
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "19": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "20": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "21": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "22": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "23": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "24": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 53
        }
      },
      "25": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "26": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 88
        }
      },
      "27": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "28": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 31
        }
      },
      "29": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 243,
          column: 5
        }
      },
      "30": {
        start: {
          line: 107,
          column: 31
        },
        end: {
          line: 107,
          column: 43
        }
      },
      "31": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 40
        }
      },
      "32": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "33": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "34": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "36": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "37": {
        start: {
          line: 131,
          column: 21
        },
        end: {
          line: 131,
          column: 37
        }
      },
      "38": {
        start: {
          line: 132,
          column: 86
        },
        end: {
          line: 132,
          column: 90
        }
      },
      "39": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 56
        }
      },
      "40": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "41": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "42": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "43": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "44": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "45": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "46": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "47": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 165,
          column: 15
        }
      },
      "48": {
        start: {
          line: 168,
          column: 28
        },
        end: {
          line: 175,
          column: 10
        }
      },
      "49": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "50": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "51": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "52": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "53": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "54": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 61
        }
      },
      "55": {
        start: {
          line: 192,
          column: 34
        },
        end: {
          line: 192,
          column: 61
        }
      },
      "56": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 67
        }
      },
      "57": {
        start: {
          line: 193,
          column: 36
        },
        end: {
          line: 193,
          column: 67
        }
      },
      "58": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "59": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "60": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 59
        }
      },
      "61": {
        start: {
          line: 200,
          column: 28
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "62": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "63": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 53
        }
      },
      "64": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "65": {
        start: {
          line: 246,
          column: 28
        },
        end: {
          line: 246,
          column: 88
        }
      },
      "66": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "67": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 31
        }
      },
      "68": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "69": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 252,
          column: 43
        }
      },
      "70": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 40
        }
      },
      "71": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "72": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 260,
          column: 15
        }
      },
      "73": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 267,
          column: 10
        }
      },
      "74": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "75": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 274,
          column: 15
        }
      },
      "76": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "77": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 285,
          column: 11
        }
      },
      "78": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 53
        }
      },
      "79": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 18
          }
        },
        loc: {
          start: {
            line: 31,
            column: 36
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 100,
            column: 18
          }
        },
        loc: {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 244,
            column: 1
          }
        },
        line: 100
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 245,
            column: 15
          },
          end: {
            line: 245,
            column: 21
          }
        },
        loc: {
          start: {
            line: 245,
            column: 39
          },
          end: {
            line: 295,
            column: 1
          }
        },
        line: 245
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "8": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "11": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "12": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 24
          }
        }, {
          start: {
            line: 159,
            column: 28
          },
          end: {
            line: 159,
            column: 52
          }
        }],
        line: 159
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 188,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 27
          },
          end: {
            line: 188,
            column: 41
          }
        }, {
          start: {
            line: 188,
            column: 44
          },
          end: {
            line: 188,
            column: 48
          }
        }],
        line: 188
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 189,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 189,
            column: 36
          }
        }, {
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 189,
            column: 42
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 192,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 192,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "18": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "19": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "20": {
        loc: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "21": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "22": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport bcrypt from 'bcryptjs';\n\n// GET: Get user by ID\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const userId = resolvedParams.id;\n\n        if (!userId) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid user ID' },\n                { status: 400 }\n            );\n        }\n\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json(\n                { success: false, message: 'User not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json({\n            success: true,\n            user\n        });\n    } catch (error) {\n        console.error(`Error fetching user:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch user' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT: Update user\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const userId = resolvedParams.id;\n\n        if (!userId) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid user ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check if user exists\n        const existingUser = await prisma.user.findUnique({\n            where: { id: userId }\n        });\n\n        if (!existingUser) {\n            return NextResponse.json(\n                { success: false, message: 'User not found' },\n                { status: 404 }\n            );\n        }\n\n        const body = await req.json();\n        const {\n            name,\n            email,\n            phone,\n            password,\n            roleId,\n            shop,\n            permissions,\n            isActive\n        } = body;\n\n        console.log('Received user update data:', body);\n\n        // Validation\n        if (!name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!shop) {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!permissions || permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Check if email is already taken by another user\n        const emailExists = await prisma.user.findFirst({\n            where: {\n                email: email,\n                id: { not: userId }\n            }\n        });\n\n        if (emailExists) {\n            return NextResponse.json(\n                { success: false, message: 'Email is already taken by another user' },\n                { status: 400 }\n            );\n        }\n\n        // Prepare update data\n        const updateData: any = {\n            name: name,\n            email: email,\n            shopId: shop ? parseInt(shop) : null,\n            permissions: permissions || [],\n        };\n\n        if (phone !== undefined) updateData.phone = phone;\n        if (roleId !== undefined) updateData.roleId = roleId;\n        if (isActive !== undefined) updateData.isActive = isActive;\n\n        // Hash password if provided\n        if (password) {\n            updateData.password = await bcrypt.hash(password, 12);\n        }\n\n        console.log('Final user update data:', updateData);\n\n        // Update user\n        const updatedUser = await prisma.user.update({\n            where: { id: userId },\n            data: updateData,\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                permissions: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'User updated successfully',\n            user: updatedUser\n        });\n    } catch (error) {\n        console.error(`Error updating user:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to update user' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete user\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        const userId = resolvedParams.id;\n\n        if (!userId) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid user ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check if user exists\n        const existingUser = await prisma.user.findUnique({\n            where: { id: userId }\n        });\n\n        if (!existingUser) {\n            return NextResponse.json(\n                { success: false, message: 'User not found' },\n                { status: 404 }\n            );\n        }\n\n        // Delete user\n        await prisma.user.delete({\n            where: { id: userId }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'User deleted successfully'\n        });\n    } catch (error) {\n        console.error(`Error deleting user:`, error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete user' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "req", "params", "permissionError", "requirePermission", "resolvedParams", "userId", "id", "NextResponse", "json", "success", "message", "status", "user", "prisma", "findUnique", "where", "select", "name", "email", "phone", "isActive", "roleId", "shopId", "roleName", "permissions", "createdAt", "updatedAt", "role", "shop", "error", "console", "existingUser", "body", "password", "log", "length", "emailExists", "findFirst", "not", "updateData", "parseInt", "undefined", "bcrypt", "hash", "updatedUser", "update", "data", "delete"],
      mappings: ";;;;;;;;;;;IAwOsBA,MAAM;eAANA;;IAlOAC,GAAG;eAAHA;;IAuEAC,GAAG;eAAHA;;;wBA7EoB;+DACvB;4BACe;iEACf;;;;;;AAGZ,eAAeD,IAClBE,GAAgB,EAChB,EAAEC,MAAM,EAAuC;IAE/C,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeH;IAC/D,IAAIE,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,2CAA2C;QAC3C,MAAME,iBAAiB,MAAMH;QAC7B,MAAMI,SAASD,eAAeE,EAAE;QAEhC,IAAI,CAACD,QAAQ;YACT,OAAOE,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAkB,GAC7C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMC,OAAO,MAAMC,eAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YACtCC,OAAO;gBAAET,IAAID;YAAO;YACpBW,QAAQ;gBACJV,IAAI;gBACJW,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,UAAU;gBACVC,QAAQ;gBACRC,QAAQ;gBACRC,UAAU;gBACVC,aAAa;gBACbC,WAAW;gBACXC,WAAW;gBACXC,MAAM;oBACFX,QAAQ;wBACJV,IAAI;wBACJW,MAAM;oBACV;gBACJ;gBACAW,MAAM;oBACFZ,QAAQ;wBACJV,IAAI;wBACJW,MAAM;oBACV;gBACJ;YACJ;QACJ;QAEA,IAAI,CAACL,MAAM;YACP,OAAOL,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAiB,GAC5C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTG;QACJ;IACJ,EAAE,OAAOiB,OAAO;QACZC,QAAQD,KAAK,CAAC,CAAC,oBAAoB,CAAC,EAAEA;QACtC,OAAOtB,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAAuB,GAClD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeZ,IAClBC,GAAgB,EAChB,EAAEC,MAAM,EAAuC;IAE/C,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeH;IAC/D,IAAIE,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,2CAA2C;QAC3C,MAAME,iBAAiB,MAAMH;QAC7B,MAAMI,SAASD,eAAeE,EAAE;QAEhC,IAAI,CAACD,QAAQ;YACT,OAAOE,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAkB,GAC7C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,uBAAuB;QACvB,MAAMoB,eAAe,MAAMlB,eAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAID;YAAO;QACxB;QAEA,IAAI,CAAC0B,cAAc;YACf,OAAOxB,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAiB,GAC5C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMqB,OAAO,MAAMhC,IAAIQ,IAAI;QAC3B,MAAM,EACFS,IAAI,EACJC,KAAK,EACLC,KAAK,EACLc,QAAQ,EACRZ,MAAM,EACNO,IAAI,EACJJ,WAAW,EACXJ,QAAQ,EACX,GAAGY;QAEJF,QAAQI,GAAG,CAAC,8BAA8BF;QAE1C,aAAa;QACb,IAAI,CAACf,MAAM;YACP,OAAOV,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAmB,GAC9C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACO,OAAO;YACR,OAAOX,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAoB,GAC/C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACiB,MAAM;YACP,OAAOrB,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAA8B,GACzD;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,IAAI,CAACa,eAAeA,YAAYW,MAAM,KAAK,GAAG;YAC1C,OAAO5B,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAsC,GACjE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,kDAAkD;QAClD,MAAMyB,cAAc,MAAMvB,eAAM,CAACD,IAAI,CAACyB,SAAS,CAAC;YAC5CtB,OAAO;gBACHG,OAAOA;gBACPZ,IAAI;oBAAEgC,KAAKjC;gBAAO;YACtB;QACJ;QAEA,IAAI+B,aAAa;YACb,OAAO7B,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAyC,GACpE;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,sBAAsB;QACtB,MAAM4B,aAAkB;YACpBtB,MAAMA;YACNC,OAAOA;YACPI,QAAQM,OAAOY,SAASZ,QAAQ;YAChCJ,aAAaA,eAAe,EAAE;QAClC;QAEA,IAAIL,UAAUsB,WAAWF,WAAWpB,KAAK,GAAGA;QAC5C,IAAIE,WAAWoB,WAAWF,WAAWlB,MAAM,GAAGA;QAC9C,IAAID,aAAaqB,WAAWF,WAAWnB,QAAQ,GAAGA;QAElD,4BAA4B;QAC5B,IAAIa,UAAU;YACVM,WAAWN,QAAQ,GAAG,MAAMS,iBAAM,CAACC,IAAI,CAACV,UAAU;QACtD;QAEAH,QAAQI,GAAG,CAAC,2BAA2BK;QAEvC,cAAc;QACd,MAAMK,cAAc,MAAM/B,eAAM,CAACD,IAAI,CAACiC,MAAM,CAAC;YACzC9B,OAAO;gBAAET,IAAID;YAAO;YACpByC,MAAMP;YACNvB,QAAQ;gBACJV,IAAI;gBACJW,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,UAAU;gBACVC,QAAQ;gBACRC,QAAQ;gBACRE,aAAa;gBACbC,WAAW;gBACXC,WAAW;gBACXC,MAAM;oBACFX,QAAQ;wBACJV,IAAI;wBACJW,MAAM;oBACV;gBACJ;gBACAW,MAAM;oBACFZ,QAAQ;wBACJV,IAAI;wBACJW,MAAM;oBACV;gBACJ;YACJ;QACJ;QAEA,OAAOV,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTE,MAAMgC;QACV;IACJ,EAAE,OAAOf,OAAO;QACZC,QAAQD,KAAK,CAAC,CAAC,oBAAoB,CAAC,EAAEA;QACtC,OAAOtB,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAed,OAClBG,GAAgB,EAChB,EAAEC,MAAM,EAAuC;IAE/C,MAAMC,kBAAkB,MAAMC,IAAAA,6BAAiB,EAAC,eAAeH;IAC/D,IAAIE,iBAAiB;QACjB,OAAOA;IACX;IAEA,IAAI;QACA,2CAA2C;QAC3C,MAAME,iBAAiB,MAAMH;QAC7B,MAAMI,SAASD,eAAeE,EAAE;QAEhC,IAAI,CAACD,QAAQ;YACT,OAAOE,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAkB,GAC7C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,uBAAuB;QACvB,MAAMoB,eAAe,MAAMlB,eAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET,IAAID;YAAO;QACxB;QAEA,IAAI,CAAC0B,cAAc;YACf,OAAOxB,oBAAY,CAACC,IAAI,CACpB;gBAAEC,SAAS;gBAAOC,SAAS;YAAiB,GAC5C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,cAAc;QACd,MAAME,eAAM,CAACD,IAAI,CAACmC,MAAM,CAAC;YACrBhC,OAAO;gBAAET,IAAID;YAAO;QACxB;QAEA,OAAOE,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;QACb;IACJ,EAAE,OAAOmB,OAAO;QACZC,QAAQD,KAAK,CAAC,CAAC,oBAAoB,CAAC,EAAEA;QACtC,OAAOtB,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb50aec8a2a032b39dbce899aa7b1291ee003808"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bxvohm3py = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bxvohm3py();
cov_bxvohm3py().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bxvohm3py().f[0]++;
  cov_bxvohm3py().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bxvohm3py().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_bxvohm3py().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_bxvohm3py().f[1]++;
    cov_bxvohm3py().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_bxvohm3py().f[2]++;
    cov_bxvohm3py().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_bxvohm3py().f[3]++;
    cov_bxvohm3py().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_bxvohm3py().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_bxvohm3py().s[8]++, _interop_require_default(require("../../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_bxvohm3py().s[9]++, require("../../../../lib/utils/middleware"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_bxvohm3py().s[10]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_bxvohm3py().f[4]++;
  cov_bxvohm3py().s[11]++;
  return /* istanbul ignore next */(cov_bxvohm3py().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_bxvohm3py().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_bxvohm3py().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_bxvohm3py().b[0][1]++, {
    default: obj
  });
}
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_bxvohm3py().f[5]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_bxvohm3py().s[12]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_bxvohm3py().s[13]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_bxvohm3py().b[2][0]++;
    cov_bxvohm3py().s[14]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_bxvohm3py().b[2][1]++;
  }
  cov_bxvohm3py().s[15]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[16]++, await params);
    const userId =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[17]++, resolvedParams.id);
    /* istanbul ignore next */
    cov_bxvohm3py().s[18]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[3][0]++;
      cov_bxvohm3py().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid user ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[3][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[20]++, await _prisma.default.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        isActive: true,
        roleId: true,
        shopId: true,
        roleName: true,
        permissions: true,
        createdAt: true,
        updatedAt: true,
        role: {
          select: {
            id: true,
            name: true
          }
        },
        shop: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_bxvohm3py().s[21]++;
    if (!user) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[4][0]++;
      cov_bxvohm3py().s[22]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[4][1]++;
    }
    cov_bxvohm3py().s[23]++;
    return _server.NextResponse.json({
      success: true,
      user
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bxvohm3py().s[24]++;
    console.error(`Error fetching user:`, error);
    /* istanbul ignore next */
    cov_bxvohm3py().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch user"
    }, {
      status: 500
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_bxvohm3py().f[6]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_bxvohm3py().s[26]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_bxvohm3py().s[27]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_bxvohm3py().b[5][0]++;
    cov_bxvohm3py().s[28]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_bxvohm3py().b[5][1]++;
  }
  cov_bxvohm3py().s[29]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[30]++, await params);
    const userId =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[31]++, resolvedParams.id);
    /* istanbul ignore next */
    cov_bxvohm3py().s[32]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[6][0]++;
      cov_bxvohm3py().s[33]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid user ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[6][1]++;
    }
    // Check if user exists
    const existingUser =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[34]++, await _prisma.default.user.findUnique({
      where: {
        id: userId
      }
    }));
    /* istanbul ignore next */
    cov_bxvohm3py().s[35]++;
    if (!existingUser) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[7][0]++;
      cov_bxvohm3py().s[36]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[7][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[37]++, await req.json());
    const {
      name,
      email,
      phone,
      password,
      roleId,
      shop,
      permissions,
      isActive
    } =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[38]++, body);
    /* istanbul ignore next */
    cov_bxvohm3py().s[39]++;
    console.log("Received user update data:", body);
    // Validation
    /* istanbul ignore next */
    cov_bxvohm3py().s[40]++;
    if (!name) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[8][0]++;
      cov_bxvohm3py().s[41]++;
      return _server.NextResponse.json({
        success: false,
        message: "Name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[8][1]++;
    }
    cov_bxvohm3py().s[42]++;
    if (!email) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[9][0]++;
      cov_bxvohm3py().s[43]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[9][1]++;
    }
    cov_bxvohm3py().s[44]++;
    if (!shop) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[10][0]++;
      cov_bxvohm3py().s[45]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop assignment is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[10][1]++;
    }
    cov_bxvohm3py().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_bxvohm3py().b[12][0]++, !permissions) ||
    /* istanbul ignore next */
    (cov_bxvohm3py().b[12][1]++, permissions.length === 0)) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[11][0]++;
      cov_bxvohm3py().s[47]++;
      return _server.NextResponse.json({
        success: false,
        message: "At least one permission is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[11][1]++;
    }
    // Check if email is already taken by another user
    const emailExists =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[48]++, await _prisma.default.user.findFirst({
      where: {
        email: email,
        id: {
          not: userId
        }
      }
    }));
    /* istanbul ignore next */
    cov_bxvohm3py().s[49]++;
    if (emailExists) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[13][0]++;
      cov_bxvohm3py().s[50]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email is already taken by another user"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[13][1]++;
    }
    // Prepare update data
    const updateData =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[51]++, {
      name: name,
      email: email,
      shopId: shop ?
      /* istanbul ignore next */
      (cov_bxvohm3py().b[14][0]++, parseInt(shop)) :
      /* istanbul ignore next */
      (cov_bxvohm3py().b[14][1]++, null),
      permissions:
      /* istanbul ignore next */
      (cov_bxvohm3py().b[15][0]++, permissions) ||
      /* istanbul ignore next */
      (cov_bxvohm3py().b[15][1]++, [])
    });
    /* istanbul ignore next */
    cov_bxvohm3py().s[52]++;
    if (phone !== undefined) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[16][0]++;
      cov_bxvohm3py().s[53]++;
      updateData.phone = phone;
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[16][1]++;
    }
    cov_bxvohm3py().s[54]++;
    if (roleId !== undefined) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[17][0]++;
      cov_bxvohm3py().s[55]++;
      updateData.roleId = roleId;
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[17][1]++;
    }
    cov_bxvohm3py().s[56]++;
    if (isActive !== undefined) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[18][0]++;
      cov_bxvohm3py().s[57]++;
      updateData.isActive = isActive;
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[18][1]++;
    }
    // Hash password if provided
    cov_bxvohm3py().s[58]++;
    if (password) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[19][0]++;
      cov_bxvohm3py().s[59]++;
      updateData.password = await _bcryptjs.default.hash(password, 12);
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[19][1]++;
    }
    cov_bxvohm3py().s[60]++;
    console.log("Final user update data:", updateData);
    // Update user
    const updatedUser =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[61]++, await _prisma.default.user.update({
      where: {
        id: userId
      },
      data: updateData,
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        isActive: true,
        roleId: true,
        shopId: true,
        permissions: true,
        createdAt: true,
        updatedAt: true,
        role: {
          select: {
            id: true,
            name: true
          }
        },
        shop: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_bxvohm3py().s[62]++;
    return _server.NextResponse.json({
      success: true,
      message: "User updated successfully",
      user: updatedUser
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bxvohm3py().s[63]++;
    console.error(`Error updating user:`, error);
    /* istanbul ignore next */
    cov_bxvohm3py().s[64]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to update user"
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_bxvohm3py().f[7]++;
  const permissionError =
  /* istanbul ignore next */
  (cov_bxvohm3py().s[65]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_bxvohm3py().s[66]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_bxvohm3py().b[20][0]++;
    cov_bxvohm3py().s[67]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_bxvohm3py().b[20][1]++;
  }
  cov_bxvohm3py().s[68]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[69]++, await params);
    const userId =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[70]++, resolvedParams.id);
    /* istanbul ignore next */
    cov_bxvohm3py().s[71]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[21][0]++;
      cov_bxvohm3py().s[72]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid user ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[21][1]++;
    }
    // Check if user exists
    const existingUser =
    /* istanbul ignore next */
    (cov_bxvohm3py().s[73]++, await _prisma.default.user.findUnique({
      where: {
        id: userId
      }
    }));
    /* istanbul ignore next */
    cov_bxvohm3py().s[74]++;
    if (!existingUser) {
      /* istanbul ignore next */
      cov_bxvohm3py().b[22][0]++;
      cov_bxvohm3py().s[75]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxvohm3py().b[22][1]++;
    }
    // Delete user
    cov_bxvohm3py().s[76]++;
    await _prisma.default.user.delete({
      where: {
        id: userId
      }
    });
    /* istanbul ignore next */
    cov_bxvohm3py().s[77]++;
    return _server.NextResponse.json({
      success: true,
      message: "User deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bxvohm3py().s[78]++;
    console.error(`Error deleting user:`, error);
    /* istanbul ignore next */
    cov_bxvohm3py().s[79]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to delete user"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,