fa8e8be3abd12c0cca675862eade830a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_globals.jest.mock("bcryptjs");
_globals.jest.mock("jsonwebtoken", ()=>({
        sign: _globals.jest.fn(),
        verify: _globals.jest.fn()
    }));
_globals.jest.mock("@prisma/client");
const mockBcrypt = _bcryptjs.default;
const mockJwt = _jsonwebtoken.default;
const mockPrisma = {
    user: {
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn()
    },
    refreshToken: {
        create: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    $disconnect: _globals.jest.fn()
};
// Mock the auth service (we'll test the actual implementation)
class AuthService {
    constructor(){
        this.prisma = mockPrisma;
    }
    async login(email, password) {
        // Find user by email
        const user = await this.prisma.user.findUnique({
            where: {
                email
            },
            select: {
                id: true,
                email: true,
                password: true,
                name: true,
                permissions: true,
                isActive: true,
                shopId: true
            }
        });
        if (!user) {
            throw new Error("Invalid credentials");
        }
        if (!user.isActive) {
            throw new Error("Account is deactivated");
        }
        // Verify password
        const isValidPassword = await _bcryptjs.default.compare(password, user.password);
        if (!isValidPassword) {
            throw new Error("Invalid credentials");
        }
        // Generate tokens
        const accessToken = this.generateAccessToken(user);
        const refreshToken = await this.generateRefreshToken(user.id);
        return {
            user: {
                id: user.id,
                email: user.email,
                name: user.name,
                permissions: user.permissions,
                shopId: user.shopId
            },
            accessToken,
            refreshToken
        };
    }
    generateAccessToken(user) {
        return _jsonwebtoken.default.sign({
            userId: user.id,
            email: user.email,
            permissions: user.permissions,
            shopId: user.shopId
        }, process.env.JWT_SECRET || "test-secret", {
            expiresIn: "15m"
        });
    }
    async generateRefreshToken(userId) {
        const token = _jsonwebtoken.default.sign({
            userId
        }, process.env.JWT_REFRESH_SECRET || "test-refresh-secret", {
            expiresIn: "7d"
        });
        // Store refresh token in database
        await this.prisma.refreshToken.create({
            data: {
                userId,
                token,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
            }
        });
        return token;
    }
    async verifyToken(token) {
        try {
            const decoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
            return decoded;
        } catch (error) {
            throw new Error("Invalid token");
        }
    }
    async refreshAccessToken(refreshToken) {
        // Verify refresh token
        const decoded = _jsonwebtoken.default.verify(refreshToken, process.env.JWT_REFRESH_SECRET || "test-refresh-secret");
        // Check if refresh token exists in database
        const storedToken = await this.prisma.refreshToken.findUnique({
            where: {
                token: refreshToken
            },
            include: {
                user: true
            }
        });
        if (!storedToken || storedToken.isRevoked) {
            throw new Error("Invalid refresh token");
        }
        if (new Date() > storedToken.expiresAt) {
            throw new Error("Refresh token expired");
        }
        // Generate new access token
        const newAccessToken = this.generateAccessToken(storedToken.user);
        return {
            accessToken: newAccessToken,
            user: {
                id: storedToken.user.id,
                email: storedToken.user.email,
                name: storedToken.user.name,
                permissions: storedToken.user.permissions,
                shopId: storedToken.user.shopId
            }
        };
    }
    async logout(refreshToken) {
        // Revoke refresh token
        await this.prisma.refreshToken.deleteMany({
            where: {
                token: refreshToken
            }
        });
    }
    async logoutAllDevices(userId) {
        // Revoke all refresh tokens for user
        await this.prisma.refreshToken.deleteMany({
            where: {
                userId
            }
        });
    }
}
(0, _globals.describe)("AuthService", ()=>{
    let authService;
    (0, _globals.beforeEach)(()=>{
        authService = new AuthService();
        _globals.jest.clearAllMocks();
        // Set up environment variables
        process.env.JWT_SECRET = "test-secret";
        process.env.JWT_REFRESH_SECRET = "test-refresh-secret";
        // Mock JWT methods
        mockJwt.sign.mockReturnValue("mock-token");
        mockJwt.verify.mockReturnValue({
            userId: 1,
            email: "test@example.com"
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("login", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            password: "hashedPassword",
            name: "Test User",
            permissions: [
                "inventory:read",
                "sales:create"
            ],
            isActive: true,
            shopId: "shop-1"
        };
        (0, _globals.it)("should successfully login with valid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(true);
            mockJwt.sign.mockReturnValue("mock-access-token");
            mockPrisma.refreshToken.create.mockResolvedValue({
                token: "mock-refresh-token"
            });
            // Act
            const result = await authService.login("test@example.com", "password123");
            // Assert
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    email: "test@example.com"
                },
                select: {
                    id: true,
                    email: true,
                    password: true,
                    name: true,
                    permissions: true,
                    isActive: true,
                    shopId: true
                }
            });
            (0, _globals.expect)(mockBcrypt.compare).toHaveBeenCalledWith("password123", "hashedPassword");
            (0, _globals.expect)(result).toEqual({
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User",
                    permissions: [
                        "inventory:read",
                        "sales:create"
                    ],
                    shopId: "shop-1"
                },
                accessToken: "mock-access-token",
                refreshToken: "mock-access-token"
            });
        });
        (0, _globals.it)("should throw error for non-existent user", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(null);
            // Act & Assert
            await (0, _globals.expect)(authService.login("nonexistent@example.com", "password123")).rejects.toThrow("Invalid credentials");
            (0, _globals.expect)(mockBcrypt.compare).not.toHaveBeenCalled();
        });
        (0, _globals.it)("should throw error for inactive user", async ()=>{
            // Arrange
            const inactiveUser = {
                ...mockUser,
                isActive: false
            };
            mockPrisma.user.findUnique.mockResolvedValue(inactiveUser);
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "password123")).rejects.toThrow("Account is deactivated");
            (0, _globals.expect)(mockBcrypt.compare).not.toHaveBeenCalled();
        });
        (0, _globals.it)("should throw error for invalid password", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            mockBcrypt.compare.mockResolvedValue(false);
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "wrongpassword")).rejects.toThrow("Invalid credentials");
            (0, _globals.expect)(mockBcrypt.compare).toHaveBeenCalledWith("wrongpassword", "hashedPassword");
        });
        (0, _globals.it)("should handle database errors gracefully", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Database connection failed"));
            // Act & Assert
            await (0, _globals.expect)(authService.login("test@example.com", "password123")).rejects.toThrow("Database connection failed");
        });
    });
    (0, _globals.describe)("verifyToken", ()=>{
        (0, _globals.it)("should successfully verify valid token", async ()=>{
            // Arrange
            const mockDecoded = {
                userId: 1,
                email: "test@example.com"
            };
            mockJwt.verify.mockReturnValue(mockDecoded);
            // Act
            const result = await authService.verifyToken("valid-token");
            // Assert
            (0, _globals.expect)(mockJwt.verify).toHaveBeenCalledWith("valid-token", "test-secret");
            (0, _globals.expect)(result).toEqual(mockDecoded);
        });
        (0, _globals.it)("should throw error for invalid token", async ()=>{
            // Arrange
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("jwt malformed");
            });
            // Act & Assert
            await (0, _globals.expect)(authService.verifyToken("invalid-token")).rejects.toThrow("Invalid token");
        });
        (0, _globals.it)("should throw error for expired token", async ()=>{
            // Arrange
            mockJwt.verify.mockImplementation(()=>{
                throw new Error("jwt expired");
            });
            // Act & Assert
            await (0, _globals.expect)(authService.verifyToken("expired-token")).rejects.toThrow("Invalid token");
        });
    });
    (0, _globals.describe)("refreshAccessToken", ()=>{
        const mockRefreshToken = {
            token: "valid-refresh-token",
            userId: 1,
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
            isRevoked: false,
            user: {
                id: 1,
                email: "test@example.com",
                name: "Test User",
                permissions: [
                    "inventory:read"
                ],
                shopId: "shop-1"
            }
        };
        (0, _globals.it)("should successfully refresh access token", async ()=>{
            // Arrange
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(mockRefreshToken);
            mockJwt.sign.mockReturnValue("new-access-token");
            // Act
            const result = await authService.refreshAccessToken("valid-refresh-token");
            // Assert
            (0, _globals.expect)(mockJwt.verify).toHaveBeenCalledWith("valid-refresh-token", "test-refresh-secret");
            (0, _globals.expect)(mockPrisma.refreshToken.findUnique).toHaveBeenCalledWith({
                where: {
                    token: "valid-refresh-token"
                },
                include: {
                    user: true
                }
            });
            (0, _globals.expect)(result).toEqual({
                accessToken: "new-access-token",
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User",
                    permissions: [
                        "inventory:read"
                    ],
                    shopId: "shop-1"
                }
            });
        });
        (0, _globals.it)("should throw error for revoked refresh token", async ()=>{
            // Arrange
            const revokedToken = {
                ...mockRefreshToken,
                isRevoked: true
            };
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(revokedToken);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("revoked-token")).rejects.toThrow("Invalid refresh token");
        });
        (0, _globals.it)("should throw error for expired refresh token", async ()=>{
            // Arrange
            const expiredToken = {
                ...mockRefreshToken,
                expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000)
            };
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(expiredToken);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("expired-token")).rejects.toThrow("Refresh token expired");
        });
        (0, _globals.it)("should throw error for non-existent refresh token", async ()=>{
            // Arrange
            mockJwt.verify.mockReturnValue({
                userId: 1
            });
            mockPrisma.refreshToken.findUnique.mockResolvedValue(null);
            // Act & Assert
            await (0, _globals.expect)(authService.refreshAccessToken("non-existent-token")).rejects.toThrow("Invalid refresh token");
        });
    });
    (0, _globals.describe)("logout", ()=>{
        (0, _globals.it)("should successfully logout user", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 1
            });
            // Act
            await authService.logout("refresh-token");
            // Assert
            (0, _globals.expect)(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                where: {
                    token: "refresh-token"
                }
            });
        });
        (0, _globals.it)("should handle logout even if token does not exist", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 0
            });
            // Act & Assert
            await (0, _globals.expect)(authService.logout("non-existent-token")).resolves.not.toThrow();
        });
    });
    (0, _globals.describe)("logoutAllDevices", ()=>{
        (0, _globals.it)("should successfully logout from all devices", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 3
            });
            // Act
            await authService.logoutAllDevices(1);
            // Assert
            (0, _globals.expect)(mockPrisma.refreshToken.deleteMany).toHaveBeenCalledWith({
                where: {
                    userId: 1
                }
            });
        });
        (0, _globals.it)("should handle logout all devices even if no tokens exist", async ()=>{
            // Arrange
            mockPrisma.refreshToken.deleteMany.mockResolvedValue({
                count: 0
            });
            // Act & Assert
            await (0, _globals.expect)(authService.logoutAllDevices(1)).resolves.not.toThrow();
        });
    });
    (0, _globals.describe)("security considerations", ()=>{
        (0, _globals.it)("should use secure JWT configuration", ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            };
            // Act
            authService["generateAccessToken"](mockUser);
            // Assert
            (0, _globals.expect)(mockJwt.sign).toHaveBeenCalledWith(_globals.expect.objectContaining({
                userId: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            }), "test-secret", {
                expiresIn: "15m"
            });
        });
        (0, _globals.it)("should not expose sensitive user data in tokens", ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                password: "hashedPassword",
                permissions: [],
                shopId: "shop-1"
            };
            // Act
            authService["generateAccessToken"](mockUser);
            // Assert
            const tokenPayload = mockJwt.sign.mock.calls[0][0];
            (0, _globals.expect)(tokenPayload).not.toHaveProperty("password");
        });
        (0, _globals.it)("should use different secrets for access and refresh tokens", async ()=>{
            // This test ensures we're using different secrets for different token types
            const mockUser = {
                id: 1,
                email: "test@example.com",
                permissions: [],
                shopId: "shop-1"
            };
            // Mock the database call for refresh token creation
            mockPrisma.refreshToken.create.mockResolvedValue({
                id: 1,
                userId: 1,
                token: "mock-refresh-token",
                expiresAt: new Date(),
                createdAt: new Date()
            });
            // Generate access token
            authService["generateAccessToken"](mockUser);
            // Generate refresh token
            await authService["generateRefreshToken"](1);
            // Assert different secrets are used
            const calls = mockJwt.sign.mock.calls;
            (0, _globals.expect)(calls).toHaveLength(2);
            const accessTokenCall = calls[0];
            const refreshTokenCall = calls[1];
            (0, _globals.expect)(accessTokenCall[1]).toBe("test-secret");
            (0, _globals.expect)(refreshTokenCall[1]).toBe("test-refresh-secret");
            (0, _globals.expect)(accessTokenCall[1]).not.toBe(refreshTokenCall[1]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,