c3242b46bc269c8998f68c736de1a723
"use strict";

/* istanbul ignore next */
function cov_h9muhp4c7() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/shop-performance/route.ts";
  var hash = "9f1d92e887b70217f7de4cbeb79022bd1db55992";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/shop-performance/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "7": {
        start: {
          line: 16,
          column: 32
        },
        end: {
          line: 16,
          column: 78
        }
      },
      "8": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 98
        }
      },
      "9": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "11": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "12": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 66,
          column: 64
        }
      },
      "13": {
        start: {
          line: 53,
          column: 37
        },
        end: {
          line: 53,
          column: 89
        }
      },
      "14": {
        start: {
          line: 53,
          column: 70
        },
        end: {
          line: 53,
          column: 85
        }
      },
      "15": {
        start: {
          line: 54,
          column: 41
        },
        end: {
          line: 54,
          column: 61
        }
      },
      "16": {
        start: {
          line: 55,
          column: 38
        },
        end: {
          line: 55,
          column: 142
        }
      },
      "17": {
        start: {
          line: 55,
          column: 71
        },
        end: {
          line: 55,
          column: 138
        }
      },
      "18": {
        start: {
          line: 55,
          column: 111
        },
        end: {
          line: 55,
          column: 134
        }
      },
      "19": {
        start: {
          line: 56,
          column: 44
        },
        end: {
          line: 56,
          column: 114
        }
      },
      "20": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 65,
          column: 14
        }
      },
      "21": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 63
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "24": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 40
          },
          end: {
            line: 52,
            column: 41
          }
        },
        loc: {
          start: {
            line: 52,
            column: 48
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 58
          },
          end: {
            line: 53,
            column: 59
          }
        },
        loc: {
          start: {
            line: 53,
            column: 70
          },
          end: {
            line: 53,
            column: 85
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 59
          },
          end: {
            line: 55,
            column: 60
          }
        },
        loc: {
          start: {
            line: 55,
            column: 71
          },
          end: {
            line: 55,
            column: 138
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 94
          },
          end: {
            line: 55,
            column: 95
          }
        },
        loc: {
          start: {
            line: 55,
            column: 111
          },
          end: {
            line: 55,
            column: 134
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        },
        loc: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 63
          }
        },
        line: 66
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 44
          },
          end: {
            line: 56,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 71
          },
          end: {
            line: 56,
            column: 110
          }
        }, {
          start: {
            line: 56,
            column: 113
          },
          end: {
            line: 56,
            column: 114
          }
        }],
        line: 56
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/shop-performance/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const shops = await prisma.shop.findMany({\n            where: {\n                is_active: true, // Consider only active shops\n            },\n            include: {\n                invoices: {\n                    where: {\n                        status: 'paid',\n                        createdAt: {\n                            gte: firstDayOfMonth,\n                            lte: lastDayOfMonth,\n                        },\n                    },\n                    include: {\n                        items: true, // To sum quantity sold\n                    }\n                },\n            },\n        });\n\n        if (shops.length === 0) {\n            return NextResponse.json({\n                success: true,\n                details: [],\n                summary: { month: now.toLocaleString('default', { month: 'long' }), year: now.getFullYear(), totalShopsAnalyzed: 0 },\n                generatedAt: new Date().toISOString(),\n                message: 'No active shops found to analyze.'\n            });\n        }\n\n        const reportDetails = shops.map(shop => {\n            const totalSalesAmount = shop.invoices.reduce((sum, inv) => sum + inv.total, 0);\n            const numberOfTransactions = shop.invoices.length;\n            const totalQuantitySold = shop.invoices.reduce((sum, inv) =>\n                sum + inv.items.reduce((itemSum, item) => itemSum + item.quantity, 0),\n                0);\n            const averageTransactionValue = numberOfTransactions > 0 ? totalSalesAmount / numberOfTransactions : 0;\n\n            return {\n                shopId: shop.id,\n                shopName: shop.name,\n                location: shop.location,\n                totalSalesAmount,\n                numberOfTransactions,\n                totalQuantitySold,\n                averageTransactionValue,\n            };\n        }).sort((a, b) => b.totalSalesAmount - a.totalSalesAmount); // Sort by sales amount desc\n\n        return NextResponse.json({\n            success: true,\n            details: reportDetails,\n            summary: {\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n                totalShopsAnalyzed: reportDetails.length,\n                // Could add overall totals here if needed\n            },\n            generatedAt: new Date().toISOString(),\n        });\n\n    } catch (error: any) {\n        console.error('Error fetching shop performance report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch shop performance report', error: error.message },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "now", "Date", "firstDayOfMonth", "getFullYear", "getMonth", "lastDayOfMonth", "shops", "prisma", "shop", "findMany", "where", "is_active", "include", "invoices", "status", "createdAt", "gte", "lte", "items", "length", "NextResponse", "json", "success", "details", "summary", "month", "toLocaleString", "year", "totalShopsAnalyzed", "generatedAt", "toISOString", "message", "reportDetails", "map", "totalSalesAmount", "reduce", "sum", "inv", "total", "numberOfTransactions", "totalQuantitySold", "itemSum", "item", "quantity", "averageTransactionValue", "shopId", "id", "shopName", "name", "location", "sort", "a", "b", "error", "console"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA,IAAIC,OAAgB;IACtC,IAAI;QACA,MAAMC,MAAM,IAAIC;QAChB,MAAMC,kBAAkB,IAAID,KAAKD,IAAIG,WAAW,IAAIH,IAAII,QAAQ,IAAI;QACpE,MAAMC,iBAAiB,IAAIJ,KAAKD,IAAIG,WAAW,IAAIH,IAAII,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI;QAEtF,MAAME,QAAQ,MAAMC,cAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,OAAO;gBACHC,WAAW;YACf;YACAC,SAAS;gBACLC,UAAU;oBACNH,OAAO;wBACHI,QAAQ;wBACRC,WAAW;4BACPC,KAAKd;4BACLe,KAAKZ;wBACT;oBACJ;oBACAO,SAAS;wBACLM,OAAO;oBACX;gBACJ;YACJ;QACJ;QAEA,IAAIZ,MAAMa,MAAM,KAAK,GAAG;YACpB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS,EAAE;gBACXC,SAAS;oBAAEC,OAAOzB,IAAI0B,cAAc,CAAC,WAAW;wBAAED,OAAO;oBAAO;oBAAIE,MAAM3B,IAAIG,WAAW;oBAAIyB,oBAAoB;gBAAE;gBACnHC,aAAa,IAAI5B,OAAO6B,WAAW;gBACnCC,SAAS;YACb;QACJ;QAEA,MAAMC,gBAAgB1B,MAAM2B,GAAG,CAACzB,CAAAA;YAC5B,MAAM0B,mBAAmB1B,KAAKK,QAAQ,CAACsB,MAAM,CAAC,CAACC,KAAKC,MAAQD,MAAMC,IAAIC,KAAK,EAAE;YAC7E,MAAMC,uBAAuB/B,KAAKK,QAAQ,CAACM,MAAM;YACjD,MAAMqB,oBAAoBhC,KAAKK,QAAQ,CAACsB,MAAM,CAAC,CAACC,KAAKC,MACjDD,MAAMC,IAAInB,KAAK,CAACiB,MAAM,CAAC,CAACM,SAASC,OAASD,UAAUC,KAAKC,QAAQ,EAAE,IACnE;YACJ,MAAMC,0BAA0BL,uBAAuB,IAAIL,mBAAmBK,uBAAuB;YAErG,OAAO;gBACHM,QAAQrC,KAAKsC,EAAE;gBACfC,UAAUvC,KAAKwC,IAAI;gBACnBC,UAAUzC,KAAKyC,QAAQ;gBACvBf;gBACAK;gBACAC;gBACAI;YACJ;QACJ,GAAGM,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAElB,gBAAgB,GAAGiB,EAAEjB,gBAAgB,GAAG,4BAA4B;QAExF,OAAOd,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAASS;YACTR,SAAS;gBACLC,OAAOzB,IAAI0B,cAAc,CAAC,WAAW;oBAAED,OAAO;gBAAO;gBACrDE,MAAM3B,IAAIG,WAAW;gBACrByB,oBAAoBI,cAAcb,MAAM;YAE5C;YACAU,aAAa,IAAI5B,OAAO6B,WAAW;QACvC;IAEJ,EAAE,OAAOuB,OAAY;QACjBC,QAAQD,KAAK,CAAC,2CAA2CA;QACzD,OAAOjC,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOS,SAAS;YAA2CsB,OAAOA,MAAMtB,OAAO;QAAC,GAC3F;YAAEjB,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f1d92e887b70217f7de4cbeb79022bd1db55992"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_h9muhp4c7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_h9muhp4c7();
cov_h9muhp4c7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_h9muhp4c7().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_h9muhp4c7().f[0]++;
    cov_h9muhp4c7().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_h9muhp4c7().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_h9muhp4c7().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_h9muhp4c7().f[1]++;
  cov_h9muhp4c7().s[5]++;
  try {
    const now =
    /* istanbul ignore next */
    (cov_h9muhp4c7().s[6]++, new Date());
    const firstDayOfMonth =
    /* istanbul ignore next */
    (cov_h9muhp4c7().s[7]++, new Date(now.getFullYear(), now.getMonth(), 1));
    const lastDayOfMonth =
    /* istanbul ignore next */
    (cov_h9muhp4c7().s[8]++, new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999));
    const shops =
    /* istanbul ignore next */
    (cov_h9muhp4c7().s[9]++, await _prisma.prisma.shop.findMany({
      where: {
        is_active: true
      },
      include: {
        invoices: {
          where: {
            status: "paid",
            createdAt: {
              gte: firstDayOfMonth,
              lte: lastDayOfMonth
            }
          },
          include: {
            items: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_h9muhp4c7().s[10]++;
    if (shops.length === 0) {
      /* istanbul ignore next */
      cov_h9muhp4c7().b[0][0]++;
      cov_h9muhp4c7().s[11]++;
      return _server.NextResponse.json({
        success: true,
        details: [],
        summary: {
          month: now.toLocaleString("default", {
            month: "long"
          }),
          year: now.getFullYear(),
          totalShopsAnalyzed: 0
        },
        generatedAt: new Date().toISOString(),
        message: "No active shops found to analyze."
      });
    } else
    /* istanbul ignore next */
    {
      cov_h9muhp4c7().b[0][1]++;
    }
    const reportDetails =
    /* istanbul ignore next */
    (cov_h9muhp4c7().s[12]++, shops.map(shop => {
      /* istanbul ignore next */
      cov_h9muhp4c7().f[2]++;
      const totalSalesAmount =
      /* istanbul ignore next */
      (cov_h9muhp4c7().s[13]++, shop.invoices.reduce((sum, inv) => {
        /* istanbul ignore next */
        cov_h9muhp4c7().f[3]++;
        cov_h9muhp4c7().s[14]++;
        return sum + inv.total;
      }, 0));
      const numberOfTransactions =
      /* istanbul ignore next */
      (cov_h9muhp4c7().s[15]++, shop.invoices.length);
      const totalQuantitySold =
      /* istanbul ignore next */
      (cov_h9muhp4c7().s[16]++, shop.invoices.reduce((sum, inv) => {
        /* istanbul ignore next */
        cov_h9muhp4c7().f[4]++;
        cov_h9muhp4c7().s[17]++;
        return sum + inv.items.reduce((itemSum, item) => {
          /* istanbul ignore next */
          cov_h9muhp4c7().f[5]++;
          cov_h9muhp4c7().s[18]++;
          return itemSum + item.quantity;
        }, 0);
      }, 0));
      const averageTransactionValue =
      /* istanbul ignore next */
      (cov_h9muhp4c7().s[19]++, numberOfTransactions > 0 ?
      /* istanbul ignore next */
      (cov_h9muhp4c7().b[1][0]++, totalSalesAmount / numberOfTransactions) :
      /* istanbul ignore next */
      (cov_h9muhp4c7().b[1][1]++, 0));
      /* istanbul ignore next */
      cov_h9muhp4c7().s[20]++;
      return {
        shopId: shop.id,
        shopName: shop.name,
        location: shop.location,
        totalSalesAmount,
        numberOfTransactions,
        totalQuantitySold,
        averageTransactionValue
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_h9muhp4c7().f[6]++;
      cov_h9muhp4c7().s[21]++;
      return b.totalSalesAmount - a.totalSalesAmount;
    })); // Sort by sales amount desc
    /* istanbul ignore next */
    cov_h9muhp4c7().s[22]++;
    return _server.NextResponse.json({
      success: true,
      details: reportDetails,
      summary: {
        month: now.toLocaleString("default", {
          month: "long"
        }),
        year: now.getFullYear(),
        totalShopsAnalyzed: reportDetails.length
      },
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_h9muhp4c7().s[23]++;
    console.error("Error fetching shop performance report:", error);
    /* istanbul ignore next */
    cov_h9muhp4c7().s[24]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch shop performance report",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,