9c7bffe8e886ab79ef1f873d8a352576
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _vitest = require("vitest");
const _server = require("next/server");
const _route = require("../../app/api/audit-trail/route");
const _auth = require("../../lib/auth");
const _auditService = require("../../services/auditService");
// Mock dependencies
_vitest.vi.mock("@/lib/auth");
_vitest.vi.mock("@/services/auditService");
const mockVerifyToken = _auth.verifyToken;
const mockAuditService = _auditService.auditService;
(0, _vitest.describe)("/api/audit-trail", ()=>{
    const mockToken = "valid-jwt-token";
    const mockDecodedToken = {
        sub: "user123",
        email: "test@example.com"
    };
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        mockVerifyToken.mockResolvedValue(mockDecodedToken);
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)("Authentication", ()=>{
        (0, _vitest.it)("should return 401 when no authorization header is provided", async ()=>{
            const request = new _server.NextRequest("http://localhost:3000/api/audit-trail");
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(401);
            (0, _vitest.expect)(data.error).toBe("No token provided");
        });
        (0, _vitest.it)("should return 401 when token verification fails", async ()=>{
            mockVerifyToken.mockResolvedValue(null);
            const request = new _server.NextRequest("http://localhost:3000/api/audit-trail", {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(401);
            (0, _vitest.expect)(data.error).toBe("Invalid token");
        });
    });
    (0, _vitest.describe)("Recycle Bin Items (type=deleted)", ()=>{
        const mockRecycleBinData = {
            items: [
                {
                    id: 1,
                    entity: "product",
                    entityId: 123,
                    originalData: {
                        name: "Test Product"
                    },
                    deletedAt: new Date("2024-01-15T10:00:00Z"),
                    deletedBy: "user1",
                    canRecover: true
                }
            ],
            total: 1
        };
        (0, _vitest.beforeEach)(()=>{
            mockAuditService.getRecycleBinItems.mockResolvedValue(mockRecycleBinData);
        });
        (0, _vitest.it)("should fetch recycle bin items without filters", async ()=>{
            const url = "http://localhost:3000/api/audit-trail?type=deleted&limit=20&offset=0";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockRecycleBinData);
            (0, _vitest.expect)(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(undefined, 20, 0, null, null);
        });
        (0, _vitest.it)("should fetch recycle bin items with entity filter", async ()=>{
            const url = "http://localhost:3000/api/audit-trail?type=deleted&entity=product&limit=20&offset=0";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockRecycleBinData);
            (0, _vitest.expect)(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith("product", 20, 0, null, null);
        });
        (0, _vitest.it)("should fetch recycle bin items with date filters", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-15T23:59:59Z";
            const url = `http://localhost:3000/api/audit-trail?type=deleted&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=20&offset=0`;
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockRecycleBinData);
            (0, _vitest.expect)(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith(undefined, 20, 0, dateFrom, dateTo);
        });
        (0, _vitest.it)("should fetch recycle bin items with entity and date filters combined", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-16T23:59:59Z";
            const url = `http://localhost:3000/api/audit-trail?type=deleted&entity=customer&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=10&offset=5`;
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockRecycleBinData);
            (0, _vitest.expect)(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith("customer", 10, 5, dateFrom, dateTo);
        });
    });
    (0, _vitest.describe)("Audit Entries (type=all)", ()=>{
        const mockAuditData = {
            items: [
                {
                    id: 1,
                    entity: "product",
                    entityId: 123,
                    action: "CREATE",
                    userId: "user1",
                    createdAt: new Date("2024-01-15T10:00:00Z"),
                    details: {
                        name: "Test Product"
                    }
                }
            ],
            total: 1
        };
        (0, _vitest.beforeEach)(()=>{
            mockAuditService.getAuditEntries.mockResolvedValue(mockAuditData);
        });
        (0, _vitest.it)("should fetch audit entries without filters", async ()=>{
            const url = "http://localhost:3000/api/audit-trail?type=all&limit=20&offset=0";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockAuditData);
            (0, _vitest.expect)(mockAuditService.getAuditEntries).toHaveBeenCalledWith(undefined, 20, 0, null, null);
        });
        (0, _vitest.it)("should fetch audit entries with entity filter", async ()=>{
            const url = "http://localhost:3000/api/audit-trail?type=all&entity=invoice&limit=20&offset=0";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockAuditData);
            (0, _vitest.expect)(mockAuditService.getAuditEntries).toHaveBeenCalledWith("invoice", 20, 0, null, null);
        });
        (0, _vitest.it)("should fetch audit entries with date filters", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-15T23:59:59Z";
            const url = `http://localhost:3000/api/audit-trail?type=all&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=20&offset=0`;
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual(mockAuditData);
            (0, _vitest.expect)(mockAuditService.getAuditEntries).toHaveBeenCalledWith(undefined, 20, 0, dateFrom, dateTo);
        });
    });
    (0, _vitest.describe)("Entity History (type=history)", ()=>{
        const mockHistoryData = [
            {
                id: 1,
                entity: "product",
                entityId: 123,
                action: "CREATE",
                userId: "user1",
                createdAt: new Date("2024-01-15T10:00:00Z"),
                details: {
                    name: "Test Product"
                }
            },
            {
                id: 2,
                entity: "product",
                entityId: 123,
                action: "UPDATE",
                userId: "user2",
                createdAt: new Date("2024-01-16T11:00:00Z"),
                details: {
                    name: "Updated Product"
                }
            }
        ];
        (0, _vitest.beforeEach)(()=>{
            mockAuditService.getEntityHistory.mockResolvedValue(mockHistoryData);
        });
        (0, _vitest.it)("should fetch entity history without date filters", async ()=>{
            const url = "http://localhost:3000/api/audit-trail?type=history&entity=product&entityId=123&limit=20";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual({
                items: mockHistoryData,
                total: mockHistoryData.length
            });
            (0, _vitest.expect)(mockAuditService.getEntityHistory).toHaveBeenCalledWith("product", 123, 20, null, null);
        });
        (0, _vitest.it)("should fetch entity history with date filters", async ()=>{
            const dateFrom = "2024-01-15T00:00:00Z";
            const dateTo = "2024-01-16T23:59:59Z";
            const url = `http://localhost:3000/api/audit-trail?type=history&entity=product&entityId=123&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}&limit=10`;
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data).toEqual({
                items: mockHistoryData,
                total: mockHistoryData.length
            });
            (0, _vitest.expect)(mockAuditService.getEntityHistory).toHaveBeenCalledWith("product", 123, 10, dateFrom, dateTo);
        });
    });
    (0, _vitest.describe)("Error Handling", ()=>{
        (0, _vitest.it)("should handle service errors gracefully", async ()=>{
            mockAuditService.getRecycleBinItems.mockRejectedValue(new Error("Database error"));
            const url = "http://localhost:3000/api/audit-trail?type=deleted";
            const request = new _server.NextRequest(url, {
                headers: {
                    Authorization: `Bearer ${mockToken}`
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(500);
            (0, _vitest.expect)(data.error).toBe("Failed to fetch audit trail");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,