a4057993ca1e54190bd4fe1e963a1a88
"use strict";

/* istanbul ignore next */
function cov_xqdg755ph() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/daily-sales/route.ts";
  var hash = "eaf61016b2aac9b5302ac82a52de7602086ef6bf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/daily-sales/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 33
        },
        end: {
          line: 15,
          column: 53
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 50
        }
      },
      "8": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 71
        }
      },
      "9": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 47
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "11": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "13": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "14": {
        start: {
          line: 33,
          column: 30
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "15": {
        start: {
          line: 35,
          column: 35
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "16": {
        start: {
          line: 52,
          column: 29
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "17": {
        start: {
          line: 86,
          column: 34
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "18": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 101
        }
      },
      "19": {
        start: {
          line: 87,
          column: 71
        },
        end: {
          line: 87,
          column: 96
        }
      },
      "20": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "21": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "22": {
        start: {
          line: 101,
          column: 68
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "23": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "24": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 67
        }
      },
      "25": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 58
          },
          end: {
            line: 33,
            column: 59
          }
        },
        loc: {
          start: {
            line: 33,
            column: 72
          },
          end: {
            line: 99,
            column: 9
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 50
          },
          end: {
            line: 86,
            column: 51
          }
        },
        loc: {
          start: {
            line: 86,
            column: 68
          },
          end: {
            line: 88,
            column: 13
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 87,
            column: 52
          },
          end: {
            line: 87,
            column: 53
          }
        },
        loc: {
          start: {
            line: 87,
            column: 71
          },
          end: {
            line: 87,
            column: 96
          }
        },
        line: 87
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 101,
            column: 51
          },
          end: {
            line: 101,
            column: 52
          }
        },
        loc: {
          start: {
            line: 101,
            column: 68
          },
          end: {
            line: 105,
            column: 13
          }
        },
        line: 101
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 18,
            column: 58
          }
        }, {
          start: {
            line: 18,
            column: 61
          },
          end: {
            line: 18,
            column: 71
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 28
          },
          end: {
            line: 93,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 28
          },
          end: {
            line: 93,
            column: 53
          }
        }, {
          start: {
            line: 93,
            column: 57
          },
          end: {
            line: 93,
            column: 58
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 58
          }
        }, {
          start: {
            line: 94,
            column: 62
          },
          end: {
            line: 94,
            column: 63
          }
        }],
        line: 94
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 41
          },
          end: {
            line: 96,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 72
          },
          end: {
            line: 96,
            column: 131
          }
        }, {
          start: {
            line: 96,
            column: 134
          },
          end: {
            line: 96,
            column: 135
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 73
          },
          end: {
            line: 96,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 73
          },
          end: {
            line: 96,
            column: 98
          }
        }, {
          start: {
            line: 96,
            column: 102
          },
          end: {
            line: 96,
            column: 103
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 124,
            column: 32
          },
          end: {
            line: 124,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 51
          },
          end: {
            line: 124,
            column: 90
          }
        }, {
          start: {
            line: 124,
            column: 93
          },
          end: {
            line: 124,
            column: 94
          }
        }],
        line: 124
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/daily-sales/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const dateParam = searchParams.get('date');\n        \n        // Use provided date or default to today\n        const targetDate = dateParam ? new Date(dateParam) : new Date();\n        \n        // Set to start and end of the day\n        const startOfDay = new Date(targetDate);\n        startOfDay.setHours(0, 0, 0, 0);\n        \n        const endOfDay = new Date(targetDate);\n        endOfDay.setHours(23, 59, 59, 999);\n\n        // Get all shops\n        const shops = await prisma.shop.findMany({\n            select: {\n                id: true,\n                name: true,\n                location: true\n            }\n        });\n\n        // Get daily sales data for each shop\n        const shopSalesData = await Promise.all(\n            shops.map(async (shop) => {\n                // Get aggregated sales data for the shop\n                const salesAggregate = await prisma.invoice.aggregate({\n                    _sum: {\n                        total: true,\n                    },\n                    _count: {\n                        id: true,\n                    },\n                    where: {\n                        shopId: shop.id,\n                        createdAt: {\n                            gte: startOfDay,\n                            lte: endOfDay,\n                        },\n                        status: 'paid',\n                    },\n                });\n\n                // Get detailed invoice data for the shop\n                const invoices = await prisma.invoice.findMany({\n                    where: {\n                        shopId: shop.id,\n                        createdAt: {\n                            gte: startOfDay,\n                            lte: endOfDay,\n                        },\n                        status: 'paid',\n                    },\n                    include: {\n                        customer: {\n                            select: {\n                                name: true,\n                                email: true,\n                                phone: true\n                            }\n                        },\n                        items: {\n                            include: {\n                                product: {\n                                    select: {\n                                        name: true,\n                                        sku: true,\n                                        category: true\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                });\n\n                // Calculate total quantity sold\n                const totalQuantity = invoices.reduce((total, invoice) => {\n                    return total + invoice.items.reduce((itemTotal, item) => itemTotal + item.quantity, 0);\n                }, 0);\n\n                return {\n                    shopId: shop.id,\n                    shopName: shop.name,\n                    location: shop.location,\n                    totalSales: salesAggregate._sum.total || 0,\n                    numberOfInvoices: salesAggregate._count.id || 0,\n                    totalQuantitySold: totalQuantity,\n                    averageTransactionValue: salesAggregate._count.id > 0 \n                        ? (salesAggregate._sum.total || 0) / salesAggregate._count.id \n                        : 0,\n                    invoices: invoices\n                };\n            })\n        );\n\n        // Calculate overall totals\n        const overallTotals = shopSalesData.reduce(\n            (totals, shop) => ({\n                totalSales: totals.totalSales + shop.totalSales,\n                totalInvoices: totals.totalInvoices + shop.numberOfInvoices,\n                totalQuantity: totals.totalQuantity + shop.totalQuantitySold\n            }),\n            { totalSales: 0, totalInvoices: 0, totalQuantity: 0 }\n        );\n\n        return NextResponse.json({\n            success: true,\n            reportDate: targetDate.toISOString().split('T')[0],\n            summary: {\n                date: targetDate.toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                }),\n                totalSales: overallTotals.totalSales,\n                totalInvoices: overallTotals.totalInvoices,\n                totalQuantitySold: overallTotals.totalQuantity,\n                numberOfShops: shops.length,\n                averagePerShop: shops.length > 0 ? overallTotals.totalSales / shops.length : 0\n            },\n            shopData: shopSalesData,\n            generatedAt: new Date().toISOString()\n        });\n\n    } catch (error) {\n        console.error('Error fetching daily sales report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch daily sales report' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "searchParams", "URL", "url", "dateParam", "get", "targetDate", "Date", "startOfDay", "setHours", "endOfDay", "shops", "prisma", "shop", "findMany", "select", "id", "name", "location", "shopSalesData", "Promise", "all", "map", "salesAggregate", "invoice", "aggregate", "_sum", "total", "_count", "where", "shopId", "createdAt", "gte", "lte", "status", "invoices", "include", "customer", "email", "phone", "items", "product", "sku", "category", "orderBy", "totalQuantity", "reduce", "itemTotal", "item", "quantity", "shopName", "totalSales", "numberOfInvoices", "totalQuantitySold", "averageTransactionValue", "overallTotals", "totals", "totalInvoices", "NextResponse", "json", "success", "reportDate", "toISOString", "split", "summary", "date", "toLocaleDateString", "weekday", "year", "month", "day", "numberOfShops", "length", "averagePerShop", "shopData", "generatedAt", "error", "console", "message"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eaf61016b2aac9b5302ac82a52de7602086ef6bf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xqdg755ph = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xqdg755ph();
cov_xqdg755ph().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_xqdg755ph().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_xqdg755ph().f[0]++;
    cov_xqdg755ph().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_xqdg755ph().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_xqdg755ph().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_xqdg755ph().f[1]++;
  cov_xqdg755ph().s[5]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[6]++, new URL(request.url));
    const dateParam =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[7]++, searchParams.get("date"));
    // Use provided date or default to today
    const targetDate =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[8]++, dateParam ?
    /* istanbul ignore next */
    (cov_xqdg755ph().b[0][0]++, new Date(dateParam)) :
    /* istanbul ignore next */
    (cov_xqdg755ph().b[0][1]++, new Date()));
    // Set to start and end of the day
    const startOfDay =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[9]++, new Date(targetDate));
    /* istanbul ignore next */
    cov_xqdg755ph().s[10]++;
    startOfDay.setHours(0, 0, 0, 0);
    const endOfDay =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[11]++, new Date(targetDate));
    /* istanbul ignore next */
    cov_xqdg755ph().s[12]++;
    endOfDay.setHours(23, 59, 59, 999);
    // Get all shops
    const shops =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[13]++, await _prisma.prisma.shop.findMany({
      select: {
        id: true,
        name: true,
        location: true
      }
    }));
    // Get daily sales data for each shop
    const shopSalesData =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[14]++, await Promise.all(shops.map(async shop => {
      /* istanbul ignore next */
      cov_xqdg755ph().f[2]++;
      // Get aggregated sales data for the shop
      const salesAggregate =
      /* istanbul ignore next */
      (cov_xqdg755ph().s[15]++, await _prisma.prisma.invoice.aggregate({
        _sum: {
          total: true
        },
        _count: {
          id: true
        },
        where: {
          shopId: shop.id,
          createdAt: {
            gte: startOfDay,
            lte: endOfDay
          },
          status: "paid"
        }
      }));
      // Get detailed invoice data for the shop
      const invoices =
      /* istanbul ignore next */
      (cov_xqdg755ph().s[16]++, await _prisma.prisma.invoice.findMany({
        where: {
          shopId: shop.id,
          createdAt: {
            gte: startOfDay,
            lte: endOfDay
          },
          status: "paid"
        },
        include: {
          customer: {
            select: {
              name: true,
              email: true,
              phone: true
            }
          },
          items: {
            include: {
              product: {
                select: {
                  name: true,
                  sku: true,
                  category: true
                }
              }
            }
          }
        },
        orderBy: {
          createdAt: "desc"
        }
      }));
      // Calculate total quantity sold
      const totalQuantity =
      /* istanbul ignore next */
      (cov_xqdg755ph().s[17]++, invoices.reduce((total, invoice) => {
        /* istanbul ignore next */
        cov_xqdg755ph().f[3]++;
        cov_xqdg755ph().s[18]++;
        return total + invoice.items.reduce((itemTotal, item) => {
          /* istanbul ignore next */
          cov_xqdg755ph().f[4]++;
          cov_xqdg755ph().s[19]++;
          return itemTotal + item.quantity;
        }, 0);
      }, 0));
      /* istanbul ignore next */
      cov_xqdg755ph().s[20]++;
      return {
        shopId: shop.id,
        shopName: shop.name,
        location: shop.location,
        totalSales:
        /* istanbul ignore next */
        (cov_xqdg755ph().b[1][0]++, salesAggregate._sum.total) ||
        /* istanbul ignore next */
        (cov_xqdg755ph().b[1][1]++, 0),
        numberOfInvoices:
        /* istanbul ignore next */
        (cov_xqdg755ph().b[2][0]++, salesAggregate._count.id) ||
        /* istanbul ignore next */
        (cov_xqdg755ph().b[2][1]++, 0),
        totalQuantitySold: totalQuantity,
        averageTransactionValue: salesAggregate._count.id > 0 ?
        /* istanbul ignore next */
        (cov_xqdg755ph().b[3][0]++, (
        /* istanbul ignore next */
        (cov_xqdg755ph().b[4][0]++, salesAggregate._sum.total) ||
        /* istanbul ignore next */
        (cov_xqdg755ph().b[4][1]++, 0)) / salesAggregate._count.id) :
        /* istanbul ignore next */
        (cov_xqdg755ph().b[3][1]++, 0),
        invoices: invoices
      };
    })));
    // Calculate overall totals
    const overallTotals =
    /* istanbul ignore next */
    (cov_xqdg755ph().s[21]++, shopSalesData.reduce((totals, shop) => {
      /* istanbul ignore next */
      cov_xqdg755ph().f[5]++;
      cov_xqdg755ph().s[22]++;
      return {
        totalSales: totals.totalSales + shop.totalSales,
        totalInvoices: totals.totalInvoices + shop.numberOfInvoices,
        totalQuantity: totals.totalQuantity + shop.totalQuantitySold
      };
    }, {
      totalSales: 0,
      totalInvoices: 0,
      totalQuantity: 0
    }));
    /* istanbul ignore next */
    cov_xqdg755ph().s[23]++;
    return _server.NextResponse.json({
      success: true,
      reportDate: targetDate.toISOString().split("T")[0],
      summary: {
        date: targetDate.toLocaleDateString("en-US", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric"
        }),
        totalSales: overallTotals.totalSales,
        totalInvoices: overallTotals.totalInvoices,
        totalQuantitySold: overallTotals.totalQuantity,
        numberOfShops: shops.length,
        averagePerShop: shops.length > 0 ?
        /* istanbul ignore next */
        (cov_xqdg755ph().b[5][0]++, overallTotals.totalSales / shops.length) :
        /* istanbul ignore next */
        (cov_xqdg755ph().b[5][1]++, 0)
      },
      shopData: shopSalesData,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_xqdg755ph().s[24]++;
    console.error("Error fetching daily sales report:", error);
    /* istanbul ignore next */
    cov_xqdg755ph().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch daily sales report"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,