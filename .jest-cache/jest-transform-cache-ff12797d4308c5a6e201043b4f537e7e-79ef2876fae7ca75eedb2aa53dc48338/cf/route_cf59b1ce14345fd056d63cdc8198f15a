2212df26663959cc972ea68e3cfe6496
"use strict";

/* istanbul ignore next */
function cov_1d5q74slhn() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/db-test/route.ts";
  var hash = "3ecde1d84c3bd21e7f20de32a168329b8427b1b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/db-test/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 80
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "7": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 57
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 26,
          column: 15
        }
      },
      "10": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 67
        }
      },
      "12": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 35,
            column: 9
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 23
          },
          end: {
            line: 31,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 55
          },
          end: {
            line: 31,
            column: 75
          }
        }, {
          start: {
            line: 31,
            column: 78
          },
          end: {
            line: 31,
            column: 98
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 19
          },
          end: {
            line: 41,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 44
          },
          end: {
            line: 41,
            column: 57
          }
        }, {
          start: {
            line: 41,
            column: 60
          },
          end: {
            line: 41,
            column: 73
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/db-test/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport db from '@/utils/db';\n\nexport async function GET() {\n    try {\n        const result = await db.testConnection();\n\n        if (result.success) {\n            return NextResponse.json({\n                success: true,\n                message: 'Database connection successful!',\n                data: result.data\n            });\n        } else {\n            return NextResponse.json({\n                success: false,\n                message: 'Database connection failed.',\n                error: result.error instanceof Error ? result.error.message : String(result.error)\n            }, { status: 500 });\n        }\n    } catch (error) {\n        console.error('Error testing database connection:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error testing database connection',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["GET", "result", "db", "testConnection", "success", "NextResponse", "json", "message", "data", "error", "Error", "String", "status", "console"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;2DACd;;;;;;AAER,eAAeA;IAClB,IAAI;QACA,MAAMC,SAAS,MAAMC,WAAE,CAACC,cAAc;QAEtC,IAAIF,OAAOG,OAAO,EAAE;YAChB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACrBF,SAAS;gBACTG,SAAS;gBACTC,MAAMP,OAAOO,IAAI;YACrB;QACJ,OAAO;YACH,OAAOH,oBAAY,CAACC,IAAI,CAAC;gBACrBF,SAAS;gBACTG,SAAS;gBACTE,OAAOR,OAAOQ,KAAK,YAAYC,QAAQT,OAAOQ,KAAK,CAACF,OAAO,GAAGI,OAAOV,OAAOQ,KAAK;YACrF,GAAG;gBAAEG,QAAQ;YAAI;QACrB;IACJ,EAAE,OAAOH,OAAO;QACZI,QAAQJ,KAAK,CAAC,sCAAsCA;QACpD,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YACrBF,SAAS;YACTG,SAAS;YACTE,OAAOA,iBAAiBC,QAAQD,MAAMF,OAAO,GAAGI,OAAOF;QAC3D,GAAG;YAAEG,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3ecde1d84c3bd21e7f20de32a168329b8427b1b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1d5q74slhn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1d5q74slhn();
cov_1d5q74slhn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1d5q74slhn().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1d5q74slhn().f[0]++;
    cov_1d5q74slhn().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1d5q74slhn().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(/*#__PURE__*/cov_1d5q74slhn().s[4]++, _interop_require_default(require("../../../utils/db")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1d5q74slhn().f[1]++;
  cov_1d5q74slhn().s[5]++;
  return /* istanbul ignore next */(cov_1d5q74slhn().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1d5q74slhn().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1d5q74slhn().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1d5q74slhn().b[0][1]++, {
    default: obj
  });
}
async function GET() {
  /* istanbul ignore next */
  cov_1d5q74slhn().f[2]++;
  cov_1d5q74slhn().s[6]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_1d5q74slhn().s[7]++, await _db.default.testConnection());
    /* istanbul ignore next */
    cov_1d5q74slhn().s[8]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_1d5q74slhn().b[2][0]++;
      cov_1d5q74slhn().s[9]++;
      return _server.NextResponse.json({
        success: true,
        message: "Database connection successful!",
        data: result.data
      });
    } else {
      /* istanbul ignore next */
      cov_1d5q74slhn().b[2][1]++;
      cov_1d5q74slhn().s[10]++;
      return _server.NextResponse.json({
        success: false,
        message: "Database connection failed.",
        error: result.error instanceof Error ?
        /* istanbul ignore next */
        (cov_1d5q74slhn().b[3][0]++, result.error.message) :
        /* istanbul ignore next */
        (cov_1d5q74slhn().b[3][1]++, String(result.error))
      }, {
        status: 500
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1d5q74slhn().s[11]++;
    console.error("Error testing database connection:", error);
    /* istanbul ignore next */
    cov_1d5q74slhn().s[12]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error testing database connection",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1d5q74slhn().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1d5q74slhn().b[4][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMWQ1cTc0c2xobiIsImYiLCJzIiwicmVzdWx0IiwiX2RiIiwiZGVmYXVsdCIsInRlc3RDb25uZWN0aW9uIiwic3VjY2VzcyIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsIm1lc3NhZ2UiLCJkYXRhIiwiZXJyb3IiLCJFcnJvciIsIlN0cmluZyIsInN0YXR1cyIsImNvbnNvbGUiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL2RiLXRlc3Qvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IGRiIGZyb20gJ0AvdXRpbHMvZGInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLnRlc3RDb25uZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0RhdGFiYXNlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bCEnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkLicsXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlc3VsdC5lcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcmVzdWx0LmVycm9yLm1lc3NhZ2UgOiBTdHJpbmcocmVzdWx0LmVycm9yKVxuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRlc3RpbmcgZGF0YWJhc2UgY29ubmVjdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciB0ZXN0aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb24nLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICAgIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFHc0I7Ozs7OztXQUFBQSxHQUFBOzs7OztrQ0FITzs7O3dFQUNkOzs7Ozs7Ozs7Ozs7Ozs7QUFFUixlQUFlQSxJQUFBO0VBQUE7RUFBQUMsY0FBQSxHQUFBQyxDQUFBO0VBQUFELGNBQUEsR0FBQUUsQ0FBQTtFQUNsQixJQUFJO0lBQ0EsTUFBTUMsTUFBQTtJQUFBO0lBQUEsQ0FBQUgsY0FBQSxHQUFBRSxDQUFBLE9BQVMsTUFBTUUsR0FBQSxDQUFBQyxPQUFFLENBQUNDLGNBQWM7SUFBQTtJQUFBTixjQUFBLEdBQUFFLENBQUE7SUFFdEMsSUFBSUMsTUFBQSxDQUFPSSxPQUFPLEVBQUU7TUFBQTtNQUFBUCxjQUFBLEdBQUFRLENBQUE7TUFBQVIsY0FBQSxHQUFBRSxDQUFBO01BQ2hCLE9BQU9PLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7UUFDckJKLE9BQUEsRUFBUztRQUNUSyxPQUFBLEVBQVM7UUFDVEMsSUFBQSxFQUFNVixNQUFBLENBQU9VO01BQ2pCO0lBQ0osT0FBTztNQUFBO01BQUFiLGNBQUEsR0FBQVEsQ0FBQTtNQUFBUixjQUFBLEdBQUFFLENBQUE7TUFDSCxPQUFPTyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO1FBQ3JCSixPQUFBLEVBQVM7UUFDVEssT0FBQSxFQUFTO1FBQ1RFLEtBQUEsRUFBT1gsTUFBQSxDQUFPVyxLQUFLLFlBQVlDLEtBQUE7UUFBQTtRQUFBLENBQUFmLGNBQUEsR0FBQVEsQ0FBQSxVQUFRTCxNQUFBLENBQU9XLEtBQUssQ0FBQ0YsT0FBTztRQUFBO1FBQUEsQ0FBQVosY0FBQSxHQUFBUSxDQUFBLFVBQUdRLE1BQUEsQ0FBT2IsTUFBQSxDQUFPVyxLQUFLO01BQ3JGLEdBQUc7UUFBRUcsTUFBQSxFQUFRO01BQUk7SUFDckI7RUFDSixFQUFFLE9BQU9ILEtBQUEsRUFBTztJQUFBO0lBQUFkLGNBQUEsR0FBQUUsQ0FBQTtJQUNaZ0IsT0FBQSxDQUFRSixLQUFLLENBQUMsc0NBQXNDQSxLQUFBO0lBQUE7SUFBQWQsY0FBQSxHQUFBRSxDQUFBO0lBQ3BELE9BQU9PLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFDckJKLE9BQUEsRUFBUztNQUNUSyxPQUFBLEVBQVM7TUFDVEUsS0FBQSxFQUFPQSxLQUFBLFlBQWlCQyxLQUFBO01BQUE7TUFBQSxDQUFBZixjQUFBLEdBQUFRLENBQUEsVUFBUU0sS0FBQSxDQUFNRixPQUFPO01BQUE7TUFBQSxDQUFBWixjQUFBLEdBQUFRLENBQUEsVUFBR1EsTUFBQSxDQUFPRixLQUFBO0lBQzNELEdBQUc7TUFBRUcsTUFBQSxFQUFRO0lBQUk7RUFDckI7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==