{"version":3,"names":["cov_torxfj5iv","actualCoverage","s","usePermission","routePermissions","f","user","_useAuth","useAuth","_router","_navigation","useRouter","pathname","usePathname","hasPermission","permission","b","permissions","length","includes","canEditInvoices","canViewQuotations","canCreateQuotations","canEditQuotations","canViewCosts","canRecordPaymentToAccount","accountId","checkRoutePermission","requiredPermission","undefined","route","startsWith"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/usePermission.ts"],"sourcesContent":["'use client';\n\n\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from './useAuth';\n\n// Map routes to required permissions\nconst routePermissions: Record<string, string> = {\n    '/dashboard': 'view_dashboard',  // Require dashboard permission\n    '/inventory': 'inventory:view',  // Full inventory access (blocked for shop staff)\n    '/inventory/transfers': 'inventory:transfer',\n    '/inventory/distribution': 'shop:distribution:view',  // Shop distribution access\n    '/suppliers': 'supplier:view',\n    '/purchases': 'purchase:view',\n    '/quotations': 'quotation:view',\n    '/shops': 'shop:view',\n    '/customers': 'customer:view',\n    '/invoices': 'sales:view',  // Changed from invoice:view to sales:view\n    '/accounting': 'accounting:view',\n    '/reports': 'report:view',\n    '/settings': 'settings:manage',\n};\n\nexport function usePermission() {\n    const { user } = useAuth();\n    const _router = useRouter();\n    const pathname = usePathname();\n\n    const hasPermission = (permission: string): boolean => {\n        if (!permission) return true; // No permission required\n        if (!user?.permissions || !user.permissions.length) return false;\n        \n        // Check for admin permissions first\n        if (user.permissions.includes('*') || user.permissions.includes('admin:all') || user.permissions.includes('ALL')) {\n            return true;\n        }\n        \n        return user.permissions.includes(permission);\n    };\n\n    // Check if user can edit/delete invoices\n    const canEditInvoices = (): boolean => {\n        return hasPermission('sales:manage') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can view quotations\n    const canViewQuotations = (): boolean => {\n        return hasPermission('quotation:view') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can create quotations\n    const canCreateQuotations = (): boolean => {\n        return hasPermission('quotation:manage') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can edit/delete quotations\n    const canEditQuotations = (): boolean => {\n        return hasPermission('quotation:manage') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can view cost data\n    const canViewCosts = (): boolean => {\n        return hasPermission('shop:view_costs') || hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*');\n    };\n\n    // Check if user can record payments to specific accounts\n    const canRecordPaymentToAccount = (accountId: number): boolean => {\n        // Admin can record to any account\n        if (hasPermission('admin:all') || hasPermission('ALL') || hasPermission('*')) {\n            return true;\n        }\n        \n        // Check if user has payment:record permission\n        if (!hasPermission('payment:record')) {\n            return false;\n        }\n        \n        // For restricted users, only allow cash in hand (account ID 1)\n        // This is based on the account IDs we found earlier\n        return accountId === 1;\n    };\n\n    // Check if user has permission to access the current route\n    const checkRoutePermission = (): boolean => {\n        // Default to dashboard for root path\n        if (pathname === '/') return true;\n\n        // Login page is always accessible\n        if (pathname === '/login') return true;\n\n        // For exact route matches\n        const requiredPermission = routePermissions[pathname];\n        if (requiredPermission !== undefined) {\n            return hasPermission(requiredPermission);\n        }\n\n        // For routes that don't have an exact match, check parent routes\n        for (const route in routePermissions) {\n            if (pathname.startsWith(route + '/')) {\n                return hasPermission(routePermissions[route]);\n            }\n        }\n\n        // If no matching route found, allow access by default\n        return true;\n    };\n\n    return {\n        hasPermission,\n        checkRoutePermission,\n        canEditInvoices,\n        canViewQuotations,\n        canCreateQuotations,\n        canEditQuotations,\n        canViewCosts,\n        canRecordPaymentToAccount\n    };\n}"],"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","ignoreList":[]}