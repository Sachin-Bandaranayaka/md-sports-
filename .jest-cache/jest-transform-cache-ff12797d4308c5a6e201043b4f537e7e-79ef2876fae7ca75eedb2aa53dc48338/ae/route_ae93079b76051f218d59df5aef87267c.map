{"version":3,"names":["GET","cov_29cerbptvx","f","s","POST","req","url","URL","simple","searchParams","get","shopDistributionPermission","_auth","validateTokenPermission","shopManagePermission","b","isValid","_server","NextResponse","json","success","message","status","token","extractToken","payload","verifyToken","userRole","roleName","userShopId","getShopIdFromToken","adminAllPermission","userManagePermission","isAdmin","isDevMode","console","log","whereClause","id","shops","_prisma","default","shop","findMany","where","select","name","orderBy","data","location","contact_person","phone","email","is_active","opening_time","closing_time","manager_id","opening_date","address_line1","address_line2","city","state","postal_code","country","latitude","longitude","tax_rate","createdAt","updatedAt","manager","_count","InventoryItem","shopsWithInventory","map","restOfShop","total_inventory","length","error","errorMessage","Error","request","body","newShop","create"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { validateTokenPermission, getShopIdFromToken, extractToken, verifyToken } from '@/lib/auth';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const url = new URL(req.url);\n    const simple = url.searchParams.get('simple') === 'true';\n\n    // Validate token and permissions - check for shop distribution view or shop manage\n    const shopDistributionPermission = await validateTokenPermission(req, 'shop:distribution:view');\n    const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n    \n    if (!shopDistributionPermission.isValid && !shopManagePermission.isValid) {\n      return NextResponse.json(\n        { success: false, message: 'Permission denied: shop:distribution:view or shop:manage required' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's role and shop context for filtering\n    const token = extractToken(req);\n    const payload = token ? await verifyToken(token) : null;\n    const userRole = payload?.roleName as string ?? '';\n    const userShopId = await getShopIdFromToken(req);\n    const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n    const userManagePermission = await validateTokenPermission(req, 'user:manage');\n    \n    const isAdmin = shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n    \n    // Development mode - allow all access\n    const isDevMode = token === 'dev-token';\n\n    // Debug logging\n    console.log('Shops API Debug:', {\n        isAdmin,\n        userShopId,\n        userRole,\n        isDevMode,\n        shopManagePermission: shopManagePermission.isValid,\n        adminAllPermission: adminAllPermission.isValid,\n        userManagePermission: userManagePermission.isValid\n    });\n\n    if (simple) {\n      // Return simplified shop data for dropdowns\n      let whereClause = {};\n      \n      // If user is not admin, filter by their assigned shop\n      // UNLESS they are a Shop Staff user, in which case they need all shops for transfers\n       if (!isAdmin && userShopId && userRole !== 'Shop Staff') {\n         whereClause = {\n           id: userShopId\n         };\n         console.log('Applying shop filter:', whereClause);\n       } else {\n         console.log('No shop filter applied - isAdmin:', isAdmin, 'userShopId:', userShopId, 'userRole:', userRole);\n       }\n      \n      const shops = await prisma.shop.findMany({\n        where: whereClause,\n        select: {\n          id: true,\n          name: true,\n        },\n        orderBy: {\n          name: 'asc',\n        },\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: shops,\n      });\n    }\n\n        // Fetch shops from the database with proper numeric IDs\n        let whereClause = {};\n        \n        // If user is not admin, filter by their assigned shop\n         if (!isAdmin && userShopId && userRole !== 'Shop Staff') {\n             whereClause = {\n                 id: userShopId\n             };\n         }\n        \n        const shops = await prisma.shop.findMany({\n            where: whereClause,\n            orderBy: {\n                name: 'asc'\n            },\n            select: {\n                id: true,\n                name: true,\n                location: true,\n                contact_person: true,\n                phone: true,\n                email: true,\n                is_active: true,\n                opening_time: true,\n                closing_time: true,\n                manager_id: true,\n                opening_date: true,\n                status: true,\n                address_line1: true,\n                address_line2: true,\n                city: true,\n                state: true,\n                postal_code: true,\n                country: true,\n                latitude: true,\n                longitude: true,\n                tax_rate: true,\n                createdAt: true,\n                updatedAt: true,\n                manager: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                _count: {\n                    select: {\n                        InventoryItem: true\n                    }\n                }\n            }\n        });\n\n        // Transform the data to include total_inventory count\n        const shopsWithInventory = shops.map(shop => {\n            const { _count, ...restOfShop } = shop;\n            return {\n                ...restOfShop,\n                total_inventory: _count.InventoryItem\n            };\n        });\n\n        if (!shopsWithInventory || shopsWithInventory.length === 0) {\n            return NextResponse.json({ success: true, data: [] });\n        }\n\n        return NextResponse.json({ success: true, data: shopsWithInventory });\n\n    } catch (error) {\n        console.error('[API/SHOPS_GET] Error fetching shops:', error);\n        // It's good practice to avoid sending detailed internal error messages to the client.\n        let errorMessage = 'An unexpected error occurred while fetching shops.';\n        if (error instanceof Error) {\n            errorMessage = error.message;\n            // You could log error.message for server-side debugging\n        }\n        return NextResponse.json({ success: false, message: errorMessage }, { status: 500 });\n    }\n}\n\n// POST: Create a new shop\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        const newShop = await prisma.shop.create({\n            data: {\n                name: body.name,\n                location: body.location,\n                is_active: body.is_active,\n                status: body.status,\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: newShop\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating shop:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create shop' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}