6ea18ca5a264dea2927bf460a7d564ed
"use strict";

/* istanbul ignore next */
function cov_29cerbptvx() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts";
  var hash = "5acd66c6baed31e2f4f7d84a684a09fcb43a1464";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "11": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 64
        }
      },
      "13": {
        start: {
          line: 32,
          column: 43
        },
        end: {
          line: 32,
          column: 114
        }
      },
      "14": {
        start: {
          line: 33,
          column: 37
        },
        end: {
          line: 33,
          column: 97
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "17": {
        start: {
          line: 43,
          column: 22
        },
        end: {
          line: 43,
          column: 50
        }
      },
      "18": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 74
        }
      },
      "19": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "20": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 67
        }
      },
      "21": {
        start: {
          line: 47,
          column: 35
        },
        end: {
          line: 47,
          column: 93
        }
      },
      "22": {
        start: {
          line: 48,
          column: 37
        },
        end: {
          line: 48,
          column: 97
        }
      },
      "23": {
        start: {
          line: 49,
          column: 24
        },
        end: {
          line: 49,
          column: 114
        }
      },
      "24": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "27": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 64,
          column: 32
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "29": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 18
        }
      },
      "30": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 66
        }
      },
      "31": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 124
        }
      },
      "32": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "34": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 91,
          column: 28
        }
      },
      "35": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "37": {
        start: {
          line: 98,
          column: 22
        },
        end: {
          line: 141,
          column: 10
        }
      },
      "38": {
        start: {
          line: 143,
          column: 35
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "39": {
        start: {
          line: 144,
          column: 46
        },
        end: {
          line: 144,
          column: 50
        }
      },
      "40": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "41": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "42": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "43": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "44": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 70
        }
      },
      "45": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 79
        }
      },
      "46": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "47": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 41
        }
      },
      "48": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      },
      "49": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "50": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 41
        }
      },
      "51": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 186,
          column: 10
        }
      },
      "52": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "53": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 53
        }
      },
      "54": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 143,
            column: 45
          },
          end: {
            line: 143,
            column: 46
          }
        },
        loc: {
          start: {
            line: 143,
            column: 53
          },
          end: {
            line: 149,
            column: 9
          }
        },
        line: 143
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 176,
            column: 15
          },
          end: {
            line: 176,
            column: 19
          }
        },
        loc: {
          start: {
            line: 176,
            column: 29
          },
          end: {
            line: 202,
            column: 1
          }
        },
        line: 176
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 47
          }
        }, {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 80
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 67
          }
        }, {
          start: {
            line: 44,
            column: 70
          },
          end: {
            line: 44,
            column: 74
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 25
          },
          end: {
            line: 45,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 25
          },
          end: {
            line: 45,
            column: 42
          }
        }, {
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 45,
            column: 48
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 49,
            column: 24
          },
          end: {
            line: 49,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 24
          },
          end: {
            line: 49,
            column: 52
          }
        }, {
          start: {
            line: 49,
            column: 56
          },
          end: {
            line: 49,
            column: 82
          }
        }, {
          start: {
            line: 49,
            column: 86
          },
          end: {
            line: 49,
            column: 114
          }
        }],
        line: 49
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 74,
            column: 13
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 24
          }
        }, {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 38
          }
        }, {
          start: {
            line: 67,
            column: 42
          },
          end: {
            line: 67,
            column: 67
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 20
          }
        }, {
          start: {
            line: 93,
            column: 24
          },
          end: {
            line: 93,
            column: 34
          }
        }, {
          start: {
            line: 93,
            column: 38
          },
          end: {
            line: 93,
            column: 63
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 31
          }
        }, {
          start: {
            line: 150,
            column: 35
          },
          end: {
            line: 150,
            column: 66
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/shops/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { validateTokenPermission, getShopIdFromToken, extractToken, verifyToken } from '@/lib/auth';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const url = new URL(req.url);\n    const simple = url.searchParams.get('simple') === 'true';\n\n    // Validate token and permissions - check for shop distribution view or shop manage\n    const shopDistributionPermission = await validateTokenPermission(req, 'shop:distribution:view');\n    const shopManagePermission = await validateTokenPermission(req, 'shop:manage');\n    \n    if (!shopDistributionPermission.isValid && !shopManagePermission.isValid) {\n      return NextResponse.json(\n        { success: false, message: 'Permission denied: shop:distribution:view or shop:manage required' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's role and shop context for filtering\n    const token = extractToken(req);\n    const payload = token ? await verifyToken(token) : null;\n    const userRole = payload?.roleName as string ?? '';\n    const userShopId = await getShopIdFromToken(req);\n    const adminAllPermission = await validateTokenPermission(req, 'admin:all');\n    const userManagePermission = await validateTokenPermission(req, 'user:manage');\n    \n    const isAdmin = shopManagePermission.isValid || adminAllPermission.isValid || userManagePermission.isValid;\n    \n    // Development mode - allow all access\n    const isDevMode = token === 'dev-token';\n\n    // Debug logging\n    console.log('Shops API Debug:', {\n        isAdmin,\n        userShopId,\n        userRole,\n        isDevMode,\n        shopManagePermission: shopManagePermission.isValid,\n        adminAllPermission: adminAllPermission.isValid,\n        userManagePermission: userManagePermission.isValid\n    });\n\n    if (simple) {\n      // Return simplified shop data for dropdowns\n      let whereClause = {};\n      \n      // If user is not admin, filter by their assigned shop\n      // UNLESS they are a Shop Staff user, in which case they need all shops for transfers\n       if (!isAdmin && userShopId && userRole !== 'Shop Staff') {\n         whereClause = {\n           id: userShopId\n         };\n         console.log('Applying shop filter:', whereClause);\n       } else {\n         console.log('No shop filter applied - isAdmin:', isAdmin, 'userShopId:', userShopId, 'userRole:', userRole);\n       }\n      \n      const shops = await prisma.shop.findMany({\n        where: whereClause,\n        select: {\n          id: true,\n          name: true,\n        },\n        orderBy: {\n          name: 'asc',\n        },\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: shops,\n      });\n    }\n\n        // Fetch shops from the database with proper numeric IDs\n        let whereClause = {};\n        \n        // If user is not admin, filter by their assigned shop\n         if (!isAdmin && userShopId && userRole !== 'Shop Staff') {\n             whereClause = {\n                 id: userShopId\n             };\n         }\n        \n        const shops = await prisma.shop.findMany({\n            where: whereClause,\n            orderBy: {\n                name: 'asc'\n            },\n            select: {\n                id: true,\n                name: true,\n                location: true,\n                contact_person: true,\n                phone: true,\n                email: true,\n                is_active: true,\n                opening_time: true,\n                closing_time: true,\n                manager_id: true,\n                opening_date: true,\n                status: true,\n                address_line1: true,\n                address_line2: true,\n                city: true,\n                state: true,\n                postal_code: true,\n                country: true,\n                latitude: true,\n                longitude: true,\n                tax_rate: true,\n                createdAt: true,\n                updatedAt: true,\n                manager: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                _count: {\n                    select: {\n                        InventoryItem: true\n                    }\n                }\n            }\n        });\n\n        // Transform the data to include total_inventory count\n        const shopsWithInventory = shops.map(shop => {\n            const { _count, ...restOfShop } = shop;\n            return {\n                ...restOfShop,\n                total_inventory: _count.InventoryItem\n            };\n        });\n\n        if (!shopsWithInventory || shopsWithInventory.length === 0) {\n            return NextResponse.json({ success: true, data: [] });\n        }\n\n        return NextResponse.json({ success: true, data: shopsWithInventory });\n\n    } catch (error) {\n        console.error('[API/SHOPS_GET] Error fetching shops:', error);\n        // It's good practice to avoid sending detailed internal error messages to the client.\n        let errorMessage = 'An unexpected error occurred while fetching shops.';\n        if (error instanceof Error) {\n            errorMessage = error.message;\n            // You could log error.message for server-side debugging\n        }\n        return NextResponse.json({ success: false, message: errorMessage }, { status: 500 });\n    }\n}\n\n// POST: Create a new shop\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        const newShop = await prisma.shop.create({\n            data: {\n                name: body.name,\n                location: body.location,\n                is_active: body.is_active,\n                status: body.status,\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: newShop\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating shop:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create shop' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "req", "url", "URL", "simple", "searchParams", "get", "shopDistributionPermission", "validateTokenPermission", "shopManagePermission", "isValid", "NextResponse", "json", "success", "message", "status", "token", "extractToken", "payload", "verifyToken", "userRole", "roleName", "userShopId", "getShopIdFromToken", "adminAllPermission", "userManagePermission", "isAdmin", "isDevMode", "console", "log", "whereClause", "id", "shops", "prisma", "shop", "findMany", "where", "select", "name", "orderBy", "data", "location", "contact_person", "phone", "email", "is_active", "opening_time", "closing_time", "manager_id", "opening_date", "address_line1", "address_line2", "city", "state", "postal_code", "country", "latitude", "longitude", "tax_rate", "createdAt", "updatedAt", "manager", "_count", "InventoryItem", "shopsWithInventory", "map", "restOfShop", "total_inventory", "length", "error", "errorMessage", "Error", "request", "body", "newShop", "create"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5acd66c6baed31e2f4f7d84a684a09fcb43a1464"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29cerbptvx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29cerbptvx();
cov_29cerbptvx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[0]++;
  cov_29cerbptvx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_29cerbptvx().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_29cerbptvx().f[1]++;
    cov_29cerbptvx().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_29cerbptvx().f[2]++;
    cov_29cerbptvx().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_29cerbptvx().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_29cerbptvx().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_29cerbptvx().s[8]++, require("../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[3]++;
  cov_29cerbptvx().s[9]++;
  return /* istanbul ignore next */(cov_29cerbptvx().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_29cerbptvx().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_29cerbptvx().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_29cerbptvx().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[4]++;
  cov_29cerbptvx().s[10]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[11]++, new URL(req.url));
    const simple =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[12]++, url.searchParams.get("simple") === "true");
    // Validate token and permissions - check for shop distribution view or shop manage
    const shopDistributionPermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[13]++, await (0, _auth.validateTokenPermission)(req, "shop:distribution:view"));
    const shopManagePermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[14]++, await (0, _auth.validateTokenPermission)(req, "shop:manage"));
    /* istanbul ignore next */
    cov_29cerbptvx().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[3][0]++, !shopDistributionPermission.isValid) &&
    /* istanbul ignore next */
    (cov_29cerbptvx().b[3][1]++, !shopManagePermission.isValid)) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[2][0]++;
      cov_29cerbptvx().s[16]++;
      return _server.NextResponse.json({
        success: false,
        message: "Permission denied: shop:distribution:view or shop:manage required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[2][1]++;
    }
    // Get user's role and shop context for filtering
    const token =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[17]++, (0, _auth.extractToken)(req));
    const payload =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[18]++, token ?
    /* istanbul ignore next */
    (cov_29cerbptvx().b[4][0]++, await (0, _auth.verifyToken)(token)) :
    /* istanbul ignore next */
    (cov_29cerbptvx().b[4][1]++, null));
    const userRole =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[19]++,
    /* istanbul ignore next */
    (cov_29cerbptvx().b[5][0]++, payload?.roleName) ??
    /* istanbul ignore next */
    (cov_29cerbptvx().b[5][1]++, ""));
    const userShopId =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[20]++, await (0, _auth.getShopIdFromToken)(req));
    const adminAllPermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[21]++, await (0, _auth.validateTokenPermission)(req, "admin:all"));
    const userManagePermission =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[22]++, await (0, _auth.validateTokenPermission)(req, "user:manage"));
    const isAdmin =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[23]++,
    /* istanbul ignore next */
    (cov_29cerbptvx().b[6][0]++, shopManagePermission.isValid) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[6][1]++, adminAllPermission.isValid) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[6][2]++, userManagePermission.isValid));
    // Development mode - allow all access
    const isDevMode =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[24]++, token === "dev-token");
    // Debug logging
    /* istanbul ignore next */
    cov_29cerbptvx().s[25]++;
    console.log("Shops API Debug:", {
      isAdmin,
      userShopId,
      userRole,
      isDevMode,
      shopManagePermission: shopManagePermission.isValid,
      adminAllPermission: adminAllPermission.isValid,
      userManagePermission: userManagePermission.isValid
    });
    /* istanbul ignore next */
    cov_29cerbptvx().s[26]++;
    if (simple) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[7][0]++;
      // Return simplified shop data for dropdowns
      let whereClause =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[27]++, {});
      // If user is not admin, filter by their assigned shop
      // UNLESS they are a Shop Staff user, in which case they need all shops for transfers
      /* istanbul ignore next */
      cov_29cerbptvx().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_29cerbptvx().b[9][0]++, !isAdmin) &&
      /* istanbul ignore next */
      (cov_29cerbptvx().b[9][1]++, userShopId) &&
      /* istanbul ignore next */
      (cov_29cerbptvx().b[9][2]++, userRole !== "Shop Staff")) {
        /* istanbul ignore next */
        cov_29cerbptvx().b[8][0]++;
        cov_29cerbptvx().s[29]++;
        whereClause = {
          id: userShopId
        };
        /* istanbul ignore next */
        cov_29cerbptvx().s[30]++;
        console.log("Applying shop filter:", whereClause);
      } else {
        /* istanbul ignore next */
        cov_29cerbptvx().b[8][1]++;
        cov_29cerbptvx().s[31]++;
        console.log("No shop filter applied - isAdmin:", isAdmin, "userShopId:", userShopId, "userRole:", userRole);
      }
      const shops =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[32]++, await _prisma.default.shop.findMany({
        where: whereClause,
        select: {
          id: true,
          name: true
        },
        orderBy: {
          name: "asc"
        }
      }));
      /* istanbul ignore next */
      cov_29cerbptvx().s[33]++;
      return _server.NextResponse.json({
        success: true,
        data: shops
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[7][1]++;
    }
    // Fetch shops from the database with proper numeric IDs
    let whereClause =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[34]++, {});
    // If user is not admin, filter by their assigned shop
    /* istanbul ignore next */
    cov_29cerbptvx().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[11][0]++, !isAdmin) &&
    /* istanbul ignore next */
    (cov_29cerbptvx().b[11][1]++, userShopId) &&
    /* istanbul ignore next */
    (cov_29cerbptvx().b[11][2]++, userRole !== "Shop Staff")) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[10][0]++;
      cov_29cerbptvx().s[36]++;
      whereClause = {
        id: userShopId
      };
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[10][1]++;
    }
    const shops =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[37]++, await _prisma.default.shop.findMany({
      where: whereClause,
      orderBy: {
        name: "asc"
      },
      select: {
        id: true,
        name: true,
        location: true,
        contact_person: true,
        phone: true,
        email: true,
        is_active: true,
        opening_time: true,
        closing_time: true,
        manager_id: true,
        opening_date: true,
        status: true,
        address_line1: true,
        address_line2: true,
        city: true,
        state: true,
        postal_code: true,
        country: true,
        latitude: true,
        longitude: true,
        tax_rate: true,
        createdAt: true,
        updatedAt: true,
        manager: {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        },
        _count: {
          select: {
            InventoryItem: true
          }
        }
      }
    }));
    // Transform the data to include total_inventory count
    const shopsWithInventory =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[38]++, shops.map(shop => {
      /* istanbul ignore next */
      cov_29cerbptvx().f[5]++;
      const {
        _count,
        ...restOfShop
      } =
      /* istanbul ignore next */
      (cov_29cerbptvx().s[39]++, shop);
      /* istanbul ignore next */
      cov_29cerbptvx().s[40]++;
      return {
        ...restOfShop,
        total_inventory: _count.InventoryItem
      };
    }));
    /* istanbul ignore next */
    cov_29cerbptvx().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_29cerbptvx().b[13][0]++, !shopsWithInventory) ||
    /* istanbul ignore next */
    (cov_29cerbptvx().b[13][1]++, shopsWithInventory.length === 0)) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[12][0]++;
      cov_29cerbptvx().s[42]++;
      return _server.NextResponse.json({
        success: true,
        data: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[12][1]++;
    }
    cov_29cerbptvx().s[43]++;
    return _server.NextResponse.json({
      success: true,
      data: shopsWithInventory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[44]++;
    console.error("[API/SHOPS_GET] Error fetching shops:", error);
    // It's good practice to avoid sending detailed internal error messages to the client.
    let errorMessage =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[45]++, "An unexpected error occurred while fetching shops.");
    /* istanbul ignore next */
    cov_29cerbptvx().s[46]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_29cerbptvx().b[14][0]++;
      cov_29cerbptvx().s[47]++;
      errorMessage = error.message;
      // You could log error.message for server-side debugging
    } else
    /* istanbul ignore next */
    {
      cov_29cerbptvx().b[14][1]++;
    }
    cov_29cerbptvx().s[48]++;
    return _server.NextResponse.json({
      success: false,
      message: errorMessage
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_29cerbptvx().f[6]++;
  cov_29cerbptvx().s[49]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[50]++, await request.json());
    const newShop =
    /* istanbul ignore next */
    (cov_29cerbptvx().s[51]++, await _prisma.default.shop.create({
      data: {
        name: body.name,
        location: body.location,
        is_active: body.is_active,
        status: body.status
      }
    }));
    /* istanbul ignore next */
    cov_29cerbptvx().s[52]++;
    return _server.NextResponse.json({
      success: true,
      data: newShop
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29cerbptvx().s[53]++;
    console.error("Error creating shop:", error);
    /* istanbul ignore next */
    cov_29cerbptvx().s[54]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create shop"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,