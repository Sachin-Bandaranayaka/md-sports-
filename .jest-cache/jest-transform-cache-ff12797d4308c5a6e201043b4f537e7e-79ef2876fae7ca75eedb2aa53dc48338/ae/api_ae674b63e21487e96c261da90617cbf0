df009296012434f842a8d9e80c3eda0d
/**
 * Utility for making authenticated API requests
 */ // Token provider - will be set by AuthProvider
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    authDelete: function() {
        return authDelete;
    },
    authFetch: function() {
        return authFetch;
    },
    authGet: function() {
        return authGet;
    },
    authPatch: function() {
        return authPatch;
    },
    authPost: function() {
        return authPost;
    },
    authPut: function() {
        return authPut;
    },
    getCsrfToken: function() {
        return getCsrfToken;
    },
    setTokenProvider: function() {
        return setTokenProvider;
    },
    setupFetchInterceptor: function() {
        return setupFetchInterceptor;
    }
});
let tokenProvider = null;
const setTokenProvider = (provider)=>{
    tokenProvider = provider;
};
/**
 * Get the current authentication token
 */ const getAuthToken = ()=>{
    // Use the token provider if available
    if (tokenProvider) {
        return tokenProvider();
    }
    // Fallback to cookies only (not localStorage) for security
    // This is only used during SSR or before the auth provider is initialized
    if (typeof document !== "undefined") {
        // Try to get token from cookie (if server sets it as non-httpOnly for development)
        const value = `; ${document.cookie}`;
        const parts = value.split(`; accessToken=`);
        if (parts.length === 2) {
            const token = parts.pop()?.split(";").shift();
            if (token) return token;
        }
    }
    return null;
};
const getCsrfToken = ()=>{
    if (typeof document === "undefined") return undefined;
    const value = `; ${document.cookie}`;
    const parts = value.split(`; csrfToken=`);
    if (parts.length === 2) return parts.pop()?.split(";").shift();
    return undefined;
};
const authFetch = async (url, options = {})=>{
    // Get token using the centralized method
    const token = getAuthToken();
    if (!token) {
        console.warn("No auth token found for request to:", url);
    } else {
        console.log(`Making authenticated request to ${url} with token: ${token.substring(0, 10)}...`);
    }
    // Prepare headers with authentication
    const headers = {
        ...options.headers || {},
        "Authorization": token ? `Bearer ${token}` : ""
    };
    // If content type is not explicitly set and we're not sending FormData,
    // default to JSON content type
    if (!options.headers?.hasOwnProperty("Content-Type") && !(options.body instanceof FormData)) {
        headers["Content-Type"] = "application/json";
    }
    // Add CSRF token for non-GET requests
    if (options.method && options.method !== "GET" && options.method !== "HEAD") {
        const csrfToken = getCsrfToken();
        if (csrfToken) {
            headers["X-CSRF-Token"] = csrfToken;
        }
    }
    // Make the request with authentication header
    const response = await fetch(url, {
        ...options,
        headers
    });
    // If unauthorized and not on the login page, redirect to login
    if (response.status === 401 && typeof window !== "undefined" && !window.location.pathname.includes("/login")) {
        console.warn("Authentication error (401) for request to:", url);
        // Don't clear localStorage - let the auth provider handle this
        window.location.href = "/login";
        return response;
    }
    return response;
};
const authGet = async (url, options = {})=>{
    return authFetch(url, {
        ...options,
        method: "GET"
    });
};
const authPost = async (url, data, options = {})=>{
    return authFetch(url, {
        ...options,
        method: "POST",
        body: JSON.stringify(data)
    });
};
const authPut = async (url, data, options = {})=>{
    return authFetch(url, {
        ...options,
        method: "PUT",
        body: JSON.stringify(data)
    });
};
const authDelete = async (url, options = {})=>{
    return authFetch(url, {
        ...options,
        method: "DELETE"
    });
};
const authPatch = async (url, data, options = {})=>{
    return authFetch(url, {
        ...options,
        method: "PATCH",
        body: JSON.stringify(data)
    });
};
const setupFetchInterceptor = ()=>{
    if (typeof window !== "undefined") {
        const originalFetch = window.fetch;
        window.fetch = async (url, options)=>{
            // Only intercept API calls to our own API (starting with /api)
            const urlString = url.toString();
            if (urlString.startsWith("/api") || urlString.startsWith(window.location.origin + "/api")) {
                options = options || {};
                options.headers = options.headers || {};
                // Cast headers to any to allow string indexing
                const headers = options.headers;
                // Add authentication header if token exists
                const token = getAuthToken();
                if (token && !headers["Authorization"]) {
                    headers["Authorization"] = `Bearer ${token}`;
                }
                // Add CSRF token for non-GET requests
                if (options.method && options.method !== "GET" && options.method !== "HEAD") {
                    const csrfToken = getCsrfToken();
                    if (csrfToken && !headers["X-CSRF-Token"]) {
                        headers["X-CSRF-Token"] = csrfToken;
                        console.log(`Adding CSRF token for ${options.method} request to ${urlString}`);
                    }
                }
            }
            return originalFetch(url, options);
        };
        console.log("Fetch interceptor set up successfully");
    }
};

//# sourceMappingURL=data:application/json;base64,