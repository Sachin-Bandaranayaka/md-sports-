{"version":3,"names":["cov_mdd741yc5","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ApiOptimizer","withApiOptimization","withPerformanceMonitoring","PERFORMANCE_THRESHOLDS","FAST_RESPONSE","SLOW_RESPONSE","CACHE_TTL_SHORT","CACHE_TTL_MEDIUM","CACHE_TTL_LONG","COMPRESSION_CONFIG","THRESHOLD","LEVEL","TYPES","optimizeResponse","request","handler","options","startTime","Date","now","cacheKey","cacheTTL","enableCompression","enableCaching","performanceTracking","url","URL","method","defaultCacheKey","pathname","search","finalCacheKey","cachedResponse","_cacheenhanced","enhancedCache","get","ttl","useMemoryCache","responseTime","console","log","_server","NextResponse","JSON","stringify","data","status","headers","getOptimizedHeaders","response","responseClone","clone","responseData","json","catch","set","timestamp","optimizedHeaders","Object","fromEntries","entries","finalBody","text","length","contentType","some","includes","logPerformanceMetrics","error","toISOString","endpoint","bodySize","isSlowResponse","isFastResponse","logLevel","toFixed","createCacheKey","params","userId","baseKey","toLowerCase","keys","sortedParams","sort","map","key","join","invalidateCache","patterns","pattern","delete","invalidateRelatedCache","dataType","id","getCacheInvalidationPatterns","push"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/middleware/api-optimizer.ts"],"sourcesContent":["/**\n * API Optimization Middleware for MS Sport\n * Provides millisecond response times with intelligent caching and compression\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { enhancedCache } from '@/lib/cache-enhanced';\nimport { PageOptimizer } from '@/lib/optimizations/page-optimizer';\n\n// Performance thresholds\nconst PERFORMANCE_THRESHOLDS = {\n  FAST_RESPONSE: 50,      // < 50ms is considered fast\n  SLOW_RESPONSE: 200,     // > 200ms is considered slow\n  CACHE_TTL_SHORT: 60,    // 1 minute for dynamic data\n  CACHE_TTL_MEDIUM: 300,  // 5 minutes for semi-static data\n  CACHE_TTL_LONG: 3600,   // 1 hour for static data\n};\n\n// Response compression configuration\nconst COMPRESSION_CONFIG = {\n  THRESHOLD: 1024,        // Compress responses > 1KB\n  LEVEL: 6,              // Compression level (1-9)\n  TYPES: [\n    'application/json',\n    'text/html',\n    'text/css',\n    'text/javascript',\n    'application/javascript',\n  ],\n};\n\n/**\n * API Response Optimizer\n */\nexport class ApiOptimizer {\n  \n  /**\n   * Optimize API response with caching, compression, and headers\n   */\n  static async optimizeResponse(\n    request: NextRequest,\n    handler: (req: NextRequest) => Promise<NextResponse>,\n    options: {\n      cacheKey?: string;\n      cacheTTL?: number;\n      enableCompression?: boolean;\n      enableCaching?: boolean;\n      performanceTracking?: boolean;\n    } = {}\n  ): Promise<NextResponse> {\n    const startTime = Date.now();\n    const {\n      cacheKey,\n      cacheTTL = PERFORMANCE_THRESHOLDS.CACHE_TTL_MEDIUM,\n      enableCompression = true,\n      enableCaching = true,\n      performanceTracking = true\n    } = options;\n    \n    const url = new URL(request.url);\n    const method = request.method;\n    const defaultCacheKey = `api:${method}:${url.pathname}:${url.search}`;\n    const finalCacheKey = cacheKey || defaultCacheKey;\n    \n    try {\n      // Try cache first for GET requests\n      if (enableCaching && method === 'GET') {\n        const cachedResponse = await enhancedCache.get(\n          finalCacheKey,\n          async () => null,\n          { ttl: cacheTTL, useMemoryCache: true }\n        );\n        \n                 if (cachedResponse) {\n           const responseTime = Date.now() - startTime;\n           console.log(`üöÄ Cache hit: ${finalCacheKey} (${responseTime}ms)`);\n           \n           return new NextResponse(JSON.stringify((cachedResponse as any).data), {\n             status: (cachedResponse as any).status,\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Cache': 'HIT',\n              'X-Response-Time': `${responseTime}ms`,\n              'Cache-Control': `public, max-age=${cacheTTL}`,\n              ...this.getOptimizedHeaders()\n            }\n          });\n        }\n      }\n      \n      // Execute the actual handler\n      const response = await handler(request);\n      const responseTime = Date.now() - startTime;\n      \n      // Clone response to read body\n      const responseClone = response.clone();\n      const responseData = await responseClone.json().catch(() => null);\n      \n      // Cache successful GET responses\n      if (enableCaching && method === 'GET' && response.status === 200 && responseData) {\n        await enhancedCache.set(finalCacheKey, {\n          data: responseData,\n          status: response.status,\n          timestamp: Date.now()\n        }, cacheTTL);\n      }\n      \n             // Add optimization headers\n       const optimizedHeaders: Record<string, string> = {\n         ...Object.fromEntries(response.headers.entries()),\n         'X-Cache': 'MISS',\n         'X-Response-Time': `${responseTime}ms`,\n         ...this.getOptimizedHeaders()\n       };\n       \n       // Apply compression if enabled and response is large enough\n       let finalBody = responseData ? JSON.stringify(responseData) : await response.text();\n       \n       if (enableCompression && finalBody.length > COMPRESSION_CONFIG.THRESHOLD) {\n         const contentType = response.headers.get('content-type') || '';\n         if (COMPRESSION_CONFIG.TYPES.some(type => contentType.includes(type))) {\n           optimizedHeaders['Content-Encoding'] = 'gzip';\n           // Note: In a real implementation, you'd use a compression library here\n           // For now, we'll just set the header\n         }\n       }\n      \n      // Log performance metrics\n      if (performanceTracking) {\n        this.logPerformanceMetrics(finalCacheKey, responseTime, response.status, finalBody.length);\n      }\n      \n      return new NextResponse(finalBody, {\n        status: response.status,\n        headers: optimizedHeaders\n      });\n      \n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error(`‚ùå API Error: ${finalCacheKey} (${responseTime}ms)`, error);\n      \n      return new NextResponse(JSON.stringify({\n        error: 'Internal Server Error',\n        timestamp: new Date().toISOString()\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Response-Time': `${responseTime}ms`,\n          ...this.getOptimizedHeaders()\n        }\n      });\n    }\n  }\n  \n  /**\n   * Get optimized response headers\n   */\n  private static getOptimizedHeaders(): Record<string, string> {\n    return {\n      // Security headers\n      'X-Content-Type-Options': 'nosniff',\n      'X-Frame-Options': 'DENY',\n      'X-XSS-Protection': '1; mode=block',\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\n      \n      // Performance headers\n      'X-DNS-Prefetch-Control': 'on',\n      'X-Powered-By': 'MS-Sport-Optimized',\n      \n      // CORS headers (adjust as needed)\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      \n      // Cache control for static assets\n      'Vary': 'Accept-Encoding',\n    };\n  }\n  \n  /**\n   * Log performance metrics\n   */\n  private static logPerformanceMetrics(\n    endpoint: string,\n    responseTime: number,\n    status: number,\n    bodySize: number\n  ): void {\n    const isSlowResponse = responseTime > PERFORMANCE_THRESHOLDS.SLOW_RESPONSE;\n    const isFastResponse = responseTime < PERFORMANCE_THRESHOLDS.FAST_RESPONSE;\n    \n    const logLevel = isSlowResponse ? 'üêå' : isFastResponse ? '‚ö°' : 'üìä';\n    \n    console.log(\n      `${logLevel} API: ${endpoint} | ${responseTime}ms | ${status} | ${(bodySize / 1024).toFixed(2)}KB`\n    );\n    \n         // Store metrics for reporting (would be implemented with your metrics system)\n     console.log(`üìä Metrics: response_time=${responseTime}ms, size=${bodySize}bytes`);\n  }\n  \n  /**\n   * Create cache key for API requests\n   */\n  static createCacheKey(\n    method: string,\n    path: string,\n    params?: Record<string, any>,\n    userId?: string\n  ): string {\n    const baseKey = `api:${method.toLowerCase()}:${path}`;\n    \n    if (params && Object.keys(params).length > 0) {\n      const sortedParams = Object.keys(params)\n        .sort()\n        .map(key => `${key}=${params[key]}`)\n        .join('&');\n      return `${baseKey}:${sortedParams}`;\n    }\n    \n    if (userId) {\n      return `${baseKey}:user:${userId}`;\n    }\n    \n    return baseKey;\n  }\n  \n  /**\n   * Invalidate cache for specific patterns\n   */\n  static async invalidateCache(patterns: string[]): Promise<void> {\n    for (const pattern of patterns) {\n      try {\n        await enhancedCache.delete(pattern);\n        console.log(`üóëÔ∏è Invalidated cache: ${pattern}`);\n      } catch (error) {\n        console.error(`‚ùå Failed to invalidate cache: ${pattern}`, error);\n      }\n    }\n  }\n  \n  /**\n   * Batch invalidate cache for related data\n   */\n  static async invalidateRelatedCache(dataType: string, id?: string): Promise<void> {\n    const patterns = this.getCacheInvalidationPatterns(dataType, id);\n    await this.invalidateCache(patterns);\n  }\n  \n  /**\n   * Get cache invalidation patterns for different data types\n   */\n  private static getCacheInvalidationPatterns(dataType: string, id?: string): string[] {\n    const patterns: string[] = [];\n    \n    switch (dataType) {\n      case 'inventory':\n        patterns.push('api:get:/api/inventory*');\n        patterns.push('api:get:/api/dashboard*');\n        if (id) patterns.push(`api:get:/api/inventory/${id}*`);\n        break;\n        \n      case 'invoice':\n        patterns.push('api:get:/api/invoices*');\n        patterns.push('api:get:/api/dashboard*');\n        if (id) patterns.push(`api:get:/api/invoices/${id}*`);\n        break;\n        \n      case 'customer':\n        patterns.push('api:get:/api/customers*');\n        patterns.push('api:get:/api/dashboard*');\n        if (id) patterns.push(`api:get:/api/customers/${id}*`);\n        break;\n        \n      case 'product':\n        patterns.push('api:get:/api/products*');\n        patterns.push('api:get:/api/inventory*');\n        patterns.push('api:get:/api/dashboard*');\n        if (id) patterns.push(`api:get:/api/products/${id}*`);\n        break;\n        \n      case 'user':\n        patterns.push('api:get:/api/users*');\n        if (id) patterns.push(`api:get:*:user:${id}`);\n        break;\n        \n      default:\n        patterns.push(`api:get:/api/${dataType}*`);\n    }\n    \n    return patterns;\n  }\n}\n\n/**\n * Middleware wrapper for Next.js API routes\n */\nexport function withApiOptimization(\n  handler: (req: NextRequest) => Promise<NextResponse>,\n  options: {\n    cacheKey?: string;\n    cacheTTL?: number;\n    enableCompression?: boolean;\n    enableCaching?: boolean;\n  } = {}\n) {\n  return async (request: NextRequest): Promise<NextResponse> => {\n    return ApiOptimizer.optimizeResponse(request, handler, options);\n  };\n}\n\n/**\n * Performance monitoring decorator\n */\nexport function withPerformanceMonitoring(\n  handler: (req: NextRequest) => Promise<NextResponse>\n) {\n  return async (request: NextRequest): Promise<NextResponse> => {\n    const startTime = Date.now();\n    const url = new URL(request.url);\n    \n    try {\n      const response = await handler(request);\n      const responseTime = Date.now() - startTime;\n      \n      // Log performance\n      console.log(`üìä API Performance: ${url.pathname} - ${responseTime}ms`);\n      \n      // Add performance header\n      response.headers.set('X-Response-Time', `${responseTime}ms`);\n      \n      return response;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error(`‚ùå API Error: ${url.pathname} - ${responseTime}ms`, error);\n      throw error;\n    }\n  };\n} "],"mappings":"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","ignoreList":[]}