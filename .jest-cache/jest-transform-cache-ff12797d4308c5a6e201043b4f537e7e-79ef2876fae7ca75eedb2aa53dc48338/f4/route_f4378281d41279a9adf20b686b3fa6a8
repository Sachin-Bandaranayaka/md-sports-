43b7d76d5d9e3173f664dcff96dafde0
"use strict";

/* istanbul ignore next */
function cov_kcwhvrt63() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts";
  var hash = "38c98a5e791134e3773d9cfea436f415552966f3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "10": {
        start: {
          line: 23,
          column: 14
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 30
        }
      },
      "14": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 71
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 90
        }
      },
      "17": {
        start: {
          line: 37,
          column: 31
        },
        end: {
          line: 51,
          column: 40
        }
      },
      "18": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 40,
          column: 14
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "20": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "21": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "22": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 53
        }
      },
      "23": {
        start: {
          line: 59,
          column: 48
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "24": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 76,
          column: 66
        }
      },
      "25": {
        start: {
          line: 60,
          column: 57
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "26": {
        start: {
          line: 78,
          column: 21
        },
        end: {
          line: 78,
          column: 30
        }
      },
      "27": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "29": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "30": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "31": {
        start: {
          line: 87,
          column: 17
        },
        end: {
          line: 94,
          column: 6
        }
      },
      "32": {
        start: {
          line: 88,
          column: 27
        },
        end: {
          line: 88,
          column: 89
        }
      },
      "33": {
        start: {
          line: 88,
          column: 66
        },
        end: {
          line: 88,
          column: 85
        }
      },
      "34": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "35": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "36": {
        start: {
          line: 96,
          column: 47
        },
        end: {
          line: 96,
          column: 79
        }
      },
      "37": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 100,
          column: 6
        }
      },
      "38": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 158,
          column: 2
        }
      },
      "39": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "40": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 104,
          column: 94
        }
      },
      "41": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "42": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "43": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 89
        }
      },
      "44": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 66
        }
      },
      "45": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "46": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 58
        }
      },
      "47": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "48": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "49": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 92
        }
      },
      "50": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "51": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 67
        }
      },
      "52": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 68
        }
      },
      "53": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 55
        }
      },
      "54": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 70
        }
      },
      "55": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "fetchShopsData",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 29
          }
        },
        loc: {
          start: {
            line: 24,
            column: 70
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 37,
            column: 61
          }
        },
        loc: {
          start: {
            line: 37,
            column: 64
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 43
          },
          end: {
            line: 59,
            column: 44
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 59,
            column: 52
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 53
          },
          end: {
            line: 60,
            column: 54
          }
        },
        loc: {
          start: {
            line: 60,
            column: 57
          },
          end: {
            line: 76,
            column: 10
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 28
          },
          end: {
            line: 80,
            column: 29
          }
        },
        loc: {
          start: {
            line: 80,
            column: 36
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 87,
            column: 41
          }
        },
        loc: {
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 87
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 88,
            column: 53
          },
          end: {
            line: 88,
            column: 54
          }
        },
        loc: {
          start: {
            line: 88,
            column: 66
          },
          end: {
            line: 88,
            column: 85
          }
        },
        line: 88
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 96,
            column: 39
          },
          end: {
            line: 96,
            column: 40
          }
        },
        loc: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 79
          }
        },
        line: 96
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 102,
            column: 61
          },
          end: {
            line: 102,
            column: 62
          }
        },
        loc: {
          start: {
            line: 102,
            column: 87
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 35,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 17
          }
        }, {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 27,
            column: 28
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 40,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 14
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 27
          }
        }, {
          start: {
            line: 52,
            column: 31
          },
          end: {
            line: 52,
            column: 62
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 82,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 82,
            column: 57
          }
        }, {
          start: {
            line: 82,
            column: 61
          },
          end: {
            line: 82,
            column: 62
          }
        }],
        line: 82
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 40
          }
        }, {
          start: {
            line: 91,
            column: 44
          },
          end: {
            line: 91,
            column: 45
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 61
          }
        }, {
          start: {
            line: 96,
            column: 65
          },
          end: {
            line: 96,
            column: 79
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 44
          },
          end: {
            line: 113,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 65
          },
          end: {
            line: 113,
            column: 79
          }
        }, {
          start: {
            line: 113,
            column: 82
          },
          end: {
            line: 113,
            column: 87
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 49
          },
          end: {
            line: 130,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 70
          },
          end: {
            line: 130,
            column: 84
          }
        }, {
          start: {
            line: 130,
            column: 87
          },
          end: {
            line: 130,
            column: 91
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 149,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 46
          },
          end: {
            line: 149,
            column: 59
          }
        }, {
          start: {
            line: 149,
            column: 62
          },
          end: {
            line: 149,
            column: 77
          }
        }],
        line: 149
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for shops (can be removed if not needed after refactor)\n// const defaultShopsData = [\n//     { name: 'Colombo Shop', sales: 125000, stock: 450 },\n//     { name: 'Kandy Shop', sales: 98500, stock: 320 },\n//     { name: 'Galle Shop', sales: 75200, stock: 280 },\n//     { name: 'Jaffna Shop', sales: 62800, stock: 210 }\n// ];\n\nexport async function fetchShopsData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    let startOfPeriod: Date;\n    let endOfPeriod: Date;\n\n    if (startDate && endDate) {\n        startOfPeriod = startDate;\n        endOfPeriod = endDate;\n    } else {\n        // Default to current month if no dates provided\n        const now = new Date();\n        startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);\n        endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n    }\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the specified period\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const salesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds },\n                createdAt: {\n                    gte: startOfPeriod,\n                    lte: endOfPeriod\n                }\n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(salesByShop)) {\n        salesByShop.forEach(sale => {\n            if (sale.shopId !== null) {\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0,\n            stock: totalStock\n        };\n    });\n\n    // Filter out shops with no inventory (if still desired, or adjust logic)\n    const shopsToDisplay = data.filter(shop => shop.stock > 0 || shop.sales > 0); // show if stock or sales\n\n    return {\n        success: true,\n        data: shopsToDisplay\n    };\n}\n\n// GET: Fetch shop performance data\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:shops:${context.isFiltered ? context.shopId : 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Shops data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh shops data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered\n        });\n        const shopsResult = await fetchShopsData(context.isFiltered ? context.shopId : null);\n\n        // Add metadata to response\n        const responseData = {\n            ...shopsResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 5 minutes (shop data changes less frequently)\n        await cacheService.set(cacheKey, responseData, 300);\n        console.log('\uD83D\uDCBE Shops data cached for 5 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching shop performance data:', error);\n        return NextResponse.json({\n            success: false, // Signal error more clearly\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],
      names: ["GET", "fetchShopsData", "shopId", "periodDays", "startDate", "endDate", "startOfPeriod", "endOfPeriod", "now", "Date", "getFullYear", "getMonth", "shopsWithInventory", "safeQuery", "where", "id", "prisma", "shop", "findMany", "include", "InventoryItem", "select", "quantity", "length", "success", "data", "shopIds", "map", "s", "salesByShop", "invoice", "groupBy", "by", "in", "createdAt", "gte", "lte", "_sum", "total", "salesMap", "Map", "Array", "isArray", "forEach", "sale", "set", "totalStock", "reduce", "sum", "item", "name", "sales", "get", "stock", "shopsToDisplay", "filter", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "cacheKey", "isFiltered", "cachedData", "cacheService", "console", "log", "meta", "shopFiltered", "fromCache", "shopsResult", "responseData", "Error"],
      mappings: ";;;;;;;;;;;IAsGaA,GAAG;eAAHA;;IAxFSC,cAAc;eAAdA;;;wBAdoB;wBACR;uBACL;gCACK;sBACM;AAUjC,eAAeA,eAAeC,MAAsB,EAAEC,UAAmB,EAAEC,SAAgB,EAAEC,OAAc;IAC9G,IAAIC;IACJ,IAAIC;IAEJ,IAAIH,aAAaC,SAAS;QACtBC,gBAAgBF;QAChBG,cAAcF;IAClB,OAAO;QACH,gDAAgD;QAChD,MAAMG,MAAM,IAAIC;QAChBH,gBAAgB,IAAIG,KAAKD,IAAIE,WAAW,IAAIF,IAAIG,QAAQ,IAAI;QAC5DJ,cAAc,IAAIE,KAAKD,IAAIE,WAAW,IAAIF,IAAIG,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI;IACjF;IAEA,kEAAkE;IAClE,MAAMC,qBAAqB,MAAMC,IAAAA,iBAAS,EACtC;QACI,MAAMC,QAAQZ,SAAS;YAAEa,IAAIb;QAAO,IAAI,CAAC;QACzC,OAAOc,cAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACxBJ;YACAK,SAAS;gBACLC,eAAe;oBACXC,QAAQ;wBAAEC,UAAU;oBAAK,EAAE,6CAA6C;gBAC5E;YACJ;QACJ;IACJ,GACA,EAAE,EACF;IAGJ,IAAI,CAACV,sBAAsBA,mBAAmBW,MAAM,KAAK,GAAG;QACxD,OAAO;YAAEC,SAAS;YAAMC,MAAM,EAAE;QAAC;IACrC;IAEA,gFAAgF;IAChF,MAAMC,UAAUd,mBAAmBe,GAAG,CAACC,CAAAA,IAAKA,EAAEb,EAAE;IAChD,MAAMc,cAAc,MAAMhB,IAAAA,iBAAS,EAC/B,IAAMG,cAAM,CAACc,OAAO,CAACC,OAAO,CAAC;YACzBC,IAAI;gBAAC;aAAS;YACdlB,OAAO;gBACHZ,QAAQ;oBAAE+B,IAAIP;gBAAQ;gBACtBQ,WAAW;oBACPC,KAAK7B;oBACL8B,KAAK7B;gBACT;YACJ;YACA8B,MAAM;gBACFC,OAAO;YACX;QACJ,IACA,EAAE,EACF;IAGJ,kDAAkD;IAClD,MAAMC,WAAW,IAAIC;IACrB,IAAIC,MAAMC,OAAO,CAACb,cAAc;QAC5BA,YAAYc,OAAO,CAACC,CAAAA;YAChB,IAAIA,KAAK1C,MAAM,KAAK,MAAM;gBACtBqC,SAASM,GAAG,CAACD,KAAK1C,MAAM,EAAE0C,KAAKP,IAAI,CAACC,KAAK,IAAI;YACjD;QACJ;IACJ;IAEA,kDAAkD;IAClD,MAAMb,OAAOb,mBAAmBe,GAAG,CAACV,CAAAA;QAChC,MAAM6B,aAAa7B,KAAKG,aAAa,CAAC2B,MAAM,CACxC,CAACC,KAAKC,OAASD,MAAMC,KAAK3B,QAAQ,EAClC;QAEJ,OAAO;YACH4B,MAAMjC,KAAKiC,IAAI;YACfC,OAAOZ,SAASa,GAAG,CAACnC,KAAKF,EAAE,KAAK;YAChCsC,OAAOP;QACX;IACJ;IAEA,yEAAyE;IACzE,MAAMQ,iBAAiB7B,KAAK8B,MAAM,CAACtC,CAAAA,OAAQA,KAAKoC,KAAK,GAAG,KAAKpC,KAAKkC,KAAK,GAAG,IAAI,yBAAyB;IAEvG,OAAO;QACH3B,SAAS;QACTC,MAAM6B;IACV;AACJ;AAGO,MAAMtD,MAAMwD,iCAAiB,CAACC,cAAc,CAAC,OAAOC,SAAsBC;IAC7E,IAAI;QACA,MAAMC,aAAa,MAAMC,IAAAA,6BAAuB,EAACH,SAAS;QAC1D,IAAI,CAACE,WAAWE,OAAO,EAAE;YACrB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAOL,WAAWM,OAAO;YAAC,GAAG;gBAAEC,QAAQ;YAAI;QAC1E;QAEA,sCAAsC;QACtC,MAAMC,WAAW,CAAC,gBAAgB,EAAET,QAAQU,UAAU,GAAGV,QAAQzD,MAAM,GAAG,MAAM,CAAC;QACjF,MAAMoE,aAAa,MAAMC,mBAAY,CAACnB,GAAG,CAACgB;QAE1C,IAAIE,YAAY;YACZE,QAAQC,GAAG,CAAC;YACZ,OAAOV,oBAAY,CAACC,IAAI,CAAC;gBACrB,GAAGM,UAAU;gBACbI,MAAM;oBACFC,cAAchB,QAAQU,UAAU;oBAChCnE,QAAQyD,QAAQzD,MAAM;oBACtB0E,WAAW;gBACf;YACJ;QACJ;QAEAJ,QAAQC,GAAG,CAAC,6DAAmD;YAC3DvE,QAAQyD,QAAQzD,MAAM;YACtBmE,YAAYV,QAAQU,UAAU;QAClC;QACA,MAAMQ,cAAc,MAAM5E,eAAe0D,QAAQU,UAAU,GAAGV,QAAQzD,MAAM,GAAG;QAE/E,2BAA2B;QAC3B,MAAM4E,eAAe;YACjB,GAAGD,WAAW;YACdH,MAAM;gBACFC,cAAchB,QAAQU,UAAU;gBAChCnE,QAAQyD,QAAQzD,MAAM;gBACtB0E,WAAW;YACf;QACJ;QAEA,0DAA0D;QAC1D,MAAML,mBAAY,CAAC1B,GAAG,CAACuB,UAAUU,cAAc;QAC/CN,QAAQC,GAAG,CAAC;QAEZ,OAAOV,oBAAY,CAACC,IAAI,CAACc;IAC7B,EAAE,OAAOb,OAAO;QACZO,QAAQP,KAAK,CAAC,yCAAyCA;QACvD,OAAOF,oBAAY,CAACC,IAAI,CAAC;YACrBxC,SAAS;YACTC,MAAM,EAAE;YACRyC,SAASD,iBAAiBc,QAAQd,MAAMC,OAAO,GAAG;YAClDQ,MAAM;gBACFC,cAAchB,QAAQU,UAAU;gBAChCnE,QAAQyD,QAAQzD,MAAM;YAC1B;QACJ,GAAG;YAAEiE,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "38c98a5e791134e3773d9cfea436f415552966f3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kcwhvrt63 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kcwhvrt63();
cov_kcwhvrt63().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[0]++;
  cov_kcwhvrt63().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_kcwhvrt63().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_kcwhvrt63().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[1]++;
    cov_kcwhvrt63().s[4]++;
    return GET;
  },
  fetchShopsData: function () {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[2]++;
    cov_kcwhvrt63().s[5]++;
    return fetchShopsData;
  }
});
const _server =
/* istanbul ignore next */
(cov_kcwhvrt63().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_kcwhvrt63().s[7]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_kcwhvrt63().s[8]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_kcwhvrt63().s[9]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_kcwhvrt63().s[10]++, require("../../../../lib/auth"));
async function fetchShopsData(shopId, periodDays, startDate, endDate) {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[3]++;
  let startOfPeriod;
  let endOfPeriod;
  /* istanbul ignore next */
  cov_kcwhvrt63().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[1][0]++, startDate) &&
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[1][1]++, endDate)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[0][0]++;
    cov_kcwhvrt63().s[12]++;
    startOfPeriod = startDate;
    /* istanbul ignore next */
    cov_kcwhvrt63().s[13]++;
    endOfPeriod = endDate;
  } else {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[0][1]++;
    // Default to current month if no dates provided
    const now =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[14]++, new Date());
    /* istanbul ignore next */
    cov_kcwhvrt63().s[15]++;
    startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[16]++;
    endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
  }
  // 1. Fetch shops and their inventory with optional shop filtering
  const shopsWithInventory =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[17]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[4]++;
    const where =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[18]++, shopId ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[2][0]++, {
      id: shopId
    }) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[2][1]++, {}));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[19]++;
    return _prisma.prisma.shop.findMany({
      where,
      include: {
        InventoryItem: {
          select: {
            quantity: true
          } // Only select quantity for stock calculation
        }
      }
    });
  }, [], "Failed to fetch shops data"));
  /* istanbul ignore next */
  cov_kcwhvrt63().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[4][0]++, !shopsWithInventory) ||
  /* istanbul ignore next */
  (cov_kcwhvrt63().b[4][1]++, shopsWithInventory.length === 0)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[3][0]++;
    cov_kcwhvrt63().s[21]++;
    return {
      success: true,
      data: []
    };
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[3][1]++;
  }
  // 2. Fetch aggregated sales data for all relevant shops in the specified period
  const shopIds =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[22]++, shopsWithInventory.map(s => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[5]++;
    cov_kcwhvrt63().s[23]++;
    return s.id;
  }));
  const salesByShop =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[24]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[6]++;
    cov_kcwhvrt63().s[25]++;
    return _prisma.prisma.invoice.groupBy({
      by: ["shopId"],
      where: {
        shopId: {
          in: shopIds
        },
        createdAt: {
          gte: startOfPeriod,
          lte: endOfPeriod
        }
      },
      _sum: {
        total: true
      }
    });
  }, [], "Failed to fetch aggregated sales data for shops"));
  // Create a map for easy lookup of sales by shopId
  const salesMap =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[26]++, new Map());
  /* istanbul ignore next */
  cov_kcwhvrt63().s[27]++;
  if (Array.isArray(salesByShop)) {
    /* istanbul ignore next */
    cov_kcwhvrt63().b[5][0]++;
    cov_kcwhvrt63().s[28]++;
    salesByShop.forEach(sale => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[7]++;
      cov_kcwhvrt63().s[29]++;
      if (sale.shopId !== null) {
        /* istanbul ignore next */
        cov_kcwhvrt63().b[6][0]++;
        cov_kcwhvrt63().s[30]++;
        salesMap.set(sale.shopId,
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[7][0]++, sale._sum.total) ||
        /* istanbul ignore next */
        (cov_kcwhvrt63().b[7][1]++, 0));
      } else
      /* istanbul ignore next */
      {
        cov_kcwhvrt63().b[6][1]++;
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_kcwhvrt63().b[5][1]++;
  }
  // 3. Combine shop data with their sales and stock
  const data =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[31]++, shopsWithInventory.map(shop => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[8]++;
    const totalStock =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[32]++, shop.InventoryItem.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_kcwhvrt63().f[9]++;
      cov_kcwhvrt63().s[33]++;
      return sum + item.quantity;
    }, 0));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[34]++;
    return {
      name: shop.name,
      sales:
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[8][0]++, salesMap.get(shop.id)) ||
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[8][1]++, 0),
      stock: totalStock
    };
  }));
  // Filter out shops with no inventory (if still desired, or adjust logic)
  const shopsToDisplay =
  /* istanbul ignore next */
  (cov_kcwhvrt63().s[35]++, data.filter(shop => {
    /* istanbul ignore next */
    cov_kcwhvrt63().f[10]++;
    cov_kcwhvrt63().s[36]++;
    return /* istanbul ignore next */(cov_kcwhvrt63().b[9][0]++, shop.stock > 0) ||
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[9][1]++, shop.sales > 0);
  })); // show if stock or sales
  /* istanbul ignore next */
  cov_kcwhvrt63().s[37]++;
  return {
    success: true,
    data: shopsToDisplay
  };
}
const GET =
/* istanbul ignore next */
(cov_kcwhvrt63().s[38]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_kcwhvrt63().f[11]++;
  cov_kcwhvrt63().s[39]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[40]++, await (0, _auth.validateTokenPermission)(request, "dashboard:view"));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[41]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_kcwhvrt63().b[10][0]++;
      cov_kcwhvrt63().s[42]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_kcwhvrt63().b[10][1]++;
    }
    // Check cache first with shop context
    const cacheKey =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[43]++, `dashboard:shops:${context.isFiltered ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[11][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[11][1]++, "all")}`);
    const cachedData =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[44]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_kcwhvrt63().s[45]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_kcwhvrt63().b[12][0]++;
      cov_kcwhvrt63().s[46]++;
      console.log("✅ Shops data served from cache");
      /* istanbul ignore next */
      cov_kcwhvrt63().s[47]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_kcwhvrt63().b[12][1]++;
    }
    cov_kcwhvrt63().s[48]++;
    console.log("\uD83D\uDD04 Fetching fresh shops data with shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered
    });
    const shopsResult =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[49]++, await fetchShopsData(context.isFiltered ?
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[13][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_kcwhvrt63().b[13][1]++, null)));
    // Add metadata to response
    const responseData =
    /* istanbul ignore next */
    (cov_kcwhvrt63().s[50]++, {
      ...shopsResult,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache for 5 minutes (shop data changes less frequently)
    /* istanbul ignore next */
    cov_kcwhvrt63().s[51]++;
    await _cache.cacheService.set(cacheKey, responseData, 300);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[52]++;
    console.log("\uD83D\uDCBE Shops data cached for 5 minutes");
    /* istanbul ignore next */
    cov_kcwhvrt63().s[53]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_kcwhvrt63().s[54]++;
    console.error("Error fetching shop performance data:", error);
    /* istanbul ignore next */
    cov_kcwhvrt63().s[55]++;
    return _server.NextResponse.json({
      success: false,
      data: [],
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_kcwhvrt63().b[14][1]++, "Unknown error"),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,