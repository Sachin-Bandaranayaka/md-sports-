{"version":3,"names":["GET","cov_kcwhvrt63","f","s","fetchShopsData","shopId","periodDays","startDate","endDate","startOfPeriod","endOfPeriod","b","now","Date","getFullYear","getMonth","shopsWithInventory","_prisma","safeQuery","where","id","prisma","shop","findMany","include","InventoryItem","select","quantity","length","success","data","shopIds","map","salesByShop","invoice","groupBy","by","in","createdAt","gte","lte","_sum","total","salesMap","Map","Array","isArray","forEach","sale","set","totalStock","reduce","sum","item","name","sales","get","stock","shopsToDisplay","filter","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","cacheKey","isFiltered","cachedData","_cache","cacheService","console","log","meta","shopFiltered","fromCache","shopsResult","responseData","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for shops (can be removed if not needed after refactor)\n// const defaultShopsData = [\n//     { name: 'Colombo Shop', sales: 125000, stock: 450 },\n//     { name: 'Kandy Shop', sales: 98500, stock: 320 },\n//     { name: 'Galle Shop', sales: 75200, stock: 280 },\n//     { name: 'Jaffna Shop', sales: 62800, stock: 210 }\n// ];\n\nexport async function fetchShopsData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    let startOfPeriod: Date;\n    let endOfPeriod: Date;\n\n    if (startDate && endDate) {\n        startOfPeriod = startDate;\n        endOfPeriod = endDate;\n    } else {\n        // Default to current month if no dates provided\n        const now = new Date();\n        startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);\n        endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n    }\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the specified period\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const salesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds },\n                createdAt: {\n                    gte: startOfPeriod,\n                    lte: endOfPeriod\n                }\n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(salesByShop)) {\n        salesByShop.forEach(sale => {\n            if (sale.shopId !== null) {\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0,\n            stock: totalStock\n        };\n    });\n\n    // Filter out shops with no inventory (if still desired, or adjust logic)\n    const shopsToDisplay = data.filter(shop => shop.stock > 0 || shop.sales > 0); // show if stock or sales\n\n    return {\n        success: true,\n        data: shopsToDisplay\n    };\n}\n\n// GET: Fetch shop performance data\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:shops:${context.isFiltered ? context.shopId : 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Shops data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh shops data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered\n        });\n        const shopsResult = await fetchShopsData(context.isFiltered ? context.shopId : null);\n\n        // Add metadata to response\n        const responseData = {\n            ...shopsResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 5 minutes (shop data changes less frequently)\n        await cacheService.set(cacheKey, responseData, 300);\n        console.log('ðŸ’¾ Shops data cached for 5 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching shop performance data:', error);\n        return NextResponse.json({\n            success: false, // Signal error more clearly\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],"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","ignoreList":[]}