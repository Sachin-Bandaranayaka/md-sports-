{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/components/components.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock usePermission hook\nconst mockUsePermission = jest.fn();\njest.mock('@/hooks/usePermission', () => ({\n  usePermission: () => mockUsePermission(),\n}));\n\n// Mock next/navigation\nconst mockPush = jest.fn();\nconst mockReplace = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: mockReplace,\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  usePathname: () => '/dashboard',\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock components (since we don't have actual component files)\nconst MockLoginForm = ({ onSubmit, loading }: { onSubmit: (data: any) => void; loading?: boolean }) => {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({ email, password });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} data-testid=\"login-form\">\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        data-testid=\"email-input\"\n        required\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        data-testid=\"password-input\"\n        required\n      />\n      <button type=\"submit\" disabled={loading} data-testid=\"login-button\">\n        {loading ? 'Logging in...' : 'Login'}\n      </button>\n    </form>\n  );\n};\n\nconst MockInvoiceForm = ({ onSubmit, initialData, loading }: { \n  onSubmit: (data: any) => void; \n  initialData?: any; \n  loading?: boolean;\n}) => {\n  const [formData, setFormData] = React.useState({\n    customerId: initialData?.customerId || '',\n    items: initialData?.items || [{ productId: '', quantity: 1, price: 0 }],\n    notes: initialData?.notes || ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const addItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, { productId: '', quantity: 1, price: 0 }]\n    }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} data-testid=\"invoice-form\">\n      <select\n        value={formData.customerId}\n        onChange={(e) => setFormData(prev => ({ ...prev, customerId: e.target.value }))}\n        data-testid=\"customer-select\"\n        required\n      >\n        <option value=\"\">Select Customer</option>\n        <option value=\"cust-1\">Customer 1</option>\n        <option value=\"cust-2\">Customer 2</option>\n      </select>\n      \n      {formData.items.map((item, index) => (\n        <div key={index} data-testid={`item-${index}`}>\n          <input\n            type=\"text\"\n            placeholder=\"Product ID\"\n            value={item.productId}\n            onChange={(e) => {\n              const newItems = [...formData.items];\n              newItems[index].productId = e.target.value;\n              setFormData(prev => ({ ...prev, items: newItems }));\n            }}\n            data-testid={`product-input-${index}`}\n            required\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Quantity\"\n            value={item.quantity}\n            onChange={(e) => {\n              const newItems = [...formData.items];\n              newItems[index].quantity = parseInt(e.target.value) || 0;\n              setFormData(prev => ({ ...prev, items: newItems }));\n            }}\n            data-testid={`quantity-input-${index}`}\n            min=\"1\"\n            required\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Price\"\n            value={item.price}\n            onChange={(e) => {\n              const newItems = [...formData.items];\n              newItems[index].price = parseFloat(e.target.value) || 0;\n              setFormData(prev => ({ ...prev, items: newItems }));\n            }}\n            data-testid={`price-input-${index}`}\n            min=\"0\"\n            step=\"0.01\"\n            required\n          />\n        </div>\n      ))}\n      \n      <button type=\"button\" onClick={addItem} data-testid=\"add-item-button\">\n        Add Item\n      </button>\n      \n      <textarea\n        placeholder=\"Notes\"\n        value={formData.notes}\n        onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n        data-testid=\"notes-textarea\"\n      />\n      \n      <button type=\"submit\" disabled={loading} data-testid=\"submit-button\">\n        {loading ? 'Saving...' : 'Save Invoice'}\n      </button>\n    </form>\n  );\n};\n\nconst MockDataTable = ({ data, columns, onEdit, onDelete, loading }: {\n  data: any[];\n  columns: { key: string; label: string }[];\n  onEdit?: (item: any) => void;\n  onDelete?: (item: any) => void;\n  loading?: boolean;\n}) => {\n  if (loading) {\n    return <div data-testid=\"table-loading\">Loading...</div>;\n  }\n\n  return (\n    <table data-testid=\"data-table\">\n      <thead>\n        <tr>\n          {columns.map(col => (\n            <th key={col.key} data-testid={`header-${col.key}`}>\n              {col.label}\n            </th>\n          ))}\n          {(onEdit || onDelete) && <th>Actions</th>}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => (\n          <tr key={item.id || index} data-testid={`row-${index}`}>\n            {columns.map(col => (\n              <td key={col.key} data-testid={`cell-${index}-${col.key}`}>\n                {item[col.key]}\n              </td>\n            ))}\n            {(onEdit || onDelete) && (\n              <td>\n                {onEdit && (\n                  <button\n                    onClick={() => onEdit(item)}\n                    data-testid={`edit-${index}`}\n                  >\n                    Edit\n                  </button>\n                )}\n                {onDelete && (\n                  <button\n                    onClick={() => onDelete(item)}\n                    data-testid={`delete-${index}`}\n                  >\n                    Delete\n                  </button>\n                )}\n              </td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst MockDashboardCard = ({ title, value, change, loading }: {\n  title: string;\n  value: string | number;\n  change?: { value: number; type: 'increase' | 'decrease' };\n  loading?: boolean;\n}) => {\n  if (loading) {\n    return (\n      <div data-testid=\"dashboard-card\" className=\"loading\">\n        <div data-testid=\"card-skeleton\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"dashboard-card\">\n      <h3 data-testid=\"card-title\">{title}</h3>\n      <div data-testid=\"card-value\">{value}</div>\n      {change && (\n        <div \n          data-testid=\"card-change\" \n          className={change.type}\n        >\n          {change.type === 'increase' ? '↑' : '↓'} {change.value}%\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst MockSearchFilter = ({ onSearch, onFilter, filters }: {\n  onSearch: (query: string) => void;\n  onFilter: (filters: any) => void;\n  filters: { [key: string]: any };\n}) => {\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [localFilters, setLocalFilters] = React.useState(filters);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(searchQuery);\n  };\n\n  const handleFilterChange = (key: string, value: any) => {\n    const newFilters = { ...localFilters, [key]: value };\n    setLocalFilters(newFilters);\n    onFilter(newFilters);\n  };\n\n  return (\n    <div data-testid=\"search-filter\">\n      <form onSubmit={handleSearch} data-testid=\"search-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          data-testid=\"search-input\"\n        />\n        <button type=\"submit\" data-testid=\"search-button\">\n          Search\n        </button>\n      </form>\n      \n      <div data-testid=\"filters\">\n        <select\n          value={localFilters.status || ''}\n          onChange={(e) => handleFilterChange('status', e.target.value)}\n          data-testid=\"status-filter\"\n        >\n          <option value=\"\">All Status</option>\n          <option value=\"active\">Active</option>\n          <option value=\"inactive\">Inactive</option>\n          <option value=\"pending\">Pending</option>\n        </select>\n        \n        <select\n          value={localFilters.category || ''}\n          onChange={(e) => handleFilterChange('category', e.target.value)}\n          data-testid=\"category-filter\"\n        >\n          <option value=\"\">All Categories</option>\n          <option value=\"electronics\">Electronics</option>\n          <option value=\"clothing\">Clothing</option>\n          <option value=\"books\">Books</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\ndescribe('Component Testing', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Default auth mock\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Test User',\n        email: 'test@example.com',\n        permissions: ['sales:all', 'inventory:all', 'customers:all']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      hasPermission: jest.fn(() => true)\n    });\n\n    // Default permission mock\n    mockUsePermission.mockReturnValue({\n      hasPermission: jest.fn(() => true),\n      hasAnyPermission: jest.fn(() => true),\n      hasAllPermissions: jest.fn(() => true)\n    });\n  });\n\n  describe('LoginForm Component', () => {\n    test('should render login form correctly', () => {\n      const mockOnSubmit = jest.fn();\n      render(<MockLoginForm onSubmit={mockOnSubmit} />);\n      \n      expect(screen.getByTestId('login-form')).toBeInTheDocument();\n      expect(screen.getByTestId('email-input')).toBeInTheDocument();\n      expect(screen.getByTestId('password-input')).toBeInTheDocument();\n      expect(screen.getByTestId('login-button')).toBeInTheDocument();\n    });\n\n    test('should handle form submission with valid data', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      \n      render(<MockLoginForm onSubmit={mockOnSubmit} />);\n      \n      await user.type(screen.getByTestId('email-input'), 'test@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.click(screen.getByTestId('login-button'));\n      \n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123'\n      });\n    });\n\n    test('should show loading state', () => {\n      const mockOnSubmit = jest.fn();\n      render(<MockLoginForm onSubmit={mockOnSubmit} loading={true} />);\n      \n      const button = screen.getByTestId('login-button');\n      expect(button).toBeDisabled();\n      expect(button).toHaveTextContent('Logging in...');\n    });\n\n    test('should require email and password fields', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      \n      render(<MockLoginForm onSubmit={mockOnSubmit} />);\n      \n      await user.click(screen.getByTestId('login-button'));\n      \n      // Form should not submit without required fields\n      expect(mockOnSubmit).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('InvoiceForm Component', () => {\n    test('should render invoice form correctly', () => {\n      const mockOnSubmit = jest.fn();\n      render(<MockInvoiceForm onSubmit={mockOnSubmit} />);\n      \n      expect(screen.getByTestId('invoice-form')).toBeInTheDocument();\n      expect(screen.getByTestId('customer-select')).toBeInTheDocument();\n      expect(screen.getByTestId('item-0')).toBeInTheDocument();\n      expect(screen.getByTestId('add-item-button')).toBeInTheDocument();\n      expect(screen.getByTestId('submit-button')).toBeInTheDocument();\n    });\n\n    test('should handle adding new items', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      \n      render(<MockInvoiceForm onSubmit={mockOnSubmit} />);\n      \n      expect(screen.getByTestId('item-0')).toBeInTheDocument();\n      expect(screen.queryByTestId('item-1')).not.toBeInTheDocument();\n      \n      await user.click(screen.getByTestId('add-item-button'));\n      \n      expect(screen.getByTestId('item-1')).toBeInTheDocument();\n    });\n\n    test('should handle form submission with complete data', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      \n      render(<MockInvoiceForm onSubmit={mockOnSubmit} />);\n      \n      await user.selectOptions(screen.getByTestId('customer-select'), 'cust-1');\n      await user.type(screen.getByTestId('product-input-0'), 'prod-1');\n      await user.clear(screen.getByTestId('quantity-input-0'));\n      await user.type(screen.getByTestId('quantity-input-0'), '2');\n      await user.clear(screen.getByTestId('price-input-0'));\n      await user.type(screen.getByTestId('price-input-0'), '100');\n      await user.type(screen.getByTestId('notes-textarea'), 'Test invoice');\n      \n      await user.click(screen.getByTestId('submit-button'));\n      \n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        customerId: 'cust-1',\n        items: [{ productId: 'prod-1', quantity: 2, price: 100 }],\n        notes: 'Test invoice'\n      });\n    });\n\n    test('should populate form with initial data', () => {\n      const initialData = {\n        customerId: 'cust-2',\n        items: [{ productId: 'prod-2', quantity: 3, price: 150 }],\n        notes: 'Initial notes'\n      };\n      \n      const mockOnSubmit = jest.fn();\n      render(<MockInvoiceForm onSubmit={mockOnSubmit} initialData={initialData} />);\n      \n      expect(screen.getByTestId('customer-select')).toHaveValue('cust-2');\n      expect(screen.getByTestId('product-input-0')).toHaveValue('prod-2');\n      expect(screen.getByTestId('quantity-input-0')).toHaveValue(3);\n      expect(screen.getByTestId('price-input-0')).toHaveValue(150);\n      expect(screen.getByTestId('notes-textarea')).toHaveValue('Initial notes');\n    });\n  });\n\n  describe('DataTable Component', () => {\n    const mockData = [\n      { id: '1', name: 'Item 1', status: 'active', price: 100 },\n      { id: '2', name: 'Item 2', status: 'inactive', price: 200 }\n    ];\n    \n    const mockColumns = [\n      { key: 'name', label: 'Name' },\n      { key: 'status', label: 'Status' },\n      { key: 'price', label: 'Price' }\n    ];\n\n    test('should render table with data correctly', () => {\n      render(<MockDataTable data={mockData} columns={mockColumns} />);\n      \n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      expect(screen.getByTestId('header-name')).toHaveTextContent('Name');\n      expect(screen.getByTestId('header-status')).toHaveTextContent('Status');\n      expect(screen.getByTestId('header-price')).toHaveTextContent('Price');\n      \n      expect(screen.getByTestId('cell-0-name')).toHaveTextContent('Item 1');\n      expect(screen.getByTestId('cell-1-name')).toHaveTextContent('Item 2');\n    });\n\n    test('should handle edit and delete actions', async () => {\n      const mockOnEdit = jest.fn();\n      const mockOnDelete = jest.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <MockDataTable \n          data={mockData} \n          columns={mockColumns} \n          onEdit={mockOnEdit}\n          onDelete={mockOnDelete}\n        />\n      );\n      \n      await user.click(screen.getByTestId('edit-0'));\n      expect(mockOnEdit).toHaveBeenCalledWith(mockData[0]);\n      \n      await user.click(screen.getByTestId('delete-1'));\n      expect(mockOnDelete).toHaveBeenCalledWith(mockData[1]);\n    });\n\n    test('should show loading state', () => {\n      render(<MockDataTable data={[]} columns={mockColumns} loading={true} />);\n      \n      expect(screen.getByTestId('table-loading')).toBeInTheDocument();\n      expect(screen.getByTestId('table-loading')).toHaveTextContent('Loading...');\n    });\n\n    test('should render empty table when no data', () => {\n      render(<MockDataTable data={[]} columns={mockColumns} />);\n      \n      expect(screen.getByTestId('data-table')).toBeInTheDocument();\n      expect(screen.queryByTestId('row-0')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('DashboardCard Component', () => {\n    test('should render card with basic data', () => {\n      render(\n        <MockDashboardCard \n          title=\"Total Sales\" \n          value=\"$125,000\" \n        />\n      );\n      \n      expect(screen.getByTestId('dashboard-card')).toBeInTheDocument();\n      expect(screen.getByTestId('card-title')).toHaveTextContent('Total Sales');\n      expect(screen.getByTestId('card-value')).toHaveTextContent('$125,000');\n    });\n\n    test('should render card with change indicator', () => {\n      render(\n        <MockDashboardCard \n          title=\"Revenue\" \n          value={50000} \n          change={{ value: 15.5, type: 'increase' }}\n        />\n      );\n      \n      expect(screen.getByTestId('card-change')).toBeInTheDocument();\n      expect(screen.getByTestId('card-change')).toHaveTextContent('↑ 15.5%');\n      expect(screen.getByTestId('card-change')).toHaveClass('increase');\n    });\n\n    test('should render card with decrease indicator', () => {\n      render(\n        <MockDashboardCard \n          title=\"Orders\" \n          value={200} \n          change={{ value: 5.2, type: 'decrease' }}\n        />\n      );\n      \n      expect(screen.getByTestId('card-change')).toHaveTextContent('↓ 5.2%');\n      expect(screen.getByTestId('card-change')).toHaveClass('decrease');\n    });\n\n    test('should show loading state', () => {\n      render(\n        <MockDashboardCard \n          title=\"Loading Card\" \n          value=\"\" \n          loading={true}\n        />\n      );\n      \n      expect(screen.getByTestId('dashboard-card')).toHaveClass('loading');\n      expect(screen.getByTestId('card-skeleton')).toBeInTheDocument();\n    });\n  });\n\n  describe('SearchFilter Component', () => {\n    test('should render search and filter controls', () => {\n      const mockOnSearch = jest.fn();\n      const mockOnFilter = jest.fn();\n      \n      render(\n        <MockSearchFilter \n          onSearch={mockOnSearch}\n          onFilter={mockOnFilter}\n          filters={{}}\n        />\n      );\n      \n      expect(screen.getByTestId('search-filter')).toBeInTheDocument();\n      expect(screen.getByTestId('search-input')).toBeInTheDocument();\n      expect(screen.getByTestId('search-button')).toBeInTheDocument();\n      expect(screen.getByTestId('status-filter')).toBeInTheDocument();\n      expect(screen.getByTestId('category-filter')).toBeInTheDocument();\n    });\n\n    test('should handle search submission', async () => {\n      const mockOnSearch = jest.fn();\n      const mockOnFilter = jest.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <MockSearchFilter \n          onSearch={mockOnSearch}\n          onFilter={mockOnFilter}\n          filters={{}}\n        />\n      );\n      \n      await user.type(screen.getByTestId('search-input'), 'test query');\n      await user.click(screen.getByTestId('search-button'));\n      \n      expect(mockOnSearch).toHaveBeenCalledWith('test query');\n    });\n\n    test('should handle filter changes', async () => {\n      const mockOnSearch = jest.fn();\n      const mockOnFilter = jest.fn();\n      const user = userEvent.setup();\n      \n      render(\n        <MockSearchFilter \n          onSearch={mockOnSearch}\n          onFilter={mockOnFilter}\n          filters={{}}\n        />\n      );\n      \n      await user.selectOptions(screen.getByTestId('status-filter'), 'active');\n      expect(mockOnFilter).toHaveBeenCalledWith({ status: 'active' });\n      \n      await user.selectOptions(screen.getByTestId('category-filter'), 'electronics');\n      expect(mockOnFilter).toHaveBeenCalledWith({ status: 'active', category: 'electronics' });\n    });\n\n    test('should initialize with provided filters', () => {\n      const mockOnSearch = jest.fn();\n      const mockOnFilter = jest.fn();\n      const initialFilters = { status: 'pending', category: 'books' };\n      \n      render(\n        <MockSearchFilter \n          onSearch={mockOnSearch}\n          onFilter={mockOnFilter}\n          filters={initialFilters}\n        />\n      );\n      \n      expect(screen.getByTestId('status-filter')).toHaveValue('pending');\n      expect(screen.getByTestId('category-filter')).toHaveValue('books');\n    });\n  });\n\n  describe('Permission-based Component Rendering', () => {\n    test('should render components when user has permissions', () => {\n      mockUsePermission.mockReturnValue({\n        hasPermission: jest.fn(() => true),\n        hasAnyPermission: jest.fn(() => true),\n        hasAllPermissions: jest.fn(() => true)\n      });\n\n      const ProtectedComponent = () => {\n        const { hasPermission } = mockUsePermission();\n        \n        if (!hasPermission('sales:create')) {\n          return <div data-testid=\"no-permission\">No permission</div>;\n        }\n        \n        return <div data-testid=\"protected-content\">Protected content</div>;\n      };\n      \n      render(<ProtectedComponent />);\n      \n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n      expect(screen.queryByTestId('no-permission')).not.toBeInTheDocument();\n    });\n\n    test('should hide components when user lacks permissions', () => {\n      mockUsePermission.mockReturnValue({\n        hasPermission: jest.fn(() => false),\n        hasAnyPermission: jest.fn(() => false),\n        hasAllPermissions: jest.fn(() => false)\n      });\n\n      const ProtectedComponent = () => {\n        const { hasPermission } = mockUsePermission();\n        \n        if (!hasPermission('sales:create')) {\n          return <div data-testid=\"no-permission\">No permission</div>;\n        }\n        \n        return <div data-testid=\"protected-content\">Protected content</div>;\n      };\n      \n      render(<ProtectedComponent />);\n      \n      expect(screen.getByTestId('no-permission')).toBeInTheDocument();\n      expect(screen.queryByTestId('protected-content')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Error Boundary and Error Handling', () => {\n    test('should handle component errors gracefully', () => {\n      const ErrorComponent = () => {\n        throw new Error('Test error');\n      };\n\n      const ErrorBoundary = ({ children }: { children: React.ReactNode }) => {\n        const [hasError, setHasError] = React.useState(false);\n\n        React.useEffect(() => {\n          const errorHandler = () => setHasError(true);\n          window.addEventListener('error', errorHandler);\n          return () => window.removeEventListener('error', errorHandler);\n        }, []);\n\n        if (hasError) {\n          return <div data-testid=\"error-fallback\">Something went wrong</div>;\n        }\n\n        return <>{children}</>;\n      };\n\n      // Suppress console.error for this test\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      \n      try {\n        render(\n          <ErrorBoundary>\n            <ErrorComponent />\n          </ErrorBoundary>\n        );\n      } catch (error) {\n        // Expected error\n      }\n      \n      consoleSpy.mockRestore();\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","usePermission","mockUsePermission","useRouter","push","mockPush","replace","mockReplace","back","fn","forward","refresh","prefetch","usePathname","useSearchParams","URLSearchParams","mockFetch","global","fetch","MockLoginForm","onSubmit","loading","email","setEmail","React","useState","password","setPassword","handleSubmit","e","preventDefault","form","data-testid","input","type","placeholder","value","onChange","target","required","button","disabled","MockInvoiceForm","initialData","formData","setFormData","customerId","items","productId","quantity","price","notes","addItem","prev","select","option","map","item","index","div","newItems","parseInt","min","parseFloat","step","onClick","textarea","MockDataTable","data","columns","onEdit","onDelete","table","thead","tr","col","th","key","label","tbody","td","id","MockDashboardCard","title","change","className","h3","MockSearchFilter","onSearch","onFilter","filters","searchQuery","setSearchQuery","localFilters","setLocalFilters","handleSearch","handleFilterChange","newFilters","status","category","describe","beforeEach","clearAllMocks","Object","defineProperty","window","getItem","setItem","removeItem","writable","mockReturnValue","user","name","permissions","isLoading","isAuthenticated","login","logout","hasPermission","hasAnyPermission","hasAllPermissions","test","mockOnSubmit","render","expect","screen","getByTestId","toBeInTheDocument","userEvent","setup","click","toHaveBeenCalledWith","toBeDisabled","toHaveTextContent","not","toHaveBeenCalled","queryByTestId","selectOptions","clear","toHaveValue","mockData","mockColumns","mockOnEdit","mockOnDelete","toHaveClass","mockOnSearch","mockOnFilter","initialFilters","ProtectedComponent","ErrorComponent","Error","ErrorBoundary","children","hasError","setHasError","useEffect","errorHandler","addEventListener","removeEventListener","consoleSpy","spyOn","console","mockImplementation","error","mockRestore"],"mappings":";AAOAA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,SAAS,IAAMC;IACjB,CAAA;AAIAH,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxCG,eAAe,IAAMC;IACvB,CAAA;AAKAL,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCK,WAAW,IAAO,CAAA;gBAChBC,MAAMC;gBACNC,SAASC;gBACTC,MAAMX,KAAKY,EAAE;gBACbC,SAASb,KAAKY,EAAE;gBAChBE,SAASd,KAAKY,EAAE;gBAChBG,UAAUf,KAAKY,EAAE;YACnB,CAAA;QACAI,aAAa,IAAM;QACnBC,iBAAiB,IAAM,IAAIC;IAC7B,CAAA;;;;;8DA/BkB;wBACiC;QAC5C;kEACe;;;;;;AAEtB,wBAAwB;AACxB,MAAMf,cAAcH,KAAKY,EAAE;AAK3B,0BAA0B;AAC1B,MAAMP,oBAAoBL,KAAKY,EAAE;AAKjC,uBAAuB;AACvB,MAAMJ,WAAWR,KAAKY,EAAE;AACxB,MAAMF,cAAcV,KAAKY,EAAE;AAc3B,sBAAsB;AACtB,MAAMO,YAAYnB,KAAKY,EAAE;AACzBQ,OAAOC,KAAK,GAAGF;AAEf,+DAA+D;AAC/D,MAAMG,gBAAgB,CAAC,EAAEC,QAAQ,EAAEC,OAAO,EAAwD;IAChG,MAAM,CAACC,OAAOC,SAAS,GAAGC,cAAK,CAACC,QAAQ,CAAC;IACzC,MAAM,CAACC,UAAUC,YAAY,GAAGH,cAAK,CAACC,QAAQ,CAAC;IAE/C,MAAMG,eAAe,CAACC;QACpBA,EAAEC,cAAc;QAChBV,SAAS;YAAEE;YAAOI;QAAS;IAC7B;IAEA,qBACE,sBAACK;QAAKX,UAAUQ;QAAcI,eAAY;;0BACxC,qBAACC;gBACCC,MAAK;gBACLC,aAAY;gBACZC,OAAOd;gBACPe,UAAU,CAACR,IAAMN,SAASM,EAAES,MAAM,CAACF,KAAK;gBACxCJ,eAAY;gBACZO,QAAQ;;0BAEV,qBAACN;gBACCC,MAAK;gBACLC,aAAY;gBACZC,OAAOV;gBACPW,UAAU,CAACR,IAAMF,YAAYE,EAAES,MAAM,CAACF,KAAK;gBAC3CJ,eAAY;gBACZO,QAAQ;;0BAEV,qBAACC;gBAAON,MAAK;gBAASO,UAAUpB;gBAASW,eAAY;0BAClDX,UAAU,kBAAkB;;;;AAIrC;AAEA,MAAMqB,kBAAkB,CAAC,EAAEtB,QAAQ,EAAEuB,WAAW,EAAEtB,OAAO,EAIxD;IACC,MAAM,CAACuB,UAAUC,YAAY,GAAGrB,cAAK,CAACC,QAAQ,CAAC;QAC7CqB,YAAYH,aAAaG,cAAc;QACvCC,OAAOJ,aAAaI,SAAS;YAAC;gBAAEC,WAAW;gBAAIC,UAAU;gBAAGC,OAAO;YAAE;SAAE;QACvEC,OAAOR,aAAaQ,SAAS;IAC/B;IAEA,MAAMvB,eAAe,CAACC;QACpBA,EAAEC,cAAc;QAChBV,SAASwB;IACX;IAEA,MAAMQ,UAAU;QACdP,YAAYQ,CAAAA,OAAS,CAAA;gBACnB,GAAGA,IAAI;gBACPN,OAAO;uBAAIM,KAAKN,KAAK;oBAAE;wBAAEC,WAAW;wBAAIC,UAAU;wBAAGC,OAAO;oBAAE;iBAAE;YAClE,CAAA;IACF;IAEA,qBACE,sBAACnB;QAAKX,UAAUQ;QAAcI,eAAY;;0BACxC,sBAACsB;gBACClB,OAAOQ,SAASE,UAAU;gBAC1BT,UAAU,CAACR,IAAMgB,YAAYQ,CAAAA,OAAS,CAAA;4BAAE,GAAGA,IAAI;4BAAEP,YAAYjB,EAAES,MAAM,CAACF,KAAK;wBAAC,CAAA;gBAC5EJ,eAAY;gBACZO,QAAQ;;kCAER,qBAACgB;wBAAOnB,OAAM;kCAAG;;kCACjB,qBAACmB;wBAAOnB,OAAM;kCAAS;;kCACvB,qBAACmB;wBAAOnB,OAAM;kCAAS;;;;YAGxBQ,SAASG,KAAK,CAACS,GAAG,CAAC,CAACC,MAAMC,sBACzB,sBAACC;oBAAgB3B,eAAa,CAAC,KAAK,EAAE0B,MAAM,CAAC;;sCAC3C,qBAACzB;4BACCC,MAAK;4BACLC,aAAY;4BACZC,OAAOqB,KAAKT,SAAS;4BACrBX,UAAU,CAACR;gCACT,MAAM+B,WAAW;uCAAIhB,SAASG,KAAK;iCAAC;gCACpCa,QAAQ,CAACF,MAAM,CAACV,SAAS,GAAGnB,EAAES,MAAM,CAACF,KAAK;gCAC1CS,YAAYQ,CAAAA,OAAS,CAAA;wCAAE,GAAGA,IAAI;wCAAEN,OAAOa;oCAAS,CAAA;4BAClD;4BACA5B,eAAa,CAAC,cAAc,EAAE0B,MAAM,CAAC;4BACrCnB,QAAQ;;sCAEV,qBAACN;4BACCC,MAAK;4BACLC,aAAY;4BACZC,OAAOqB,KAAKR,QAAQ;4BACpBZ,UAAU,CAACR;gCACT,MAAM+B,WAAW;uCAAIhB,SAASG,KAAK;iCAAC;gCACpCa,QAAQ,CAACF,MAAM,CAACT,QAAQ,GAAGY,SAAShC,EAAES,MAAM,CAACF,KAAK,KAAK;gCACvDS,YAAYQ,CAAAA,OAAS,CAAA;wCAAE,GAAGA,IAAI;wCAAEN,OAAOa;oCAAS,CAAA;4BAClD;4BACA5B,eAAa,CAAC,eAAe,EAAE0B,MAAM,CAAC;4BACtCI,KAAI;4BACJvB,QAAQ;;sCAEV,qBAACN;4BACCC,MAAK;4BACLC,aAAY;4BACZC,OAAOqB,KAAKP,KAAK;4BACjBb,UAAU,CAACR;gCACT,MAAM+B,WAAW;uCAAIhB,SAASG,KAAK;iCAAC;gCACpCa,QAAQ,CAACF,MAAM,CAACR,KAAK,GAAGa,WAAWlC,EAAES,MAAM,CAACF,KAAK,KAAK;gCACtDS,YAAYQ,CAAAA,OAAS,CAAA;wCAAE,GAAGA,IAAI;wCAAEN,OAAOa;oCAAS,CAAA;4BAClD;4BACA5B,eAAa,CAAC,YAAY,EAAE0B,MAAM,CAAC;4BACnCI,KAAI;4BACJE,MAAK;4BACLzB,QAAQ;;;mBAtCFmB;0BA2CZ,qBAAClB;gBAAON,MAAK;gBAAS+B,SAASb;gBAASpB,eAAY;0BAAkB;;0BAItE,qBAACkC;gBACC/B,aAAY;gBACZC,OAAOQ,SAASO,KAAK;gBACrBd,UAAU,CAACR,IAAMgB,YAAYQ,CAAAA,OAAS,CAAA;4BAAE,GAAGA,IAAI;4BAAEF,OAAOtB,EAAES,MAAM,CAACF,KAAK;wBAAC,CAAA;gBACvEJ,eAAY;;0BAGd,qBAACQ;gBAAON,MAAK;gBAASO,UAAUpB;gBAASW,eAAY;0BAClDX,UAAU,cAAc;;;;AAIjC;AAEA,MAAM8C,gBAAgB,CAAC,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAElD,OAAO,EAMhE;IACC,IAAIA,SAAS;QACX,qBAAO,qBAACsC;YAAI3B,eAAY;sBAAgB;;IAC1C;IAEA,qBACE,sBAACwC;QAAMxC,eAAY;;0BACjB,qBAACyC;0BACC,cAAA,sBAACC;;wBACEL,QAAQb,GAAG,CAACmB,CAAAA,oBACX,qBAACC;gCAAiB5C,eAAa,CAAC,OAAO,EAAE2C,IAAIE,GAAG,CAAC,CAAC;0CAC/CF,IAAIG,KAAK;+BADHH,IAAIE,GAAG;wBAIhBP,CAAAA,UAAUC,QAAO,mBAAM,qBAACK;sCAAG;;;;;0BAGjC,qBAACG;0BACEX,KAAKZ,GAAG,CAAC,CAACC,MAAMC,sBACf,sBAACgB;wBAA0B1C,eAAa,CAAC,IAAI,EAAE0B,MAAM,CAAC;;4BACnDW,QAAQb,GAAG,CAACmB,CAAAA,oBACX,qBAACK;oCAAiBhD,eAAa,CAAC,KAAK,EAAE0B,MAAM,CAAC,EAAEiB,IAAIE,GAAG,CAAC,CAAC;8CACtDpB,IAAI,CAACkB,IAAIE,GAAG,CAAC;mCADPF,IAAIE,GAAG;4BAIhBP,CAAAA,UAAUC,QAAO,mBACjB,sBAACS;;oCACEV,wBACC,qBAAC9B;wCACCyB,SAAS,IAAMK,OAAOb;wCACtBzB,eAAa,CAAC,KAAK,EAAE0B,MAAM,CAAC;kDAC7B;;oCAIFa,0BACC,qBAAC/B;wCACCyB,SAAS,IAAMM,SAASd;wCACxBzB,eAAa,CAAC,OAAO,EAAE0B,MAAM,CAAC;kDAC/B;;;;;uBApBAD,KAAKwB,EAAE,IAAIvB;;;;AA+B9B;AAEA,MAAMwB,oBAAoB,CAAC,EAAEC,KAAK,EAAE/C,KAAK,EAAEgD,MAAM,EAAE/D,OAAO,EAKzD;IACC,IAAIA,SAAS;QACX,qBACE,qBAACsC;YAAI3B,eAAY;YAAiBqD,WAAU;sBAC1C,cAAA,qBAAC1B;gBAAI3B,eAAY;0BAAgB;;;IAGvC;IAEA,qBACE,sBAAC2B;QAAI3B,eAAY;;0BACf,qBAACsD;gBAAGtD,eAAY;0BAAcmD;;0BAC9B,qBAACxB;gBAAI3B,eAAY;0BAAcI;;YAC9BgD,wBACC,sBAACzB;gBACC3B,eAAY;gBACZqD,WAAWD,OAAOlD,IAAI;;oBAErBkD,OAAOlD,IAAI,KAAK,aAAa,MAAM;oBAAI;oBAAEkD,OAAOhD,KAAK;oBAAC;;;;;AAKjE;AAEA,MAAMmD,mBAAmB,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAItD;IACC,MAAM,CAACC,aAAaC,eAAe,GAAGpE,cAAK,CAACC,QAAQ,CAAC;IACrD,MAAM,CAACoE,cAAcC,gBAAgB,GAAGtE,cAAK,CAACC,QAAQ,CAACiE;IAEvD,MAAMK,eAAe,CAAClE;QACpBA,EAAEC,cAAc;QAChB0D,SAASG;IACX;IAEA,MAAMK,qBAAqB,CAACnB,KAAazC;QACvC,MAAM6D,aAAa;YAAE,GAAGJ,YAAY;YAAE,CAAChB,IAAI,EAAEzC;QAAM;QACnD0D,gBAAgBG;QAChBR,SAASQ;IACX;IAEA,qBACE,sBAACtC;QAAI3B,eAAY;;0BACf,sBAACD;gBAAKX,UAAU2E;gBAAc/D,eAAY;;kCACxC,qBAACC;wBACCC,MAAK;wBACLC,aAAY;wBACZC,OAAOuD;wBACPtD,UAAU,CAACR,IAAM+D,eAAe/D,EAAES,MAAM,CAACF,KAAK;wBAC9CJ,eAAY;;kCAEd,qBAACQ;wBAAON,MAAK;wBAASF,eAAY;kCAAgB;;;;0BAKpD,sBAAC2B;gBAAI3B,eAAY;;kCACf,sBAACsB;wBACClB,OAAOyD,aAAaK,MAAM,IAAI;wBAC9B7D,UAAU,CAACR,IAAMmE,mBAAmB,UAAUnE,EAAES,MAAM,CAACF,KAAK;wBAC5DJ,eAAY;;0CAEZ,qBAACuB;gCAAOnB,OAAM;0CAAG;;0CACjB,qBAACmB;gCAAOnB,OAAM;0CAAS;;0CACvB,qBAACmB;gCAAOnB,OAAM;0CAAW;;0CACzB,qBAACmB;gCAAOnB,OAAM;0CAAU;;;;kCAG1B,sBAACkB;wBACClB,OAAOyD,aAAaM,QAAQ,IAAI;wBAChC9D,UAAU,CAACR,IAAMmE,mBAAmB,YAAYnE,EAAES,MAAM,CAACF,KAAK;wBAC9DJ,eAAY;;0CAEZ,qBAACuB;gCAAOnB,OAAM;0CAAG;;0CACjB,qBAACmB;gCAAOnB,OAAM;0CAAc;;0CAC5B,qBAACmB;gCAAOnB,OAAM;0CAAW;;0CACzB,qBAACmB;gCAAOnB,OAAM;0CAAQ;;;;;;;;AAKhC;AAEAgE,SAAS,qBAAqB;IAC5BC,WAAW;QACTxG,KAAKyG,aAAa;QAElB,oBAAoB;QACpBC,OAAOC,cAAc,CAACC,QAAQ,gBAAgB;YAC5CrE,OAAO;gBACLsE,SAAS7G,KAAKY,EAAE,CAAC,IAAM;gBACvBkG,SAAS9G,KAAKY,EAAE;gBAChBmG,YAAY/G,KAAKY,EAAE;YACrB;YACAoG,UAAU;QACZ;QAEA,oBAAoB;QACpB7G,YAAY8G,eAAe,CAAC;YAC1BC,MAAM;gBACJ9B,IAAI;gBACJ+B,MAAM;gBACN1F,OAAO;gBACP2F,aAAa;oBAAC;oBAAa;oBAAiB;iBAAgB;YAC9D;YACAC,WAAW;YACXC,iBAAiB;YACjBC,OAAOvH,KAAKY,EAAE;YACd4G,QAAQxH,KAAKY,EAAE;YACf6G,eAAezH,KAAKY,EAAE,CAAC,IAAM;QAC/B;QAEA,0BAA0B;QAC1BP,kBAAkB4G,eAAe,CAAC;YAChCQ,eAAezH,KAAKY,EAAE,CAAC,IAAM;YAC7B8G,kBAAkB1H,KAAKY,EAAE,CAAC,IAAM;YAChC+G,mBAAmB3H,KAAKY,EAAE,CAAC,IAAM;QACnC;IACF;IAEA2F,SAAS,uBAAuB;QAC9BqB,KAAK,sCAAsC;YACzC,MAAMC,eAAe7H,KAAKY,EAAE;YAC5BkH,IAAAA,cAAM,gBAAC,qBAACxG;gBAAcC,UAAUsG;;YAEhCE,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAC1DH,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBC,iBAAiB;YAC3DH,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAC9DH,OAAOC,cAAM,CAACC,WAAW,CAAC,iBAAiBC,iBAAiB;QAC9D;QAEAN,KAAK,iDAAiD;YACpD,MAAMC,eAAe7H,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBAAC,qBAACxG;gBAAcC,UAAUsG;;YAEhC,MAAMX,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,gBAAgB;YACnD,MAAMf,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,mBAAmB;YACtD,MAAMf,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YAEpCF,OAAOF,cAAcS,oBAAoB,CAAC;gBACxC7G,OAAO;gBACPI,UAAU;YACZ;QACF;QAEA+F,KAAK,6BAA6B;YAChC,MAAMC,eAAe7H,KAAKY,EAAE;YAC5BkH,IAAAA,cAAM,gBAAC,qBAACxG;gBAAcC,UAAUsG;gBAAcrG,SAAS;;YAEvD,MAAMmB,SAASqF,cAAM,CAACC,WAAW,CAAC;YAClCF,OAAOpF,QAAQ4F,YAAY;YAC3BR,OAAOpF,QAAQ6F,iBAAiB,CAAC;QACnC;QAEAZ,KAAK,4CAA4C;YAC/C,MAAMC,eAAe7H,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBAAC,qBAACxG;gBAAcC,UAAUsG;;YAEhC,MAAMX,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YAEpC,iDAAiD;YACjDF,OAAOF,cAAcY,GAAG,CAACC,gBAAgB;QAC3C;IACF;IAEAnC,SAAS,yBAAyB;QAChCqB,KAAK,wCAAwC;YAC3C,MAAMC,eAAe7H,KAAKY,EAAE;YAC5BkH,IAAAA,cAAM,gBAAC,qBAACjF;gBAAgBtB,UAAUsG;;YAElCE,OAAOC,cAAM,CAACC,WAAW,CAAC,iBAAiBC,iBAAiB;YAC5DH,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;YAC/DH,OAAOC,cAAM,CAACC,WAAW,CAAC,WAAWC,iBAAiB;YACtDH,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;YAC/DH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;QAC/D;QAEAN,KAAK,kCAAkC;YACrC,MAAMC,eAAe7H,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBAAC,qBAACjF;gBAAgBtB,UAAUsG;;YAElCE,OAAOC,cAAM,CAACC,WAAW,CAAC,WAAWC,iBAAiB;YACtDH,OAAOC,cAAM,CAACW,aAAa,CAAC,WAAWF,GAAG,CAACP,iBAAiB;YAE5D,MAAMhB,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YAEpCF,OAAOC,cAAM,CAACC,WAAW,CAAC,WAAWC,iBAAiB;QACxD;QAEAN,KAAK,oDAAoD;YACvD,MAAMC,eAAe7H,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBAAC,qBAACjF;gBAAgBtB,UAAUsG;;YAElC,MAAMX,KAAK0B,aAAa,CAACZ,cAAM,CAACC,WAAW,CAAC,oBAAoB;YAChE,MAAMf,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,oBAAoB;YACvD,MAAMf,KAAK2B,KAAK,CAACb,cAAM,CAACC,WAAW,CAAC;YACpC,MAAMf,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,qBAAqB;YACxD,MAAMf,KAAK2B,KAAK,CAACb,cAAM,CAACC,WAAW,CAAC;YACpC,MAAMf,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,kBAAkB;YACrD,MAAMf,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,mBAAmB;YAEtD,MAAMf,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YAEpCF,OAAOF,cAAcS,oBAAoB,CAAC;gBACxCrF,YAAY;gBACZC,OAAO;oBAAC;wBAAEC,WAAW;wBAAUC,UAAU;wBAAGC,OAAO;oBAAI;iBAAE;gBACzDC,OAAO;YACT;QACF;QAEAsE,KAAK,0CAA0C;YAC7C,MAAM9E,cAAc;gBAClBG,YAAY;gBACZC,OAAO;oBAAC;wBAAEC,WAAW;wBAAUC,UAAU;wBAAGC,OAAO;oBAAI;iBAAE;gBACzDC,OAAO;YACT;YAEA,MAAMuE,eAAe7H,KAAKY,EAAE;YAC5BkH,IAAAA,cAAM,gBAAC,qBAACjF;gBAAgBtB,UAAUsG;gBAAc/E,aAAaA;;YAE7DiF,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBa,WAAW,CAAC;YAC1Df,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBa,WAAW,CAAC;YAC1Df,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBa,WAAW,CAAC;YAC3Df,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBa,WAAW,CAAC;YACxDf,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBa,WAAW,CAAC;QAC3D;IACF;IAEAvC,SAAS,uBAAuB;QAC9B,MAAMwC,WAAW;YACf;gBAAE3D,IAAI;gBAAK+B,MAAM;gBAAUd,QAAQ;gBAAUhD,OAAO;YAAI;YACxD;gBAAE+B,IAAI;gBAAK+B,MAAM;gBAAUd,QAAQ;gBAAYhD,OAAO;YAAI;SAC3D;QAED,MAAM2F,cAAc;YAClB;gBAAEhE,KAAK;gBAAQC,OAAO;YAAO;YAC7B;gBAAED,KAAK;gBAAUC,OAAO;YAAS;YACjC;gBAAED,KAAK;gBAASC,OAAO;YAAQ;SAChC;QAED2C,KAAK,2CAA2C;YAC9CE,IAAAA,cAAM,gBAAC,qBAACxD;gBAAcC,MAAMwE;gBAAUvE,SAASwE;;YAE/CjB,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAC1DH,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBO,iBAAiB,CAAC;YAC5DT,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBO,iBAAiB,CAAC;YAC9DT,OAAOC,cAAM,CAACC,WAAW,CAAC,iBAAiBO,iBAAiB,CAAC;YAE7DT,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBO,iBAAiB,CAAC;YAC5DT,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBO,iBAAiB,CAAC;QAC9D;QAEAZ,KAAK,yCAAyC;YAC5C,MAAMqB,aAAajJ,KAAKY,EAAE;YAC1B,MAAMsI,eAAelJ,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBACJ,qBAACxD;gBACCC,MAAMwE;gBACNvE,SAASwE;gBACTvE,QAAQwE;gBACRvE,UAAUwE;;YAId,MAAMhC,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YACpCF,OAAOkB,YAAYX,oBAAoB,CAACS,QAAQ,CAAC,EAAE;YAEnD,MAAM7B,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YACpCF,OAAOmB,cAAcZ,oBAAoB,CAACS,QAAQ,CAAC,EAAE;QACvD;QAEAnB,KAAK,6BAA6B;YAChCE,IAAAA,cAAM,gBAAC,qBAACxD;gBAAcC,MAAM,EAAE;gBAAEC,SAASwE;gBAAaxH,SAAS;;YAE/DuG,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBO,iBAAiB,CAAC;QAChE;QAEAZ,KAAK,0CAA0C;YAC7CE,IAAAA,cAAM,gBAAC,qBAACxD;gBAAcC,MAAM,EAAE;gBAAEC,SAASwE;;YAEzCjB,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAC1DH,OAAOC,cAAM,CAACW,aAAa,CAAC,UAAUF,GAAG,CAACP,iBAAiB;QAC7D;IACF;IAEA3B,SAAS,2BAA2B;QAClCqB,KAAK,sCAAsC;YACzCE,IAAAA,cAAM,gBACJ,qBAACzC;gBACCC,OAAM;gBACN/C,OAAM;;YAIVwF,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAC9DH,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeO,iBAAiB,CAAC;YAC3DT,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeO,iBAAiB,CAAC;QAC7D;QAEAZ,KAAK,4CAA4C;YAC/CE,IAAAA,cAAM,gBACJ,qBAACzC;gBACCC,OAAM;gBACN/C,OAAO;gBACPgD,QAAQ;oBAAEhD,OAAO;oBAAMF,MAAM;gBAAW;;YAI5C0F,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBC,iBAAiB;YAC3DH,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBO,iBAAiB,CAAC;YAC5DT,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBkB,WAAW,CAAC;QACxD;QAEAvB,KAAK,8CAA8C;YACjDE,IAAAA,cAAM,gBACJ,qBAACzC;gBACCC,OAAM;gBACN/C,OAAO;gBACPgD,QAAQ;oBAAEhD,OAAO;oBAAKF,MAAM;gBAAW;;YAI3C0F,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBO,iBAAiB,CAAC;YAC5DT,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBkB,WAAW,CAAC;QACxD;QAEAvB,KAAK,6BAA6B;YAChCE,IAAAA,cAAM,gBACJ,qBAACzC;gBACCC,OAAM;gBACN/C,OAAM;gBACNf,SAAS;;YAIbuG,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBkB,WAAW,CAAC;YACzDpB,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;QAC/D;IACF;IAEA3B,SAAS,0BAA0B;QACjCqB,KAAK,4CAA4C;YAC/C,MAAMwB,eAAepJ,KAAKY,EAAE;YAC5B,MAAMyI,eAAerJ,KAAKY,EAAE;YAE5BkH,IAAAA,cAAM,gBACJ,qBAACpC;gBACCC,UAAUyD;gBACVxD,UAAUyD;gBACVxD,SAAS,CAAC;;YAIdkC,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACC,WAAW,CAAC,iBAAiBC,iBAAiB;YAC5DH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;QACjE;QAEAN,KAAK,mCAAmC;YACtC,MAAMwB,eAAepJ,KAAKY,EAAE;YAC5B,MAAMyI,eAAerJ,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBACJ,qBAACpC;gBACCC,UAAUyD;gBACVxD,UAAUyD;gBACVxD,SAAS,CAAC;;YAId,MAAMqB,KAAK7E,IAAI,CAAC2F,cAAM,CAACC,WAAW,CAAC,iBAAiB;YACpD,MAAMf,KAAKmB,KAAK,CAACL,cAAM,CAACC,WAAW,CAAC;YAEpCF,OAAOqB,cAAcd,oBAAoB,CAAC;QAC5C;QAEAV,KAAK,gCAAgC;YACnC,MAAMwB,eAAepJ,KAAKY,EAAE;YAC5B,MAAMyI,eAAerJ,KAAKY,EAAE;YAC5B,MAAMsG,OAAOiB,kBAAS,CAACC,KAAK;YAE5BN,IAAAA,cAAM,gBACJ,qBAACpC;gBACCC,UAAUyD;gBACVxD,UAAUyD;gBACVxD,SAAS,CAAC;;YAId,MAAMqB,KAAK0B,aAAa,CAACZ,cAAM,CAACC,WAAW,CAAC,kBAAkB;YAC9DF,OAAOsB,cAAcf,oBAAoB,CAAC;gBAAEjC,QAAQ;YAAS;YAE7D,MAAMa,KAAK0B,aAAa,CAACZ,cAAM,CAACC,WAAW,CAAC,oBAAoB;YAChEF,OAAOsB,cAAcf,oBAAoB,CAAC;gBAAEjC,QAAQ;gBAAUC,UAAU;YAAc;QACxF;QAEAsB,KAAK,2CAA2C;YAC9C,MAAMwB,eAAepJ,KAAKY,EAAE;YAC5B,MAAMyI,eAAerJ,KAAKY,EAAE;YAC5B,MAAM0I,iBAAiB;gBAAEjD,QAAQ;gBAAWC,UAAU;YAAQ;YAE9DwB,IAAAA,cAAM,gBACJ,qBAACpC;gBACCC,UAAUyD;gBACVxD,UAAUyD;gBACVxD,SAASyD;;YAIbvB,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBa,WAAW,CAAC;YACxDf,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBa,WAAW,CAAC;QAC5D;IACF;IAEAvC,SAAS,wCAAwC;QAC/CqB,KAAK,sDAAsD;YACzDvH,kBAAkB4G,eAAe,CAAC;gBAChCQ,eAAezH,KAAKY,EAAE,CAAC,IAAM;gBAC7B8G,kBAAkB1H,KAAKY,EAAE,CAAC,IAAM;gBAChC+G,mBAAmB3H,KAAKY,EAAE,CAAC,IAAM;YACnC;YAEA,MAAM2I,qBAAqB;gBACzB,MAAM,EAAE9B,aAAa,EAAE,GAAGpH;gBAE1B,IAAI,CAACoH,cAAc,iBAAiB;oBAClC,qBAAO,qBAAC3D;wBAAI3B,eAAY;kCAAgB;;gBAC1C;gBAEA,qBAAO,qBAAC2B;oBAAI3B,eAAY;8BAAoB;;YAC9C;YAEA2F,IAAAA,cAAM,gBAAC,qBAACyB;YAERxB,OAAOC,cAAM,CAACC,WAAW,CAAC,sBAAsBC,iBAAiB;YACjEH,OAAOC,cAAM,CAACW,aAAa,CAAC,kBAAkBF,GAAG,CAACP,iBAAiB;QACrE;QAEAN,KAAK,sDAAsD;YACzDvH,kBAAkB4G,eAAe,CAAC;gBAChCQ,eAAezH,KAAKY,EAAE,CAAC,IAAM;gBAC7B8G,kBAAkB1H,KAAKY,EAAE,CAAC,IAAM;gBAChC+G,mBAAmB3H,KAAKY,EAAE,CAAC,IAAM;YACnC;YAEA,MAAM2I,qBAAqB;gBACzB,MAAM,EAAE9B,aAAa,EAAE,GAAGpH;gBAE1B,IAAI,CAACoH,cAAc,iBAAiB;oBAClC,qBAAO,qBAAC3D;wBAAI3B,eAAY;kCAAgB;;gBAC1C;gBAEA,qBAAO,qBAAC2B;oBAAI3B,eAAY;8BAAoB;;YAC9C;YAEA2F,IAAAA,cAAM,gBAAC,qBAACyB;YAERxB,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACW,aAAa,CAAC,sBAAsBF,GAAG,CAACP,iBAAiB;QACzE;IACF;IAEA3B,SAAS,qCAAqC;QAC5CqB,KAAK,6CAA6C;YAChD,MAAM4B,iBAAiB;gBACrB,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMC,gBAAgB,CAAC,EAAEC,QAAQ,EAAiC;gBAChE,MAAM,CAACC,UAAUC,YAAY,GAAGlI,cAAK,CAACC,QAAQ,CAAC;gBAE/CD,cAAK,CAACmI,SAAS,CAAC;oBACd,MAAMC,eAAe,IAAMF,YAAY;oBACvCjD,OAAOoD,gBAAgB,CAAC,SAASD;oBACjC,OAAO,IAAMnD,OAAOqD,mBAAmB,CAAC,SAASF;gBACnD,GAAG,EAAE;gBAEL,IAAIH,UAAU;oBACZ,qBAAO,qBAAC9F;wBAAI3B,eAAY;kCAAiB;;gBAC3C;gBAEA,qBAAO;8BAAGwH;;YACZ;YAEA,uCAAuC;YACvC,MAAMO,aAAalK,KAAKmK,KAAK,CAACC,SAAS,SAASC,kBAAkB,CAAC,KAAO;YAE1E,IAAI;gBACFvC,IAAAA,cAAM,gBACJ,qBAAC4B;8BACC,cAAA,qBAACF;;YAGP,EAAE,OAAOc,OAAO;YACd,iBAAiB;YACnB;YAEAJ,WAAWK,WAAW;QACxB;IACF;AACF"}