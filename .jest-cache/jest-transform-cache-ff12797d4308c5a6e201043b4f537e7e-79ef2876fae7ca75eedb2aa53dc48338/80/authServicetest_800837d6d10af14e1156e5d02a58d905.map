{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/authService.test.ts"],"sourcesContent":["import { authenticateUser, generateToken, verifyToken, parseTimeStringToSeconds, getUserFromDecodedPayload, getUserFromToken } from '@/services/authService';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport prisma from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\n\n// Mock dependencies\njest.mock('@/lib/prisma', () => ({\n  user: {\n    findFirst: jest.fn(),\n  },\n  permission: {\n    findMany: jest.fn(),\n  },\n}));\n\njest.mock('bcryptjs');\njest.mock('jsonwebtoken');\njest.mock('@/lib/cache', () => ({\n  cacheService: {\n    generateKey: jest.fn(),\n    get: jest.fn(),\n    set: jest.fn(),\n  },\n  CACHE_CONFIG: {\n    KEYS: {\n      USER_SESSION: 'user_session',\n      TOKEN_VALIDATION: 'token_validation',\n    },\n    TTL: {\n      USER_SESSION: 3600,\n      TOKEN_VALIDATION: 1800,\n    },\n  },\n}));\n\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\nconst mockCacheService = cacheService as jest.Mocked<typeof cacheService>;\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    process.env.JWT_SECRET = 'test-secret';\n    process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = '1h';\n    \n    // Setup default cache mocks\n    mockCacheService.generateKey.mockReturnValue('mock-cache-key');\n    mockCacheService.get.mockResolvedValue(null);\n    mockCacheService.set.mockResolvedValue(undefined);\n  });\n\n  describe('parseTimeStringToSeconds', () => {\n    test('should parse seconds correctly', () => {\n      expect(parseTimeStringToSeconds('30s')).toBe(30);\n    });\n\n    test('should parse minutes correctly', () => {\n      expect(parseTimeStringToSeconds('5m')).toBe(300);\n    });\n\n    test('should parse hours correctly', () => {\n      expect(parseTimeStringToSeconds('2h')).toBe(7200);\n    });\n\n    test('should parse days correctly', () => {\n      expect(parseTimeStringToSeconds('1d')).toBe(86400);\n    });\n\n    test('should return 0 for invalid input', () => {\n      expect(parseTimeStringToSeconds('')).toBe(0);\n      expect(parseTimeStringToSeconds('invalid')).toBe(0);\n      expect(parseTimeStringToSeconds('abc')).toBe(0);\n    });\n\n    test('should handle edge cases', () => {\n      expect(parseTimeStringToSeconds('0s')).toBe(0);\n      expect(parseTimeStringToSeconds('100x')).toBe(0);\n    });\n  });\n\n  describe('authenticateUser', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      password: 'hashedpassword',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      roleName: 'admin',\n      permissions: null,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should authenticate valid user credentials', async () => {\n      mockPrisma.user.findFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(true);\n      mockJwt.sign.mockReturnValue('mock-jwt-token');\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(true);\n      expect(result.token).toBe('mock-jwt-token');\n      expect(result.user).toEqual({\n        id: 1,\n        email: 'test@example.com',\n        username: 'testuser',\n        fullName: 'testuser',\n        roleId: 1,\n        roleName: 'admin',\n        shopId: 1,\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockPrisma.user.findFirst).toHaveBeenCalledWith({\n        where: {\n          email: 'test@example.com',\n          isActive: true\n        },\n        include: {\n          role: {\n            include: {\n              permissions: {\n                select: { name: true }\n              }\n            }\n          }\n        }\n      });\n    });\n\n    test('should reject invalid email', async () => {\n      mockPrisma.user.findFirst.mockResolvedValue(null);\n\n      const result = await authenticateUser('invalid@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject invalid password', async () => {\n      mockPrisma.user.findFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(false);\n\n      const result = await authenticateUser('test@example.com', 'wrongpassword');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject inactive user', async () => {\n      mockPrisma.user.findFirst.mockResolvedValue(null); // findFirst with isActive: true returns null\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should handle database errors gracefully', async () => {\n      mockPrisma.user.findFirst.mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n\n    test('should handle bcrypt errors gracefully', async () => {\n      mockPrisma.user.findFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockRejectedValue(new Error('Bcrypt error'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n  });\n\n  describe('generateToken', () => {\n    const mockPayload = {\n      sub: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      roleId: 1,\n      shopId: 1,\n      permissions: ['read_products', 'write_products']\n    };\n\n    test('should generate JWT token', () => {\n      const mockToken = 'mock-jwt-token';\n      mockJwt.sign.mockReturnValue(mockToken);\n\n      const result = generateToken(mockPayload);\n\n      expect(result).toBe(mockToken);\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n        mockPayload,\n        'test-secret-key',\n        { expiresIn: '12h' }\n      );\n    });\n  });\n\n  describe('verifyToken', () => {\n    test('should verify valid token from cache', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(mockPayload);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should verify valid token and cache result', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockJwt.verify.mockReturnValue(mockPayload);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret-key');\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      await expect(verifyToken('invalid-token')).rejects.toThrow('Invalid token');\n    });\n\n    test('should throw error for expired token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        const error = new Error('Token expired') as any;\n        error.name = 'TokenExpiredError';\n        error.expiredAt = new Date();\n        throw error;\n      });\n\n      await expect(verifyToken('expired-token')).rejects.toThrow('Token expired');\n    });\n  });\n\n  describe('getUserFromDecodedPayload', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should return user from cache', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const cachedUser = {\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      };\n      \n      mockCacheService.get.mockResolvedValue(cachedUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual(cachedUser);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should return user from database and cache it', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockPrisma.user.findFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should return null for null payload', async () => {\n      const result = await getUserFromDecodedPayload(null);\n      expect(result).toBeNull();\n    });\n\n    test('should return null for invalid payload', async () => {\n      const result = await getUserFromDecodedPayload({} as any);\n      expect(result).toBeNull();\n    });\n\n    test('should return null when user not found', async () => {\n      const payload = {\n        sub: 999,\n        username: 'nonexistent',\n        email: 'nonexistent@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockPrisma.user.findFirst.mockResolvedValue(null);\n\n      const result = await getUserFromDecodedPayload(payload);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getUserFromToken', () => {\n    test('should return user from valid token', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'testuser',\n        isActive: true,\n        roleId: 1,\n        shopId: 1,\n        role: {\n          id: 1,\n          name: 'admin',\n          permissions: [{ name: 'read_products' }]\n        }\n      };\n\n      // Mock verifyToken to return payload\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockReturnValue(mockPayload);\n      \n      // Mock getUserFromDecodedPayload\n      mockPrisma.user.findFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromToken('valid-token');\n      \n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products']\n      });\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      await expect(getUserFromToken('invalid-token')).rejects.toThrow('Invalid token');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle missing JWT_SECRET', async () => {\n      const originalSecret = process.env.JWT_SECRET;\n      delete process.env.JWT_SECRET;\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('secretOrPrivateKey must have a value');\n      });\n      \n      await expect(verifyToken('any-token')).rejects.toThrow();\n      \n      // Restore the secret\n      process.env.JWT_SECRET = originalSecret;\n    });\n\n    test('should handle malformed tokens gracefully', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt malformed');\n      });\n      \n      await expect(verifyToken('not.a.valid.jwt.token')).rejects.toThrow('jwt malformed');\n    });\n\n    test('should handle empty token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt must be provided');\n      });\n      \n      await expect(verifyToken('')).rejects.toThrow('jwt must be provided');\n    });\n  });\n});"],"names":["jest","mock","user","findFirst","fn","permission","findMany","cacheService","generateKey","get","set","CACHE_CONFIG","KEYS","USER_SESSION","TOKEN_VALIDATION","TTL","mockPrisma","prisma","mockBcrypt","bcrypt","mockJwt","jwt","mockCacheService","describe","beforeEach","clearAllMocks","process","env","JWT_SECRET","JWT_ACCESS_TOKEN_EXPIRES_IN","mockReturnValue","mockResolvedValue","undefined","test","expect","parseTimeStringToSeconds","toBe","mockUser","id","email","name","password","isActive","roleId","shopId","roleName","permissions","role","compare","sign","result","authenticateUser","success","token","toEqual","username","fullName","toHaveBeenCalledWith","where","include","select","message","mockRejectedValue","Error","mockPayload","sub","mockToken","generateToken","expiresIn","iat","Math","floor","Date","now","exp","verifyToken","toHaveBeenCalled","verify","mockImplementation","rejects","toThrow","error","expiredAt","payload","cachedUser","getUserFromDecodedPayload","toBeNull","getUserFromToken","originalSecret"],"mappings":"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"}