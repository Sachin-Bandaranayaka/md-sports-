{"version":3,"names":["default","cov_27lr75ggfo","f","s","_default","executeQuery","prisma","safeQuery","globalForPrisma","global","prismaInstanceCount","b","prismaOptions","datasources","db","url","process","env","DATABASE_URL","errorFormat","transactionOptions","maxWait","timeout","console","log","substring","isEdgeRuntime","NEXT_RUNTIME","globalThis","createPrismaClient","client","_client","PrismaClient","$use","params","next","error","isPreparedStatementError","code","message","includes","$executeRaw","deallocateError","Promise","resolve","setTimeout","NODE_ENV","queryFn","fallback","logMessage","maxRetries","_lastError","attempt","meta","delay","on","$disconnect"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\n// Use a single instance of Prisma Client across the entire app\nconst globalForPrisma = global as unknown as { \n    prisma: PrismaClient;\n    prismaInstanceCount: number;\n};\n\n// Track instance creation for debugging\nif (!globalForPrisma.prismaInstanceCount) {\n    globalForPrisma.prismaInstanceCount = 0;\n}\n\n// Optimized connection options for millisecond performance\nconst prismaOptions = {\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL ? \n                `${process.env.DATABASE_URL}?connection_limit=5&pool_timeout=20&connect_timeout=10&prepared_statement_cache_size=0&statement_timeout=10000&idle_in_transaction_session_timeout=10000&pgbouncer=true&application_name=mssports_prisma` :\n                'postgresql://localhost:5432/mssport',\n        },\n    },\n    errorFormat: 'minimal' as const,\n    \n    // Additional performance options\n    transactionOptions: {\n        maxWait: 5000,      // 5 seconds max wait for transaction\n        timeout: 10000,     // 10 seconds timeout for transaction\n    },\n};\n\nconsole.log('Initializing Prisma client with DATABASE_URL:',\n    process.env.DATABASE_URL ?\n        `${process.env.DATABASE_URL.substring(0, 20)}...` :\n        'Not set (using default)'\n);\n\n// Function to detect if we're running in Edge Runtime\nfunction isEdgeRuntime(): boolean {\n    return (\n        typeof process === 'undefined' ||\n        process.env.NEXT_RUNTIME === 'edge' ||\n        (typeof globalThis !== 'undefined' && 'EdgeRuntime' in globalThis)\n    );\n}\n\n// Function to create a new Prisma client with prepared statement handling\nfunction createPrismaClient(): PrismaClient {\n    globalForPrisma.prismaInstanceCount++;\n    console.log(`Creating Prisma client instance #${globalForPrisma.prismaInstanceCount}`);\n    \n    const client = new PrismaClient(prismaOptions);\n    \n    // Only add middleware in Node.js runtime, not in Edge Runtime\n    if (!isEdgeRuntime()) {\n        console.log('Adding Prisma middleware for prepared statement handling (Node.js runtime)');\n        \n        // Add middleware to handle prepared statement conflicts\n        client.$use(async (params, next) => {\n            try {\n                return await next(params);\n            } catch (error: any) {\n                // Check for prepared statement errors\n                const isPreparedStatementError = \n                    error?.code === '42P05' ||  // prepared statement already exists\n                    error?.code === '26000' ||  // prepared statement does not exist\n                    error?.message?.includes('prepared statement') ||\n                    error?.message?.includes('already exists') ||\n                    error?.message?.includes('does not exist');\n                \n                if (isPreparedStatementError) {\n                    console.log('Prepared statement conflict detected in middleware, retrying...');\n                    \n                    try {\n                        // Try to clear prepared statements\n                        await client.$executeRaw`DEALLOCATE ALL`;\n                    } catch (deallocateError) {\n                        // Ignore deallocate errors as they're expected in some cases\n                    }\n                    \n                    // Wait a bit and retry\n                    await new Promise(resolve => setTimeout(resolve, 100));\n                    return await next(params);\n                }\n                \n                throw error;\n            }\n        });\n    } else {\n        console.log('Skipping Prisma middleware in Edge Runtime');\n    }\n    \n    return client;\n}\n\n// Create the Prisma client instance or reuse the existing one\nexport const prisma = globalForPrisma.prisma || createPrismaClient();\n\n// For development, save the instance to avoid too many client instances\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n// Helper function to safely execute database operations with fallback\nexport async function safeQuery<T>(queryFn: () => Promise<T>, fallback: T, logMessage: string = 'Query error', maxRetries: number = 3): Promise<T> {\n    let _lastError: any;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await queryFn();\n        } catch (error: any) {\n            _lastError = error;\n            console.error(`${logMessage} (attempt ${attempt}/${maxRetries}):`, error);\n            \n            // Check for prepared statement errors\n            const isPreparedStatementError = \n                error?.code === '42P05' ||  // prepared statement already exists\n                error?.code === '26000' ||  // prepared statement does not exist\n                error?.message?.includes('prepared statement') ||\n                error?.message?.includes('already exists') ||\n                error?.message?.includes('does not exist') ||\n                error?.meta?.code === '42P05' ||\n                error?.meta?.code === '26000';\n            \n            if (isPreparedStatementError && attempt < maxRetries) {\n                console.log(`Detected prepared statement error on attempt ${attempt}, handling with middleware retry...`);\n                \n                // The middleware should handle this, but add additional delay for safety\n                const delay = 150 * attempt;\n                await new Promise(resolve => setTimeout(resolve, delay));\n            } else if (attempt < maxRetries) {\n                // For other errors, still retry with a shorter delay\n                await new Promise(resolve => setTimeout(resolve, 50 * attempt));\n            }\n        }\n    }\n    \n    console.error(`${logMessage}: All ${maxRetries} attempts failed. Returning fallback.`);\n    return fallback;\n}\n\n// Enhanced query function that automatically handles prepared statement conflicts\nexport async function executeQuery<T>(queryFn: () => Promise<T>): Promise<T> {\n    try {\n        return await queryFn();\n    } catch (error: any) {\n        // Check for prepared statement errors\n        const isPreparedStatementError = \n            error?.code === '42P05' ||  // prepared statement already exists\n            error?.code === '26000' ||  // prepared statement does not exist\n            error?.message?.includes('prepared statement') ||\n            error?.message?.includes('already exists') ||\n            error?.message?.includes('does not exist');\n        \n        if (isPreparedStatementError) {\n            console.log('Prepared statement conflict detected, attempting recovery...');\n            \n            try {\n                // Try to clear prepared statements\n                await prisma.$executeRaw`DEALLOCATE ALL`;\n                console.log('Successfully cleared prepared statements');\n            } catch (deallocateError) {\n                console.log('Could not deallocate statements (this is normal in some cases)');\n            }\n            \n            // Wait a moment and retry\n            await new Promise(resolve => setTimeout(resolve, 200));\n            return await queryFn();\n        }\n        \n        throw error;\n    }\n}\n\n// Graceful shutdown handler (only in Node.js environment)\nif (typeof process !== 'undefined' && process.on) {\n    process.on('beforeExit', async () => {\n        await prisma.$disconnect();\n    });\n}\n\nexport default prisma;"],"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","ignoreList":[]}