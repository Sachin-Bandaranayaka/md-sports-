26c102426c35e29c9da856e2960c2b3d
"use strict";

/* istanbul ignore next */
function cov_27lr75ggfo() {
  var path = "/Users/sachin/Documents/md-sports-/src/lib/prisma.ts";
  var hash = "82d95f3f87d548966d38401b1d45ca3407269eb5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/lib/prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 25
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "9": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 30
        }
      },
      "10": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "12": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 45,
          column: 1
        }
      },
      "13": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 46,
          column: 167
        }
      },
      "14": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 149
        }
      },
      "15": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "16": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 91
        }
      },
      "17": {
        start: {
          line: 55,
          column: 19
        },
        end: {
          line: 55,
          column: 58
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 98
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "22": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "23": {
        start: {
          line: 65,
          column: 49
        },
        end: {
          line: 67,
          column: 154
        }
      },
      "24": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "25": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 99
        }
      },
      "26": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "27": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "28": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 75
        }
      },
      "29": {
        start: {
          line: 77,
          column: 49
        },
        end: {
          line: 77,
          column: 73
        }
      },
      "30": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "31": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 66
        }
      },
      "33": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 18
        }
      },
      "34": {
        start: {
          line: 88,
          column: 15
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "35": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 90,
          column: 75
        }
      },
      "36": {
        start: {
          line: 90,
          column: 43
        },
        end: {
          line: 90,
          column: 75
        }
      },
      "37": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "38": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "39": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "40": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 35
        }
      },
      "41": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 31
        }
      },
      "42": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 86
        }
      },
      "43": {
        start: {
          line: 100,
          column: 45
        },
        end: {
          line: 102,
          column: 216
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "45": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 122
        }
      },
      "46": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "47": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 73
        }
      },
      "48": {
        start: {
          line: 107,
          column: 45
        },
        end: {
          line: 107,
          column: 71
        }
      },
      "49": {
        start: {
          line: 108,
          column: 19
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "50": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 80
        }
      },
      "51": {
        start: {
          line: 110,
          column: 45
        },
        end: {
          line: 110,
          column: 78
        }
      },
      "52": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 91
        }
      },
      "53": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 20
        }
      },
      "54": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "55": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 31
        }
      },
      "56": {
        start: {
          line: 122,
          column: 41
        },
        end: {
          line: 124,
          column: 146
        }
      },
      "57": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "58": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 88
        }
      },
      "59": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "60": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 57
        }
      },
      "61": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 72
        }
      },
      "62": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 94
        }
      },
      "63": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 67
        }
      },
      "64": {
        start: {
          line: 135,
          column: 41
        },
        end: {
          line: 135,
          column: 65
        }
      },
      "65": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "66": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 20
        }
      },
      "67": {
        start: {
          line: 142,
          column: 0
        },
        end: {
          line: 146,
          column: 1
        }
      },
      "68": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 7
        }
      },
      "69": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 35
        }
      },
      "70": {
        start: {
          line: 147,
          column: 17
        },
        end: {
          line: 147,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 13
          },
          end: {
            line: 12,
            column: 14
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 13
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 16
          }
        },
        loc: {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "isEdgeRuntime",
        decl: {
          start: {
            line: 48,
            column: 9
          },
          end: {
            line: 48,
            column: 22
          }
        },
        loc: {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 48
      },
      "6": {
        name: "createPrismaClient",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 27
          }
        },
        loc: {
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 21
          }
        },
        loc: {
          start: {
            line: 60,
            column: 42
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 77,
            column: 39
          }
        },
        loc: {
          start: {
            line: 77,
            column: 49
          },
          end: {
            line: 77,
            column: 73
          }
        },
        line: 77
      },
      "9": {
        name: "safeQuery",
        decl: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 24
          }
        },
        loc: {
          start: {
            line: 91,
            column: 88
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 91
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 107,
            column: 34
          },
          end: {
            line: 107,
            column: 35
          }
        },
        loc: {
          start: {
            line: 107,
            column: 45
          },
          end: {
            line: 107,
            column: 71
          }
        },
        line: 107
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 110,
            column: 34
          },
          end: {
            line: 110,
            column: 35
          }
        },
        loc: {
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 110,
            column: 78
          }
        },
        line: 110
      },
      "12": {
        name: "executeQuery",
        decl: {
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 117,
            column: 27
          }
        },
        loc: {
          start: {
            line: 117,
            column: 37
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 117
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 135,
            column: 30
          },
          end: {
            line: 135,
            column: 31
          }
        },
        loc: {
          start: {
            line: 135,
            column: 41
          },
          end: {
            line: 135,
            column: 65
          }
        },
        line: 135
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 143,
            column: 29
          },
          end: {
            line: 143,
            column: 30
          }
        },
        loc: {
          start: {
            line: 143,
            column: 39
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 143
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 0
          },
          end: {
            line: 31,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 0
          },
          end: {
            line: 31,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 36,
            column: 313
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 273
          }
        }, {
          start: {
            line: 36,
            column: 276
          },
          end: {
            line: 36,
            column: 313
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 61
          },
          end: {
            line: 46,
            column: 165
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 88
          },
          end: {
            line: 46,
            column: 137
          }
        }, {
          start: {
            line: 46,
            column: 140
          },
          end: {
            line: 46,
            column: 165
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 11
          },
          end: {
            line: 49,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 11
          },
          end: {
            line: 49,
            column: 41
          }
        }, {
          start: {
            line: 49,
            column: 45
          },
          end: {
            line: 49,
            column: 80
          }
        }, {
          start: {
            line: 49,
            column: 84
          },
          end: {
            line: 49,
            column: 117
          }
        }, {
          start: {
            line: 49,
            column: 121
          },
          end: {
            line: 49,
            column: 148
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: 83,
            column: 11
          },
          end: {
            line: 85,
            column: 5
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 67,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 65,
            column: 72
          }
        }, {
          start: {
            line: 66,
            column: 16
          },
          end: {
            line: 66,
            column: 39
          }
        }, {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 62
          }
        }, {
          start: {
            line: 67,
            column: 66
          },
          end: {
            line: 67,
            column: 108
          }
        }, {
          start: {
            line: 67,
            column: 112
          },
          end: {
            line: 67,
            column: 154
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 37
          }
        }, {
          start: {
            line: 88,
            column: 41
          },
          end: {
            line: 88,
            column: 61
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 0
          },
          end: {
            line: 90,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 0
          },
          end: {
            line: 90,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 44
          },
          end: {
            line: 91,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 57
          },
          end: {
            line: 91,
            column: 70
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 91,
            column: 72
          },
          end: {
            line: 91,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 85
          },
          end: {
            line: 91,
            column: 86
          }
        }],
        line: 91
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 45
          },
          end: {
            line: 102,
            column: 216
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 45
          },
          end: {
            line: 100,
            column: 68
          }
        }, {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 101,
            column: 35
          }
        }, {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 58
          }
        }, {
          start: {
            line: 102,
            column: 62
          },
          end: {
            line: 102,
            column: 104
          }
        }, {
          start: {
            line: 102,
            column: 108
          },
          end: {
            line: 102,
            column: 150
          }
        }, {
          start: {
            line: 102,
            column: 154
          },
          end: {
            line: 102,
            column: 183
          }
        }, {
          start: {
            line: 102,
            column: 187
          },
          end: {
            line: 102,
            column: 216
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 111,
            column: 13
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 40
          }
        }, {
          start: {
            line: 103,
            column: 44
          },
          end: {
            line: 103,
            column: 64
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 41
          },
          end: {
            line: 124,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 41
          },
          end: {
            line: 122,
            column: 64
          }
        }, {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 123,
            column: 31
          }
        }, {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 124,
            column: 54
          }
        }, {
          start: {
            line: 124,
            column: 58
          },
          end: {
            line: 124,
            column: 100
          }
        }, {
          start: {
            line: 124,
            column: 104
          },
          end: {
            line: 124,
            column: 146
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "17": {
        loc: {
          start: {
            line: 142,
            column: 0
          },
          end: {
            line: 146,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 0
          },
          end: {
            line: 146,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "18": {
        loc: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 34
          }
        }, {
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 142,
            column: 48
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0, 0, 0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/lib/prisma.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client';\n\n// Use a single instance of Prisma Client across the entire app\nconst globalForPrisma = global as unknown as { \n    prisma: PrismaClient;\n    prismaInstanceCount: number;\n};\n\n// Track instance creation for debugging\nif (!globalForPrisma.prismaInstanceCount) {\n    globalForPrisma.prismaInstanceCount = 0;\n}\n\n// Optimized connection options for millisecond performance\nconst prismaOptions = {\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL ? \n                `${process.env.DATABASE_URL}?connection_limit=5&pool_timeout=20&connect_timeout=10&prepared_statement_cache_size=0&statement_timeout=10000&idle_in_transaction_session_timeout=10000&pgbouncer=true&application_name=mssports_prisma` :\n                'postgresql://localhost:5432/mssport',\n        },\n    },\n    errorFormat: 'minimal' as const,\n    \n    // Additional performance options\n    transactionOptions: {\n        maxWait: 5000,      // 5 seconds max wait for transaction\n        timeout: 10000,     // 10 seconds timeout for transaction\n    },\n};\n\nconsole.log('Initializing Prisma client with DATABASE_URL:',\n    process.env.DATABASE_URL ?\n        `${process.env.DATABASE_URL.substring(0, 20)}...` :\n        'Not set (using default)'\n);\n\n// Function to detect if we're running in Edge Runtime\nfunction isEdgeRuntime(): boolean {\n    return (\n        typeof process === 'undefined' ||\n        process.env.NEXT_RUNTIME === 'edge' ||\n        (typeof globalThis !== 'undefined' && 'EdgeRuntime' in globalThis)\n    );\n}\n\n// Function to create a new Prisma client with prepared statement handling\nfunction createPrismaClient(): PrismaClient {\n    globalForPrisma.prismaInstanceCount++;\n    console.log(`Creating Prisma client instance #${globalForPrisma.prismaInstanceCount}`);\n    \n    const client = new PrismaClient(prismaOptions);\n    \n    // Only add middleware in Node.js runtime, not in Edge Runtime\n    if (!isEdgeRuntime()) {\n        console.log('Adding Prisma middleware for prepared statement handling (Node.js runtime)');\n        \n        // Add middleware to handle prepared statement conflicts\n        client.$use(async (params, next) => {\n            try {\n                return await next(params);\n            } catch (error: any) {\n                // Check for prepared statement errors\n                const isPreparedStatementError = \n                    error?.code === '42P05' ||  // prepared statement already exists\n                    error?.code === '26000' ||  // prepared statement does not exist\n                    error?.message?.includes('prepared statement') ||\n                    error?.message?.includes('already exists') ||\n                    error?.message?.includes('does not exist');\n                \n                if (isPreparedStatementError) {\n                    console.log('Prepared statement conflict detected in middleware, retrying...');\n                    \n                    try {\n                        // Try to clear prepared statements\n                        await client.$executeRaw`DEALLOCATE ALL`;\n                    } catch (deallocateError) {\n                        // Ignore deallocate errors as they're expected in some cases\n                    }\n                    \n                    // Wait a bit and retry\n                    await new Promise(resolve => setTimeout(resolve, 100));\n                    return await next(params);\n                }\n                \n                throw error;\n            }\n        });\n    } else {\n        console.log('Skipping Prisma middleware in Edge Runtime');\n    }\n    \n    return client;\n}\n\n// Create the Prisma client instance or reuse the existing one\nexport const prisma = globalForPrisma.prisma || createPrismaClient();\n\n// For development, save the instance to avoid too many client instances\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n// Helper function to safely execute database operations with fallback\nexport async function safeQuery<T>(queryFn: () => Promise<T>, fallback: T, logMessage: string = 'Query error', maxRetries: number = 3): Promise<T> {\n    let _lastError: any;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await queryFn();\n        } catch (error: any) {\n            _lastError = error;\n            console.error(`${logMessage} (attempt ${attempt}/${maxRetries}):`, error);\n            \n            // Check for prepared statement errors\n            const isPreparedStatementError = \n                error?.code === '42P05' ||  // prepared statement already exists\n                error?.code === '26000' ||  // prepared statement does not exist\n                error?.message?.includes('prepared statement') ||\n                error?.message?.includes('already exists') ||\n                error?.message?.includes('does not exist') ||\n                error?.meta?.code === '42P05' ||\n                error?.meta?.code === '26000';\n            \n            if (isPreparedStatementError && attempt < maxRetries) {\n                console.log(`Detected prepared statement error on attempt ${attempt}, handling with middleware retry...`);\n                \n                // The middleware should handle this, but add additional delay for safety\n                const delay = 150 * attempt;\n                await new Promise(resolve => setTimeout(resolve, delay));\n            } else if (attempt < maxRetries) {\n                // For other errors, still retry with a shorter delay\n                await new Promise(resolve => setTimeout(resolve, 50 * attempt));\n            }\n        }\n    }\n    \n    console.error(`${logMessage}: All ${maxRetries} attempts failed. Returning fallback.`);\n    return fallback;\n}\n\n// Enhanced query function that automatically handles prepared statement conflicts\nexport async function executeQuery<T>(queryFn: () => Promise<T>): Promise<T> {\n    try {\n        return await queryFn();\n    } catch (error: any) {\n        // Check for prepared statement errors\n        const isPreparedStatementError = \n            error?.code === '42P05' ||  // prepared statement already exists\n            error?.code === '26000' ||  // prepared statement does not exist\n            error?.message?.includes('prepared statement') ||\n            error?.message?.includes('already exists') ||\n            error?.message?.includes('does not exist');\n        \n        if (isPreparedStatementError) {\n            console.log('Prepared statement conflict detected, attempting recovery...');\n            \n            try {\n                // Try to clear prepared statements\n                await prisma.$executeRaw`DEALLOCATE ALL`;\n                console.log('Successfully cleared prepared statements');\n            } catch (deallocateError) {\n                console.log('Could not deallocate statements (this is normal in some cases)');\n            }\n            \n            // Wait a moment and retry\n            await new Promise(resolve => setTimeout(resolve, 200));\n            return await queryFn();\n        }\n        \n        throw error;\n    }\n}\n\n// Graceful shutdown handler (only in Node.js environment)\nif (typeof process !== 'undefined' && process.on) {\n    process.on('beforeExit', async () => {\n        await prisma.$disconnect();\n    });\n}\n\nexport default prisma;"],
      names: ["executeQuery", "prisma", "safeQuery", "globalForPrisma", "global", "prismaInstanceCount", "prismaOptions", "datasources", "db", "url", "process", "env", "DATABASE_URL", "errorFormat", "transactionOptions", "maxWait", "timeout", "console", "log", "substring", "isEdgeRuntime", "NEXT_RUNTIME", "globalThis", "createPrismaClient", "client", "PrismaClient", "$use", "params", "next", "error", "isPreparedStatementError", "code", "message", "includes", "$executeRaw", "deallocateError", "Promise", "resolve", "setTimeout", "NODE_ENV", "queryFn", "fallback", "logMessage", "maxRetries", "_lastError", "attempt", "meta", "delay", "on", "$disconnect"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "82d95f3f87d548966d38401b1d45ca3407269eb5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27lr75ggfo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27lr75ggfo();
cov_27lr75ggfo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[0]++;
  cov_27lr75ggfo().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_27lr75ggfo().s[3]++;
_export(exports, {
  default: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[1]++;
    cov_27lr75ggfo().s[4]++;
    return _default;
  },
  executeQuery: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[2]++;
    cov_27lr75ggfo().s[5]++;
    return executeQuery;
  },
  prisma: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[3]++;
    cov_27lr75ggfo().s[6]++;
    return prisma;
  },
  safeQuery: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[4]++;
    cov_27lr75ggfo().s[7]++;
    return safeQuery;
  }
});
const _client =
/* istanbul ignore next */
(cov_27lr75ggfo().s[8]++, require("@prisma/client"));
// Use a single instance of Prisma Client across the entire app
const globalForPrisma =
/* istanbul ignore next */
(cov_27lr75ggfo().s[9]++, global);
// Track instance creation for debugging
/* istanbul ignore next */
cov_27lr75ggfo().s[10]++;
if (!globalForPrisma.prismaInstanceCount) {
  /* istanbul ignore next */
  cov_27lr75ggfo().b[0][0]++;
  cov_27lr75ggfo().s[11]++;
  globalForPrisma.prismaInstanceCount = 0;
} else
/* istanbul ignore next */
{
  cov_27lr75ggfo().b[0][1]++;
}
// Optimized connection options for millisecond performance
const prismaOptions =
/* istanbul ignore next */
(cov_27lr75ggfo().s[12]++, {
  datasources: {
    db: {
      url: process.env.DATABASE_URL ?
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[1][0]++, `${process.env.DATABASE_URL}?connection_limit=5&pool_timeout=20&connect_timeout=10&prepared_statement_cache_size=0&statement_timeout=10000&idle_in_transaction_session_timeout=10000&pgbouncer=true&application_name=mssports_prisma`) :
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[1][1]++, "postgresql://localhost:5432/mssport")
    }
  },
  errorFormat: "minimal",
  // Additional performance options
  transactionOptions: {
    maxWait: 5000,
    timeout: 10000
  }
});
/* istanbul ignore next */
cov_27lr75ggfo().s[13]++;
console.log("Initializing Prisma client with DATABASE_URL:", process.env.DATABASE_URL ?
/* istanbul ignore next */
(cov_27lr75ggfo().b[2][0]++, `${process.env.DATABASE_URL.substring(0, 20)}...`) :
/* istanbul ignore next */
(cov_27lr75ggfo().b[2][1]++, "Not set (using default)"));
// Function to detect if we're running in Edge Runtime
function isEdgeRuntime() {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[5]++;
  cov_27lr75ggfo().s[14]++;
  return /* istanbul ignore next */(cov_27lr75ggfo().b[3][0]++, typeof process === "undefined") ||
  /* istanbul ignore next */
  (cov_27lr75ggfo().b[3][1]++, process.env.NEXT_RUNTIME === "edge") ||
  /* istanbul ignore next */
  (cov_27lr75ggfo().b[3][2]++, typeof globalThis !== "undefined") &&
  /* istanbul ignore next */
  (cov_27lr75ggfo().b[3][3]++, "EdgeRuntime" in globalThis);
}
// Function to create a new Prisma client with prepared statement handling
function createPrismaClient() {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[6]++;
  cov_27lr75ggfo().s[15]++;
  globalForPrisma.prismaInstanceCount++;
  /* istanbul ignore next */
  cov_27lr75ggfo().s[16]++;
  console.log(`Creating Prisma client instance #${globalForPrisma.prismaInstanceCount}`);
  const client =
  /* istanbul ignore next */
  (cov_27lr75ggfo().s[17]++, new _client.PrismaClient(prismaOptions));
  // Only add middleware in Node.js runtime, not in Edge Runtime
  /* istanbul ignore next */
  cov_27lr75ggfo().s[18]++;
  if (!isEdgeRuntime()) {
    /* istanbul ignore next */
    cov_27lr75ggfo().b[4][0]++;
    cov_27lr75ggfo().s[19]++;
    console.log("Adding Prisma middleware for prepared statement handling (Node.js runtime)");
    // Add middleware to handle prepared statement conflicts
    /* istanbul ignore next */
    cov_27lr75ggfo().s[20]++;
    client.$use(async (params, next) => {
      /* istanbul ignore next */
      cov_27lr75ggfo().f[7]++;
      cov_27lr75ggfo().s[21]++;
      try {
        /* istanbul ignore next */
        cov_27lr75ggfo().s[22]++;
        return await next(params);
      } catch (error) {
        // Check for prepared statement errors
        const isPreparedStatementError =
        /* istanbul ignore next */
        (cov_27lr75ggfo().s[23]++,
        /* istanbul ignore next */
        (cov_27lr75ggfo().b[5][0]++, error?.code === "42P05") ||
        /* istanbul ignore next */
        (cov_27lr75ggfo().b[5][1]++,
        // prepared statement already exists
        error?.code === "26000") ||
        /* istanbul ignore next */
        (cov_27lr75ggfo().b[5][2]++,
        // prepared statement does not exist
        error?.message?.includes("prepared statement")) ||
        /* istanbul ignore next */
        (cov_27lr75ggfo().b[5][3]++, error?.message?.includes("already exists")) ||
        /* istanbul ignore next */
        (cov_27lr75ggfo().b[5][4]++, error?.message?.includes("does not exist")));
        /* istanbul ignore next */
        cov_27lr75ggfo().s[24]++;
        if (isPreparedStatementError) {
          /* istanbul ignore next */
          cov_27lr75ggfo().b[6][0]++;
          cov_27lr75ggfo().s[25]++;
          console.log("Prepared statement conflict detected in middleware, retrying...");
          /* istanbul ignore next */
          cov_27lr75ggfo().s[26]++;
          try {
            /* istanbul ignore next */
            cov_27lr75ggfo().s[27]++;
            // Try to clear prepared statements
            await client.$executeRaw`DEALLOCATE ALL`;
          } catch (deallocateError) {
            // Ignore deallocate errors as they're expected in some cases
          }
          // Wait a bit and retry
          /* istanbul ignore next */
          cov_27lr75ggfo().s[28]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_27lr75ggfo().f[8]++;
            cov_27lr75ggfo().s[29]++;
            return setTimeout(resolve, 100);
          });
          /* istanbul ignore next */
          cov_27lr75ggfo().s[30]++;
          return await next(params);
        } else
        /* istanbul ignore next */
        {
          cov_27lr75ggfo().b[6][1]++;
        }
        cov_27lr75ggfo().s[31]++;
        throw error;
      }
    });
  } else {
    /* istanbul ignore next */
    cov_27lr75ggfo().b[4][1]++;
    cov_27lr75ggfo().s[32]++;
    console.log("Skipping Prisma middleware in Edge Runtime");
  }
  /* istanbul ignore next */
  cov_27lr75ggfo().s[33]++;
  return client;
}
const prisma =
/* istanbul ignore next */
(cov_27lr75ggfo().s[34]++,
/* istanbul ignore next */
(cov_27lr75ggfo().b[7][0]++, globalForPrisma.prisma) ||
/* istanbul ignore next */
(cov_27lr75ggfo().b[7][1]++, createPrismaClient()));
// For development, save the instance to avoid too many client instances
/* istanbul ignore next */
cov_27lr75ggfo().s[35]++;
if (process.env.NODE_ENV !== "production") {
  /* istanbul ignore next */
  cov_27lr75ggfo().b[8][0]++;
  cov_27lr75ggfo().s[36]++;
  globalForPrisma.prisma = prisma;
} else
/* istanbul ignore next */
{
  cov_27lr75ggfo().b[8][1]++;
}
async function safeQuery(queryFn, fallback, logMessage =
/* istanbul ignore next */
(cov_27lr75ggfo().b[9][0]++, "Query error"), maxRetries =
/* istanbul ignore next */
(cov_27lr75ggfo().b[10][0]++, 3)) {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[9]++;
  let _lastError;
  /* istanbul ignore next */
  cov_27lr75ggfo().s[37]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_27lr75ggfo().s[38]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[39]++;
    try {
      /* istanbul ignore next */
      cov_27lr75ggfo().s[40]++;
      return await queryFn();
    } catch (error) {
      /* istanbul ignore next */
      cov_27lr75ggfo().s[41]++;
      _lastError = error;
      /* istanbul ignore next */
      cov_27lr75ggfo().s[42]++;
      console.error(`${logMessage} (attempt ${attempt}/${maxRetries}):`, error);
      // Check for prepared statement errors
      const isPreparedStatementError =
      /* istanbul ignore next */
      (cov_27lr75ggfo().s[43]++,
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][0]++, error?.code === "42P05") ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][1]++,
      // prepared statement already exists
      error?.code === "26000") ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][2]++,
      // prepared statement does not exist
      error?.message?.includes("prepared statement")) ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][3]++, error?.message?.includes("already exists")) ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][4]++, error?.message?.includes("does not exist")) ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][5]++, error?.meta?.code === "42P05") ||
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[11][6]++, error?.meta?.code === "26000"));
      /* istanbul ignore next */
      cov_27lr75ggfo().s[44]++;
      if (
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[13][0]++, isPreparedStatementError) &&
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[13][1]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_27lr75ggfo().b[12][0]++;
        cov_27lr75ggfo().s[45]++;
        console.log(`Detected prepared statement error on attempt ${attempt}, handling with middleware retry...`);
        // The middleware should handle this, but add additional delay for safety
        const delay =
        /* istanbul ignore next */
        (cov_27lr75ggfo().s[46]++, 150 * attempt);
        /* istanbul ignore next */
        cov_27lr75ggfo().s[47]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_27lr75ggfo().f[10]++;
          cov_27lr75ggfo().s[48]++;
          return setTimeout(resolve, delay);
        });
      } else {
        /* istanbul ignore next */
        cov_27lr75ggfo().b[12][1]++;
        cov_27lr75ggfo().s[49]++;
        if (attempt < maxRetries) {
          /* istanbul ignore next */
          cov_27lr75ggfo().b[14][0]++;
          cov_27lr75ggfo().s[50]++;
          // For other errors, still retry with a shorter delay
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_27lr75ggfo().f[11]++;
            cov_27lr75ggfo().s[51]++;
            return setTimeout(resolve, 50 * attempt);
          });
        } else
        /* istanbul ignore next */
        {
          cov_27lr75ggfo().b[14][1]++;
        }
      }
    }
  }
  /* istanbul ignore next */
  cov_27lr75ggfo().s[52]++;
  console.error(`${logMessage}: All ${maxRetries} attempts failed. Returning fallback.`);
  /* istanbul ignore next */
  cov_27lr75ggfo().s[53]++;
  return fallback;
}
async function executeQuery(queryFn) {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[12]++;
  cov_27lr75ggfo().s[54]++;
  try {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[55]++;
    return await queryFn();
  } catch (error) {
    // Check for prepared statement errors
    const isPreparedStatementError =
    /* istanbul ignore next */
    (cov_27lr75ggfo().s[56]++,
    /* istanbul ignore next */
    (cov_27lr75ggfo().b[15][0]++, error?.code === "42P05") ||
    /* istanbul ignore next */
    (cov_27lr75ggfo().b[15][1]++,
    // prepared statement already exists
    error?.code === "26000") ||
    /* istanbul ignore next */
    (cov_27lr75ggfo().b[15][2]++,
    // prepared statement does not exist
    error?.message?.includes("prepared statement")) ||
    /* istanbul ignore next */
    (cov_27lr75ggfo().b[15][3]++, error?.message?.includes("already exists")) ||
    /* istanbul ignore next */
    (cov_27lr75ggfo().b[15][4]++, error?.message?.includes("does not exist")));
    /* istanbul ignore next */
    cov_27lr75ggfo().s[57]++;
    if (isPreparedStatementError) {
      /* istanbul ignore next */
      cov_27lr75ggfo().b[16][0]++;
      cov_27lr75ggfo().s[58]++;
      console.log("Prepared statement conflict detected, attempting recovery...");
      /* istanbul ignore next */
      cov_27lr75ggfo().s[59]++;
      try {
        /* istanbul ignore next */
        cov_27lr75ggfo().s[60]++;
        // Try to clear prepared statements
        await prisma.$executeRaw`DEALLOCATE ALL`;
        /* istanbul ignore next */
        cov_27lr75ggfo().s[61]++;
        console.log("Successfully cleared prepared statements");
      } catch (deallocateError) {
        /* istanbul ignore next */
        cov_27lr75ggfo().s[62]++;
        console.log("Could not deallocate statements (this is normal in some cases)");
      }
      // Wait a moment and retry
      /* istanbul ignore next */
      cov_27lr75ggfo().s[63]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_27lr75ggfo().f[13]++;
        cov_27lr75ggfo().s[64]++;
        return setTimeout(resolve, 200);
      });
      /* istanbul ignore next */
      cov_27lr75ggfo().s[65]++;
      return await queryFn();
    } else
    /* istanbul ignore next */
    {
      cov_27lr75ggfo().b[16][1]++;
    }
    cov_27lr75ggfo().s[66]++;
    throw error;
  }
}
// Graceful shutdown handler (only in Node.js environment)
/* istanbul ignore next */
cov_27lr75ggfo().s[67]++;
if (
/* istanbul ignore next */
(cov_27lr75ggfo().b[18][0]++, typeof process !== "undefined") &&
/* istanbul ignore next */
(cov_27lr75ggfo().b[18][1]++, process.on)) {
  /* istanbul ignore next */
  cov_27lr75ggfo().b[17][0]++;
  cov_27lr75ggfo().s[68]++;
  process.on("beforeExit", async () => {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[14]++;
    cov_27lr75ggfo().s[69]++;
    await prisma.$disconnect();
  });
} else
/* istanbul ignore next */
{
  cov_27lr75ggfo().b[17][1]++;
}
const _default =
/* istanbul ignore next */
(cov_27lr75ggfo().s[70]++, prisma);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,