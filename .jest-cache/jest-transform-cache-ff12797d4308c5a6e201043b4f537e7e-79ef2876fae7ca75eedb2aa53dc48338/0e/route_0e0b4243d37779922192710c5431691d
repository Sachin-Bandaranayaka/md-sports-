0f5dbe3309e9df7d33f62f86131f68dd
"use strict";

/* istanbul ignore next */
function cov_1z1k2ubu6c() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts";
  var hash = "aa080da5ea719eab61d0b7c3e0e03fe1732222e4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "13": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "14": {
        start: {
          line: 31,
          column: 19
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "17": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "20": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 51
        }
      },
      "21": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 57
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "23": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 96
        }
      },
      "24": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "25": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 31
        }
      },
      "26": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 189,
          column: 5
        }
      },
      "27": {
        start: {
          line: 83,
          column: 32
        },
        end: {
          line: 83,
          column: 46
        }
      },
      "28": {
        start: {
          line: 84,
          column: 19
        },
        end: {
          line: 84,
          column: 36
        }
      },
      "29": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "30": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "31": {
        start: {
          line: 93,
          column: 21
        },
        end: {
          line: 93,
          column: 41
        }
      },
      "32": {
        start: {
          line: 94,
          column: 77
        },
        end: {
          line: 94,
          column: 81
        }
      },
      "33": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "34": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "35": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "36": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 59
        }
      },
      "37": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "38": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 107,
          column: 21
        }
      },
      "39": {
        start: {
          line: 102,
          column: 46
        },
        end: {
          line: 102,
          column: 84
        }
      },
      "40": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 87
        }
      },
      "41": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 94
        }
      },
      "42": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 136
        }
      },
      "43": {
        start: {
          line: 114,
          column: 15
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "44": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 43
        }
      },
      "45": {
        start: {
          line: 118,
          column: 140
        },
        end: {
          line: 118,
          column: 154
        }
      },
      "46": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "48": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "49": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 47
        }
      },
      "50": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "51": {
        start: {
          line: 151,
          column: 37
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "53": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "54": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 174,
          column: 10
        }
      },
      "55": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "56": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 57
        }
      },
      "57": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "58": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 96
        }
      },
      "59": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "60": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 31
        }
      },
      "61": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 264,
          column: 5
        }
      },
      "62": {
        start: {
          line: 199,
          column: 22
        },
        end: {
          line: 199,
          column: 82
        }
      },
      "63": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "64": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 206,
          column: 15
        }
      },
      "65": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 59
        }
      },
      "66": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "67": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "68": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 218,
          column: 46
        }
      },
      "69": {
        start: {
          line: 219,
          column: 19
        },
        end: {
          line: 219,
          column: 36
        }
      },
      "70": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "71": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "72": {
        start: {
          line: 229,
          column: 25
        },
        end: {
          line: 236,
          column: 10
        }
      },
      "73": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "74": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "75": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 61
        }
      },
      "76": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "77": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "78": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 57
        }
      },
      "79": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 37
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 18
          }
        },
        loc: {
          start: {
            line: 75,
            column: 37
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 144,
            column: 48
          },
          end: {
            line: 144,
            column: 49
          }
        },
        loc: {
          start: {
            line: 144,
            column: 55
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 144
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 191,
            column: 15
          },
          end: {
            line: 191,
            column: 21
          }
        },
        loc: {
          start: {
            line: 191,
            column: 40
          },
          end: {
            line: 265,
            column: 1
          }
        },
        line: 191
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 44
          },
          end: {
            line: 69,
            column: 57
          }
        }, {
          start: {
            line: 69,
            column: 60
          },
          end: {
            line: 69,
            column: 73
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 117,
            column: 9
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 25
          }
        }, {
          start: {
            line: 96,
            column: 29
          },
          end: {
            line: 96,
            column: 62
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 46
          }
        }, {
          start: {
            line: 100,
            column: 50
          },
          end: {
            line: 100,
            column: 96
          }
        }, {
          start: {
            line: 100,
            column: 100
          },
          end: {
            line: 100,
            column: 142
          }
        }],
        line: 100
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 53
          },
          end: {
            line: 104,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 53
          },
          end: {
            line: 104,
            column: 78
          }
        }, {
          start: {
            line: 104,
            column: 82
          },
          end: {
            line: 104,
            column: 86
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 19
          },
          end: {
            line: 114,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 19
          },
          end: {
            line: 114,
            column: 52
          }
        }, {
          start: {
            line: 114,
            column: 56
          },
          end: {
            line: 114,
            column: 78
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 24
          }
        }, {
          start: {
            line: 121,
            column: 28
          },
          end: {
            line: 121,
            column: 32
          }
        }],
        line: 121
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 19
          },
          end: {
            line: 122,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 19
          },
          end: {
            line: 122,
            column: 24
          }
        }, {
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 32
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 126,
            column: 136
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 126,
            column: 40
          }
        }, {
          start: {
            line: 126,
            column: 45
          },
          end: {
            line: 126,
            column: 135
          }
        }],
        line: 126
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 45
          },
          end: {
            line: 126,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 115
          },
          end: {
            line: 126,
            column: 128
          }
        }, {
          start: {
            line: 126,
            column: 131
          },
          end: {
            line: 126,
            column: 135
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 126,
            column: 45
          },
          end: {
            line: 126,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 45
          },
          end: {
            line: 126,
            column: 78
          }
        }, {
          start: {
            line: 126,
            column: 82
          },
          end: {
            line: 126,
            column: 112
          }
        }],
        line: 126
      },
      "17": {
        loc: {
          start: {
            line: 127,
            column: 22
          },
          end: {
            line: 127,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 22
          },
          end: {
            line: 127,
            column: 26
          }
        }, {
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 34
          }
        }],
        line: 127
      },
      "18": {
        loc: {
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 38
          }
        }, {
          start: {
            line: 128,
            column: 42
          },
          end: {
            line: 128,
            column: 46
          }
        }],
        line: 128
      },
      "19": {
        loc: {
          start: {
            line: 129,
            column: 31
          },
          end: {
            line: 129,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 31
          },
          end: {
            line: 129,
            column: 44
          }
        }, {
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 52
          }
        }],
        line: 129
      },
      "20": {
        loc: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 130,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 130,
            column: 54
          }
        }, {
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 62
          }
        }],
        line: 130
      },
      "21": {
        loc: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 42
          }
        }, {
          start: {
            line: 131,
            column: 46
          },
          end: {
            line: 131,
            column: 54
          }
        }],
        line: 131
      },
      "22": {
        loc: {
          start: {
            line: 132,
            column: 29
          },
          end: {
            line: 132,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 29
          },
          end: {
            line: 132,
            column: 52
          }
        }, {
          start: {
            line: 132,
            column: 56
          },
          end: {
            line: 132,
            column: 57
          }
        }],
        line: 132
      },
      "23": {
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 133,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 133,
            column: 52
          }
        }, {
          start: {
            line: 133,
            column: 56
          },
          end: {
            line: 133,
            column: 57
          }
        }],
        line: 133
      },
      "24": {
        loc: {
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 134,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 134,
            column: 28
          }
        }, {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 36
          }
        }],
        line: 134
      },
      "25": {
        loc: {
          start: {
            line: 135,
            column: 23
          },
          end: {
            line: 135,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 23
          },
          end: {
            line: 135,
            column: 28
          }
        }, {
          start: {
            line: 135,
            column: 32
          },
          end: {
            line: 135,
            column: 36
          }
        }],
        line: 135
      },
      "26": {
        loc: {
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 137,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 137,
            column: 38
          }
        }, {
          start: {
            line: 137,
            column: 42
          },
          end: {
            line: 137,
            column: 50
          }
        }],
        line: 137
      },
      "27": {
        loc: {
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 138,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 138,
            column: 48
          }
        }, {
          start: {
            line: 138,
            column: 52
          },
          end: {
            line: 138,
            column: 53
          }
        }],
        line: 138
      },
      "28": {
        loc: {
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 48
          }
        }, {
          start: {
            line: 139,
            column: 52
          },
          end: {
            line: 139,
            column: 53
          }
        }],
        line: 139
      },
      "29": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "30": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "31": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 17
          }
        }, {
          start: {
            line: 150,
            column: 21
          },
          end: {
            line: 150,
            column: 33
          }
        }],
        line: 150
      },
      "32": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "33": {
        loc: {
          start: {
            line: 185,
            column: 19
          },
          end: {
            line: 185,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 44
          },
          end: {
            line: 185,
            column: 57
          }
        }, {
          start: {
            line: 185,
            column: 60
          },
          end: {
            line: 185,
            column: 73
          }
        }],
        line: 185
      },
      "34": {
        loc: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "35": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "36": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "37": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "38": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "39": {
        loc: {
          start: {
            line: 260,
            column: 19
          },
          end: {
            line: 260,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 44
          },
          end: {
            line: 260,
            column: 57
          }
        }, {
          start: {
            line: 260,
            column: 60
          },
          end: {
            line: 260,
            column: 73
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\nimport { requirePermission } from '@/lib/utils/middleware';\n\nexport async function GET(\n    request: Request,\n    context: { params: { id: string } }\n) {\n    try {\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        const customer = await prisma.customer.findUnique({\n            where: {\n                id: id\n            },\n            include: {\n                invoices: {\n                    include: {\n                        items: true\n                    },\n                    orderBy: {\n                        createdAt: 'desc'\n                    }\n                }\n            }\n        });\n\n        if (!customer) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Customer not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(customer);\n    } catch (error) {\n        console.error('Error fetching customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: Request,\n    context: { params: { id: string } }\n) {\n    // Check for 'customer:update' permission\n    const permissionError = await requirePermission('customer:update')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n        const { name, email, phone, address: addressString, ...otherData } = body;\n\n        let addressDetails = {};\n        if (addressString && typeof addressString === 'string') {\n            try {\n                addressDetails = JSON.parse(addressString);\n\n                // Check if mainAddress is a JSON string and parse it to prevent nesting\n                if (addressDetails.mainAddress && typeof addressDetails.mainAddress === 'string' &&\n                    addressDetails.mainAddress.startsWith('{')) {\n                    try {\n                        const nestedAddress = JSON.parse(addressDetails.mainAddress);\n                        // Replace the string with the actual value or null\n                        addressDetails.mainAddress = nestedAddress.mainAddress || null;\n                    } catch (nestedError) {\n                        console.warn('Nested address string is not valid JSON:', nestedError);\n                    }\n                }\n            } catch (e) {\n                console.warn('Address string is not valid JSON, proceeding with direct assignment if available or an empty object:', e);\n                // If addressString is not JSON, it might be a simple string address or undefined.\n                // We'll let Prisma handle it or use defaults.\n            }\n        } else if (typeof addressString === 'object' && addressString !== null) {\n            // If addressString is already an object (e.g. from direct API call not stringified form data)\n            addressDetails = addressString;\n        }\n\n\n        const {\n            mainAddress,\n            city,\n            postalCode,\n            contactPerson,\n            contactPersonPhone,\n            customerType,\n            creditLimit,\n            creditPeriod,\n            taxId,\n            notes\n        } = addressDetails as any; // Type assertion for easier access\n\n        const customerUpdateData: any = {\n            name: name,\n            email: email || null,\n            phone: phone || null,\n            // Store detailed address fields in the address JSON blob as per existing pattern\n            // and also individual fields if they exist at the top level of the Customer model\n            address: JSON.stringify({\n                mainAddress: mainAddress || (typeof addressString === 'string' && !addressString.startsWith('{') ? addressString : null), // Use raw addressString if it's not JSON\n                city: city || null,\n                postalCode: postalCode || null,\n                contactPerson: contactPerson || null,\n                contactPersonPhone: contactPersonPhone || null,\n                customerType: customerType || 'Retail',\n                creditLimit: parseFloat(creditLimit) || 0,\n                creditPeriod: parseInt(creditPeriod) || 0,\n                taxId: taxId || null,\n                notes: notes || null,\n            }),\n            customerType: customerType || 'Retail', // Persist this at the top level too\n            creditLimit: parseFloat(creditLimit) || 0, // Persist this at the top level too\n            creditPeriod: parseInt(creditPeriod) || 0, // Persist this at the top level too\n            // otherData might contain fields like 'status', which we want to preserve\n            ...otherData\n        };\n\n        // Remove undefined fields to avoid Prisma errors\n        Object.keys(customerUpdateData).forEach(key => {\n            if (customerUpdateData[key] === undefined) {\n                delete customerUpdateData[key];\n            }\n        });\n\n        // Check for duplicate mobile number if phone is being updated\n        if (phone && phone.trim()) {\n            const existingCustomer = await prisma.customer.findFirst({\n                where: {\n                    phone: phone.trim(),\n                    id: {\n                        not: id // Exclude the current customer being updated\n                    }\n                }\n            });\n\n            if (existingCustomer) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'A customer with this mobile number already exists',\n                        error: 'Duplicate mobile number'\n                    },\n                    { status: 400 }\n                );\n            }\n        }\n\n        const updatedCustomer = await prisma.customer.update({\n            where: {\n                id: id\n            },\n            data: customerUpdateData\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Customer updated successfully',\n            data: updatedCustomer\n        });\n    } catch (error) {\n        console.error('Error updating customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: Request,\n    context: { params: { id: string } }\n) {\n    // Check for 'customer:delete' permission\n    const permissionError = await requirePermission('customer:delete')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Verify token and get user\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json(\n                { success: false, message: 'No token provided' },\n                { status: 401 }\n            );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid token' },\n                { status: 401 }\n            );\n        }\n\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Get customer data before deletion for audit log\n        const customer = await prisma.customer.findUnique({\n            where: { id },\n            include: {\n                invoices: true\n            }\n        });\n\n        if (!customer) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Customer not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        // Note: Since we're using soft deletion, we allow deletion of customers with invoices\n        // The customer will be moved to recycle bin and can be recovered if needed\n\n        // Use audit service for soft delete\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Customer',\n            id,\n            customer,\n            decoded.userId,\n            true // canRecover\n        );\n\n        return NextResponse.json({\n            success: true,\n            message: 'Customer moved to recycle bin successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error deleting customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "context", "id", "paramId", "params", "parseInt", "isNaN", "NextResponse", "json", "success", "message", "status", "customer", "prisma", "findUnique", "where", "include", "invoices", "items", "orderBy", "createdAt", "error", "console", "Error", "String", "permissionError", "requirePermission", "body", "name", "email", "phone", "address", "addressString", "otherData", "addressDetails", "JSON", "parse", "mainAddress", "startsWith", "nestedAddress", "nestedError", "warn", "e", "city", "postalCode", "contactPerson", "contactPersonPhone", "customerType", "creditLimit", "creditPeriod", "taxId", "notes", "customerUpdateData", "stringify", "parseFloat", "Object", "keys", "forEach", "key", "undefined", "trim", "existingCustomer", "findFirst", "not", "updatedCustomer", "update", "data", "token", "headers", "get", "replace", "decoded", "verifyToken", "auditService", "AuditService", "softDelete", "userId"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aa080da5ea719eab61d0b7c3e0e03fe1732222e4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1z1k2ubu6c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1z1k2ubu6c();
cov_1z1k2ubu6c().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[0]++;
  cov_1z1k2ubu6c().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1z1k2ubu6c().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[1]++;
    cov_1z1k2ubu6c().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[2]++;
    cov_1z1k2ubu6c().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[3]++;
    cov_1z1k2ubu6c().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[8]++, require("../../../../lib/prisma"));
const _auditService =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[9]++, require("../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[10]++, require("../../../../lib/auth"));
const _middleware =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[11]++, require("../../../../lib/utils/middleware"));
async function GET(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[4]++;
  cov_1z1k2ubu6c().s[12]++;
  try {
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[13]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[14]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[15]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[0][0]++;
      cov_1z1k2ubu6c().s[16]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[0][1]++;
    }
    const customer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[17]++, await _prisma.prisma.customer.findUnique({
      where: {
        id: id
      },
      include: {
        invoices: {
          include: {
            items: true
          },
          orderBy: {
            createdAt: "desc"
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[18]++;
    if (!customer) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[1][0]++;
      cov_1z1k2ubu6c().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "Customer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[1][1]++;
    }
    cov_1z1k2ubu6c().s[20]++;
    return _server.NextResponse.json(customer);
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[21]++;
    console.error("Error fetching customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[22]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[2][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PUT(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[5]++;
  // Check for 'customer:update' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[23]++, await (0, _middleware.requirePermission)("customer:update")(request));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[24]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[3][0]++;
    cov_1z1k2ubu6c().s[25]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[3][1]++;
  }
  cov_1z1k2ubu6c().s[26]++;
  try {
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[27]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[28]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[29]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[4][0]++;
      cov_1z1k2ubu6c().s[30]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[4][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[31]++, await request.json());
    const {
      name,
      email,
      phone,
      address: addressString,
      ...otherData
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[32]++, body);
    let addressDetails =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[33]++, {});
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[6][0]++, addressString) &&
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[6][1]++, typeof addressString === "string")) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[5][0]++;
      cov_1z1k2ubu6c().s[35]++;
      try {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[36]++;
        addressDetails = JSON.parse(addressString);
        // Check if mainAddress is a JSON string and parse it to prevent nesting
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[37]++;
        if (
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[8][0]++, addressDetails.mainAddress) &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[8][1]++, typeof addressDetails.mainAddress === "string") &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[8][2]++, addressDetails.mainAddress.startsWith("{"))) {
          /* istanbul ignore next */
          cov_1z1k2ubu6c().b[7][0]++;
          cov_1z1k2ubu6c().s[38]++;
          try {
            const nestedAddress =
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().s[39]++, JSON.parse(addressDetails.mainAddress));
            // Replace the string with the actual value or null
            /* istanbul ignore next */
            cov_1z1k2ubu6c().s[40]++;
            addressDetails.mainAddress =
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().b[9][0]++, nestedAddress.mainAddress) ||
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().b[9][1]++, null);
          } catch (nestedError) {
            /* istanbul ignore next */
            cov_1z1k2ubu6c().s[41]++;
            console.warn("Nested address string is not valid JSON:", nestedError);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1z1k2ubu6c().b[7][1]++;
        }
      } catch (e) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[42]++;
        console.warn("Address string is not valid JSON, proceeding with direct assignment if available or an empty object:", e);
        // If addressString is not JSON, it might be a simple string address or undefined.
        // We'll let Prisma handle it or use defaults.
      }
    } else {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[5][1]++;
      cov_1z1k2ubu6c().s[43]++;
      if (
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[11][0]++, typeof addressString === "object") &&
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[11][1]++, addressString !== null)) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[10][0]++;
        cov_1z1k2ubu6c().s[44]++;
        // If addressString is already an object (e.g. from direct API call not stringified form data)
        addressDetails = addressString;
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[10][1]++;
      }
    }
    const {
      mainAddress,
      city,
      postalCode,
      contactPerson,
      contactPersonPhone,
      customerType,
      creditLimit,
      creditPeriod,
      taxId,
      notes
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[45]++, addressDetails); // Type assertion for easier access
    const customerUpdateData =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[46]++, {
      name: name,
      email:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[12][0]++, email) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[12][1]++, null),
      phone:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[13][0]++, phone) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[13][1]++, null),
      // Store detailed address fields in the address JSON blob as per existing pattern
      // and also individual fields if they exist at the top level of the Customer model
      address: JSON.stringify({
        mainAddress:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[14][0]++, mainAddress) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[14][1]++,
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[16][0]++, typeof addressString === "string") &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[16][1]++, !addressString.startsWith("{")) ?
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[15][0]++, addressString) :
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[15][1]++, null)),
        city:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[17][0]++, city) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[17][1]++, null),
        postalCode:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[18][0]++, postalCode) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[18][1]++, null),
        contactPerson:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[19][0]++, contactPerson) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[19][1]++, null),
        contactPersonPhone:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[20][0]++, contactPersonPhone) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[20][1]++, null),
        customerType:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[21][0]++, customerType) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[21][1]++, "Retail"),
        creditLimit:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[22][0]++, parseFloat(creditLimit)) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[22][1]++, 0),
        creditPeriod:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[23][0]++, parseInt(creditPeriod)) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[23][1]++, 0),
        taxId:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[24][0]++, taxId) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[24][1]++, null),
        notes:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[25][0]++, notes) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[25][1]++, null)
      }),
      customerType:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[26][0]++, customerType) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[26][1]++, "Retail"),
      creditLimit:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[27][0]++, parseFloat(creditLimit)) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[27][1]++, 0),
      creditPeriod:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[28][0]++, parseInt(creditPeriod)) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[28][1]++, 0),
      // otherData might contain fields like 'status', which we want to preserve
      ...otherData
    });
    // Remove undefined fields to avoid Prisma errors
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[47]++;
    Object.keys(customerUpdateData).forEach(key => {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().f[6]++;
      cov_1z1k2ubu6c().s[48]++;
      if (customerUpdateData[key] === undefined) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[29][0]++;
        cov_1z1k2ubu6c().s[49]++;
        delete customerUpdateData[key];
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[29][1]++;
      }
    });
    // Check for duplicate mobile number if phone is being updated
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[31][0]++, phone) &&
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[31][1]++, phone.trim())) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[30][0]++;
      const existingCustomer =
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().s[51]++, await _prisma.prisma.customer.findFirst({
        where: {
          phone: phone.trim(),
          id: {
            not: id // Exclude the current customer being updated
          }
        }
      }));
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[52]++;
      if (existingCustomer) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[32][0]++;
        cov_1z1k2ubu6c().s[53]++;
        return _server.NextResponse.json({
          success: false,
          message: "A customer with this mobile number already exists",
          error: "Duplicate mobile number"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[32][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[30][1]++;
    }
    const updatedCustomer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[54]++, await _prisma.prisma.customer.update({
      where: {
        id: id
      },
      data: customerUpdateData
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[55]++;
    return _server.NextResponse.json({
      success: true,
      message: "Customer updated successfully",
      data: updatedCustomer
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[56]++;
    console.error("Error updating customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[57]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[33][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[33][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[7]++;
  // Check for 'customer:delete' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[58]++, await (0, _middleware.requirePermission)("customer:delete")(request));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[59]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[34][0]++;
    cov_1z1k2ubu6c().s[60]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[34][1]++;
  }
  cov_1z1k2ubu6c().s[61]++;
  try {
    // Verify token and get user
    const token =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[62]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[63]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[35][0]++;
      cov_1z1k2ubu6c().s[64]++;
      return _server.NextResponse.json({
        success: false,
        message: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[35][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[65]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[66]++;
    if (!decoded) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[36][0]++;
      cov_1z1k2ubu6c().s[67]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[36][1]++;
    }
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[68]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[69]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[70]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[37][0]++;
      cov_1z1k2ubu6c().s[71]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[37][1]++;
    }
    // Get customer data before deletion for audit log
    const customer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[72]++, await _prisma.prisma.customer.findUnique({
      where: {
        id
      },
      include: {
        invoices: true
      }
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[73]++;
    if (!customer) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[38][0]++;
      cov_1z1k2ubu6c().s[74]++;
      return _server.NextResponse.json({
        success: false,
        message: "Customer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[38][1]++;
    }
    // Note: Since we're using soft deletion, we allow deletion of customers with invoices
    // The customer will be moved to recycle bin and can be recovered if needed
    // Use audit service for soft delete
    const auditService =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[75]++, new _auditService.AuditService());
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[76]++;
    await auditService.softDelete("Customer", id, customer, decoded.userId, true // canRecover
    );
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[77]++;
    return _server.NextResponse.json({
      success: true,
      message: "Customer moved to recycle bin successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[78]++;
    console.error("Error deleting customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[79]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[39][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[39][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,