{"version":3,"names":["GET","request","params","cov_ovr9nr576","f","s","productId","parseInt","id","isNaN","b","_server","NextResponse","json","success","message","status","searchParams","URL","url","eventTypesParam","get","startDateParam","endDateParam","filterEventTypes","split","startDate","Date","endDate","dateFilter","gte","adjustedEndDate","setHours","lte","allEvents","purchases","_prisma","default","purchaseInvoiceItem","findMany","where","purchaseInvoice","createdAt","Object","keys","length","undefined","include","supplier","product","orderBy","forEach","item","push","timestamp","type","description","quantity","name","price","toFixed","quantityChange","relatedDocumentId","invoiceNumber","details","total","sales","invoiceItem","invoice","customer","shop","shopId","shopName","transfers","transferItem","transfer","fromShop","toShop","fromUser","toUser","fromShopId","userId","fromUserId","userName","notes","toShopId","toUserId","auditLogs","auditLog","OR","entity","entityId","action","path","equals","log","eventType","eventDescription","quantityChangeVal","detailsObject","changes","entries","map","key","value","old","new","join","detailJson","filteredEvents","filter","event","includes","sort","a","getTime","data","error","console","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/history/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\ninterface ProductHistoryEvent {\n    timestamp: Date;\n    type: string;\n    description: string;\n    quantityChange?: number;\n    shopId?: number;\n    shopName?: string;\n    userId?: number;\n    userName?: string;\n    relatedDocumentId?: string;\n    details?: any;\n}\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const productId = parseInt(params.id);\n        if (isNaN(productId)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const eventTypesParam = searchParams.get('eventTypes');\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n\n        const filterEventTypes = eventTypesParam ? eventTypesParam.split(',') : [];\n        const startDate = startDateParam ? new Date(startDateParam) : null;\n        const endDate = endDateParam ? new Date(endDateParam) : null;\n\n        // Construct date filter for Prisma\n        const dateFilter: any = {};\n        if (startDate) dateFilter.gte = startDate;\n        if (endDate) {\n            // Adjust endDate to include the whole day\n            const adjustedEndDate = new Date(endDate);\n            adjustedEndDate.setHours(23, 59, 59, 999);\n            dateFilter.lte = adjustedEndDate;\n        }\n\n        const allEvents: ProductHistoryEvent[] = [];\n\n        // 1. Fetch Purchases\n        const purchases = await prisma.purchaseInvoiceItem.findMany({\n            where: {\n                productId,\n                purchaseInvoice: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                purchaseInvoice: { include: { supplier: true } },\n                product: true // To get product name if needed for description, though we have productId\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        purchases.forEach(item => {\n            allEvents.push({\n                timestamp: item.purchaseInvoice.createdAt, // Or item.createdAt if more specific\n                type: 'Purchase',\n                description: `Purchased ${item.quantity} units from ${item.purchaseInvoice.supplier.name}. Price: Rs. ${item.price.toFixed(2)} each.`,\n                quantityChange: item.quantity,\n                relatedDocumentId: `Purchase Invoice #${item.purchaseInvoice.invoiceNumber}`,\n                // shopId: item.purchaseInvoice.shopId, // If PurchaseInvoice has a shopId\n                // userName: // If PurchaseInvoice has a creator/userId\n                details: {\n                    supplier: item.purchaseInvoice.supplier.name,\n                    invoiceNumber: item.purchaseInvoice.invoiceNumber,\n                    quantity: item.quantity,\n                    price: item.price,\n                    total: item.total,\n                }\n            });\n        });\n\n        // 2. Fetch Sales\n        const sales = await prisma.invoiceItem.findMany({\n            where: {\n                productId,\n                invoice: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                invoice: { include: { customer: true, shop: true } }, // Assuming Invoice has shop\n                product: true\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        sales.forEach(item => {\n            allEvents.push({\n                timestamp: item.invoice.createdAt, // Or item.createdAt\n                type: 'Sale',\n                description: `Sold ${item.quantity} units to ${item.invoice.customer.name}.Price: Rs.${item.price.toFixed(2)} each.`,\n                quantityChange: -item.quantity, // Negative for sale\n                shopId: item.invoice.shopId || undefined,\n                shopName: item.invoice.shop?.name || undefined,\n                relatedDocumentId: `Sales Invoice #${item.invoice.invoiceNumber}`,\n                // userName: item.invoice.userId // If Invoice has a creator/userId\n                details: {\n                    customer: item.invoice.customer.name,\n                    invoiceNumber: item.invoice.invoiceNumber,\n                    quantity: item.quantity,\n                    price: item.price,\n                    total: item.total,\n                    shop: item.invoice.shop?.name,\n                }\n            });\n        });\n\n        // 3. Fetch Transfers\n        const transfers = await prisma.transferItem.findMany({\n            where: {\n                productId,\n                transfer: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                transfer: { include: { fromShop: true, toShop: true, fromUser: true, toUser: true } },\n                product: true\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        transfers.forEach(item => {\n            // Create two events for each transfer: one for 'out' and one for 'in'\n            // Transfer Out\n            allEvents.push({\n                timestamp: item.transfer.createdAt,\n                type: 'Transfer Out',\n                description: `Transferred ${item.quantity} units from ${item.transfer.fromShop.name} to ${item.transfer.toShop.name}.`,\n                quantityChange: -item.quantity,\n                shopId: item.transfer.fromShopId,\n                shopName: item.transfer.fromShop.name,\n                userId: item.transfer.fromUserId, // User initiating transfer\n                userName: item.transfer.fromUser.name,\n                relatedDocumentId: `Transfer ID #${item.transfer.id}`,\n                details: {\n                    fromShop: item.transfer.fromShop.name,\n                    toShop: item.transfer.toShop.name,\n                    quantity: item.quantity,\n                    status: item.transfer.status,\n                    notes: item.transfer.notes\n                }\n            });\n            // Transfer In\n            allEvents.push({\n                timestamp: item.transfer.createdAt, // Could be a slightly later time if transfer has receivedAt\n                type: 'Transfer In',\n                description: `Received ${item.quantity} units at ${item.transfer.toShop.name} from ${item.transfer.fromShop.name}.`,\n                quantityChange: item.quantity,\n                shopId: item.transfer.toShopId,\n                shopName: item.transfer.toShop.name,\n                userId: item.transfer.toUserId, // User receiving/confirming transfer\n                userName: item.transfer.toUser.name,\n                relatedDocumentId: `Transfer ID #${item.transfer.id}`,\n                details: { ...allEvents[allEvents.length - 1].details } // same details as out\n            });\n        });\n\n        // 4. Fetch Audit Logs (Product Updates and Stock Additions)\n        const auditLogs = await prisma.auditLog.findMany({\n            where: {\n                OR: [\n                    { entity: 'Product', entityId: productId, action: 'UPDATE_PRODUCT' },\n                    { entity: 'InventoryItem', details: { path: ['productId'], equals: productId }, action: 'ADD_INVENTORY' },\n                    // Add more specific audit actions if needed, e.g., for manual adjustments\n                ],\n                createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n            },\n            // include: { user: true }, // Temporarily removed due to missing explicit relation\n            orderBy: { createdAt: 'desc' }\n        });\n\n        auditLogs.forEach(log => {\n            let eventType = 'Audit';\n            let eventDescription = `Action: ${log.action} on ${log.entity}`;\n            let quantityChangeVal: number | undefined = undefined;\n            let detailsObject = log.details;\n            // let userNameVal: string | undefined = undefined; // Temporarily remove user name\n\n            if (log.action === 'UPDATE_PRODUCT' && typeof log.details === 'object' && log.details !== null) {\n                eventType = 'Product Update';\n                const changes = Object.entries(log.details as Record<string, { old: any, new: any }>)\n                    .map(([key, value]) => `  - ${key}: '${value.old}' -> '${value.new}'`)\n                    .join('\\n');\n                eventDescription = `Product details updated:\\n${changes}`;\n                detailsObject = log.details; // Already an object\n            } else if (log.action === 'ADD_INVENTORY' && typeof log.details === 'object' && log.details !== null) {\n                eventType = 'Stock Added';\n                const detailJson = log.details as any; // Already parsed by Prisma if jsonb\n                quantityChangeVal = detailJson.quantity || 0;\n                eventDescription = `Added ${quantityChangeVal} units directly. Shop ID: ${detailJson.shopId}`;\n                detailsObject = detailJson;\n            }\n\n            allEvents.push({\n                timestamp: log.createdAt,\n                type: eventType,\n                description: eventDescription,\n                quantityChange: quantityChangeVal,\n                shopId: (log.details as any)?.shopId || undefined,\n                userId: log.userId || undefined,\n                // userName: userNameVal, // Temporarily remove user name\n                relatedDocumentId: `Audit ID #${log.id}`,\n                details: detailsObject\n            });\n        });\n\n        // Filter by event types if provided\n        const filteredEvents = filterEventTypes.length > 0\n            ? allEvents.filter(event => filterEventTypes.includes(event.type))\n            : allEvents;\n\n        // Sort all collected events by timestamp in descending order\n        filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n        return NextResponse.json({ success: true, data: filteredEvents });\n\n    } catch (error) {\n        console.error(`Error fetching product history for product ID ${params.id}:`, error);\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json({ success: false, message: 'Failed to fetch product history', details: message }, { status: 500 });\n    }\n} "],"mappingsgBsB;;;;;;WAAAA,GAAA;;;;;iCAhBoB;;;uEACvB;;;;;;;;;;;;;;;AAeZ,eAAeA,IAClBC,OAAoB,EACpB;EAAEC;AAAM,CAA8B;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAEtC,IAAI;IACA,MAAMC,SAAA;IAAA;IAAA,CAAAH,aAAA,GAAAE,CAAA,OAAYE,QAAA,CAASL,MAAA,CAAOM,EAAE;IAAA;IAAAL,aAAA,GAAAE,CAAA;IACpC,IAAII,KAAA,CAAMH,SAAA,GAAY;MAAA;MAAAH,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAClB,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,OAAA,EAAS;QAAOC,OAAA,EAAS;MAAqB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC9F;IAAA;IAAA;MAAAb,aAAA,GAAAO,CAAA;IAAA;IAEA,MAAM;MAAEO;IAAY,CAAE;IAAA;IAAA,CAAAd,aAAA,GAAAE,CAAA,QAAG,IAAIa,GAAA,CAAIjB,OAAA,CAAQkB,GAAG;IAC5C,MAAMC,eAAA;IAAA;IAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAkBY,YAAA,CAAaI,GAAG,CAAC;IACzC,MAAMC,cAAA;IAAA;IAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAiBY,YAAA,CAAaI,GAAG,CAAC;IACxC,MAAME,YAAA;IAAA;IAAA,CAAApB,aAAA,GAAAE,CAAA,QAAeY,YAAA,CAAaI,GAAG,CAAC;IAEtC,MAAMG,gBAAA;IAAA;IAAA,CAAArB,aAAA,GAAAE,CAAA,QAAmBe,eAAA;IAAA;IAAA,CAAAjB,aAAA,GAAAO,CAAA,UAAkBU,eAAA,CAAgBK,KAAK,CAAC;IAAA;IAAA,CAAAtB,aAAA,GAAAO,CAAA,UAAO,EAAE;IAC1E,MAAMgB,SAAA;IAAA;IAAA,CAAAvB,aAAA,GAAAE,CAAA,QAAYiB,cAAA;IAAA;IAAA,CAAAnB,aAAA,GAAAO,CAAA,UAAiB,IAAIiB,IAAA,CAAKL,cAAA;IAAA;IAAA,CAAAnB,aAAA,GAAAO,CAAA,UAAkB;IAC9D,MAAMkB,OAAA;IAAA;IAAA,CAAAzB,aAAA,GAAAE,CAAA,QAAUkB,YAAA;IAAA;IAAA,CAAApB,aAAA,GAAAO,CAAA,UAAe,IAAIiB,IAAA,CAAKJ,YAAA;IAAA;IAAA,CAAApB,aAAA,GAAAO,CAAA,UAAgB;IAExD;IACA,MAAMmB,UAAA;IAAA;IAAA,CAAA1B,aAAA,GAAAE,CAAA,QAAkB,CAAC;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACzB,IAAIqB,SAAA,EAAW;MAAA;MAAAvB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAE,CAAA;MAAAwB,UAAA,CAAWC,GAAG,GAAGJ,SAAA;IAAA;IAAA;IAAA;MAAAvB,aAAA,GAAAO,CAAA;IAAA;IAAAP,aAAA,GAAAE,CAAA;IAChC,IAAIuB,OAAA,EAAS;MAAA;MAAAzB,aAAA,GAAAO,CAAA;MACT;MACA,MAAMqB,eAAA;MAAA;MAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAkB,IAAIsB,IAAA,CAAKC,OAAA;MAAA;MAAAzB,aAAA,GAAAE,CAAA;MACjC0B,eAAA,CAAgBC,QAAQ,CAAC,IAAI,IAAI,IAAI;MAAA;MAAA7B,aAAA,GAAAE,CAAA;MACrCwB,UAAA,CAAWI,GAAG,GAAGF,eAAA;IACrB;IAAA;IAAA;MAAA5B,aAAA,GAAAO,CAAA;IAAA;IAEA,MAAMwB,SAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAmC,EAAE;IAE3C;IACA,MAAM8B,SAAA;IAAA;IAAA,CAAAhC,aAAA,GAAAE,CAAA,QAAY,MAAM+B,OAAA,CAAAC,OAAM,CAACC,mBAAmB,CAACC,QAAQ,CAAC;MACxDC,KAAA,EAAO;QACHlC,SAAA;QACAmC,eAAA,EAAiB;UACbC,SAAA,EAAWC,MAAA,CAAOC,IAAI,CAACf,UAAA,EAAYgB,MAAM,GAAG;UAAA;UAAA,CAAA1C,aAAA,GAAAO,CAAA,UAAImB,UAAA;UAAA;UAAA,CAAA1B,aAAA,GAAAO,CAAA,UAAaoC,SAAA;QACjE;MACJ;MACAC,OAAA,EAAS;QACLN,eAAA,EAAiB;UAAEM,OAAA,EAAS;YAAEC,QAAA,EAAU;UAAK;QAAE;QAC/CC,OAAA,EAAS,KAAK;MAClB;MACAC,OAAA,EAAS;QAAER,SAAA,EAAW;MAAO;IACjC;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IAEA8B,SAAA,CAAUgB,OAAO,CAACC,IAAA;MAAA;MAAAjD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACd6B,SAAA,CAAUmB,IAAI,CAAC;QACXC,SAAA,EAAWF,IAAA,CAAKX,eAAe,CAACC,SAAS;QACzCa,IAAA,EAAM;QACNC,WAAA,EAAa,aAAaJ,IAAA,CAAKK,QAAQ,eAAeL,IAAA,CAAKX,eAAe,CAACO,QAAQ,CAACU,IAAI,gBAAgBN,IAAA,CAAKO,KAAK,CAACC,OAAO,CAAC,UAAU;QACrIC,cAAA,EAAgBT,IAAA,CAAKK,QAAQ;QAC7BK,iBAAA,EAAmB,qBAAqBV,IAAA,CAAKX,eAAe,CAACsB,aAAa,EAAE;QAC5E;QACA;QACAC,OAAA,EAAS;UACLhB,QAAA,EAAUI,IAAA,CAAKX,eAAe,CAACO,QAAQ,CAACU,IAAI;UAC5CK,aAAA,EAAeX,IAAA,CAAKX,eAAe,CAACsB,aAAa;UACjDN,QAAA,EAAUL,IAAA,CAAKK,QAAQ;UACvBE,KAAA,EAAOP,IAAA,CAAKO,KAAK;UACjBM,KAAA,EAAOb,IAAA,CAAKa;QAChB;MACJ;IACJ;IAEA;IACA,MAAMC,KAAA;IAAA;IAAA,CAAA/D,aAAA,GAAAE,CAAA,QAAQ,MAAM+B,OAAA,CAAAC,OAAM,CAAC8B,WAAW,CAAC5B,QAAQ,CAAC;MAC5CC,KAAA,EAAO;QACHlC,SAAA;QACA8D,OAAA,EAAS;UACL1B,SAAA,EAAWC,MAAA,CAAOC,IAAI,CAACf,UAAA,EAAYgB,MAAM,GAAG;UAAA;UAAA,CAAA1C,aAAA,GAAAO,CAAA,UAAImB,UAAA;UAAA;UAAA,CAAA1B,aAAA,GAAAO,CAAA,UAAaoC,SAAA;QACjE;MACJ;MACAC,OAAA,EAAS;QACLqB,OAAA,EAAS;UAAErB,OAAA,EAAS;YAAEsB,QAAA,EAAU;YAAMC,IAAA,EAAM;UAAK;QAAE;QACnDrB,OAAA,EAAS;MACb;MACAC,OAAA,EAAS;QAAER,SAAA,EAAW;MAAO;IACjC;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IAEA6D,KAAA,CAAMf,OAAO,CAACC,IAAA;MAAA;MAAAjD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACV6B,SAAA,CAAUmB,IAAI,CAAC;QACXC,SAAA,EAAWF,IAAA,CAAKgB,OAAO,CAAC1B,SAAS;QACjCa,IAAA,EAAM;QACNC,WAAA,EAAa,QAAQJ,IAAA,CAAKK,QAAQ,aAAaL,IAAA,CAAKgB,OAAO,CAACC,QAAQ,CAACX,IAAI,cAAcN,IAAA,CAAKO,KAAK,CAACC,OAAO,CAAC,UAAU;QACpHC,cAAA,EAAgB,CAACT,IAAA,CAAKK,QAAQ;QAC9Bc,MAAA;QAAQ;QAAA,CAAApE,aAAA,GAAAO,CAAA,WAAA0C,IAAA,CAAKgB,OAAO,CAACG,MAAM;QAAA;QAAA,CAAApE,aAAA,GAAAO,CAAA,WAAIoC,SAAA;QAC/B0B,QAAA;QAAU;QAAA,CAAArE,aAAA,GAAAO,CAAA,WAAA0C,IAAA,CAAKgB,OAAO,CAACE,IAAI,EAAEZ,IAAA;QAAA;QAAA,CAAAvD,aAAA,GAAAO,CAAA,WAAQoC,SAAA;QACrCgB,iBAAA,EAAmB,kBAAkBV,IAAA,CAAKgB,OAAO,CAACL,aAAa,EAAE;QACjE;QACAC,OAAA,EAAS;UACLK,QAAA,EAAUjB,IAAA,CAAKgB,OAAO,CAACC,QAAQ,CAACX,IAAI;UACpCK,aAAA,EAAeX,IAAA,CAAKgB,OAAO,CAACL,aAAa;UACzCN,QAAA,EAAUL,IAAA,CAAKK,QAAQ;UACvBE,KAAA,EAAOP,IAAA,CAAKO,KAAK;UACjBM,KAAA,EAAOb,IAAA,CAAKa,KAAK;UACjBK,IAAA,EAAMlB,IAAA,CAAKgB,OAAO,CAACE,IAAI,EAAEZ;QAC7B;MACJ;IACJ;IAEA;IACA,MAAMe,SAAA;IAAA;IAAA,CAAAtE,aAAA,GAAAE,CAAA,QAAY,MAAM+B,OAAA,CAAAC,OAAM,CAACqC,YAAY,CAACnC,QAAQ,CAAC;MACjDC,KAAA,EAAO;QACHlC,SAAA;QACAqE,QAAA,EAAU;UACNjC,SAAA,EAAWC,MAAA,CAAOC,IAAI,CAACf,UAAA,EAAYgB,MAAM,GAAG;UAAA;UAAA,CAAA1C,aAAA,GAAAO,CAAA,WAAImB,UAAA;UAAA;UAAA,CAAA1B,aAAA,GAAAO,CAAA,WAAaoC,SAAA;QACjE;MACJ;MACAC,OAAA,EAAS;QACL4B,QAAA,EAAU;UAAE5B,OAAA,EAAS;YAAE6B,QAAA,EAAU;YAAMC,MAAA,EAAQ;YAAMC,QAAA,EAAU;YAAMC,MAAA,EAAQ;UAAK;QAAE;QACpF9B,OAAA,EAAS;MACb;MACAC,OAAA,EAAS;QAAER,SAAA,EAAW;MAAO;IACjC;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IAEAoE,SAAA,CAAUtB,OAAO,CAACC,IAAA;MAAA;MAAAjD,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MACd;MACA;MACA6B,SAAA,CAAUmB,IAAI,CAAC;QACXC,SAAA,EAAWF,IAAA,CAAKuB,QAAQ,CAACjC,SAAS;QAClCa,IAAA,EAAM;QACNC,WAAA,EAAa,eAAeJ,IAAA,CAAKK,QAAQ,eAAeL,IAAA,CAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI,OAAON,IAAA,CAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI,GAAG;QACtHG,cAAA,EAAgB,CAACT,IAAA,CAAKK,QAAQ;QAC9Bc,MAAA,EAAQnB,IAAA,CAAKuB,QAAQ,CAACK,UAAU;QAChCR,QAAA,EAAUpB,IAAA,CAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI;QACrCuB,MAAA,EAAQ7B,IAAA,CAAKuB,QAAQ,CAACO,UAAU;QAChCC,QAAA,EAAU/B,IAAA,CAAKuB,QAAQ,CAACG,QAAQ,CAACpB,IAAI;QACrCI,iBAAA,EAAmB,gBAAgBV,IAAA,CAAKuB,QAAQ,CAACnE,EAAE,EAAE;QACrDwD,OAAA,EAAS;UACLY,QAAA,EAAUxB,IAAA,CAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI;UACrCmB,MAAA,EAAQzB,IAAA,CAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI;UACjCD,QAAA,EAAUL,IAAA,CAAKK,QAAQ;UACvBzC,MAAA,EAAQoC,IAAA,CAAKuB,QAAQ,CAAC3D,MAAM;UAC5BoE,KAAA,EAAOhC,IAAA,CAAKuB,QAAQ,CAACS;QACzB;MACJ;MACA;MAAA;MAAAjF,aAAA,GAAAE,CAAA;MACA6B,SAAA,CAAUmB,IAAI,CAAC;QACXC,SAAA,EAAWF,IAAA,CAAKuB,QAAQ,CAACjC,SAAS;QAClCa,IAAA,EAAM;QACNC,WAAA,EAAa,YAAYJ,IAAA,CAAKK,QAAQ,aAAaL,IAAA,CAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI,SAASN,IAAA,CAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI,GAAG;QACnHG,cAAA,EAAgBT,IAAA,CAAKK,QAAQ;QAC7Bc,MAAA,EAAQnB,IAAA,CAAKuB,QAAQ,CAACU,QAAQ;QAC9Bb,QAAA,EAAUpB,IAAA,CAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI;QACnCuB,MAAA,EAAQ7B,IAAA,CAAKuB,QAAQ,CAACW,QAAQ;QAC9BH,QAAA,EAAU/B,IAAA,CAAKuB,QAAQ,CAACI,MAAM,CAACrB,IAAI;QACnCI,iBAAA,EAAmB,gBAAgBV,IAAA,CAAKuB,QAAQ,CAACnE,EAAE,EAAE;QACrDwD,OAAA,EAAS;UAAE,GAAG9B,SAAS,CAACA,SAAA,CAAUW,MAAM,GAAG,EAAE,CAACmB;QAAQ,EAAE;MAC5D;IACJ;IAEA;IACA,MAAMuB,SAAA;IAAA;IAAA,CAAApF,aAAA,GAAAE,CAAA,QAAY,MAAM+B,OAAA,CAAAC,OAAM,CAACmD,QAAQ,CAACjD,QAAQ,CAAC;MAC7CC,KAAA,EAAO;QACHiD,EAAA,EAAI,CACA;UAAEC,MAAA,EAAQ;UAAWC,QAAA,EAAUrF,SAAA;UAAWsF,MAAA,EAAQ;QAAiB,GACnE;UAAEF,MAAA,EAAQ;UAAiB1B,OAAA,EAAS;YAAE6B,IAAA,EAAM,CAAC,YAAY;YAAEC,MAAA,EAAQxF;UAAU;UAAGsF,MAAA,EAAQ;QAAgB,EAE3G;QACDlD,SAAA,EAAWC,MAAA,CAAOC,IAAI,CAACf,UAAA,EAAYgB,MAAM,GAAG;QAAA;QAAA,CAAA1C,aAAA,GAAAO,CAAA,WAAImB,UAAA;QAAA;QAAA,CAAA1B,aAAA,GAAAO,CAAA,WAAaoC,SAAA;MACjE;MACA;MACAI,OAAA,EAAS;QAAER,SAAA,EAAW;MAAO;IACjC;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IAEAkF,SAAA,CAAUpC,OAAO,CAAC4C,GAAA;MAAA;MAAA5F,aAAA,GAAAC,CAAA;MACd,IAAI4F,SAAA;MAAA;MAAA,CAAA7F,aAAA,GAAAE,CAAA,QAAY;MAChB,IAAI4F,gBAAA;MAAA;MAAA,CAAA9F,aAAA,GAAAE,CAAA,QAAmB,WAAW0F,GAAA,CAAIH,MAAM,OAAOG,GAAA,CAAIL,MAAM,EAAE;MAC/D,IAAIQ,iBAAA;MAAA;MAAA,CAAA/F,aAAA,GAAAE,CAAA,QAAwCyC,SAAA;MAC5C,IAAIqD,aAAA;MAAA;MAAA,CAAAhG,aAAA,GAAAE,CAAA,QAAgB0F,GAAA,CAAI/B,OAAO;MAC/B;MAAA;MAAA7D,aAAA,GAAAE,CAAA;MAEA;MAAI;MAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAqF,GAAA,CAAIH,MAAM,KAAK;MAAA;MAAA,CAAAzF,aAAA,GAAAO,CAAA,WAAoB,OAAOqF,GAAA,CAAI/B,OAAO,KAAK;MAAA;MAAA,CAAA7D,aAAA,GAAAO,CAAA,WAAYqF,GAAA,CAAI/B,OAAO,KAAK,OAAM;QAAA;QAAA7D,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAC5F2F,SAAA,GAAY;QACZ,MAAMI,OAAA;QAAA;QAAA,CAAAjG,aAAA,GAAAE,CAAA,QAAUsC,MAAA,CAAO0D,OAAO,CAACN,GAAA,CAAI/B,OAAO,EACrCsC,GAAG,CAAC,CAAC,CAACC,GAAA,EAAKC,KAAA,CAAM,KAAK;UAAA;UAAArG,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAE,CAAA;UAAA,cAAOkG,GAAA,MAASC,KAAA,CAAMC,GAAG,SAASD,KAAA,CAAME,GAAG,GAAG;QAAD,CAAC,EACpEC,IAAI,CAAC;QAAA;QAAAxG,aAAA,GAAAE,CAAA;QACV4F,gBAAA,GAAmB,6BAA6BG,OAAA,EAAS;QAAA;QAAAjG,aAAA,GAAAE,CAAA;QACzD8F,aAAA,GAAgBJ,GAAA,CAAI/B,OAAO,EAAE;MACjC,OAAO;QAAA;QAAA7D,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAE,CAAA;QAAA;QAAI;QAAA,CAAAF,aAAA,GAAAO,CAAA,WAAAqF,GAAA,CAAIH,MAAM,KAAK;QAAA;QAAA,CAAAzF,aAAA,GAAAO,CAAA,WAAmB,OAAOqF,GAAA,CAAI/B,OAAO,KAAK;QAAA;QAAA,CAAA7D,aAAA,GAAAO,CAAA,WAAYqF,GAAA,CAAI/B,OAAO,KAAK,OAAM;UAAA;UAAA7D,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAE,CAAA;UAClG2F,SAAA,GAAY;UACZ,MAAMY,UAAA;UAAA;UAAA,CAAAzG,aAAA,GAAAE,CAAA,QAAa0F,GAAA,CAAI/B,OAAO,GAAS;UAAA;UAAA7D,aAAA,GAAAE,CAAA;UACvC6F,iBAAA;UAAoB;UAAA,CAAA/F,aAAA,GAAAO,CAAA,WAAAkG,UAAA,CAAWnD,QAAQ;UAAA;UAAA,CAAAtD,aAAA,GAAAO,CAAA,WAAI;UAAA;UAAAP,aAAA,GAAAE,CAAA;UAC3C4F,gBAAA,GAAmB,SAASC,iBAAA,6BAA8CU,UAAA,CAAWrC,MAAM,EAAE;UAAA;UAAApE,aAAA,GAAAE,CAAA;UAC7F8F,aAAA,GAAgBS,UAAA;QACpB;QAAA;QAAA;UAAAzG,aAAA,GAAAO,CAAA;QAAA;MAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAEA6B,SAAA,CAAUmB,IAAI,CAAC;QACXC,SAAA,EAAWyC,GAAA,CAAIrD,SAAS;QACxBa,IAAA,EAAMyC,SAAA;QACNxC,WAAA,EAAayC,gBAAA;QACbpC,cAAA,EAAgBqC,iBAAA;QAChB3B,MAAA;QAAQ;QAAA,CAAApE,aAAA,GAAAO,CAAA,WAAAqF,GAAC,CAAI/B,OAAO,EAAUO,MAAA;QAAA;QAAA,CAAApE,aAAA,GAAAO,CAAA,WAAUoC,SAAA;QACxCmC,MAAA;QAAQ;QAAA,CAAA9E,aAAA,GAAAO,CAAA,WAAAqF,GAAA,CAAId,MAAM;QAAA;QAAA,CAAA9E,aAAA,GAAAO,CAAA,WAAIoC,SAAA;QACtB;QACAgB,iBAAA,EAAmB,aAAaiC,GAAA,CAAIvF,EAAE,EAAE;QACxCwD,OAAA,EAASmC;MACb;IACJ;IAEA;IACA,MAAMU,cAAA;IAAA;IAAA,CAAA1G,aAAA,GAAAE,CAAA,QAAiBmB,gBAAA,CAAiBqB,MAAM,GAAG;IAAA;IAAA,CAAA1C,aAAA,GAAAO,CAAA,WAC3CwB,SAAA,CAAU4E,MAAM,CAACC,KAAA,IAAS;MAAA;MAAA5G,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAAA,OAAAmB,gBAAA,CAAiBwF,QAAQ,CAACD,KAAA,CAAMxD,IAAI;IAAA;IAAA;IAAA,CAAApD,aAAA,GAAAO,CAAA,WAC9DwB,SAAA;IAEN;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IACAwG,cAAA,CAAeI,IAAI,CAAC,CAACC,CAAA,EAAGxG,CAAA,KAAM;MAAA;MAAAP,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAAA,OAAAK,CAAA,CAAE4C,SAAS,CAAC6D,OAAO,KAAKD,CAAA,CAAE5D,SAAS,CAAC6D,OAAO;IAAA;IAAA;IAAAhH,aAAA,GAAAE,CAAA;IAEzE,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEC,OAAA,EAAS;MAAMsG,IAAA,EAAMP;IAAe;EAEnE,EAAE,OAAOQ,KAAA,EAAO;IAAA;IAAAlH,aAAA,GAAAE,CAAA;IACZiH,OAAA,CAAQD,KAAK,CAAC,iDAAiDnH,MAAA,CAAOM,EAAE,GAAG,EAAE6G,KAAA;IAC7E,MAAMtG,OAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAUgH,KAAA,YAAiBE,KAAA;IAAA;IAAA,CAAApH,aAAA,GAAAO,CAAA,WAAQ2G,KAAA,CAAMtG,OAAO;IAAA;IAAA,CAAAZ,aAAA,GAAAO,CAAA,WAAG;IAAA;IAAAP,aAAA,GAAAE,CAAA;IACzD,OAAOM,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEC,OAAA,EAAS;MAAOC,OAAA,EAAS;MAAmCiD,OAAA,EAASjD;IAAQ,GAAG;MAAEC,MAAA,EAAQ;IAAI;EAC7H;AACJ","ignoreList":[]}