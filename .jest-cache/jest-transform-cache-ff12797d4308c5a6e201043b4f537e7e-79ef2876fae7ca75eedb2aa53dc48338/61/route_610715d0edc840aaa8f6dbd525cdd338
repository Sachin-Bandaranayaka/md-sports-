4539038af1ca044e47e5174fda07da27
"use strict";

/* istanbul ignore next */
function cov_22e3dojtpp() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts";
  var hash = "129dc7a39bdf921e22f41bdfd56e559a7502ffc4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 12,
          column: 78
        }
      },
      "5": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 90
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "7": {
        start: {
          line: 15,
          column: 39
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "8": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "9": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "12": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "14": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "16": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "17": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "18": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 30
        }
      },
      "19": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "20": {
        start: {
          line: 38,
          column: 32
        },
        end: {
          line: 38,
          column: 88
        }
      },
      "21": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "22": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "23": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 95
        }
      },
      "24": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "25": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 57
        }
      },
      "26": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "27": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "28": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "29": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 31
        }
      },
      "30": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 18
        }
      },
      "31": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "32": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 57,
          column: 37
        }
      },
      "33": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 58,
          column: 40
        }
      },
      "34": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "35": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "36": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 73,
          column: 70
        }
      },
      "37": {
        start: {
          line: 68,
          column: 54
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "38": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "39": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "40": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 40
        }
      },
      "41": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 69
        }
      },
      "42": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "43": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 87,
          column: 62
        }
      },
      "44": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "45": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 52
        }
      },
      "46": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 47
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 18,
            column: 40
          }
        },
        loc: {
          start: {
            line: 18,
            column: 61
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 34
          }
        },
        loc: {
          start: {
            line: 22,
            column: 53
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 55,
            column: 15
          },
          end: {
            line: 55,
            column: 19
          }
        },
        loc: {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 68,
            column: 50
          },
          end: {
            line: 68,
            column: 51
          }
        },
        loc: {
          start: {
            line: 68,
            column: 54
          },
          end: {
            line: 73,
            column: 14
          }
        },
        line: 68
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 19,
            column: 45
          }
        }, {
          start: {
            line: 19,
            column: 48
          },
          end: {
            line: 19,
            column: 65
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 20
          }
        }, {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 23,
            column: 27
          }
        }, {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 23,
            column: 45
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 20
          }
        }, {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 47
          }
        }, {
          start: {
            line: 26,
            column: 51
          },
          end: {
            line: 26,
            column: 76
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "7": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 31
          }
        }],
        line: 32
      },
      "8": {
        loc: {
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 53
          }
        }, {
          start: {
            line: 38,
            column: 57
          },
          end: {
            line: 38,
            column: 88
          }
        }],
        line: 38
      },
      "9": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "10": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 29
          }
        }, {
          start: {
            line: 40,
            column: 33
          },
          end: {
            line: 40,
            column: 79
          }
        }],
        line: 40
      },
      "11": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 47
          },
          end: {
            line: 41,
            column: 88
          }
        }, {
          start: {
            line: 41,
            column: 91
          },
          end: {
            line: 41,
            column: 95
          }
        }],
        line: 41
      },
      "12": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 46,
            column: 13
          }
        }],
        line: 42
      },
      "13": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 20
          }
        }, {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 42,
            column: 33
          }
        }, {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 42,
            column: 45
          }
        }],
        line: 42
      },
      "14": {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "15": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "16": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 18
          }
        }, {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 31
          }
        }],
        line: 59
      },
      "17": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as bcrypt from 'bcryptjs';\nimport prisma, { safeQuery } from '@/lib/prisma';\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Try to find the user directly from the database with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                }\n            }),\n            null,\n            'Failed to find user during login verification'\n        );\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found',\n                email\n            });\n        }\n\n        // Get stored password hash\n        const storedHash = user.password;\n\n        // Test with the provided password\n        const isMatch = await bcrypt.compare(password, storedHash);\n\n        // Hash a new password for comparison\n        const salt = await bcrypt.genSalt(10);\n        const newHash = await bcrypt.hash('password', salt);\n\n        return NextResponse.json({\n            success: true,\n            userFound: true,\n            passwordMatch: isMatch,\n            userInfo: {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                storedPasswordHash: storedHash,\n                newGeneratedHash: newHash,\n                passwordCompareResult: isMatch\n            }\n        });\n    } catch (error) {\n        console.error('Verify login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Verification failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["POST", "req", "body", "json", "email", "password", "NextResponse", "success", "message", "status", "user", "safeQuery", "prisma", "findFirst", "where", "isActive", "storedHash", "isMatch", "bcrypt", "compare", "salt", "genSalt", "newHash", "hash", "userFound", "passwordMatch", "userInfo", "id", "name", "storedPasswordHash", "newGeneratedHash", "passwordCompareResult", "error", "console"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;kEAClB;gEACU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,eAAeA,KAAKC,GAAgB;IACvC,IAAI;QACA,MAAMC,OAAO,MAAMD,IAAIE,IAAI;QAC3B,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAE5B,IAAI,CAACE,SAAS,CAACC,UAAU;YACrB,OAAOC,oBAAY,CAACH,IAAI,CACpB;gBAAEI,SAAS;gBAAOC,SAAS;YAAkC,GAC7D;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,mEAAmE;QACnE,MAAMC,OAAO,MAAMC,IAAAA,iBAAS,EACxB,IAAMC,eAAM,CAACF,IAAI,CAACG,SAAS,CAAC;gBACxBC,OAAO;oBACHV,OAAOA;oBACPW,UAAU;gBACd;YACJ,IACA,MACA;QAGJ,IAAI,CAACL,MAAM;YACP,OAAOJ,oBAAY,CAACH,IAAI,CAAC;gBACrBI,SAAS;gBACTC,SAAS;gBACTJ;YACJ;QACJ;QAEA,2BAA2B;QAC3B,MAAMY,aAAaN,KAAKL,QAAQ;QAEhC,kCAAkC;QAClC,MAAMY,UAAU,MAAMC,UAAOC,OAAO,CAACd,UAAUW;QAE/C,qCAAqC;QACrC,MAAMI,OAAO,MAAMF,UAAOG,OAAO,CAAC;QAClC,MAAMC,UAAU,MAAMJ,UAAOK,IAAI,CAAC,YAAYH;QAE9C,OAAOd,oBAAY,CAACH,IAAI,CAAC;YACrBI,SAAS;YACTiB,WAAW;YACXC,eAAeR;YACfS,UAAU;gBACNC,IAAIjB,KAAKiB,EAAE;gBACXC,MAAMlB,KAAKkB,IAAI;gBACfxB,OAAOM,KAAKN,KAAK;gBACjByB,oBAAoBb;gBACpBc,kBAAkBR;gBAClBS,uBAAuBd;YAC3B;QACJ;IACJ,EAAE,OAAOe,OAAO;QACZC,QAAQD,KAAK,CAAC,uBAAuBA;QACrC,OAAO1B,oBAAY,CAACH,IAAI,CACpB;YAAEI,SAAS;YAAOC,SAAS;YAAuBwB,OAAO,AAACA,MAAgBxB,OAAO;QAAC,GAClF;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "129dc7a39bdf921e22f41bdfd56e559a7502ffc4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22e3dojtpp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22e3dojtpp();
cov_22e3dojtpp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22e3dojtpp().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_22e3dojtpp().f[0]++;
    cov_22e3dojtpp().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_22e3dojtpp().s[3]++, require("next/server"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[4]++, _interop_require_wildcard(require("bcryptjs")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_22e3dojtpp().s[5]++, _interop_require_wildcard(require("../../../../lib/prisma")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[1]++;
  cov_22e3dojtpp().s[6]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[0][0]++;
    cov_22e3dojtpp().s[7]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[8]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[9]++, new WeakMap());
  /* istanbul ignore next */
  cov_22e3dojtpp().s[10]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_22e3dojtpp().f[2]++;
    cov_22e3dojtpp().s[11]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[3]++;
  cov_22e3dojtpp().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[2][0]++;
    cov_22e3dojtpp().s[13]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[2][1]++;
  }
  cov_22e3dojtpp().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[4][0]++;
    cov_22e3dojtpp().s[15]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[16]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_22e3dojtpp().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[6][0]++;
    cov_22e3dojtpp().s[18]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[19]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_22e3dojtpp().s[20]++,
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_22e3dojtpp().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_22e3dojtpp().s[21]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_22e3dojtpp().s[23]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[11][1]++, null));
      /* istanbul ignore next */
      cov_22e3dojtpp().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_22e3dojtpp().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_22e3dojtpp().b[12][0]++;
        cov_22e3dojtpp().s[25]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_22e3dojtpp().b[12][1]++;
        cov_22e3dojtpp().s[26]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_22e3dojtpp().s[27]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_22e3dojtpp().s[28]++;
  if (cache) {
    /* istanbul ignore next */
    cov_22e3dojtpp().b[14][0]++;
    cov_22e3dojtpp().s[29]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_22e3dojtpp().b[14][1]++;
  }
  cov_22e3dojtpp().s[30]++;
  return newObj;
}
async function POST(req) {
  /* istanbul ignore next */
  cov_22e3dojtpp().f[4]++;
  cov_22e3dojtpp().s[31]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[32]++, await req.json());
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[33]++, body);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[16][0]++, !email) ||
    /* istanbul ignore next */
    (cov_22e3dojtpp().b[16][1]++, !password)) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[15][0]++;
      cov_22e3dojtpp().s[35]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email and password are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[15][1]++;
    }
    // Try to find the user directly from the database with retry logic
    const user =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[36]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_22e3dojtpp().f[5]++;
      cov_22e3dojtpp().s[37]++;
      return _prisma.default.user.findFirst({
        where: {
          email: email,
          isActive: true
        }
      });
    }, null, "Failed to find user during login verification"));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[38]++;
    if (!user) {
      /* istanbul ignore next */
      cov_22e3dojtpp().b[17][0]++;
      cov_22e3dojtpp().s[39]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found",
        email
      });
    } else
    /* istanbul ignore next */
    {
      cov_22e3dojtpp().b[17][1]++;
    }
    // Get stored password hash
    const storedHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[40]++, user.password);
    // Test with the provided password
    const isMatch =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[41]++, await _bcryptjs.compare(password, storedHash));
    // Hash a new password for comparison
    const salt =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[42]++, await _bcryptjs.genSalt(10));
    const newHash =
    /* istanbul ignore next */
    (cov_22e3dojtpp().s[43]++, await _bcryptjs.hash("password", salt));
    /* istanbul ignore next */
    cov_22e3dojtpp().s[44]++;
    return _server.NextResponse.json({
      success: true,
      userFound: true,
      passwordMatch: isMatch,
      userInfo: {
        id: user.id,
        name: user.name,
        email: user.email,
        storedPasswordHash: storedHash,
        newGeneratedHash: newHash,
        passwordCompareResult: isMatch
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_22e3dojtpp().s[45]++;
    console.error("Verify login error:", error);
    /* istanbul ignore next */
    cov_22e3dojtpp().s[46]++;
    return _server.NextResponse.json({
      success: false,
      message: "Verification failed",
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,