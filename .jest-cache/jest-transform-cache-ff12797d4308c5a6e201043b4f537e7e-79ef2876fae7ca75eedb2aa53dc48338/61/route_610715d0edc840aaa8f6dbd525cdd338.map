{"version":3,"names":["POST","req","cov_22e3dojtpp","f","s","body","json","email","password","b","_server","NextResponse","success","message","status","user","_prisma","safeQuery","default","findFirst","where","isActive","storedHash","isMatch","_bcryptjs","compare","salt","genSalt","newHash","hash","userFound","passwordMatch","userInfo","id","name","storedPasswordHash","newGeneratedHash","passwordCompareResult","error","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/verify-login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as bcrypt from 'bcryptjs';\nimport prisma, { safeQuery } from '@/lib/prisma';\n\nexport async function POST(req: NextRequest) {\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        if (!email || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Try to find the user directly from the database with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                }\n            }),\n            null,\n            'Failed to find user during login verification'\n        );\n\n        if (!user) {\n            return NextResponse.json({\n                success: false,\n                message: 'User not found',\n                email\n            });\n        }\n\n        // Get stored password hash\n        const storedHash = user.password;\n\n        // Test with the provided password\n        const isMatch = await bcrypt.compare(password, storedHash);\n\n        // Hash a new password for comparison\n        const salt = await bcrypt.genSalt(10);\n        const newHash = await bcrypt.hash('password', salt);\n\n        return NextResponse.json({\n            success: true,\n            userFound: true,\n            passwordMatch: isMatch,\n            userInfo: {\n                id: user.id,\n                name: user.name,\n                email: user.email,\n                storedPasswordHash: storedHash,\n                newGeneratedHash: newHash,\n                passwordCompareResult: isMatch\n            }\n        });\n    } catch (error) {\n        console.error('Verify login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Verification failed', error: (error as Error).message },\n            { status: 500 }\n        );\n    }\n}"],"mappingssB;;;;;;WAAAA,IAAA;;;;;kCAJoB;;;yEAClB;;;yEACU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,eAAeA,KAAKC,GAAgB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACvC,IAAI;IACA,MAAMC,IAAA;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,QAAO,MAAMH,GAAA,CAAIK,IAAI;IAC3B,MAAM;MAAEC,KAAK;MAAEC;IAAQ,CAAE;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,QAAGC,IAAA;IAAA;IAAAH,cAAA,GAAAE,CAAA;IAE5B;IAAI;IAAA,CAAAF,cAAA,GAAAO,CAAA,YAACF,KAAA;IAAA;IAAA,CAAAL,cAAA,GAAAO,CAAA,WAAS,CAACD,QAAA,GAAU;MAAA;MAAAN,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MACrB,OAAOM,OAAA,CAAAC,YAAY,CAACL,IAAI,CACpB;QAAEM,OAAA,EAAS;QAAOC,OAAA,EAAS;MAAkC,GAC7D;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAZ,cAAA,GAAAO,CAAA;IAAA;IAEA;IACA,MAAMM,IAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAO,MAAM,IAAAY,OAAA,CAAAC,SAAS,EACxB,MAAM;MAAA;MAAAf,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAY,OAAA,CAAAE,OAAM,CAACH,IAAI,CAACI,SAAS,CAAC;QACxBC,KAAA,EAAO;UACHb,KAAA,EAAOA,KAAA;UACPc,QAAA,EAAU;QACd;MACJ;IAAA,GACA,MACA;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IAGJ,IAAI,CAACW,IAAA,EAAM;MAAA;MAAAb,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MACP,OAAOM,OAAA,CAAAC,YAAY,CAACL,IAAI,CAAC;QACrBM,OAAA,EAAS;QACTC,OAAA,EAAS;QACTN;MACJ;IACJ;IAAA;IAAA;MAAAL,cAAA,GAAAO,CAAA;IAAA;IAEA;IACA,MAAMa,UAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAaW,IAAA,CAAKP,QAAQ;IAEhC;IACA,MAAMe,OAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAU,MAAMoB,SAAA,CAAOC,OAAO,CAACjB,QAAA,EAAUc,UAAA;IAE/C;IACA,MAAMI,IAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAO,MAAMoB,SAAA,CAAOG,OAAO,CAAC;IAClC,MAAMC,OAAA;IAAA;IAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAU,MAAMoB,SAAA,CAAOK,IAAI,CAAC,YAAYH,IAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAE9C,OAAOM,OAAA,CAAAC,YAAY,CAACL,IAAI,CAAC;MACrBM,OAAA,EAAS;MACTkB,SAAA,EAAW;MACXC,aAAA,EAAeR,OAAA;MACfS,QAAA,EAAU;QACNC,EAAA,EAAIlB,IAAA,CAAKkB,EAAE;QACXC,IAAA,EAAMnB,IAAA,CAAKmB,IAAI;QACf3B,KAAA,EAAOQ,IAAA,CAAKR,KAAK;QACjB4B,kBAAA,EAAoBb,UAAA;QACpBc,gBAAA,EAAkBR,OAAA;QAClBS,qBAAA,EAAuBd;MAC3B;IACJ;EACJ,EAAE,OAAOe,KAAA,EAAO;IAAA;IAAApC,cAAA,GAAAE,CAAA;IACZmC,OAAA,CAAQD,KAAK,CAAC,uBAAuBA,KAAA;IAAA;IAAApC,cAAA,GAAAE,CAAA;IACrC,OAAOM,OAAA,CAAAC,YAAY,CAACL,IAAI,CACpB;MAAEM,OAAA,EAAS;MAAOC,OAAA,EAAS;MAAuByB,KAAA,EAAOA,KAAC,CAAgBzB;IAAQ,GAClF;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}