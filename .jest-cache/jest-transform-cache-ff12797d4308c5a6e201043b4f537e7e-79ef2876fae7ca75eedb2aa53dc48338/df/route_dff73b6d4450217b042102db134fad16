63fd3670a68c529ae5ed8e206b1e9517
"use strict";

/* istanbul ignore next */
function cov_8ko9wrib9() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/optimized/route.ts";
  var hash = "4560f51c080b2be9f401415506f5a48e5c3e073d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/optimized/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "9": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "10": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 49
        }
      },
      "11": {
        start: {
          line: 30,
          column: 14
        },
        end: {
          line: 30,
          column: 45
        }
      },
      "12": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 47
        }
      },
      "13": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "14": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "15": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "16": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 35,
          column: 22
        }
      },
      "17": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "18": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 74
        }
      },
      "19": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "20": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 64
        }
      },
      "21": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 58,
          column: 50
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "23": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "24": {
        start: {
          line: 69,
          column: 18
        },
        end: {
          line: 69,
          column: 20
        }
      },
      "25": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "26": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 30
        }
      },
      "27": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "29": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "30": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 52
        }
      },
      "31": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "32": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 56
        }
      },
      "33": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "34": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "35": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "36": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 39
        }
      },
      "37": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 53
        }
      },
      "38": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "39": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 30
        }
      },
      "40": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "41": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 87
        }
      },
      "42": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "43": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 78
        }
      },
      "44": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 22
        }
      },
      "45": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 75
        }
      },
      "46": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 22
        }
      },
      "47": {
        start: {
          line: 126,
          column: 37
        },
        end: {
          line: 126,
          column: 71
        }
      },
      "48": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 73
        }
      },
      "49": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "50": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 62
        }
      },
      "51": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 22
        }
      },
      "52": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 40
        }
      },
      "53": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "54": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "55": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "56": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 14
        }
      },
      "57": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "58": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "59": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "60": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "61": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "62": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "63": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 60
        }
      },
      "64": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 265,
          column: 36
        }
      },
      "65": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "66": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "67": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 194,
          column: 17
        }
      },
      "68": {
        start: {
          line: 195,
          column: 26
        },
        end: {
          line: 195,
          column: 35
        }
      },
      "69": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 202,
          column: 14
        }
      },
      "70": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 97
        }
      },
      "71": {
        start: {
          line: 206,
          column: 97
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "72": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "73": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 276,
          column: 7
        }
      },
      "74": {
        start: {
          line: 279,
          column: 22
        },
        end: {
          line: 279,
          column: 52
        }
      },
      "75": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 462,
          column: 5
        }
      },
      "76": {
        start: {
          line: 281,
          column: 22
        },
        end: {
          line: 281,
          column: 54
        }
      },
      "77": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "78": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 287,
          column: 15
        }
      },
      "79": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 289,
          column: 59
        }
      },
      "80": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "81": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "82": {
        start: {
          line: 297,
          column: 33
        },
        end: {
          line: 297,
          column: 53
        }
      },
      "83": {
        start: {
          line: 298,
          column: 24
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "84": {
        start: {
          line: 310,
          column: 26
        },
        end: {
          line: 317,
          column: 10
        }
      },
      "85": {
        start: {
          line: 318,
          column: 24
        },
        end: {
          line: 318,
          column: 54
        }
      },
      "86": {
        start: {
          line: 318,
          column: 44
        },
        end: {
          line: 318,
          column: 53
        }
      },
      "87": {
        start: {
          line: 319,
          column: 23
        },
        end: {
          line: 319,
          column: 49
        }
      },
      "88": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "89": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 325,
          column: 15
        }
      },
      "90": {
        start: {
          line: 328,
          column: 25
        },
        end: {
          line: 333,
          column: 12
        }
      },
      "91": {
        start: {
          line: 335,
          column: 29
        },
        end: {
          line: 335,
          column: 61
        }
      },
      "92": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "93": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "94": {
        start: {
          line: 344,
          column: 22
        },
        end: {
          line: 344,
          column: 55
        }
      },
      "95": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "96": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "97": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "98": {
        start: {
          line: 352,
          column: 31
        },
        end: {
          line: 352,
          column: 58
        }
      },
      "99": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "100": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 366,
          column: 18
        }
      },
      "101": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 52
        }
      },
      "102": {
        start: {
          line: 371,
          column: 51
        },
        end: {
          line: 421,
          column: 10
        }
      },
      "103": {
        start: {
          line: 423,
          column: 24
        },
        end: {
          line: 423,
          column: 55
        }
      },
      "104": {
        start: {
          line: 424,
          column: 31
        },
        end: {
          line: 424,
          column: 73
        }
      },
      "105": {
        start: {
          line: 426,
          column: 27
        },
        end: {
          line: 426,
          column: 184
        }
      },
      "106": {
        start: {
          line: 428,
          column: 34
        },
        end: {
          line: 441,
          column: 10
        }
      },
      "107": {
        start: {
          line: 429,
          column: 30
        },
        end: {
          line: 429,
          column: 94
        }
      },
      "108": {
        start: {
          line: 429,
          column: 70
        },
        end: {
          line: 429,
          column: 90
        }
      },
      "109": {
        start: {
          line: 430,
          column: 30
        },
        end: {
          line: 430,
          column: 68
        }
      },
      "110": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 440,
          column: 14
        }
      },
      "111": {
        start: {
          line: 442,
          column: 23
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "112": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 76
        }
      },
      "113": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 49
        }
      },
      "114": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 57
        }
      },
      "115": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 461,
          column: 11
        }
      },
      "116": {
        start: {
          line: 465,
          column: 4
        },
        end: {
          line: 559,
          column: 5
        }
      },
      "117": {
        start: {
          line: 466,
          column: 22
        },
        end: {
          line: 466,
          column: 54
        }
      },
      "118": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "119": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 472,
          column: 15
        }
      },
      "120": {
        start: {
          line: 474,
          column: 24
        },
        end: {
          line: 474,
          column: 59
        }
      },
      "121": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "122": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 480,
          column: 15
        }
      },
      "123": {
        start: {
          line: 482,
          column: 21
        },
        end: {
          line: 482,
          column: 41
        }
      },
      "124": {
        start: {
          line: 483,
          column: 48
        },
        end: {
          line: 483,
          column: 52
        }
      },
      "125": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "126": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 489,
          column: 15
        }
      },
      "127": {
        start: {
          line: 492,
          column: 26
        },
        end: {
          line: 499,
          column: 10
        }
      },
      "128": {
        start: {
          line: 500,
          column: 24
        },
        end: {
          line: 500,
          column: 54
        }
      },
      "129": {
        start: {
          line: 500,
          column: 44
        },
        end: {
          line: 500,
          column: 53
        }
      },
      "130": {
        start: {
          line: 501,
          column: 25
        },
        end: {
          line: 513,
          column: 10
        }
      },
      "131": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 520,
          column: 9
        }
      },
      "132": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 519,
          column: 15
        }
      },
      "133": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 543,
          column: 9
        }
      },
      "134": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 526,
          column: 19
        }
      },
      "135": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 22
        }
      },
      "136": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 535,
          column: 19
        }
      },
      "137": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 536,
          column: 22
        }
      },
      "138": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 542,
          column: 19
        }
      },
      "139": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 545,
          column: 59
        }
      },
      "140": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 69
        }
      },
      "141": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 551,
          column: 11
        }
      },
      "142": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 57
        }
      },
      "143": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 558,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 12
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 13
          },
          end: {
            line: 18,
            column: 14
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 18
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 13
          },
          end: {
            line: 24,
            column: 14
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "createCursor",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 21
          }
        },
        loc: {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 52
      },
      "7": {
        name: "parseCursor",
        decl: {
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 20
          }
        },
        loc: {
          start: {
            line: 55,
            column: 29
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 55
      },
      "8": {
        name: "buildWhereClause",
        decl: {
          start: {
            line: 68,
            column: 9
          },
          end: {
            line: 68,
            column: 25
          }
        },
        loc: {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 68
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 103,
            column: 17
          },
          end: {
            line: 103,
            column: 18
          }
        },
        loc: {
          start: {
            line: 103,
            column: 30
          },
          end: {
            line: 109,
            column: 9
          }
        },
        line: 103
      },
      "10": {
        name: "buildOrderBy",
        decl: {
          start: {
            line: 141,
            column: 9
          },
          end: {
            line: 141,
            column: 21
          }
        },
        loc: {
          start: {
            line: 141,
            column: 30
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 141
      },
      "11": {
        name: "getStatistics",
        decl: {
          start: {
            line: 177,
            column: 15
          },
          end: {
            line: 177,
            column: 28
          }
        },
        loc: {
          start: {
            line: 177,
            column: 37
          },
          end: {
            line: 266,
            column: 1
          }
        },
        line: 177
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 179,
            column: 43
          },
          end: {
            line: 179,
            column: 44
          }
        },
        loc: {
          start: {
            line: 179,
            column: 53
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 179
      },
      "13": {
        name: "bulkUpdateInvoices",
        decl: {
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 33
          }
        },
        loc: {
          start: {
            line: 268,
            column: 55
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 268
      },
      "14": {
        name: "GET",
        decl: {
          start: {
            line: 278,
            column: 15
          },
          end: {
            line: 278,
            column: 18
          }
        },
        loc: {
          start: {
            line: 278,
            column: 28
          },
          end: {
            line: 463,
            column: 1
          }
        },
        line: 278
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 318,
            column: 38
          },
          end: {
            line: 318,
            column: 39
          }
        },
        loc: {
          start: {
            line: 318,
            column: 44
          },
          end: {
            line: 318,
            column: 53
          }
        },
        line: 318
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 428,
            column: 53
          },
          end: {
            line: 428,
            column: 54
          }
        },
        loc: {
          start: {
            line: 428,
            column: 64
          },
          end: {
            line: 441,
            column: 9
          }
        },
        line: 428
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 429,
            column: 54
          },
          end: {
            line: 429,
            column: 55
          }
        },
        loc: {
          start: {
            line: 429,
            column: 70
          },
          end: {
            line: 429,
            column: 90
          }
        },
        line: 429
      },
      "18": {
        name: "PATCH",
        decl: {
          start: {
            line: 464,
            column: 15
          },
          end: {
            line: 464,
            column: 20
          }
        },
        loc: {
          start: {
            line: 464,
            column: 30
          },
          end: {
            line: 560,
            column: 1
          }
        },
        line: 464
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 500,
            column: 38
          },
          end: {
            line: 500,
            column: 39
          }
        },
        loc: {
          start: {
            line: 500,
            column: 44
          },
          end: {
            line: 500,
            column: 53
          }
        },
        line: 500
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 54
          }
        }, {
          start: {
            line: 100,
            column: 58
          },
          end: {
            line: 100,
            column: 67
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 112,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 112,
            column: 26
          }
        }, {
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 112,
            column: 58
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 118,
            column: 22
          }
        }, {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 22
          }
        }, {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 124,
            column: 22
          }
        }, {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 128,
            column: 22
          }
        }, {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 22
          }
        }, {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 133,
            column: 40
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 146,
            column: 14
          }
        }, {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 150,
            column: 14
          }
        }, {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 154,
            column: 14
          }
        }, {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 160,
            column: 14
          }
        }, {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 164,
            column: 14
          }
        }, {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 168,
            column: 14
          }
        }, {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 169,
            column: 22
          }
        }, {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 14
          }
        }],
        line: 142
      },
      "11": {
        loc: {
          start: {
            line: 178,
            column: 43
          },
          end: {
            line: 178,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 43
          },
          end: {
            line: 178,
            column: 49
          }
        }, {
          start: {
            line: 178,
            column: 53
          },
          end: {
            line: 178,
            column: 58
          }
        }],
        line: 178
      },
      "12": {
        loc: {
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 182,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 37
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 14
          }
        }],
        line: 180
      },
      "13": {
        loc: {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 31
          },
          end: {
            line: 193,
            column: 61
          }
        }, {
          start: {
            line: 193,
            column: 64
          },
          end: {
            line: 193,
            column: 66
          }
        }],
        line: 193
      },
      "14": {
        loc: {
          start: {
            line: 197,
            column: 34
          },
          end: {
            line: 197,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 34
          },
          end: {
            line: 197,
            column: 69
          }
        }, {
          start: {
            line: 197,
            column: 73
          },
          end: {
            line: 197,
            column: 74
          }
        }],
        line: 197
      },
      "15": {
        loc: {
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 198,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 198,
            column: 64
          }
        }, {
          start: {
            line: 198,
            column: 68
          },
          end: {
            line: 198,
            column: 69
          }
        }],
        line: 198
      },
      "16": {
        loc: {
          start: {
            line: 199,
            column: 30
          },
          end: {
            line: 199,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 30
          },
          end: {
            line: 199,
            column: 59
          }
        }, {
          start: {
            line: 199,
            column: 63
          },
          end: {
            line: 199,
            column: 64
          }
        }],
        line: 199
      },
      "17": {
        loc: {
          start: {
            line: 200,
            column: 34
          },
          end: {
            line: 200,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 34
          },
          end: {
            line: 200,
            column: 70
          }
        }, {
          start: {
            line: 200,
            column: 74
          },
          end: {
            line: 200,
            column: 75
          }
        }],
        line: 200
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 37
          },
          end: {
            line: 201,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 37
          },
          end: {
            line: 201,
            column: 77
          }
        }, {
          start: {
            line: 201,
            column: 81
          },
          end: {
            line: 201,
            column: 82
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 258,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 258,
            column: 61
          }
        }, {
          start: {
            line: 258,
            column: 65
          },
          end: {
            line: 258,
            column: 66
          }
        }],
        line: 258
      },
      "20": {
        loc: {
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 259,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 259,
            column: 55
          }
        }, {
          start: {
            line: 259,
            column: 59
          },
          end: {
            line: 259,
            column: 60
          }
        }],
        line: 259
      },
      "21": {
        loc: {
          start: {
            line: 261,
            column: 34
          },
          end: {
            line: 261,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 34
          },
          end: {
            line: 261,
            column: 56
          }
        }, {
          start: {
            line: 261,
            column: 60
          },
          end: {
            line: 261,
            column: 61
          }
        }],
        line: 261
      },
      "22": {
        loc: {
          start: {
            line: 262,
            column: 37
          },
          end: {
            line: 262,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 37
          },
          end: {
            line: 262,
            column: 62
          }
        }, {
          start: {
            line: 262,
            column: 66
          },
          end: {
            line: 262,
            column: 67
          }
        }],
        line: 262
      },
      "23": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "24": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "25": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 20
          }
        }, {
          start: {
            line: 290,
            column: 24
          },
          end: {
            line: 290,
            column: 36
          }
        }],
        line: 290
      },
      "26": {
        loc: {
          start: {
            line: 300,
            column: 37
          },
          end: {
            line: 300,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 37
          },
          end: {
            line: 300,
            column: 62
          }
        }, {
          start: {
            line: 300,
            column: 66
          },
          end: {
            line: 300,
            column: 70
          }
        }],
        line: 300
      },
      "27": {
        loc: {
          start: {
            line: 305,
            column: 24
          },
          end: {
            line: 305,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 24
          },
          end: {
            line: 305,
            column: 54
          }
        }, {
          start: {
            line: 305,
            column: 58
          },
          end: {
            line: 305,
            column: 63
          }
        }],
        line: 305
      },
      "28": {
        loc: {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 306,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 306,
            column: 46
          }
        }, {
          start: {
            line: 306,
            column: 50
          },
          end: {
            line: 306,
            column: 58
          }
        }],
        line: 306
      },
      "29": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "30": {
        loc: {
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 320,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 320,
            column: 18
          }
        }, {
          start: {
            line: 320,
            column: 22
          },
          end: {
            line: 320,
            column: 47
          }
        }],
        line: 320
      },
      "31": {
        loc: {
          start: {
            line: 330,
            column: 21
          },
          end: {
            line: 332,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 332,
            column: 23
          }
        }],
        line: 330
      },
      "32": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "33": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "34": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "35": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "36": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 416,
            column: 29
          },
          end: {
            line: 416,
            column: 47
          }
        }, {
          start: {
            line: 416,
            column: 50
          },
          end: {
            line: 418,
            column: 14
          }
        }],
        line: 416
      },
      "37": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 420,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 40
          },
          end: {
            line: 420,
            column: 61
          }
        }, {
          start: {
            line: 420,
            column: 64
          },
          end: {
            line: 420,
            column: 85
          }
        }],
        line: 420
      },
      "38": {
        loc: {
          start: {
            line: 424,
            column: 31
          },
          end: {
            line: 424,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 41
          },
          end: {
            line: 424,
            column: 62
          }
        }, {
          start: {
            line: 424,
            column: 65
          },
          end: {
            line: 424,
            column: 73
          }
        }],
        line: 424
      },
      "39": {
        loc: {
          start: {
            line: 426,
            column: 27
          },
          end: {
            line: 426,
            column: 184
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 426,
            column: 66
          },
          end: {
            line: 426,
            column: 177
          }
        }, {
          start: {
            line: 426,
            column: 180
          },
          end: {
            line: 426,
            column: 184
          }
        }],
        line: 426
      },
      "40": {
        loc: {
          start: {
            line: 426,
            column: 27
          },
          end: {
            line: 426,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 27
          },
          end: {
            line: 426,
            column: 34
          }
        }, {
          start: {
            line: 426,
            column: 38
          },
          end: {
            line: 426,
            column: 63
          }
        }],
        line: 426
      },
      "41": {
        loc: {
          start: {
            line: 446,
            column: 24
          },
          end: {
            line: 446,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 446,
            column: 41
          },
          end: {
            line: 446,
            column: 50
          }
        }, {
          start: {
            line: 446,
            column: 53
          },
          end: {
            line: 446,
            column: 63
          }
        }],
        line: 446
      },
      "42": {
        loc: {
          start: {
            line: 457,
            column: 21
          },
          end: {
            line: 457,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 457,
            column: 62
          },
          end: {
            line: 457,
            column: 75
          }
        }, {
          start: {
            line: 457,
            column: 78
          },
          end: {
            line: 457,
            column: 87
          }
        }],
        line: 457
      },
      "43": {
        loc: {
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "44": {
        loc: {
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 481,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "45": {
        loc: {
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 475,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 475,
            column: 20
          }
        }, {
          start: {
            line: 475,
            column: 24
          },
          end: {
            line: 475,
            column: 36
          }
        }],
        line: 475
      },
      "46": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "47": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 484,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 484,
            column: 22
          }
        }, {
          start: {
            line: 484,
            column: 26
          },
          end: {
            line: 484,
            column: 37
          }
        }, {
          start: {
            line: 484,
            column: 41
          },
          end: {
            line: 484,
            column: 67
          }
        }],
        line: 484
      },
      "48": {
        loc: {
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 520,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 520,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "49": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 543,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 527,
            column: 22
          }
        }, {
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 536,
            column: 22
          }
        }, {
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 542,
            column: 19
          }
        }],
        line: 522
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0, 0],
      "10": [0, 0, 0, 0, 0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0],
      "48": [0, 0],
      "49": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/optimized/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { cache } from '@/lib/cache';\nimport { cache as vercelCache } from '@/lib/cache-vercel';\nimport { performance } from '@/lib/performance';\n\n// Vercel serverless optimizations\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const maxDuration = 10;\n\n// Enhanced caching configuration\nconst CACHE_CONFIG = {\n    invoices: {\n        ttl: 60, // 1 minute for invoice list\n        staleWhileRevalidate: 300 // 5 minutes\n    },\n    statistics: {\n        ttl: 300, // 5 minutes for statistics\n        staleWhileRevalidate: 900 // 15 minutes\n    },\n    customers: {\n        ttl: 600, // 10 minutes for customers\n        staleWhileRevalidate: 1800 // 30 minutes\n    }\n};\n\n// Cursor-based pagination helper\nfunction createCursor(id: string | number, createdAt: Date): string {\n    return Buffer.from(`${id}:${createdAt.getTime()}`).toString('base64');\n}\n\nfunction parseCursor(cursor: string): { id: string; createdAt: Date } | null {\n    try {\n        const decoded = Buffer.from(cursor, 'base64').toString();\n        const [id, timestamp] = decoded.split(':');\n        return {\n            id,\n            createdAt: new Date(parseInt(timestamp))\n        };\n    } catch {\n        return null;\n    }\n}\n\n// Optimized query builder\nfunction buildWhereClause(filters: any, shopId?: string) {\n    const where: any = {};\n\n    if (shopId) {\n        where.shopId = shopId;\n    }\n\n    if (filters.status) {\n        where.status = filters.status;\n    }\n\n    if (filters.paymentMethod) {\n        where.paymentMethod = filters.paymentMethod;\n    }\n\n    if (filters.customerId) {\n        where.customerId = parseInt(filters.customerId);\n    }\n\n    if (filters.search) {\n        where.OR = [\n            { invoiceNumber: { contains: filters.search, mode: 'insensitive' } },\n            { customer: { name: { contains: filters.search, mode: 'insensitive' } } },\n            { total: { equals: parseFloat(filters.search) || undefined } }\n        ].filter(condition => {\n            // Remove invalid conditions\n            if (condition.total?.equals === undefined) {\n                delete condition.total;\n            }\n            return Object.keys(condition).length > 0;\n        });\n    }\n\n    // Time period filtering\n    if (filters.timePeriod && filters.timePeriod !== 'all') {\n        const now = new Date();\n        let startDate: Date;\n\n        switch (filters.timePeriod) {\n            case 'today':\n                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                break;\n            case 'week':\n                startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n            case 'month':\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                break;\n            case 'quarter':\n                const quarterStart = Math.floor(now.getMonth() / 3) * 3;\n                startDate = new Date(now.getFullYear(), quarterStart, 1);\n                break;\n            case 'year':\n                startDate = new Date(now.getFullYear(), 0, 1);\n                break;\n            default:\n                startDate = new Date(0);\n        }\n\n        where.createdAt = { gte: startDate };\n    }\n\n    return where;\n}\n\nfunction buildOrderBy(sortBy: string) {\n    switch (sortBy) {\n        case 'oldest':\n            return { createdAt: 'asc' };\n        case 'amount-high':\n            return { total: 'desc' };\n        case 'amount-low':\n            return { total: 'asc' };\n        case 'customer':\n            return { customer: { name: 'asc' } };\n        case 'due-date':\n            return { dueDate: 'asc' };\n        case 'due-date-desc':\n            return { dueDate: 'desc' };\n        case 'newest':\n        default:\n            return { createdAt: 'desc' };\n    }\n}\n\n// Optimized statistics query with materialized view fallback\nasync function getStatistics(shopId?: string) {\n    const cacheKey = `invoice-statistics:${shopId || 'all'}`;\n\n    return cache.getOrSet(\n        cacheKey,\n        async () => {\n            const whereClause = shopId ? { shopId } : {};\n\n            // Try to use materialized view first (if exists)\n            try {\n                const result = await prisma.$queryRaw`\n                    SELECT \n                        COALESCE(SUM(CASE WHEN LOWER(status) != 'paid' THEN total ELSE 0 END), 0) as total_outstanding,\n                        COALESCE(SUM(CASE WHEN LOWER(status) = 'paid' AND DATE_TRUNC('month', \"createdAt\") = DATE_TRUNC('month', CURRENT_DATE) THEN total ELSE 0 END), 0) as paid_this_month,\n                        COUNT(CASE WHEN status = 'overdue' THEN 1 END) as overdue_count,\n                        COALESCE(SUM(CASE WHEN \"paymentMethod\" = 'credit' THEN total ELSE 0 END), 0) as total_credit_sales,\n                        COALESCE(SUM(CASE WHEN \"paymentMethod\" != 'credit' THEN total ELSE 0 END), 0) as total_non_credit_sales\n                    FROM \"Invoice\"\n                    ${shopId ? `WHERE \"shopId\" = '${shopId}'` : ''}\n                `;\n\n                const stats = result[0] as any;\n                return {\n                    totalOutstanding: parseFloat(stats.total_outstanding) || 0,\n                    paidThisMonth: parseFloat(stats.paid_this_month) || 0,\n                    overdueCount: parseInt(stats.overdue_count) || 0,\n                    totalCreditSales: parseFloat(stats.total_credit_sales) || 0,\n                    totalNonCreditSales: parseFloat(stats.total_non_credit_sales) || 0\n                };\n            } catch (error) {\n                console.warn('Materialized view not available, falling back to aggregation queries');\n\n                // Fallback to individual queries\n                const [totalOutstanding, paidThisMonth, overdueCount, creditSales, nonCreditSales] = await Promise.all([\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, status: { not: 'paid' } },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: {\n                            ...whereClause,\n                            status: 'paid',\n                            createdAt: {\n                                gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n                            }\n                        },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.count({\n                        where: { ...whereClause, status: 'overdue' }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, paymentMethod: 'credit' },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, paymentMethod: { not: 'credit' } },\n                        _sum: { total: true }\n                    })\n                ]);\n\n                return {\n                    totalOutstanding: totalOutstanding._sum.total || 0,\n                    paidThisMonth: paidThisMonth._sum.total || 0,\n                    overdueCount,\n                    totalCreditSales: creditSales._sum.total || 0,\n                    totalNonCreditSales: nonCreditSales._sum.total || 0\n                };\n            }\n        },\n        CACHE_CONFIG.statistics.ttl\n    );\n}\n\n// Bulk operations helper\nasync function bulkUpdateInvoices(invoiceIds: string[], updates: any) {\n    return prisma.invoice.updateMany({\n        where: {\n            id: { in: invoiceIds }\n        },\n        data: updates\n    });\n}\n\nexport async function GET(request: NextRequest) {\n    const startTime = performance.now();\n\n    try {\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const filters = {\n            cursor: searchParams.get('cursor'),\n            limit: Math.min(parseInt(searchParams.get('limit') || '20'), 100),\n            status: searchParams.get('status'),\n            paymentMethod: searchParams.get('paymentMethod'),\n            customerId: searchParams.get('customerId'),\n            search: searchParams.get('search'),\n            timePeriod: searchParams.get('timePeriod') || 'all',\n            sortBy: searchParams.get('sortBy') || 'newest',\n            includeStatistics: searchParams.get('includeStatistics') === 'true'\n        };\n\n        // Get user's shop access\n        const userShops = await prisma.userShop.findMany({\n            where: { userId: payload.sub as string },\n            select: { shopId: true }\n        });\n\n        const shopIds = userShops.map(us => us.shopId);\n        const shopId = searchParams.get('shopId');\n\n        if (shopId && !shopIds.includes(shopId)) {\n            return NextResponse.json({ error: 'Access denied to this shop' }, { status: 403 });\n        }\n\n        // Build cache key\n        const cacheKey = `invoices:${JSON.stringify({ ...filters, shopIds: shopId ? [shopId] : shopIds })}`;\n\n        // Try cache first\n        const cachedResult = await cache.get(cacheKey);\n        if (cachedResult) {\n            return NextResponse.json({\n                ...cachedResult,\n                cached: true,\n                responseTime: performance.now() - startTime\n            });\n        }\n\n        // Build query conditions\n        const where = buildWhereClause(filters, shopId);\n        if (!shopId) {\n            where.shopId = { in: shopIds };\n        }\n\n        // Handle cursor-based pagination\n        if (filters.cursor) {\n            const cursorData = parseCursor(filters.cursor);\n            if (cursorData) {\n                where.OR = [\n                    {\n                        createdAt: { lt: cursorData.createdAt }\n                    },\n                    {\n                        createdAt: cursorData.createdAt,\n                        id: { lt: cursorData.id }\n                    }\n                ];\n            }\n        }\n\n        const orderBy = buildOrderBy(filters.sortBy);\n\n        // Optimized query with selective field loading\n        const [invoices, totalCount, statistics] = await Promise.all([\n            prisma.invoice.findMany({\n                where,\n                orderBy,\n                take: filters.limit + 1, // Take one extra to check if there are more\n                select: {\n                    id: true,\n                    invoiceNumber: true,\n                    customerId: true,\n                    total: true,\n                    totalProfit: true,\n                    profitMargin: true,\n                    status: true,\n                    paymentMethod: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    dueDate: true,\n                    customer: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    shop: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    payments: {\n                        where: {\n                            receipt: {\n                                isNot: null\n                            }\n                        },\n                        select: {\n                            amount: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            items: true\n                        }\n                    }\n                }\n            }),\n            // Only count if we need pagination info\n            filters.cursor ? Promise.resolve(0) : prisma.invoice.count({ where }),\n            // Only fetch statistics if requested\n            filters.includeStatistics ? getStatistics(shopId) : Promise.resolve(null)\n        ]);\n\n        // Check if there are more results\n        const hasMore = invoices.length > filters.limit;\n        const resultInvoices = hasMore ? invoices.slice(0, -1) : invoices;\n\n        // Generate next cursor\n        const nextCursor = hasMore && resultInvoices.length > 0\n            ? createCursor(resultInvoices[resultInvoices.length - 1].id, resultInvoices[resultInvoices.length - 1].createdAt)\n            : null;\n\n        // Format response\n        const formattedInvoices = resultInvoices.map(invoice => {\n            const totalPaid = invoice.payments.reduce((sum, payment) => sum + payment.amount, 0);\n            const dueAmount = Math.max(0, invoice.total - totalPaid);\n            \n            return {\n                ...invoice,\n                customerName: invoice.customer.name,\n                shopName: invoice.shop?.name,\n                itemCount: invoice._count.items,\n                date: invoice.createdAt.toISOString().split('T')[0],\n                dueDate: invoice.dueDate?.toISOString().split('T')[0],\n                totalPaid,\n                dueAmount\n            };\n        });\n\n        const result = {\n            invoices: formattedInvoices,\n            hasMore,\n            nextCursor,\n            totalCount: filters.cursor ? undefined : totalCount,\n            statistics,\n            responseTime: performance.now() - startTime\n        };\n\n        // Cache the result\n        await cache.set(cacheKey, result, CACHE_CONFIG.invoices.ttl);\n\n        return NextResponse.json(result);\n\n    } catch (error) {\n        console.error('Error fetching invoices:', error);\n        return NextResponse.json(\n            {\n                error: 'Failed to fetch invoices',\n                details: process.env.NODE_ENV === 'development' ? error.message : undefined,\n                responseTime: performance.now() - startTime\n            },\n            { status: 500 }\n        );\n    }\n}\n\n// Bulk operations endpoint\nexport async function PATCH(request: NextRequest) {\n    try {\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        const body = await request.json();\n        const { operation, invoiceIds, data } = body;\n\n        if (!operation || !invoiceIds || !Array.isArray(invoiceIds)) {\n            return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });\n        }\n\n        // Verify user has access to these invoices\n        const userShops = await prisma.userShop.findMany({\n            where: { userId: payload.sub as string },\n            select: { shopId: true }\n        });\n        const shopIds = userShops.map(us => us.shopId);\n\n        const invoices = await prisma.invoice.findMany({\n            where: {\n                id: { in: invoiceIds },\n                shopId: { in: shopIds }\n            },\n            select: { id: true }\n        });\n\n        if (invoices.length !== invoiceIds.length) {\n            return NextResponse.json({ error: 'Some invoices not found or access denied' }, { status: 403 });\n        }\n\n        let result;\n        switch (operation) {\n            case 'bulkUpdateStatus':\n                result = await bulkUpdateInvoices(invoiceIds, { status: data.status });\n                break;\n            case 'bulkDelete':\n                result = await prisma.invoice.deleteMany({\n                    where: { id: { in: invoiceIds } }\n                });\n                break;\n            default:\n                return NextResponse.json({ error: 'Invalid operation' }, { status: 400 });\n        }\n\n        // Invalidate related caches\n        await cache.invalidatePattern('invoices:*');\n        await cache.invalidatePattern('invoice-statistics:*');\n\n        return NextResponse.json({\n            success: true,\n            affected: result.count,\n            operation\n        });\n\n    } catch (error) {\n        console.error('Error in bulk operation:', error);\n        return NextResponse.json(\n            { error: 'Failed to perform bulk operation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "PATCH", "dynamic", "maxDuration", "runtime", "CACHE_CONFIG", "invoices", "ttl", "staleWhileRevalidate", "statistics", "customers", "createCursor", "id", "createdAt", "Buffer", "from", "getTime", "toString", "parseCursor", "cursor", "decoded", "timestamp", "split", "Date", "parseInt", "buildWhereClause", "filters", "shopId", "where", "status", "paymentMethod", "customerId", "search", "OR", "invoiceNumber", "contains", "mode", "customer", "name", "total", "equals", "parseFloat", "undefined", "filter", "condition", "Object", "keys", "length", "timePeriod", "now", "startDate", "getFullYear", "getMonth", "getDate", "quarterStart", "Math", "floor", "gte", "buildOrderBy", "sortBy", "dueDate", "getStatistics", "cacheKey", "cache", "getOrSet", "whereClause", "result", "prisma", "$queryRaw", "stats", "totalOutstanding", "total_outstanding", "paidThisMonth", "paid_this_month", "overdueCount", "overdue_count", "totalCreditSales", "total_credit_sales", "totalNonCreditSales", "total_non_credit_sales", "error", "console", "warn", "creditSales", "nonCreditSales", "Promise", "all", "invoice", "aggregate", "not", "_sum", "count", "bulkUpdateInvoices", "invoiceIds", "updates", "updateMany", "in", "data", "request", "startTime", "performance", "token", "extractToken", "NextResponse", "json", "payload", "verifyToken", "sub", "searchParams", "URL", "url", "get", "limit", "min", "includeStatistics", "userShops", "userShop", "findMany", "userId", "select", "shopIds", "map", "us", "includes", "JSON", "stringify", "cachedResult", "cached", "responseTime", "cursorData", "lt", "orderBy", "totalCount", "take", "totalProfit", "profitMargin", "updatedAt", "shop", "payments", "receipt", "isNot", "amount", "_count", "items", "resolve", "hasMore", "resultInvoices", "slice", "nextCursor", "formattedInvoices", "totalPaid", "reduce", "sum", "payment", "dueAmount", "max", "customerName", "shopName", "itemCount", "date", "toISOString", "set", "details", "process", "env", "NODE_ENV", "message", "body", "operation", "Array", "isArray", "deleteMany", "invalidatePattern", "success", "affected"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4560f51c080b2be9f401415506f5a48e5c3e073d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8ko9wrib9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8ko9wrib9();
cov_8ko9wrib9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[0]++;
  cov_8ko9wrib9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_8ko9wrib9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_8ko9wrib9().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[1]++;
    cov_8ko9wrib9().s[4]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[2]++;
    cov_8ko9wrib9().s[5]++;
    return PATCH;
  },
  dynamic: function () {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[3]++;
    cov_8ko9wrib9().s[6]++;
    return dynamic;
  },
  maxDuration: function () {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[4]++;
    cov_8ko9wrib9().s[7]++;
    return maxDuration;
  },
  runtime: function () {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[5]++;
    cov_8ko9wrib9().s[8]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_8ko9wrib9().s[9]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_8ko9wrib9().s[10]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_8ko9wrib9().s[11]++, require("../../../../lib/auth"));
const _cache =
/* istanbul ignore next */
(cov_8ko9wrib9().s[12]++, require("../../../../lib/cache"));
const _performance =
/* istanbul ignore next */
(cov_8ko9wrib9().s[13]++, require("../../../../lib/performance"));
const runtime =
/* istanbul ignore next */
(cov_8ko9wrib9().s[14]++, "nodejs");
const dynamic =
/* istanbul ignore next */
(cov_8ko9wrib9().s[15]++, "force-dynamic");
const maxDuration =
/* istanbul ignore next */
(cov_8ko9wrib9().s[16]++, 10);
// Enhanced caching configuration
const CACHE_CONFIG =
/* istanbul ignore next */
(cov_8ko9wrib9().s[17]++, {
  invoices: {
    ttl: 60,
    staleWhileRevalidate: 300 // 5 minutes
  },
  statistics: {
    ttl: 300,
    staleWhileRevalidate: 900 // 15 minutes
  },
  customers: {
    ttl: 600,
    staleWhileRevalidate: 1800 // 30 minutes
  }
});
// Cursor-based pagination helper
function createCursor(id, createdAt) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[6]++;
  cov_8ko9wrib9().s[18]++;
  return Buffer.from(`${id}:${createdAt.getTime()}`).toString("base64");
}
function parseCursor(cursor) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[7]++;
  cov_8ko9wrib9().s[19]++;
  try {
    const decoded =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[20]++, Buffer.from(cursor, "base64").toString());
    const [id, timestamp] =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[21]++, decoded.split(":"));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[22]++;
    return {
      id,
      createdAt: new Date(parseInt(timestamp))
    };
  } catch {
    /* istanbul ignore next */
    cov_8ko9wrib9().s[23]++;
    return null;
  }
}
// Optimized query builder
function buildWhereClause(filters, shopId) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[8]++;
  const where =
  /* istanbul ignore next */
  (cov_8ko9wrib9().s[24]++, {});
  /* istanbul ignore next */
  cov_8ko9wrib9().s[25]++;
  if (shopId) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[0][0]++;
    cov_8ko9wrib9().s[26]++;
    where.shopId = shopId;
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[0][1]++;
  }
  cov_8ko9wrib9().s[27]++;
  if (filters.status) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[1][0]++;
    cov_8ko9wrib9().s[28]++;
    where.status = filters.status;
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[1][1]++;
  }
  cov_8ko9wrib9().s[29]++;
  if (filters.paymentMethod) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[2][0]++;
    cov_8ko9wrib9().s[30]++;
    where.paymentMethod = filters.paymentMethod;
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[2][1]++;
  }
  cov_8ko9wrib9().s[31]++;
  if (filters.customerId) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[3][0]++;
    cov_8ko9wrib9().s[32]++;
    where.customerId = parseInt(filters.customerId);
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[3][1]++;
  }
  cov_8ko9wrib9().s[33]++;
  if (filters.search) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[4][0]++;
    cov_8ko9wrib9().s[34]++;
    where.OR = [{
      invoiceNumber: {
        contains: filters.search,
        mode: "insensitive"
      }
    }, {
      customer: {
        name: {
          contains: filters.search,
          mode: "insensitive"
        }
      }
    }, {
      total: {
        equals:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[5][0]++, parseFloat(filters.search)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[5][1]++, undefined)
      }
    }].filter(condition => {
      /* istanbul ignore next */
      cov_8ko9wrib9().f[9]++;
      cov_8ko9wrib9().s[35]++;
      // Remove invalid conditions
      if (condition.total?.equals === undefined) {
        /* istanbul ignore next */
        cov_8ko9wrib9().b[6][0]++;
        cov_8ko9wrib9().s[36]++;
        delete condition.total;
      } else
      /* istanbul ignore next */
      {
        cov_8ko9wrib9().b[6][1]++;
      }
      cov_8ko9wrib9().s[37]++;
      return Object.keys(condition).length > 0;
    });
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[4][1]++;
  }
  // Time period filtering
  cov_8ko9wrib9().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_8ko9wrib9().b[8][0]++, filters.timePeriod) &&
  /* istanbul ignore next */
  (cov_8ko9wrib9().b[8][1]++, filters.timePeriod !== "all")) {
    /* istanbul ignore next */
    cov_8ko9wrib9().b[7][0]++;
    const now =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[39]++, new Date());
    let startDate;
    /* istanbul ignore next */
    cov_8ko9wrib9().s[40]++;
    switch (filters.timePeriod) {
      case "today":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][0]++;
        cov_8ko9wrib9().s[41]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        /* istanbul ignore next */
        cov_8ko9wrib9().s[42]++;
        break;
      case "week":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][1]++;
        cov_8ko9wrib9().s[43]++;
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        /* istanbul ignore next */
        cov_8ko9wrib9().s[44]++;
        break;
      case "month":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][2]++;
        cov_8ko9wrib9().s[45]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        /* istanbul ignore next */
        cov_8ko9wrib9().s[46]++;
        break;
      case "quarter":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][3]++;
        const quarterStart =
        /* istanbul ignore next */
        (cov_8ko9wrib9().s[47]++, Math.floor(now.getMonth() / 3) * 3);
        /* istanbul ignore next */
        cov_8ko9wrib9().s[48]++;
        startDate = new Date(now.getFullYear(), quarterStart, 1);
        /* istanbul ignore next */
        cov_8ko9wrib9().s[49]++;
        break;
      case "year":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][4]++;
        cov_8ko9wrib9().s[50]++;
        startDate = new Date(now.getFullYear(), 0, 1);
        /* istanbul ignore next */
        cov_8ko9wrib9().s[51]++;
        break;
      default:
        /* istanbul ignore next */
        cov_8ko9wrib9().b[9][5]++;
        cov_8ko9wrib9().s[52]++;
        startDate = new Date(0);
    }
    /* istanbul ignore next */
    cov_8ko9wrib9().s[53]++;
    where.createdAt = {
      gte: startDate
    };
  } else
  /* istanbul ignore next */
  {
    cov_8ko9wrib9().b[7][1]++;
  }
  cov_8ko9wrib9().s[54]++;
  return where;
}
function buildOrderBy(sortBy) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[10]++;
  cov_8ko9wrib9().s[55]++;
  switch (sortBy) {
    case "oldest":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][0]++;
      cov_8ko9wrib9().s[56]++;
      return {
        createdAt: "asc"
      };
    case "amount-high":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][1]++;
      cov_8ko9wrib9().s[57]++;
      return {
        total: "desc"
      };
    case "amount-low":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][2]++;
      cov_8ko9wrib9().s[58]++;
      return {
        total: "asc"
      };
    case "customer":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][3]++;
      cov_8ko9wrib9().s[59]++;
      return {
        customer: {
          name: "asc"
        }
      };
    case "due-date":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][4]++;
      cov_8ko9wrib9().s[60]++;
      return {
        dueDate: "asc"
      };
    case "due-date-desc":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][5]++;
      cov_8ko9wrib9().s[61]++;
      return {
        dueDate: "desc"
      };
    case "newest":
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][6]++;
    default:
      /* istanbul ignore next */
      cov_8ko9wrib9().b[10][7]++;
      cov_8ko9wrib9().s[62]++;
      return {
        createdAt: "desc"
      };
  }
}
// Optimized statistics query with materialized view fallback
async function getStatistics(shopId) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[11]++;
  const cacheKey =
  /* istanbul ignore next */
  (cov_8ko9wrib9().s[63]++, `invoice-statistics:${
  /* istanbul ignore next */
  (cov_8ko9wrib9().b[11][0]++, shopId) ||
  /* istanbul ignore next */
  (cov_8ko9wrib9().b[11][1]++, "all")}`);
  /* istanbul ignore next */
  cov_8ko9wrib9().s[64]++;
  return _cache.cache.getOrSet(cacheKey, async () => {
    /* istanbul ignore next */
    cov_8ko9wrib9().f[12]++;
    const whereClause =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[65]++, shopId ?
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[12][0]++, {
      shopId
    }) :
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[12][1]++, {}));
    // Try to use materialized view first (if exists)
    /* istanbul ignore next */
    cov_8ko9wrib9().s[66]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[67]++, await _prisma.prisma.$queryRaw`
                    SELECT 
                        COALESCE(SUM(CASE WHEN LOWER(status) != 'paid' THEN total ELSE 0 END), 0) as total_outstanding,
                        COALESCE(SUM(CASE WHEN LOWER(status) = 'paid' AND DATE_TRUNC('month', "createdAt") = DATE_TRUNC('month', CURRENT_DATE) THEN total ELSE 0 END), 0) as paid_this_month,
                        COUNT(CASE WHEN status = 'overdue' THEN 1 END) as overdue_count,
                        COALESCE(SUM(CASE WHEN "paymentMethod" = 'credit' THEN total ELSE 0 END), 0) as total_credit_sales,
                        COALESCE(SUM(CASE WHEN "paymentMethod" != 'credit' THEN total ELSE 0 END), 0) as total_non_credit_sales
                    FROM "Invoice"
                    ${shopId ?
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[13][0]++, `WHERE "shopId" = '${shopId}'`) :
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[13][1]++, "")}
                `);
      const stats =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[68]++, result[0]);
      /* istanbul ignore next */
      cov_8ko9wrib9().s[69]++;
      return {
        totalOutstanding:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[14][0]++, parseFloat(stats.total_outstanding)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[14][1]++, 0),
        paidThisMonth:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[15][0]++, parseFloat(stats.paid_this_month)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[15][1]++, 0),
        overdueCount:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[16][0]++, parseInt(stats.overdue_count)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[16][1]++, 0),
        totalCreditSales:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[17][0]++, parseFloat(stats.total_credit_sales)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[17][1]++, 0),
        totalNonCreditSales:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[18][0]++, parseFloat(stats.total_non_credit_sales)) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[18][1]++, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_8ko9wrib9().s[70]++;
      console.warn("Materialized view not available, falling back to aggregation queries");
      // Fallback to individual queries
      const [totalOutstanding, paidThisMonth, overdueCount, creditSales, nonCreditSales] =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[71]++, await Promise.all([_prisma.prisma.invoice.aggregate({
        where: {
          ...whereClause,
          status: {
            not: "paid"
          }
        },
        _sum: {
          total: true
        }
      }), _prisma.prisma.invoice.aggregate({
        where: {
          ...whereClause,
          status: "paid",
          createdAt: {
            gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
          }
        },
        _sum: {
          total: true
        }
      }), _prisma.prisma.invoice.count({
        where: {
          ...whereClause,
          status: "overdue"
        }
      }), _prisma.prisma.invoice.aggregate({
        where: {
          ...whereClause,
          paymentMethod: "credit"
        },
        _sum: {
          total: true
        }
      }), _prisma.prisma.invoice.aggregate({
        where: {
          ...whereClause,
          paymentMethod: {
            not: "credit"
          }
        },
        _sum: {
          total: true
        }
      })]));
      /* istanbul ignore next */
      cov_8ko9wrib9().s[72]++;
      return {
        totalOutstanding:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[19][0]++, totalOutstanding._sum.total) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[19][1]++, 0),
        paidThisMonth:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[20][0]++, paidThisMonth._sum.total) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[20][1]++, 0),
        overdueCount,
        totalCreditSales:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[21][0]++, creditSales._sum.total) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[21][1]++, 0),
        totalNonCreditSales:
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[22][0]++, nonCreditSales._sum.total) ||
        /* istanbul ignore next */
        (cov_8ko9wrib9().b[22][1]++, 0)
      };
    }
  }, CACHE_CONFIG.statistics.ttl);
}
// Bulk operations helper
async function bulkUpdateInvoices(invoiceIds, updates) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[13]++;
  cov_8ko9wrib9().s[73]++;
  return _prisma.prisma.invoice.updateMany({
    where: {
      id: {
        in: invoiceIds
      }
    },
    data: updates
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[14]++;
  const startTime =
  /* istanbul ignore next */
  (cov_8ko9wrib9().s[74]++, _performance.performance.now());
  /* istanbul ignore next */
  cov_8ko9wrib9().s[75]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[76]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[77]++;
    if (!token) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[23][0]++;
      cov_8ko9wrib9().s[78]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[23][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[79]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[80]++;
    if (
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[25][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[25][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[24][0]++;
      cov_8ko9wrib9().s[81]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[24][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[82]++, new URL(request.url));
    const filters =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[83]++, {
      cursor: searchParams.get("cursor"),
      limit: Math.min(parseInt(
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[26][0]++, searchParams.get("limit")) ||
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[26][1]++, "20")), 100),
      status: searchParams.get("status"),
      paymentMethod: searchParams.get("paymentMethod"),
      customerId: searchParams.get("customerId"),
      search: searchParams.get("search"),
      timePeriod:
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[27][0]++, searchParams.get("timePeriod")) ||
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[27][1]++, "all"),
      sortBy:
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[28][0]++, searchParams.get("sortBy")) ||
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[28][1]++, "newest"),
      includeStatistics: searchParams.get("includeStatistics") === "true"
    });
    // Get user's shop access
    const userShops =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[84]++, await _prisma.prisma.userShop.findMany({
      where: {
        userId: payload.sub
      },
      select: {
        shopId: true
      }
    }));
    const shopIds =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[85]++, userShops.map(us => {
      /* istanbul ignore next */
      cov_8ko9wrib9().f[15]++;
      cov_8ko9wrib9().s[86]++;
      return us.shopId;
    }));
    const shopId =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[87]++, searchParams.get("shopId"));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[30][0]++, shopId) &&
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[30][1]++, !shopIds.includes(shopId))) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[29][0]++;
      cov_8ko9wrib9().s[89]++;
      return _server.NextResponse.json({
        error: "Access denied to this shop"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[29][1]++;
    }
    // Build cache key
    const cacheKey =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[90]++, `invoices:${JSON.stringify({
      ...filters,
      shopIds: shopId ?
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[31][0]++, [shopId]) :
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[31][1]++, shopIds)
    })}`);
    // Try cache first
    const cachedResult =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[91]++, await _cache.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[92]++;
    if (cachedResult) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[32][0]++;
      cov_8ko9wrib9().s[93]++;
      return _server.NextResponse.json({
        ...cachedResult,
        cached: true,
        responseTime: _performance.performance.now() - startTime
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[32][1]++;
    }
    // Build query conditions
    const where =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[94]++, buildWhereClause(filters, shopId));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[95]++;
    if (!shopId) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[33][0]++;
      cov_8ko9wrib9().s[96]++;
      where.shopId = {
        in: shopIds
      };
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[33][1]++;
    }
    // Handle cursor-based pagination
    cov_8ko9wrib9().s[97]++;
    if (filters.cursor) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[34][0]++;
      const cursorData =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[98]++, parseCursor(filters.cursor));
      /* istanbul ignore next */
      cov_8ko9wrib9().s[99]++;
      if (cursorData) {
        /* istanbul ignore next */
        cov_8ko9wrib9().b[35][0]++;
        cov_8ko9wrib9().s[100]++;
        where.OR = [{
          createdAt: {
            lt: cursorData.createdAt
          }
        }, {
          createdAt: cursorData.createdAt,
          id: {
            lt: cursorData.id
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_8ko9wrib9().b[35][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[34][1]++;
    }
    const orderBy =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[101]++, buildOrderBy(filters.sortBy));
    // Optimized query with selective field loading
    const [invoices, totalCount, statistics] =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[102]++, await Promise.all([_prisma.prisma.invoice.findMany({
      where,
      orderBy,
      take: filters.limit + 1,
      select: {
        id: true,
        invoiceNumber: true,
        customerId: true,
        total: true,
        totalProfit: true,
        profitMargin: true,
        status: true,
        paymentMethod: true,
        createdAt: true,
        updatedAt: true,
        dueDate: true,
        customer: {
          select: {
            name: true
          }
        },
        shop: {
          select: {
            name: true
          }
        },
        payments: {
          where: {
            receipt: {
              isNot: null
            }
          },
          select: {
            amount: true
          }
        },
        _count: {
          select: {
            items: true
          }
        }
      }
    }),
    // Only count if we need pagination info
    filters.cursor ?
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[36][0]++, Promise.resolve(0)) :
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[36][1]++, _prisma.prisma.invoice.count({
      where
    })),
    // Only fetch statistics if requested
    filters.includeStatistics ?
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[37][0]++, getStatistics(shopId)) :
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[37][1]++, Promise.resolve(null))]));
    // Check if there are more results
    const hasMore =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[103]++, invoices.length > filters.limit);
    const resultInvoices =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[104]++, hasMore ?
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[38][0]++, invoices.slice(0, -1)) :
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[38][1]++, invoices));
    // Generate next cursor
    const nextCursor =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[105]++,
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[40][0]++, hasMore) &&
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[40][1]++, resultInvoices.length > 0) ?
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[39][0]++, createCursor(resultInvoices[resultInvoices.length - 1].id, resultInvoices[resultInvoices.length - 1].createdAt)) :
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[39][1]++, null));
    // Format response
    const formattedInvoices =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[106]++, resultInvoices.map(invoice => {
      /* istanbul ignore next */
      cov_8ko9wrib9().f[16]++;
      const totalPaid =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[107]++, invoice.payments.reduce((sum, payment) => {
        /* istanbul ignore next */
        cov_8ko9wrib9().f[17]++;
        cov_8ko9wrib9().s[108]++;
        return sum + payment.amount;
      }, 0));
      const dueAmount =
      /* istanbul ignore next */
      (cov_8ko9wrib9().s[109]++, Math.max(0, invoice.total - totalPaid));
      /* istanbul ignore next */
      cov_8ko9wrib9().s[110]++;
      return {
        ...invoice,
        customerName: invoice.customer.name,
        shopName: invoice.shop?.name,
        itemCount: invoice._count.items,
        date: invoice.createdAt.toISOString().split("T")[0],
        dueDate: invoice.dueDate?.toISOString().split("T")[0],
        totalPaid,
        dueAmount
      };
    }));
    const result =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[111]++, {
      invoices: formattedInvoices,
      hasMore,
      nextCursor,
      totalCount: filters.cursor ?
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[41][0]++, undefined) :
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[41][1]++, totalCount),
      statistics,
      responseTime: _performance.performance.now() - startTime
    });
    // Cache the result
    /* istanbul ignore next */
    cov_8ko9wrib9().s[112]++;
    await _cache.cache.set(cacheKey, result, CACHE_CONFIG.invoices.ttl);
    /* istanbul ignore next */
    cov_8ko9wrib9().s[113]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_8ko9wrib9().s[114]++;
    console.error("Error fetching invoices:", error);
    /* istanbul ignore next */
    cov_8ko9wrib9().s[115]++;
    return _server.NextResponse.json({
      error: "Failed to fetch invoices",
      details: process.env.NODE_ENV === "development" ?
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[42][0]++, error.message) :
      /* istanbul ignore next */
      (cov_8ko9wrib9().b[42][1]++, undefined),
      responseTime: _performance.performance.now() - startTime
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_8ko9wrib9().f[18]++;
  cov_8ko9wrib9().s[116]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[117]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[118]++;
    if (!token) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[43][0]++;
      cov_8ko9wrib9().s[119]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[43][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[120]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[121]++;
    if (
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[45][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[45][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[44][0]++;
      cov_8ko9wrib9().s[122]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[44][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[123]++, await request.json());
    const {
      operation,
      invoiceIds,
      data
    } =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[124]++, body);
    /* istanbul ignore next */
    cov_8ko9wrib9().s[125]++;
    if (
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[47][0]++, !operation) ||
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[47][1]++, !invoiceIds) ||
    /* istanbul ignore next */
    (cov_8ko9wrib9().b[47][2]++, !Array.isArray(invoiceIds))) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[46][0]++;
      cov_8ko9wrib9().s[126]++;
      return _server.NextResponse.json({
        error: "Invalid request body"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[46][1]++;
    }
    // Verify user has access to these invoices
    const userShops =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[127]++, await _prisma.prisma.userShop.findMany({
      where: {
        userId: payload.sub
      },
      select: {
        shopId: true
      }
    }));
    const shopIds =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[128]++, userShops.map(us => {
      /* istanbul ignore next */
      cov_8ko9wrib9().f[19]++;
      cov_8ko9wrib9().s[129]++;
      return us.shopId;
    }));
    const invoices =
    /* istanbul ignore next */
    (cov_8ko9wrib9().s[130]++, await _prisma.prisma.invoice.findMany({
      where: {
        id: {
          in: invoiceIds
        },
        shopId: {
          in: shopIds
        }
      },
      select: {
        id: true
      }
    }));
    /* istanbul ignore next */
    cov_8ko9wrib9().s[131]++;
    if (invoices.length !== invoiceIds.length) {
      /* istanbul ignore next */
      cov_8ko9wrib9().b[48][0]++;
      cov_8ko9wrib9().s[132]++;
      return _server.NextResponse.json({
        error: "Some invoices not found or access denied"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_8ko9wrib9().b[48][1]++;
    }
    let result;
    /* istanbul ignore next */
    cov_8ko9wrib9().s[133]++;
    switch (operation) {
      case "bulkUpdateStatus":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[49][0]++;
        cov_8ko9wrib9().s[134]++;
        result = await bulkUpdateInvoices(invoiceIds, {
          status: data.status
        });
        /* istanbul ignore next */
        cov_8ko9wrib9().s[135]++;
        break;
      case "bulkDelete":
        /* istanbul ignore next */
        cov_8ko9wrib9().b[49][1]++;
        cov_8ko9wrib9().s[136]++;
        result = await _prisma.prisma.invoice.deleteMany({
          where: {
            id: {
              in: invoiceIds
            }
          }
        });
        /* istanbul ignore next */
        cov_8ko9wrib9().s[137]++;
        break;
      default:
        /* istanbul ignore next */
        cov_8ko9wrib9().b[49][2]++;
        cov_8ko9wrib9().s[138]++;
        return _server.NextResponse.json({
          error: "Invalid operation"
        }, {
          status: 400
        });
    }
    // Invalidate related caches
    /* istanbul ignore next */
    cov_8ko9wrib9().s[139]++;
    await _cache.cache.invalidatePattern("invoices:*");
    /* istanbul ignore next */
    cov_8ko9wrib9().s[140]++;
    await _cache.cache.invalidatePattern("invoice-statistics:*");
    /* istanbul ignore next */
    cov_8ko9wrib9().s[141]++;
    return _server.NextResponse.json({
      success: true,
      affected: result.count,
      operation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_8ko9wrib9().s[142]++;
    console.error("Error in bulk operation:", error);
    /* istanbul ignore next */
    cov_8ko9wrib9().s[143]++;
    return _server.NextResponse.json({
      error: "Failed to perform bulk operation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,