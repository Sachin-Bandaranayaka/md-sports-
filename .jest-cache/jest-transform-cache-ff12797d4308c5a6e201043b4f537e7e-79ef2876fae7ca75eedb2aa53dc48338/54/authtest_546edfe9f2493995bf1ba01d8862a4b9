b93f4d4d9bd35e22810d4c6c646c2443
"use strict";
// Mock jose
jest.mock("jose");
jest.mock("@/lib/prisma", ()=>mockPrisma);
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jose = /*#__PURE__*/ _interop_require_wildcard(require("jose"));
const _auth = require("../../src/lib/auth");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockedJose = _jose;
// Mock prisma
const mockPrisma = {
    user: {
        findUnique: jest.fn()
    }
};
// Mock console methods
const consoleSpy = {
    log: jest.spyOn(console, "log").mockImplementation(()=>{}),
    error: jest.spyOn(console, "error").mockImplementation(()=>{})
};
describe("Auth Library", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        consoleSpy.log.mockClear();
        consoleSpy.error.mockClear();
    });
    afterAll(()=>{
        consoleSpy.log.mockRestore();
        consoleSpy.error.mockRestore();
    });
    describe("authOptions", ()=>{
        it("should have correct configuration", ()=>{
            expect(_auth.authOptions.secret).toBeDefined();
            expect(_auth.authOptions.session.strategy).toBe("jwt");
            expect(_auth.authOptions.session.maxAge).toBe(24 * 60 * 60);
            expect(_auth.authOptions.callbacks.jwt).toBeDefined();
            expect(_auth.authOptions.callbacks.session).toBeDefined();
        });
        it("should handle jwt callback with user", async ()=>{
            const token = {
                id: 1
            };
            const user = {
                id: 2,
                permissions: [
                    "read"
                ]
            };
            const result = await _auth.authOptions.callbacks.jwt({
                token,
                user
            });
            expect(result.id).toBe(2);
            expect(result.permissions).toEqual([
                "read"
            ]);
        });
        it("should handle jwt callback without user", async ()=>{
            const token = {
                id: 1,
                permissions: [
                    "read"
                ]
            };
            const result = await _auth.authOptions.callbacks.jwt({
                token
            });
            expect(result.id).toBe(1);
            expect(result.permissions).toEqual([
                "read"
            ]);
        });
        it("should handle session callback", async ()=>{
            const session = {
                user: {
                    name: "test"
                }
            };
            const token = {
                id: 1,
                permissions: [
                    "read"
                ]
            };
            const result = await _auth.authOptions.callbacks.session({
                session,
                token
            });
            expect(result.user.id).toBe(1);
            expect(result.user.permissions).toEqual([
                "read"
            ]);
        });
        it("should handle session callback without token", async ()=>{
            const session = {
                user: {
                    name: "test"
                }
            };
            const result = await _auth.authOptions.callbacks.session({
                session,
                token: null
            });
            expect(result.user.name).toBe("test");
            expect(result.user.id).toBeUndefined();
        });
    });
    describe("verifyToken", ()=>{
        it("should verify valid token", async ()=>{
            const mockPayload = {
                sub: "1",
                permissions: [
                    "read"
                ]
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: mockPayload
            });
            const result = await (0, _auth.verifyToken)("valid-token");
            expect(result).toEqual(mockPayload);
            expect(mockedJose.jwtVerify).toHaveBeenCalledWith("valid-token", expect.any(Uint8Array));
        });
        it("should handle expired token", async ()=>{
            const error = new Error("Token expired");
            error.code = "ERR_JWT_EXPIRED";
            mockedJose.jwtVerify.mockRejectedValue(error);
            const result = await (0, _auth.verifyToken)("expired-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Token expired:", "Token expired");
        });
        it("should handle invalid token signature", async ()=>{
            const error = new Error("Invalid signature");
            error.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
            mockedJose.jwtVerify.mockRejectedValue(error);
            const result = await (0, _auth.verifyToken)("invalid-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Invalid signature");
        });
        it("should handle invalid JWS", async ()=>{
            const error = new Error("Invalid JWS");
            error.code = "ERR_JWS_INVALID";
            mockedJose.jwtVerify.mockRejectedValue(error);
            const result = await (0, _auth.verifyToken)("invalid-jws");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Invalid JWS");
        });
        it("should handle claim validation failed", async ()=>{
            const error = new Error("Claim validation failed");
            error.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
            mockedJose.jwtVerify.mockRejectedValue(error);
            const result = await (0, _auth.verifyToken)("invalid-claims");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Claim validation failed");
        });
        it("should handle other verification errors", async ()=>{
            const error = new Error("Unknown error");
            error.code = "ERR_UNKNOWN";
            mockedJose.jwtVerify.mockRejectedValue(error);
            const result = await (0, _auth.verifyToken)("error-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Token verification error:", "Unknown error");
        });
    });
    describe("extractToken", ()=>{
        it("should extract token from valid authorization header", ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token-123")
                }
            };
            const result = (0, _auth.extractToken)(req);
            expect(result).toBe("valid-token-123");
            expect(req.headers.get).toHaveBeenCalledWith("authorization");
        });
        it("should return null for missing authorization header", ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const result = (0, _auth.extractToken)(req);
            expect(result).toBeNull();
        });
        it("should return null for invalid authorization header format", ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Invalid token-123")
                }
            };
            const result = (0, _auth.extractToken)(req);
            expect(result).toBeNull();
        });
        it("should return null for empty authorization header", ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("")
                }
            };
            const result = (0, _auth.extractToken)(req);
            expect(result).toBeNull();
        });
    });
    describe("validateTokenPermission", ()=>{
        it("should return invalid for missing token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "Authentication required"
            });
        });
        it("should grant permission for dev-token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer dev-token")
                }
            };
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: true
            });
            expect(consoleSpy.log).toHaveBeenCalledWith("Development mode: granting permission 'read'");
        });
        it("should return invalid for invalid token payload", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer invalid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: null
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "Invalid authentication token"
            });
        });
        it("should return invalid for token without sub claim", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer no-sub-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    permissions: [
                        "read"
                    ]
                }
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "Invalid authentication token"
            });
        });
        it("should grant permission from token payload", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1",
                    permissions: [
                        "read",
                        "write"
                    ]
                }
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: true
            });
        });
        it("should deny permission not in token payload", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1",
                    permissions: [
                        "write"
                    ]
                }
            });
            mockPrisma.user.findUnique.mockResolvedValue({
                id: 1,
                permissions: [
                    "write"
                ]
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "Permission denied: 'read' is required"
            });
        });
        it("should fallback to database when permission not in token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1",
                    permissions: [
                        "write"
                    ]
                }
            });
            mockPrisma.user.findUnique.mockResolvedValue({
                id: 1,
                permissions: [
                    "read",
                    "write"
                ]
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: true
            });
        });
        it("should return invalid for user not found", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "999"
                }
            });
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "User not found"
            });
        });
        it("should return invalid for user without permissions", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1"
                }
            });
            mockPrisma.user.findUnique.mockResolvedValue({
                id: 1,
                permissions: null
            });
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "User has no permissions"
            });
        });
        it("should handle database errors", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1"
                }
            });
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Database error"));
            const result = await (0, _auth.validateTokenPermission)(req, "read");
            expect(result).toEqual({
                isValid: false,
                message: "Error checking permission: Database error"
            });
        });
    });
    describe("getUserIdFromToken", ()=>{
        it("should return null for missing token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const result = await (0, _auth.getUserIdFromToken)(req);
            expect(result).toBeNull();
        });
        it("should return 1 for dev-token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer dev-token")
                }
            };
            const result = await (0, _auth.getUserIdFromToken)(req);
            expect(result).toBe(1);
        });
        it("should return user ID from valid token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "123"
                }
            });
            const result = await (0, _auth.getUserIdFromToken)(req);
            expect(result).toBe(123);
        });
        it("should return null for invalid token payload", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer invalid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: null
            });
            const result = await (0, _auth.getUserIdFromToken)(req);
            expect(result).toBeNull();
        });
        it("should return null for token without sub claim", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer no-sub-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    permissions: [
                        "read"
                    ]
                }
            });
            const result = await (0, _auth.getUserIdFromToken)(req);
            expect(result).toBeNull();
        });
    });
    describe("getShopIdFromToken", ()=>{
        it("should return null for missing token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue(null)
                }
            };
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBeNull();
        });
        it("should return default shop ID for dev-token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer dev-token")
                }
            };
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBe("cmbtr9q6l000061romoxi7uvf");
        });
        it("should return shop ID from valid token", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1",
                    shopId: "shop123"
                }
            });
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBe("shop123");
        });
        it("should return null for token without shopId", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer no-shop-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1"
                }
            });
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBeNull();
        });
        it("should return null for invalid token payload", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer invalid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: null
            });
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBeNull();
        });
        it("should convert numeric shopId to string", async ()=>{
            const req = {
                headers: {
                    get: jest.fn().mockReturnValue("Bearer valid-token")
                }
            };
            mockedJose.jwtVerify.mockResolvedValue({
                payload: {
                    sub: "1",
                    shopId: 123
                }
            });
            const result = await (0, _auth.getShopIdFromToken)(req);
            expect(result).toBe("123");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,