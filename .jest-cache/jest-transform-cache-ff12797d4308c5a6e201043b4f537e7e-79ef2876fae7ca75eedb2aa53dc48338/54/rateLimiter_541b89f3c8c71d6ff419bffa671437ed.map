{"version":3,"names":["RateLimiter","cov_8snmfkvlu","f","s","rateLimiter","constructor","maxRequests","windowMs","memoryStore","Map","windowSec","Math","ceil","upstashUrl","process","env","UPSTASH_REDIS_REST_URL","upstashToken","UPSTASH_REDIS_REST_TOKEN","useUpstash","b","check","key","checkUpstash","checkMemory","base","tokenParam","incrRes","fetch","method","result","count","json","catch","ttlRes","ttl","resetTimeMs","Date","now","allowed","remaining","max","existing","get","reset","set","entry","RATE_LIMIT_MAX_REQUESTS","parseInt","RATE_LIMIT_WINDOW_MS"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/rateLimiter.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\n/**\n * Simple distributed rate-limiter for Edge + Node runtimes.\n *\n * Strategy hierarchy:\n * 1. If the environment exposes `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN`,\n *    we use Upstash's HTTP API (works inside the Next.js Edge runtime).\n * 2. Otherwise we fall back to the old in-memory Map so local dev keeps working.\n */\n\ninterface RateLimitResult {\n  allowed: boolean;\n  count: number;\n  remaining: number;\n  resetTimeMs: number; // epoch millis when the window resets\n}\n\nexport class RateLimiter {\n  private readonly maxRequests: number;\n  private readonly windowSec: number;\n  private readonly useUpstash: boolean;\n  private readonly upstashUrl?: string;\n  private readonly upstashToken?: string;\n  private readonly memoryStore: Map<string, { count: number; reset: number }> = new Map();\n\n  constructor(maxRequests: number, windowMs: number) {\n    this.maxRequests = maxRequests;\n    this.windowSec = Math.ceil(windowMs / 1000);\n\n    this.upstashUrl = process.env.UPSTASH_REDIS_REST_URL;\n    this.upstashToken = process.env.UPSTASH_REDIS_REST_TOKEN;\n    this.useUpstash = !!this.upstashUrl && !!this.upstashToken;\n  }\n\n  /**\n   * Checks + increments the counter for the given key (usually an IP).\n   */\n  async check(key: string): Promise<RateLimitResult> {\n    if (this.useUpstash) {\n      return this.checkUpstash(key);\n    }\n    return this.checkMemory(key);\n  }\n\n  // ---------------- private helpers ----------------\n  private async checkUpstash(key: string): Promise<RateLimitResult> {\n    const base = this.upstashUrl!;\n    const tokenParam = `?_token=${this.upstashToken}`;\n    const incrRes = await fetch(`${base}/incr/rate:${key}${tokenParam}`, {\n      method: 'POST',\n    });\n    const { result: count } = (await incrRes.json()) as { result: number };\n\n    // First increment => set expiry on the key\n    if (count === 1) {\n      await fetch(`${base}/expire/rate:${key}/${this.windowSec}${tokenParam}`, {\n        method: 'POST',\n      }).catch(() => {}); // best-effort\n    }\n\n    // Get TTL to calculate reset time\n    const ttlRes = await fetch(`${base}/ttl/rate:${key}${tokenParam}`);\n    const { result: ttl } = (await ttlRes.json()) as { result: number };\n    const resetTimeMs = Date.now() + ttl * 1000;\n\n    return {\n      allowed: count <= this.maxRequests,\n      count,\n      remaining: Math.max(0, this.maxRequests - count),\n      resetTimeMs,\n    };\n  }\n\n  private async checkMemory(key: string): Promise<RateLimitResult> {\n    const now = Date.now();\n    const existing = this.memoryStore.get(key);\n    if (!existing || existing.reset < now) {\n      this.memoryStore.set(key, {\n        count: 1,\n        reset: now + this.windowSec * 1000,\n      });\n    } else {\n      existing.count += 1;\n    }\n\n    const entry = this.memoryStore.get(key)!;\n    return {\n      allowed: entry.count <= this.maxRequests,\n      count: entry.count,\n      remaining: Math.max(0, this.maxRequests - entry.count),\n      resetTimeMs: entry.reset,\n    };\n  }\n}\n\n// Convenience singleton using env vars so callers donâ€™t have to instantiate.\nconst RATE_LIMIT_MAX_REQUESTS = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10);\nconst RATE_LIMIT_WINDOW_MS = parseInt(process.env.RATE_LIMIT_WINDOW_MS || '60000', 10);\nexport const rateLimiter = new RateLimiter(RATE_LIMIT_MAX_REQUESTS, RATE_LIMIT_WINDOW_MS); "],"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","ignoreList":[]}