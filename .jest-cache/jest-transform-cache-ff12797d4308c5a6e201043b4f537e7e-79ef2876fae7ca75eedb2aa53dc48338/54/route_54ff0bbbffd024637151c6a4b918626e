035c17fb3b882ff6510cf366d9eb3062
"use strict";

/* istanbul ignore next */
function cov_1y4rqwyddw() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/shop/[id]/delete/route.ts";
  var hash = "12dd54a25b1a26fa1ae9160d3a3f4457412a2720";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/shop/[id]/delete/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 22
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "6": {
        start: {
          line: 16,
          column: 31
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "9": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "10": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "13": {
        start: {
          line: 45,
          column: 31
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "15": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "16": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "17": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 67
        }
      },
      "18": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "19": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 63
        }
      },
      "20": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "DELETE",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 21
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 27
          }
        }, {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 49
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 19
          },
          end: {
            line: 86,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 57
          }
        }, {
          start: {
            line: 86,
            column: 60
          },
          end: {
            line: 86,
            column: 73
          }
        }],
        line: 86
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/shop/[id]/delete/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\n// DELETE: Remove all inventory items for a shop\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: Promise<{ id: string }> }\n) {\n    try {\n        // Await params before using its properties\n        const resolvedParams = await params;\n        \n        // Get the shop ID safely\n        if (!resolvedParams || !resolvedParams.id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Shop ID is required',\n            }, { status: 400 });\n        }\n\n        const shopId = resolvedParams.id;\n\n        // Check if shop exists\n        const shop = await prisma.shop.findUnique({\n            where: { id: shopId },\n            include: {\n                InventoryItem: true\n            }\n        });\n\n        if (!shop) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`,\n            }, { status: 404 });\n        }\n\n        // Get the count of inventory items\n        const inventoryCount = shop.InventoryItem.length;\n\n        // Delete all inventory items for this shop\n        await prisma.inventoryItem.deleteMany({\n            where: { shopId }\n        });\n\n        // Create audit log entry\n        try {\n            await prisma.auditLog.create({\n                data: {\n                    action: 'DELETE_ALL_INVENTORY',\n                    entity: 'Shop',\n                    entityId: parseInt(shopId),\n                    details: JSON.stringify({\n                        shopId,\n                        shopName: shop.name,\n                        inventoryCount,\n                        reason: 'Shop deletion preparation'\n                    })\n                }\n            });\n        } catch (auditError) {\n            // Log error but don't fail the request\n            console.error('Error creating audit log:', auditError);\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: `Successfully deleted ${inventoryCount} inventory items for shop \"${shop.name}\"`,\n            data: {\n                deletedCount: inventoryCount,\n                shopId,\n                shopName: shop.name\n            }\n        });\n    } catch (error) {\n        // Log the error\n        console.error(`Error deleting shop inventory:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to delete shop inventory',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["DELETE", "req", "params", "resolvedParams", "id", "NextResponse", "json", "success", "message", "status", "shopId", "shop", "prisma", "findUnique", "where", "include", "InventoryItem", "inventoryCount", "length", "inventoryItem", "deleteMany", "auditLog", "create", "data", "action", "entity", "entityId", "parseInt", "details", "JSON", "stringify", "shopName", "name", "reason", "auditError", "console", "error", "deletedCount", "Error", "String"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;wBACnB;AAGhB,eAAeA,OAClBC,GAAgB,EAChB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACA,2CAA2C;QAC3C,MAAMC,iBAAiB,MAAMD;QAE7B,yBAAyB;QACzB,IAAI,CAACC,kBAAkB,CAACA,eAAeC,EAAE,EAAE;YACvC,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;YACb,GAAG;gBAAEC,QAAQ;YAAI;QACrB;QAEA,MAAMC,SAASP,eAAeC,EAAE;QAEhC,uBAAuB;QACvB,MAAMO,OAAO,MAAMC,cAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YACtCC,OAAO;gBAAEV,IAAIM;YAAO;YACpBK,SAAS;gBACLC,eAAe;YACnB;QACJ;QAEA,IAAI,CAACL,MAAM;YACP,OAAON,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS,CAAC,aAAa,EAAEE,OAAO,UAAU,CAAC;YAC/C,GAAG;gBAAED,QAAQ;YAAI;QACrB;QAEA,mCAAmC;QACnC,MAAMQ,iBAAiBN,KAAKK,aAAa,CAACE,MAAM;QAEhD,2CAA2C;QAC3C,MAAMN,cAAM,CAACO,aAAa,CAACC,UAAU,CAAC;YAClCN,OAAO;gBAAEJ;YAAO;QACpB;QAEA,yBAAyB;QACzB,IAAI;YACA,MAAME,cAAM,CAACS,QAAQ,CAACC,MAAM,CAAC;gBACzBC,MAAM;oBACFC,QAAQ;oBACRC,QAAQ;oBACRC,UAAUC,SAASjB;oBACnBkB,SAASC,KAAKC,SAAS,CAAC;wBACpBpB;wBACAqB,UAAUpB,KAAKqB,IAAI;wBACnBf;wBACAgB,QAAQ;oBACZ;gBACJ;YACJ;QACJ,EAAE,OAAOC,YAAY;YACjB,uCAAuC;YACvCC,QAAQC,KAAK,CAAC,6BAA6BF;QAC/C;QAEA,OAAO7B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS,CAAC,qBAAqB,EAAES,eAAe,2BAA2B,EAAEN,KAAKqB,IAAI,CAAC,CAAC,CAAC;YACzFT,MAAM;gBACFc,cAAcpB;gBACdP;gBACAqB,UAAUpB,KAAKqB,IAAI;YACvB;QACJ;IACJ,EAAE,OAAOI,OAAO;QACZ,gBAAgB;QAChBD,QAAQC,KAAK,CAAC,CAAC,8BAA8B,CAAC,EAAEA;QAChD,OAAO/B,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACT4B,OAAOA,iBAAiBE,QAAQF,MAAM5B,OAAO,GAAG+B,OAAOH;QAC3D,GAAG;YAAE3B,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "12dd54a25b1a26fa1ae9160d3a3f4457412a2720"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1y4rqwyddw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1y4rqwyddw();
cov_1y4rqwyddw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1y4rqwyddw().s[1]++;
Object.defineProperty(exports, "DELETE", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1y4rqwyddw().f[0]++;
    cov_1y4rqwyddw().s[2]++;
    return DELETE;
  }
});
const _server =
/* istanbul ignore next */
(cov_1y4rqwyddw().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1y4rqwyddw().s[4]++, require("../../../../../../lib/prisma"));
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1y4rqwyddw().f[1]++;
  cov_1y4rqwyddw().s[5]++;
  try {
    // Await params before using its properties
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1y4rqwyddw().s[6]++, await params);
    // Get the shop ID safely
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[7]++;
    if (
    /* istanbul ignore next */
    (cov_1y4rqwyddw().b[1][0]++, !resolvedParams) ||
    /* istanbul ignore next */
    (cov_1y4rqwyddw().b[1][1]++, !resolvedParams.id)) {
      /* istanbul ignore next */
      cov_1y4rqwyddw().b[0][0]++;
      cov_1y4rqwyddw().s[8]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1y4rqwyddw().b[0][1]++;
    }
    const shopId =
    /* istanbul ignore next */
    (cov_1y4rqwyddw().s[9]++, resolvedParams.id);
    // Check if shop exists
    const shop =
    /* istanbul ignore next */
    (cov_1y4rqwyddw().s[10]++, await _prisma.prisma.shop.findUnique({
      where: {
        id: shopId
      },
      include: {
        InventoryItem: true
      }
    }));
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[11]++;
    if (!shop) {
      /* istanbul ignore next */
      cov_1y4rqwyddw().b[2][0]++;
      cov_1y4rqwyddw().s[12]++;
      return _server.NextResponse.json({
        success: false,
        message: `Shop with ID ${shopId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1y4rqwyddw().b[2][1]++;
    }
    // Get the count of inventory items
    const inventoryCount =
    /* istanbul ignore next */
    (cov_1y4rqwyddw().s[13]++, shop.InventoryItem.length);
    // Delete all inventory items for this shop
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[14]++;
    await _prisma.prisma.inventoryItem.deleteMany({
      where: {
        shopId
      }
    });
    // Create audit log entry
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[15]++;
    try {
      /* istanbul ignore next */
      cov_1y4rqwyddw().s[16]++;
      await _prisma.prisma.auditLog.create({
        data: {
          action: "DELETE_ALL_INVENTORY",
          entity: "Shop",
          entityId: parseInt(shopId),
          details: JSON.stringify({
            shopId,
            shopName: shop.name,
            inventoryCount,
            reason: "Shop deletion preparation"
          })
        }
      });
    } catch (auditError) {
      /* istanbul ignore next */
      cov_1y4rqwyddw().s[17]++;
      // Log error but don't fail the request
      console.error("Error creating audit log:", auditError);
    }
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[18]++;
    return _server.NextResponse.json({
      success: true,
      message: `Successfully deleted ${inventoryCount} inventory items for shop "${shop.name}"`,
      data: {
        deletedCount: inventoryCount,
        shopId,
        shopName: shop.name
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[19]++;
    // Log the error
    console.error(`Error deleting shop inventory:`, error);
    /* istanbul ignore next */
    cov_1y4rqwyddw().s[20]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to delete shop inventory",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1y4rqwyddw().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1y4rqwyddw().b[3][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,