37c43f7244744c9bb198a9ac5f924ccf
"use strict";
jest.mock("@/hooks/useAuth", ()=>({
        useAuth: ()=>mockUseAuth()
    }));
// Mock next/navigation
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock the useAuth hook
const mockUseAuth = jest.fn();
// Mock fetch globally
global.fetch = jest.fn();
describe("User Creation and Permission-Based Access", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock localStorage
        Object.defineProperty(window, "localStorage", {
            value: {
                getItem: jest.fn(()=>"mock-token"),
                setItem: jest.fn(),
                removeItem: jest.fn()
            },
            writable: true
        });
    });
    describe("Permission System Core Logic", ()=>{
        test("should check permissions correctly", ()=>{
            const userPermissions = [
                "inventory:view",
                "sales:view"
            ];
            // Test permission checking logic
            const hasPermission = (permission)=>{
                return userPermissions.includes(permission);
            };
            expect(hasPermission("inventory:view")).toBe(true);
            expect(hasPermission("sales:view")).toBe(true);
            expect(hasPermission("admin:manage")).toBe(false);
        });
        test("should filter dashboard metrics based on permissions", ()=>{
            const summaryData = {
                totalInventoryValue: 50000,
                pendingTransfers: 5,
                outstandingInvoices: 3,
                lowStockItems: 12
            };
            const userPermissions = [
                "inventory:view"
            ]; // Only inventory permission
            const hasPermission = (permission)=>{
                return userPermissions.includes(permission);
            };
            // Define metrics with their required permissions
            const metrics = [
                {
                    title: "Total Inventory Value",
                    value: summaryData.totalInventoryValue,
                    requiredPermission: "inventory:view"
                },
                {
                    title: "Pending Transfers",
                    value: summaryData.pendingTransfers,
                    requiredPermission: "transfer:view"
                },
                {
                    title: "Outstanding Invoices",
                    value: summaryData.outstandingInvoices,
                    requiredPermission: "accounting:view"
                },
                {
                    title: "Low Stock Items",
                    value: summaryData.lowStockItems,
                    requiredPermission: "inventory:view"
                }
            ];
            // Filter metrics based on permissions
            const visibleMetrics = metrics.filter((metric)=>hasPermission(metric.requiredPermission));
            expect(visibleMetrics).toHaveLength(2);
            expect(visibleMetrics[0].title).toBe("Total Inventory Value");
            expect(visibleMetrics[1].title).toBe("Low Stock Items");
        });
        test("should determine accessible modules correctly", ()=>{
            const userPermissions = [
                "inventory:view",
                "sales:view",
                "dashboard:view"
            ];
            const hasPermission = (permission)=>{
                return userPermissions.includes(permission);
            };
            const getAccessibleModules = ()=>{
                const modules = [];
                if (hasPermission("dashboard:view")) modules.push("Dashboard");
                if (hasPermission("inventory:view")) modules.push("Inventory");
                if (hasPermission("sales:view")) modules.push("Sales");
                if (hasPermission("accounting:view")) modules.push("Accounting");
                if (hasPermission("reports:view")) modules.push("Reports");
                if (hasPermission("user:view")) modules.push("User Management");
                return modules;
            };
            const accessibleModules = getAccessibleModules();
            expect(accessibleModules).toContain("Dashboard");
            expect(accessibleModules).toContain("Inventory");
            expect(accessibleModules).toContain("Sales");
            expect(accessibleModules).not.toContain("Accounting");
            expect(accessibleModules).not.toContain("Reports");
            expect(accessibleModules).not.toContain("User Management");
        });
    });
    describe("Role Template System", ()=>{
        test("should define role templates correctly", ()=>{
            const roleTemplates = [
                {
                    id: "inventory-manager",
                    name: "Inventory Manager",
                    description: "Full access to inventory management",
                    permissions: [
                        "inventory:view",
                        "inventory:create",
                        "inventory:edit",
                        "transfer:view",
                        "transfer:create"
                    ],
                    icon: "\uD83D\uDCE6",
                    color: "bg-blue-500"
                },
                {
                    id: "sales-rep",
                    name: "Sales Representative",
                    description: "Access to sales and customer management",
                    permissions: [
                        "sales:view",
                        "sales:create",
                        "customer:view",
                        "inventory:view"
                    ],
                    icon: "\uD83D\uDCBC",
                    color: "bg-green-500"
                },
                {
                    id: "viewer",
                    name: "Viewer",
                    description: "Read-only access to basic information",
                    permissions: [
                        "dashboard:view",
                        "inventory:view"
                    ],
                    icon: "\uD83D\uDC41️",
                    color: "bg-gray-500"
                }
            ];
            expect(roleTemplates).toHaveLength(3);
            expect(roleTemplates[0].name).toBe("Inventory Manager");
            expect(roleTemplates[0].permissions).toContain("inventory:view");
            expect(roleTemplates[1].permissions).toContain("sales:view");
            expect(roleTemplates[2].permissions).toHaveLength(2);
        });
        test("should apply role template permissions correctly", ()=>{
            const inventoryManagerTemplate = {
                permissions: [
                    "inventory:view",
                    "inventory:create",
                    "inventory:edit",
                    "transfer:view",
                    "transfer:create"
                ]
            };
            const applyTemplate = (template)=>{
                return template.permissions;
            };
            const appliedPermissions = applyTemplate(inventoryManagerTemplate);
            expect(appliedPermissions).toContain("inventory:view");
            expect(appliedPermissions).toContain("inventory:create");
            expect(appliedPermissions).toContain("transfer:view");
            expect(appliedPermissions).toHaveLength(5);
        });
    });
    describe("Permission Descriptions", ()=>{
        test("should provide permission descriptions", ()=>{
            const getPermissionDescription = (permission)=>{
                const descriptions = {
                    "inventory:view": "View inventory items and stock levels",
                    "inventory:create": "Add new inventory items",
                    "inventory:edit": "Modify existing inventory items",
                    "sales:view": "View sales transactions and reports",
                    "sales:create": "Create new sales transactions",
                    "transfer:view": "View inventory transfers between locations",
                    "transfer:create": "Create new inventory transfers",
                    "accounting:view": "View financial reports and accounting data",
                    "user:view": "View user accounts and permissions",
                    "user:create": "Create new user accounts",
                    "reports:view": "Access to system reports and analytics"
                };
                return descriptions[permission] || "No description available";
            };
            expect(getPermissionDescription("inventory:view")).toBe("View inventory items and stock levels");
            expect(getPermissionDescription("sales:create")).toBe("Create new sales transactions");
            expect(getPermissionDescription("unknown:permission")).toBe("No description available");
        });
    });
    describe("Form Validation Logic", ()=>{
        test("should validate required fields", ()=>{
            const validateForm = (formData)=>{
                const errors = [];
                if (!formData.name || formData.name.trim() === "") {
                    errors.push("Name is required");
                }
                if (!formData.email || formData.email.trim() === "") {
                    errors.push("Email is required");
                }
                if (!formData.password || formData.password.trim() === "") {
                    errors.push("Password is required");
                }
                return errors;
            };
            const emptyForm = {
                name: "",
                email: "",
                password: ""
            };
            const validForm = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123"
            };
            const emptyFormErrors = validateForm(emptyForm);
            const validFormErrors = validateForm(validForm);
            expect(emptyFormErrors).toContain("Name is required");
            expect(emptyFormErrors).toContain("Email is required");
            expect(emptyFormErrors).toContain("Password is required");
            expect(validFormErrors).toHaveLength(0);
        });
        test("should validate password confirmation", ()=>{
            const validatePasswordConfirmation = (password, confirmPassword)=>{
                return password === confirmPassword;
            };
            expect(validatePasswordConfirmation("password123", "password123")).toBe(true);
            expect(validatePasswordConfirmation("password123", "different123")).toBe(false);
        });
    });
    describe("Permission Search and Filtering", ()=>{
        test("should filter permissions based on search query", ()=>{
            const allPermissions = [
                {
                    id: 1,
                    name: "inventory:view",
                    description: "View Inventory"
                },
                {
                    id: 2,
                    name: "inventory:create",
                    description: "Create Inventory"
                },
                {
                    id: 3,
                    name: "sales:view",
                    description: "View Sales"
                },
                {
                    id: 4,
                    name: "sales:create",
                    description: "Create Sales"
                },
                {
                    id: 5,
                    name: "user:create",
                    description: "Create Users"
                }
            ];
            const filterPermissions = (permissions, searchQuery)=>{
                if (!searchQuery.trim()) return permissions;
                const query = searchQuery.toLowerCase();
                return permissions.filter((permission)=>permission.name.toLowerCase().includes(query) || permission.description.toLowerCase().includes(query));
            };
            const inventoryResults = filterPermissions(allPermissions, "inventory");
            const salesResults = filterPermissions(allPermissions, "sales");
            const createResults = filterPermissions(allPermissions, "create");
            expect(inventoryResults).toHaveLength(2);
            expect(salesResults).toHaveLength(2);
            expect(createResults).toHaveLength(3);
            expect(inventoryResults[0].name).toBe("inventory:view");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,