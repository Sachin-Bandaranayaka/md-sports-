{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/userPermissions.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('User Creation and Permission-Based Access', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n  });\n\n  describe('Permission System Core Logic', () => {\n    test('should check permissions correctly', () => {\n      const userPermissions = ['inventory:view', 'sales:view'];\n      \n      // Test permission checking logic\n      const hasPermission = (permission: string) => {\n        return userPermissions.includes(permission);\n      };\n      \n      expect(hasPermission('inventory:view')).toBe(true);\n      expect(hasPermission('sales:view')).toBe(true);\n      expect(hasPermission('admin:manage')).toBe(false);\n    });\n\n    test('should filter dashboard metrics based on permissions', () => {\n      const summaryData = {\n        totalInventoryValue: 50000,\n        pendingTransfers: 5,\n        outstandingInvoices: 3,\n        lowStockItems: 12\n      };\n\n      const userPermissions = ['inventory:view']; // Only inventory permission\n      \n      const hasPermission = (permission: string) => {\n        return userPermissions.includes(permission);\n      };\n\n      // Define metrics with their required permissions\n      const metrics = [\n        {\n          title: 'Total Inventory Value',\n          value: summaryData.totalInventoryValue,\n          requiredPermission: 'inventory:view'\n        },\n        {\n          title: 'Pending Transfers',\n          value: summaryData.pendingTransfers,\n          requiredPermission: 'transfer:view'\n        },\n        {\n          title: 'Outstanding Invoices',\n          value: summaryData.outstandingInvoices,\n          requiredPermission: 'accounting:view'\n        },\n        {\n          title: 'Low Stock Items',\n          value: summaryData.lowStockItems,\n          requiredPermission: 'inventory:view'\n        }\n      ];\n\n      // Filter metrics based on permissions\n      const visibleMetrics = metrics.filter(metric => \n        hasPermission(metric.requiredPermission)\n      );\n\n      expect(visibleMetrics).toHaveLength(2);\n      expect(visibleMetrics[0].title).toBe('Total Inventory Value');\n      expect(visibleMetrics[1].title).toBe('Low Stock Items');\n    });\n\n    test('should determine accessible modules correctly', () => {\n      const userPermissions = ['inventory:view', 'sales:view', 'dashboard:view'];\n      \n      const hasPermission = (permission: string) => {\n        return userPermissions.includes(permission);\n      };\n\n      const getAccessibleModules = () => {\n        const modules = [];\n        if (hasPermission('dashboard:view')) modules.push('Dashboard');\n        if (hasPermission('inventory:view')) modules.push('Inventory');\n        if (hasPermission('sales:view')) modules.push('Sales');\n        if (hasPermission('accounting:view')) modules.push('Accounting');\n        if (hasPermission('reports:view')) modules.push('Reports');\n        if (hasPermission('user:view')) modules.push('User Management');\n        return modules;\n      };\n\n      const accessibleModules = getAccessibleModules();\n      \n      expect(accessibleModules).toContain('Dashboard');\n      expect(accessibleModules).toContain('Inventory');\n      expect(accessibleModules).toContain('Sales');\n      expect(accessibleModules).not.toContain('Accounting');\n      expect(accessibleModules).not.toContain('Reports');\n      expect(accessibleModules).not.toContain('User Management');\n    });\n  });\n\n  describe('Role Template System', () => {\n    test('should define role templates correctly', () => {\n      const roleTemplates = [\n        {\n          id: 'inventory-manager',\n          name: 'Inventory Manager',\n          description: 'Full access to inventory management',\n          permissions: ['inventory:view', 'inventory:create', 'inventory:edit', 'transfer:view', 'transfer:create'],\n          icon: '📦',\n          color: 'bg-blue-500'\n        },\n        {\n          id: 'sales-rep',\n          name: 'Sales Representative',\n          description: 'Access to sales and customer management',\n          permissions: ['sales:view', 'sales:create', 'customer:view', 'inventory:view'],\n          icon: '💼',\n          color: 'bg-green-500'\n        },\n        {\n          id: 'viewer',\n          name: 'Viewer',\n          description: 'Read-only access to basic information',\n          permissions: ['dashboard:view', 'inventory:view'],\n          icon: '👁️',\n          color: 'bg-gray-500'\n        }\n      ];\n\n      expect(roleTemplates).toHaveLength(3);\n      expect(roleTemplates[0].name).toBe('Inventory Manager');\n      expect(roleTemplates[0].permissions).toContain('inventory:view');\n      expect(roleTemplates[1].permissions).toContain('sales:view');\n      expect(roleTemplates[2].permissions).toHaveLength(2);\n    });\n\n    test('should apply role template permissions correctly', () => {\n      const inventoryManagerTemplate = {\n        permissions: ['inventory:view', 'inventory:create', 'inventory:edit', 'transfer:view', 'transfer:create']\n      };\n\n      const applyTemplate = (template: { permissions: string[] }) => {\n        return template.permissions;\n      };\n\n      const appliedPermissions = applyTemplate(inventoryManagerTemplate);\n      \n      expect(appliedPermissions).toContain('inventory:view');\n      expect(appliedPermissions).toContain('inventory:create');\n      expect(appliedPermissions).toContain('transfer:view');\n      expect(appliedPermissions).toHaveLength(5);\n    });\n  });\n\n  describe('Permission Descriptions', () => {\n    test('should provide permission descriptions', () => {\n      const getPermissionDescription = (permission: string): string => {\n        const descriptions: Record<string, string> = {\n          'inventory:view': 'View inventory items and stock levels',\n          'inventory:create': 'Add new inventory items',\n          'inventory:edit': 'Modify existing inventory items',\n          'sales:view': 'View sales transactions and reports',\n          'sales:create': 'Create new sales transactions',\n          'transfer:view': 'View inventory transfers between locations',\n          'transfer:create': 'Create new inventory transfers',\n          'accounting:view': 'View financial reports and accounting data',\n          'user:view': 'View user accounts and permissions',\n          'user:create': 'Create new user accounts',\n          'reports:view': 'Access to system reports and analytics'\n        };\n        \n        return descriptions[permission] || 'No description available';\n      };\n\n      expect(getPermissionDescription('inventory:view')).toBe('View inventory items and stock levels');\n      expect(getPermissionDescription('sales:create')).toBe('Create new sales transactions');\n      expect(getPermissionDescription('unknown:permission')).toBe('No description available');\n    });\n  });\n\n  describe('Form Validation Logic', () => {\n    test('should validate required fields', () => {\n      const validateForm = (formData: any) => {\n        const errors: string[] = [];\n        \n        if (!formData.name || formData.name.trim() === '') {\n          errors.push('Name is required');\n        }\n        \n        if (!formData.email || formData.email.trim() === '') {\n          errors.push('Email is required');\n        }\n        \n        if (!formData.password || formData.password.trim() === '') {\n          errors.push('Password is required');\n        }\n        \n        return errors;\n      };\n\n      const emptyForm = { name: '', email: '', password: '' };\n      const validForm = { name: 'John Doe', email: 'john@example.com', password: 'password123' };\n      \n      const emptyFormErrors = validateForm(emptyForm);\n      const validFormErrors = validateForm(validForm);\n      \n      expect(emptyFormErrors).toContain('Name is required');\n      expect(emptyFormErrors).toContain('Email is required');\n      expect(emptyFormErrors).toContain('Password is required');\n      expect(validFormErrors).toHaveLength(0);\n    });\n\n    test('should validate password confirmation', () => {\n      const validatePasswordConfirmation = (password: string, confirmPassword: string) => {\n        return password === confirmPassword;\n      };\n\n      expect(validatePasswordConfirmation('password123', 'password123')).toBe(true);\n      expect(validatePasswordConfirmation('password123', 'different123')).toBe(false);\n    });\n  });\n\n  describe('Permission Search and Filtering', () => {\n    test('should filter permissions based on search query', () => {\n      const allPermissions = [\n        { id: 1, name: 'inventory:view', description: 'View Inventory' },\n        { id: 2, name: 'inventory:create', description: 'Create Inventory' },\n        { id: 3, name: 'sales:view', description: 'View Sales' },\n        { id: 4, name: 'sales:create', description: 'Create Sales' },\n        { id: 5, name: 'user:create', description: 'Create Users' }\n      ];\n\n      const filterPermissions = (permissions: any[], searchQuery: string) => {\n        if (!searchQuery.trim()) return permissions;\n        \n        const query = searchQuery.toLowerCase();\n        return permissions.filter(permission => \n          permission.name.toLowerCase().includes(query) ||\n          permission.description.toLowerCase().includes(query)\n        );\n      };\n\n      const inventoryResults = filterPermissions(allPermissions, 'inventory');\n      const salesResults = filterPermissions(allPermissions, 'sales');\n      const createResults = filterPermissions(allPermissions, 'create');\n      \n      expect(inventoryResults).toHaveLength(2);\n      expect(salesResults).toHaveLength(2);\n      expect(createResults).toHaveLength(3);\n      expect(inventoryResults[0].name).toBe('inventory:view');\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","test","userPermissions","hasPermission","permission","includes","expect","toBe","summaryData","totalInventoryValue","pendingTransfers","outstandingInvoices","lowStockItems","metrics","title","requiredPermission","visibleMetrics","filter","metric","toHaveLength","getAccessibleModules","modules","accessibleModules","toContain","not","roleTemplates","id","name","description","permissions","icon","color","inventoryManagerTemplate","applyTemplate","template","appliedPermissions","getPermissionDescription","descriptions","validateForm","formData","errors","trim","email","password","emptyForm","validForm","emptyFormErrors","validFormErrors","validatePasswordConfirmation","confirmPassword","allPermissions","filterPermissions","searchQuery","query","toLowerCase","inventoryResults","salesResults","createResults"],"mappings":"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"}