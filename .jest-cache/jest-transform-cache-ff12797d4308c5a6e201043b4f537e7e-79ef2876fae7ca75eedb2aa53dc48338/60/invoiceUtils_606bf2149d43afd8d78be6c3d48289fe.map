{"version":3,"names":["findOverdueInvoices","cov_1zavllnp3a","f","s","sendOverduePaymentReminders","today","Date","overdueInvoices","_prisma","prisma","invoice","findMany","where","dueDate","lt","paymentStatus","not","include","customer","error","console","_smsService","smsService","init","isConfigured","b","warn","success","message","successCount","failedCount","length","result","sendPaymentReminder","id","status","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/utils/invoiceUtils.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\n\n/**\n * Find all overdue invoices\n * @returns Array of overdue invoices\n */\nexport async function findOverdueInvoices() {\n    try {\n        const today = new Date();\n\n        // Find invoices that are past due date and not fully paid\n        const overdueInvoices = await prisma.invoice.findMany({\n            where: {\n                dueDate: {\n                    lt: today\n                },\n                paymentStatus: {\n                    not: 'paid'\n                }\n            },\n            include: {\n                customer: true\n            }\n        });\n\n        return overdueInvoices;\n    } catch (error) {\n        console.error('Error finding overdue invoices:', error);\n        throw error;\n    }\n}\n\n/**\n * Send payment reminders for all overdue invoices\n * @returns Object with success count and failed count\n */\nexport async function sendOverduePaymentReminders() {\n    try {\n        // Initialize SMS service\n        await smsService.init();\n\n        // Check if SMS service is configured\n        if (!smsService.isConfigured()) {\n            console.warn('SMS service is not configured or disabled');\n            return {\n                success: false,\n                message: 'SMS service is not configured or disabled',\n                successCount: 0,\n                failedCount: 0\n            };\n        }\n\n        // Find overdue invoices\n        const overdueInvoices = await findOverdueInvoices();\n\n        if (overdueInvoices.length === 0) {\n            return {\n                success: true,\n                message: 'No overdue invoices found',\n                successCount: 0,\n                failedCount: 0\n            };\n        }\n\n        // Send reminders\n        let successCount = 0;\n        let failedCount = 0;\n\n        for (const invoice of overdueInvoices) {\n            try {\n                const result = await smsService.sendPaymentReminder(invoice.id);\n\n                if (result.status >= 200 && result.status < 300) {\n                    successCount++;\n                } else {\n                    failedCount++;\n                }\n            } catch (error) {\n                console.error(`Error sending reminder for invoice ${invoice.id}:`, error);\n                failedCount++;\n            }\n        }\n\n        return {\n            success: true,\n            message: `Sent ${successCount} payment reminders (${failedCount} failed)`,\n            successCount,\n            failedCount\n        };\n    } catch (error) {\n        console.error('Error sending payment reminders:', error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : 'Unknown error',\n            successCount: 0,\n            failedCount: 0\n        };\n    }\n} "],"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","ignoreList":[]}