8414d6ad602cf0bb540b9c70f871669b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock NextResponse constructor
const NextResponse = {
    json: (data, init)=>({
            status: init?.status || 200,
            json: data
        })
};
// Mock implementations for testing
const mockPrisma = {
    user: {
        findUnique: jest.fn(),
        create: jest.fn(),
        findMany: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    },
    product: {
        findMany: jest.fn(),
        findUnique: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    },
    shop: {
        findUnique: jest.fn(),
        create: jest.fn()
    },
    refreshToken: {
        create: jest.fn(),
        findUnique: jest.fn(),
        delete: jest.fn()
    },
    $disconnect: jest.fn()
};
// Mock API handlers
const authHandler = {
    POST: async (req)=>{
        const body = await req.json();
        const { email, password } = body;
        if (!email || !password) {
            return NextResponse.json({
                error: "Email and password are required"
            }, {
                status: 400
            });
        }
        // Find user
        const user = await mockPrisma.user.findUnique({
            where: {
                email
            }
        });
        if (!user) {
            return NextResponse.json({
                error: "Invalid credentials"
            }, {
                status: 401
            });
        }
        // Verify password
        const isValid = await _bcryptjs.default.compare(password, user.password);
        if (!isValid) {
            return NextResponse.json({
                error: "Invalid credentials"
            }, {
                status: 401
            });
        }
        // Generate token
        const token = _jsonwebtoken.default.sign({
            userId: user.id,
            email: user.email
        }, process.env.JWT_SECRET || "test-secret", {
            expiresIn: "1h"
        });
        return NextResponse.json({
            user: {
                id: user.id,
                email: user.email,
                name: user.name
            },
            token
        });
    }
};
const productsHandler = {
    GET: async (req)=>{
        const url = new URL(req.url);
        const shopId = url.searchParams.get("shopId");
        const page = parseInt(url.searchParams.get("page") || "1");
        const limit = parseInt(url.searchParams.get("limit") || "10");
        const search = url.searchParams.get("search");
        if (!shopId) {
            return NextResponse.json({
                error: "Shop ID is required"
            }, {
                status: 400
            });
        }
        // Build where clause
        const where = {
            shopId
        };
        if (search) {
            where.OR = [
                {
                    name: {
                        contains: search,
                        mode: "insensitive"
                    }
                },
                {
                    description: {
                        contains: search,
                        mode: "insensitive"
                    }
                },
                {
                    sku: {
                        contains: search,
                        mode: "insensitive"
                    }
                }
            ];
        }
        const products = await mockPrisma.product.findMany({
            where,
            skip: (page - 1) * limit,
            take: limit,
            orderBy: {
                createdAt: "desc"
            }
        });
        return NextResponse.json({
            products,
            pagination: {
                page,
                limit,
                total: products.length
            }
        });
    },
    POST: async (req)=>{
        const authHeader = req.headers.get("authorization");
        if (!authHeader?.startsWith("Bearer ")) {
            return NextResponse.json({
                error: "Unauthorized"
            }, {
                status: 401
            });
        }
        const token = authHeader.substring(7);
        try {
            _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
        } catch  {
            return NextResponse.json({
                error: "Invalid token"
            }, {
                status: 401
            });
        }
        const body = await req.json();
        const { name, description, price, sku, shopId } = body;
        // Validation
        if (!name || !price || !sku || !shopId) {
            return NextResponse.json({
                error: "Name, price, SKU, and shop ID are required"
            }, {
                status: 400
            });
        }
        if (price <= 0) {
            return NextResponse.json({
                error: "Price must be greater than 0"
            }, {
                status: 400
            });
        }
        // Check if SKU already exists
        const existingProduct = await mockPrisma.product.findUnique({
            where: {
                sku_shopId: {
                    sku,
                    shopId
                }
            }
        });
        if (existingProduct) {
            return NextResponse.json({
                error: "Product with this SKU already exists"
            }, {
                status: 409
            });
        }
        const product = await mockPrisma.product.create({
            data: {
                name,
                description,
                price,
                sku,
                shopId,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });
        return NextResponse.json(product, {
            status: 201
        });
    }
};
const userHandler = {
    GET: async (req)=>{
        const authHeader = req.headers.get("authorization");
        if (!authHeader?.startsWith("Bearer ")) {
            return NextResponse.json({
                error: "Unauthorized"
            }, {
                status: 401
            });
        }
        const token = authHeader.substring(7);
        let decoded;
        try {
            decoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET || "test-secret");
        } catch  {
            return NextResponse.json({
                error: "Invalid token"
            }, {
                status: 401
            });
        }
        const user = await mockPrisma.user.findUnique({
            where: {
                id: decoded.userId
            },
            select: {
                id: true,
                email: true,
                name: true,
                permissions: true,
                shopId: true,
                isActive: true
            }
        });
        if (!user) {
            return NextResponse.json({
                error: "User not found"
            }, {
                status: 404
            });
        }
        return NextResponse.json({
            user
        });
    }
};
(0, _globals.describe)("API Routes Integration Tests", ()=>{
    (0, _globals.beforeAll)(()=>{
        process.env.JWT_SECRET = "test-secret";
    });
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.afterAll)(async ()=>{
        await mockPrisma.$disconnect();
    });
    (0, _globals.describe)("POST /api/auth/login", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            password: "$2a$10$hashedPassword",
            name: "Test User",
            shopId: "shop-1"
        };
        (0, _globals.it)("should successfully login with valid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(true);
            jest.spyOn(_jsonwebtoken.default, "sign").mockReturnValue("mock-token");
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: JSON.stringify({
                    email: "test@example.com",
                    password: "password123"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data).toEqual({
                user: {
                    id: 1,
                    email: "test@example.com",
                    name: "Test User"
                },
                token: "mock-token"
            });
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    email: "test@example.com"
                }
            });
        });
        (0, _globals.it)("should return 400 for missing credentials", async ()=>{
            // Arrange
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: JSON.stringify({
                    email: "test@example.com"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Email and password are required");
        });
        (0, _globals.it)("should return 401 for invalid credentials", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: JSON.stringify({
                    email: "nonexistent@example.com",
                    password: "password123"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid credentials");
        });
        (0, _globals.it)("should return 401 for wrong password", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(false);
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: JSON.stringify({
                    email: "test@example.com",
                    password: "wrongpassword"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await authHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid credentials");
        });
    });
    (0, _globals.describe)("GET /api/products", ()=>{
        const mockProducts = [
            {
                id: 1,
                name: "Product 1",
                description: "Description 1",
                price: 100,
                sku: "SKU001",
                shopId: "shop-1",
                createdAt: new Date()
            },
            {
                id: 2,
                name: "Product 2",
                description: "Description 2",
                price: 200,
                sku: "SKU002",
                shopId: "shop-1",
                createdAt: new Date()
            }
        ];
        (0, _globals.it)("should return products for valid shop ID", async ()=>{
            // Arrange
            mockPrisma.product.findMany.mockResolvedValue(mockProducts);
            const request = new NextRequest("http://localhost:3000/api/products?shopId=shop-1&page=1&limit=10");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.products).toEqual(mockProducts);
            (0, _globals.expect)(data.pagination).toEqual({
                page: 1,
                limit: 10,
                total: 2
            });
        });
        (0, _globals.it)("should return 400 for missing shop ID", async ()=>{
            // Arrange
            const request = new NextRequest("http://localhost:3000/api/products");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Shop ID is required");
        });
        (0, _globals.it)("should handle search functionality", async ()=>{
            // Arrange
            const filteredProducts = [
                mockProducts[0]
            ];
            mockPrisma.product.findMany.mockResolvedValue(filteredProducts);
            const request = new NextRequest("http://localhost:3000/api/products?shopId=shop-1&search=Product%201");
            // Act
            const response = await productsHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.products).toEqual(filteredProducts);
            (0, _globals.expect)(mockPrisma.product.findMany).toHaveBeenCalledWith({
                where: {
                    shopId: "shop-1",
                    OR: [
                        {
                            name: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        },
                        {
                            description: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        },
                        {
                            sku: {
                                contains: "Product 1",
                                mode: "insensitive"
                            }
                        }
                    ]
                },
                skip: 0,
                take: 10,
                orderBy: {
                    createdAt: "desc"
                }
            });
        });
    });
    (0, _globals.describe)("POST /api/products", ()=>{
        const validToken = "valid-token";
        const mockProduct = {
            id: 1,
            name: "New Product",
            description: "New Description",
            price: 150,
            sku: "SKU003",
            shopId: "shop-1",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        (0, _globals.beforeEach)(()=>{
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 1
            });
        });
        (0, _globals.it)("should create product with valid data and auth", async ()=>{
            // Arrange
            mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist
            mockPrisma.product.create.mockResolvedValue(mockProduct);
            const request = new NextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: JSON.stringify({
                    name: "New Product",
                    description: "New Description",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                }),
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(201);
            (0, _globals.expect)(data).toEqual(mockProduct);
            (0, _globals.expect)(mockPrisma.product.create).toHaveBeenCalledWith({
                data: _globals.expect.objectContaining({
                    name: "New Product",
                    description: "New Description",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                })
            });
        });
        (0, _globals.it)("should return 401 for missing authorization", async ()=>{
            // Arrange
            const request = new NextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: JSON.stringify({
                    name: "New Product",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Unauthorized");
        });
        (0, _globals.it)("should return 400 for invalid price", async ()=>{
            // Arrange
            const request = new NextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: JSON.stringify({
                    name: "New Product",
                    price: -10,
                    sku: "SKU003",
                    shopId: "shop-1"
                }),
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(data.error).toBe("Price must be greater than 0");
        });
        (0, _globals.it)("should return 409 for duplicate SKU", async ()=>{
            // Arrange
            mockPrisma.product.findUnique.mockResolvedValue(mockProduct); // SKU exists
            const request = new NextRequest("http://localhost:3000/api/products", {
                method: "POST",
                body: JSON.stringify({
                    name: "New Product",
                    price: 150,
                    sku: "SKU003",
                    shopId: "shop-1"
                }),
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${validToken}`
                }
            });
            // Act
            const response = await productsHandler.POST(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(409);
            (0, _globals.expect)(data.error).toBe("Product with this SKU already exists");
        });
    });
    (0, _globals.describe)("GET /api/user", ()=>{
        const mockUser = {
            id: 1,
            email: "test@example.com",
            name: "Test User",
            permissions: [
                "inventory:read",
                "sales:create"
            ],
            shopId: "shop-1",
            isActive: true
        };
        (0, _globals.it)("should return user data for valid token", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 1
            });
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const request = new NextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer valid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.user).toEqual(mockUser);
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    id: 1
                },
                select: {
                    id: true,
                    email: true,
                    name: true,
                    permissions: true,
                    shopId: true,
                    isActive: true
                }
            });
        });
        (0, _globals.it)("should return 401 for invalid token", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockImplementation(()=>{
                throw new Error("Invalid token");
            });
            const request = new NextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer invalid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(data.error).toBe("Invalid token");
        });
        (0, _globals.it)("should return 404 for non-existent user", async ()=>{
            // Arrange
            jest.spyOn(_jsonwebtoken.default, "verify").mockReturnValue({
                userId: 999
            });
            mockPrisma.user.findUnique.mockResolvedValue(null);
            const request = new NextRequest("http://localhost:3000/api/user", {
                headers: {
                    "Authorization": "Bearer valid-token"
                }
            });
            // Act
            const response = await userHandler.GET(request);
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(404);
            (0, _globals.expect)(data.error).toBe("User not found");
        });
    });
    (0, _globals.describe)("Error Handling", ()=>{
        (0, _globals.it)("should handle database connection errors", async ()=>{
            // Arrange
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Database connection failed"));
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: JSON.stringify({
                    email: "test@example.com",
                    password: "password123"
                }),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act & Assert
            await (0, _globals.expect)(authHandler.POST(request)).rejects.toThrow("Database connection failed");
        });
        (0, _globals.it)("should handle malformed JSON requests", async ()=>{
            // Arrange
            const request = new NextRequest("http://localhost:3000/api/auth/login", {
                method: "POST",
                body: "invalid json",
                headers: {
                    "Content-Type": "application/json"
                }
            });
            // Act & Assert
            await (0, _globals.expect)(authHandler.POST(request)).rejects.toThrow();
        });
    });
    (0, _globals.describe)("Rate Limiting Simulation", ()=>{
        (0, _globals.it)("should handle multiple concurrent requests", async ()=>{
            // Arrange
            const mockUser = {
                id: 1,
                email: "test@example.com",
                password: "$2a$10$hashedPassword",
                name: "Test User",
                shopId: "shop-1"
            };
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            jest.spyOn(_bcryptjs.default, "compare").mockResolvedValue(true);
            jest.spyOn(_jsonwebtoken.default, "sign").mockReturnValue("mock-token");
            const requests = Array.from({
                length: 5
            }, ()=>new NextRequest("http://localhost:3000/api/auth/login", {
                    method: "POST",
                    body: JSON.stringify({
                        email: "test@example.com",
                        password: "password123"
                    }),
                    headers: {
                        "Content-Type": "application/json"
                    }
                }));
            // Act
            const responses = await Promise.all(requests.map((req)=>authHandler.POST(req)));
            // Assert
            responses.forEach((response)=>{
                (0, _globals.expect)(response.status).toBe(200);
            });
            (0, _globals.expect)(mockPrisma.user.findUnique).toHaveBeenCalledTimes(5);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,