{"version":3,"names":["config","cov_1whg2y2s1h","f","s","middleware","generateUUID","b","crypto","randomUUID","replace","c","r","Math","random","v","toString","SHOP_RESTRICTED_ROUTES","ADMIN_CROSS_SHOP_ROUTES","validateShopAccess","req","targetShopId","userShopId","_auth","getShopIdFromToken","_userId","getUserIdFromToken","token","headers","get","split","targetShopIdNum","parseInt","error","console","addShopContext","response","userId","set","RATE_LIMIT_MAX_REQUESTS","process","env","RATE_LIMIT_WINDOW_MS","rateLimitStore","API_ROUTES","SKIP_PATHS","cleanupRateLimitStore","now","Date","ip","resetTime","setInterval","request","pathname","nextUrl","some","path","startsWith","endsWith","match","_server","NextResponse","next","NODE_ENV","SKIP_MIDDLEWARE","isShopRestricted","route","isAdminRoute","url","URL","queryShopId","searchParams","hasShopAccess","undefined","JSON","stringify","success","message","status","isRateLimitedRoute","count","max","includes","method","csrfTokenFromCookie","cookies","value","csrfTokenFromHeader","isAuthRoute","currentToken","csrfToken","name","httpOnly","sameSite","secure","maxAge","matcher"],"sources":["/Users/sachin/Documents/md-sports-/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getUserIdFromToken, getShopIdFromToken } from '@/lib/auth';\n\n// Generate UUID using Web Crypto API instead of Node.js crypto\nfunction generateUUID() {\n    // This implementation works in Edge Runtime\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n\n    // Fallback implementation\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n// Shop-specific API routes that need shop-based filtering\nconst SHOP_RESTRICTED_ROUTES = [\n    '/api/products',\n    '/api/inventory',\n    '/api/invoices',\n    '/api/purchases',\n    '/api/dashboard',\n    '/api/reports'\n];\n\n// Routes that allow cross-shop access for admins\nconst ADMIN_CROSS_SHOP_ROUTES = [\n    '/api/shops',\n    '/api/users',\n    '/api/settings',\n    '/api/reports/shop-performance',\n    '/api/reports/shop-comparison'\n];\n\n/**\n * Check if user has permission to access data from a specific shop\n */\nasync function validateShopAccess(req: NextRequest, targetShopId?: string | number): Promise<boolean> {\n    try {\n        const userShopId = await getShopIdFromToken(req);\n        const _userId = await getUserIdFromToken(req);\n\n        // Development mode - allow all access\n        const token = req.headers.get('authorization')?.split(' ')[1];\n        if (token === 'dev-token') {\n            return true;\n        }\n\n        // If no target shop specified, allow access\n        if (!targetShopId) {\n            return true;\n        }\n\n        // For Edge Runtime compatibility, we'll skip permission checks in middleware\n        // and rely on API route-level permission validation instead\n        // This is a temporary fix to avoid Prisma Edge Runtime issues\n        \n        // Allow access for now - permission checks will happen in API routes\n        // TODO: Implement edge-compatible permission checking if needed\n\n        // Check if user belongs to the target shop\n        const targetShopIdNum = typeof targetShopId === 'string' ? parseInt(targetShopId) : targetShopId;\n        return userShopId === targetShopIdNum;\n\n    } catch (error) {\n        console.error('Error validating shop access:', error);\n        return false;\n    }\n}\n\n/**\n * Add shop context to request headers for API routes\n */\nasync function addShopContext(req: NextRequest, response: NextResponse): Promise<NextResponse> {\n    const userShopId = await getShopIdFromToken(req);\n    const userId = await getUserIdFromToken(req);\n\n    if (userShopId) {\n        response.headers.set('X-User-Shop-Id', userShopId.toString());\n    }\n\n    if (userId) {\n        response.headers.set('X-User-Id', userId.toString());\n    }\n\n    return response;\n}\n\n// In-memory store for rate limiting (use Redis in production)\ninterface RateLimitStore {\n    [ip: string]: {\n        count: number;\n        resetTime: number;\n    };\n}\n\n// Rate limiting configuration\nconst RATE_LIMIT_MAX_REQUESTS = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10);\nconst RATE_LIMIT_WINDOW_MS = parseInt(process.env.RATE_LIMIT_WINDOW_MS || '60000', 10); // 1 minute\nconst rateLimitStore: RateLimitStore = {};\n\n// API routes that should be protected\nconst API_ROUTES = [\n    '/api/auth/login',\n    '/api/auth/register',\n    '/api/auth/refresh',\n];\n\n// Static assets and paths to skip middleware processing\nconst SKIP_PATHS = [\n    '/_next',\n    '/images',\n    '/favicon.ico',\n    '/robots.txt',\n    '/manifest.json',\n    '/sitemap.xml',\n    '.svg',\n    '.png',\n    '.jpg',\n    '.jpeg',\n    '.gif',\n    '.webp',\n    '.css',\n    '.js',\n];\n\n// Function to clean up expired rate limit entries\nconst cleanupRateLimitStore = () => {\n    const now = Date.now();\n    for (const ip in rateLimitStore) {\n        if (rateLimitStore[ip].resetTime < now) {\n            delete rateLimitStore[ip];\n        }\n    }\n};\n\n// Run cleanup every minute\nif (typeof setInterval !== 'undefined') {\n    setInterval(cleanupRateLimitStore, 60000);\n}\n\nexport async function middleware(request: NextRequest) {\n    const pathname = request.nextUrl.pathname;\n\n    // Skip middleware for static assets and non-critical paths\n    if (SKIP_PATHS.some(path => pathname.startsWith(path) || pathname.endsWith(path)) ||\n        pathname.startsWith('/_next') ||  // Skip Next.js internal paths\n        pathname.match(/\\.(svg|png|jpg|jpeg|gif|webp|css|js)$/)) { // Skip static files\n        return NextResponse.next();\n    }\n\n    // Skip middleware in development if needed\n    if (process.env.NODE_ENV === 'development' && process.env.SKIP_MIDDLEWARE === 'true') {\n        return NextResponse.next();\n    }\n\n    let response = NextResponse.next();\n\n    // Add shop-based access control for API routes\n    if (pathname.startsWith('/api/')) {\n        // Check if this is a shop-restricted route\n        const isShopRestricted = SHOP_RESTRICTED_ROUTES.some(route => pathname.startsWith(route));\n        const isAdminRoute = ADMIN_CROSS_SHOP_ROUTES.some(route => pathname.startsWith(route));\n\n        if (isShopRestricted && !isAdminRoute) {\n            // Extract shopId from query parameters if present\n            const url = new URL(request.url);\n            const queryShopId = url.searchParams.get('shopId');\n\n            // Validate shop access\n            const hasShopAccess = await validateShopAccess(request, queryShopId || undefined);\n\n            if (!hasShopAccess) {\n                return new NextResponse(JSON.stringify({\n                    success: false,\n                    message: 'Access denied: You can only access data from your assigned shop'\n                }), {\n                    status: 403,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n            }\n        }\n\n        // Add shop context to response headers\n        response = await addShopContext(request, response);\n    }\n\n    // Get IP address from X-Forwarded-For header or remote address for rate limiting\n    const ip = request.ip || 'unknown';\n\n    // Only rate limit specific API endpoints\n    const isRateLimitedRoute = API_ROUTES.some(route =>\n        pathname.startsWith(route)\n    );\n\n    if (isRateLimitedRoute) {\n        // Apply rate limiting\n        const now = Date.now();\n\n        if (!rateLimitStore[ip]) {\n            rateLimitStore[ip] = {\n                count: 0,\n                resetTime: now + RATE_LIMIT_WINDOW_MS,\n            };\n        }\n\n        // Reset count if window has passed\n        if (rateLimitStore[ip].resetTime < now) {\n            rateLimitStore[ip] = {\n                count: 0,\n                resetTime: now + RATE_LIMIT_WINDOW_MS,\n            };\n        }\n\n        // Increment count\n        rateLimitStore[ip].count++;\n\n        // Set rate limiting headers\n        response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\n        response.headers.set('X-RateLimit-Remaining', Math.max(0, RATE_LIMIT_MAX_REQUESTS - rateLimitStore[ip].count).toString());\n        response.headers.set('X-RateLimit-Reset', rateLimitStore[ip].resetTime.toString());\n\n        // Check if rate limit exceeded\n        if (rateLimitStore[ip].count > RATE_LIMIT_MAX_REQUESTS) {\n            return new NextResponse(JSON.stringify({\n                success: false,\n                message: 'Too many requests, please try again later.'\n            }), {\n                status: 429,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Retry-After': '60',\n                    'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),\n                    'X-RateLimit-Remaining': '0',\n                    'X-RateLimit-Reset': rateLimitStore[ip].resetTime.toString(),\n                }\n            });\n        }\n    }\n\n    // Set security headers only for HTML responses, not for API or assets\n    if (!pathname.startsWith('/api/') && !pathname.includes('.')) {\n        response.headers.set('X-Content-Type-Options', 'nosniff');\n        response.headers.set('X-Frame-Options', 'DENY');\n        response.headers.set('X-XSS-Protection', '1; mode=block');\n        response.headers.set('Referrer-Policy', 'same-origin');\n    }\n\n    // Add CSRF protection only for non-GET methods that are not static assets\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n        const csrfTokenFromCookie = request.cookies.get('csrfToken')?.value;\n        const csrfTokenFromHeader = request.headers.get('X-CSRF-Token');\n\n        // Skip CSRF check for login and initial auth routes\n        const isAuthRoute = ['/api/auth/login', '/api/auth/register'].some(\n            route => pathname.startsWith(route)\n        );\n\n        if (!isAuthRoute && (!csrfTokenFromCookie || csrfTokenFromHeader !== csrfTokenFromCookie)) {\n            return new NextResponse(JSON.stringify({\n                success: false,\n                message: 'Invalid CSRF token'\n            }), {\n                status: 403,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n        }\n    }\n\n    // For GET requests to pages, set a new CSRF token if one doesn't exist\n    // Only do this for HTML page requests, not for assets or API calls\n    if (request.method === 'GET' &&\n        !pathname.startsWith('/api/') &&\n        !pathname.includes('.') &&\n        !pathname.startsWith('/_next')) {\n\n        const currentToken = request.cookies.get('csrfToken')?.value;\n        if (!currentToken) {\n            const csrfToken = generateUUID();\n            response.cookies.set({\n                name: 'csrfToken',\n                value: csrfToken,\n                httpOnly: false, // Made accessible to JavaScript\n                sameSite: 'strict',\n                secure: process.env.NODE_ENV === 'production',\n                path: '/',\n                maxAge: 60 * 60 * 24, // 1 day\n            });\n        }\n    }\n\n    return response;\n}\n\nexport const config = {\n    matcher: [\n        // Apply the middleware to all API routes and page routes\n        // Exclude static assets and _next directory\n        '/api/:path*',\n        '/:path*',\n        '/:path*/:subpath*',\n    ],\n};"],"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","ignoreList":[]}