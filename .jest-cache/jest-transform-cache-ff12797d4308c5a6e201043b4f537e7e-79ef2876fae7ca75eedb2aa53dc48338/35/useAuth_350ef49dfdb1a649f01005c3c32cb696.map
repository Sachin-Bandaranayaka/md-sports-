{"version":3,"names":["cov_2nnkk9tup4","actualCoverage","s","AuthProvider","f","api","useAuth","AuthContext","_react","createContext","undefined","_axios","default","create","baseURL","headers","children","user","setUser","useState","accessToken","setAccessToken","isLoading","setIsLoading","router","_navigation","useRouter","useEffect","requestInterceptor","interceptors","request","use","config","currentToken","b","localStorage","getItem","Authorization","csrfToken","getCookie","method","error","Promise","reject","responseInterceptor","response","originalRequest","status","_retry","console","log","refreshResponse","post","withCredentials","data","success","newAccessToken","setItem","substring","message","logout","refreshError","eject","validateAuth","storedAccessToken","get","warn","validationError","removeItem","login","email","password","userData","useCallback","push","hasPermission","permission","permissions","includes","getUserPermissions","name","value","document","cookie","parts","split","length","pop","shift","_jsxruntime","jsx","Provider","isAuthenticated","context","useContext","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\n\n// Types\ninterface User {\n    id: number;\n    username: string;\n    fullName: string;\n    email: string;\n    roleId: number;\n    roleName: string;\n    shopId?: number;\n    permissions: string[];\n}\n\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken || localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                if ((error.response?.status === 401) && !originalRequest._retry) { // Only retry on 401 for token refresh\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        const refreshResponse = await axios.post('/api/auth/refresh', {}, {\n                            withCredentials: true\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n                            localStorage.setItem('accessToken', newAccessToken);\n                            localStorage.setItem('authToken', newAccessToken); // Keep for compatibility if still used\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                        }\n                        await logout(); // Logout on any error during refresh process\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken]); // Added accessToken to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                const storedAccessToken = localStorage.getItem('accessToken') || localStorage.getItem('authToken');\n\n                if (storedAccessToken) {\n                    console.log('Found stored accessToken, validating with /api/auth/validate...');\n                    try {\n                        const response = await api.get('/api/auth/validate', {\n                            headers: { Authorization: `Bearer ${storedAccessToken}` },\n                        });\n                        if (response.data.success) {\n                            setUser(response.data.user);\n                            setAccessToken(storedAccessToken); // Keep current token if still valid\n                            // The /api/auth/validate does not return a token, it validates the existing one.\n                            // No need to set localStorage items here again if they were already set.\n                            console.log('Stored accessToken is valid.');\n                        } else {\n                            // This case should ideally be handled by the 401 response from /validate directly\n                            console.warn('/api/auth/validate returned success:false, but not an error status. This is unusual.');\n                            // Attempt refresh if validate says not success but didn't error with 401\n                            // This scenario might indicate a valid token but inactive user, etc. which validate handles.\n                            // For now, let the interceptor handle 401s if validate actually throws one.\n                        }\n                    } catch (validationError: any) {\n                        console.log('Initial /api/auth/validate call failed. Error status:', validationError?.response?.status);\n                        // If validation fails (e.g. 401), the response interceptor will try to refresh.\n                        // If refresh also fails, user will be logged out by interceptor.\n                        // No need to explicitly call refresh here if interceptor handles it.\n                        if (!(validationError.response?.status === 401 && !validationError.config?._retry)) {\n                            // If it's not a 401 that the interceptor will handle, or if it's already a retry, clear auth.\n                            // This might happen if /validate returns e.g. 500, or if it was a 401 and refresh already failed.\n                            console.log('Clearing auth state due to unhandled validation error or failed refresh.');\n                            setUser(null);\n                            setAccessToken(null);\n                            localStorage.removeItem('accessToken');\n                            localStorage.removeItem('authToken');\n                        }\n                        // The error will be re-thrown or handled by the interceptor trying to refresh\n                    }\n                } else {\n                    console.log('No stored accessToken found.');\n                    // No token, user is not logged in\n                }\n            } catch (error) {\n                // Catch-all for unexpected errors during initial auth validation phase\n                console.error('Unexpected error in validateAuth:', error);\n                setUser(null);\n                setAccessToken(null);\n                localStorage.removeItem('accessToken');\n                localStorage.removeItem('authToken');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, [logout]); // Include logout in dependencies\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n                localStorage.setItem('accessToken', newAccessToken);\n                localStorage.setItem('authToken', newAccessToken); // for compatibility\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        return false;\n    };\n\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('authToken');\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return user.permissions.includes(permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                accessToken,\n                isLoading,\n                isAuthenticated: !!user,\n                login,\n                logout,\n                hasPermission,\n                getUserPermissions,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}