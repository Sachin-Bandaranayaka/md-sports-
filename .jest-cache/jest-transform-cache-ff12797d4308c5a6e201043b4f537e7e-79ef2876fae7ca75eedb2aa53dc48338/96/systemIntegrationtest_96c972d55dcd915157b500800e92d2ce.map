{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/systemIntegration.test.ts"],"sourcesContent":["import '@testing-library/jest-dom';\n\n// Mock hooks and dependencies\nconst mockUseAuth = jest.fn();\nconst mockUsePermission = jest.fn();\nconst mockPush = jest.fn();\nconst mockReplace = jest.fn();\nconst mockBack = jest.fn();\n\njest.mock('../../src/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\njest.mock('../../src/hooks/usePermission', () => ({\n  usePermission: () => mockUsePermission(),\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: mockReplace,\n    back: mockBack,\n  }),\n  useSearchParams: () => new URLSearchParams(),\n  usePathname: () => '/dashboard',\n}));\n\n// Mock global fetch\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', {\n  value: mockLocalStorage,\n});\n\n// Mock sessionStorage\nconst mockSessionStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'sessionStorage', {\n  value: mockSessionStorage,\n});\n\n// Mock WebSocket\nconst mockWebSocket = {\n  send: jest.fn(),\n  close: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  readyState: WebSocket.OPEN,\n};\nglobal.WebSocket = jest.fn(() => mockWebSocket) as any;\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Sample data for testing\nconst mockUser = {\n  id: '1',\n  email: 'test@example.com',\n  name: 'Test User',\n  role: 'admin',\n  permissions: ['read:invoices', 'write:invoices', 'read:inventory', 'write:inventory'],\n};\n\nconst mockCustomer = {\n  id: '1',\n  name: 'Test Customer',\n  email: 'customer@example.com',\n  phone: '+1234567890',\n  address: '123 Test St',\n  creditLimit: 5000,\n  currentBalance: 1500,\n};\n\nconst mockProduct = {\n  id: '1',\n  name: 'Test Product',\n  sku: 'TEST-001',\n  barcode: '1234567890123',\n  price: 99.99,\n  cost: 60.00,\n  stock: 100,\n  category: 'Electronics',\n  supplier: 'Test Supplier',\n};\n\nconst mockInvoice = {\n  id: '1',\n  invoiceNumber: 'INV-000001',\n  customerId: '1',\n  customer: mockCustomer,\n  items: [\n    {\n      id: '1',\n      productId: '1',\n      product: mockProduct,\n      quantity: 2,\n      unitPrice: 99.99,\n      total: 199.98,\n    },\n  ],\n  subtotal: 199.98,\n  tax: 20.00,\n  total: 219.98,\n  status: 'pending',\n  dueDate: '2024-02-15',\n  createdAt: '2024-01-15T10:00:00Z',\n};\n\ndescribe('System Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default auth state\n    mockUseAuth.mockReturnValue({\n      user: mockUser,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      loading: false,\n    });\n    \n    // Default permission state\n    mockUsePermission.mockReturnValue({\n      hasPermission: jest.fn().mockReturnValue(true),\n      hasAnyPermission: jest.fn().mockReturnValue(true),\n      hasAllPermissions: jest.fn().mockReturnValue(true),\n    });\n    \n    // Default fetch responses\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({ success: true }),\n      status: 200,\n    });\n    \n    // Clear storage\n    mockLocalStorage.getItem.mockReturnValue(null);\n    mockSessionStorage.getItem.mockReturnValue(null);\n  });\n\n  describe('End-to-End Invoice Workflow', () => {\n    test('should complete full invoice creation and payment workflow', async () => {\n      // Step 1: Create customer if not exists\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ customers: [] }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ customer: mockCustomer }),\n        });\n      \n      // Search for customer\n      const customerResponse = await fetch('/api/customers?search=test@example.com');\n      const customerData = await customerResponse.json();\n      \n      expect(customerData.customers).toEqual([]);\n      \n      // Create new customer\n      const newCustomerResponse = await fetch('/api/customers', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'Test Customer',\n          email: 'customer@example.com',\n          phone: '+1234567890',\n          address: '123 Test St',\n          creditLimit: 5000,\n        }),\n      });\n      \n      const newCustomer = await newCustomerResponse.json();\n      expect(newCustomer.customer).toEqual(mockCustomer);\n      \n      // Step 2: Check product availability\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ product: mockProduct }),\n      });\n      \n      const productResponse = await fetch('/api/products/1');\n      const productData = await productResponse.json();\n      \n      expect(productData.product.stock).toBeGreaterThanOrEqual(2);\n      \n      // Step 3: Create invoice\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ invoice: mockInvoice }),\n      });\n      \n      const invoiceResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        body: JSON.stringify({\n          customerId: mockCustomer.id,\n          items: [\n            {\n              productId: mockProduct.id,\n              quantity: 2,\n              unitPrice: mockProduct.price,\n            },\n          ],\n          dueDate: '2024-02-15',\n        }),\n      });\n      \n      const invoiceData = await invoiceResponse.json();\n      expect(invoiceData.invoice.total).toBe(219.98);\n      \n      // Step 4: Update inventory\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ \n          product: { ...mockProduct, stock: mockProduct.stock - 2 } \n        }),\n      });\n      \n      const inventoryResponse = await fetch('/api/products/1/stock', {\n        method: 'PUT',\n        body: JSON.stringify({\n          quantity: -2,\n          reason: 'sale',\n          invoiceId: mockInvoice.id,\n        }),\n      });\n      \n      const updatedProduct = await inventoryResponse.json();\n      expect(updatedProduct.product.stock).toBe(98);\n      \n      // Step 5: Process payment\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ \n          payment: {\n            id: '1',\n            invoiceId: mockInvoice.id,\n            amount: 219.98,\n            method: 'credit_card',\n            status: 'completed',\n          }\n        }),\n      });\n      \n      const paymentResponse = await fetch('/api/payments', {\n        method: 'POST',\n        body: JSON.stringify({\n          invoiceId: mockInvoice.id,\n          amount: 219.98,\n          method: 'credit_card',\n        }),\n      });\n      \n      const paymentData = await paymentResponse.json();\n      expect(paymentData.payment.status).toBe('completed');\n      \n      // Verify all API calls were made\n      expect(mockFetch).toHaveBeenCalledTimes(6);\n    });\n\n    test('should handle inventory shortage during invoice creation', async () => {\n      // Mock product with insufficient stock\n      const lowStockProduct = { ...mockProduct, stock: 1 };\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ product: lowStockProduct }),\n      });\n      \n      const productResponse = await fetch('/api/products/1');\n      const productData = await productResponse.json();\n      \n      expect(productData.product.stock).toBeLessThan(2);\n      \n      // Attempt to create invoice with insufficient stock\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ \n          error: 'Insufficient stock',\n          available: 1,\n          requested: 2,\n        }),\n      });\n      \n      const invoiceResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        body: JSON.stringify({\n          customerId: mockCustomer.id,\n          items: [\n            {\n              productId: mockProduct.id,\n              quantity: 2,\n              unitPrice: mockProduct.price,\n            },\n          ],\n        }),\n      });\n      \n      expect(invoiceResponse.ok).toBe(false);\n      expect(invoiceResponse.status).toBe(400);\n      \n      const errorData = await invoiceResponse.json();\n      expect(errorData.error).toBe('Insufficient stock');\n    });\n  });\n\n  describe('Real-time Updates Integration', () => {\n    test('should handle real-time inventory updates via WebSocket', async () => {\n      const mockOnMessage = jest.fn();\n      const mockOnError = jest.fn();\n      const mockOnClose = jest.fn();\n      \n      // Simulate WebSocket connection\n      const ws = new WebSocket('ws://localhost:3000/ws');\n      \n      // Simulate receiving inventory update\n      const inventoryUpdate = {\n        type: 'inventory_update',\n        productId: '1',\n        newStock: 95,\n        reason: 'sale',\n        timestamp: new Date().toISOString(),\n      };\n      \n      // Simulate message received\n      mockWebSocket.addEventListener.mockImplementation((event, callback) => {\n        if (event === 'message') {\n          setTimeout(() => {\n            callback({ data: JSON.stringify(inventoryUpdate) });\n          }, 100);\n        }\n      });\n      \n      ws.addEventListener('message', mockOnMessage);\n      \n      // Wait for message\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(mockWebSocket.addEventListener).toHaveBeenCalledWith('message', expect.any(Function));\n    });\n\n    test('should handle real-time invoice status updates', async () => {\n      const statusUpdate = {\n        type: 'invoice_status_update',\n        invoiceId: '1',\n        status: 'paid',\n        paidAmount: 219.98,\n        paidAt: new Date().toISOString(),\n      };\n      \n      // Simulate WebSocket message\n      mockWebSocket.addEventListener.mockImplementation((event, callback) => {\n        if (event === 'message') {\n          setTimeout(() => {\n            callback({ data: JSON.stringify(statusUpdate) });\n          }, 100);\n        }\n      });\n      \n      const ws = new WebSocket('ws://localhost:3000/ws');\n      const mockHandler = jest.fn();\n      ws.addEventListener('message', mockHandler);\n      \n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(mockWebSocket.addEventListener).toHaveBeenCalled();\n    });\n  });\n\n  describe('Authentication and Authorization Flow', () => {\n    test('should handle complete authentication flow', async () => {\n      // Step 1: Login\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          user: mockUser,\n          token: 'mock-jwt-token',\n          refreshToken: 'mock-refresh-token',\n        }),\n      });\n      \n      const loginResponse = await fetch('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n      \n      const loginData = await loginResponse.json();\n      expect(loginData.user).toEqual(mockUser);\n      expect(loginData.token).toBeDefined();\n      \n      // Step 2: Simulate token storage (would be handled by auth service)\n      mockLocalStorage.getItem.mockImplementation((key) => {\n        if (key === 'auth_token') return 'mock-jwt-token';\n        if (key === 'refresh_token') return 'mock-refresh-token';\n        return null;\n      });\n      \n      // Step 3: Access protected resource\n      mockLocalStorage.getItem.mockReturnValue('mock-jwt-token');\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ invoices: [mockInvoice] }),\n      });\n      \n      const protectedResponse = await fetch('/api/invoices', {\n        headers: {\n          Authorization: 'Bearer mock-jwt-token',\n        },\n      });\n      \n      expect(protectedResponse.ok).toBe(true);\n      \n      // Step 4: Handle token refresh\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: false,\n          status: 401,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            token: 'new-jwt-token',\n            refreshToken: 'new-refresh-token',\n          }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ invoices: [mockInvoice] }),\n        });\n      \n      // First request fails with 401\n      const expiredResponse = await fetch('/api/invoices', {\n        headers: {\n          Authorization: 'Bearer expired-token',\n        },\n      });\n      \n      expect(expiredResponse.status).toBe(401);\n      \n      // Refresh token\n      const refreshResponse = await fetch('/api/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({\n          refreshToken: 'mock-refresh-token',\n        }),\n      });\n      \n      const refreshData = await refreshResponse.json();\n      expect(refreshData.token).toBe('new-jwt-token');\n      \n      // Retry with new token\n      const retryResponse = await fetch('/api/invoices', {\n        headers: {\n          Authorization: 'Bearer new-jwt-token',\n        },\n      });\n      \n      expect(retryResponse.ok).toBe(true);\n    });\n\n    test('should handle permission-based access control', async () => {\n      // Test user with limited permissions\n      const limitedUser = {\n        ...mockUser,\n        role: 'viewer',\n        permissions: ['read:invoices'],\n      };\n      \n      mockUseAuth.mockReturnValue({\n        user: limitedUser,\n        isAuthenticated: true,\n        login: jest.fn(),\n        logout: jest.fn(),\n        loading: false,\n      });\n      \n      mockUsePermission.mockReturnValue({\n        hasPermission: jest.fn((permission) => {\n          return limitedUser.permissions.includes(permission);\n        }),\n        hasAnyPermission: jest.fn((permissions) => {\n          return permissions.some(p => limitedUser.permissions.includes(p));\n        }),\n        hasAllPermissions: jest.fn((permissions) => {\n          return permissions.every(p => limitedUser.permissions.includes(p));\n        }),\n      });\n      \n      const { hasPermission } = mockUsePermission();\n      \n      // Should have read access\n      expect(hasPermission('read:invoices')).toBe(true);\n      \n      // Should not have write access\n      expect(hasPermission('write:invoices')).toBe(false);\n      \n      // API should reject write operations\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 403,\n        json: async () => ({ error: 'Insufficient permissions' }),\n      });\n      \n      const writeResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer mock-token',\n        },\n        body: JSON.stringify(mockInvoice),\n      });\n      \n      expect(writeResponse.status).toBe(403);\n    });\n  });\n\n  describe('Data Consistency and Validation', () => {\n    test('should maintain data consistency across operations', async () => {\n      // Create invoice\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ invoice: mockInvoice }),\n      });\n      \n      const createResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        body: JSON.stringify({\n          customerId: mockCustomer.id,\n          items: mockInvoice.items,\n        }),\n      });\n      \n      const createdInvoice = await createResponse.json();\n      \n      // Verify calculations\n      const expectedSubtotal = mockInvoice.items.reduce(\n        (sum, item) => sum + item.total,\n        0\n      );\n      const expectedTax = Math.round(expectedSubtotal * 0.1 * 100) / 100;\n      const expectedTotal = expectedSubtotal + expectedTax;\n      \n      expect(createdInvoice.invoice.subtotal).toBe(expectedSubtotal);\n      expect(createdInvoice.invoice.tax).toBe(expectedTax);\n      expect(createdInvoice.invoice.total).toBe(expectedTotal);\n      \n      // Update invoice\n      const updatedItems = [\n        {\n          ...mockInvoice.items[0],\n          quantity: 3,\n          total: 299.97,\n        },\n      ];\n      \n      const updatedInvoice = {\n        ...mockInvoice,\n        items: updatedItems,\n        subtotal: 299.97,\n        tax: 30.00,\n        total: 329.97,\n      };\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ invoice: updatedInvoice }),\n      });\n      \n      const updateResponse = await fetch(`/api/invoices/${mockInvoice.id}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: updatedItems,\n        }),\n      });\n      \n      const updateData = await updateResponse.json();\n      \n      // Verify updated calculations\n      expect(updateData.invoice.subtotal).toBe(299.97);\n      expect(updateData.invoice.total).toBe(329.97);\n    });\n\n    test('should validate business rules across modules', async () => {\n      // Test credit limit validation\n      const highValueInvoice = {\n        ...mockInvoice,\n        total: 6000, // Exceeds customer credit limit\n      };\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Credit limit exceeded',\n          creditLimit: mockCustomer.creditLimit,\n          currentBalance: mockCustomer.currentBalance,\n          requestedAmount: 6000,\n          availableCredit: 3500,\n        }),\n      });\n      \n      const creditResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        body: JSON.stringify(highValueInvoice),\n      });\n      \n      expect(creditResponse.status).toBe(400);\n      \n      const creditError = await creditResponse.json();\n      expect(creditError.error).toBe('Credit limit exceeded');\n      \n      // Test inventory validation\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Insufficient inventory',\n          productId: mockProduct.id,\n          available: 50,\n          requested: 100,\n        }),\n      });\n      \n      const inventoryResponse = await fetch('/api/invoices', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...mockInvoice,\n          items: [\n            {\n              ...mockInvoice.items[0],\n              quantity: 100, // Exceeds available stock\n            },\n          ],\n        }),\n      });\n      \n      expect(inventoryResponse.status).toBe(400);\n      \n      const inventoryError = await inventoryResponse.json();\n      expect(inventoryError.error).toBe('Insufficient inventory');\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    test('should handle network failures gracefully', async () => {\n      // Simulate network error\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n      \n      try {\n        await fetch('/api/invoices');\n      } catch (error) {\n        expect(error.message).toBe('Network error');\n      }\n      \n      // Simulate retry logic\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ invoices: [mockInvoice] }),\n      });\n      \n      const retryResponse = await fetch('/api/invoices');\n      expect(retryResponse.ok).toBe(true);\n    });\n\n    test('should handle partial failures in batch operations', async () => {\n      const batchItems = [\n        { id: '1', name: 'Item 1' },\n        { id: '2', name: 'Item 2' },\n        { id: '3', name: 'Item 3' },\n      ];\n      \n      // Simulate partial success\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          results: [\n            { id: '1', status: 'success' },\n            { id: '2', status: 'error', error: 'Validation failed' },\n            { id: '3', status: 'success' },\n          ],\n          summary: {\n            total: 3,\n            successful: 2,\n            failed: 1,\n          },\n        }),\n      });\n      \n      const batchResponse = await fetch('/api/batch/process', {\n        method: 'POST',\n        body: JSON.stringify({ items: batchItems }),\n      });\n      \n      const batchResult = await batchResponse.json();\n      \n      expect(batchResult.summary.successful).toBe(2);\n      expect(batchResult.summary.failed).toBe(1);\n      expect(batchResult.results[1].status).toBe('error');\n    });\n  });\n\n  describe('Performance and Caching', () => {\n    test('should implement proper caching strategies', async () => {\n      // First request - cache miss\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        headers: new Headers({\n          'Cache-Control': 'max-age=300',\n          'ETag': '\"abc123\"',\n        }),\n        json: async () => ({ products: [mockProduct] }),\n      });\n      \n      const firstResponse = await fetch('/api/products');\n      const firstData = await firstResponse.json();\n      \n      expect(firstData.products).toEqual([mockProduct]);\n      \n      // Second request - cache hit (304 Not Modified)\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 304,\n        headers: new Headers({\n          'ETag': '\"abc123\"',\n        }),\n      });\n      \n      const secondResponse = await fetch('/api/products', {\n        headers: {\n          'If-None-Match': '\"abc123\"',\n        },\n      });\n      \n      expect(secondResponse.status).toBe(304);\n    });\n\n    test('should handle pagination efficiently', async () => {\n      const pageSize = 10;\n      const totalItems = 25;\n      \n      // First page\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          invoices: Array(pageSize).fill(mockInvoice),\n          pagination: {\n            page: 1,\n            pageSize,\n            total: totalItems,\n            totalPages: 3,\n            hasNext: true,\n            hasPrev: false,\n          },\n        }),\n      });\n      \n      const firstPageResponse = await fetch('/api/invoices?page=1&limit=10');\n      const firstPageData = await firstPageResponse.json();\n      \n      expect(firstPageData.invoices).toHaveLength(pageSize);\n      expect(firstPageData.pagination.hasNext).toBe(true);\n      \n      // Last page\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          invoices: Array(5).fill(mockInvoice), // Remaining items\n          pagination: {\n            page: 3,\n            pageSize,\n            total: totalItems,\n            totalPages: 3,\n            hasNext: false,\n            hasPrev: true,\n          },\n        }),\n      });\n      \n      const lastPageResponse = await fetch('/api/invoices?page=3&limit=10');\n      const lastPageData = await lastPageResponse.json();\n      \n      expect(lastPageData.invoices).toHaveLength(5);\n      expect(lastPageData.pagination.hasNext).toBe(false);\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","usePermission","mockUsePermission","useRouter","push","mockPush","replace","mockReplace","back","mockBack","useSearchParams","URLSearchParams","usePathname","fn","mockFetch","global","fetch","mockLocalStorage","getItem","setItem","removeItem","clear","Object","defineProperty","window","value","mockSessionStorage","mockWebSocket","send","close","addEventListener","removeEventListener","readyState","WebSocket","OPEN","writable","mockImplementation","query","matches","media","onchange","addListener","removeListener","dispatchEvent","mockUser","id","email","name","role","permissions","mockCustomer","phone","address","creditLimit","currentBalance","mockProduct","sku","barcode","price","cost","stock","category","supplier","mockInvoice","invoiceNumber","customerId","customer","items","productId","product","quantity","unitPrice","total","subtotal","tax","status","dueDate","createdAt","describe","beforeEach","clearAllMocks","mockReturnValue","user","isAuthenticated","login","logout","loading","hasPermission","hasAnyPermission","hasAllPermissions","mockResolvedValue","ok","json","success","test","mockResolvedValueOnce","customers","customerResponse","customerData","expect","toEqual","newCustomerResponse","method","body","JSON","stringify","newCustomer","productResponse","productData","toBeGreaterThanOrEqual","invoice","invoiceResponse","invoiceData","toBe","inventoryResponse","reason","invoiceId","updatedProduct","payment","amount","paymentResponse","paymentData","toHaveBeenCalledTimes","lowStockProduct","toBeLessThan","error","available","requested","errorData","mockOnMessage","mockOnError","mockOnClose","ws","inventoryUpdate","type","newStock","timestamp","Date","toISOString","event","callback","setTimeout","data","Promise","resolve","toHaveBeenCalledWith","any","Function","statusUpdate","paidAmount","paidAt","mockHandler","toHaveBeenCalled","token","refreshToken","loginResponse","password","loginData","toBeDefined","key","invoices","protectedResponse","headers","Authorization","expiredResponse","refreshResponse","refreshData","retryResponse","limitedUser","permission","includes","some","p","every","writeResponse","createResponse","createdInvoice","expectedSubtotal","reduce","sum","item","expectedTax","Math","round","expectedTotal","updatedItems","updatedInvoice","updateResponse","updateData","highValueInvoice","requestedAmount","availableCredit","creditResponse","creditError","inventoryError","mockRejectedValueOnce","Error","message","batchItems","results","summary","successful","failed","batchResponse","batchResult","Headers","products","firstResponse","firstData","secondResponse","pageSize","totalItems","Array","fill","pagination","page","totalPages","hasNext","hasPrev","firstPageResponse","firstPageData","toHaveLength","lastPageResponse","lastPageData"],"mappings":"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"}