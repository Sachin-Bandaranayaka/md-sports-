c736a99617596a620aaf79ba69768d83
"use strict";
const { PrismaClient } = require("@prisma/client");
const { cleanupCache } = require("../../src/lib/cache");
module.exports = async ()=>{
    console.log("\uD83E\uDDF9 Starting Jest global teardown...");
    // Clean up cache intervals
    try {
        cleanupCache();
        console.log("\uD83E\uDDF9 Cache cleanup completed");
    } catch (error) {
        console.error("❌ Cache cleanup failed:", error);
    }
    // Clean up test database if needed
    if (process.env.SETUP_TEST_DB === "true") {
        const prisma = new PrismaClient();
        try {
            await prisma.$connect();
            // Clean up test data
            await cleanupTestData(prisma);
            console.log("\uD83D\uDDD1️ Test data cleaned up");
        } catch (error) {
            console.error("❌ Test cleanup failed:", error);
        // Don't throw to avoid failing the teardown
        } finally{
            await prisma.$disconnect();
        }
    }
    console.log("✅ Jest global teardown completed");
};
async function cleanupTestData(prisma) {
    try {
        // Clean up Jest-specific test data
        await prisma.shop.deleteMany({
            where: {
                id: "test-shop-jest"
            }
        });
        // Clean up any other test artifacts
        await prisma.user.deleteMany({
            where: {
                email: {
                    endsWith: "@jest.test"
                }
            }
        });
    } catch (error) {
        console.warn("⚠️ Cleanup warning:", error.message);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvc2V0dXAvZ2xvYmFsLXRlYXJkb3duLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUHJpc21hQ2xpZW50IH0gPSByZXF1aXJlKCdAcHJpc21hL2NsaWVudCcpO1xuXG5jb25zdCB7IGNsZWFudXBDYWNoZSB9ID0gcmVxdWlyZSgnLi4vLi4vc3JjL2xpYi9jYWNoZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ/Cfp7kgU3RhcnRpbmcgSmVzdCBnbG9iYWwgdGVhcmRvd24uLi4nKTtcbiAgXG4gIC8vIENsZWFuIHVwIGNhY2hlIGludGVydmFsc1xuICB0cnkge1xuICAgIGNsZWFudXBDYWNoZSgpO1xuICAgIGNvbnNvbGUubG9nKCfwn6e5IENhY2hlIGNsZWFudXAgY29tcGxldGVkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIENhY2hlIGNsZWFudXAgZmFpbGVkOicsIGVycm9yKTtcbiAgfVxuICBcbiAgLy8gQ2xlYW4gdXAgdGVzdCBkYXRhYmFzZSBpZiBuZWVkZWRcbiAgaWYgKHByb2Nlc3MuZW52LlNFVFVQX1RFU1RfREIgPT09ICd0cnVlJykge1xuICAgIGNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJpc21hLiRjb25uZWN0KCk7XG4gICAgICBcbiAgICAgIC8vIENsZWFuIHVwIHRlc3QgZGF0YVxuICAgICAgYXdhaXQgY2xlYW51cFRlc3REYXRhKHByaXNtYSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCfwn5eR77iPIFRlc3QgZGF0YSBjbGVhbmVkIHVwJyk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIFRlc3QgY2xlYW51cCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgLy8gRG9uJ3QgdGhyb3cgdG8gYXZvaWQgZmFpbGluZyB0aGUgdGVhcmRvd25cbiAgICB9IGZpbmFsbHkge1xuICAgICAgYXdhaXQgcHJpc21hLiRkaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG4gIFxuICBjb25zb2xlLmxvZygn4pyFIEplc3QgZ2xvYmFsIHRlYXJkb3duIGNvbXBsZXRlZCcpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gY2xlYW51cFRlc3REYXRhKHByaXNtYSkge1xuICB0cnkge1xuICAgIC8vIENsZWFuIHVwIEplc3Qtc3BlY2lmaWMgdGVzdCBkYXRhXG4gICAgYXdhaXQgcHJpc21hLnNob3AuZGVsZXRlTWFueSh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogJ3Rlc3Qtc2hvcC1qZXN0J1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIENsZWFuIHVwIGFueSBvdGhlciB0ZXN0IGFydGlmYWN0c1xuICAgIGF3YWl0IHByaXNtYS51c2VyLmRlbGV0ZU1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgZW1haWw6IHtcbiAgICAgICAgICBlbmRzV2l0aDogJ0BqZXN0LnRlc3QnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBDbGVhbnVwIHdhcm5pbmc6JywgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn0iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwicmVxdWlyZSIsImNsZWFudXBDYWNoZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJwcm9jZXNzIiwiZW52IiwiU0VUVVBfVEVTVF9EQiIsInByaXNtYSIsIiRjb25uZWN0IiwiY2xlYW51cFRlc3REYXRhIiwiJGRpc2Nvbm5lY3QiLCJzaG9wIiwiZGVsZXRlTWFueSIsIndoZXJlIiwiaWQiLCJ1c2VyIiwiZW1haWwiLCJlbmRzV2l0aCIsIndhcm4iLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFQSxZQUFZLEVBQUUsR0FBR0MsUUFBUTtBQUVqQyxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHRCxRQUFRO0FBRWpDRSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUUMsR0FBRyxDQUFDO0lBRVosMkJBQTJCO0lBQzNCLElBQUk7UUFDRko7UUFDQUcsUUFBUUMsR0FBRyxDQUFDO0lBQ2QsRUFBRSxPQUFPQyxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQywyQkFBMkJBO0lBQzNDO0lBRUEsbUNBQW1DO0lBQ25DLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsYUFBYSxLQUFLLFFBQVE7UUFDeEMsTUFBTUMsU0FBUyxJQUFJWDtRQUVuQixJQUFJO1lBQ0YsTUFBTVcsT0FBT0MsUUFBUTtZQUVyQixxQkFBcUI7WUFDckIsTUFBTUMsZ0JBQWdCRjtZQUV0Qk4sUUFBUUMsR0FBRyxDQUFDO1FBRWQsRUFBRSxPQUFPQyxPQUFPO1lBQ2RGLFFBQVFFLEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLDRDQUE0QztRQUM5QyxTQUFVO1lBQ1IsTUFBTUksT0FBT0csV0FBVztRQUMxQjtJQUNGO0lBRUFULFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRUEsZUFBZU8sZ0JBQWdCRixNQUFNO0lBQ25DLElBQUk7UUFDRixtQ0FBbUM7UUFDbkMsTUFBTUEsT0FBT0ksSUFBSSxDQUFDQyxVQUFVLENBQUM7WUFDM0JDLE9BQU87Z0JBQ0xDLElBQUk7WUFDTjtRQUNGO1FBRUEsb0NBQW9DO1FBQ3BDLE1BQU1QLE9BQU9RLElBQUksQ0FBQ0gsVUFBVSxDQUFDO1lBQzNCQyxPQUFPO2dCQUNMRyxPQUFPO29CQUNMQyxVQUFVO2dCQUNaO1lBQ0Y7UUFDRjtJQUVGLEVBQUUsT0FBT2QsT0FBTztRQUNkRixRQUFRaUIsSUFBSSxDQUFDLHVCQUF1QmYsTUFBTWdCLE9BQU87SUFDbkQ7QUFDRiJ9