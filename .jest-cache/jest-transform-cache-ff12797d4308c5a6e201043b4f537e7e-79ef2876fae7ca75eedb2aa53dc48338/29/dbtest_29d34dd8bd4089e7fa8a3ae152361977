eea3b45445b8f87643d375f9ee039cc6
// Mock Prisma before imports
"use strict";
jest.mock("@/lib/prisma", ()=>{
    const mockPrisma = {
        $connect: jest.fn(),
        $disconnect: jest.fn(),
        $transaction: jest.fn(),
        user: {
            findMany: jest.fn(),
            findUnique: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            delete: jest.fn()
        },
        shop: {
            findMany: jest.fn(),
            findUnique: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            delete: jest.fn()
        }
    };
    return {
        __esModule: true,
        default: mockPrisma,
        prisma: mockPrisma
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _db = require("../../src/lib/db");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockPrisma = _prisma.default;
describe("Database Library", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("db export", ()=>{
        it("should export db as the prisma client", ()=>{
            expect(_db.db).toBeDefined();
            expect(_db.db).toBe(_prisma.default);
        });
        it("should have user methods", ()=>{
            expect(_db.db.user).toBeDefined();
            expect(_db.db.user.findMany).toBeDefined();
            expect(_db.db.user.findUnique).toBeDefined();
            expect(_db.db.user.create).toBeDefined();
            expect(_db.db.user.update).toBeDefined();
            expect(_db.db.user.delete).toBeDefined();
        });
        it("should have shop methods", ()=>{
            expect(_db.db.shop).toBeDefined();
            expect(_db.db.shop.findMany).toBeDefined();
            expect(_db.db.shop.findUnique).toBeDefined();
            expect(_db.db.shop.create).toBeDefined();
            expect(_db.db.shop.update).toBeDefined();
            expect(_db.db.shop.delete).toBeDefined();
        });
        it("should have connection methods", ()=>{
            expect(_db.db.$connect).toBeDefined();
            expect(_db.db.$disconnect).toBeDefined();
            expect(_db.db.$transaction).toBeDefined();
        });
    });
    describe("prisma export", ()=>{
        it("should export prisma as the same client", ()=>{
            expect(_db.prisma).toBeDefined();
            expect(_db.prisma).toBe(_prisma.default);
            expect(_db.prisma).toBe(_db.db);
        });
    });
    describe("database operations", ()=>{
        it("should allow user queries", async ()=>{
            const mockUser = {
                id: 1,
                name: "Test User",
                email: "test@example.com"
            };
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const result = await _db.db.user.findUnique({
                where: {
                    id: 1
                }
            });
            expect(result).toEqual(mockUser);
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    id: 1
                }
            });
        });
        it("should allow shop queries", async ()=>{
            const mockShop = {
                id: "shop1",
                name: "Test Shop"
            };
            mockPrisma.shop.findUnique.mockResolvedValue(mockShop);
            const result = await _db.db.shop.findUnique({
                where: {
                    id: "shop1"
                }
            });
            expect(result).toEqual(mockShop);
            expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "shop1"
                }
            });
        });
        it("should allow transactions", async ()=>{
            const mockResult = {
                success: true
            };
            mockPrisma.$transaction.mockResolvedValue(mockResult);
            const transactionFn = jest.fn().mockResolvedValue(mockResult);
            const result = await _db.db.$transaction(transactionFn);
            expect(result).toEqual(mockResult);
            expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);
        });
        it("should handle connection operations", async ()=>{
            mockPrisma.$connect.mockResolvedValue(undefined);
            mockPrisma.$disconnect.mockResolvedValue(undefined);
            await _db.db.$connect();
            await _db.db.$disconnect();
            expect(mockPrisma.$connect).toHaveBeenCalled();
            expect(mockPrisma.$disconnect).toHaveBeenCalled();
        });
    });
    describe("error handling", ()=>{
        it("should propagate database errors", async ()=>{
            const dbError = new Error("Database connection failed");
            mockPrisma.user.findUnique.mockRejectedValue(dbError);
            await expect(_db.db.user.findUnique({
                where: {
                    id: 1
                }
            })).rejects.toThrow("Database connection failed");
        });
        it("should propagate transaction errors", async ()=>{
            const transactionError = new Error("Transaction failed");
            mockPrisma.$transaction.mockRejectedValue(transactionError);
            const transactionFn = jest.fn();
            await expect(_db.db.$transaction(transactionFn)).rejects.toThrow("Transaction failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,