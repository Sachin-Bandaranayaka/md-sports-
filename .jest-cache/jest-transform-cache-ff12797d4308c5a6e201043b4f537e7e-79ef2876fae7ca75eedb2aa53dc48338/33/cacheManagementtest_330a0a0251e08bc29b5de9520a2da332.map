{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/cacheManagement.test.ts"],"sourcesContent":["import { cacheService } from '@/lib/cache';\nimport { Redis } from 'ioredis';\n\n// Mock Redis\nconst mockRedis = {\n  get: jest.fn(),\n  set: jest.fn(),\n  setex: jest.fn(),\n  del: jest.fn(),\n  keys: jest.fn(),\n  flushall: jest.fn(),\n  ping: jest.fn(),\n  quit: jest.fn(),\n  on: jest.fn(),\n  connect: jest.fn(),\n  disconnect: jest.fn(),\n};\n\n// Mock ioredis\njest.mock('ioredis', () => {\n  return {\n    Redis: jest.fn().mockImplementation(() => mockRedis),\n  };\n});\n\n// Mock the inventory cache service\nconst mockInventoryCache = {\n  get: jest.fn(),\n  set: jest.fn(),\n  invalidateInventoryData: jest.fn(),\n  generateKey: jest.fn(),\n  warmPopularInventoryData: jest.fn(),\n  trackFilterUsage: jest.fn(),\n  getMetrics: jest.fn(),\n};\n\njest.mock('@/lib/inventoryCache', () => ({\n  inventoryCacheService: mockInventoryCache,\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Cache Management Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('Basic Cache Operations', () => {\n    describe('Memory Cache', () => {\n      it('should store and retrieve data from memory cache', async () => {\n        const testData = { id: 1, name: 'Test Data' };\n        const cacheKey = 'test:key:1';\n\n        // Mock memory cache behavior\n        const memoryCache = new Map();\n        memoryCache.set(cacheKey, JSON.stringify(testData));\n\n        // Simulate cache set\n        await cacheService.set(cacheKey, testData, 300);\n        \n        // Simulate cache get\n        const cachedData = memoryCache.get(cacheKey);\n        const result = cachedData ? JSON.parse(cachedData) : null;\n\n        expect(result).toEqual(testData);\n      });\n\n      it('should handle cache expiration', async () => {\n        const testData = { id: 1, name: 'Expiring Data' };\n        const cacheKey = 'test:expiring:1';\n        const ttl = 1; // 1 second\n\n        await cacheService.set(cacheKey, testData, ttl);\n\n        // Simulate time passing\n        await new Promise(resolve => setTimeout(resolve, 1100));\n\n        const result = await cacheService.get(cacheKey);\n        expect(result).toBeNull();\n      });\n\n      it('should handle cache miss gracefully', async () => {\n        const result = await cacheService.get('non:existent:key');\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('Redis Cache', () => {\n      it('should store data in Redis when available', async () => {\n        const testData = { id: 1, name: 'Redis Test' };\n        const cacheKey = 'redis:test:1';\n        const ttl = 300;\n\n        mockRedis.setex.mockResolvedValue('OK');\n\n        await cacheService.set(cacheKey, testData, ttl);\n\n        expect(mockRedis.setex).toHaveBeenCalledWith(\n          cacheKey,\n          ttl,\n          JSON.stringify(testData)\n        );\n      });\n\n      it('should retrieve data from Redis', async () => {\n        const testData = { id: 1, name: 'Redis Test' };\n        const cacheKey = 'redis:test:1';\n\n        mockRedis.get.mockResolvedValue(JSON.stringify(testData));\n\n        const result = await cacheService.get(cacheKey);\n\n        expect(mockRedis.get).toHaveBeenCalledWith(cacheKey);\n        expect(result).toEqual(testData);\n      });\n\n      it('should handle Redis connection errors gracefully', async () => {\n        const testData = { id: 1, name: 'Error Test' };\n        const cacheKey = 'redis:error:1';\n\n        mockRedis.setex.mockRejectedValue(new Error('Redis connection failed'));\n\n        // Should not throw error, should fallback to memory cache\n        await expect(cacheService.set(cacheKey, testData, 300)).resolves.not.toThrow();\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Redis cache error:',\n          expect.any(Error)\n        );\n      });\n\n      it('should handle Redis get errors gracefully', async () => {\n        const cacheKey = 'redis:error:get';\n\n        mockRedis.get.mockRejectedValue(new Error('Redis get failed'));\n\n        const result = await cacheService.get(cacheKey);\n\n        expect(result).toBeNull();\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Redis cache error:',\n          expect.any(Error)\n        );\n      });\n    });\n\n    describe('Cache Invalidation', () => {\n      it('should delete specific cache keys', async () => {\n        const cacheKey = 'test:delete:1';\n\n        mockRedis.del.mockResolvedValue(1);\n\n        await cacheService.delete(cacheKey);\n\n        expect(mockRedis.del).toHaveBeenCalledWith(cacheKey);\n      });\n\n      it('should delete multiple cache keys by pattern', async () => {\n        const pattern = 'test:pattern:*';\n        const matchingKeys = ['test:pattern:1', 'test:pattern:2', 'test:pattern:3'];\n\n        mockRedis.keys.mockResolvedValue(matchingKeys);\n        mockRedis.del.mockResolvedValue(matchingKeys.length);\n\n        await cacheService.deletePattern(pattern);\n\n        expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n        expect(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);\n      });\n\n      it('should handle pattern deletion with no matches', async () => {\n        const pattern = 'test:nomatch:*';\n\n        mockRedis.keys.mockResolvedValue([]);\n\n        await cacheService.deletePattern(pattern);\n\n        expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n        expect(mockRedis.del).not.toHaveBeenCalled();\n      });\n\n      it('should clear all cache data', async () => {\n        mockRedis.flushall.mockResolvedValue('OK');\n\n        await cacheService.clear();\n\n        expect(mockRedis.flushall).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Inventory Cache Service', () => {\n    const mockInventoryData = {\n      items: [\n        { id: 1, productId: 1, shopId: 'shop1', quantity: 100 },\n        { id: 2, productId: 2, shopId: 'shop1', quantity: 50 },\n      ],\n      total: 2,\n      page: 1,\n      limit: 20,\n    };\n\n    const mockFilters = {\n      shopId: 'shop1',\n      page: 1,\n      limit: 20,\n      status: 'In Stock',\n    };\n\n    describe('Cache Key Generation', () => {\n      it('should generate consistent cache keys', () => {\n        const baseKey = 'inventory:summary';\n        const expectedKey = 'inventory:summary:shop:shop1:status:In Stock:page:1:limit:20';\n\n        mockInventoryCache.generateKey.mockReturnValue(expectedKey);\n\n        const result = mockInventoryCache.generateKey(baseKey, mockFilters);\n\n        expect(result).toBe(expectedKey);\n        expect(mockInventoryCache.generateKey).toHaveBeenCalledWith(baseKey, mockFilters);\n      });\n\n      it('should handle filters with special characters', () => {\n        const filtersWithSpecialChars = {\n          ...mockFilters,\n          search: 'test product & more',\n        };\n        const expectedKey = 'inventory:summary:shop:shop1:status:In Stock:search:test%20product%20%26%20more:page:1:limit:20';\n\n        mockInventoryCache.generateKey.mockReturnValue(expectedKey);\n\n        const result = mockInventoryCache.generateKey('inventory:summary', filtersWithSpecialChars);\n\n        expect(result).toBe(expectedKey);\n      });\n    });\n\n    describe('Cache Storage and Retrieval', () => {\n      it('should store inventory data with TTL', async () => {\n        const cacheKey = 'inventory:summary:shop1';\n        const ttl = 300;\n\n        mockInventoryCache.set.mockResolvedValue(undefined);\n\n        await mockInventoryCache.set(cacheKey, mockInventoryData, ttl);\n\n        expect(mockInventoryCache.set).toHaveBeenCalledWith(cacheKey, mockInventoryData, ttl);\n      });\n\n      it('should retrieve cached inventory data', async () => {\n        const cacheKey = 'inventory:summary:shop1';\n\n        mockInventoryCache.get.mockResolvedValue(mockInventoryData);\n\n        const result = await mockInventoryCache.get(cacheKey);\n\n        expect(mockInventoryCache.get).toHaveBeenCalledWith(cacheKey);\n        expect(result).toEqual(mockInventoryData);\n      });\n\n      it('should return null for cache miss', async () => {\n        const cacheKey = 'inventory:summary:nonexistent';\n\n        mockInventoryCache.get.mockResolvedValue(null);\n\n        const result = await mockInventoryCache.get(cacheKey);\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('Cache Invalidation Strategies', () => {\n      it('should invalidate inventory data by product', async () => {\n        const productId = 1;\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(productId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(productId);\n      });\n\n      it('should invalidate inventory data by shop', async () => {\n        const shopId = 'shop1';\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(undefined, shopId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(undefined, shopId);\n      });\n\n      it('should invalidate inventory data by category', async () => {\n        const categoryId = 5;\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(undefined, undefined, categoryId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(undefined, undefined, categoryId);\n      });\n\n      it('should invalidate all inventory data', async () => {\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData();\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith();\n      });\n    });\n\n    describe('Cache Warming', () => {\n      it('should warm popular inventory data', async () => {\n        mockInventoryCache.warmPopularInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.warmPopularInventoryData();\n\n        expect(mockInventoryCache.warmPopularInventoryData).toHaveBeenCalled();\n      });\n\n      it('should track filter usage for warming strategy', () => {\n        mockInventoryCache.trackFilterUsage.mockReturnValue(undefined);\n\n        mockInventoryCache.trackFilterUsage(mockFilters);\n\n        expect(mockInventoryCache.trackFilterUsage).toHaveBeenCalledWith(mockFilters);\n      });\n    });\n\n    describe('Cache Metrics', () => {\n      it('should collect cache performance metrics', () => {\n        const mockMetrics = {\n          hits: 150,\n          misses: 25,\n          hitRate: 0.857,\n          avgResponseTime: 12.5,\n          totalRequests: 175,\n        };\n\n        mockInventoryCache.getMetrics.mockReturnValue(mockMetrics);\n\n        const metrics = mockInventoryCache.getMetrics();\n\n        expect(metrics).toEqual(mockMetrics);\n        expect(metrics.hitRate).toBeGreaterThan(0.8); // Good hit rate\n        expect(metrics.avgResponseTime).toBeLessThan(50); // Fast response\n      });\n\n      it('should track cache performance over time', () => {\n        const mockTimeSeriesMetrics = {\n          '2024-01-01T00:00:00Z': { hits: 100, misses: 10 },\n          '2024-01-01T01:00:00Z': { hits: 120, misses: 8 },\n          '2024-01-01T02:00:00Z': { hits: 110, misses: 12 },\n        };\n\n        mockInventoryCache.getMetrics.mockReturnValue(mockTimeSeriesMetrics);\n\n        const metrics = mockInventoryCache.getMetrics('timeseries');\n\n        expect(metrics).toEqual(mockTimeSeriesMetrics);\n        expect(Object.keys(metrics)).toHaveLength(3);\n      });\n    });\n  });\n\n  describe('Cache Error Handling', () => {\n    it('should handle cache service initialization errors', () => {\n      const initError = new Error('Cache initialization failed');\n      \n      // Mock Redis constructor to throw error\n      (Redis as jest.MockedClass<typeof Redis>).mockImplementationOnce(() => {\n        throw initError;\n      });\n\n      // Should not crash the application\n      expect(() => {\n        new Redis();\n      }).toThrow('Cache initialization failed');\n    });\n\n    it('should handle serialization errors', async () => {\n      const circularData = { name: 'test' };\n      circularData.self = circularData; // Create circular reference\n\n      const cacheKey = 'test:circular';\n\n      // Should handle JSON.stringify error gracefully\n      await expect(cacheService.set(cacheKey, circularData, 300)).resolves.not.toThrow();\n    });\n\n    it('should handle deserialization errors', async () => {\n      const cacheKey = 'test:invalid:json';\n      const invalidJson = 'invalid json string';\n\n      mockRedis.get.mockResolvedValue(invalidJson);\n\n      const result = await cacheService.get(cacheKey);\n\n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Cache deserialization error:',\n        expect.any(Error)\n      );\n    });\n\n    it('should handle network timeouts gracefully', async () => {\n      const timeoutError = new Error('Network timeout');\n      timeoutError.name = 'TimeoutError';\n\n      mockRedis.get.mockRejectedValue(timeoutError);\n\n      const result = await cacheService.get('test:timeout');\n\n      expect(result).toBeNull();\n      expect(consoleSpy.warn).toHaveBeenCalledWith(\n        'Cache timeout, falling back to database:',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('Cache Performance Tests', () => {\n    it('should handle high-frequency cache operations', async () => {\n      const operations = [];\n      const numOperations = 1000;\n\n      // Simulate high-frequency cache operations\n      for (let i = 0; i < numOperations; i++) {\n        operations.push(\n          cacheService.set(`test:perf:${i}`, { id: i, data: `data-${i}` }, 300)\n        );\n      }\n\n      const startTime = Date.now();\n      await Promise.all(operations);\n      const endTime = Date.now();\n\n      const duration = endTime - startTime;\n      const opsPerSecond = numOperations / (duration / 1000);\n\n      expect(opsPerSecond).toBeGreaterThan(100); // Should handle at least 100 ops/sec\n    });\n\n    it('should handle concurrent cache access', async () => {\n      const cacheKey = 'test:concurrent';\n      const testData = { id: 1, name: 'Concurrent Test' };\n\n      mockRedis.get.mockResolvedValue(JSON.stringify(testData));\n      mockRedis.setex.mockResolvedValue('OK');\n\n      // Simulate concurrent reads and writes\n      const concurrentOperations = [\n        cacheService.get(cacheKey),\n        cacheService.set(cacheKey, testData, 300),\n        cacheService.get(cacheKey),\n        cacheService.set(cacheKey, { ...testData, updated: true }, 300),\n        cacheService.get(cacheKey),\n      ];\n\n      await expect(Promise.all(concurrentOperations)).resolves.not.toThrow();\n    });\n\n    it('should maintain cache consistency under load', async () => {\n      const cacheKey = 'test:consistency';\n      let counter = 0;\n\n      // Mock cache operations to simulate real behavior\n      mockRedis.get.mockImplementation(async () => {\n        return JSON.stringify({ counter });\n      });\n\n      mockRedis.setex.mockImplementation(async (key, ttl, value) => {\n        const data = JSON.parse(value);\n        counter = data.counter;\n        return 'OK';\n      });\n\n      // Simulate multiple concurrent updates\n      const updates = [];\n      for (let i = 0; i < 10; i++) {\n        updates.push(\n          (async () => {\n            const current = await cacheService.get(cacheKey);\n            const newValue = { counter: (current?.counter || 0) + 1 };\n            await cacheService.set(cacheKey, newValue, 300);\n          })()\n        );\n      }\n\n      await Promise.all(updates);\n\n      // Final counter should reflect all updates\n      expect(counter).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Cache Configuration', () => {\n    it('should respect TTL settings', async () => {\n      const shortTTL = 1; // 1 second\n      const longTTL = 3600; // 1 hour\n      const testData = { id: 1, name: 'TTL Test' };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      await cacheService.set('test:short', testData, shortTTL);\n      await cacheService.set('test:long', testData, longTTL);\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:short',\n        shortTTL,\n        JSON.stringify(testData)\n      );\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:long',\n        longTTL,\n        JSON.stringify(testData)\n      );\n    });\n\n    it('should use default TTL when not specified', async () => {\n      const testData = { id: 1, name: 'Default TTL Test' };\n      const defaultTTL = 300; // 5 minutes\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      await cacheService.set('test:default', testData);\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:default',\n        defaultTTL,\n        JSON.stringify(testData)\n      );\n    });\n\n    it('should handle cache size limits', async () => {\n      const largeData = {\n        id: 1,\n        data: 'x'.repeat(1024 * 1024), // 1MB of data\n      };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      // Should handle large data without issues\n      await expect(cacheService.set('test:large', largeData, 300)).resolves.not.toThrow();\n    });\n  });\n});"],"names":["jest","mock","Redis","fn","mockImplementation","mockRedis","inventoryCacheService","mockInventoryCache","get","set","setex","del","keys","flushall","ping","quit","on","connect","disconnect","invalidateInventoryData","generateKey","warmPopularInventoryData","trackFilterUsage","getMetrics","consoleSpy","log","spyOn","console","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","testData","id","name","cacheKey","memoryCache","Map","JSON","stringify","cacheService","cachedData","result","parse","expect","toEqual","ttl","Promise","resolve","setTimeout","toBeNull","mockResolvedValue","toHaveBeenCalledWith","mockRejectedValue","Error","resolves","not","toThrow","any","delete","pattern","matchingKeys","length","deletePattern","toHaveBeenCalled","clear","mockInventoryData","items","productId","shopId","quantity","total","page","limit","mockFilters","status","baseKey","expectedKey","mockReturnValue","toBe","filtersWithSpecialChars","search","undefined","categoryId","mockMetrics","hits","misses","hitRate","avgResponseTime","totalRequests","metrics","toBeGreaterThan","toBeLessThan","mockTimeSeriesMetrics","Object","toHaveLength","initError","mockImplementationOnce","circularData","self","invalidJson","timeoutError","operations","numOperations","i","push","data","startTime","Date","now","all","endTime","duration","opsPerSecond","concurrentOperations","updated","counter","key","value","updates","current","newValue","shortTTL","longTTL","defaultTTL","largeData","repeat"],"mappings":"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"}