b055762965be87eb6b030d1276572a30
"use strict";

/* istanbul ignore next */
function cov_2jach28gt1() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/users/roles/route.ts";
  var hash = "88c0b2199a0fc5da3de267993f3afcb8d17e6df4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/users/roles/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 89
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "10": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "12": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "14": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "15": {
        start: {
          line: 54,
          column: 51
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "17": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "18": {
        start: {
          line: 65,
          column: 29
        },
        end: {
          line: 69,
          column: 10
        }
      },
      "19": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "20": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "21": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 94,
          column: 10
        }
      },
      "22": {
        start: {
          line: 85,
          column: 56
        },
        end: {
          line: 87,
          column: 29
        }
      },
      "23": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "24": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 53
        }
      },
      "25": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 21
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 52,
            column: 15
          },
          end: {
            line: 52,
            column: 19
          }
        },
        loc: {
          start: {
            line: 52,
            column: 29
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 52
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 85,
            column: 49
          },
          end: {
            line: 85,
            column: 50
          }
        },
        loc: {
          start: {
            line: 85,
            column: 56
          },
          end: {
            line: 87,
            column: 29
          }
        },
        line: 85
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 14
          }
        }, {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 32
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 44
          },
          end: {
            line: 46,
            column: 57
          }
        }, {
          start: {
            line: 46,
            column: 60
          },
          end: {
            line: 46,
            column: 73
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 89,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 83,
            column: 30
          }
        }, {
          start: {
            line: 83,
            column: 34
          },
          end: {
            line: 83,
            column: 56
          }
        }, {
          start: {
            line: 83,
            column: 60
          },
          end: {
            line: 89,
            column: 17
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 19
          },
          end: {
            line: 107,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 44
          },
          end: {
            line: 107,
            column: 57
          }
        }, {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 107,
            column: 73
          }
        }],
        line: 107
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/users/roles/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n/**\n * GET: Fetch all roles\n */\nexport async function GET() {\n    try {\n        const roles = await prisma.role.findMany({\n            include: {\n                permissions: true\n            },\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Roles retrieved successfully',\n            data: roles\n        });\n    } catch (error) {\n        console.error('Error fetching roles:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to retrieve roles',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n/**\n * POST: Create a new role\n */\nexport async function POST(request: Request) {\n    try {\n        const { name, description, permissions } = await request.json();\n\n        // Validate required fields\n        if (!name) {\n            return NextResponse.json({\n                success: false,\n                message: 'Role name is required'\n            }, { status: 400 });\n        }\n\n        // Check if role already exists\n        const existingRole = await prisma.role.findUnique({\n            where: { name }\n        });\n\n        if (existingRole) {\n            return NextResponse.json({\n                success: false,\n                message: 'Role with this name already exists'\n            }, { status: 409 });\n        }\n\n        // Create the role with permissions if provided\n        const role = await prisma.role.create({\n            data: {\n                name,\n                description,\n                ...(permissions && permissions.length > 0 && {\n                    permissions: {\n                        connect: permissions.map((id: number) => ({ id }))\n                    }\n                })\n            },\n            include: {\n                permissions: true\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Role created successfully',\n            data: role\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating role:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating role',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["GET", "POST", "roles", "prisma", "role", "findMany", "include", "permissions", "orderBy", "name", "NextResponse", "json", "success", "message", "data", "error", "console", "Error", "String", "status", "request", "description", "existingRole", "findUnique", "where", "create", "length", "connect", "map", "id"],
      mappings: ";;;;;;;;;;;IAMsBA,GAAG;eAAHA;;IA6BAC,IAAI;eAAJA;;;wBAnCO;+DACV;;;;;;AAKZ,eAAeD;IAClB,IAAI;QACA,MAAME,QAAQ,MAAMC,eAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,SAAS;gBACLC,aAAa;YACjB;YACAC,SAAS;gBACLC,MAAM;YACV;QACJ;QAEA,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTC,MAAMZ;QACV;IACJ,EAAE,OAAOa,OAAO;QACZC,QAAQD,KAAK,CAAC,yBAAyBA;QACvC,OAAOL,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTE,OAAOA,iBAAiBE,QAAQF,MAAMF,OAAO,GAAGK,OAAOH;QAC3D,GAAG;YAAEI,QAAQ;QAAI;IACrB;AACJ;AAKO,eAAelB,KAAKmB,OAAgB;IACvC,IAAI;QACA,MAAM,EAAEX,IAAI,EAAEY,WAAW,EAAEd,WAAW,EAAE,GAAG,MAAMa,QAAQT,IAAI;QAE7D,2BAA2B;QAC3B,IAAI,CAACF,MAAM;YACP,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;YACb,GAAG;gBAAEM,QAAQ;YAAI;QACrB;QAEA,+BAA+B;QAC/B,MAAMG,eAAe,MAAMnB,eAAM,CAACC,IAAI,CAACmB,UAAU,CAAC;YAC9CC,OAAO;gBAAEf;YAAK;QAClB;QAEA,IAAIa,cAAc;YACd,OAAOZ,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;YACb,GAAG;gBAAEM,QAAQ;YAAI;QACrB;QAEA,+CAA+C;QAC/C,MAAMf,OAAO,MAAMD,eAAM,CAACC,IAAI,CAACqB,MAAM,CAAC;YAClCX,MAAM;gBACFL;gBACAY;gBACA,GAAId,eAAeA,YAAYmB,MAAM,GAAG,KAAK;oBACzCnB,aAAa;wBACToB,SAASpB,YAAYqB,GAAG,CAAC,CAACC,KAAgB,CAAA;gCAAEA;4BAAG,CAAA;oBACnD;gBACJ,CAAC;YACL;YACAvB,SAAS;gBACLC,aAAa;YACjB;QACJ;QAEA,OAAOG,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTC,MAAMV;QACV,GAAG;YAAEe,QAAQ;QAAI;IACrB,EAAE,OAAOJ,OAAO;QACZC,QAAQD,KAAK,CAAC,wBAAwBA;QACtC,OAAOL,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTE,OAAOA,iBAAiBE,QAAQF,MAAMF,OAAO,GAAGK,OAAOH;QAC3D,GAAG;YAAEI,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "88c0b2199a0fc5da3de267993f3afcb8d17e6df4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jach28gt1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jach28gt1();
cov_2jach28gt1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2jach28gt1().f[0]++;
  cov_2jach28gt1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2jach28gt1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2jach28gt1().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2jach28gt1().f[1]++;
    cov_2jach28gt1().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2jach28gt1().f[2]++;
    cov_2jach28gt1().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2jach28gt1().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2jach28gt1().s[7]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2jach28gt1().f[3]++;
  cov_2jach28gt1().s[8]++;
  return /* istanbul ignore next */(cov_2jach28gt1().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2jach28gt1().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2jach28gt1().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2jach28gt1().b[0][1]++, {
    default: obj
  });
}
async function GET() {
  /* istanbul ignore next */
  cov_2jach28gt1().f[4]++;
  cov_2jach28gt1().s[9]++;
  try {
    const roles =
    /* istanbul ignore next */
    (cov_2jach28gt1().s[10]++, await _prisma.default.role.findMany({
      include: {
        permissions: true
      },
      orderBy: {
        name: "asc"
      }
    }));
    /* istanbul ignore next */
    cov_2jach28gt1().s[11]++;
    return _server.NextResponse.json({
      success: true,
      message: "Roles retrieved successfully",
      data: roles
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jach28gt1().s[12]++;
    console.error("Error fetching roles:", error);
    /* istanbul ignore next */
    cov_2jach28gt1().s[13]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to retrieve roles",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2jach28gt1().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2jach28gt1().b[2][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2jach28gt1().f[5]++;
  cov_2jach28gt1().s[14]++;
  try {
    const {
      name,
      description,
      permissions
    } =
    /* istanbul ignore next */
    (cov_2jach28gt1().s[15]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2jach28gt1().s[16]++;
    if (!name) {
      /* istanbul ignore next */
      cov_2jach28gt1().b[3][0]++;
      cov_2jach28gt1().s[17]++;
      return _server.NextResponse.json({
        success: false,
        message: "Role name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2jach28gt1().b[3][1]++;
    }
    // Check if role already exists
    const existingRole =
    /* istanbul ignore next */
    (cov_2jach28gt1().s[18]++, await _prisma.default.role.findUnique({
      where: {
        name
      }
    }));
    /* istanbul ignore next */
    cov_2jach28gt1().s[19]++;
    if (existingRole) {
      /* istanbul ignore next */
      cov_2jach28gt1().b[4][0]++;
      cov_2jach28gt1().s[20]++;
      return _server.NextResponse.json({
        success: false,
        message: "Role with this name already exists"
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_2jach28gt1().b[4][1]++;
    }
    // Create the role with permissions if provided
    const role =
    /* istanbul ignore next */
    (cov_2jach28gt1().s[21]++, await _prisma.default.role.create({
      data: {
        name,
        description,
        ...(
        /* istanbul ignore next */
        (cov_2jach28gt1().b[5][0]++, permissions) &&
        /* istanbul ignore next */
        (cov_2jach28gt1().b[5][1]++, permissions.length > 0) &&
        /* istanbul ignore next */
        (cov_2jach28gt1().b[5][2]++, {
          permissions: {
            connect: permissions.map(id => {
              /* istanbul ignore next */
              cov_2jach28gt1().f[6]++;
              cov_2jach28gt1().s[22]++;
              return {
                id
              };
            })
          }
        }))
      },
      include: {
        permissions: true
      }
    }));
    /* istanbul ignore next */
    cov_2jach28gt1().s[23]++;
    return _server.NextResponse.json({
      success: true,
      message: "Role created successfully",
      data: role
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2jach28gt1().s[24]++;
    console.error("Error creating role:", error);
    /* istanbul ignore next */
    cov_2jach28gt1().s[25]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating role",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2jach28gt1().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2jach28gt1().b[6][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,