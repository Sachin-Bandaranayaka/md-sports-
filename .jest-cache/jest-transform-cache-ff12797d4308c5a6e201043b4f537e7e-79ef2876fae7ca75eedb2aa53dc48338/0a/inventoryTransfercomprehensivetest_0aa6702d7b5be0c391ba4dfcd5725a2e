f1e93f2167f5be5793304cc3583fcd46
/**
 * @jest-environment node
 */ "use strict";
// Mock dependencies
jest.mock("@/utils/auth");
jest.mock("@/middleware/permissions");
jest.mock("@/lib/transferPerformanceMonitor");
jest.mock("@/lib/transferCache");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../src/app/api/inventory/transfers/route");
const _route1 = require("../../src/app/api/inventory/transfers/[id]/route");
const _prisma = require("../../src/lib/prisma");
const _auth = require("../../src/utils/auth");
const _permissions = require("../../src/middleware/permissions");
const _transferPerformanceMonitor = require("../../src/lib/transferPerformanceMonitor");
const _transferCache = require("../../src/lib/transferCache");
const mockVerifyToken = _auth.verifyToken;
const mockRequirePermission = _permissions.requirePermission;
const mockPerformanceMonitor = _transferPerformanceMonitor.TransferPerformanceMonitor;
const mockCacheService = _transferCache.TransferCacheService;
describe("Inventory Transfer - Comprehensive Test Suite", ()=>{
    let mockUser;
    let mockShops;
    let mockProducts;
    let mockInventoryItems;
    let mockTransfers;
    let performanceMonitorInstance;
    let cacheServiceInstance;
    beforeAll(()=>{
        // Setup mock instances
        performanceMonitorInstance = {
            startOperation: jest.fn(),
            endOperation: jest.fn(),
            recordMetrics: jest.fn(),
            getMetrics: jest.fn().mockReturnValue({
                averageResponseTime: 150,
                errorRate: 0.02,
                cacheHitRate: 0.85
            })
        };
        mockPerformanceMonitor.mockImplementation(()=>performanceMonitorInstance);
        cacheServiceInstance = {
            get: jest.fn(),
            set: jest.fn(),
            invalidate: jest.fn(),
            warmCache: jest.fn()
        };
        mockCacheService.mockImplementation(()=>cacheServiceInstance);
    });
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup mock user
        mockUser = {
            id: "user1",
            email: "test@example.com",
            role: "ADMIN",
            permissions: [
                "inventory:read",
                "inventory:write",
                "transfers:create",
                "transfers:complete"
            ]
        };
        // Setup mock shops
        mockShops = [
            {
                id: "shop1",
                name: "Main Store",
                location: "Downtown"
            },
            {
                id: "shop2",
                name: "Branch Store",
                location: "Uptown"
            }
        ];
        // Setup mock products
        mockProducts = [
            {
                id: "prod1",
                name: "Product A",
                sku: "SKU001",
                price: 100
            },
            {
                id: "prod2",
                name: "Product B",
                sku: "SKU002",
                price: 200
            }
        ];
        // Setup mock inventory items
        mockInventoryItems = [
            {
                id: "inv1",
                productId: "prod1",
                shopId: "shop1",
                quantity: 50,
                reservedQuantity: 0,
                cost: 80,
                product: mockProducts[0]
            },
            {
                id: "inv2",
                productId: "prod2",
                shopId: "shop1",
                quantity: 30,
                reservedQuantity: 0,
                cost: 150,
                product: mockProducts[1]
            }
        ];
        // Setup mock transfers
        mockTransfers = [
            {
                id: "transfer1",
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                status: "PENDING",
                createdBy: "user1",
                createdAt: new Date(),
                items: [
                    {
                        id: "item1",
                        productId: "prod1",
                        quantity: 10,
                        cost: 80,
                        product: mockProducts[0]
                    }
                ]
            }
        ];
        // Setup default mocks
        mockVerifyToken.mockResolvedValue(mockUser);
        mockRequirePermission.mockImplementation((permission)=>(req, res, next)=>next());
    });
    describe("Business Logic Tests", ()=>{
        describe("Transfer Creation", ()=>{
            it("should create a transfer with proper inventory reservation", async ()=>{
                const transferData = {
                    sourceShopId: "shop1",
                    destinationShopId: "shop2",
                    items: [
                        {
                            productId: "prod1",
                            quantity: 10
                        }
                    ]
                };
                // Mock Prisma responses
                _prisma.prisma.shop.findUnique.mockResolvedValueOnce(mockShops[0]) // source shop
                .mockResolvedValueOnce(mockShops[1]); // destination shop
                _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]);
                _prisma.prisma.$transaction.mockImplementation(async (callback)=>{
                    return await callback(_prisma.prisma);
                });
                _prisma.prisma.inventoryTransfer.create.mockResolvedValue({
                    ...mockTransfers[0],
                    id: "new-transfer"
                });
                _prisma.prisma.transferItem.create.mockResolvedValue({
                    id: "new-item",
                    transferId: "new-transfer",
                    productId: "prod1",
                    quantity: 10,
                    cost: 80
                });
                _prisma.prisma.inventoryItem.update.mockResolvedValue({
                    ...mockInventoryItems[0],
                    reservedQuantity: 10
                });
                const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                    method: "POST",
                    body: JSON.stringify(transferData)
                });
                const response = await (0, _route.POST)(request);
                const result = await response.json();
                expect(response.status).toBe(201);
                expect(result.success).toBe(true);
                expect(_prisma.prisma.inventoryItem.update).toHaveBeenCalledWith({
                    where: {
                        id: "inv1"
                    },
                    data: {
                        reservedQuantity: 10
                    }
                });
            });
            it("should reject transfer when insufficient inventory", async ()=>{
                const transferData = {
                    sourceShopId: "shop1",
                    destinationShopId: "shop2",
                    items: [
                        {
                            productId: "prod1",
                            quantity: 100
                        } // More than available (50)
                    ]
                };
                _prisma.prisma.shop.findUnique.mockResolvedValueOnce(mockShops[0]).mockResolvedValueOnce(mockShops[1]);
                _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]);
                const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                    method: "POST",
                    body: JSON.stringify(transferData)
                });
                const response = await (0, _route.POST)(request);
                const result = await response.json();
                expect(response.status).toBe(400);
                expect(result.error).toContain("Insufficient inventory");
            });
            it("should reject transfer to same shop", async ()=>{
                const transferData = {
                    sourceShopId: "shop1",
                    destinationShopId: "shop1",
                    items: [
                        {
                            productId: "prod1",
                            quantity: 10
                        }
                    ]
                };
                const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                    method: "POST",
                    body: JSON.stringify(transferData)
                });
                const response = await (0, _route.POST)(request);
                const result = await response.json();
                expect(response.status).toBe(400);
                expect(result.error).toContain("same shop");
            });
        });
        describe("Transfer Completion", ()=>{
            it("should complete transfer with proper inventory updates", async ()=>{
                const transferId = "transfer1";
                _prisma.prisma.inventoryTransfer.findUnique.mockResolvedValue({
                    ...mockTransfers[0],
                    items: mockTransfers[0].items
                });
                _prisma.prisma.$transaction.mockImplementation(async (callback)=>{
                    return await callback(_prisma.prisma);
                });
                // Mock source inventory update (reduce quantity, clear reservation)
                _prisma.prisma.inventoryItem.update.mockResolvedValueOnce({
                    ...mockInventoryItems[0],
                    quantity: 40,
                    reservedQuantity: 0
                }).mockResolvedValueOnce({
                    id: "inv3",
                    productId: "prod1",
                    shopId: "shop2",
                    quantity: 10,
                    cost: 80
                });
                // Mock destination inventory upsert
                _prisma.prisma.inventoryItem.upsert.mockResolvedValue({
                    id: "inv3",
                    productId: "prod1",
                    shopId: "shop2",
                    quantity: 10,
                    cost: 80
                });
                _prisma.prisma.inventoryTransfer.update.mockResolvedValue({
                    ...mockTransfers[0],
                    status: "COMPLETED",
                    completedAt: new Date()
                });
                const request = new _server.NextRequest(`http://localhost/api/inventory/transfers/${transferId}`, {
                    method: "PATCH",
                    body: JSON.stringify({
                        action: "complete"
                    })
                });
                const response = await (0, _route1.PATCH)(request, {
                    params: {
                        id: transferId
                    }
                });
                const result = await response.json();
                expect(response.status).toBe(200);
                expect(result.success).toBe(true);
                expect(_prisma.prisma.inventoryTransfer.update).toHaveBeenCalledWith({
                    where: {
                        id: transferId
                    },
                    data: {
                        status: "COMPLETED",
                        completedAt: expect.any(Date)
                    }
                });
            });
            it("should cancel transfer and release reservations", async ()=>{
                const transferId = "transfer1";
                _prisma.prisma.inventoryTransfer.findUnique.mockResolvedValue({
                    ...mockTransfers[0],
                    items: mockTransfers[0].items
                });
                _prisma.prisma.$transaction.mockImplementation(async (callback)=>{
                    return await callback(_prisma.prisma);
                });
                _prisma.prisma.inventoryItem.update.mockResolvedValue({
                    ...mockInventoryItems[0],
                    reservedQuantity: 0
                });
                _prisma.prisma.inventoryTransfer.update.mockResolvedValue({
                    ...mockTransfers[0],
                    status: "CANCELLED"
                });
                const request = new _server.NextRequest(`http://localhost/api/inventory/transfers/${transferId}`, {
                    method: "PATCH",
                    body: JSON.stringify({
                        action: "cancel"
                    })
                });
                const response = await (0, _route1.PATCH)(request, {
                    params: {
                        id: transferId
                    }
                });
                const result = await response.json();
                expect(response.status).toBe(200);
                expect(result.success).toBe(true);
                expect(_prisma.prisma.inventoryItem.update).toHaveBeenCalledWith({
                    where: {
                        productId: "prod1",
                        shopId: "shop1"
                    },
                    data: {
                        reservedQuantity: {
                            decrement: 10
                        }
                    }
                });
            });
        });
    });
    describe("Performance Tests", ()=>{
        it("should track performance metrics for transfer operations", async ()=>{
            const transferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 10
                    }
                ]
            };
            _prisma.prisma.shop.findUnique.mockResolvedValueOnce(mockShops[0]).mockResolvedValueOnce(mockShops[1]);
            _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]);
            _prisma.prisma.$transaction.mockImplementation(async (callback)=>callback(_prisma.prisma));
            _prisma.prisma.inventoryTransfer.create.mockResolvedValue(mockTransfers[0]);
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transferData)
            });
            await (0, _route.POST)(request);
            expect(performanceMonitorInstance.startOperation).toHaveBeenCalledWith("create_transfer");
            expect(performanceMonitorInstance.endOperation).toHaveBeenCalled();
        });
        it("should use cache for frequently accessed data", async ()=>{
            cacheServiceInstance.get.mockResolvedValue(mockTransfers);
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers");
            const response = await (0, _route.GET)(request);
            expect(cacheServiceInstance.get).toHaveBeenCalledWith("transfers:list:");
            expect(response.status).toBe(200);
        });
        it("should invalidate cache after transfer operations", async ()=>{
            const transferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 10
                    }
                ]
            };
            _prisma.prisma.shop.findUnique.mockResolvedValueOnce(mockShops[0]).mockResolvedValueOnce(mockShops[1]);
            _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]);
            _prisma.prisma.$transaction.mockImplementation(async (callback)=>callback(_prisma.prisma));
            _prisma.prisma.inventoryTransfer.create.mockResolvedValue(mockTransfers[0]);
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transferData)
            });
            await (0, _route.POST)(request);
            expect(cacheServiceInstance.invalidate).toHaveBeenCalledWith("transfers");
            expect(cacheServiceInstance.invalidate).toHaveBeenCalledWith("inventory:shop1");
        });
    });
    describe("Error Handling Tests", ()=>{
        it("should handle database connection errors gracefully", async ()=>{
            _prisma.prisma.shop.findUnique.mockRejectedValue(new Error("Database connection failed"));
            const transferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 10
                    }
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transferData)
            });
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(500);
            expect(result.error).toContain("Internal server error");
        });
        it("should handle invalid transfer data", async ()=>{
            const invalidData = {
                sourceShopId: "",
                destinationShopId: "shop2",
                items: [] // Empty items
            };
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(invalidData)
            });
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(400);
            expect(result.error).toBeDefined();
        });
        it("should handle unauthorized access", async ()=>{
            mockVerifyToken.mockRejectedValue(new Error("Invalid token"));
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers");
            const response = await (0, _route.GET)(request);
            expect(response.status).toBe(401);
        });
        it("should handle permission denied", async ()=>{
            mockUser.permissions = [
                "inventory:read"
            ]; // Missing transfer permissions
            mockRequirePermission.mockImplementation((permission)=>{
                return (req, res, next)=>{
                    if (permission === "transfers:create") {
                        return _server.NextResponse.json({
                            error: "Permission denied"
                        }, {
                            status: 403
                        });
                    }
                    next();
                };
            });
            const transferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 10
                    }
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transferData)
            });
            // This would be handled by middleware in real scenario
            expect(mockUser.permissions).not.toContain("transfers:create");
        });
    });
    describe("Data Integrity Tests", ()=>{
        it("should maintain inventory consistency during concurrent transfers", async ()=>{
            // Simulate concurrent transfer attempts
            const transfer1Data = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 30
                    }
                ]
            };
            const transfer2Data = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 30
                    }
                ]
            };
            // Mock inventory with only 50 available (both transfers would exceed)
            _prisma.prisma.shop.findUnique.mockResolvedValue(mockShops[0]).mockResolvedValue(mockShops[1]);
            _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]); // 50 available
            _prisma.prisma.$transaction.mockImplementation(async (callback)=>{
                // Simulate database constraint preventing overselling
                throw new Error("Insufficient inventory for concurrent transfer");
            });
            const request1 = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transfer1Data)
            });
            const request2 = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transfer2Data)
            });
            // Both should fail due to insufficient inventory
            const [response1, response2] = await Promise.all([
                (0, _route.POST)(request1),
                (0, _route.POST)(request2)
            ]);
            expect(response1.status).toBe(500);
            expect(response2.status).toBe(500);
        });
        it("should validate transfer item quantities are positive", async ()=>{
            const invalidTransferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: -5
                    } // Negative quantity
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(invalidTransferData)
            });
            const response = await (0, _route.POST)(request);
            const result = await response.json();
            expect(response.status).toBe(400);
            expect(result.error).toContain("positive");
        });
    });
    describe("Cache Performance Tests", ()=>{
        it("should warm cache for frequently accessed transfers", async ()=>{
            await cacheServiceInstance.warmCache();
            expect(cacheServiceInstance.warmCache).toHaveBeenCalled();
        });
        it("should measure cache hit rates", ()=>{
            const metrics = performanceMonitorInstance.getMetrics();
            expect(metrics.cacheHitRate).toBeGreaterThan(0.8); // Expect good cache performance
        });
    });
    describe("Audit Trail Tests", ()=>{
        it("should create audit logs for transfer operations", async ()=>{
            const transferData = {
                sourceShopId: "shop1",
                destinationShopId: "shop2",
                items: [
                    {
                        productId: "prod1",
                        quantity: 10
                    }
                ]
            };
            _prisma.prisma.shop.findUnique.mockResolvedValueOnce(mockShops[0]).mockResolvedValueOnce(mockShops[1]);
            _prisma.prisma.inventoryItem.findFirst.mockResolvedValue(mockInventoryItems[0]);
            _prisma.prisma.$transaction.mockImplementation(async (callback)=>callback(_prisma.prisma));
            _prisma.prisma.inventoryTransfer.create.mockResolvedValue(mockTransfers[0]);
            _prisma.prisma.auditLog.create.mockResolvedValue({
                id: "audit1",
                action: "TRANSFER_CREATED",
                userId: "user1",
                details: JSON.stringify(transferData)
            });
            const request = new _server.NextRequest("http://localhost/api/inventory/transfers", {
                method: "POST",
                body: JSON.stringify(transferData)
            });
            await (0, _route.POST)(request);
            expect(_prisma.prisma.auditLog.create).toHaveBeenCalledWith({
                data: {
                    action: "TRANSFER_CREATED",
                    userId: "user1",
                    details: expect.any(String),
                    timestamp: expect.any(Date)
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,