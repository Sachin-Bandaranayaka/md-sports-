{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/comprehensive/inventoryTransfer.comprehensive.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { GET, POST } from '@/app/api/inventory/transfers/route';\nimport { PATCH } from '@/app/api/inventory/transfers/[id]/route';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken } from '@/utils/auth';\nimport { requirePermission } from '@/middleware/permissions';\nimport { TransferPerformanceMonitor } from '@/lib/transferPerformanceMonitor';\nimport { TransferCacheService } from '@/lib/transferCache';\n\n// Mock dependencies\njest.mock('@/utils/auth');\njest.mock('@/middleware/permissions');\njest.mock('@/lib/transferPerformanceMonitor');\njest.mock('@/lib/transferCache');\n\nconst mockVerifyToken = verifyToken as jest.MockedFunction<typeof verifyToken>;\nconst mockRequirePermission = requirePermission as jest.MockedFunction<typeof requirePermission>;\nconst mockPerformanceMonitor = TransferPerformanceMonitor as jest.MockedClass<typeof TransferPerformanceMonitor>;\nconst mockCacheService = TransferCacheService as jest.MockedClass<typeof TransferCacheService>;\n\ndescribe('Inventory Transfer - Comprehensive Test Suite', () => {\n  let mockUser: any;\n  let mockShops: any[];\n  let mockProducts: any[];\n  let mockInventoryItems: any[];\n  let mockTransfers: any[];\n  let performanceMonitorInstance: any;\n  let cacheServiceInstance: any;\n\n  beforeAll(() => {\n    // Setup mock instances\n    performanceMonitorInstance = {\n      startOperation: jest.fn(),\n      endOperation: jest.fn(),\n      recordMetrics: jest.fn(),\n      getMetrics: jest.fn().mockReturnValue({\n        averageResponseTime: 150,\n        errorRate: 0.02,\n        cacheHitRate: 0.85\n      })\n    };\n    mockPerformanceMonitor.mockImplementation(() => performanceMonitorInstance);\n\n    cacheServiceInstance = {\n      get: jest.fn(),\n      set: jest.fn(),\n      invalidate: jest.fn(),\n      warmCache: jest.fn()\n    };\n    mockCacheService.mockImplementation(() => cacheServiceInstance);\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup mock user\n    mockUser = {\n      id: 'user1',\n      email: 'test@example.com',\n      role: 'ADMIN',\n      permissions: ['inventory:read', 'inventory:write', 'transfers:create', 'transfers:complete']\n    };\n\n    // Setup mock shops\n    mockShops = [\n      { id: 'shop1', name: 'Main Store', location: 'Downtown' },\n      { id: 'shop2', name: 'Branch Store', location: 'Uptown' }\n    ];\n\n    // Setup mock products\n    mockProducts = [\n      { id: 'prod1', name: 'Product A', sku: 'SKU001', price: 100 },\n      { id: 'prod2', name: 'Product B', sku: 'SKU002', price: 200 }\n    ];\n\n    // Setup mock inventory items\n    mockInventoryItems = [\n      {\n        id: 'inv1',\n        productId: 'prod1',\n        shopId: 'shop1',\n        quantity: 50,\n        reservedQuantity: 0,\n        cost: 80,\n        product: mockProducts[0]\n      },\n      {\n        id: 'inv2',\n        productId: 'prod2',\n        shopId: 'shop1',\n        quantity: 30,\n        reservedQuantity: 0,\n        cost: 150,\n        product: mockProducts[1]\n      }\n    ];\n\n    // Setup mock transfers\n    mockTransfers = [\n      {\n        id: 'transfer1',\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        status: 'PENDING',\n        createdBy: 'user1',\n        createdAt: new Date(),\n        items: [\n          {\n            id: 'item1',\n            productId: 'prod1',\n            quantity: 10,\n            cost: 80,\n            product: mockProducts[0]\n          }\n        ]\n      }\n    ];\n\n    // Setup default mocks\n    mockVerifyToken.mockResolvedValue(mockUser);\n    mockRequirePermission.mockImplementation((permission) => (req: any, res: any, next: any) => next());\n  });\n\n  describe('Business Logic Tests', () => {\n    describe('Transfer Creation', () => {\n      it('should create a transfer with proper inventory reservation', async () => {\n        const transferData = {\n          sourceShopId: 'shop1',\n          destinationShopId: 'shop2',\n          items: [\n            { productId: 'prod1', quantity: 10 }\n          ]\n        };\n\n        // Mock Prisma responses\n        (prisma.shop.findUnique as jest.Mock)\n          .mockResolvedValueOnce(mockShops[0]) // source shop\n          .mockResolvedValueOnce(mockShops[1]); // destination shop\n\n        (prisma.inventoryItem.findFirst as jest.Mock)\n          .mockResolvedValue(mockInventoryItems[0]);\n\n        (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => {\n          return await callback(prisma);\n        });\n\n        (prisma.inventoryTransfer.create as jest.Mock).mockResolvedValue({\n          ...mockTransfers[0],\n          id: 'new-transfer'\n        });\n\n        (prisma.transferItem.create as jest.Mock).mockResolvedValue({\n          id: 'new-item',\n          transferId: 'new-transfer',\n          productId: 'prod1',\n          quantity: 10,\n          cost: 80\n        });\n\n        (prisma.inventoryItem.update as jest.Mock).mockResolvedValue({\n          ...mockInventoryItems[0],\n          reservedQuantity: 10\n        });\n\n        const request = new NextRequest('http://localhost/api/inventory/transfers', {\n          method: 'POST',\n          body: JSON.stringify(transferData)\n        });\n\n        const response = await POST(request);\n        const result = await response.json();\n\n        expect(response.status).toBe(201);\n        expect(result.success).toBe(true);\n        expect(prisma.inventoryItem.update).toHaveBeenCalledWith({\n          where: { id: 'inv1' },\n          data: { reservedQuantity: 10 }\n        });\n      });\n\n      it('should reject transfer when insufficient inventory', async () => {\n        const transferData = {\n          sourceShopId: 'shop1',\n          destinationShopId: 'shop2',\n          items: [\n            { productId: 'prod1', quantity: 100 } // More than available (50)\n          ]\n        };\n\n        (prisma.shop.findUnique as jest.Mock)\n          .mockResolvedValueOnce(mockShops[0])\n          .mockResolvedValueOnce(mockShops[1]);\n\n        (prisma.inventoryItem.findFirst as jest.Mock)\n          .mockResolvedValue(mockInventoryItems[0]);\n\n        const request = new NextRequest('http://localhost/api/inventory/transfers', {\n          method: 'POST',\n          body: JSON.stringify(transferData)\n        });\n\n        const response = await POST(request);\n        const result = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(result.error).toContain('Insufficient inventory');\n      });\n\n      it('should reject transfer to same shop', async () => {\n        const transferData = {\n          sourceShopId: 'shop1',\n          destinationShopId: 'shop1', // Same shop\n          items: [\n            { productId: 'prod1', quantity: 10 }\n          ]\n        };\n\n        const request = new NextRequest('http://localhost/api/inventory/transfers', {\n          method: 'POST',\n          body: JSON.stringify(transferData)\n        });\n\n        const response = await POST(request);\n        const result = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(result.error).toContain('same shop');\n      });\n    });\n\n    describe('Transfer Completion', () => {\n      it('should complete transfer with proper inventory updates', async () => {\n        const transferId = 'transfer1';\n        \n        (prisma.inventoryTransfer.findUnique as jest.Mock).mockResolvedValue({\n          ...mockTransfers[0],\n          items: mockTransfers[0].items\n        });\n\n        (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => {\n          return await callback(prisma);\n        });\n\n        // Mock source inventory update (reduce quantity, clear reservation)\n        (prisma.inventoryItem.update as jest.Mock)\n          .mockResolvedValueOnce({ // Source update\n            ...mockInventoryItems[0],\n            quantity: 40,\n            reservedQuantity: 0\n          })\n          .mockResolvedValueOnce({ // Destination update\n            id: 'inv3',\n            productId: 'prod1',\n            shopId: 'shop2',\n            quantity: 10,\n            cost: 80\n          });\n\n        // Mock destination inventory upsert\n        (prisma.inventoryItem.upsert as jest.Mock).mockResolvedValue({\n          id: 'inv3',\n          productId: 'prod1',\n          shopId: 'shop2',\n          quantity: 10,\n          cost: 80\n        });\n\n        (prisma.inventoryTransfer.update as jest.Mock).mockResolvedValue({\n          ...mockTransfers[0],\n          status: 'COMPLETED',\n          completedAt: new Date()\n        });\n\n        const request = new NextRequest(`http://localhost/api/inventory/transfers/${transferId}`, {\n          method: 'PATCH',\n          body: JSON.stringify({ action: 'complete' })\n        });\n\n        const response = await PATCH(request, { params: { id: transferId } });\n        const result = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(result.success).toBe(true);\n        expect(prisma.inventoryTransfer.update).toHaveBeenCalledWith({\n          where: { id: transferId },\n          data: {\n            status: 'COMPLETED',\n            completedAt: expect.any(Date)\n          }\n        });\n      });\n\n      it('should cancel transfer and release reservations', async () => {\n        const transferId = 'transfer1';\n        \n        (prisma.inventoryTransfer.findUnique as jest.Mock).mockResolvedValue({\n          ...mockTransfers[0],\n          items: mockTransfers[0].items\n        });\n\n        (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => {\n          return await callback(prisma);\n        });\n\n        (prisma.inventoryItem.update as jest.Mock).mockResolvedValue({\n          ...mockInventoryItems[0],\n          reservedQuantity: 0\n        });\n\n        (prisma.inventoryTransfer.update as jest.Mock).mockResolvedValue({\n          ...mockTransfers[0],\n          status: 'CANCELLED'\n        });\n\n        const request = new NextRequest(`http://localhost/api/inventory/transfers/${transferId}`, {\n          method: 'PATCH',\n          body: JSON.stringify({ action: 'cancel' })\n        });\n\n        const response = await PATCH(request, { params: { id: transferId } });\n        const result = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(result.success).toBe(true);\n        expect(prisma.inventoryItem.update).toHaveBeenCalledWith({\n          where: {\n            productId: 'prod1',\n            shopId: 'shop1'\n          },\n          data: {\n            reservedQuantity: {\n              decrement: 10\n            }\n          }\n        });\n      });\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should track performance metrics for transfer operations', async () => {\n      const transferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 10 }]\n      };\n\n      (prisma.shop.findUnique as jest.Mock)\n        .mockResolvedValueOnce(mockShops[0])\n        .mockResolvedValueOnce(mockShops[1]);\n      (prisma.inventoryItem.findFirst as jest.Mock).mockResolvedValue(mockInventoryItems[0]);\n      (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => callback(prisma));\n      (prisma.inventoryTransfer.create as jest.Mock).mockResolvedValue(mockTransfers[0]);\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transferData)\n      });\n\n      await POST(request);\n\n      expect(performanceMonitorInstance.startOperation).toHaveBeenCalledWith('create_transfer');\n      expect(performanceMonitorInstance.endOperation).toHaveBeenCalled();\n    });\n\n    it('should use cache for frequently accessed data', async () => {\n      cacheServiceInstance.get.mockResolvedValue(mockTransfers);\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers');\n      const response = await GET(request);\n\n      expect(cacheServiceInstance.get).toHaveBeenCalledWith('transfers:list:');\n      expect(response.status).toBe(200);\n    });\n\n    it('should invalidate cache after transfer operations', async () => {\n      const transferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 10 }]\n      };\n\n      (prisma.shop.findUnique as jest.Mock)\n        .mockResolvedValueOnce(mockShops[0])\n        .mockResolvedValueOnce(mockShops[1]);\n      (prisma.inventoryItem.findFirst as jest.Mock).mockResolvedValue(mockInventoryItems[0]);\n      (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => callback(prisma));\n      (prisma.inventoryTransfer.create as jest.Mock).mockResolvedValue(mockTransfers[0]);\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transferData)\n      });\n\n      await POST(request);\n\n      expect(cacheServiceInstance.invalidate).toHaveBeenCalledWith('transfers');\n      expect(cacheServiceInstance.invalidate).toHaveBeenCalledWith('inventory:shop1');\n    });\n  });\n\n  describe('Error Handling Tests', () => {\n    it('should handle database connection errors gracefully', async () => {\n      (prisma.shop.findUnique as jest.Mock).mockRejectedValue(new Error('Database connection failed'));\n\n      const transferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 10 }]\n      };\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transferData)\n      });\n\n      const response = await POST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(result.error).toContain('Internal server error');\n    });\n\n    it('should handle invalid transfer data', async () => {\n      const invalidData = {\n        sourceShopId: '', // Invalid\n        destinationShopId: 'shop2',\n        items: [] // Empty items\n      };\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      });\n\n      const response = await POST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(result.error).toBeDefined();\n    });\n\n    it('should handle unauthorized access', async () => {\n      mockVerifyToken.mockRejectedValue(new Error('Invalid token'));\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers');\n      const response = await GET(request);\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should handle permission denied', async () => {\n      mockUser.permissions = ['inventory:read']; // Missing transfer permissions\n      mockRequirePermission.mockImplementation((permission) => {\n        return (req: any, res: any, next: any) => {\n          if (permission === 'transfers:create') {\n            return NextResponse.json({ error: 'Permission denied' }, { status: 403 });\n          }\n          next();\n        };\n      });\n\n      const transferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 10 }]\n      };\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transferData)\n      });\n\n      // This would be handled by middleware in real scenario\n      expect(mockUser.permissions).not.toContain('transfers:create');\n    });\n  });\n\n  describe('Data Integrity Tests', () => {\n    it('should maintain inventory consistency during concurrent transfers', async () => {\n      // Simulate concurrent transfer attempts\n      const transfer1Data = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 30 }]\n      };\n\n      const transfer2Data = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 30 }]\n      };\n\n      // Mock inventory with only 50 available (both transfers would exceed)\n      (prisma.shop.findUnique as jest.Mock)\n        .mockResolvedValue(mockShops[0])\n        .mockResolvedValue(mockShops[1]);\n      \n      (prisma.inventoryItem.findFirst as jest.Mock)\n        .mockResolvedValue(mockInventoryItems[0]); // 50 available\n\n      (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => {\n        // Simulate database constraint preventing overselling\n        throw new Error('Insufficient inventory for concurrent transfer');\n      });\n\n      const request1 = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transfer1Data)\n      });\n\n      const request2 = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transfer2Data)\n      });\n\n      // Both should fail due to insufficient inventory\n      const [response1, response2] = await Promise.all([\n        POST(request1),\n        POST(request2)\n      ]);\n\n      expect(response1.status).toBe(500);\n      expect(response2.status).toBe(500);\n    });\n\n    it('should validate transfer item quantities are positive', async () => {\n      const invalidTransferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [\n          { productId: 'prod1', quantity: -5 } // Negative quantity\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(invalidTransferData)\n      });\n\n      const response = await POST(request);\n      const result = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(result.error).toContain('positive');\n    });\n  });\n\n  describe('Cache Performance Tests', () => {\n    it('should warm cache for frequently accessed transfers', async () => {\n      await cacheServiceInstance.warmCache();\n      expect(cacheServiceInstance.warmCache).toHaveBeenCalled();\n    });\n\n    it('should measure cache hit rates', () => {\n      const metrics = performanceMonitorInstance.getMetrics();\n      expect(metrics.cacheHitRate).toBeGreaterThan(0.8); // Expect good cache performance\n    });\n  });\n\n  describe('Audit Trail Tests', () => {\n    it('should create audit logs for transfer operations', async () => {\n      const transferData = {\n        sourceShopId: 'shop1',\n        destinationShopId: 'shop2',\n        items: [{ productId: 'prod1', quantity: 10 }]\n      };\n\n      (prisma.shop.findUnique as jest.Mock)\n        .mockResolvedValueOnce(mockShops[0])\n        .mockResolvedValueOnce(mockShops[1]);\n      (prisma.inventoryItem.findFirst as jest.Mock).mockResolvedValue(mockInventoryItems[0]);\n      (prisma.$transaction as jest.Mock).mockImplementation(async (callback) => callback(prisma));\n      (prisma.inventoryTransfer.create as jest.Mock).mockResolvedValue(mockTransfers[0]);\n      (prisma.auditLog.create as jest.Mock).mockResolvedValue({\n        id: 'audit1',\n        action: 'TRANSFER_CREATED',\n        userId: 'user1',\n        details: JSON.stringify(transferData)\n      });\n\n      const request = new NextRequest('http://localhost/api/inventory/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transferData)\n      });\n\n      await POST(request);\n\n      expect(prisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          action: 'TRANSFER_CREATED',\n          userId: 'user1',\n          details: expect.any(String),\n          timestamp: expect.any(Date)\n        }\n      });\n    });\n  });\n});"],"names":["jest","mock","mockVerifyToken","verifyToken","mockRequirePermission","requirePermission","mockPerformanceMonitor","TransferPerformanceMonitor","mockCacheService","TransferCacheService","describe","mockUser","mockShops","mockProducts","mockInventoryItems","mockTransfers","performanceMonitorInstance","cacheServiceInstance","beforeAll","startOperation","fn","endOperation","recordMetrics","getMetrics","mockReturnValue","averageResponseTime","errorRate","cacheHitRate","mockImplementation","get","set","invalidate","warmCache","beforeEach","clearAllMocks","id","email","role","permissions","name","location","sku","price","productId","shopId","quantity","reservedQuantity","cost","product","sourceShopId","destinationShopId","status","createdBy","createdAt","Date","items","mockResolvedValue","permission","req","res","next","it","transferData","prisma","shop","findUnique","mockResolvedValueOnce","inventoryItem","findFirst","$transaction","callback","inventoryTransfer","create","transferItem","transferId","update","request","NextRequest","method","body","JSON","stringify","response","POST","result","json","expect","toBe","success","toHaveBeenCalledWith","where","data","error","toContain","upsert","completedAt","action","PATCH","params","any","decrement","toHaveBeenCalled","GET","mockRejectedValue","Error","invalidData","toBeDefined","NextResponse","not","transfer1Data","transfer2Data","request1","request2","response1","response2","Promise","all","invalidTransferData","metrics","toBeGreaterThan","auditLog","userId","details","String","timestamp"],"mappings":"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"}