{"version":3,"names":["GET","cov_1mz236g7zl","f","s","fetchSalesData","shopId","periodDays","startDate","endDate","userId","monthNames","start","end","b","now","Date","getFullYear","getMonth","months","current","monthStart","monthEnd","actualEnd","actualStart","monthlyInvoices","_prisma","safeQuery","prisma","invoice","aggregate","where","createdAt","gte","lte","createdBy","_sum","total","push","month","sales","setMonth","success","data","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","searchParams","URL","url","startDateParam","get","endDateParam","tokenUserId","getUserIdFromToken","user","findUnique","id","select","name","email","roleId","roleName","permissions","isAdmin","_PermissionService","permissionService","hasPermission","filterUserId","isFiltered","userContext","dateRangeKey","toISOString","split","cacheKey","cachedData","_cache","cacheService","console","log","meta","shopFiltered","fromCache","salesResult","undefined","set","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/sales/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { permissionService } from '@/lib/services/PermissionService';\n\nexport async function fetchSalesData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date, userId?: string | null) {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    let start: Date;\n    let end: Date;\n\n    if (startDate && endDate) {\n        start = startDate;\n        end = endDate;\n    } else {\n        // Default behavior - last 6 months\n        const now = new Date();\n        end = new Date();\n        start = new Date(now.getFullYear(), now.getMonth() - 5, 1);\n    }\n    \n    const months = [];\n    const current = new Date(start.getFullYear(), start.getMonth(), 1);\n\n    while (current <= end) {\n        const monthStart = new Date(current.getFullYear(), current.getMonth(), 1);\n        const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        // Ensure we don't go beyond the specified end date\n        const actualEnd = monthEnd > end ? end : monthEnd;\n        const actualStart = monthStart < start ? start : monthStart;\n\n        const monthlyInvoices = await safeQuery(\n            () => prisma.invoice.aggregate({\n                where: {\n                    createdAt: {\n                        gte: actualStart,\n                        lte: actualEnd\n                    },\n                    ...(shopId ? { shopId } : {}),\n                    ...(userId ? { createdBy: userId } : {})\n                },\n                _sum: {\n                    total: true\n                }\n            }),\n            { _sum: { total: null } },\n            `Failed to fetch invoice data for ${monthNames[current.getMonth()]} ${current.getFullYear()}`\n        );\n\n        months.push({\n            month: `${monthNames[current.getMonth()]} ${current.getFullYear()}`,\n            sales: monthlyInvoices._sum.total || 0\n        });\n\n        // Move to next month\n        current.setMonth(current.getMonth() + 1);\n    }\n\n    return {\n        success: true,\n        data: months\n    };\n}\n\n// GET: Fetch monthly sales data with shop-based filtering\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_sales');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n\n        // Get user ID from token\n        const tokenUserId = await getUserIdFromToken(request);\n        if (!tokenUserId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: tokenUserId },\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                roleId: true,\n                roleName: true,\n                permissions: true,\n                shopId: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       await permissionService.hasPermission(user, 'admin:all') || \n                       await permissionService.hasPermission(user, 'ALL');\n\n        // Determine user filtering\n        let filterUserId: string | null = null;\n        if (!isAdmin) {\n            filterUserId = tokenUserId;\n        }\n\n        const shopId = context.isFiltered ? context.shopId : null;\n        \n        // Determine date range\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n        // Create cache key that includes shop context and user context and date range\n        const userContext = isAdmin ? 'admin' : filterUserId;\n        const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n        const cacheKey = `dashboard:sales:${shopId || 'all'}:user:${userContext}:${dateRangeKey}`;\n        \n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Sales data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh sales data');\n        const salesResult = await fetchSalesData(\n            shopId,\n            undefined,\n            startDate,\n            endDate,\n            filterUserId\n        );\n\n        // Cache for 5 minutes (sales data changes less frequently)\n        await cacheService.set(cacheKey, salesResult, 300);\n        console.log('ðŸ’¾ Sales data cached for 5 minutes');\n\n        return NextResponse.json({\n            ...salesResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        });\n    } catch (error) {\n        console.error('Error generating sales data:', error);\n\n        // Return empty array on error\n        return NextResponse.json({\n            success: false,\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                error: true\n            }\n        });\n    }\n});"],"mappingsoEaA,GAAG,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAHH,GAAA;;EA7DSI,cAAc,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdC,cAAA;;;;;kCAPoB;;;kCACR;;;kCACL;;;kCACK;;;mCAC0B;;;mCAC1B;AAE3B,eAAeA,eAAeC,MAAsB,EAAEC,UAAmB,EAAEC,SAAgB,EAAEC,OAAc,EAAEC,MAAsB;EAAA;EAAAR,cAAA,GAAAC,CAAA;EACtI,MAAMQ,UAAA;EAAA;EAAA,CAAAT,cAAA,GAAAE,CAAA,QAAa,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;EAEvG,IAAIQ,KAAA;EACJ,IAAIC,GAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAEJ;EAAI;EAAA,CAAAF,cAAA,GAAAY,CAAA,UAAAN,SAAA;EAAA;EAAA,CAAAN,cAAA,GAAAY,CAAA,UAAaL,OAAA,GAAS;IAAA;IAAAP,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACtBQ,KAAA,GAAQJ,SAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IACRS,GAAA,GAAMJ,OAAA;EACV,OAAO;IAAA;IAAAP,cAAA,GAAAY,CAAA;IACH;IACA,MAAMC,GAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAM,IAAIY,IAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAChBS,GAAA,GAAM,IAAIG,IAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACVQ,KAAA,GAAQ,IAAII,IAAA,CAAKD,GAAA,CAAIE,WAAW,IAAIF,GAAA,CAAIG,QAAQ,KAAK,GAAG;EAC5D;EAEA,MAAMC,MAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAS,EAAE;EACjB,MAAMgB,OAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAU,IAAIY,IAAA,CAAKJ,KAAA,CAAMK,WAAW,IAAIL,KAAA,CAAMM,QAAQ,IAAI;EAAA;EAAAhB,cAAA,GAAAE,CAAA;EAEhE,OAAOgB,OAAA,IAAWP,GAAA,EAAK;IACnB,MAAMQ,UAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAa,IAAIY,IAAA,CAAKI,OAAA,CAAQH,WAAW,IAAIG,OAAA,CAAQF,QAAQ,IAAI;IACvE,MAAMI,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,IAAIY,IAAA,CAAKI,OAAA,CAAQH,WAAW,IAAIG,OAAA,CAAQF,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI;IAExF;IACA,MAAMK,SAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAYkB,QAAA,GAAWT,GAAA;IAAA;IAAA,CAAAX,cAAA,GAAAY,CAAA,UAAMD,GAAA;IAAA;IAAA,CAAAX,cAAA,GAAAY,CAAA,UAAMQ,QAAA;IACzC,MAAME,WAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAciB,UAAA,GAAaT,KAAA;IAAA;IAAA,CAAAV,cAAA,GAAAY,CAAA,UAAQF,KAAA;IAAA;IAAA,CAAAV,cAAA,GAAAY,CAAA,UAAQO,UAAA;IAEjD,MAAMI,eAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAkB,MAAM,IAAAsB,OAAA,CAAAC,SAAS,EACnC,MAAM;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsB,OAAA,CAAAE,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC;QAC3BC,KAAA,EAAO;UACHC,SAAA,EAAW;YACPC,GAAA,EAAKT,WAAA;YACLU,GAAA,EAAKX;UACT;UACA,IAAIjB,MAAA;UAAA;UAAA,CAAAJ,cAAA,GAAAY,CAAA,UAAS;YAAER;UAAO;UAAA;UAAA,CAAAJ,cAAA,GAAAY,CAAA,UAAI,CAAC,CAAC;UAC5B,IAAIJ,MAAA;UAAA;UAAA,CAAAR,cAAA,GAAAY,CAAA,UAAS;YAAEqB,SAAA,EAAWzB;UAAO;UAAA;UAAA,CAAAR,cAAA,GAAAY,CAAA,UAAI,CAAC,CAAC;QAC3C;QACAsB,IAAA,EAAM;UACFC,KAAA,EAAO;QACX;MACJ;IAAA,GACA;MAAED,IAAA,EAAM;QAAEC,KAAA,EAAO;MAAK;IAAE,GACxB,oCAAoC1B,UAAU,CAACS,OAAA,CAAQF,QAAQ,GAAG,IAAIE,OAAA,CAAQH,WAAW,IAAI;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAGjGe,MAAA,CAAOmB,IAAI,CAAC;MACRC,KAAA,EAAO,GAAG5B,UAAU,CAACS,OAAA,CAAQF,QAAQ,GAAG,IAAIE,OAAA,CAAQH,WAAW,IAAI;MACnEuB,KAAA;MAAO;MAAA,CAAAtC,cAAA,GAAAY,CAAA,UAAAW,eAAA,CAAgBW,IAAI,CAACC,KAAK;MAAA;MAAA,CAAAnC,cAAA,GAAAY,CAAA,UAAI;IACzC;IAEA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACAgB,OAAA,CAAQqB,QAAQ,CAACrB,OAAA,CAAQF,QAAQ,KAAK;EAC1C;EAAA;EAAAhB,cAAA,GAAAE,CAAA;EAEA,OAAO;IACHsC,OAAA,EAAS;IACTC,IAAA,EAAMxB;EACV;AACJ;AAGO,MAAMlB,GAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAMwC,eAAA,CAAAC,iBAAiB,CAACC,cAAc,CAAC,OAAOC,OAAA,EAAsBC,OAAA;EAAA;EAAA9C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7E,IAAI;IACA;IACA,MAAM6C,UAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAA8C,KAAA,CAAAC,uBAAuB,EAACJ,OAAA,EAAS;IAAA;IAAA7C,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAAC6C,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAlD,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACrB,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAOP,UAAA,CAAWQ;MAAQ,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC1E;IAAA;IAAA;MAAAxD,cAAA,GAAAY,CAAA;IAAA;IAEA,MAAM;MAAE6C;IAAY,CAAE;IAAA;IAAA,CAAAzD,cAAA,GAAAE,CAAA,QAAG,IAAIwD,GAAA,CAAIb,OAAA,CAAQc,GAAG;IAC5C,MAAMC,cAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAiBuD,YAAA,CAAaI,GAAG,CAAC;IACxC,MAAMC,YAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAeuD,YAAA,CAAaI,GAAG,CAAC;IAEtC;IACA,MAAME,WAAA;IAAA;IAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAA8C,KAAA,CAAAgB,kBAAkB,EAACnB,OAAA;IAAA;IAAA7C,cAAA,GAAAE,CAAA;IAC7C,IAAI,CAAC6D,WAAA,EAAa;MAAA;MAAA/D,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACd,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAA6B,GAAG;QAAEE,MAAA,EAAQ;MAAI;IACpF;IAAA;IAAA;MAAAxD,cAAA,GAAAY,CAAA;IAAA;IAEA;IACA,MAAMqD,IAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAO,MAAMsB,OAAA,CAAAE,MAAM,CAACuC,IAAI,CAACC,UAAU,CAAC;MACtCrC,KAAA,EAAO;QAAEsC,EAAA,EAAIJ;MAAY;MACzBK,MAAA,EAAQ;QACJD,EAAA,EAAI;QACJE,IAAA,EAAM;QACNC,KAAA,EAAO;QACPC,MAAA,EAAQ;QACRC,QAAA,EAAU;QACVC,WAAA,EAAa;QACbrE,MAAA,EAAQ;MACZ;IACJ;IAAA;IAAAJ,cAAA,GAAAE,CAAA;IAEA,IAAI,CAAC+D,IAAA,EAAM;MAAA;MAAAjE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACP,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAiB,GAAG;QAAEE,MAAA,EAAQ;MAAI;IACxE;IAAA;IAAA;MAAAxD,cAAA,GAAAY,CAAA;IAAA;IAEA;IACA,MAAM8D,OAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA;IAAU;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAqD,IAAA,CAAKO,QAAQ,KAAK;IAAA;IAAA,CAAAxE,cAAA,GAAAY,CAAA,WAAWqD,IAAA,CAAKO,QAAQ,KAAK;IAAA;IAAA,CAAAxE,cAAA,GAAAY,CAAA,WAChD,MAAM+D,kBAAA,CAAAC,iBAAiB,CAACC,aAAa,CAACZ,IAAA,EAAM;IAAA;IAAA,CAAAjE,cAAA,GAAAY,CAAA,WAC5C,MAAM+D,kBAAA,CAAAC,iBAAiB,CAACC,aAAa,CAACZ,IAAA,EAAM;IAE3D;IACA,IAAIa,YAAA;IAAA;IAAA,CAAA9E,cAAA,GAAAE,CAAA,QAA8B;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACwE,OAAA,EAAS;MAAA;MAAA1E,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACV4E,YAAA,GAAef,WAAA;IACnB;IAAA;IAAA;MAAA/D,cAAA,GAAAY,CAAA;IAAA;IAEA,MAAMR,MAAA;IAAA;IAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAS4C,OAAA,CAAQiC,UAAU;IAAA;IAAA,CAAA/E,cAAA,GAAAY,CAAA,WAAGkC,OAAA,CAAQ1C,MAAM;IAAA;IAAA,CAAAJ,cAAA,GAAAY,CAAA,WAAG;IAErD;IACA,MAAML,OAAA;IAAA;IAAA,CAAAP,cAAA,GAAAE,CAAA,QAAU4D,YAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAY,CAAA,WAAe,IAAIE,IAAA,CAAKgD,YAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAY,CAAA,WAAgB,IAAIE,IAAA;IAC5D,MAAMR,SAAA;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,QAAY0D,cAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAY,CAAA,WAAiB,IAAIE,IAAA,CAAK8C,cAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAY,CAAA,WAAkB,IAAIE,IAAA,CAAKA,IAAA,CAAKD,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;IAEvG;IACA,MAAMmE,WAAA;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,QAAcwE,OAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAY,CAAA,WAAU;IAAA;IAAA,CAAAZ,cAAA,GAAAY,CAAA,WAAUkE,YAAA;IACxC,MAAMG,YAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAe,GAAGI,SAAA,CAAU4E,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI5E,OAAA,CAAQ2E,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;IACtG,MAAMC,QAAA;IAAA;IAAA,CAAApF,cAAA,GAAAE,CAAA,QAAW;IAAmB;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAR,MAAA;IAAA;IAAA,CAAAJ,cAAA,GAAAY,CAAA,WAAU,eAAcoE,WAAA,IAAeC,YAAA,EAAc;IAEzF,MAAMI,UAAA;IAAA;IAAA,CAAArF,cAAA,GAAAE,CAAA,QAAa,MAAMoF,MAAA,CAAAC,YAAY,CAAC1B,GAAG,CAACuB,QAAA;IAAA;IAAApF,cAAA,GAAAE,CAAA;IAE1C,IAAImF,UAAA,EAAY;MAAA;MAAArF,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACZsF,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAzF,cAAA,GAAAE,CAAA;MACZ,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACrB,GAAGgC,UAAU;QACbK,IAAA,EAAM;UACFC,YAAA,EAAc7C,OAAA,CAAQiC,UAAU;UAChC3E,MAAA,EAAQ0C,OAAA,CAAQ1C,MAAM;UACtBwF,SAAA,EAAW;QACf;MACJ;IACJ;IAAA;IAAA;MAAA5F,cAAA,GAAAY,CAAA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEAsF,OAAA,CAAQC,GAAG,CAAC;IACZ,MAAMI,WAAA;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,QAAc,MAAMC,cAAA,CACtBC,MAAA,EACA0F,SAAA,EACAxF,SAAA,EACAC,OAAA,EACAuE,YAAA;IAGJ;IAAA;IAAA9E,cAAA,GAAAE,CAAA;IACA,MAAMoF,MAAA,CAAAC,YAAY,CAACQ,GAAG,CAACX,QAAA,EAAUS,WAAA,EAAa;IAAA;IAAA7F,cAAA,GAAAE,CAAA;IAC9CsF,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAzF,cAAA,GAAAE,CAAA;IAEZ,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrB,GAAGwC,WAAW;MACdH,IAAA,EAAM;QACFC,YAAA,EAAc7C,OAAA,CAAQiC,UAAU;QAChC3E,MAAA,EAAQ0C,OAAA,CAAQ1C,MAAM;QACtBwF,SAAA,EAAW;MACf;IACJ;EACJ,EAAE,OAAOtC,KAAA,EAAO;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IACZsF,OAAA,CAAQlC,KAAK,CAAC,gCAAgCA,KAAA;IAE9C;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IACA,OAAOiD,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBb,OAAA,EAAS;MACTC,IAAA,EAAM,EAAE;MACRc,OAAA,EAASD,KAAA,YAAiB0C,KAAA;MAAA;MAAA,CAAAhG,cAAA,GAAAY,CAAA,WAAQ0C,KAAA,CAAMC,OAAO;MAAA;MAAA,CAAAvD,cAAA,GAAAY,CAAA,WAAG;MAClD8E,IAAA,EAAM;QACFC,YAAA,EAAc7C,OAAA,CAAQiC,UAAU;QAChC3E,MAAA,EAAQ0C,OAAA,CAAQ1C,MAAM;QACtBkD,KAAA,EAAO;MACX;IACJ;EACJ;AACJ","ignoreList":[]}