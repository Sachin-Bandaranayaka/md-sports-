{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/app/inventory/[productId]/edit/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport MainLayout from '@/components/layout/MainLayout';\nimport { ArrowLeft, Loader2, Save } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport Link from 'next/link';\n\ninterface Category {\n    id: number;\n    name: string;\n}\n\ninterface Product {\n    id: number;\n    name: string;\n    sku: string;\n    barcode?: string;\n    description?: string;\n    price: number;\n    weightedAverageCost: number;\n    categoryId?: number;\n    category?: {\n        id: number;\n        name: string;\n    };\n}\n\nexport default function EditProductPage() {\n    const params = useParams();\n    const router = useRouter();\n    const productId = params.productId as string;\n\n    const [product, setProduct] = useState<Product | null>(null);\n    const [categories, setCategories] = useState<Category[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [saving, setSaving] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [formData, setFormData] = useState({\n        name: '',\n        sku: '',\n        barcode: '',\n        description: '',\n        retailPrice: '',\n        basePrice: '',\n        categoryId: '',\n        minStockLevel: ''\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                \n                // Fetch product details\n                const productResponse = await fetch(`/api/products/${productId}`);\n                if (!productResponse.ok) {\n                    throw new Error('Failed to fetch product details');\n                }\n                const productData = await productResponse.json();\n                \n                if (!productData.success) {\n                    throw new Error(productData.message || 'Failed to fetch product');\n                }\n\n                const productInfo = productData.data;\n                setProduct(productInfo);\n                \n                // Set form data\n                setFormData({\n                    name: productInfo.name || '',\n                    sku: productInfo.sku || '',\n                    barcode: productInfo.barcode || '',\n                    description: productInfo.description || '',\n                    retailPrice: productInfo.price?.toString() || '',\n                    basePrice: productInfo.weightedAverageCost?.toString() || '',\n                    categoryId: productInfo.categoryId?.toString() || '',\n                    minStockLevel: productInfo.minStockLevel?.toString() || '10'\n                });\n\n                // Fetch categories\n                const categoriesResponse = await fetch('/api/categories');\n                if (categoriesResponse.ok) {\n                    const categoriesData = await categoriesResponse.json();\n                    if (categoriesData.success && Array.isArray(categoriesData.data)) {\n                        setCategories(categoriesData.data);\n                    }\n                }\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                setError(err instanceof Error ? err.message : 'Failed to load product data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (productId) {\n            fetchData();\n        }\n    }, [productId]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        setSaving(true);\n        setError(null);\n\n        try {\n            const updateData = {\n                name: formData.name,\n                sku: formData.sku,\n                barcode: formData.barcode || null,\n                description: formData.description || null,\n                retailPrice: parseFloat(formData.retailPrice) || 0,\n                basePrice: parseFloat(formData.basePrice) || 0,\n                categoryId: formData.categoryId ? parseInt(formData.categoryId) : null,\n                minStockLevel: parseInt(formData.minStockLevel) || 10\n            };\n\n            const response = await fetch(`/api/products/${productId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(updateData)\n            });\n\n            const result = await response.json();\n\n            if (!response.ok || !result.success) {\n                throw new Error(result.message || 'Failed to update product');\n            }\n\n            // Redirect back to product details or inventory page\n            router.push(`/inventory/${productId}`);\n        } catch (err) {\n            console.error('Error updating product:', err);\n            setError(err instanceof Error ? err.message : 'Failed to update product');\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    if (loading) {\n        return (\n            <MainLayout>\n                <div className=\"flex flex-col justify-center items-center h-64\">\n                    <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                    <p className=\"mt-4 text-gray-600\">Loading product details...</p>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    if (error && !product) {\n        return (\n            <MainLayout>\n                <div className=\"flex flex-col justify-center items-center h-64\">\n                    <p className=\"text-red-600 mb-4\">{error}</p>\n                    <Link href=\"/inventory\">\n                        <Button variant=\"outline\">\n                            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                            Back to Inventory\n                        </Button>\n                    </Link>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    return (\n        <MainLayout>\n            <div className=\"container mx-auto px-4 py-6\">\n                {/* Header */}\n                <div className=\"flex items-center gap-3 mb-6 border-b pb-4\">\n                    <Link href={`/inventory/${productId}`} className=\"p-2 rounded-md hover:bg-gray-100\">\n                        <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n                    </Link>\n                    <h1 className=\"text-2xl font-bold text-gray-800\">Edit Product</h1>\n                </div>\n\n                {/* Error Message */}\n                {error && (\n                    <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6\">\n                        {error}\n                    </div>\n                )}\n\n                {/* Edit Form */}\n                <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n                    <form onSubmit={handleSubmit} className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            {/* Product Name */}\n                            <div>\n                                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    Product Name *\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"name\"\n                                    name=\"name\"\n                                    value={formData.name}\n                                    onChange={handleInputChange}\n                                    required\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                    placeholder=\"Enter product name\"\n                                />\n                            </div>\n\n                            {/* SKU */}\n                            <div>\n                                <label htmlFor=\"sku\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    SKU *\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"sku\"\n                                    name=\"sku\"\n                                    value={formData.sku}\n                                    onChange={handleInputChange}\n                                    required\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                    placeholder=\"Enter SKU\"\n                                />\n                            </div>\n\n                            {/* Barcode */}\n                            <div>\n                                <label htmlFor=\"barcode\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    Barcode\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"barcode\"\n                                    name=\"barcode\"\n                                    value={formData.barcode}\n                                    onChange={handleInputChange}\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                    placeholder=\"Enter barcode\"\n                                />\n                            </div>\n\n                            {/* Category */}\n                            <div>\n                                <label htmlFor=\"categoryId\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    Category\n                                </label>\n                                <select\n                                    id=\"categoryId\"\n                                    name=\"categoryId\"\n                                    value={formData.categoryId}\n                                    onChange={handleInputChange}\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                >\n                                    <option value=\"\">Select a category</option>\n                                    {categories.map((category) => (\n                                        <option key={category.id} value={category.id}>\n                                            {category.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            {/* Retail Price */}\n                            <div>\n                                <label htmlFor=\"retailPrice\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    Retail Price (Rs.) *\n                                </label>\n                                <input\n                                    type=\"number\"\n                                    id=\"retailPrice\"\n                                    name=\"retailPrice\"\n                                    value={formData.retailPrice}\n                                    onChange={handleInputChange}\n                                    required\n                                    min=\"0\"\n                                    step=\"0.01\"\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                    placeholder=\"0.00\"\n                                />\n                            </div>\n\n                            {/* Low Stock Threshold */}\n                            <div>\n                                <label htmlFor=\"minStockLevel\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                    Low Stock Threshold\n                                </label>\n                                <input\n                                    type=\"number\"\n                                    id=\"minStockLevel\"\n                                    name=\"minStockLevel\"\n                                    value={formData.minStockLevel}\n                                    onChange={handleInputChange}\n                                    min=\"1\"\n                                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                    placeholder=\"Enter minimum stock level\"\n                                />\n                                <p className=\"text-xs text-gray-500 mt-1\">\n                                    Products will be marked as \"Low Stock\" when quantity falls below this threshold\n                                </p>\n                            </div>\n\n\n                        </div>\n\n                        {/* Description */}\n                        <div>\n                            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                                Description\n                            </label>\n                            <textarea\n                                id=\"description\"\n                                name=\"description\"\n                                value={formData.description}\n                                onChange={handleInputChange}\n                                rows={4}\n                                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900\"\n                                placeholder=\"Enter product description\"\n                            />\n                        </div>\n\n                        {/* Form Actions */}\n                        <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                            <Link href={`/inventory/${productId}`}>\n                                <Button type=\"button\" variant=\"outline\" disabled={saving}>\n                                    Cancel\n                                </Button>\n                            </Link>\n                            <Button type=\"submit\" variant=\"primary\" disabled={saving}>\n                                {saving ? (\n                                    <>\n                                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                                        Saving...\n                                    </>\n                                ) : (\n                                    <>\n                                        <Save className=\"w-4 h-4 mr-2\" />\n                                        Save Changes\n                                    </>\n                                )}\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </MainLayout>\n    );\n}"],"names":["EditProductPage","params","useParams","router","useRouter","productId","product","setProduct","useState","categories","setCategories","loading","setLoading","saving","setSaving","error","setError","formData","setFormData","name","sku","barcode","description","retailPrice","basePrice","categoryId","minStockLevel","useEffect","fetchData","productResponse","fetch","ok","Error","productData","json","success","message","productInfo","data","price","toString","weightedAverageCost","categoriesResponse","categoriesData","Array","isArray","err","console","handleInputChange","e","value","target","prev","handleSubmit","preventDefault","updateData","parseFloat","parseInt","response","method","headers","body","JSON","stringify","result","push","MainLayout","div","className","Loader2","p","Link","href","Button","variant","ArrowLeft","h1","form","onSubmit","label","htmlFor","input","type","id","onChange","required","placeholder","select","option","map","category","min","step","textarea","rows","disabled","Save"],"mappings":"AAAA;;;;;+BA6BA;;;eAAwBA;;;;uBA3BY;4BACC;mEACd;6BACkB;wBAClB;6DACN;;;;;;AAsBF,SAASA;IACpB,MAAMC,SAASC,IAAAA,qBAAS;IACxB,MAAMC,SAASC,IAAAA,qBAAS;IACxB,MAAMC,YAAYJ,OAAOI,SAAS;IAElC,MAAM,CAACC,SAASC,WAAW,GAAGC,IAAAA,eAAQ,EAAiB;IACvD,MAAM,CAACC,YAAYC,cAAc,GAAGF,IAAAA,eAAQ,EAAa,EAAE;IAC3D,MAAM,CAACG,SAASC,WAAW,GAAGJ,IAAAA,eAAQ,EAAC;IACvC,MAAM,CAACK,QAAQC,UAAU,GAAGN,IAAAA,eAAQ,EAAC;IACrC,MAAM,CAACO,OAAOC,SAAS,GAAGR,IAAAA,eAAQ,EAAgB;IAClD,MAAM,CAACS,UAAUC,YAAY,GAAGV,IAAAA,eAAQ,EAAC;QACrCW,MAAM;QACNC,KAAK;QACLC,SAAS;QACTC,aAAa;QACbC,aAAa;QACbC,WAAW;QACXC,YAAY;QACZC,eAAe;IACnB;IAEAC,IAAAA,gBAAS,EAAC;QACN,MAAMC,YAAY;YACd,IAAI;gBACAhB,WAAW;gBAEX,wBAAwB;gBACxB,MAAMiB,kBAAkB,MAAMC,MAAM,CAAC,cAAc,EAAEzB,UAAU,CAAC;gBAChE,IAAI,CAACwB,gBAAgBE,EAAE,EAAE;oBACrB,MAAM,IAAIC,MAAM;gBACpB;gBACA,MAAMC,cAAc,MAAMJ,gBAAgBK,IAAI;gBAE9C,IAAI,CAACD,YAAYE,OAAO,EAAE;oBACtB,MAAM,IAAIH,MAAMC,YAAYG,OAAO,IAAI;gBAC3C;gBAEA,MAAMC,cAAcJ,YAAYK,IAAI;gBACpC/B,WAAW8B;gBAEX,gBAAgB;gBAChBnB,YAAY;oBACRC,MAAMkB,YAAYlB,IAAI,IAAI;oBAC1BC,KAAKiB,YAAYjB,GAAG,IAAI;oBACxBC,SAASgB,YAAYhB,OAAO,IAAI;oBAChCC,aAAae,YAAYf,WAAW,IAAI;oBACxCC,aAAac,YAAYE,KAAK,EAAEC,cAAc;oBAC9ChB,WAAWa,YAAYI,mBAAmB,EAAED,cAAc;oBAC1Df,YAAYY,YAAYZ,UAAU,EAAEe,cAAc;oBAClDd,eAAeW,YAAYX,aAAa,EAAEc,cAAc;gBAC5D;gBAEA,mBAAmB;gBACnB,MAAME,qBAAqB,MAAMZ,MAAM;gBACvC,IAAIY,mBAAmBX,EAAE,EAAE;oBACvB,MAAMY,iBAAiB,MAAMD,mBAAmBR,IAAI;oBACpD,IAAIS,eAAeR,OAAO,IAAIS,MAAMC,OAAO,CAACF,eAAeL,IAAI,GAAG;wBAC9D5B,cAAciC,eAAeL,IAAI;oBACrC;gBACJ;YACJ,EAAE,OAAOQ,KAAK;gBACVC,QAAQhC,KAAK,CAAC,wBAAwB+B;gBACtC9B,SAAS8B,eAAed,QAAQc,IAAIV,OAAO,GAAG;YAClD,SAAU;gBACNxB,WAAW;YACf;QACJ;QAEA,IAAIP,WAAW;YACXuB;QACJ;IACJ,GAAG;QAACvB;KAAU;IAEd,MAAM2C,oBAAoB,CAACC;QACvB,MAAM,EAAE9B,IAAI,EAAE+B,KAAK,EAAE,GAAGD,EAAEE,MAAM;QAChCjC,YAAYkC,CAAAA,OAAS,CAAA;gBACjB,GAAGA,IAAI;gBACP,CAACjC,KAAK,EAAE+B;YACZ,CAAA;IACJ;IAEA,MAAMG,eAAe,OAAOJ;QACxBA,EAAEK,cAAc;QAChBxC,UAAU;QACVE,SAAS;QAET,IAAI;YACA,MAAMuC,aAAa;gBACfpC,MAAMF,SAASE,IAAI;gBACnBC,KAAKH,SAASG,GAAG;gBACjBC,SAASJ,SAASI,OAAO,IAAI;gBAC7BC,aAAaL,SAASK,WAAW,IAAI;gBACrCC,aAAaiC,WAAWvC,SAASM,WAAW,KAAK;gBACjDC,WAAWgC,WAAWvC,SAASO,SAAS,KAAK;gBAC7CC,YAAYR,SAASQ,UAAU,GAAGgC,SAASxC,SAASQ,UAAU,IAAI;gBAClEC,eAAe+B,SAASxC,SAASS,aAAa,KAAK;YACvD;YAEA,MAAMgC,WAAW,MAAM5B,MAAM,CAAC,cAAc,EAAEzB,UAAU,CAAC,EAAE;gBACvDsD,QAAQ;gBACRC,SAAS;oBACL,gBAAgB;gBACpB;gBACAC,MAAMC,KAAKC,SAAS,CAACR;YACzB;YAEA,MAAMS,SAAS,MAAMN,SAASxB,IAAI;YAElC,IAAI,CAACwB,SAAS3B,EAAE,IAAI,CAACiC,OAAO7B,OAAO,EAAE;gBACjC,MAAM,IAAIH,MAAMgC,OAAO5B,OAAO,IAAI;YACtC;YAEA,qDAAqD;YACrDjC,OAAO8D,IAAI,CAAC,CAAC,WAAW,EAAE5D,UAAU,CAAC;QACzC,EAAE,OAAOyC,KAAK;YACVC,QAAQhC,KAAK,CAAC,2BAA2B+B;YACzC9B,SAAS8B,eAAed,QAAQc,IAAIV,OAAO,GAAG;QAClD,SAAU;YACNtB,UAAU;QACd;IACJ;IAEA,IAAIH,SAAS;QACT,qBACI,qBAACuD,mBAAU;sBACP,cAAA,sBAACC;gBAAIC,WAAU;;kCACX,qBAACC,oBAAO;wBAACD,WAAU;;kCACnB,qBAACE;wBAAEF,WAAU;kCAAqB;;;;;IAIlD;IAEA,IAAIrD,SAAS,CAACT,SAAS;QACnB,qBACI,qBAAC4D,mBAAU;sBACP,cAAA,sBAACC;gBAAIC,WAAU;;kCACX,qBAACE;wBAAEF,WAAU;kCAAqBrD;;kCAClC,qBAACwD,aAAI;wBAACC,MAAK;kCACP,cAAA,sBAACC,cAAM;4BAACC,SAAQ;;8CACZ,qBAACC,sBAAS;oCAACP,WAAU;;gCAAiB;;;;;;;IAO9D;IAEA,qBACI,qBAACF,mBAAU;kBACP,cAAA,sBAACC;YAAIC,WAAU;;8BAEX,sBAACD;oBAAIC,WAAU;;sCACX,qBAACG,aAAI;4BAACC,MAAM,CAAC,WAAW,EAAEnE,UAAU,CAAC;4BAAE+D,WAAU;sCAC7C,cAAA,qBAACO,sBAAS;gCAACP,WAAU;;;sCAEzB,qBAACQ;4BAAGR,WAAU;sCAAmC;;;;gBAIpDrD,uBACG,qBAACoD;oBAAIC,WAAU;8BACVrD;;8BAKT,qBAACoD;oBAAIC,WAAU;8BACX,cAAA,sBAACS;wBAAKC,UAAUzB;wBAAce,WAAU;;0CACpC,sBAACD;gCAAIC,WAAU;;kDAEX,sBAACD;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAOZ,WAAU;0DAA+C;;0DAG/E,qBAACa;gDACGC,MAAK;gDACLC,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASE,IAAI;gDACpBiE,UAAUpC;gDACVqC,QAAQ;gDACRjB,WAAU;gDACVkB,aAAY;;;;kDAKpB,sBAACnB;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAMZ,WAAU;0DAA+C;;0DAG9E,qBAACa;gDACGC,MAAK;gDACLC,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASG,GAAG;gDACnBgE,UAAUpC;gDACVqC,QAAQ;gDACRjB,WAAU;gDACVkB,aAAY;;;;kDAKpB,sBAACnB;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAUZ,WAAU;0DAA+C;;0DAGlF,qBAACa;gDACGC,MAAK;gDACLC,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASI,OAAO;gDACvB+D,UAAUpC;gDACVoB,WAAU;gDACVkB,aAAY;;;;kDAKpB,sBAACnB;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAaZ,WAAU;0DAA+C;;0DAGrF,sBAACmB;gDACGJ,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASQ,UAAU;gDAC1B2D,UAAUpC;gDACVoB,WAAU;;kEAEV,qBAACoB;wDAAOtC,OAAM;kEAAG;;oDAChBzC,WAAWgF,GAAG,CAAC,CAACC,yBACb,qBAACF;4DAAyBtC,OAAOwC,SAASP,EAAE;sEACvCO,SAASvE,IAAI;2DADLuE,SAASP,EAAE;;;;;kDAQpC,sBAAChB;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAcZ,WAAU;0DAA+C;;0DAGtF,qBAACa;gDACGC,MAAK;gDACLC,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASM,WAAW;gDAC3B6D,UAAUpC;gDACVqC,QAAQ;gDACRM,KAAI;gDACJC,MAAK;gDACLxB,WAAU;gDACVkB,aAAY;;;;kDAKpB,sBAACnB;;0DACG,qBAACY;gDAAMC,SAAQ;gDAAgBZ,WAAU;0DAA+C;;0DAGxF,qBAACa;gDACGC,MAAK;gDACLC,IAAG;gDACHhE,MAAK;gDACL+B,OAAOjC,SAASS,aAAa;gDAC7B0D,UAAUpC;gDACV2C,KAAI;gDACJvB,WAAU;gDACVkB,aAAY;;0DAEhB,qBAAChB;gDAAEF,WAAU;0DAA6B;;;;;;0CASlD,sBAACD;;kDACG,qBAACY;wCAAMC,SAAQ;wCAAcZ,WAAU;kDAA+C;;kDAGtF,qBAACyB;wCACGV,IAAG;wCACHhE,MAAK;wCACL+B,OAAOjC,SAASK,WAAW;wCAC3B8D,UAAUpC;wCACV8C,MAAM;wCACN1B,WAAU;wCACVkB,aAAY;;;;0CAKpB,sBAACnB;gCAAIC,WAAU;;kDACX,qBAACG,aAAI;wCAACC,MAAM,CAAC,WAAW,EAAEnE,UAAU,CAAC;kDACjC,cAAA,qBAACoE,cAAM;4CAACS,MAAK;4CAASR,SAAQ;4CAAUqB,UAAUlF;sDAAQ;;;kDAI9D,qBAAC4D,cAAM;wCAACS,MAAK;wCAASR,SAAQ;wCAAUqB,UAAUlF;kDAC7CA,uBACG;;8DACI,qBAACwD,oBAAO;oDAACD,WAAU;;gDAA8B;;2DAIrD;;8DACI,qBAAC4B,iBAAI;oDAAC5B,WAAU;;gDAAiB;;;;;;;;;;;;AAWzE"}