{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/customerManagement.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('Customer Management System', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with customer management permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Sales Manager',\n        email: 'sales@test.com',\n        permissions: ['sales:view', 'sales:create', 'sales:edit', 'customers:view', 'customers:create', 'customers:edit']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      hasPermission: jest.fn((permission) => {\n        const userPermissions = ['sales:view', 'sales:create', 'sales:edit', 'customers:view', 'customers:create', 'customers:edit'];\n        return userPermissions.includes(permission);\n      })\n    });\n  });\n\n  describe('Customer Creation and Validation', () => {\n    test('should validate customer data correctly', () => {\n      const validateCustomer = (customer: any) => {\n        const errors: string[] = [];\n        \n        if (!customer.name || customer.name.trim().length === 0) {\n          errors.push('Customer name is required');\n        }\n        \n        if (customer.name && customer.name.length > 100) {\n          errors.push('Customer name must be 100 characters or less');\n        }\n        \n        if (customer.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(customer.email)) {\n          errors.push('Invalid email format');\n        }\n        \n        if (customer.phone && !/^[\\d\\s\\-\\+\\(\\)]+$/.test(customer.phone)) {\n          errors.push('Invalid phone number format');\n        }\n        \n        if (customer.creditLimit && customer.creditLimit < 0) {\n          errors.push('Credit limit cannot be negative');\n        }\n        \n        if (customer.paymentTerms && customer.paymentTerms < 0) {\n          errors.push('Payment terms cannot be negative');\n        }\n        \n        return errors;\n      };\n\n      const validCustomer = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        phone: '+1234567890',\n        address: '123 Main St',\n        creditLimit: 5000,\n        paymentTerms: 30\n      };\n\n      expect(validateCustomer(validCustomer)).toEqual([]);\n      expect(validateCustomer({ ...validCustomer, name: '' })).toContain('Customer name is required');\n      expect(validateCustomer({ ...validCustomer, email: 'invalid-email' })).toContain('Invalid email format');\n      expect(validateCustomer({ ...validCustomer, phone: 'abc123' })).toContain('Invalid phone number format');\n      expect(validateCustomer({ ...validCustomer, creditLimit: -100 })).toContain('Credit limit cannot be negative');\n    });\n\n    test('should handle customer creation API call', async () => {\n      const createCustomer = async (customerData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            success: true,\n            customer: { id: 'cust123', ...customerData },\n            message: 'Customer created successfully'\n          })\n        });\n\n        const response = await fetch('/api/customers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(customerData)\n        });\n\n        return response.json();\n      };\n\n      const customerData = {\n        name: 'Jane Smith',\n        email: 'jane@example.com',\n        phone: '+1987654321',\n        creditLimit: 3000\n      };\n\n      const result = await createCustomer(customerData);\n      expect(result.success).toBe(true);\n      expect(result.customer.id).toBe('cust123');\n      expect(mockFetch).toHaveBeenCalledWith('/api/customers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token'\n        },\n        body: JSON.stringify(customerData)\n      });\n    });\n  });\n\n  describe('Credit Limit Management', () => {\n    test('should calculate available credit correctly', () => {\n      const calculateAvailableCredit = (creditLimit: number, currentBalance: number) => {\n        return Math.max(0, creditLimit - currentBalance);\n      };\n\n      expect(calculateAvailableCredit(5000, 2000)).toBe(3000);\n      expect(calculateAvailableCredit(5000, 5000)).toBe(0);\n      expect(calculateAvailableCredit(5000, 6000)).toBe(0); // Cannot go negative\n    });\n\n    test('should validate credit limit changes', () => {\n      const validateCreditLimitChange = (currentBalance: number, newCreditLimit: number) => {\n        const errors: string[] = [];\n        \n        if (newCreditLimit < 0) {\n          errors.push('Credit limit cannot be negative');\n        }\n        \n        if (newCreditLimit < currentBalance) {\n          errors.push('Credit limit cannot be less than current balance');\n        }\n        \n        return errors;\n      };\n\n      expect(validateCreditLimitChange(2000, 5000)).toEqual([]);\n      expect(validateCreditLimitChange(2000, -100)).toContain('Credit limit cannot be negative');\n      expect(validateCreditLimitChange(2000, 1500)).toContain('Credit limit cannot be less than current balance');\n    });\n\n    test('should check credit availability for new sales', () => {\n      const checkCreditAvailability = (customer: any, saleAmount: number) => {\n        const availableCredit = customer.creditLimit - customer.currentBalance;\n        return {\n          approved: availableCredit >= saleAmount,\n          availableCredit,\n          requiredCredit: saleAmount,\n          shortfall: Math.max(0, saleAmount - availableCredit)\n        };\n      };\n\n      const customer = { creditLimit: 5000, currentBalance: 2000 };\n      \n      const result1 = checkCreditAvailability(customer, 2000);\n      expect(result1.approved).toBe(true);\n      expect(result1.availableCredit).toBe(3000);\n      expect(result1.shortfall).toBe(0);\n      \n      const result2 = checkCreditAvailability(customer, 4000);\n      expect(result2.approved).toBe(false);\n      expect(result2.shortfall).toBe(1000);\n    });\n  });\n\n  describe('Payment Terms and Due Dates', () => {\n    test('should calculate due dates correctly', () => {\n      const calculateDueDate = (invoiceDate: Date, paymentTerms: number) => {\n        const dueDate = new Date(invoiceDate);\n        dueDate.setDate(dueDate.getDate() + paymentTerms);\n        return dueDate;\n      };\n\n      const invoiceDate = new Date('2024-01-01');\n      const dueDate = calculateDueDate(invoiceDate, 30);\n      expect(dueDate.toISOString().split('T')[0]).toBe('2024-01-31');\n    });\n\n    test('should identify overdue invoices', () => {\n      const isOverdue = (dueDate: Date, currentDate: Date = new Date()) => {\n        return currentDate > dueDate;\n      };\n\n      const pastDate = new Date('2023-12-01');\n      const futureDate = new Date('2025-12-01');\n      const today = new Date();\n\n      expect(isOverdue(pastDate, today)).toBe(true);\n      expect(isOverdue(futureDate, today)).toBe(false);\n    });\n\n    test('should calculate aging buckets', () => {\n      const calculateAging = (dueDate: Date, currentDate: Date = new Date()) => {\n        const daysPastDue = Math.floor((currentDate.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (daysPastDue <= 0) return 'current';\n        if (daysPastDue <= 30) return '1-30 days';\n        if (daysPastDue <= 60) return '31-60 days';\n        if (daysPastDue <= 90) return '61-90 days';\n        return 'over 90 days';\n      };\n\n      const today = new Date();\n      const date30DaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n      const date60DaysAgo = new Date(today.getTime() - 60 * 24 * 60 * 60 * 1000);\n      const date100DaysAgo = new Date(today.getTime() - 100 * 24 * 60 * 60 * 1000);\n\n      expect(calculateAging(today)).toBe('current');\n      expect(calculateAging(date30DaysAgo)).toBe('1-30 days');\n      expect(calculateAging(date60DaysAgo)).toBe('31-60 days');\n      expect(calculateAging(date100DaysAgo)).toBe('over 90 days');\n    });\n  });\n\n  describe('Customer Transaction History', () => {\n    test('should calculate customer balance correctly', () => {\n      const calculateCustomerBalance = (transactions: any[]) => {\n        return transactions.reduce((balance, transaction) => {\n          if (transaction.type === 'invoice') {\n            return balance + transaction.amount;\n          } else if (transaction.type === 'payment') {\n            return balance - transaction.amount;\n          } else if (transaction.type === 'credit') {\n            return balance - transaction.amount;\n          }\n          return balance;\n        }, 0);\n      };\n\n      const transactions = [\n        { type: 'invoice', amount: 1000 },\n        { type: 'payment', amount: 500 },\n        { type: 'invoice', amount: 800 },\n        { type: 'credit', amount: 100 }\n      ];\n\n      expect(calculateCustomerBalance(transactions)).toBe(1200); // 1000 - 500 + 800 - 100\n    });\n\n    test('should filter transactions by date range', () => {\n      const filterTransactionsByDateRange = (transactions: any[], startDate: Date, endDate: Date) => {\n        return transactions.filter(transaction => {\n          const transactionDate = new Date(transaction.date);\n          return transactionDate >= startDate && transactionDate <= endDate;\n        });\n      };\n\n      const transactions = [\n        { id: 1, date: '2024-01-15', amount: 100 },\n        { id: 2, date: '2024-02-15', amount: 200 },\n        { id: 3, date: '2024-03-15', amount: 300 }\n      ];\n\n      const startDate = new Date('2024-02-01');\n      const endDate = new Date('2024-02-28');\n      const filtered = filterTransactionsByDateRange(transactions, startDate, endDate);\n\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].id).toBe(2);\n    });\n\n    test('should generate customer statement', () => {\n      const generateCustomerStatement = (customer: any, transactions: any[]) => {\n        const invoices = transactions.filter(t => t.type === 'invoice');\n        const payments = transactions.filter(t => t.type === 'payment');\n        const credits = transactions.filter(t => t.type === 'credit');\n        \n        const totalInvoiced = invoices.reduce((sum, inv) => sum + inv.amount, 0);\n        const totalPaid = payments.reduce((sum, pay) => sum + pay.amount, 0);\n        const totalCredits = credits.reduce((sum, cr) => sum + cr.amount, 0);\n        const currentBalance = totalInvoiced - totalPaid - totalCredits;\n        \n        return {\n          customer,\n          summary: {\n            totalInvoiced,\n            totalPaid,\n            totalCredits,\n            currentBalance\n          },\n          transactions: transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n        };\n      };\n\n      const customer = { id: 'cust1', name: 'John Doe' };\n      const transactions = [\n        { type: 'invoice', amount: 1000, date: '2024-01-01' },\n        { type: 'payment', amount: 600, date: '2024-01-15' },\n        { type: 'credit', amount: 50, date: '2024-01-20' }\n      ];\n\n      const statement = generateCustomerStatement(customer, transactions);\n      expect(statement.summary.totalInvoiced).toBe(1000);\n      expect(statement.summary.totalPaid).toBe(600);\n      expect(statement.summary.totalCredits).toBe(50);\n      expect(statement.summary.currentBalance).toBe(350);\n    });\n  });\n\n  describe('Customer Search and Filtering', () => {\n    test('should search customers by name', () => {\n      const searchCustomers = (customers: any[], searchTerm: string) => {\n        if (!searchTerm) return customers;\n        \n        const term = searchTerm.toLowerCase();\n        return customers.filter(customer => \n          customer.name.toLowerCase().includes(term) ||\n          customer.email?.toLowerCase().includes(term) ||\n          customer.phone?.includes(term)\n        );\n      };\n\n      const customers = [\n        { name: 'John Doe', email: 'john@example.com', phone: '123456789' },\n        { name: 'Jane Smith', email: 'jane@example.com', phone: '987654321' },\n        { name: 'Bob Johnson', email: 'bob@example.com', phone: '555666777' }\n      ];\n\n      expect(searchCustomers(customers, 'john')).toHaveLength(2); // John Doe and Bob Johnson\n      expect(searchCustomers(customers, 'jane@')).toHaveLength(1);\n      expect(searchCustomers(customers, '555')).toHaveLength(1);\n    });\n\n    test('should filter customers by credit status', () => {\n      const filterByCredit = (customers: any[], filterType: string) => {\n        switch (filterType) {\n          case 'overLimit':\n            return customers.filter(c => c.currentBalance > c.creditLimit);\n          case 'nearLimit':\n            return customers.filter(c => {\n              const utilization = c.currentBalance / c.creditLimit;\n              return utilization >= 0.8 && utilization <= 1;\n            });\n          case 'goodStanding':\n            return customers.filter(c => c.currentBalance <= c.creditLimit * 0.8);\n          default:\n            return customers;\n        }\n      };\n\n      const customers = [\n        { name: 'Customer A', creditLimit: 1000, currentBalance: 1200 }, // Over limit\n        { name: 'Customer B', creditLimit: 1000, currentBalance: 900 },  // Near limit\n        { name: 'Customer C', creditLimit: 1000, currentBalance: 500 }   // Good standing\n      ];\n\n      expect(filterByCredit(customers, 'overLimit')).toHaveLength(1);\n      expect(filterByCredit(customers, 'nearLimit')).toHaveLength(1);\n      expect(filterByCredit(customers, 'goodStanding')).toHaveLength(1);\n    });\n  });\n\n  describe('Customer API Integration', () => {\n    test('should fetch customer list with pagination', async () => {\n      const fetchCustomers = async (page: number = 1, limit: number = 10, search?: string) => {\n        const params = new URLSearchParams({\n          page: page.toString(),\n          limit: limit.toString(),\n          ...(search && { search })\n        });\n\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            customers: [\n              { id: 'cust1', name: 'Customer 1' },\n              { id: 'cust2', name: 'Customer 2' }\n            ],\n            pagination: {\n              page: 1,\n              limit: 10,\n              total: 25,\n              pages: 3\n            }\n          })\n        });\n\n        const response = await fetch(`/api/customers?${params}`, {\n          headers: { 'Authorization': 'Bearer mock-token' }\n        });\n\n        return response.json();\n      };\n\n      const result = await fetchCustomers(1, 10, 'test');\n      expect(result.customers).toHaveLength(2);\n      expect(result.pagination.total).toBe(25);\n    });\n\n    test('should update customer information', async () => {\n      const updateCustomer = async (customerId: string, updateData: any) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            success: true,\n            customer: { id: customerId, ...updateData },\n            message: 'Customer updated successfully'\n          })\n        });\n\n        const response = await fetch(`/api/customers/${customerId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-token'\n          },\n          body: JSON.stringify(updateData)\n        });\n\n        return response.json();\n      };\n\n      const updateData = { creditLimit: 7500, paymentTerms: 45 };\n      const result = await updateCustomer('cust123', updateData);\n      \n      expect(result.success).toBe(true);\n      expect(result.customer.creditLimit).toBe(7500);\n    });\n  });\n\n  describe('Permission-based Access Control', () => {\n    test('should restrict customer operations based on permissions', () => {\n      const checkCustomerAccess = (userPermissions: string[], action: string) => {\n        const permissionMap: Record<string, string> = {\n          'view': 'customers:view',\n          'create': 'customers:create',\n          'edit': 'customers:edit',\n          'delete': 'customers:delete'\n        };\n        \n        const requiredPermission = permissionMap[action];\n        return userPermissions.includes(requiredPermission) || userPermissions.includes('sales:manage');\n      };\n\n      const userPermissions = ['customers:view', 'customers:create'];\n      \n      expect(checkCustomerAccess(userPermissions, 'view')).toBe(true);\n      expect(checkCustomerAccess(userPermissions, 'create')).toBe(true);\n      expect(checkCustomerAccess(userPermissions, 'edit')).toBe(false);\n      expect(checkCustomerAccess(userPermissions, 'delete')).toBe(false);\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","mockFetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","hasPermission","permission","userPermissions","includes","test","validateCustomer","customer","errors","trim","length","phone","creditLimit","paymentTerms","validCustomer","address","expect","toEqual","toContain","createCustomer","customerData","mockResolvedValueOnce","ok","json","success","message","response","method","headers","body","JSON","stringify","result","toBe","toHaveBeenCalledWith","calculateAvailableCredit","currentBalance","Math","max","validateCreditLimitChange","newCreditLimit","checkCreditAvailability","saleAmount","availableCredit","approved","requiredCredit","shortfall","result1","result2","calculateDueDate","invoiceDate","dueDate","Date","setDate","getDate","toISOString","split","isOverdue","currentDate","pastDate","futureDate","today","calculateAging","daysPastDue","floor","getTime","date30DaysAgo","date60DaysAgo","date100DaysAgo","calculateCustomerBalance","transactions","reduce","balance","transaction","type","amount","filterTransactionsByDateRange","startDate","endDate","filter","transactionDate","date","filtered","toHaveLength","generateCustomerStatement","invoices","t","payments","credits","totalInvoiced","sum","inv","totalPaid","pay","totalCredits","cr","summary","sort","a","b","statement","searchCustomers","customers","searchTerm","term","toLowerCase","filterByCredit","filterType","c","utilization","fetchCustomers","page","limit","search","params","URLSearchParams","toString","pagination","total","pages","updateCustomer","customerId","updateData","checkCustomerAccess","action","permissionMap","requiredPermission"],"mappings":"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"}