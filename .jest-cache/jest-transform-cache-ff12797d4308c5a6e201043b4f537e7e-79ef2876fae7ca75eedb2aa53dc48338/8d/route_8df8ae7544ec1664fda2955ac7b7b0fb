4c94270dcd1c01f7cbb9d6aaacec3e71
"use strict";

/* istanbul ignore next */
function cov_1z1k2ubu6c() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts";
  var hash = "127999597b669d0353056b9b9869553992a5f2d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "13": {
        start: {
          line: 28,
          column: 39
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "14": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "15": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "16": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 20
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 66
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 19
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "23": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "24": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "25": {
        start: {
          line: 48,
          column: 17
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "26": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 88
        }
      },
      "27": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "28": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "29": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 95
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "31": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "32": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 39
        }
      },
      "33": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "34": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "35": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "36": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 18
        }
      },
      "37": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "38": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 46
        }
      },
      "39": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "40": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "41": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "42": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "43": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "44": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "45": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 51
        }
      },
      "46": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 57
        }
      },
      "47": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "48": {
        start: {
          line: 118,
          column: 28
        },
        end: {
          line: 118,
          column: 96
        }
      },
      "49": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "50": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 31
        }
      },
      "51": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 290,
          column: 5
        }
      },
      "52": {
        start: {
          line: 124,
          column: 32
        },
        end: {
          line: 124,
          column: 46
        }
      },
      "53": {
        start: {
          line: 125,
          column: 19
        },
        end: {
          line: 125,
          column: 36
        }
      },
      "54": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "55": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "56": {
        start: {
          line: 134,
          column: 22
        },
        end: {
          line: 134,
          column: 82
        }
      },
      "57": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "58": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 64
        }
      },
      "59": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "60": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 59
        }
      },
      "61": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "62": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 65
        }
      },
      "63": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "64": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 41
        }
      },
      "65": {
        start: {
          line: 153,
          column: 189
        },
        end: {
          line: 153,
          column: 193
        }
      },
      "66": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 31
        }
      },
      "67": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "68": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "69": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "70": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "71": {
        start: {
          line: 160,
          column: 20
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "72": {
        start: {
          line: 161,
          column: 46
        },
        end: {
          line: 161,
          column: 84
        }
      },
      "73": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 87
        }
      },
      "74": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 94
        }
      },
      "75": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 136
        }
      },
      "76": {
        start: {
          line: 173,
          column: 15
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "77": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 43
        }
      },
      "78": {
        start: {
          line: 177,
          column: 216
        },
        end: {
          line: 177,
          column: 230
        }
      },
      "79": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 80
        }
      },
      "80": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 180,
          column: 70
        }
      },
      "81": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 73
        }
      },
      "82": {
        start: {
          line: 182,
          column: 22
        },
        end: {
          line: 182,
          column: 55
        }
      },
      "83": {
        start: {
          line: 183,
          column: 35
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "84": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "85": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "86": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "87": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "88": {
        start: {
          line: 215,
          column: 37
        },
        end: {
          line: 222,
          column: 14
        }
      },
      "89": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "90": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 230,
          column: 19
        }
      },
      "91": {
        start: {
          line: 234,
          column: 33
        },
        end: {
          line: 238,
          column: 10
        }
      },
      "92": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "93": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 245,
          column: 15
        }
      },
      "94": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "95": {
        start: {
          line: 254,
          column: 24
        },
        end: {
          line: 254,
          column: 26
        }
      },
      "96": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "97": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "98": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 260,
          column: 18
        }
      },
      "99": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "100": {
        start: {
          line: 264,
          column: 33
        },
        end: {
          line: 264,
          column: 73
        }
      },
      "101": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "102": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 274,
          column: 131
        }
      },
      "103": {
        start: {
          line: 274,
          column: 82
        },
        end: {
          line: 274,
          column: 130
        }
      },
      "104": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 37
        }
      },
      "105": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "106": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 57
        }
      },
      "107": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "108": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 96
        }
      },
      "109": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "110": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 31
        }
      },
      "111": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 366,
          column: 5
        }
      },
      "112": {
        start: {
          line: 300,
          column: 22
        },
        end: {
          line: 300,
          column: 82
        }
      },
      "113": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "114": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 63
        }
      },
      "115": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 308,
          column: 15
        }
      },
      "116": {
        start: {
          line: 310,
          column: 24
        },
        end: {
          line: 310,
          column: 59
        }
      },
      "117": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "118": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 75
        }
      },
      "119": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "120": {
        start: {
          line: 321,
          column: 32
        },
        end: {
          line: 321,
          column: 46
        }
      },
      "121": {
        start: {
          line: 322,
          column: 19
        },
        end: {
          line: 322,
          column: 36
        }
      },
      "122": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "123": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "124": {
        start: {
          line: 332,
          column: 25
        },
        end: {
          line: 339,
          column: 10
        }
      },
      "125": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "126": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "127": {
        start: {
          line: 351,
          column: 29
        },
        end: {
          line: 351,
          column: 69
        }
      },
      "128": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 83
        }
      },
      "129": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 356,
          column: 11
        }
      },
      "130": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 57
        }
      },
      "131": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 365,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 47
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 31,
            column: 40
          }
        },
        loc: {
          start: {
            line: 31,
            column: 61
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "6": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 34
          }
        },
        loc: {
          start: {
            line: 35,
            column: 53
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 35
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 37
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 68
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 18
          }
        },
        loc: {
          start: {
            line: 116,
            column: 37
          },
          end: {
            line: 291,
            column: 1
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 208,
            column: 48
          },
          end: {
            line: 208,
            column: 49
          }
        },
        loc: {
          start: {
            line: 208,
            column: 55
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 208
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 48
          },
          end: {
            line: 255,
            column: 49
          }
        },
        loc: {
          start: {
            line: 255,
            column: 55
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 274,
            column: 64
          },
          end: {
            line: 274,
            column: 65
          }
        },
        loc: {
          start: {
            line: 274,
            column: 82
          },
          end: {
            line: 274,
            column: 130
          }
        },
        line: 274
      },
      "12": {
        name: "DELETE",
        decl: {
          start: {
            line: 292,
            column: 15
          },
          end: {
            line: 292,
            column: 21
          }
        },
        loc: {
          start: {
            line: 292,
            column: 40
          },
          end: {
            line: 367,
            column: 1
          }
        },
        line: 292
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 32,
            column: 45
          }
        }, {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 32,
            column: 65
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 20
          }
        }, {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 36,
            column: 27
          }
        }, {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 45
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 20
          }
        }, {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 39,
            column: 47
          }
        }, {
          start: {
            line: 39,
            column: 51
          },
          end: {
            line: 39,
            column: 76
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: 45,
            column: 17
          },
          end: {
            line: 45,
            column: 31
          }
        }],
        line: 45
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 53
          }
        }, {
          start: {
            line: 51,
            column: 57
          },
          end: {
            line: 51,
            column: 88
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "10": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 29
          }
        }, {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 53,
            column: 79
          }
        }],
        line: 53
      },
      "11": {
        loc: {
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 54,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 47
          },
          end: {
            line: 54,
            column: 88
          }
        }, {
          start: {
            line: 54,
            column: 91
          },
          end: {
            line: 54,
            column: 95
          }
        }],
        line: 54
      },
      "12": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 59,
            column: 13
          }
        }],
        line: 55
      },
      "13": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 20
          }
        }, {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 55,
            column: 33
          }
        }, {
          start: {
            line: 55,
            column: 37
          },
          end: {
            line: 55,
            column: 45
          }
        }],
        line: 55
      },
      "14": {
        loc: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "15": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "16": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "17": {
        loc: {
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 44
          },
          end: {
            line: 110,
            column: 57
          }
        }, {
          start: {
            line: 110,
            column: 60
          },
          end: {
            line: 110,
            column: 73
          }
        }],
        line: 110
      },
      "18": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "19": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "20": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "21": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "22": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 20
          }
        }, {
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 144,
            column: 36
          }
        }],
        line: 144
      },
      "23": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: 173,
            column: 15
          },
          end: {
            line: 176,
            column: 9
          }
        }],
        line: 155
      },
      "24": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 25
          }
        }, {
          start: {
            line: 155,
            column: 29
          },
          end: {
            line: 155,
            column: 62
          }
        }],
        line: 155
      },
      "25": {
        loc: {
          start: {
            line: 159,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "26": {
        loc: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 159,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 159,
            column: 46
          }
        }, {
          start: {
            line: 159,
            column: 50
          },
          end: {
            line: 159,
            column: 96
          }
        }, {
          start: {
            line: 159,
            column: 100
          },
          end: {
            line: 159,
            column: 142
          }
        }],
        line: 159
      },
      "27": {
        loc: {
          start: {
            line: 163,
            column: 53
          },
          end: {
            line: 163,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 53
          },
          end: {
            line: 163,
            column: 78
          }
        }, {
          start: {
            line: 163,
            column: 82
          },
          end: {
            line: 163,
            column: 86
          }
        }],
        line: 163
      },
      "28": {
        loc: {
          start: {
            line: 173,
            column: 15
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 15
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "29": {
        loc: {
          start: {
            line: 173,
            column: 19
          },
          end: {
            line: 173,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 19
          },
          end: {
            line: 173,
            column: 52
          }
        }, {
          start: {
            line: 173,
            column: 56
          },
          end: {
            line: 173,
            column: 78
          }
        }],
        line: 173
      },
      "30": {
        loc: {
          start: {
            line: 179,
            column: 29
          },
          end: {
            line: 179,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 29
          },
          end: {
            line: 179,
            column: 45
          }
        }, {
          start: {
            line: 179,
            column: 49
          },
          end: {
            line: 179,
            column: 68
          }
        }, {
          start: {
            line: 179,
            column: 72
          },
          end: {
            line: 179,
            column: 80
          }
        }],
        line: 179
      },
      "31": {
        loc: {
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 180,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 180,
            column: 43
          }
        }, {
          start: {
            line: 180,
            column: 47
          },
          end: {
            line: 180,
            column: 65
          }
        }, {
          start: {
            line: 180,
            column: 69
          },
          end: {
            line: 180,
            column: 70
          }
        }],
        line: 180
      },
      "32": {
        loc: {
          start: {
            line: 181,
            column: 29
          },
          end: {
            line: 181,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 29
          },
          end: {
            line: 181,
            column: 45
          }
        }, {
          start: {
            line: 181,
            column: 49
          },
          end: {
            line: 181,
            column: 68
          }
        }, {
          start: {
            line: 181,
            column: 72
          },
          end: {
            line: 181,
            column: 73
          }
        }],
        line: 181
      },
      "33": {
        loc: {
          start: {
            line: 182,
            column: 22
          },
          end: {
            line: 182,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 22
          },
          end: {
            line: 182,
            column: 31
          }
        }, {
          start: {
            line: 182,
            column: 35
          },
          end: {
            line: 182,
            column: 47
          }
        }, {
          start: {
            line: 182,
            column: 51
          },
          end: {
            line: 182,
            column: 55
          }
        }],
        line: 182
      },
      "34": {
        loc: {
          start: {
            line: 185,
            column: 19
          },
          end: {
            line: 185,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 19
          },
          end: {
            line: 185,
            column: 24
          }
        }, {
          start: {
            line: 185,
            column: 28
          },
          end: {
            line: 185,
            column: 32
          }
        }],
        line: 185
      },
      "35": {
        loc: {
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 186,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 186,
            column: 24
          }
        }, {
          start: {
            line: 186,
            column: 28
          },
          end: {
            line: 186,
            column: 32
          }
        }],
        line: 186
      },
      "36": {
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 136
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 40
          }
        }, {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 135
          }
        }],
        line: 190
      },
      "37": {
        loc: {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 115
          },
          end: {
            line: 190,
            column: 128
          }
        }, {
          start: {
            line: 190,
            column: 131
          },
          end: {
            line: 190,
            column: 135
          }
        }],
        line: 190
      },
      "38": {
        loc: {
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 45
          },
          end: {
            line: 190,
            column: 78
          }
        }, {
          start: {
            line: 190,
            column: 82
          },
          end: {
            line: 190,
            column: 112
          }
        }],
        line: 190
      },
      "39": {
        loc: {
          start: {
            line: 191,
            column: 22
          },
          end: {
            line: 191,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 22
          },
          end: {
            line: 191,
            column: 26
          }
        }, {
          start: {
            line: 191,
            column: 30
          },
          end: {
            line: 191,
            column: 34
          }
        }],
        line: 191
      },
      "40": {
        loc: {
          start: {
            line: 192,
            column: 28
          },
          end: {
            line: 192,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 28
          },
          end: {
            line: 192,
            column: 38
          }
        }, {
          start: {
            line: 192,
            column: 42
          },
          end: {
            line: 192,
            column: 46
          }
        }],
        line: 192
      },
      "41": {
        loc: {
          start: {
            line: 193,
            column: 31
          },
          end: {
            line: 193,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 31
          },
          end: {
            line: 193,
            column: 44
          }
        }, {
          start: {
            line: 193,
            column: 48
          },
          end: {
            line: 193,
            column: 52
          }
        }],
        line: 193
      },
      "42": {
        loc: {
          start: {
            line: 194,
            column: 36
          },
          end: {
            line: 194,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 36
          },
          end: {
            line: 194,
            column: 54
          }
        }, {
          start: {
            line: 194,
            column: 58
          },
          end: {
            line: 194,
            column: 62
          }
        }],
        line: 194
      },
      "43": {
        loc: {
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 195,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 195,
            column: 42
          }
        }, {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 195,
            column: 54
          }
        }],
        line: 195
      },
      "44": {
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 52
          }
        }, {
          start: {
            line: 196,
            column: 56
          },
          end: {
            line: 196,
            column: 57
          }
        }],
        line: 196
      },
      "45": {
        loc: {
          start: {
            line: 197,
            column: 30
          },
          end: {
            line: 197,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 30
          },
          end: {
            line: 197,
            column: 52
          }
        }, {
          start: {
            line: 197,
            column: 56
          },
          end: {
            line: 197,
            column: 57
          }
        }],
        line: 197
      },
      "46": {
        loc: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 28
          }
        }, {
          start: {
            line: 198,
            column: 32
          },
          end: {
            line: 198,
            column: 36
          }
        }],
        line: 198
      },
      "47": {
        loc: {
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 199,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 199,
            column: 28
          }
        }, {
          start: {
            line: 199,
            column: 32
          },
          end: {
            line: 199,
            column: 36
          }
        }],
        line: 199
      },
      "48": {
        loc: {
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 38
          }
        }, {
          start: {
            line: 201,
            column: 42
          },
          end: {
            line: 201,
            column: 50
          }
        }],
        line: 201
      },
      "49": {
        loc: {
          start: {
            line: 202,
            column: 25
          },
          end: {
            line: 202,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 25
          },
          end: {
            line: 202,
            column: 48
          }
        }, {
          start: {
            line: 202,
            column: 52
          },
          end: {
            line: 202,
            column: 53
          }
        }],
        line: 202
      },
      "50": {
        loc: {
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 48
          }
        }, {
          start: {
            line: 203,
            column: 52
          },
          end: {
            line: 203,
            column: 53
          }
        }],
        line: 203
      },
      "51": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "52": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "53": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 214,
            column: 33
          }
        }],
        line: 214
      },
      "54": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "55": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "56": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "57": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "58": {
        loc: {
          start: {
            line: 286,
            column: 19
          },
          end: {
            line: 286,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 44
          },
          end: {
            line: 286,
            column: 57
          }
        }, {
          start: {
            line: 286,
            column: 60
          },
          end: {
            line: 286,
            column: 73
          }
        }],
        line: 286
      },
      "59": {
        loc: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "60": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "61": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "62": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 20
          }
        }, {
          start: {
            line: 311,
            column: 24
          },
          end: {
            line: 311,
            column: 36
          }
        }],
        line: 311
      },
      "63": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "64": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "65": {
        loc: {
          start: {
            line: 362,
            column: 19
          },
          end: {
            line: 362,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 362,
            column: 44
          },
          end: {
            line: 362,
            column: 57
          }
        }, {
          start: {
            line: 362,
            column: 60
          },
          end: {
            line: 362,
            column: 73
          }
        }],
        line: 362
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0, 0],
      "32": [0, 0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/customers/[id]/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { NextRequest } from 'next/server';\n\nexport async function GET(\n    request: Request,\n    context: { params: { id: string } }\n) {\n    try {\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        const customer = await prisma.customer.findUnique({\n            where: {\n                id: id\n            },\n            include: {\n                invoices: {\n                    include: {\n                        items: true\n                    },\n                    orderBy: {\n                        createdAt: 'desc'\n                    }\n                }\n            }\n        });\n\n        if (!customer) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Customer not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(customer);\n    } catch (error) {\n        console.error('Error fetching customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error fetching customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function PUT(\n    request: NextRequest,\n    context: { params: { id: string } }\n) {\n    // Check for 'customer:update' permission\n    const permissionError = await requirePermission('customer:update')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            console.log('No token provided in request headers');\n            return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded || !decoded.sub) {\n            console.log('Invalid token: missing decoded or sub');\n            return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n        }\n\n        const body = await request.json();\n        const { name, email, phone, address: addressString, customerType: bodyCustomerType, creditLimit: bodyCreditLimit, creditPeriod: bodyCreditPeriod, notes: bodyNotes, ...otherData } = body;\n\n        let addressDetails: any = {};\n        if (addressString && typeof addressString === 'string') {\n            try {\n                addressDetails = JSON.parse(addressString);\n\n                // Check if mainAddress is a JSON string and parse it to prevent nesting\n                if (addressDetails.mainAddress && typeof addressDetails.mainAddress === 'string' &&\n                    addressDetails.mainAddress.startsWith('{')) {\n                    try {\n                        const nestedAddress = JSON.parse(addressDetails.mainAddress);\n                        // Replace the string with the actual value or null\n                        addressDetails.mainAddress = nestedAddress.mainAddress || null;\n                    } catch (nestedError) {\n                        console.warn('Nested address string is not valid JSON:', nestedError);\n                    }\n                }\n            } catch (e) {\n                console.warn('Address string is not valid JSON, proceeding with direct assignment if available or an empty object:', e);\n                // If addressString is not JSON, it might be a simple string address or undefined.\n                // We'll let Prisma handle it or use defaults.\n            }\n        } else if (typeof addressString === 'object' && addressString !== null) {\n            // If addressString is already an object (e.g. from direct API call not stringified form data)\n            addressDetails = addressString;\n        }\n\n        const {\n            mainAddress,\n            city,\n            postalCode,\n            contactPerson,\n            contactPersonPhone,\n            customerType: addressCustomerType,\n            creditLimit: addressCreditLimit,\n            creditPeriod: addressCreditPeriod,\n            taxId,\n            notes: addressNotes\n        } = addressDetails as any; // Type assertion for easier access\n\n        // Use values from request body first, then fall back to address details, then defaults\n        const customerType = bodyCustomerType || addressCustomerType || 'Retail';\n        const creditLimit = bodyCreditLimit || addressCreditLimit || 0;\n        const creditPeriod = bodyCreditPeriod || addressCreditPeriod || 0;\n        const notes = bodyNotes || addressNotes || null;\n\n        const customerUpdateData: any = {\n            name: name,\n            email: email || null,\n            phone: phone || null,\n            // Store detailed address fields in the address JSON blob as per existing pattern\n            // and also individual fields if they exist at the top level of the Customer model\n            address: JSON.stringify({\n                mainAddress: mainAddress || (typeof addressString === 'string' && !addressString.startsWith('{') ? addressString : null), // Use raw addressString if it's not JSON\n                city: city || null,\n                postalCode: postalCode || null,\n                contactPerson: contactPerson || null,\n                contactPersonPhone: contactPersonPhone || null,\n                customerType: customerType || 'Retail',\n                creditLimit: parseFloat(creditLimit) || 0,\n                creditPeriod: parseInt(creditPeriod) || 0,\n                taxId: taxId || null,\n                notes: notes || null,\n            }),\n            customerType: customerType || 'Retail', // Persist this at the top level too\n            creditLimit: parseFloat(creditLimit) || 0, // Persist this at the top level too\n            creditPeriod: parseInt(creditPeriod) || 0, // Persist this at the top level too\n            // otherData might contain fields like 'status', which we want to preserve\n            ...otherData\n        };\n\n        // Remove undefined fields to avoid Prisma errors\n        Object.keys(customerUpdateData).forEach(key => {\n            if (customerUpdateData[key] === undefined) {\n                delete customerUpdateData[key];\n            }\n        });\n\n        // Check for duplicate mobile number if phone is being updated\n        if (phone && phone.trim()) {\n            const existingCustomer = await prisma.customer.findFirst({\n                where: {\n                    phone: phone.trim(),\n                    id: {\n                        not: id // Exclude the current customer being updated\n                    }\n                }\n            });\n\n            if (existingCustomer) {\n                return NextResponse.json(\n                    {\n                        success: false,\n                        message: 'A customer with this mobile number already exists',\n                        error: 'Duplicate mobile number'\n                    },\n                    { status: 400 }\n                );\n            }\n        }\n\n        // Fetch existing customer for change detection\n        const existingCustomer = await prisma.customer.findUnique({\n            where: { id }\n        });\n\n        if (!existingCustomer) {\n            return NextResponse.json({ success: false, message: 'Customer not found' }, { status: 404 });\n        }\n\n        const updatedCustomer = await prisma.customer.update({\n            where: {\n                id: id\n            },\n            data: customerUpdateData\n        });\n\n        // Calculate changes for audit log\n        const changes: Record<string, { old: any; new: any }> = {};\n        (Object.keys(customerUpdateData) as (keyof typeof existingCustomer)[]).forEach(key => {\n            if (existingCustomer[key] !== updatedCustomer[key]) {\n                changes[key] = { old: existingCustomer[key], new: updatedCustomer[key] };\n            }\n        });\n\n        if (Object.keys(changes).length > 0) {\n            const auditService = AuditService.getInstance();\n            await auditService.logAction({\n                userId: decoded.sub, // Assuming decoded from earlier in the file\n                action: 'UPDATE',\n                entity: 'Customer',\n                entityId: id,\n                details: changes\n            });\n        }\n\n        // Revalidate the customers page to refresh data\n        const { revalidatePath } = await import('next/cache');\n        revalidatePath('/customers');\n\n        return NextResponse.json({\n            success: true,\n            message: 'Customer updated successfully',\n            data: updatedCustomer\n        });\n    } catch (error) {\n        console.error('Error updating customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error updating customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function DELETE(\n    request: NextRequest,\n    context: { params: { id: string } }\n) {\n    // Check for 'customer:delete' permission\n    const permissionError = await requirePermission('customer:delete')(request);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Verify token and get user\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            console.log('No token provided in DELETE request');\n            return NextResponse.json( { success: false, message: 'No token provided' }, { status: 401 } );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded || !decoded.sub) {\n            console.log('Invalid token in DELETE: missing decoded or sub');\n            return NextResponse.json( { success: false, message: 'Invalid token' }, { status: 401 } );\n        }\n\n        // Get params from context and ensure it's resolved\n        const { id: paramId } = context.params;\n        const id = parseInt(paramId);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Invalid customer ID'\n                },\n                { status: 400 }\n            );\n        }\n\n        // Get customer data before deletion for audit log\n        const customer = await prisma.customer.findUnique({\n            where: { id },\n            include: {\n                invoices: true\n            }\n        });\n\n        if (!customer) {\n            return NextResponse.json(\n                {\n                    success: false,\n                    message: 'Customer not found'\n                },\n                { status: 404 }\n            );\n        }\n\n        // Note: Since we're using soft deletion, we allow deletion of customers with invoices\n        // The customer will be moved to recycle bin and can be recovered if needed\n\n        // Use audit service for soft delete\n        const auditService = AuditService.getInstance();\n        await auditService.softDelete(\n            'Customer',\n            id,\n            customer,\n            decoded.sub, // string UUID\n            true\n        );\n\n        return NextResponse.json({\n            success: true,\n            message: 'Customer moved to recycle bin successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting customer:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Error deleting customer',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "context", "id", "paramId", "params", "parseInt", "isNaN", "NextResponse", "json", "success", "message", "status", "customer", "prisma", "findUnique", "where", "include", "invoices", "items", "orderBy", "createdAt", "error", "console", "Error", "String", "permissionError", "requirePermission", "token", "headers", "get", "replace", "log", "decoded", "verifyToken", "sub", "body", "name", "email", "phone", "address", "addressString", "customerType", "bodyCustomerType", "creditLimit", "bodyCreditLimit", "creditPeriod", "bodyCreditPeriod", "notes", "bodyNotes", "otherData", "addressDetails", "JSON", "parse", "mainAddress", "startsWith", "nestedAddress", "nestedError", "warn", "e", "city", "postalCode", "contactPerson", "contactPersonPhone", "addressCustomerType", "addressCreditLimit", "addressCreditPeriod", "taxId", "addressNotes", "customerUpdateData", "stringify", "parseFloat", "Object", "keys", "forEach", "key", "undefined", "trim", "existingCustomer", "findFirst", "not", "updatedCustomer", "update", "data", "changes", "old", "new", "length", "auditService", "AuditService", "getInstance", "logAction", "userId", "action", "entity", "entityId", "details", "revalidatePath", "softDelete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "127999597b669d0353056b9b9869553992a5f2d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1z1k2ubu6c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1z1k2ubu6c();
cov_1z1k2ubu6c().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[0]++;
  cov_1z1k2ubu6c().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1z1k2ubu6c().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[1]++;
    cov_1z1k2ubu6c().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[2]++;
    cov_1z1k2ubu6c().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[3]++;
    cov_1z1k2ubu6c().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[8]++, require("../../../../lib/prisma"));
const _auditService =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[9]++, require("../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[10]++, require("../../../../lib/auth"));
const _middleware =
/* istanbul ignore next */
(cov_1z1k2ubu6c().s[11]++, require("../../../../lib/utils/middleware"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[4]++;
  cov_1z1k2ubu6c().s[12]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[0][0]++;
    cov_1z1k2ubu6c().s[13]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[14]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[15]++, new WeakMap());
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[16]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().f[5]++;
    cov_1z1k2ubu6c().s[17]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[6]++;
  cov_1z1k2ubu6c().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[2][0]++;
    cov_1z1k2ubu6c().s[19]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[2][1]++;
  }
  cov_1z1k2ubu6c().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[4][0]++;
    cov_1z1k2ubu6c().s[21]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[22]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[6][0]++;
    cov_1z1k2ubu6c().s[24]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[25]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[26]++,
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[27]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().s[29]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[12][0]++;
        cov_1z1k2ubu6c().s[31]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[12][1]++;
        cov_1z1k2ubu6c().s[32]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[33]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[34]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[14][0]++;
    cov_1z1k2ubu6c().s[35]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[14][1]++;
  }
  cov_1z1k2ubu6c().s[36]++;
  return newObj;
}
async function GET(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[7]++;
  cov_1z1k2ubu6c().s[37]++;
  try {
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[38]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[39]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[40]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[15][0]++;
      cov_1z1k2ubu6c().s[41]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[15][1]++;
    }
    const customer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[42]++, await _prisma.prisma.customer.findUnique({
      where: {
        id: id
      },
      include: {
        invoices: {
          include: {
            items: true
          },
          orderBy: {
            createdAt: "desc"
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[43]++;
    if (!customer) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[16][0]++;
      cov_1z1k2ubu6c().s[44]++;
      return _server.NextResponse.json({
        success: false,
        message: "Customer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[16][1]++;
    }
    cov_1z1k2ubu6c().s[45]++;
    return _server.NextResponse.json(customer);
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[46]++;
    console.error("Error fetching customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[47]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[17][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PUT(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[8]++;
  // Check for 'customer:update' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[48]++, await (0, _middleware.requirePermission)("customer:update")(request));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[49]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[18][0]++;
    cov_1z1k2ubu6c().s[50]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[18][1]++;
  }
  cov_1z1k2ubu6c().s[51]++;
  try {
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[52]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[53]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[54]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[19][0]++;
      cov_1z1k2ubu6c().s[55]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[19][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[56]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[57]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[20][0]++;
      cov_1z1k2ubu6c().s[58]++;
      console.log("No token provided in request headers");
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[59]++;
      return _server.NextResponse.json({
        error: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[20][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[60]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[22][0]++, !decoded) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[22][1]++, !decoded.sub)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[21][0]++;
      cov_1z1k2ubu6c().s[62]++;
      console.log("Invalid token: missing decoded or sub");
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[63]++;
      return _server.NextResponse.json({
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[21][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[64]++, await request.json());
    const {
      name,
      email,
      phone,
      address: addressString,
      customerType: bodyCustomerType,
      creditLimit: bodyCreditLimit,
      creditPeriod: bodyCreditPeriod,
      notes: bodyNotes,
      ...otherData
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[65]++, body);
    let addressDetails =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[66]++, {});
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[24][0]++, addressString) &&
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[24][1]++, typeof addressString === "string")) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[23][0]++;
      cov_1z1k2ubu6c().s[68]++;
      try {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[69]++;
        addressDetails = JSON.parse(addressString);
        // Check if mainAddress is a JSON string and parse it to prevent nesting
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[70]++;
        if (
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[26][0]++, addressDetails.mainAddress) &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[26][1]++, typeof addressDetails.mainAddress === "string") &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[26][2]++, addressDetails.mainAddress.startsWith("{"))) {
          /* istanbul ignore next */
          cov_1z1k2ubu6c().b[25][0]++;
          cov_1z1k2ubu6c().s[71]++;
          try {
            const nestedAddress =
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().s[72]++, JSON.parse(addressDetails.mainAddress));
            // Replace the string with the actual value or null
            /* istanbul ignore next */
            cov_1z1k2ubu6c().s[73]++;
            addressDetails.mainAddress =
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().b[27][0]++, nestedAddress.mainAddress) ||
            /* istanbul ignore next */
            (cov_1z1k2ubu6c().b[27][1]++, null);
          } catch (nestedError) {
            /* istanbul ignore next */
            cov_1z1k2ubu6c().s[74]++;
            console.warn("Nested address string is not valid JSON:", nestedError);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1z1k2ubu6c().b[25][1]++;
        }
      } catch (e) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().s[75]++;
        console.warn("Address string is not valid JSON, proceeding with direct assignment if available or an empty object:", e);
        // If addressString is not JSON, it might be a simple string address or undefined.
        // We'll let Prisma handle it or use defaults.
      }
    } else {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[23][1]++;
      cov_1z1k2ubu6c().s[76]++;
      if (
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[29][0]++, typeof addressString === "object") &&
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[29][1]++, addressString !== null)) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[28][0]++;
        cov_1z1k2ubu6c().s[77]++;
        // If addressString is already an object (e.g. from direct API call not stringified form data)
        addressDetails = addressString;
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[28][1]++;
      }
    }
    const {
      mainAddress,
      city,
      postalCode,
      contactPerson,
      contactPersonPhone,
      customerType: addressCustomerType,
      creditLimit: addressCreditLimit,
      creditPeriod: addressCreditPeriod,
      taxId,
      notes: addressNotes
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[78]++, addressDetails); // Type assertion for easier access
    // Use values from request body first, then fall back to address details, then defaults
    const customerType =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[79]++,
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[30][0]++, bodyCustomerType) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[30][1]++, addressCustomerType) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[30][2]++, "Retail"));
    const creditLimit =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[80]++,
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[31][0]++, bodyCreditLimit) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[31][1]++, addressCreditLimit) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[31][2]++, 0));
    const creditPeriod =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[81]++,
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[32][0]++, bodyCreditPeriod) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[32][1]++, addressCreditPeriod) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[32][2]++, 0));
    const notes =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[82]++,
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[33][0]++, bodyNotes) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[33][1]++, addressNotes) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[33][2]++, null));
    const customerUpdateData =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[83]++, {
      name: name,
      email:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[34][0]++, email) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[34][1]++, null),
      phone:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[35][0]++, phone) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[35][1]++, null),
      // Store detailed address fields in the address JSON blob as per existing pattern
      // and also individual fields if they exist at the top level of the Customer model
      address: JSON.stringify({
        mainAddress:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[36][0]++, mainAddress) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[36][1]++,
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[38][0]++, typeof addressString === "string") &&
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[38][1]++, !addressString.startsWith("{")) ?
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[37][0]++, addressString) :
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[37][1]++, null)),
        city:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[39][0]++, city) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[39][1]++, null),
        postalCode:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[40][0]++, postalCode) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[40][1]++, null),
        contactPerson:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[41][0]++, contactPerson) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[41][1]++, null),
        contactPersonPhone:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[42][0]++, contactPersonPhone) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[42][1]++, null),
        customerType:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[43][0]++, customerType) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[43][1]++, "Retail"),
        creditLimit:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[44][0]++, parseFloat(creditLimit)) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[44][1]++, 0),
        creditPeriod:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[45][0]++, parseInt(creditPeriod)) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[45][1]++, 0),
        taxId:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[46][0]++, taxId) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[46][1]++, null),
        notes:
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[47][0]++, notes) ||
        /* istanbul ignore next */
        (cov_1z1k2ubu6c().b[47][1]++, null)
      }),
      customerType:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[48][0]++, customerType) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[48][1]++, "Retail"),
      creditLimit:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[49][0]++, parseFloat(creditLimit)) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[49][1]++, 0),
      creditPeriod:
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[50][0]++, parseInt(creditPeriod)) ||
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[50][1]++, 0),
      // otherData might contain fields like 'status', which we want to preserve
      ...otherData
    });
    // Remove undefined fields to avoid Prisma errors
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[84]++;
    Object.keys(customerUpdateData).forEach(key => {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().f[9]++;
      cov_1z1k2ubu6c().s[85]++;
      if (customerUpdateData[key] === undefined) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[51][0]++;
        cov_1z1k2ubu6c().s[86]++;
        delete customerUpdateData[key];
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[51][1]++;
      }
    });
    // Check for duplicate mobile number if phone is being updated
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[87]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[53][0]++, phone) &&
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[53][1]++, phone.trim())) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[52][0]++;
      const existingCustomer =
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().s[88]++, await _prisma.prisma.customer.findFirst({
        where: {
          phone: phone.trim(),
          id: {
            not: id // Exclude the current customer being updated
          }
        }
      }));
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[89]++;
      if (existingCustomer) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[54][0]++;
        cov_1z1k2ubu6c().s[90]++;
        return _server.NextResponse.json({
          success: false,
          message: "A customer with this mobile number already exists",
          error: "Duplicate mobile number"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[54][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[52][1]++;
    }
    // Fetch existing customer for change detection
    const existingCustomer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[91]++, await _prisma.prisma.customer.findUnique({
      where: {
        id
      }
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[92]++;
    if (!existingCustomer) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[55][0]++;
      cov_1z1k2ubu6c().s[93]++;
      return _server.NextResponse.json({
        success: false,
        message: "Customer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[55][1]++;
    }
    const updatedCustomer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[94]++, await _prisma.prisma.customer.update({
      where: {
        id: id
      },
      data: customerUpdateData
    }));
    // Calculate changes for audit log
    const changes =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[95]++, {});
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[96]++;
    Object.keys(customerUpdateData).forEach(key => {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().f[10]++;
      cov_1z1k2ubu6c().s[97]++;
      if (existingCustomer[key] !== updatedCustomer[key]) {
        /* istanbul ignore next */
        cov_1z1k2ubu6c().b[56][0]++;
        cov_1z1k2ubu6c().s[98]++;
        changes[key] = {
          old: existingCustomer[key],
          new: updatedCustomer[key]
        };
      } else
      /* istanbul ignore next */
      {
        cov_1z1k2ubu6c().b[56][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[99]++;
    if (Object.keys(changes).length > 0) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[57][0]++;
      const auditService =
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().s[100]++, _auditService.AuditService.getInstance());
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[101]++;
      await auditService.logAction({
        userId: decoded.sub,
        action: "UPDATE",
        entity: "Customer",
        entityId: id,
        details: changes
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[57][1]++;
    }
    // Revalidate the customers page to refresh data
    const {
      revalidatePath
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[102]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().f[11]++;
      cov_1z1k2ubu6c().s[103]++;
      return /*#__PURE__*/_interop_require_wildcard(require("next/cache"));
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[104]++;
    revalidatePath("/customers");
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[105]++;
    return _server.NextResponse.json({
      success: true,
      message: "Customer updated successfully",
      data: updatedCustomer
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[106]++;
    console.error("Error updating customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[107]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[58][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[58][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request, context) {
  /* istanbul ignore next */
  cov_1z1k2ubu6c().f[12]++;
  // Check for 'customer:delete' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_1z1k2ubu6c().s[108]++, await (0, _middleware.requirePermission)("customer:delete")(request));
  /* istanbul ignore next */
  cov_1z1k2ubu6c().s[109]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().b[59][0]++;
    cov_1z1k2ubu6c().s[110]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_1z1k2ubu6c().b[59][1]++;
  }
  cov_1z1k2ubu6c().s[111]++;
  try {
    // Verify token and get user
    const token =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[112]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[113]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[60][0]++;
      cov_1z1k2ubu6c().s[114]++;
      console.log("No token provided in DELETE request");
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[115]++;
      return _server.NextResponse.json({
        success: false,
        message: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[60][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[116]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[117]++;
    if (
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[62][0]++, !decoded) ||
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().b[62][1]++, !decoded.sub)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[61][0]++;
      cov_1z1k2ubu6c().s[118]++;
      console.log("Invalid token in DELETE: missing decoded or sub");
      /* istanbul ignore next */
      cov_1z1k2ubu6c().s[119]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[61][1]++;
    }
    // Get params from context and ensure it's resolved
    const {
      id: paramId
    } =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[120]++, context.params);
    const id =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[121]++, parseInt(paramId));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[122]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[63][0]++;
      cov_1z1k2ubu6c().s[123]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid customer ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[63][1]++;
    }
    // Get customer data before deletion for audit log
    const customer =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[124]++, await _prisma.prisma.customer.findUnique({
      where: {
        id
      },
      include: {
        invoices: true
      }
    }));
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[125]++;
    if (!customer) {
      /* istanbul ignore next */
      cov_1z1k2ubu6c().b[64][0]++;
      cov_1z1k2ubu6c().s[126]++;
      return _server.NextResponse.json({
        success: false,
        message: "Customer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1z1k2ubu6c().b[64][1]++;
    }
    // Note: Since we're using soft deletion, we allow deletion of customers with invoices
    // The customer will be moved to recycle bin and can be recovered if needed
    // Use audit service for soft delete
    const auditService =
    /* istanbul ignore next */
    (cov_1z1k2ubu6c().s[127]++, _auditService.AuditService.getInstance());
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[128]++;
    await auditService.softDelete("Customer", id, customer, decoded.sub, true);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[129]++;
    return _server.NextResponse.json({
      success: true,
      message: "Customer moved to recycle bin successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[130]++;
    console.error("Error deleting customer:", error);
    /* istanbul ignore next */
    cov_1z1k2ubu6c().s[131]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting customer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[65][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1z1k2ubu6c().b[65][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,