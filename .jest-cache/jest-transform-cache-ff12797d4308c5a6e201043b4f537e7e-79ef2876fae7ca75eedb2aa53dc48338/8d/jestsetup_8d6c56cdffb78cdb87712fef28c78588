3ea04964996333c8d53ff5a81a6ba71c
// jest-dom adds custom jest matchers for asserting on DOM nodes.
"use strict";
// Mock cache module
jest.mock("./src/lib/cache", ()=>({
        cache: {
            get: jest.fn(),
            set: jest.fn(),
            delete: jest.fn(),
            clear: jest.fn(),
            generateKey: jest.fn(),
            invalidatePattern: jest.fn()
        },
        cacheService: {
            get: jest.fn(),
            set: jest.fn(),
            delete: jest.fn(),
            clear: jest.fn(),
            generateKey: jest.fn(),
            invalidatePattern: jest.fn()
        },
        cleanupCache: jest.fn(),
        CACHE_CONFIG: {
            KEYS: {
                USER_SESSION: "user_session",
                TOKEN_VALIDATION: "token_validation"
            },
            TTL: {
                USER_SESSION: 3600,
                TOKEN_VALIDATION: 1800
            }
        }
    }));
// Mock Prisma client for testing
jest.mock("@prisma/client", ()=>({
        PrismaClient: jest.fn().mockImplementation(()=>({
                user: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                product: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                auditLog: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                refreshToken: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    updateMany: jest.fn(),
                    delete: jest.fn(),
                    deleteMany: jest.fn()
                }
            }))
    }));
jest.mock("@/lib/prisma", ()=>({
        prisma: {
            user: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            product: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            auditLog: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            },
            refreshToken: {
                findMany: jest.fn(),
                findUnique: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                updateMany: jest.fn(),
                delete: jest.fn(),
                deleteMany: jest.fn()
            }
        }
    }));
// Mock Sequelize models for testing
jest.mock("@/lib/models", ()=>({
        Product: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        User: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Customer: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Invoice: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        AuditLog: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _cache = require("./src/lib/cache");
// Set up environment variables for testing
process.env.JWT_SECRET = "test-secret-key";
process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = "12h";
process.env.NEXTAUTH_SECRET = "test-nextauth-secret";
process.env.NODE_ENV = "test";
process.env.DATABASE_URL = "postgresql://test:test@localhost:5432/test";
// Mock console.log to reduce noise during tests
global.console = {
    ...console,
    log: jest.fn()
};
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock window.matchMedia
if (typeof window !== "undefined") {
    Object.defineProperty(window, "matchMedia", {
        writable: true,
        value: jest.fn().mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
    });
}
// Clean up cache after all tests
afterAll(()=>{
    (0, _cache.cleanupCache)();
});

//# sourceMappingURL=data:application/json;base64,