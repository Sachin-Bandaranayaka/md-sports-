8764b79a0af4f378d151e442cc82947b
"use strict";

/* istanbul ignore next */
function cov_cprhe2as4() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts";
  var hash = "df3146bb691a54fa973c7faabb827bb659813f33";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "9": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "11": {
        start: {
          line: 35,
          column: 38
        },
        end: {
          line: 35,
          column: 40
        }
      },
      "12": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "14": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 90
        }
      },
      "17": {
        start: {
          line: 42,
          column: 45
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "18": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "19": {
        start: {
          line: 47,
          column: 11
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "20": {
        start: {
          line: 49,
          column: 29
        },
        end: {
          line: 89,
          column: 1
        }
      },
      "21": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "22": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "23": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 79
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 73
        }
      },
      "25": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "26": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "27": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 36
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 79
        }
      },
      "29": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "30": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "31": {
        start: {
          line: 70,
          column: 56
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "32": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 84
        }
      },
      "33": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "34": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "35": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "36": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 55
        }
      },
      "38": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "39": {
        start: {
          line: 92,
          column: 29
        },
        end: {
          line: 108,
          column: 1
        }
      },
      "40": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "41": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "42": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "43": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 37
        }
      },
      "44": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "45": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 95
        }
      },
      "46": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 81
        }
      },
      "47": {
        start: {
          line: 101,
          column: 45
        },
        end: {
          line: 101,
          column: 79
        }
      },
      "48": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 25
        }
      },
      "49": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "50": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 44
        }
      },
      "51": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 146,
          column: 1
        }
      },
      "52": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "53": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "54": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 79
        }
      },
      "55": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "56": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "57": {
        start: {
          line: 117,
          column: 56
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "58": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "59": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 87
        }
      },
      "60": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "61": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "62": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 74
        }
      },
      "63": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 138,
          column: 20
        }
      },
      "64": {
        start: {
          line: 131,
          column: 39
        },
        end: {
          line: 138,
          column: 18
        }
      },
      "65": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 24
        }
      },
      "66": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 35
        }
      },
      "67": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 63
        }
      },
      "68": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 20
        }
      },
      "69": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 167,
          column: 1
        }
      },
      "70": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "71": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "72": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "73": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 25
        }
      },
      "74": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 161,
          column: 16
        }
      },
      "75": {
        start: {
          line: 154,
          column: 35
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "76": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 20
        }
      },
      "77": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 62
        }
      },
      "78": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "79": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 188,
          column: 1
        }
      },
      "80": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "81": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "82": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 79
        }
      },
      "83": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 25
        }
      },
      "84": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 182,
          column: 16
        }
      },
      "85": {
        start: {
          line: 175,
          column: 35
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "86": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 20
        }
      },
      "87": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 68
        }
      },
      "88": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 21
        }
      },
      "89": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 214,
          column: 1
        }
      },
      "90": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "91": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "92": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 79
        }
      },
      "93": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 19
        }
      },
      "94": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 196,
          column: 30
        }
      },
      "95": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 210,
          column: 16
        }
      },
      "96": {
        start: {
          line: 197,
          column: 35
        },
        end: {
          line: 210,
          column: 14
        }
      },
      "97": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 27
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 25
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 37,
            column: 28
          },
          end: {
            line: 37,
            column: 29
          }
        },
        loc: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 37
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 42,
            column: 38
          }
        },
        loc: {
          start: {
            line: 42,
            column: 45
          },
          end: {
            line: 42,
            column: 79
          }
        },
        line: 42
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 7
          },
          end: {
            line: 47,
            column: 8
          }
        },
        loc: {
          start: {
            line: 47,
            column: 11
          },
          end: {
            line: 47,
            column: 54
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 49,
            column: 30
          }
        },
        loc: {
          start: {
            line: 49,
            column: 45
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 49
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 70,
            column: 52
          },
          end: {
            line: 70,
            column: 53
          }
        },
        loc: {
          start: {
            line: 70,
            column: 56
          },
          end: {
            line: 77,
            column: 14
          }
        },
        line: 70
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 92,
            column: 30
          }
        },
        loc: {
          start: {
            line: 92,
            column: 64
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 92
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 101,
            column: 34
          },
          end: {
            line: 101,
            column: 35
          }
        },
        loc: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 101,
            column: 79
          }
        },
        line: 101
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 109,
            column: 28
          }
        },
        loc: {
          start: {
            line: 109,
            column: 42
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 109
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 117,
            column: 52
          },
          end: {
            line: 117,
            column: 53
          }
        },
        loc: {
          start: {
            line: 117,
            column: 56
          },
          end: {
            line: 121,
            column: 14
          }
        },
        line: 117
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 131,
            column: 35
          },
          end: {
            line: 131,
            column: 36
          }
        },
        loc: {
          start: {
            line: 131,
            column: 39
          },
          end: {
            line: 138,
            column: 18
          }
        },
        line: 131
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 147,
            column: 28
          }
        },
        loc: {
          start: {
            line: 147,
            column: 42
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 147
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 32
          }
        },
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 161,
            column: 14
          }
        },
        line: 154
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 168,
            column: 35
          },
          end: {
            line: 168,
            column: 36
          }
        },
        loc: {
          start: {
            line: 168,
            column: 51
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 168
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 175,
            column: 31
          },
          end: {
            line: 175,
            column: 32
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 182,
            column: 14
          }
        },
        line: 175
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 30
          }
        },
        loc: {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 189
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 197,
            column: 31
          },
          end: {
            line: 197,
            column: 32
          }
        },
        loc: {
          start: {
            line: 197,
            column: 35
          },
          end: {
            line: 210,
            column: 14
          }
        },
        line: 197
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 14
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 29
          },
          end: {
            line: 37,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 40
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 28
          }
        }, {
          start: {
            line: 52,
            column: 32
          },
          end: {
            line: 52,
            column: 61
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 47
          },
          end: {
            line: 92,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 60
          },
          end: {
            line: 92,
            column: 61
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 98,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 98,
            column: 39
          }
        }, {
          start: {
            line: 98,
            column: 43
          },
          end: {
            line: 98,
            column: 89
          }
        }, {
          start: {
            line: 98,
            column: 93
          },
          end: {
            line: 98,
            column: 113
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 28
          }
        }, {
          start: {
            line: 112,
            column: 32
          },
          end: {
            line: 112,
            column: 61
          }
        }],
        line: 112
      },
      "12": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "13": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 25
          }
        }, {
          start: {
            line: 123,
            column: 29
          },
          end: {
            line: 123,
            column: 51
          }
        }],
        line: 123
      },
      "14": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 28
          }
        }, {
          start: {
            line: 150,
            column: 32
          },
          end: {
            line: 150,
            column: 61
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "18": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 28
          }
        }, {
          start: {
            line: 171,
            column: 32
          },
          end: {
            line: 171,
            column: 61
          }
        }],
        line: 171
      },
      "19": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "20": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 192,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 192,
            column: 28
          }
        }, {
          start: {
            line: 192,
            column: 32
          },
          end: {
            line: 192,
            column: 61
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts"],
      sourcesContent: ["import prisma from '@/lib/prisma';\n\n// Configuration\nconst REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;\n\n// Generate a secure random token using Web Crypto API\nconst generateSecureToken = (length = 40): string => {\n    // Use Web Crypto API which is supported in Edge Runtime\n    if (typeof crypto !== 'undefined') {\n        const bytes = new Uint8Array(length);\n        crypto.getRandomValues(bytes);\n        return Array.from(bytes)\n            .map(byte => byte.toString(16).padStart(2, '0'))\n            .join('');\n    }\n\n    // Fallback (less secure but works everywhere)\n    return Array.from(\n        { length },\n        () => Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n};\n\n/**\n * Generate a new refresh token for a user\n */\nexport const generateRefreshToken = async (userId: string): Promise<string> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            throw new Error('Database client not initialized correctly');\n        }\n\n        // Log for debugging\n        console.log('Generating refresh token for user ID:', userId);\n\n        // Generate a random token\n        const token = generateSecureToken(40);\n\n        // Calculate expiration date (30 days from now)\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);\n\n        // Log the token details before creating\n        console.log('Preparing to create refresh token with:', {\n            userId,\n            token: token.substring(0, 10) + '...',\n            expiresAt,\n        });\n\n        // Store the token in the database with retry logic\n        const createdToken = await executeWithRetry(() => \n            prisma.refreshToken.create({\n                data: {\n                    userId,\n                    token,\n                    expiresAt,\n                    updatedAt: new Date(),\n                },\n            })\n        );\n\n        console.log('Successfully created refresh token with ID:', createdToken.id);\n\n        return token;\n    } catch (error) {\n        // More detailed error logging\n        console.error('Error generating refresh token:', error);\n        if (error instanceof Error) {\n            console.error('Error message:', error.message);\n            console.error('Error stack:', error.stack);\n        }\n        throw new Error('Failed to generate refresh token');\n    }\n};\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if it's a prepared statement conflict error\n            if (error?.code === '42P05' && error?.message?.includes('prepared statement') && attempt < maxRetries) {\n                console.warn(`Prepared statement conflict on attempt ${attempt}, retrying...`);\n                // Small delay before retry\n                await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n/**\n * Verify a refresh token and return the associated user ID if valid\n */\nexport const verifyRefreshToken = async (token: string): Promise<string | null> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return null;\n        }\n\n        // Find the token in the database with retry logic\n        const refreshToken = await executeWithRetry(() => \n            prisma.refreshToken.findUnique({\n                where: { token },\n            })\n        );\n\n        // Check if token exists and is not revoked\n        if (!refreshToken || refreshToken.isRevoked) {\n            console.log('Token not found or revoked:', token.substring(0, 10) + '...');\n            return null;\n        }\n\n        // Check if token is expired\n        if (new Date() > refreshToken.expiresAt) {\n            console.log('Token expired:', token.substring(0, 10) + '...');\n\n            // Revoke expired token with retry logic\n            await executeWithRetry(() => \n                prisma.refreshToken.update({\n                    where: { id: refreshToken.id },\n                    data: { isRevoked: true },\n                })\n            );\n\n            return null;\n        }\n\n        return refreshToken.userId;\n    } catch (error) {\n        console.error('Error verifying refresh token:', error);\n        return null;\n    }\n};\n\n/**\n * Revoke a specific refresh token\n */\nexport const revokeRefreshToken = async (token: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await executeWithRetry(() => \n            prisma.refreshToken.updateMany({\n                where: { token },\n                data: { isRevoked: true },\n            })\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking refresh token:', error);\n        return false;\n    }\n};\n\n/**\n * Revoke all refresh tokens for a specific user\n */\nexport const revokeAllUserRefreshTokens = async (userId: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await executeWithRetry(() => \n            prisma.refreshToken.updateMany({\n                where: { userId },\n                data: { isRevoked: true },\n            })\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking user refresh tokens:', error);\n        return false;\n    }\n};\n\n/**\n * Clean up expired and revoked tokens\n * Note: This should be run periodically via a cron job\n */\nexport const cleanupRefreshTokens = async (): Promise<void> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return;\n        }\n\n        const now = new Date();\n\n        await executeWithRetry(() => \n            prisma.refreshToken.deleteMany({\n                where: {\n                    OR: [\n                        { expiresAt: { lt: now } },\n                        { isRevoked: true },\n                    ],\n                },\n            })\n        );\n    } catch (error) {\n        console.error('Error cleaning up refresh tokens:', error);\n    }\n};"],
      names: ["cleanupRefreshTokens", "generateRefreshToken", "revokeAllUserRefreshTokens", "revokeRefreshToken", "verifyRefreshToken", "REFRESH_TOKEN_EXPIRES_IN_DAYS", "generateSecureToken", "length", "crypto", "bytes", "Uint8Array", "getRandomValues", "Array", "from", "map", "byte", "toString", "padStart", "join", "Math", "floor", "random", "userId", "prisma", "refreshToken", "console", "error", "Error", "log", "token", "expiresAt", "Date", "setDate", "getDate", "substring", "createdToken", "executeWithRetry", "create", "data", "updatedAt", "id", "message", "stack", "operation", "maxRetries", "attempt", "code", "includes", "warn", "Promise", "resolve", "setTimeout", "findUnique", "where", "isRevoked", "update", "updateMany", "now", "deleteMany", "OR", "lt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "df3146bb691a54fa973c7faabb827bb659813f33"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cprhe2as4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cprhe2as4();
cov_cprhe2as4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[0]++;
  cov_cprhe2as4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_cprhe2as4().s[3]++;
_export(exports, {
  cleanupRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[1]++;
    cov_cprhe2as4().s[4]++;
    return cleanupRefreshTokens;
  },
  generateRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[2]++;
    cov_cprhe2as4().s[5]++;
    return generateRefreshToken;
  },
  revokeAllUserRefreshTokens: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[3]++;
    cov_cprhe2as4().s[6]++;
    return revokeAllUserRefreshTokens;
  },
  revokeRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[4]++;
    cov_cprhe2as4().s[7]++;
    return revokeRefreshToken;
  },
  verifyRefreshToken: function () {
    /* istanbul ignore next */
    cov_cprhe2as4().f[5]++;
    cov_cprhe2as4().s[8]++;
    return verifyRefreshToken;
  }
});
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_cprhe2as4().s[9]++, _interop_require_default(require("../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_cprhe2as4().f[6]++;
  cov_cprhe2as4().s[10]++;
  return /* istanbul ignore next */(cov_cprhe2as4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_cprhe2as4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_cprhe2as4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_cprhe2as4().b[0][1]++, {
    default: obj
  });
}
// Configuration
const REFRESH_TOKEN_EXPIRES_IN_DAYS =
/* istanbul ignore next */
(cov_cprhe2as4().s[11]++, 30);
// Generate a secure random token using Web Crypto API
/* istanbul ignore next */
cov_cprhe2as4().s[12]++;
const generateSecureToken = (length =
/* istanbul ignore next */
(cov_cprhe2as4().b[2][0]++, 40)) => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[7]++;
  cov_cprhe2as4().s[13]++;
  // Use Web Crypto API which is supported in Edge Runtime
  if (typeof crypto !== "undefined") {
    /* istanbul ignore next */
    cov_cprhe2as4().b[3][0]++;
    const bytes =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[14]++, new Uint8Array(length));
    /* istanbul ignore next */
    cov_cprhe2as4().s[15]++;
    crypto.getRandomValues(bytes);
    /* istanbul ignore next */
    cov_cprhe2as4().s[16]++;
    return Array.from(bytes).map(byte => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[8]++;
      cov_cprhe2as4().s[17]++;
      return byte.toString(16).padStart(2, "0");
    }).join("");
  } else
  /* istanbul ignore next */
  {
    cov_cprhe2as4().b[3][1]++;
  }
  // Fallback (less secure but works everywhere)
  cov_cprhe2as4().s[18]++;
  return Array.from({
    length
  }, () => {
    /* istanbul ignore next */
    cov_cprhe2as4().f[9]++;
    cov_cprhe2as4().s[19]++;
    return Math.floor(Math.random() * 16).toString(16);
  }).join("");
};
/* istanbul ignore next */
cov_cprhe2as4().s[20]++;
const generateRefreshToken = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[10]++;
  cov_cprhe2as4().s[21]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[22]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[5][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[5][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[4][0]++;
      cov_cprhe2as4().s[23]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[24]++;
      throw new Error("Database client not initialized correctly");
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[4][1]++;
    }
    // Log for debugging
    cov_cprhe2as4().s[25]++;
    console.log("Generating refresh token for user ID:", userId);
    // Generate a random token
    const token =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[26]++, generateSecureToken(40));
    // Calculate expiration date (30 days from now)
    const expiresAt =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[27]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[28]++;
    expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);
    // Log the token details before creating
    /* istanbul ignore next */
    cov_cprhe2as4().s[29]++;
    console.log("Preparing to create refresh token with:", {
      userId,
      token: token.substring(0, 10) + "...",
      expiresAt
    });
    // Store the token in the database with retry logic
    const createdToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[30]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[11]++;
      cov_cprhe2as4().s[31]++;
      return _prisma.default.refreshToken.create({
        data: {
          userId,
          token,
          expiresAt,
          updatedAt: new Date()
        }
      });
    }));
    /* istanbul ignore next */
    cov_cprhe2as4().s[32]++;
    console.log("Successfully created refresh token with ID:", createdToken.id);
    /* istanbul ignore next */
    cov_cprhe2as4().s[33]++;
    return token;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[34]++;
    // More detailed error logging
    console.error("Error generating refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[35]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[6][0]++;
      cov_cprhe2as4().s[36]++;
      console.error("Error message:", error.message);
      /* istanbul ignore next */
      cov_cprhe2as4().s[37]++;
      console.error("Error stack:", error.stack);
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[6][1]++;
    }
    cov_cprhe2as4().s[38]++;
    throw new Error("Failed to generate refresh token");
  }
};
/**
 * Helper function to execute Prisma queries with retry logic for prepared statement conflicts
 */
/* istanbul ignore next */
cov_cprhe2as4().s[39]++;
const executeWithRetry = async (operation, maxRetries =
/* istanbul ignore next */
(cov_cprhe2as4().b[7][0]++, 3)) => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[12]++;
  cov_cprhe2as4().s[40]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_cprhe2as4().s[41]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[42]++;
    try {
      /* istanbul ignore next */
      cov_cprhe2as4().s[43]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_cprhe2as4().s[44]++;
      // Check if it's a prepared statement conflict error
      if (
      /* istanbul ignore next */
      (cov_cprhe2as4().b[9][0]++, error?.code === "42P05") &&
      /* istanbul ignore next */
      (cov_cprhe2as4().b[9][1]++, error?.message?.includes("prepared statement")) &&
      /* istanbul ignore next */
      (cov_cprhe2as4().b[9][2]++, attempt < maxRetries)) {
        /* istanbul ignore next */
        cov_cprhe2as4().b[8][0]++;
        cov_cprhe2as4().s[45]++;
        console.warn(`Prepared statement conflict on attempt ${attempt}, retrying...`);
        // Small delay before retry
        /* istanbul ignore next */
        cov_cprhe2as4().s[46]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_cprhe2as4().f[13]++;
          cov_cprhe2as4().s[47]++;
          return setTimeout(resolve, 100 * attempt);
        });
        /* istanbul ignore next */
        cov_cprhe2as4().s[48]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_cprhe2as4().b[8][1]++;
      }
      cov_cprhe2as4().s[49]++;
      throw error;
    }
  }
  /* istanbul ignore next */
  cov_cprhe2as4().s[50]++;
  throw new Error("Max retries exceeded");
};
/* istanbul ignore next */
cov_cprhe2as4().s[51]++;
const verifyRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[14]++;
  cov_cprhe2as4().s[52]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[53]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[11][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[11][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[10][0]++;
      cov_cprhe2as4().s[54]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[55]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[10][1]++;
    }
    // Find the token in the database with retry logic
    const refreshToken =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[56]++, await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[15]++;
      cov_cprhe2as4().s[57]++;
      return _prisma.default.refreshToken.findUnique({
        where: {
          token
        }
      });
    }));
    // Check if token exists and is not revoked
    /* istanbul ignore next */
    cov_cprhe2as4().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[13][0]++, !refreshToken) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[13][1]++, refreshToken.isRevoked)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[12][0]++;
      cov_cprhe2as4().s[59]++;
      console.log("Token not found or revoked:", token.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_cprhe2as4().s[60]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[12][1]++;
    }
    // Check if token is expired
    cov_cprhe2as4().s[61]++;
    if (new Date() > refreshToken.expiresAt) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[14][0]++;
      cov_cprhe2as4().s[62]++;
      console.log("Token expired:", token.substring(0, 10) + "...");
      // Revoke expired token with retry logic
      /* istanbul ignore next */
      cov_cprhe2as4().s[63]++;
      await executeWithRetry(() => {
        /* istanbul ignore next */
        cov_cprhe2as4().f[16]++;
        cov_cprhe2as4().s[64]++;
        return _prisma.default.refreshToken.update({
          where: {
            id: refreshToken.id
          },
          data: {
            isRevoked: true
          }
        });
      });
      /* istanbul ignore next */
      cov_cprhe2as4().s[65]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[14][1]++;
    }
    cov_cprhe2as4().s[66]++;
    return refreshToken.userId;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[67]++;
    console.error("Error verifying refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[68]++;
    return null;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[69]++;
const revokeRefreshToken = async token => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[17]++;
  cov_cprhe2as4().s[70]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[71]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[16][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[16][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[15][0]++;
      cov_cprhe2as4().s[72]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[73]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[15][1]++;
    }
    cov_cprhe2as4().s[74]++;
    await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[18]++;
      cov_cprhe2as4().s[75]++;
      return _prisma.default.refreshToken.updateMany({
        where: {
          token
        },
        data: {
          isRevoked: true
        }
      });
    });
    /* istanbul ignore next */
    cov_cprhe2as4().s[76]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[77]++;
    console.error("Error revoking refresh token:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[78]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[79]++;
const revokeAllUserRefreshTokens = async userId => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[19]++;
  cov_cprhe2as4().s[80]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[81]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[18][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[18][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[17][0]++;
      cov_cprhe2as4().s[82]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[83]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[17][1]++;
    }
    cov_cprhe2as4().s[84]++;
    await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[20]++;
      cov_cprhe2as4().s[85]++;
      return _prisma.default.refreshToken.updateMany({
        where: {
          userId
        },
        data: {
          isRevoked: true
        }
      });
    });
    /* istanbul ignore next */
    cov_cprhe2as4().s[86]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[87]++;
    console.error("Error revoking user refresh tokens:", error);
    /* istanbul ignore next */
    cov_cprhe2as4().s[88]++;
    return false;
  }
};
/* istanbul ignore next */
cov_cprhe2as4().s[89]++;
const cleanupRefreshTokens = async () => {
  /* istanbul ignore next */
  cov_cprhe2as4().f[21]++;
  cov_cprhe2as4().s[90]++;
  try {
    /* istanbul ignore next */
    cov_cprhe2as4().s[91]++;
    // Verify prisma client is initialized
    if (
    /* istanbul ignore next */
    (cov_cprhe2as4().b[20][0]++, !_prisma.default) ||
    /* istanbul ignore next */
    (cov_cprhe2as4().b[20][1]++, !_prisma.default.refreshToken)) {
      /* istanbul ignore next */
      cov_cprhe2as4().b[19][0]++;
      cov_cprhe2as4().s[92]++;
      console.error("Prisma client or RefreshToken model not available");
      /* istanbul ignore next */
      cov_cprhe2as4().s[93]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_cprhe2as4().b[19][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_cprhe2as4().s[94]++, new Date());
    /* istanbul ignore next */
    cov_cprhe2as4().s[95]++;
    await executeWithRetry(() => {
      /* istanbul ignore next */
      cov_cprhe2as4().f[22]++;
      cov_cprhe2as4().s[96]++;
      return _prisma.default.refreshToken.deleteMany({
        where: {
          OR: [{
            expiresAt: {
              lt: now
            }
          }, {
            isRevoked: true
          }]
        }
      });
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_cprhe2as4().s[97]++;
    console.error("Error cleaning up refresh tokens:", error);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,