17f2a59c278526756939e25963f206f6
"use strict";

/* istanbul ignore next */
function cov_214sn763f2() {
  var path = "/Users/sachin/Documents/md-sports-/src/lib/models/InventoryTransfer.ts";
  var hash = "eecbb463ba32105c339db484d170a8866fd4a46e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/lib/models/InventoryTransfer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 39
        }
      },
      "4": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "8": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "9": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "10": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 59
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 33
        },
        end: {
          line: 37,
          column: 67
        }
      },
      "13": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 38,
          column: 69
        }
      },
      "14": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 44,
          column: 14
        }
      },
      "15": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "16": {
        start: {
          line: 47,
          column: 34
        },
        end: {
          line: 47,
          column: 55
        }
      },
      "17": {
        start: {
          line: 48,
          column: 33
        },
        end: {
          line: 48,
          column: 53
        }
      },
      "18": {
        start: {
          line: 50,
          column: 40
        },
        end: {
          line: 56,
          column: 18
        }
      },
      "19": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "20": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 102
        }
      },
      "21": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "22": {
        start: {
          line: 65,
          column: 50
        },
        end: {
          line: 77,
          column: 18
        }
      },
      "23": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "24": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "25": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 39
        }
      },
      "26": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 24
        }
      },
      "27": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 41
        }
      },
      "28": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 64
        }
      },
      "29": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 25
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 25
        }
      },
      "32": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "33": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 20
        }
      },
      "34": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 151,
          column: 3
        }
      },
      "35": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "36": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 82
        }
      },
      "37": {
        start: {
          line: 152,
          column: 17
        },
        end: {
          line: 152,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 59
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 29
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 100
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        loc: {
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 149,
            column: 9
          }
        },
        line: 145
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 20,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 57
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 36
          }
        }, {
          start: {
            line: 57,
            column: 40
          },
          end: {
            line: 57,
            column: 82
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/lib/models/InventoryTransfer.ts"],
      sourcesContent: ["import { Model, DataTypes } from 'sequelize';\nimport sequelize from '../db';\n\nclass InventoryTransfer extends Model {\n    public id!: number;\n    public sourceShopId!: number;\n    public destinationShopId!: number;\n    public initiatedByUserId!: number;\n    public status!: string;\n    public readonly createdAt!: Date;\n    public completedAt!: Date | null;\n\n    // Custom instance methods\n    public async addTransferItem(productId: number, quantity: number, notes: string = ''): Promise<void> {\n        const TransferItem = sequelize.model('transfer_item');\n        await TransferItem.create({\n            transferId: this.id,\n            productId,\n            quantity,\n            notes\n        });\n    }\n\n    public async completeTransfer(): Promise<boolean> {\n        // Check if transfer is in pending status\n        if (this.status !== 'pending') {\n            return false;\n        }\n\n        // Start transaction\n        const transaction = await sequelize.transaction();\n\n        try {\n            const TransferItem = sequelize.model('transfer_item');\n            const InventoryItem = sequelize.model('inventory_item');\n\n            // Get all transfer items\n            const items = await TransferItem.findAll({\n                where: { transferId: this.id }\n            });\n\n            // Process each item in the transfer\n            for (const item of items) {\n                const productId = item.get('productId');\n                const quantity = item.get('quantity');\n\n                // Decrement source inventory\n                const sourceInventory = await InventoryItem.findOne({\n                    where: {\n                        shopId: this.sourceShopId,\n                        productId\n                    },\n                    transaction\n                });\n\n                if (!sourceInventory || sourceInventory.get('quantity') < quantity) {\n                    throw new Error(`Insufficient inventory for product ${productId} in source shop`);\n                }\n\n                await sourceInventory.decrement('quantity', {\n                    by: quantity,\n                    transaction\n                });\n\n                // Increment destination inventory (or create if not exists)\n                const [destInventory, _created] = await InventoryItem.findOrCreate({\n                    where: {\n                        shopId: this.destinationShopId,\n                        productId\n                    },\n                    defaults: {\n                        shopId: this.destinationShopId,\n                        productId,\n                        quantity: 0,\n                        reorderLevel: sourceInventory.get('reorderLevel')\n                    },\n                    transaction\n                });\n\n                await destInventory.increment('quantity', {\n                    by: quantity,\n                    transaction\n                });\n            }\n\n            // Update transfer status\n            await this.update({\n                status: 'completed',\n                completedAt: new Date()\n            }, { transaction });\n\n            // Commit transaction\n            await transaction.commit();\n            return true;\n        } catch (error) {\n            // Rollback transaction on error\n            await transaction.rollback();\n            console.error('Transfer completion failed:', error);\n            return false;\n        }\n    }\n\n    public async cancelTransfer(): Promise<boolean> {\n        // Only pending transfers can be cancelled\n        if (this.status !== 'pending') {\n            return false;\n        }\n\n        // Update transfer status\n        await this.update({\n            status: 'cancelled'\n        });\n\n        return true;\n    }\n}\n\nInventoryTransfer.init({\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    sourceShopId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    destinationShopId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    initiatedByUserId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    status: {\n        type: DataTypes.ENUM('pending', 'completed', 'cancelled'),\n        allowNull: false,\n        defaultValue: 'pending'\n    },\n    completedAt: {\n        type: DataTypes.DATE,\n        allowNull: true\n    }\n}, {\n    sequelize,\n    modelName: 'inventory_transfer',\n    tableName: 'inventory_transfers',\n    timestamps: true,\n    validate: {\n        differentShops() {\n            if (this.sourceShopId === this.destinationShopId) {\n                throw new Error('Source and destination shops must be different');\n            }\n        }\n    }\n});\n\nexport default InventoryTransfer;\n\n/**\n * Represents an inventory transfer between shops\n */\nexport interface InventoryTransfer {\n    id: number;\n    sourceShopId: number;\n    destinationShopId: number;\n    initiatedByUserId: number;\n    status: 'pending' | 'completed' | 'cancelled';\n    createdAt: string;\n    updatedAt: string;\n    completedAt: string | null;\n}\n\n/**\n * Represents an item in an inventory transfer\n */\nexport interface TransferItem {\n    id: number;\n    transferId: number;\n    productId: number;\n    quantity: number;\n    notes: string | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\n/**\n * Represents a transfer with additional details for display\n */\nexport interface TransferWithDetails extends InventoryTransfer {\n    sourceShopName: string;\n    destinationShopName: string;\n    initiatedBy: string;\n    items: TransferItemWithDetails[];\n}\n\n/**\n * Represents a transfer item with additional details for display\n */\nexport interface TransferItemWithDetails extends TransferItem {\n    productName: string;\n    sku: string;\n    retailPrice: string;\n}"],
      names: ["InventoryTransfer", "Model", "addTransferItem", "productId", "quantity", "notes", "TransferItem", "sequelize", "model", "create", "transferId", "id", "completeTransfer", "status", "transaction", "InventoryItem", "items", "findAll", "where", "item", "get", "sourceInventory", "findOne", "shopId", "sourceShopId", "Error", "decrement", "by", "destInventory", "_created", "findOrCreate", "destinationShopId", "defaults", "reorderLevel", "increment", "update", "completedAt", "Date", "commit", "error", "rollback", "console", "cancelTransfer", "init", "type", "DataTypes", "INTEGER", "autoIncrement", "primaryKey", "allowNull", "initiatedByUserId", "ENUM", "defaultValue", "DATE", "modelName", "tableName", "timestamps", "validate", "differentShops"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eecbb463ba32105c339db484d170a8866fd4a46e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_214sn763f2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_214sn763f2();
cov_214sn763f2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_214sn763f2().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_214sn763f2().f[0]++;
    cov_214sn763f2().s[2]++;
    return _default;
  }
});
const _sequelize =
/* istanbul ignore next */
(cov_214sn763f2().s[3]++, require("sequelize"));
const _db =
/* istanbul ignore next */
(/*#__PURE__*/cov_214sn763f2().s[4]++, _interop_require_default(require("../db")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_214sn763f2().f[1]++;
  cov_214sn763f2().s[5]++;
  return /* istanbul ignore next */(cov_214sn763f2().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_214sn763f2().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_214sn763f2().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_214sn763f2().b[0][1]++, {
    default: obj
  });
}
class InventoryTransfer extends
/* istanbul ignore next */
(_sequelize.Model) {
  // Custom instance methods
  async addTransferItem(productId, quantity, notes =
  /* istanbul ignore next */
  (cov_214sn763f2().b[2][0]++, "")) {
    /* istanbul ignore next */
    cov_214sn763f2().f[2]++;
    const TransferItem =
    /* istanbul ignore next */
    (cov_214sn763f2().s[6]++, _db.default.model("transfer_item"));
    /* istanbul ignore next */
    cov_214sn763f2().s[7]++;
    await TransferItem.create({
      transferId: this.id,
      productId,
      quantity,
      notes
    });
  }
  async completeTransfer() {
    /* istanbul ignore next */
    cov_214sn763f2().f[3]++;
    cov_214sn763f2().s[8]++;
    // Check if transfer is in pending status
    if (this.status !== "pending") {
      /* istanbul ignore next */
      cov_214sn763f2().b[3][0]++;
      cov_214sn763f2().s[9]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_214sn763f2().b[3][1]++;
    }
    // Start transaction
    const transaction =
    /* istanbul ignore next */
    (cov_214sn763f2().s[10]++, await _db.default.transaction());
    /* istanbul ignore next */
    cov_214sn763f2().s[11]++;
    try {
      const TransferItem =
      /* istanbul ignore next */
      (cov_214sn763f2().s[12]++, _db.default.model("transfer_item"));
      const InventoryItem =
      /* istanbul ignore next */
      (cov_214sn763f2().s[13]++, _db.default.model("inventory_item"));
      // Get all transfer items
      const items =
      /* istanbul ignore next */
      (cov_214sn763f2().s[14]++, await TransferItem.findAll({
        where: {
          transferId: this.id
        }
      }));
      // Process each item in the transfer
      /* istanbul ignore next */
      cov_214sn763f2().s[15]++;
      for (const item of items) {
        const productId =
        /* istanbul ignore next */
        (cov_214sn763f2().s[16]++, item.get("productId"));
        const quantity =
        /* istanbul ignore next */
        (cov_214sn763f2().s[17]++, item.get("quantity"));
        // Decrement source inventory
        const sourceInventory =
        /* istanbul ignore next */
        (cov_214sn763f2().s[18]++, await InventoryItem.findOne({
          where: {
            shopId: this.sourceShopId,
            productId
          },
          transaction
        }));
        /* istanbul ignore next */
        cov_214sn763f2().s[19]++;
        if (
        /* istanbul ignore next */
        (cov_214sn763f2().b[5][0]++, !sourceInventory) ||
        /* istanbul ignore next */
        (cov_214sn763f2().b[5][1]++, sourceInventory.get("quantity") < quantity)) {
          /* istanbul ignore next */
          cov_214sn763f2().b[4][0]++;
          cov_214sn763f2().s[20]++;
          throw new Error(`Insufficient inventory for product ${productId} in source shop`);
        } else
        /* istanbul ignore next */
        {
          cov_214sn763f2().b[4][1]++;
        }
        cov_214sn763f2().s[21]++;
        await sourceInventory.decrement("quantity", {
          by: quantity,
          transaction
        });
        // Increment destination inventory (or create if not exists)
        const [destInventory, _created] =
        /* istanbul ignore next */
        (cov_214sn763f2().s[22]++, await InventoryItem.findOrCreate({
          where: {
            shopId: this.destinationShopId,
            productId
          },
          defaults: {
            shopId: this.destinationShopId,
            productId,
            quantity: 0,
            reorderLevel: sourceInventory.get("reorderLevel")
          },
          transaction
        }));
        /* istanbul ignore next */
        cov_214sn763f2().s[23]++;
        await destInventory.increment("quantity", {
          by: quantity,
          transaction
        });
      }
      // Update transfer status
      /* istanbul ignore next */
      cov_214sn763f2().s[24]++;
      await this.update({
        status: "completed",
        completedAt: new Date()
      }, {
        transaction
      });
      // Commit transaction
      /* istanbul ignore next */
      cov_214sn763f2().s[25]++;
      await transaction.commit();
      /* istanbul ignore next */
      cov_214sn763f2().s[26]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_214sn763f2().s[27]++;
      // Rollback transaction on error
      await transaction.rollback();
      /* istanbul ignore next */
      cov_214sn763f2().s[28]++;
      console.error("Transfer completion failed:", error);
      /* istanbul ignore next */
      cov_214sn763f2().s[29]++;
      return false;
    }
  }
  async cancelTransfer() {
    /* istanbul ignore next */
    cov_214sn763f2().f[4]++;
    cov_214sn763f2().s[30]++;
    // Only pending transfers can be cancelled
    if (this.status !== "pending") {
      /* istanbul ignore next */
      cov_214sn763f2().b[6][0]++;
      cov_214sn763f2().s[31]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_214sn763f2().b[6][1]++;
    }
    // Update transfer status
    cov_214sn763f2().s[32]++;
    await this.update({
      status: "cancelled"
    });
    /* istanbul ignore next */
    cov_214sn763f2().s[33]++;
    return true;
  }
}
/* istanbul ignore next */
cov_214sn763f2().s[34]++;
InventoryTransfer.init({
  id: {
    type: _sequelize.DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true
  },
  sourceShopId: {
    type: _sequelize.DataTypes.INTEGER,
    allowNull: false
  },
  destinationShopId: {
    type: _sequelize.DataTypes.INTEGER,
    allowNull: false
  },
  initiatedByUserId: {
    type: _sequelize.DataTypes.INTEGER,
    allowNull: false
  },
  status: {
    type: _sequelize.DataTypes.ENUM("pending", "completed", "cancelled"),
    allowNull: false,
    defaultValue: "pending"
  },
  completedAt: {
    type: _sequelize.DataTypes.DATE,
    allowNull: true
  }
}, {
  sequelize: _db.default,
  modelName: "inventory_transfer",
  tableName: "inventory_transfers",
  timestamps: true,
  validate: {
    differentShops() {
      /* istanbul ignore next */
      cov_214sn763f2().f[5]++;
      cov_214sn763f2().s[35]++;
      if (this.sourceShopId === this.destinationShopId) {
        /* istanbul ignore next */
        cov_214sn763f2().b[7][0]++;
        cov_214sn763f2().s[36]++;
        throw new Error("Source and destination shops must be different");
      } else
      /* istanbul ignore next */
      {
        cov_214sn763f2().b[7][1]++;
      }
    }
  }
});
const _default =
/* istanbul ignore next */
(cov_214sn763f2().s[37]++, InventoryTransfer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,