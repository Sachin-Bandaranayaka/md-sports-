{"version":3,"names":["cleanupRefreshTokens","cov_cprhe2as4","f","s","generateRefreshToken","revokeAllUserRefreshTokens","revokeRefreshToken","verifyRefreshToken","REFRESH_TOKEN_EXPIRES_IN_DAYS","generateSecureToken","length","b","crypto","bytes","Uint8Array","getRandomValues","Array","from","map","byte","toString","padStart","join","Math","floor","random","userId","_prisma","default","refreshToken","console","error","Error","log","token","expiresAt","Date","setDate","getDate","substring","createdToken","executeWithRetry","create","data","updatedAt","id","message","stack","operation","maxRetries","attempt","code","includes","warn","Promise","resolve","setTimeout","findUnique","where","isRevoked","update","updateMany","now","deleteMany","OR","lt"],"sources":["/Users/sachin/Documents/md-sports-/src/services/refreshTokenService.ts"],"sourcesContent":["import prisma from '@/lib/prisma';\n\n// Configuration\nconst REFRESH_TOKEN_EXPIRES_IN_DAYS = 30;\n\n// Generate a secure random token using Web Crypto API\nconst generateSecureToken = (length = 40): string => {\n    // Use Web Crypto API which is supported in Edge Runtime\n    if (typeof crypto !== 'undefined') {\n        const bytes = new Uint8Array(length);\n        crypto.getRandomValues(bytes);\n        return Array.from(bytes)\n            .map(byte => byte.toString(16).padStart(2, '0'))\n            .join('');\n    }\n\n    // Fallback (less secure but works everywhere)\n    return Array.from(\n        { length },\n        () => Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n};\n\n/**\n * Generate a new refresh token for a user\n */\nexport const generateRefreshToken = async (userId: string): Promise<string> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            throw new Error('Database client not initialized correctly');\n        }\n\n        // Log for debugging\n        console.log('Generating refresh token for user ID:', userId);\n\n        // Generate a random token\n        const token = generateSecureToken(40);\n\n        // Calculate expiration date (30 days from now)\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + REFRESH_TOKEN_EXPIRES_IN_DAYS);\n\n        // Log the token details before creating\n        console.log('Preparing to create refresh token with:', {\n            userId,\n            token: token.substring(0, 10) + '...',\n            expiresAt,\n        });\n\n        // Store the token in the database with retry logic\n        const createdToken = await executeWithRetry(() => \n            prisma.refreshToken.create({\n                data: {\n                    userId,\n                    token,\n                    expiresAt,\n                    updatedAt: new Date(),\n                },\n            })\n        );\n\n        console.log('Successfully created refresh token with ID:', createdToken.id);\n\n        return token;\n    } catch (error) {\n        // More detailed error logging\n        console.error('Error generating refresh token:', error);\n        if (error instanceof Error) {\n            console.error('Error message:', error.message);\n            console.error('Error stack:', error.stack);\n        }\n        throw new Error('Failed to generate refresh token');\n    }\n};\n\n/**\n * Helper function to execute Prisma queries with retry logic for prepared statement conflicts\n */\nconst executeWithRetry = async <T>(operation: () => Promise<T>, maxRetries = 3): Promise<T> => {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error: any) {\n            // Check if it's a prepared statement conflict error\n            if (error?.code === '42P05' && error?.message?.includes('prepared statement') && attempt < maxRetries) {\n                console.warn(`Prepared statement conflict on attempt ${attempt}, retrying...`);\n                // Small delay before retry\n                await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw new Error('Max retries exceeded');\n};\n\n/**\n * Verify a refresh token and return the associated user ID if valid\n */\nexport const verifyRefreshToken = async (token: string): Promise<string | null> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return null;\n        }\n\n        // Find the token in the database with retry logic\n        const refreshToken = await executeWithRetry(() => \n            prisma.refreshToken.findUnique({\n                where: { token },\n            })\n        );\n\n        // Check if token exists and is not revoked\n        if (!refreshToken || refreshToken.isRevoked) {\n            console.log('Token not found or revoked:', token.substring(0, 10) + '...');\n            return null;\n        }\n\n        // Check if token is expired\n        if (new Date() > refreshToken.expiresAt) {\n            console.log('Token expired:', token.substring(0, 10) + '...');\n\n            // Revoke expired token with retry logic\n            await executeWithRetry(() => \n                prisma.refreshToken.update({\n                    where: { id: refreshToken.id },\n                    data: { isRevoked: true },\n                })\n            );\n\n            return null;\n        }\n\n        return refreshToken.userId;\n    } catch (error) {\n        console.error('Error verifying refresh token:', error);\n        return null;\n    }\n};\n\n/**\n * Revoke a specific refresh token\n */\nexport const revokeRefreshToken = async (token: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await executeWithRetry(() => \n            prisma.refreshToken.updateMany({\n                where: { token },\n                data: { isRevoked: true },\n            })\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking refresh token:', error);\n        return false;\n    }\n};\n\n/**\n * Revoke all refresh tokens for a specific user\n */\nexport const revokeAllUserRefreshTokens = async (userId: string): Promise<boolean> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return false;\n        }\n\n        await executeWithRetry(() => \n            prisma.refreshToken.updateMany({\n                where: { userId },\n                data: { isRevoked: true },\n            })\n        );\n\n        return true;\n    } catch (error) {\n        console.error('Error revoking user refresh tokens:', error);\n        return false;\n    }\n};\n\n/**\n * Clean up expired and revoked tokens\n * Note: This should be run periodically via a cron job\n */\nexport const cleanupRefreshTokens = async (): Promise<void> => {\n    try {\n        // Verify prisma client is initialized\n        if (!prisma || !prisma.refreshToken) {\n            console.error('Prisma client or RefreshToken model not available');\n            return;\n        }\n\n        const now = new Date();\n\n        await executeWithRetry(() => \n            prisma.refreshToken.deleteMany({\n                where: {\n                    OR: [\n                        { expiresAt: { lt: now } },\n                        { isRevoked: true },\n                    ],\n                },\n            })\n        );\n    } catch (error) {\n        console.error('Error cleaning up refresh tokens:', error);\n    }\n};"],"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","ignoreList":[]}