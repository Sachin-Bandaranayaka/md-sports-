{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/lowStockThreshold.test.ts"],"sourcesContent":["// Unit tests for Low Stock Threshold feature\n// Tests the API endpoint and business logic for updating minStockLevel\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { PUT } from '@/app/api/products/[id]/route';\nimport { PrismaClient } from '@prisma/client';\nimport { verifyToken } from '@/lib/auth';\nimport { extractToken } from '@/lib/auth';\n\n// Mock dependencies\njest.mock('@/lib/prisma', () => ({\n  prisma: {\n    product: {\n      findUnique: jest.fn(),\n      update: jest.fn(),\n    },\n    auditLog: {\n      create: jest.fn(),\n    },\n  },\n}));\n\n// Mock audit service\njest.mock('@/services/auditService', () => ({\n  auditService: {\n    logAction: jest.fn(),\n  },\n}));\n\njest.mock('@/lib/auth', () => ({\n  verifyToken: jest.fn(),\n  extractToken: jest.fn(),\n}));\n\nconst mockPrisma = require('@/lib/prisma').prisma;\nconst mockVerifyToken = verifyToken as jest.MockedFunction<typeof verifyToken>;\nconst mockExtractToken = extractToken as jest.MockedFunction<typeof extractToken>;\n\ndescribe('Low Stock Threshold API Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('PUT /api/products/[id] - minStockLevel updates', () => {\n    const mockExistingProduct = {\n      id: 1,\n      name: 'Test Product',\n      sku: 'TEST-001',\n      barcode: '1234567890',\n      description: 'Test product description',\n      price: 100,\n      weightedAverageCost: 80,\n      minStockLevel: 10,\n      categoryId: 1,\n    };\n\n    const mockUpdatedProduct = {\n      ...mockExistingProduct,\n      minStockLevel: 25,\n    };\n\n    beforeEach(() => {\n      mockPrisma.product.findUnique.mockResolvedValue(mockExistingProduct);\n      mockPrisma.product.update.mockResolvedValue(mockUpdatedProduct);\n      mockPrisma.auditLog.create.mockResolvedValue({});\n      mockExtractToken.mockReturnValue('mock-token');\n      mockVerifyToken.mockReturnValue({ userId: 1 });\n    });\n\n    test('should successfully update minStockLevel', async () => {\n      const requestBody = {\n        minStockLevel: 25,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '1' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.product.update).toHaveBeenCalledWith({\n        where: { id: 1 },\n        data: {\n          minStockLevel: 25,\n        },\n      });\n    });\n\n    test('should update minStockLevel along with other fields', async () => {\n      const requestBody = {\n        name: 'Updated Product Name',\n        minStockLevel: 15,\n        retailPrice: 120,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '1' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.product.update).toHaveBeenCalledWith({\n        where: { id: 1 },\n        data: {\n          name: 'Updated Product Name',\n          minStockLevel: 15,\n          price: 120,\n        },\n      });\n    });\n\n    test('should handle zero minStockLevel', async () => {\n      const requestBody = {\n        minStockLevel: 0,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '1' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.product.update).toHaveBeenCalledWith({\n        where: { id: 1 },\n        data: {\n          minStockLevel: 0,\n        },\n      });\n    });\n\n    test('should handle negative minStockLevel', async () => {\n      const requestBody = {\n        minStockLevel: -5,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '1' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(mockPrisma.product.update).toHaveBeenCalledWith({\n        where: { id: 1 },\n        data: {\n          minStockLevel: -5,\n        },\n      });\n    });\n\n    test('should return 404 for non-existent product', async () => {\n      mockPrisma.product.findUnique.mockResolvedValue(null);\n\n      const requestBody = {\n        minStockLevel: 25,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/999', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '999' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Product with ID 999 not found');\n    });\n\n    test('should return 400 for invalid product ID', async () => {\n      const requestBody = {\n        minStockLevel: 25,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/invalid', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: 'invalid' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Invalid product ID');\n    });\n\n    test('should create audit log for minStockLevel changes', async () => {\n      const requestBody = {\n        minStockLevel: 30,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      await PUT(request, { params: { id: '1' } });\n\n      expect(mockPrisma.auditLog.create).toHaveBeenCalledWith({\n        data: {\n          action: 'UPDATE',\n          entityType: 'Product',\n          entityId: '1',\n          userId: 1,\n          changes: {\n            minStockLevel: {\n              old: 10,\n              new: 30,\n            },\n          },\n          timestamp: expect.any(Date),\n        },\n      });\n    });\n\n    test('should handle database errors gracefully', async () => {\n      mockPrisma.product.update.mockRejectedValue(new Error('Database connection failed'));\n\n      const requestBody = {\n        minStockLevel: 25,\n      };\n\n      const request = new Request('http://localhost:3000/api/products/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token',\n        },\n        body: JSON.stringify(requestBody),\n      }) as NextRequest;\n\n      const response = await PUT(request, { params: { id: '1' } });\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.message).toBe('Error updating product');\n    });\n  });\n\n  describe('minStockLevel validation', () => {\n    test('should accept valid minStockLevel values', () => {\n      const validValues = [0, 1, 5, 10, 100, 1000];\n      \n      validValues.forEach(value => {\n        expect(typeof value).toBe('number');\n        expect(Number.isInteger(value)).toBe(true);\n      });\n    });\n\n    test('should handle string numbers correctly', () => {\n      const stringNumbers = ['0', '5', '10', '25'];\n      \n      stringNumbers.forEach(value => {\n        const parsed = parseInt(value);\n        expect(Number.isInteger(parsed)).toBe(true);\n        expect(parsed >= 0).toBe(true);\n      });\n    });\n  });\n});\n\n// Business logic tests for low stock detection\ndescribe('Low Stock Detection Logic', () => {\n  test('should correctly identify low stock products', () => {\n    const products = [\n      { id: 1, name: 'Product A', currentStock: 5, minStockLevel: 10 },\n      { id: 2, name: 'Product B', currentStock: 15, minStockLevel: 10 },\n      { id: 3, name: 'Product C', currentStock: 0, minStockLevel: 5 },\n      { id: 4, name: 'Product D', currentStock: 10, minStockLevel: 10 },\n    ];\n\n    const isLowStock = (product: any) => product.currentStock < product.minStockLevel;\n    const lowStockProducts = products.filter(isLowStock);\n\n    expect(lowStockProducts).toHaveLength(2);\n    expect(lowStockProducts.map(p => p.id)).toEqual([1, 3]);\n  });\n\n  test('should handle edge cases for low stock detection', () => {\n    const edgeCases = [\n      { id: 1, currentStock: 0, minStockLevel: 0 }, // Both zero\n      { id: 2, currentStock: 1, minStockLevel: 0 }, // Min stock zero\n      { id: 3, currentStock: 5, minStockLevel: 5 }, // Equal values\n    ];\n\n    const isLowStock = (product: any) => product.currentStock < product.minStockLevel;\n    const lowStockProducts = edgeCases.filter(isLowStock);\n\n    expect(lowStockProducts).toHaveLength(0); // None should be low stock\n  });\n});"],"names":["jest","mock","prisma","product","findUnique","fn","update","auditLog","create","auditService","logAction","verifyToken","extractToken","mockPrisma","require","mockVerifyToken","mockExtractToken","describe","beforeEach","clearAllMocks","mockExistingProduct","id","name","sku","barcode","description","price","weightedAverageCost","minStockLevel","categoryId","mockUpdatedProduct","mockResolvedValue","mockReturnValue","userId","test","requestBody","request","Request","method","headers","body","JSON","stringify","response","PUT","params","responseData","json","expect","status","toBe","success","toHaveBeenCalledWith","where","data","retailPrice","message","action","entityType","entityId","changes","old","new","timestamp","any","Date","mockRejectedValue","Error","validValues","forEach","value","Number","isInteger","stringNumbers","parsed","parseInt","products","currentStock","isLowStock","lowStockProducts","filter","toHaveLength","map","p","toEqual","edgeCases"],"mappings":"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"}