b5e267726e0b9e058fd619f47b9bc160
"use strict";

/* istanbul ignore next */
function cov_2hco0gi8kr() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/bulk-import/route.ts";
  var hash = "d918760d939d0353b9d582dcbfe615a31866ac26";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/bulk-import/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 70
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "7": {
        start: {
          line: 15,
          column: 39
        },
        end: {
          line: 15,
          column: 51
        }
      },
      "8": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "9": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "12": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "14": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "16": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "17": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "18": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 30
        }
      },
      "19": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "20": {
        start: {
          line: 38,
          column: 32
        },
        end: {
          line: 38,
          column: 88
        }
      },
      "21": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "22": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "23": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 95
        }
      },
      "24": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "25": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 57
        }
      },
      "26": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "27": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "28": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "29": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 31
        }
      },
      "30": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 18
        }
      },
      "31": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "32": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 49
        }
      },
      "33": {
        start: {
          line: 58,
          column: 21
        },
        end: {
          line: 58,
          column: 41
        }
      },
      "34": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "35": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "36": {
        start: {
          line: 67,
          column: 22
        },
        end: {
          line: 67,
          column: 46
        }
      },
      "37": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 41
        }
      },
      "38": {
        start: {
          line: 69,
          column: 25
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "39": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "40": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 73,
          column: 52
        }
      },
      "41": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 61
        }
      },
      "42": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "43": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "44": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 26
        }
      },
      "45": {
        start: {
          line: 84,
          column: 40
        },
        end: {
          line: 84,
          column: 41
        }
      },
      "46": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 29
        }
      },
      "47": {
        start: {
          line: 87,
          column: 35
        },
        end: {
          line: 87,
          column: 44
        }
      },
      "48": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "49": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 21
        }
      },
      "50": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 35
        }
      },
      "51": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "52": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "53": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "54": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 98,
          column: 19
        }
      },
      "55": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 25
        }
      },
      "56": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 65
        }
      },
      "57": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "58": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "59": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "60": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 47
        }
      },
      "61": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "62": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "63": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "64": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 29
        }
      },
      "65": {
        start: {
          line: 122,
          column: 45
        },
        end: {
          line: 126,
          column: 18
        }
      },
      "66": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "67": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 133,
          column: 23
        }
      },
      "68": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 29
        }
      },
      "69": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 44
        }
      },
      "70": {
        start: {
          line: 138,
          column: 32
        },
        end: {
          line: 138,
          column: 63
        }
      },
      "71": {
        start: {
          line: 139,
          column: 30
        },
        end: {
          line: 139,
          column: 139
        }
      },
      "72": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "73": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "74": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 25
        }
      },
      "75": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 55
        }
      },
      "76": {
        start: {
          line: 150,
          column: 29
        },
        end: {
          line: 150,
          column: 33
        }
      },
      "77": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "78": {
        start: {
          line: 152,
          column: 33
        },
        end: {
          line: 156,
          column: 18
        }
      },
      "79": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "80": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "81": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 29
        }
      },
      "82": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 41
        }
      },
      "83": {
        start: {
          line: 168,
          column: 36
        },
        end: {
          line: 168,
          column: 162
        }
      },
      "84": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "85": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 175,
          column: 19
        }
      },
      "86": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 25
        }
      },
      "87": {
        start: {
          line: 178,
          column: 25
        },
        end: {
          line: 178,
          column: 29
        }
      },
      "88": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "89": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 188,
          column: 17
        }
      },
      "90": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 186,
          column: 23
        }
      },
      "91": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 29
        }
      },
      "92": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 193,
          column: 18
        }
      },
      "93": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 202,
          column: 17
        }
      },
      "94": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "95": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 29
        }
      },
      "96": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 33
        }
      },
      "97": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "98": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 238,
          column: 19
        }
      },
      "99": {
        start: {
          line: 211,
          column: 39
        },
        end: {
          line: 221,
          column: 22
        }
      },
      "100": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 230,
          column: 21
        }
      },
      "101": {
        start: {
          line: 223,
          column: 24
        },
        end: {
          line: 229,
          column: 27
        }
      },
      "102": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 236,
          column: 23
        }
      },
      "103": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 48
        }
      },
      "104": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 86
        }
      },
      "105": {
        start: {
          line: 241,
          column: 30
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "106": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 244,
          column: 17
        }
      },
      "107": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 243,
          column: 61
        }
      },
      "108": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "109": {
        start: {
          line: 253,
          column: 26
        },
        end: {
          line: 253,
          column: 41
        }
      },
      "110": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 111
        }
      },
      "111": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "112": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 70
        }
      },
      "113": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "114": {
        start: {
          line: 260,
          column: 37
        },
        end: {
          line: 260,
          column: 144
        }
      },
      "115": {
        start: {
          line: 260,
          column: 84
        },
        end: {
          line: 260,
          column: 143
        }
      },
      "116": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 53
        }
      },
      "117": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "118": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 59
        }
      },
      "119": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 47
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 18,
            column: 40
          }
        },
        loc: {
          start: {
            line: 18,
            column: 61
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 34
          }
        },
        loc: {
          start: {
            line: 22,
            column: 53
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 55,
            column: 15
          },
          end: {
            line: 55,
            column: 19
          }
        },
        loc: {
          start: {
            line: 55,
            column: 29
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 210,
            column: 50
          },
          end: {
            line: 210,
            column: 51
          }
        },
        loc: {
          start: {
            line: 210,
            column: 62
          },
          end: {
            line: 238,
            column: 17
          }
        },
        line: 210
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 260,
            column: 66
          },
          end: {
            line: 260,
            column: 67
          }
        },
        loc: {
          start: {
            line: 260,
            column: 84
          },
          end: {
            line: 260,
            column: 143
          }
        },
        line: 260
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 19,
            column: 45
          }
        }, {
          start: {
            line: 19,
            column: 48
          },
          end: {
            line: 19,
            column: 65
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 20
          }
        }, {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 23,
            column: 27
          }
        }, {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 23,
            column: 45
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 20
          }
        }, {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 47
          }
        }, {
          start: {
            line: 26,
            column: 51
          },
          end: {
            line: 26,
            column: 76
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "7": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 31
          }
        }],
        line: 32
      },
      "8": {
        loc: {
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 32
          },
          end: {
            line: 38,
            column: 53
          }
        }, {
          start: {
            line: 38,
            column: 57
          },
          end: {
            line: 38,
            column: 88
          }
        }],
        line: 38
      },
      "9": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "10": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 29
          }
        }, {
          start: {
            line: 40,
            column: 33
          },
          end: {
            line: 40,
            column: 79
          }
        }],
        line: 40
      },
      "11": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 47
          },
          end: {
            line: 41,
            column: 88
          }
        }, {
          start: {
            line: 41,
            column: 91
          },
          end: {
            line: 41,
            column: 95
          }
        }],
        line: 41
      },
      "12": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 46,
            column: 13
          }
        }],
        line: 42
      },
      "13": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 20
          }
        }, {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 42,
            column: 33
          }
        }, {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 42,
            column: 45
          }
        }],
        line: 42
      },
      "14": {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "15": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "16": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "17": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 21
          }
        }, {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 46
          }
        }],
        line: 75
      },
      "18": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "19": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "20": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 34
          }
        }, {
          start: {
            line: 102,
            column: 38
          },
          end: {
            line: 102,
            column: 53
          }
        }],
        line: 102
      },
      "21": {
        loc: {
          start: {
            line: 111,
            column: 24
          },
          end: {
            line: 111,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 24
          },
          end: {
            line: 111,
            column: 39
          }
        }, {
          start: {
            line: 111,
            column: 43
          },
          end: {
            line: 111,
            column: 47
          }
        }],
        line: 111
      },
      "22": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "23": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "24": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "25": {
        loc: {
          start: {
            line: 138,
            column: 32
          },
          end: {
            line: 138,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 32
          },
          end: {
            line: 138,
            column: 55
          }
        }, {
          start: {
            line: 138,
            column: 59
          },
          end: {
            line: 138,
            column: 63
          }
        }],
        line: 138
      },
      "26": {
        loc: {
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 139,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 99
          },
          end: {
            line: 139,
            column: 132
          }
        }, {
          start: {
            line: 139,
            column: 135
          },
          end: {
            line: 139,
            column: 139
          }
        }],
        line: 139
      },
      "27": {
        loc: {
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 139,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 139,
            column: 57
          }
        }, {
          start: {
            line: 139,
            column: 61
          },
          end: {
            line: 139,
            column: 96
          }
        }],
        line: 139
      },
      "28": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "29": {
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 34
          }
        }, {
          start: {
            line: 140,
            column: 39
          },
          end: {
            line: 140,
            column: 55
          }
        }, {
          start: {
            line: 140,
            column: 59
          },
          end: {
            line: 140,
            column: 72
          }
        }],
        line: 140
      },
      "30": {
        loc: {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 47
          }
        }, {
          start: {
            line: 149,
            column: 51
          },
          end: {
            line: 149,
            column: 55
          }
        }],
        line: 149
      },
      "31": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "32": {
        loc: {
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "33": {
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 117
          },
          end: {
            line: 168,
            column: 158
          }
        }, {
          start: {
            line: 168,
            column: 161
          },
          end: {
            line: 168,
            column: 162
          }
        }],
        line: 168
      },
      "34": {
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 69
          }
        }, {
          start: {
            line: 168,
            column: 73
          },
          end: {
            line: 168,
            column: 114
          }
        }],
        line: 168
      },
      "35": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "36": {
        loc: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 38
          }
        }, {
          start: {
            line: 169,
            column: 42
          },
          end: {
            line: 169,
            column: 61
          }
        }],
        line: 169
      },
      "37": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "38": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 188,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 188,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "39": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "40": {
        loc: {
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 230,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 230,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "41": {
        loc: {
          start: {
            line: 222,
            column: 24
          },
          end: {
            line: 222,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 24
          },
          end: {
            line: 222,
            column: 43
          }
        }, {
          start: {
            line: 222,
            column: 47
          },
          end: {
            line: 222,
            column: 53
          }
        }],
        line: 222
      },
      "42": {
        loc: {
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 244,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 16
          },
          end: {
            line: 244,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "43": {
        loc: {
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 242,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 242,
            column: 44
          }
        }, {
          start: {
            line: 242,
            column: 48
          },
          end: {
            line: 242,
            column: 85
          }
        }],
        line: 242
      },
      "44": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "45": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "46": {
        loc: {
          start: {
            line: 264,
            column: 21
          },
          end: {
            line: 264,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 21
          },
          end: {
            line: 264,
            column: 50
          }
        }, {
          start: {
            line: 264,
            column: 54
          },
          end: {
            line: 264,
            column: 69
          }
        }],
        line: 264
      },
      "47": {
        loc: {
          start: {
            line: 272,
            column: 21
          },
          end: {
            line: 272,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 21
          },
          end: {
            line: 272,
            column: 34
          }
        }, {
          start: {
            line: 272,
            column: 38
          },
          end: {
            line: 272,
            column: 88
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/bulk-import/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport * as XLSX from 'xlsx';\n\ninterface ProductRow {\n    Name?: string;\n    SKU?: string;\n    Description?: string;\n    RetailPrice?: number | string; // Can be string from Excel, needs parsing\n    CostPrice?: number | string;   // Can be string from Excel, needs parsing\n    Barcode?: string;\n    CategoryName?: string;\n    InitialQuantity?: number | string; // Can be string from Excel, needs parsing\n    ShopName?: string;\n}\n\nexport async function POST(request: NextRequest) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get('file') as File | null;\n\n        if (!file) {\n            return NextResponse.json({ success: false, message: 'No file uploaded.' }, { status: 400 });\n        }\n\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n\n        const workbook = XLSX.read(buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json<ProductRow>(worksheet);\n\n        if (!jsonData || jsonData.length === 0) {\n            return NextResponse.json({ success: false, message: 'Excel file is empty or data could not be read.' }, { status: 400 });\n        }\n\n        const results: { row: number; success: boolean; message: string; productName?: string }[] = [];\n        let successfullyImportedCount = 0;\n\n        // Prepare a list of operations for the transaction\n        const operations: any[] = [];\n        const createdProductSKUs = new Set<string>(); // To track SKUs within the current batch for uniqueness\n\n        for (let i = 0; i < jsonData.length; i++) {\n            const row = jsonData[i];\n            const rowIndex = i + 2; // Excel row number (1-based, +1 for header)\n\n            // --- Data Validation and Transformation ---\n            const name = row.Name?.trim();\n            if (!name) {\n                results.push({ row: rowIndex, success: false, message: 'Product Name is required.' });\n                continue;\n            }\n\n            let retailPrice = parseFloat(String(row.RetailPrice));\n            if (isNaN(retailPrice) || retailPrice < 0) {\n                results.push({ row: rowIndex, success: false, productName: name, message: 'Invalid or missing Retail Price. It must be a non-negative number.' });\n                continue;\n            }\n\n            const sku = row.SKU?.trim() || null;\n            if (sku) {\n                if (createdProductSKUs.has(sku)) {\n                    results.push({ row: rowIndex, success: false, productName: name, message: `SKU '${sku}' is duplicated within the import file.` });\n                    continue;\n                }\n                const existingProductBySKU = await prisma.product.findUnique({ where: { sku } });\n                if (existingProductBySKU) {\n                    results.push({ row: rowIndex, success: false, productName: name, message: `SKU '${sku}' already exists in the database.` });\n                    continue;\n                }\n                createdProductSKUs.add(sku);\n            }\n\n\n            const description = row.Description?.trim() || null;\n            const costPrice = row.CostPrice !== undefined && String(row.CostPrice).trim() !== '' ? parseFloat(String(row.CostPrice)) : null;\n            if (costPrice !== null && (isNaN(costPrice) || costPrice < 0)) {\n                results.push({ row: rowIndex, success: false, productName: name, message: 'Cost Price, if provided, must be a non-negative number.' });\n                continue;\n            }\n            const barcode = row.Barcode?.trim() || null;\n\n            let categoryId: number | null = null;\n            if (row.CategoryName?.trim()) {\n                const category = await prisma.category.findFirst({ where: { name: row.CategoryName.trim() } });\n                if (!category) {\n                    results.push({ row: rowIndex, success: false, productName: name, message: `Category '${row.CategoryName.trim()}' not found.` });\n                    continue;\n                }\n                categoryId = category.id;\n            }\n\n            const initialQuantity = row.InitialQuantity !== undefined && String(row.InitialQuantity).trim() !== '' ? parseInt(String(row.InitialQuantity), 10) : 0;\n            if (isNaN(initialQuantity) || initialQuantity < 0) {\n                results.push({ row: rowIndex, success: false, productName: name, message: 'Initial Quantity, if provided, must be a non-negative integer.' });\n                continue;\n            }\n\n            let shopId: number | null = null;\n            if (initialQuantity > 0) {\n                if (!row.ShopName?.trim()) {\n                    results.push({ row: rowIndex, success: false, productName: name, message: 'Shop Name is required if Initial Quantity is greater than 0.' });\n                    continue;\n                }\n                const shop = await prisma.shop.findFirst({ where: { name: row.ShopName.trim() } });\n                if (!shop) {\n                    results.push({ row: rowIndex, success: false, productName: name, message: `Shop '${row.ShopName.trim()}' not found.` });\n                    continue;\n                }\n                shopId = shop.id;\n            }\n\n            // --- Prepare Prisma Operations ---\n            // Note: We can't use createMany with nested creates for InventoryItem easily if we need the productId.\n            // So, we'll create product first, then inventory item if needed, all within the transaction.\n            // This approach processes products one by one within the transaction for clarity.\n\n            try {\n                await prisma.$transaction(async (tx) => {\n                    const newProduct = await tx.product.create({\n                        data: {\n                            name,\n                            sku,\n                            description,\n                            price: retailPrice,\n                            weightedAverageCost: costPrice,\n                            barcode,\n                            categoryId,\n                            // shopId for Product model is not used here, assuming it's for something else\n                        },\n                    });\n\n                    if (initialQuantity > 0 && shopId) {\n                        await tx.inventoryItem.create({\n                            data: {\n                                productId: newProduct.id,\n                                quantity: initialQuantity,\n                                shopId: shopId,\n                            },\n                        });\n                    }\n                    results.push({ row: rowIndex, success: true, productName: name, message: 'Product imported successfully.' });\n                    successfullyImportedCount++;\n                });\n\n            } catch (dbError: any) {\n                console.error(`Error processing row ${rowIndex} (${name}):`, dbError);\n                let message = 'Database error during import.';\n                if (dbError.code === 'P2002' && dbError.meta?.target?.includes('sku')) { // Prisma unique constraint violation for SKU\n                    message = `SKU '${sku}' already exists.`;\n                }\n                results.push({ row: rowIndex, success: false, productName: name, message });\n            }\n        }\n\n        const totalRows = jsonData.length;\n        let summaryMessage = `${successfullyImportedCount} out of ${totalRows} products imported successfully.`;\n        if (successfullyImportedCount < totalRows) {\n            summaryMessage += ' Please check the details for errors.';\n        }\n\n        // Invalidate inventory cache if any products were successfully imported\n        if (successfullyImportedCount > 0) {\n            const { cacheService } = await import('@/lib/cache');\n            await cacheService.invalidateInventory();\n        }\n\n        return NextResponse.json({\n            success: successfullyImportedCount > 0 || totalRows === 0, // Overall success if at least one or no rows\n            message: summaryMessage,\n            details: results,\n        });\n\n    } catch (error: any) {\n        console.error('Bulk product import error:', error);\n        return NextResponse.json(\n            { success: false, message: error.message || 'An unexpected error occurred during bulk import.' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["POST", "request", "formData", "file", "get", "NextResponse", "json", "success", "message", "status", "bytes", "arrayBuffer", "buffer", "Buffer", "from", "workbook", "XLSX", "read", "type", "sheetName", "SheetNames", "worksheet", "Sheets", "jsonData", "utils", "sheet_to_json", "length", "results", "successfullyImportedCount", "operations", "createdProductSKUs", "Set", "i", "row", "rowIndex", "name", "Name", "trim", "push", "retailPrice", "parseFloat", "String", "RetailPrice", "isNaN", "productName", "sku", "SKU", "has", "existingProductBySKU", "prisma", "product", "findUnique", "where", "add", "description", "Description", "costPrice", "CostPrice", "undefined", "barcode", "Barcode", "categoryId", "CategoryName", "category", "findFirst", "id", "initialQuantity", "InitialQuantity", "parseInt", "shopId", "ShopName", "shop", "$transaction", "tx", "newProduct", "create", "data", "price", "weightedAverageCost", "inventoryItem", "productId", "quantity", "dbError", "console", "error", "code", "meta", "target", "includes", "totalRows", "summaryMessage", "cacheService", "invalidateInventory", "details"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d918760d939d0353b9d582dcbfe615a31866ac26"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hco0gi8kr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hco0gi8kr();
cov_2hco0gi8kr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2hco0gi8kr().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2hco0gi8kr().f[0]++;
    cov_2hco0gi8kr().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2hco0gi8kr().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2hco0gi8kr().s[4]++, require("../../../../lib/prisma"));
const _xlsx =
/* istanbul ignore next */
(/*#__PURE__*/cov_2hco0gi8kr().s[5]++, _interop_require_wildcard(require("xlsx")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_2hco0gi8kr().f[1]++;
  cov_2hco0gi8kr().s[6]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_2hco0gi8kr().b[0][0]++;
    cov_2hco0gi8kr().s[7]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_2hco0gi8kr().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_2hco0gi8kr().s[8]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_2hco0gi8kr().s[9]++, new WeakMap());
  /* istanbul ignore next */
  cov_2hco0gi8kr().s[10]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().f[2]++;
    cov_2hco0gi8kr().s[11]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_2hco0gi8kr().f[3]++;
  cov_2hco0gi8kr().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().b[2][0]++;
    cov_2hco0gi8kr().s[13]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_2hco0gi8kr().b[2][1]++;
  }
  cov_2hco0gi8kr().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().b[4][0]++;
    cov_2hco0gi8kr().s[15]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_2hco0gi8kr().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_2hco0gi8kr().s[16]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_2hco0gi8kr().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().b[6][0]++;
    cov_2hco0gi8kr().s[18]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_2hco0gi8kr().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_2hco0gi8kr().s[19]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_2hco0gi8kr().s[20]++,
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_2hco0gi8kr().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_2hco0gi8kr().s[21]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_2hco0gi8kr().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[23]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[11][1]++, null));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[12][0]++;
        cov_2hco0gi8kr().s[25]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[12][1]++;
        cov_2hco0gi8kr().s[26]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_2hco0gi8kr().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2hco0gi8kr().s[27]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_2hco0gi8kr().s[28]++;
  if (cache) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().b[14][0]++;
    cov_2hco0gi8kr().s[29]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_2hco0gi8kr().b[14][1]++;
  }
  cov_2hco0gi8kr().s[30]++;
  return newObj;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2hco0gi8kr().f[4]++;
  cov_2hco0gi8kr().s[31]++;
  try {
    const formData =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[32]++, await request.formData());
    const file =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[33]++, formData.get("file"));
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[34]++;
    if (!file) {
      /* istanbul ignore next */
      cov_2hco0gi8kr().b[15][0]++;
      cov_2hco0gi8kr().s[35]++;
      return _server.NextResponse.json({
        success: false,
        message: "No file uploaded."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hco0gi8kr().b[15][1]++;
    }
    const bytes =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[36]++, await file.arrayBuffer());
    const buffer =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[37]++, Buffer.from(bytes));
    const workbook =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[38]++, _xlsx.read(buffer, {
      type: "buffer"
    }));
    const sheetName =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[39]++, workbook.SheetNames[0]);
    const worksheet =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[40]++, workbook.Sheets[sheetName]);
    const jsonData =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[41]++, _xlsx.utils.sheet_to_json(worksheet));
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[17][0]++, !jsonData) ||
    /* istanbul ignore next */
    (cov_2hco0gi8kr().b[17][1]++, jsonData.length === 0)) {
      /* istanbul ignore next */
      cov_2hco0gi8kr().b[16][0]++;
      cov_2hco0gi8kr().s[43]++;
      return _server.NextResponse.json({
        success: false,
        message: "Excel file is empty or data could not be read."
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hco0gi8kr().b[16][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[44]++, []);
    let successfullyImportedCount =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[45]++, 0);
    // Prepare a list of operations for the transaction
    const operations =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[46]++, []);
    const createdProductSKUs =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[47]++, new Set()); // To track SKUs within the current batch for uniqueness
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[48]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[49]++, 0); i < jsonData.length; i++) {
      const row =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[50]++, jsonData[i]);
      const rowIndex =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[51]++, i + 2); // Excel row number (1-based, +1 for header)
      // --- Data Validation and Transformation ---
      const name =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[52]++, row.Name?.trim());
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[53]++;
      if (!name) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[18][0]++;
        cov_2hco0gi8kr().s[54]++;
        results.push({
          row: rowIndex,
          success: false,
          message: "Product Name is required."
        });
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[55]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[18][1]++;
      }
      let retailPrice =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[56]++, parseFloat(String(row.RetailPrice)));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[20][0]++, isNaN(retailPrice)) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[20][1]++, retailPrice < 0)) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[19][0]++;
        cov_2hco0gi8kr().s[58]++;
        results.push({
          row: rowIndex,
          success: false,
          productName: name,
          message: "Invalid or missing Retail Price. It must be a non-negative number."
        });
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[59]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[19][1]++;
      }
      const sku =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[60]++,
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[21][0]++, row.SKU?.trim()) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[21][1]++, null));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[61]++;
      if (sku) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[22][0]++;
        cov_2hco0gi8kr().s[62]++;
        if (createdProductSKUs.has(sku)) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[23][0]++;
          cov_2hco0gi8kr().s[63]++;
          results.push({
            row: rowIndex,
            success: false,
            productName: name,
            message: `SKU '${sku}' is duplicated within the import file.`
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[64]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[23][1]++;
        }
        const existingProductBySKU =
        /* istanbul ignore next */
        (cov_2hco0gi8kr().s[65]++, await _prisma.prisma.product.findUnique({
          where: {
            sku
          }
        }));
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[66]++;
        if (existingProductBySKU) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[24][0]++;
          cov_2hco0gi8kr().s[67]++;
          results.push({
            row: rowIndex,
            success: false,
            productName: name,
            message: `SKU '${sku}' already exists in the database.`
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[68]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[24][1]++;
        }
        cov_2hco0gi8kr().s[69]++;
        createdProductSKUs.add(sku);
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[22][1]++;
      }
      const description =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[70]++,
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[25][0]++, row.Description?.trim()) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[25][1]++, null));
      const costPrice =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[71]++,
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[27][0]++, row.CostPrice !== undefined) &&
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[27][1]++, String(row.CostPrice).trim() !== "") ?
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[26][0]++, parseFloat(String(row.CostPrice))) :
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[26][1]++, null));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[29][0]++, costPrice !== null) && (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[29][1]++, isNaN(costPrice)) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[29][2]++, costPrice < 0))) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[28][0]++;
        cov_2hco0gi8kr().s[73]++;
        results.push({
          row: rowIndex,
          success: false,
          productName: name,
          message: "Cost Price, if provided, must be a non-negative number."
        });
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[74]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[28][1]++;
      }
      const barcode =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[75]++,
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[30][0]++, row.Barcode?.trim()) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[30][1]++, null));
      let categoryId =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[76]++, null);
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[77]++;
      if (row.CategoryName?.trim()) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[31][0]++;
        const category =
        /* istanbul ignore next */
        (cov_2hco0gi8kr().s[78]++, await _prisma.prisma.category.findFirst({
          where: {
            name: row.CategoryName.trim()
          }
        }));
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[79]++;
        if (!category) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[32][0]++;
          cov_2hco0gi8kr().s[80]++;
          results.push({
            row: rowIndex,
            success: false,
            productName: name,
            message: `Category '${row.CategoryName.trim()}' not found.`
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[81]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[32][1]++;
        }
        cov_2hco0gi8kr().s[82]++;
        categoryId = category.id;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[31][1]++;
      }
      const initialQuantity =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[83]++,
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[34][0]++, row.InitialQuantity !== undefined) &&
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[34][1]++, String(row.InitialQuantity).trim() !== "") ?
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[33][0]++, parseInt(String(row.InitialQuantity), 10)) :
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[33][1]++, 0));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[84]++;
      if (
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[36][0]++, isNaN(initialQuantity)) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[36][1]++, initialQuantity < 0)) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[35][0]++;
        cov_2hco0gi8kr().s[85]++;
        results.push({
          row: rowIndex,
          success: false,
          productName: name,
          message: "Initial Quantity, if provided, must be a non-negative integer."
        });
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[86]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[35][1]++;
      }
      let shopId =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[87]++, null);
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[88]++;
      if (initialQuantity > 0) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().b[37][0]++;
        cov_2hco0gi8kr().s[89]++;
        if (!row.ShopName?.trim()) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[38][0]++;
          cov_2hco0gi8kr().s[90]++;
          results.push({
            row: rowIndex,
            success: false,
            productName: name,
            message: "Shop Name is required if Initial Quantity is greater than 0."
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[91]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[38][1]++;
        }
        const shop =
        /* istanbul ignore next */
        (cov_2hco0gi8kr().s[92]++, await _prisma.prisma.shop.findFirst({
          where: {
            name: row.ShopName.trim()
          }
        }));
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[93]++;
        if (!shop) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[39][0]++;
          cov_2hco0gi8kr().s[94]++;
          results.push({
            row: rowIndex,
            success: false,
            productName: name,
            message: `Shop '${row.ShopName.trim()}' not found.`
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[95]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[39][1]++;
        }
        cov_2hco0gi8kr().s[96]++;
        shopId = shop.id;
      } else
      /* istanbul ignore next */
      {
        cov_2hco0gi8kr().b[37][1]++;
      }
      // --- Prepare Prisma Operations ---
      // Note: We can't use createMany with nested creates for InventoryItem easily if we need the productId.
      // So, we'll create product first, then inventory item if needed, all within the transaction.
      // This approach processes products one by one within the transaction for clarity.
      cov_2hco0gi8kr().s[97]++;
      try {
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[98]++;
        await _prisma.prisma.$transaction(async tx => {
          /* istanbul ignore next */
          cov_2hco0gi8kr().f[5]++;
          const newProduct =
          /* istanbul ignore next */
          (cov_2hco0gi8kr().s[99]++, await tx.product.create({
            data: {
              name,
              sku,
              description,
              price: retailPrice,
              weightedAverageCost: costPrice,
              barcode,
              categoryId
            }
          }));
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[100]++;
          if (
          /* istanbul ignore next */
          (cov_2hco0gi8kr().b[41][0]++, initialQuantity > 0) &&
          /* istanbul ignore next */
          (cov_2hco0gi8kr().b[41][1]++, shopId)) {
            /* istanbul ignore next */
            cov_2hco0gi8kr().b[40][0]++;
            cov_2hco0gi8kr().s[101]++;
            await tx.inventoryItem.create({
              data: {
                productId: newProduct.id,
                quantity: initialQuantity,
                shopId: shopId
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_2hco0gi8kr().b[40][1]++;
          }
          cov_2hco0gi8kr().s[102]++;
          results.push({
            row: rowIndex,
            success: true,
            productName: name,
            message: "Product imported successfully."
          });
          /* istanbul ignore next */
          cov_2hco0gi8kr().s[103]++;
          successfullyImportedCount++;
        });
      } catch (dbError) {
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[104]++;
        console.error(`Error processing row ${rowIndex} (${name}):`, dbError);
        let message =
        /* istanbul ignore next */
        (cov_2hco0gi8kr().s[105]++, "Database error during import.");
        /* istanbul ignore next */
        cov_2hco0gi8kr().s[106]++;
        if (
        /* istanbul ignore next */
        (cov_2hco0gi8kr().b[43][0]++, dbError.code === "P2002") &&
        /* istanbul ignore next */
        (cov_2hco0gi8kr().b[43][1]++, dbError.meta?.target?.includes("sku"))) {
          /* istanbul ignore next */
          cov_2hco0gi8kr().b[42][0]++;
          cov_2hco0gi8kr().s[107]++;
          message = `SKU '${sku}' already exists.`;
        } else
        /* istanbul ignore next */
        {
          cov_2hco0gi8kr().b[42][1]++;
        }
        cov_2hco0gi8kr().s[108]++;
        results.push({
          row: rowIndex,
          success: false,
          productName: name,
          message
        });
      }
    }
    const totalRows =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[109]++, jsonData.length);
    let summaryMessage =
    /* istanbul ignore next */
    (cov_2hco0gi8kr().s[110]++, `${successfullyImportedCount} out of ${totalRows} products imported successfully.`);
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[111]++;
    if (successfullyImportedCount < totalRows) {
      /* istanbul ignore next */
      cov_2hco0gi8kr().b[44][0]++;
      cov_2hco0gi8kr().s[112]++;
      summaryMessage += " Please check the details for errors.";
    } else
    /* istanbul ignore next */
    {
      cov_2hco0gi8kr().b[44][1]++;
    }
    // Invalidate inventory cache if any products were successfully imported
    cov_2hco0gi8kr().s[113]++;
    if (successfullyImportedCount > 0) {
      /* istanbul ignore next */
      cov_2hco0gi8kr().b[45][0]++;
      const {
        cacheService
      } =
      /* istanbul ignore next */
      (cov_2hco0gi8kr().s[114]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_2hco0gi8kr().f[6]++;
        cov_2hco0gi8kr().s[115]++;
        return /*#__PURE__*/_interop_require_wildcard(require("../../../../lib/cache"));
      }));
      /* istanbul ignore next */
      cov_2hco0gi8kr().s[116]++;
      await cacheService.invalidateInventory();
    } else
    /* istanbul ignore next */
    {
      cov_2hco0gi8kr().b[45][1]++;
    }
    cov_2hco0gi8kr().s[117]++;
    return _server.NextResponse.json({
      success:
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[46][0]++, successfullyImportedCount > 0) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[46][1]++, totalRows === 0),
      message: summaryMessage,
      details: results
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[118]++;
    console.error("Bulk product import error:", error);
    /* istanbul ignore next */
    cov_2hco0gi8kr().s[119]++;
    return _server.NextResponse.json({
      success: false,
      message:
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[47][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_2hco0gi8kr().b[47][1]++, "An unexpected error occurred during bulk import.")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,