{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/api/salesInvoicesApi.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('Sales Invoice API Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with sales permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Sales User',\n        email: 'sales@test.com',\n        permissions: ['sales:view', 'sales:create', 'sales:edit', 'sales:delete', 'payments:create']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n    });\n  });\n\n  describe('Invoice Creation API', () => {\n    test('should create invoice via API call', async () => {\n      const mockInvoiceData = {\n        customerId: 1,\n        items: [\n          { productId: 1, quantity: 2, unitPrice: 100 },\n          { productId: 2, quantity: 1, unitPrice: 50 }\n        ],\n        dueDate: '2024-02-15',\n        notes: 'Test invoice'\n      };\n\n      const mockResponse = {\n        id: 1,\n        invoiceNumber: 'INV-001',\n        ...mockInvoiceData,\n        status: 'draft',\n        subtotal: 250,\n        taxAmount: 25,\n        total: 275,\n        createdAt: '2024-01-15T10:00:00Z'\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const createInvoice = async (invoiceData: any) => {\n        const response = await fetch('/api/invoices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(invoiceData)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to create invoice');\n        }\n\n        return response.json();\n      };\n\n      const result = await createInvoice(mockInvoiceData);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token'\n        },\n        body: JSON.stringify(mockInvoiceData)\n      });\n\n      expect(result.id).toBe(1);\n      expect(result.invoiceNumber).toBe('INV-001');\n      expect(result.total).toBe(275);\n    });\n\n    test('should handle API errors during creation', async () => {\n      const mockInvoiceData = {\n        customerId: 1,\n        items: []\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Validation failed',\n          details: ['At least one item is required']\n        }),\n      });\n\n      const createInvoice = async (invoiceData: any) => {\n        const response = await fetch('/api/invoices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(invoiceData)\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error);\n        }\n\n        return response.json();\n      };\n\n      await expect(createInvoice(mockInvoiceData)).rejects.toThrow('Validation failed');\n    });\n  });\n\n  describe('Invoice Update API', () => {\n    test('should update invoice via API call', async () => {\n      const invoiceId = 1;\n      const updateData = {\n        notes: 'Updated notes',\n        dueDate: '2024-02-20',\n        items: [\n          { productId: 1, quantity: 3, unitPrice: 100 }\n        ]\n      };\n\n      const mockResponse = {\n        id: invoiceId,\n        ...updateData,\n        status: 'draft',\n        updatedAt: '2024-01-15T11:00:00Z'\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const updateInvoice = async (id: number, data: any) => {\n        const response = await fetch(`/api/invoices/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(data)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update invoice');\n        }\n\n        return response.json();\n      };\n\n      const result = await updateInvoice(invoiceId, updateData);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices/1', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token'\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      expect(result.notes).toBe('Updated notes');\n      expect(result.dueDate).toBe('2024-02-20');\n    });\n\n    test('should handle update permission errors', async () => {\n      const invoiceId = 1;\n      const updateData = { notes: 'Updated notes' };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 403,\n        json: async () => ({\n          error: 'Insufficient permissions',\n          message: 'You do not have permission to edit this invoice'\n        }),\n      });\n\n      const updateInvoice = async (id: number, data: any) => {\n        const response = await fetch(`/api/invoices/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(data)\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error);\n        }\n\n        return response.json();\n      };\n\n      await expect(updateInvoice(invoiceId, updateData)).rejects.toThrow('Insufficient permissions');\n    });\n  });\n\n  describe('Invoice Deletion API', () => {\n    test('should delete invoice via API call', async () => {\n      const invoiceId = 1;\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          message: 'Invoice deleted successfully',\n          deletedId: invoiceId\n        }),\n      });\n\n      const deleteInvoice = async (id: number) => {\n        const response = await fetch(`/api/invoices/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to delete invoice');\n        }\n\n        return response.json();\n      };\n\n      const result = await deleteInvoice(invoiceId);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices/1', {\n        method: 'DELETE',\n        headers: {\n          'Authorization': 'Bearer mock-token'\n        }\n      });\n\n      expect(result.message).toBe('Invoice deleted successfully');\n      expect(result.deletedId).toBe(invoiceId);\n    });\n\n    test('should handle deletion restrictions', async () => {\n      const invoiceId = 1;\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Cannot delete invoice',\n          message: 'Invoice has payments and cannot be deleted'\n        }),\n      });\n\n      const deleteInvoice = async (id: number) => {\n        const response = await fetch(`/api/invoices/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error);\n        }\n\n        return response.json();\n      };\n\n      await expect(deleteInvoice(invoiceId)).rejects.toThrow('Cannot delete invoice');\n    });\n  });\n\n  describe('Payment Processing API', () => {\n    test('should process payment via API call', async () => {\n      const invoiceId = 1;\n      const paymentData = {\n        amount: 500,\n        paymentMethod: 'cash',\n        paymentDate: '2024-01-15',\n        notes: 'Cash payment'\n      };\n\n      const mockResponse = {\n        id: 1,\n        invoiceId,\n        ...paymentData,\n        status: 'completed',\n        processedAt: '2024-01-15T12:00:00Z'\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const processPayment = async (invoiceId: number, paymentData: any) => {\n        const response = await fetch(`/api/invoices/${invoiceId}/payments`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(paymentData)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to process payment');\n        }\n\n        return response.json();\n      };\n\n      const result = await processPayment(invoiceId, paymentData);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices/1/payments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token'\n        },\n        body: JSON.stringify(paymentData)\n      });\n\n      expect(result.amount).toBe(500);\n      expect(result.status).toBe('completed');\n      expect(result.paymentMethod).toBe('cash');\n    });\n\n    test('should handle payment validation errors', async () => {\n      const invoiceId = 1;\n      const paymentData = {\n        amount: 1500, // Exceeds invoice total\n        paymentMethod: 'cash',\n        paymentDate: '2024-01-15'\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Payment validation failed',\n          details: ['Payment amount exceeds remaining balance']\n        }),\n      });\n\n      const processPayment = async (invoiceId: number, paymentData: any) => {\n        const response = await fetch(`/api/invoices/${invoiceId}/payments`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(paymentData)\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error);\n        }\n\n        return response.json();\n      };\n\n      await expect(processPayment(invoiceId, paymentData)).rejects.toThrow('Payment validation failed');\n    });\n  });\n\n  describe('Invoice Retrieval API', () => {\n    test('should fetch invoice list via API call', async () => {\n      const mockInvoices = [\n        {\n          id: 1,\n          invoiceNumber: 'INV-001',\n          customerId: 1,\n          customerName: 'John Doe',\n          total: 275,\n          status: 'sent',\n          dueDate: '2024-02-15'\n        },\n        {\n          id: 2,\n          invoiceNumber: 'INV-002',\n          customerId: 2,\n          customerName: 'Jane Smith',\n          total: 150,\n          status: 'paid',\n          dueDate: '2024-02-10'\n        }\n      ];\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          invoices: mockInvoices,\n          total: 2,\n          page: 1,\n          limit: 10\n        }),\n      });\n\n      const fetchInvoices = async (params: any = {}) => {\n        const queryString = new URLSearchParams(params).toString();\n        const url = `/api/invoices${queryString ? `?${queryString}` : ''}`;\n        \n        const response = await fetch(url, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch invoices');\n        }\n\n        return response.json();\n      };\n\n      const result = await fetchInvoices({ page: 1, limit: 10 });\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices?page=1&limit=10', {\n        headers: {\n          'Authorization': 'Bearer mock-token'\n        }\n      });\n\n      expect(result.invoices).toHaveLength(2);\n      expect(result.total).toBe(2);\n    });\n\n    test('should fetch single invoice via API call', async () => {\n      const invoiceId = 1;\n      const mockInvoice = {\n        id: invoiceId,\n        invoiceNumber: 'INV-001',\n        customerId: 1,\n        customerName: 'John Doe',\n        items: [\n          { productId: 1, productName: 'Product A', quantity: 2, unitPrice: 100 },\n          { productId: 2, productName: 'Product B', quantity: 1, unitPrice: 50 }\n        ],\n        subtotal: 250,\n        taxAmount: 25,\n        total: 275,\n        status: 'sent',\n        payments: [\n          { id: 1, amount: 100, paymentMethod: 'cash', paymentDate: '2024-01-10' }\n        ]\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockInvoice,\n      });\n\n      const fetchInvoice = async (id: number) => {\n        const response = await fetch(`/api/invoices/${id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch invoice');\n        }\n\n        return response.json();\n      };\n\n      const result = await fetchInvoice(invoiceId);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices/1', {\n        headers: {\n          'Authorization': 'Bearer mock-token'\n        }\n      });\n\n      expect(result.id).toBe(invoiceId);\n      expect(result.items).toHaveLength(2);\n      expect(result.payments).toHaveLength(1);\n    });\n  });\n\n  describe('Invoice Status Updates API', () => {\n    test('should update invoice status via API call', async () => {\n      const invoiceId = 1;\n      const statusData = {\n        status: 'sent',\n        sentDate: '2024-01-15T10:00:00Z'\n      };\n\n      const mockResponse = {\n        id: invoiceId,\n        status: 'sent',\n        sentDate: '2024-01-15T10:00:00Z',\n        updatedAt: '2024-01-15T10:00:00Z'\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const updateInvoiceStatus = async (id: number, statusData: any) => {\n        const response = await fetch(`/api/invoices/${id}/status`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(statusData)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update invoice status');\n        }\n\n        return response.json();\n      };\n\n      const result = await updateInvoiceStatus(invoiceId, statusData);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/invoices/1/status', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer mock-token'\n        },\n        body: JSON.stringify(statusData)\n      });\n\n      expect(result.status).toBe('sent');\n      expect(result.sentDate).toBe('2024-01-15T10:00:00Z');\n    });\n\n    test('should handle invalid status transitions', async () => {\n      const invoiceId = 1;\n      const statusData = {\n        status: 'draft' // Invalid transition from paid to draft\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({\n          error: 'Invalid status transition',\n          message: 'Cannot change status from paid to draft'\n        }),\n      });\n\n      const updateInvoiceStatus = async (id: number, statusData: any) => {\n        const response = await fetch(`/api/invoices/${id}/status`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          },\n          body: JSON.stringify(statusData)\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error);\n        }\n\n        return response.json();\n      };\n\n      await expect(updateInvoiceStatus(invoiceId, statusData)).rejects.toThrow('Invalid status transition');\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","mockFetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","test","mockInvoiceData","customerId","items","productId","quantity","unitPrice","dueDate","notes","mockResponse","invoiceNumber","status","subtotal","taxAmount","total","createdAt","mockResolvedValueOnce","ok","json","createInvoice","invoiceData","response","method","headers","localStorage","body","JSON","stringify","Error","result","expect","toHaveBeenCalledWith","toBe","error","details","errorData","rejects","toThrow","invoiceId","updateData","updatedAt","updateInvoice","data","message","deletedId","deleteInvoice","paymentData","amount","paymentMethod","paymentDate","processedAt","processPayment","mockInvoices","customerName","invoices","page","limit","fetchInvoices","params","queryString","URLSearchParams","toString","url","toHaveLength","mockInvoice","productName","payments","fetchInvoice","statusData","sentDate","updateInvoiceStatus"],"mappings":"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"}