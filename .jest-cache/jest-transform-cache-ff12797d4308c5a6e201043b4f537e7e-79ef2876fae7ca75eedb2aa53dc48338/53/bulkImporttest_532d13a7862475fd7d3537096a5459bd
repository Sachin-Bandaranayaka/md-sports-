88e84aa3c4b80a0f2172f10f2e5b7db1
"use strict";
// Mock next/navigation
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            })
    }));
// Mock MainLayout
jest.mock("@/components/layout/MainLayout", ()=>{
    return function MockMainLayout({ children }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "main-layout",
            children: children
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../../src/app/inventory/bulk-import/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe("BulkImportPage Component", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock successful shop names fetch
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            shopNames: [
                                "MBA",
                                "Zimantra"
                            ]
                        })
                });
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true
                    })
            });
        });
    });
    it("should render the bulk import page correctly", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        expect(_react1.screen.getByText("Bulk Import Products")).toBeInTheDocument();
        expect(_react1.screen.getByText("Upload an Excel file to import multiple products at once")).toBeInTheDocument();
        expect(_react1.screen.getByText("Download Template")).toBeInTheDocument();
        expect(_react1.screen.getByText("Drop your Excel file here, or click to browse")).toBeInTheDocument();
        // Wait for shop names to load
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Available Shop Names:")).toBeInTheDocument();
            expect(_react1.screen.getByText("MBA, Zimantra")).toBeInTheDocument();
        });
    });
    it("should handle template download", async ()=>{
        // Mock window.open
        const mockOpen = jest.fn();
        Object.defineProperty(window, "open", {
            value: mockOpen,
            writable: true
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const downloadButton = _react1.screen.getByText("Download Template");
        _react1.fireEvent.click(downloadButton);
        expect(mockOpen).toHaveBeenCalledWith("/api/products/template", "_blank");
    });
    it("should handle file selection via input", async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        const browseButton = _react1.screen.getByText("Browse Files");
        _react1.fireEvent.click(browseButton);
        const fileInput = _react1.screen.getByRole("button", {
            hidden: true
        }).parentElement?.querySelector('input[type="file"]');
        if (fileInput) {
            await user.upload(fileInput, file);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("products.xlsx")).toBeInTheDocument();
                expect(_react1.screen.getByText("Upload & Import")).toBeInTheDocument();
                expect(_react1.screen.getByText("Clear")).toBeInTheDocument();
            });
        }
    });
    it("should handle drag and drop file selection", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            // Simulate drag enter
            _react1.fireEvent.dragEnter(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
            // Simulate drop
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("products.xlsx")).toBeInTheDocument();
            });
        }
    });
    it("should handle file upload successfully", async ()=>{
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            shopNames: [
                                "MBA",
                                "Zimantra"
                            ]
                        })
                });
            }
            if (url === "/api/products/bulk-import") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            message: "5 out of 5 products imported successfully!",
                            details: [
                                {
                                    row: 2,
                                    success: true,
                                    productName: "Product 1",
                                    message: "Product imported successfully."
                                },
                                {
                                    row: 3,
                                    success: true,
                                    productName: "Product 2",
                                    message: "Product imported successfully."
                                }
                            ]
                        })
                });
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({})
            });
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Add file
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
        }
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Upload & Import")).toBeInTheDocument();
        });
        // Click upload button
        const uploadButton = _react1.screen.getByText("Upload & Import");
        _react1.fireEvent.click(uploadButton);
        // Wait for upload to complete
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Import Results")).toBeInTheDocument();
            expect(_react1.screen.getByText("5 out of 5 products imported successfully!")).toBeInTheDocument();
            expect(_react1.screen.getByText("Detailed Results:")).toBeInTheDocument();
        });
    });
    it("should handle upload errors", async ()=>{
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            shopNames: [
                                "MBA",
                                "Zimantra"
                            ]
                        })
                });
            }
            if (url === "/api/products/bulk-import") {
                return Promise.resolve({
                    ok: false,
                    json: ()=>Promise.resolve({
                            success: false,
                            message: "0 out of 3 products imported successfully. Please check the details for errors.",
                            details: [
                                {
                                    row: 2,
                                    success: false,
                                    productName: "Invalid Product",
                                    message: "Product Name is required."
                                },
                                {
                                    row: 3,
                                    success: false,
                                    productName: "Another Invalid",
                                    message: "Shop Name is required when Initial Quantity is greater than 0."
                                }
                            ]
                        })
                });
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({})
            });
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Add file and upload
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
        }
        await (0, _react1.waitFor)(()=>{
            const uploadButton = _react1.screen.getByText("Upload & Import");
            _react1.fireEvent.click(uploadButton);
        });
        // Wait for error results
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Import Results")).toBeInTheDocument();
            expect(_react1.screen.getByText("0 out of 3 products imported successfully. Please check the details for errors.")).toBeInTheDocument();
            expect(_react1.screen.getByText("Product Name is required.")).toBeInTheDocument();
            expect(_react1.screen.getByText("Shop Name is required when Initial Quantity is greater than 0.")).toBeInTheDocument();
        });
    });
    it("should handle network errors during upload", async ()=>{
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            shopNames: [
                                "MBA",
                                "Zimantra"
                            ]
                        })
                });
            }
            if (url === "/api/products/bulk-import") {
                return Promise.reject(new Error("Network error"));
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({})
            });
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Add file and upload
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
        }
        await (0, _react1.waitFor)(()=>{
            const uploadButton = _react1.screen.getByText("Upload & Import");
            _react1.fireEvent.click(uploadButton);
        });
        // Wait for error message
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Upload failed. Please try again.")).toBeInTheDocument();
        });
    });
    it("should clear file when clear button is clicked", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Add file
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
        }
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("products.xlsx")).toBeInTheDocument();
        });
        // Click clear button
        const clearButton = _react1.screen.getByText("Clear");
        _react1.fireEvent.click(clearButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("Drop your Excel file here, or click to browse")).toBeInTheDocument();
            expect(_react1.screen.queryByText("products.xlsx")).not.toBeInTheDocument();
        });
    });
    it("should display loading state during upload", async ()=>{
        let resolveUpload;
        const uploadPromise = new Promise((resolve)=>{
            resolveUpload = resolve;
        });
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            shopNames: [
                                "MBA",
                                "Zimantra"
                            ]
                        })
                });
            }
            if (url === "/api/products/bulk-import") {
                return uploadPromise.then(()=>({
                        ok: true,
                        json: ()=>Promise.resolve({
                                success: true,
                                message: "Upload successful",
                                details: []
                            })
                    }));
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({})
            });
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const file = new File([
            "test content"
        ], "products.xlsx", {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Add file
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            _react1.fireEvent.drop(dropZone, {
                dataTransfer: {
                    files: [
                        file
                    ]
                }
            });
        }
        await (0, _react1.waitFor)(()=>{
            const uploadButton = _react1.screen.getByText("Upload & Import");
            _react1.fireEvent.click(uploadButton);
        });
        // Check loading state
        expect(_react1.screen.getByText("Uploading...")).toBeInTheDocument();
        // Resolve upload
        resolveUpload({});
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText("Uploading...")).not.toBeInTheDocument();
        });
    });
    it("should handle shop names fetch failure", async ()=>{
        mockFetch.mockImplementation((url)=>{
            if (url === "/api/shops/names") {
                return Promise.reject(new Error("Failed to fetch shops"));
            }
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({})
            });
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Shop names section should not appear if fetch fails
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText("Available Shop Names:")).not.toBeInTheDocument();
        });
    });
    it("should show drag active state", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const dropZone = _react1.screen.getByText("Drop your Excel file here, or click to browse").closest("div");
        if (dropZone) {
            // Simulate drag enter
            _react1.fireEvent.dragEnter(dropZone);
            // Check for drag active styling (border-blue-400 bg-blue-50)
            expect(dropZone).toHaveClass("border-blue-400", "bg-blue-50");
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvY29tcG9uZW50cy9idWxrSW1wb3J0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuaW1wb3J0IEJ1bGtJbXBvcnRQYWdlIGZyb20gJ0AvYXBwL2ludmVudG9yeS9idWxrLWltcG9ydC9wYWdlJztcblxuLy8gTW9jayBuZXh0L25hdmlnYXRpb25cbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlUm91dGVyOiAoKSA9PiAoe1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlOiBqZXN0LmZuKCksXG4gICAgYmFjazogamVzdC5mbigpLFxuICAgIGZvcndhcmQ6IGplc3QuZm4oKSxcbiAgICByZWZyZXNoOiBqZXN0LmZuKCksXG4gICAgcHJlZmV0Y2g6IGplc3QuZm4oKSxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgTWFpbkxheW91dFxuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvbGF5b3V0L01haW5MYXlvdXQnLCAoKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiBNb2NrTWFpbkxheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gICAgcmV0dXJuIDxkaXYgZGF0YS10ZXN0aWQ9XCJtYWluLWxheW91dFwiPntjaGlsZHJlbn08L2Rpdj47XG4gIH07XG59KTtcblxuLy8gTW9jayBmZXRjaCBnbG9iYWxseVxuY29uc3QgbW9ja0ZldGNoID0gamVzdC5mbigpO1xuZ2xvYmFsLmZldGNoID0gbW9ja0ZldGNoO1xuXG5kZXNjcmliZSgnQnVsa0ltcG9ydFBhZ2UgQ29tcG9uZW50JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBcbiAgICAvLyBNb2NrIHN1Y2Nlc3NmdWwgc2hvcCBuYW1lcyBmZXRjaFxuICAgIG1vY2tGZXRjaC5tb2NrSW1wbGVtZW50YXRpb24oKHVybCkgPT4ge1xuICAgICAgaWYgKHVybCA9PT0gJy9hcGkvc2hvcHMvbmFtZXMnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2hvcE5hbWVzOiBbJ01CQScsICdaaW1hbnRyYSddLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aGUgYnVsayBpbXBvcnQgcGFnZSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxCdWxrSW1wb3J0UGFnZSAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQnVsayBJbXBvcnQgUHJvZHVjdHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkIGFuIEV4Y2VsIGZpbGUgdG8gaW1wb3J0IG11bHRpcGxlIHByb2R1Y3RzIGF0IG9uY2UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnRG93bmxvYWQgVGVtcGxhdGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnRHJvcCB5b3VyIEV4Y2VsIGZpbGUgaGVyZSwgb3IgY2xpY2sgdG8gYnJvd3NlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgXG4gICAgLy8gV2FpdCBmb3Igc2hvcCBuYW1lcyB0byBsb2FkXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQXZhaWxhYmxlIFNob3AgTmFtZXM6JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTUJBLCBaaW1hbnRyYScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSB0ZW1wbGF0ZSBkb3dubG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBNb2NrIHdpbmRvdy5vcGVuXG4gICAgY29uc3QgbW9ja09wZW4gPSBqZXN0LmZuKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ29wZW4nLCB7XG4gICAgICB2YWx1ZTogbW9ja09wZW4sXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHJlbmRlcig8QnVsa0ltcG9ydFBhZ2UgLz4pO1xuXG4gICAgY29uc3QgZG93bmxvYWRCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdEb3dubG9hZCBUZW1wbGF0ZScpO1xuICAgIGZpcmVFdmVudC5jbGljayhkb3dubG9hZEJ1dHRvbik7XG5cbiAgICBleHBlY3QobW9ja09wZW4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3Byb2R1Y3RzL3RlbXBsYXRlJywgJ19ibGFuaycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBmaWxlIHNlbGVjdGlvbiB2aWEgaW5wdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuICAgIHJlbmRlcig8QnVsa0ltcG9ydFBhZ2UgLz4pO1xuXG4gICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICdwcm9kdWN0cy54bHN4Jywge1xuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGJyb3dzZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ0Jyb3dzZSBGaWxlcycpO1xuICAgIGZpcmVFdmVudC5jbGljayhicm93c2VCdXR0b24pO1xuXG4gICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBoaWRkZW46IHRydWUgfSkucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImZpbGVcIl0nKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgIGF3YWl0IHVzZXIudXBsb2FkKGZpbGVJbnB1dCwgZmlsZSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgncHJvZHVjdHMueGxzeCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkICYgSW1wb3J0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDbGVhcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBkcmFnIGFuZCBkcm9wIGZpbGUgc2VsZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8QnVsa0ltcG9ydFBhZ2UgLz4pO1xuXG4gICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICdwcm9kdWN0cy54bHN4Jywge1xuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGRyb3Bab25lID0gc2NyZWVuLmdldEJ5VGV4dCgnRHJvcCB5b3VyIEV4Y2VsIGZpbGUgaGVyZSwgb3IgY2xpY2sgdG8gYnJvd3NlJykuY2xvc2VzdCgnZGl2Jyk7XG4gICAgXG4gICAgaWYgKGRyb3Bab25lKSB7XG4gICAgICAvLyBTaW11bGF0ZSBkcmFnIGVudGVyXG4gICAgICBmaXJlRXZlbnQuZHJhZ0VudGVyKGRyb3Bab25lLCB7XG4gICAgICAgIGRhdGFUcmFuc2Zlcjoge1xuICAgICAgICAgIGZpbGVzOiBbZmlsZV0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gU2ltdWxhdGUgZHJvcFxuICAgICAgZmlyZUV2ZW50LmRyb3AoZHJvcFpvbmUsIHtcbiAgICAgICAgZGF0YVRyYW5zZmVyOiB7XG4gICAgICAgICAgZmlsZXM6IFtmaWxlXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3Byb2R1Y3RzLnhsc3gnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZmlsZSB1cGxvYWQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tGZXRjaC5tb2NrSW1wbGVtZW50YXRpb24oKHVybCkgPT4ge1xuICAgICAgaWYgKHVybCA9PT0gJy9hcGkvc2hvcHMvbmFtZXMnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2hvcE5hbWVzOiBbJ01CQScsICdaaW1hbnRyYSddLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh1cmwgPT09ICcvYXBpL3Byb2R1Y3RzL2J1bGstaW1wb3J0Jykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICc1IG91dCBvZiA1IHByb2R1Y3RzIGltcG9ydGVkIHN1Y2Nlc3NmdWxseSEnLFxuICAgICAgICAgICAgZGV0YWlsczogW1xuICAgICAgICAgICAgICB7IHJvdzogMiwgc3VjY2VzczogdHJ1ZSwgcHJvZHVjdE5hbWU6ICdQcm9kdWN0IDEnLCBtZXNzYWdlOiAnUHJvZHVjdCBpbXBvcnRlZCBzdWNjZXNzZnVsbHkuJyB9LFxuICAgICAgICAgICAgICB7IHJvdzogMywgc3VjY2VzczogdHJ1ZSwgcHJvZHVjdE5hbWU6ICdQcm9kdWN0IDInLCBtZXNzYWdlOiAnUHJvZHVjdCBpbXBvcnRlZCBzdWNjZXNzZnVsbHkuJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgb2s6IHRydWUsIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7fSkgfSk7XG4gICAgfSk7XG5cbiAgICByZW5kZXIoPEJ1bGtJbXBvcnRQYWdlIC8+KTtcblxuICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbJ3Rlc3QgY29udGVudCddLCAncHJvZHVjdHMueGxzeCcsIHtcbiAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsXG4gICAgfSk7XG5cbiAgICAvLyBBZGQgZmlsZVxuICAgIGNvbnN0IGRyb3Bab25lID0gc2NyZWVuLmdldEJ5VGV4dCgnRHJvcCB5b3VyIEV4Y2VsIGZpbGUgaGVyZSwgb3IgY2xpY2sgdG8gYnJvd3NlJykuY2xvc2VzdCgnZGl2Jyk7XG4gICAgaWYgKGRyb3Bab25lKSB7XG4gICAgICBmaXJlRXZlbnQuZHJvcChkcm9wWm9uZSwge1xuICAgICAgICBkYXRhVHJhbnNmZXI6IHsgZmlsZXM6IFtmaWxlXSB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkICYgSW1wb3J0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGljayB1cGxvYWQgYnV0dG9uXG4gICAgY29uc3QgdXBsb2FkQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkICYgSW1wb3J0Jyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKHVwbG9hZEJ1dHRvbik7XG5cbiAgICAvLyBXYWl0IGZvciB1cGxvYWQgdG8gY29tcGxldGVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdJbXBvcnQgUmVzdWx0cycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzUgb3V0IG9mIDUgcHJvZHVjdHMgaW1wb3J0ZWQgc3VjY2Vzc2Z1bGx5IScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0RldGFpbGVkIFJlc3VsdHM6JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHVwbG9hZCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0ZldGNoLm1vY2tJbXBsZW1lbnRhdGlvbigodXJsKSA9PiB7XG4gICAgICBpZiAodXJsID09PSAnL2FwaS9zaG9wcy9uYW1lcycpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBzaG9wTmFtZXM6IFsnTUJBJywgJ1ppbWFudHJhJ10sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHVybCA9PT0gJy9hcGkvcHJvZHVjdHMvYnVsay1pbXBvcnQnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnMCBvdXQgb2YgMyBwcm9kdWN0cyBpbXBvcnRlZCBzdWNjZXNzZnVsbHkuIFBsZWFzZSBjaGVjayB0aGUgZGV0YWlscyBmb3IgZXJyb3JzLicsXG4gICAgICAgICAgICBkZXRhaWxzOiBbXG4gICAgICAgICAgICAgIHsgcm93OiAyLCBzdWNjZXNzOiBmYWxzZSwgcHJvZHVjdE5hbWU6ICdJbnZhbGlkIFByb2R1Y3QnLCBtZXNzYWdlOiAnUHJvZHVjdCBOYW1lIGlzIHJlcXVpcmVkLicgfSxcbiAgICAgICAgICAgICAgeyByb3c6IDMsIHN1Y2Nlc3M6IGZhbHNlLCBwcm9kdWN0TmFtZTogJ0Fub3RoZXIgSW52YWxpZCcsIG1lc3NhZ2U6ICdTaG9wIE5hbWUgaXMgcmVxdWlyZWQgd2hlbiBJbml0aWFsIFF1YW50aXR5IGlzIGdyZWF0ZXIgdGhhbiAwLicgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IG9rOiB0cnVlLCBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe30pIH0pO1xuICAgIH0pO1xuXG4gICAgcmVuZGVyKDxCdWxrSW1wb3J0UGFnZSAvPik7XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Byb2R1Y3RzLnhsc3gnLCB7XG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQnLFxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGZpbGUgYW5kIHVwbG9hZFxuICAgIGNvbnN0IGRyb3Bab25lID0gc2NyZWVuLmdldEJ5VGV4dCgnRHJvcCB5b3VyIEV4Y2VsIGZpbGUgaGVyZSwgb3IgY2xpY2sgdG8gYnJvd3NlJykuY2xvc2VzdCgnZGl2Jyk7XG4gICAgaWYgKGRyb3Bab25lKSB7XG4gICAgICBmaXJlRXZlbnQuZHJvcChkcm9wWm9uZSwgeyBkYXRhVHJhbnNmZXI6IHsgZmlsZXM6IFtmaWxlXSB9IH0pO1xuICAgIH1cblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgY29uc3QgdXBsb2FkQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkICYgSW1wb3J0Jyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sodXBsb2FkQnV0dG9uKTtcbiAgICB9KTtcblxuICAgIC8vIFdhaXQgZm9yIGVycm9yIHJlc3VsdHNcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdJbXBvcnQgUmVzdWx0cycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzAgb3V0IG9mIDMgcHJvZHVjdHMgaW1wb3J0ZWQgc3VjY2Vzc2Z1bGx5LiBQbGVhc2UgY2hlY2sgdGhlIGRldGFpbHMgZm9yIGVycm9ycy4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQcm9kdWN0IE5hbWUgaXMgcmVxdWlyZWQuJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2hvcCBOYW1lIGlzIHJlcXVpcmVkIHdoZW4gSW5pdGlhbCBRdWFudGl0eSBpcyBncmVhdGVyIHRoYW4gMC4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBlcnJvcnMgZHVyaW5nIHVwbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrRmV0Y2gubW9ja0ltcGxlbWVudGF0aW9uKCh1cmwpID0+IHtcbiAgICAgIGlmICh1cmwgPT09ICcvYXBpL3Nob3BzL25hbWVzJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIHNob3BOYW1lczogWydNQkEnLCAnWmltYW50cmEnXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodXJsID09PSAnL2FwaS9wcm9kdWN0cy9idWxrLWltcG9ydCcpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBvazogdHJ1ZSwganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSB9KTtcbiAgICB9KTtcblxuICAgIHJlbmRlcig8QnVsa0ltcG9ydFBhZ2UgLz4pO1xuXG4gICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICdwcm9kdWN0cy54bHN4Jywge1xuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICB9KTtcblxuICAgIC8vIEFkZCBmaWxlIGFuZCB1cGxvYWRcbiAgICBjb25zdCBkcm9wWm9uZSA9IHNjcmVlbi5nZXRCeVRleHQoJ0Ryb3AgeW91ciBFeGNlbCBmaWxlIGhlcmUsIG9yIGNsaWNrIHRvIGJyb3dzZScpLmNsb3Nlc3QoJ2RpdicpO1xuICAgIGlmIChkcm9wWm9uZSkge1xuICAgICAgZmlyZUV2ZW50LmRyb3AoZHJvcFpvbmUsIHsgZGF0YVRyYW5zZmVyOiB7IGZpbGVzOiBbZmlsZV0gfSB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGNvbnN0IHVwbG9hZEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ1VwbG9hZCAmIEltcG9ydCcpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHVwbG9hZEJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICAvLyBXYWl0IGZvciBlcnJvciBtZXNzYWdlXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVXBsb2FkIGZhaWxlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjbGVhciBmaWxlIHdoZW4gY2xlYXIgYnV0dG9uIGlzIGNsaWNrZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxCdWxrSW1wb3J0UGFnZSAvPik7XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Byb2R1Y3RzLnhsc3gnLCB7XG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQnLFxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGZpbGVcbiAgICBjb25zdCBkcm9wWm9uZSA9IHNjcmVlbi5nZXRCeVRleHQoJ0Ryb3AgeW91ciBFeGNlbCBmaWxlIGhlcmUsIG9yIGNsaWNrIHRvIGJyb3dzZScpLmNsb3Nlc3QoJ2RpdicpO1xuICAgIGlmIChkcm9wWm9uZSkge1xuICAgICAgZmlyZUV2ZW50LmRyb3AoZHJvcFpvbmUsIHsgZGF0YVRyYW5zZmVyOiB7IGZpbGVzOiBbZmlsZV0gfSB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdwcm9kdWN0cy54bHN4JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGljayBjbGVhciBidXR0b25cbiAgICBjb25zdCBjbGVhckJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ0NsZWFyJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGNsZWFyQnV0dG9uKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0Ryb3AgeW91ciBFeGNlbCBmaWxlIGhlcmUsIG9yIGNsaWNrIHRvIGJyb3dzZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgncHJvZHVjdHMueGxzeCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IGxvYWRpbmcgc3RhdGUgZHVyaW5nIHVwbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzb2x2ZVVwbG9hZDogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gICAgY29uc3QgdXBsb2FkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICByZXNvbHZlVXBsb2FkID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIG1vY2tGZXRjaC5tb2NrSW1wbGVtZW50YXRpb24oKHVybCkgPT4ge1xuICAgICAgaWYgKHVybCA9PT0gJy9hcGkvc2hvcHMvbmFtZXMnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2hvcE5hbWVzOiBbJ01CQScsICdaaW1hbnRyYSddLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh1cmwgPT09ICcvYXBpL3Byb2R1Y3RzL2J1bGstaW1wb3J0Jykge1xuICAgICAgICByZXR1cm4gdXBsb2FkUHJvbWlzZS50aGVuKCgpID0+ICh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVXBsb2FkIHN1Y2Nlc3NmdWwnLFxuICAgICAgICAgICAgZGV0YWlsczogW10sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBvazogdHJ1ZSwganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSB9KTtcbiAgICB9KTtcblxuICAgIHJlbmRlcig8QnVsa0ltcG9ydFBhZ2UgLz4pO1xuXG4gICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICdwcm9kdWN0cy54bHN4Jywge1xuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICB9KTtcblxuICAgIC8vIEFkZCBmaWxlXG4gICAgY29uc3QgZHJvcFpvbmUgPSBzY3JlZW4uZ2V0QnlUZXh0KCdEcm9wIHlvdXIgRXhjZWwgZmlsZSBoZXJlLCBvciBjbGljayB0byBicm93c2UnKS5jbG9zZXN0KCdkaXYnKTtcbiAgICBpZiAoZHJvcFpvbmUpIHtcbiAgICAgIGZpcmVFdmVudC5kcm9wKGRyb3Bab25lLCB7IGRhdGFUcmFuc2ZlcjogeyBmaWxlczogW2ZpbGVdIH0gfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBjb25zdCB1cGxvYWRCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdVcGxvYWQgJiBJbXBvcnQnKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh1cGxvYWRCdXR0b24pO1xuICAgIH0pO1xuXG4gICAgLy8gQ2hlY2sgbG9hZGluZyBzdGF0ZVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdVcGxvYWRpbmcuLi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFJlc29sdmUgdXBsb2FkXG4gICAgcmVzb2x2ZVVwbG9hZCEoe30pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdVcGxvYWRpbmcuLi4nKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHNob3AgbmFtZXMgZmV0Y2ggZmFpbHVyZScsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrRmV0Y2gubW9ja0ltcGxlbWVudGF0aW9uKCh1cmwpID0+IHtcbiAgICAgIGlmICh1cmwgPT09ICcvYXBpL3Nob3BzL25hbWVzJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggc2hvcHMnKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgb2s6IHRydWUsIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7fSkgfSk7XG4gICAgfSk7XG5cbiAgICByZW5kZXIoPEJ1bGtJbXBvcnRQYWdlIC8+KTtcblxuICAgIC8vIFNob3AgbmFtZXMgc2VjdGlvbiBzaG91bGQgbm90IGFwcGVhciBpZiBmZXRjaCBmYWlsc1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnQXZhaWxhYmxlIFNob3AgTmFtZXM6JykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNob3cgZHJhZyBhY3RpdmUgc3RhdGUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxCdWxrSW1wb3J0UGFnZSAvPik7XG5cbiAgICBjb25zdCBkcm9wWm9uZSA9IHNjcmVlbi5nZXRCeVRleHQoJ0Ryb3AgeW91ciBFeGNlbCBmaWxlIGhlcmUsIG9yIGNsaWNrIHRvIGJyb3dzZScpLmNsb3Nlc3QoJ2RpdicpO1xuICAgIFxuICAgIGlmIChkcm9wWm9uZSkge1xuICAgICAgLy8gU2ltdWxhdGUgZHJhZyBlbnRlclxuICAgICAgZmlyZUV2ZW50LmRyYWdFbnRlcihkcm9wWm9uZSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciBkcmFnIGFjdGl2ZSBzdHlsaW5nIChib3JkZXItYmx1ZS00MDAgYmctYmx1ZS01MClcbiAgICAgIGV4cGVjdChkcm9wWm9uZSkudG9IYXZlQ2xhc3MoJ2JvcmRlci1ibHVlLTQwMCcsICdiZy1ibHVlLTUwJyk7XG4gICAgfVxuICB9KTtcbn0pOyAiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJwdXNoIiwiZm4iLCJyZXBsYWNlIiwiYmFjayIsImZvcndhcmQiLCJyZWZyZXNoIiwicHJlZmV0Y2giLCJNb2NrTWFpbkxheW91dCIsImNoaWxkcmVuIiwiZGl2IiwiZGF0YS10ZXN0aWQiLCJtb2NrRmV0Y2giLCJnbG9iYWwiLCJmZXRjaCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9rIiwianNvbiIsInN1Y2Nlc3MiLCJzaG9wTmFtZXMiLCJpdCIsInJlbmRlciIsIkJ1bGtJbXBvcnRQYWdlIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ3YWl0Rm9yIiwibW9ja09wZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsInZhbHVlIiwid3JpdGFibGUiLCJkb3dubG9hZEJ1dHRvbiIsImZpcmVFdmVudCIsImNsaWNrIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ1c2VyIiwidXNlckV2ZW50Iiwic2V0dXAiLCJmaWxlIiwiRmlsZSIsInR5cGUiLCJicm93c2VCdXR0b24iLCJmaWxlSW5wdXQiLCJnZXRCeVJvbGUiLCJoaWRkZW4iLCJwYXJlbnRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInVwbG9hZCIsImRyb3Bab25lIiwiY2xvc2VzdCIsImRyYWdFbnRlciIsImRhdGFUcmFuc2ZlciIsImZpbGVzIiwiZHJvcCIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwicm93IiwicHJvZHVjdE5hbWUiLCJ1cGxvYWRCdXR0b24iLCJyZWplY3QiLCJFcnJvciIsImNsZWFyQnV0dG9uIiwicXVlcnlCeVRleHQiLCJub3QiLCJyZXNvbHZlVXBsb2FkIiwidXBsb2FkUHJvbWlzZSIsInRoZW4iLCJ0b0hhdmVDbGFzcyJdLCJtYXBwaW5ncyI6IjtBQU1BLHVCQUF1QjtBQUN2QkEsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFPLENBQUE7UUFDbENDLFdBQVcsSUFBTyxDQUFBO2dCQUNoQkMsTUFBTUgsS0FBS0ksRUFBRTtnQkFDYkMsU0FBU0wsS0FBS0ksRUFBRTtnQkFDaEJFLE1BQU1OLEtBQUtJLEVBQUU7Z0JBQ2JHLFNBQVNQLEtBQUtJLEVBQUU7Z0JBQ2hCSSxTQUFTUixLQUFLSSxFQUFFO2dCQUNoQkssVUFBVVQsS0FBS0ksRUFBRTtZQUNuQixDQUFBO0lBQ0YsQ0FBQTtBQUVBLGtCQUFrQjtBQUNsQkosS0FBS0MsSUFBSSxDQUFDLGtDQUFrQztJQUMxQyxPQUFPLFNBQVNTLGVBQWUsRUFBRUMsUUFBUSxFQUFpQztRQUN4RSxxQkFBTyxxQkFBQ0M7WUFBSUMsZUFBWTtzQkFBZUY7O0lBQ3pDO0FBQ0Y7Ozs7OzhEQXZCa0I7d0JBQ2lDO2tFQUM3QjtRQUNmOzZEQUNvQjs7Ozs7O0FBcUIzQixzQkFBc0I7QUFDdEIsTUFBTUcsWUFBWWQsS0FBS0ksRUFBRTtBQUN6QlcsT0FBT0MsS0FBSyxHQUFHRjtBQUVmRyxTQUFTLDRCQUE0QjtJQUNuQ0MsV0FBVztRQUNUbEIsS0FBS21CLGFBQWE7UUFFbEIsbUNBQW1DO1FBQ25DTCxVQUFVTSxrQkFBa0IsQ0FBQyxDQUFDQztZQUM1QixJQUFJQSxRQUFRLG9CQUFvQjtnQkFDOUIsT0FBT0MsUUFBUUMsT0FBTyxDQUFDO29CQUNyQkMsSUFBSTtvQkFDSkMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUM7NEJBQzFCRyxTQUFTOzRCQUNUQyxXQUFXO2dDQUFDO2dDQUFPOzZCQUFXO3dCQUNoQztnQkFDRjtZQUNGO1lBQ0EsT0FBT0wsUUFBUUMsT0FBTyxDQUFDO2dCQUNyQkMsSUFBSTtnQkFDSkMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUM7d0JBQUVHLFNBQVM7b0JBQUs7WUFDOUM7UUFDRjtJQUNGO0lBRUFFLEdBQUcsZ0RBQWdEO1FBQ2pEQyxJQUFBQSxjQUFNLGdCQUFDLHFCQUFDQyxhQUFjO1FBRXRCQyxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyx5QkFBeUJDLGlCQUFpQjtRQUNsRUgsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsNkRBQTZEQyxpQkFBaUI7UUFDdEdILE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLHNCQUFzQkMsaUJBQWlCO1FBQy9ESCxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxrREFBa0RDLGlCQUFpQjtRQUUzRiw4QkFBOEI7UUFDOUIsTUFBTUMsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLDBCQUEwQkMsaUJBQWlCO1lBQ25FSCxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxrQkFBa0JDLGlCQUFpQjtRQUM3RDtJQUNGO0lBRUFOLEdBQUcsbUNBQW1DO1FBQ3BDLG1CQUFtQjtRQUNuQixNQUFNUSxXQUFXcEMsS0FBS0ksRUFBRTtRQUN4QmlDLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxRQUFRO1lBQ3BDQyxPQUFPSjtZQUNQSyxVQUFVO1FBQ1o7UUFFQVosSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0MsYUFBYztRQUV0QixNQUFNWSxpQkFBaUJWLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDO1FBQ3hDVSxpQkFBUyxDQUFDQyxLQUFLLENBQUNGO1FBRWhCWCxPQUFPSyxVQUFVUyxvQkFBb0IsQ0FBQywwQkFBMEI7SUFDbEU7SUFFQWpCLEdBQUcsMENBQTBDO1FBQzNDLE1BQU1rQixPQUFPQyxrQkFBUyxDQUFDQyxLQUFLO1FBQzVCbkIsSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0MsYUFBYztRQUV0QixNQUFNbUIsT0FBTyxJQUFJQyxLQUFLO1lBQUM7U0FBZSxFQUFFLGlCQUFpQjtZQUN2REMsTUFBTTtRQUNSO1FBRUEsTUFBTUMsZUFBZXBCLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDO1FBQ3RDVSxpQkFBUyxDQUFDQyxLQUFLLENBQUNRO1FBRWhCLE1BQU1DLFlBQVlyQixjQUFNLENBQUNzQixTQUFTLENBQUMsVUFBVTtZQUFFQyxRQUFRO1FBQUssR0FBR0MsYUFBYSxFQUFFQyxjQUFjO1FBQzVGLElBQUlKLFdBQVc7WUFDYixNQUFNUCxLQUFLWSxNQUFNLENBQUNMLFdBQVdKO1lBRTdCLE1BQU1kLElBQUFBLGVBQU8sRUFBQztnQkFDWkosT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0JBQWtCQyxpQkFBaUI7Z0JBQzNESCxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxvQkFBb0JDLGlCQUFpQjtnQkFDN0RILE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLFVBQVVDLGlCQUFpQjtZQUNyRDtRQUNGO0lBQ0Y7SUFFQU4sR0FBRyw4Q0FBOEM7UUFDL0NDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLE1BQU1RLFdBQVczQixjQUFNLENBQUNDLFNBQVMsQ0FBQyxpREFBaUQyQixPQUFPLENBQUM7UUFFM0YsSUFBSUQsVUFBVTtZQUNaLHNCQUFzQjtZQUN0QmhCLGlCQUFTLENBQUNrQixTQUFTLENBQUNGLFVBQVU7Z0JBQzVCRyxjQUFjO29CQUNaQyxPQUFPO3dCQUFDZDtxQkFBSztnQkFDZjtZQUNGO1lBRUEsZ0JBQWdCO1lBQ2hCTixpQkFBUyxDQUFDcUIsSUFBSSxDQUFDTCxVQUFVO2dCQUN2QkcsY0FBYztvQkFDWkMsT0FBTzt3QkFBQ2Q7cUJBQUs7Z0JBQ2Y7WUFDRjtZQUVBLE1BQU1kLElBQUFBLGVBQU8sRUFBQztnQkFDWkosT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0JBQWtCQyxpQkFBaUI7WUFDN0Q7UUFDRjtJQUNGO0lBRUFOLEdBQUcsMENBQTBDO1FBQzNDZCxVQUFVTSxrQkFBa0IsQ0FBQyxDQUFDQztZQUM1QixJQUFJQSxRQUFRLG9CQUFvQjtnQkFDOUIsT0FBT0MsUUFBUUMsT0FBTyxDQUFDO29CQUNyQkMsSUFBSTtvQkFDSkMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUM7NEJBQzFCRyxTQUFTOzRCQUNUQyxXQUFXO2dDQUFDO2dDQUFPOzZCQUFXO3dCQUNoQztnQkFDRjtZQUNGO1lBQ0EsSUFBSU4sUUFBUSw2QkFBNkI7Z0JBQ3ZDLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQztvQkFDckJDLElBQUk7b0JBQ0pDLE1BQU0sSUFBTUgsUUFBUUMsT0FBTyxDQUFDOzRCQUMxQkcsU0FBUzs0QkFDVHVDLFNBQVM7NEJBQ1RDLFNBQVM7Z0NBQ1A7b0NBQUVDLEtBQUs7b0NBQUd6QyxTQUFTO29DQUFNMEMsYUFBYTtvQ0FBYUgsU0FBUztnQ0FBaUM7Z0NBQzdGO29DQUFFRSxLQUFLO29DQUFHekMsU0FBUztvQ0FBTTBDLGFBQWE7b0NBQWFILFNBQVM7Z0NBQWlDOzZCQUM5Rjt3QkFDSDtnQkFDRjtZQUNGO1lBQ0EsT0FBTzNDLFFBQVFDLE9BQU8sQ0FBQztnQkFBRUMsSUFBSTtnQkFBTUMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUMsQ0FBQztZQUFHO1FBQ3JFO1FBRUFNLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLFdBQVc7UUFDWCxNQUFNUSxXQUFXM0IsY0FBTSxDQUFDQyxTQUFTLENBQUMsaURBQWlEMkIsT0FBTyxDQUFDO1FBQzNGLElBQUlELFVBQVU7WUFDWmhCLGlCQUFTLENBQUNxQixJQUFJLENBQUNMLFVBQVU7Z0JBQ3ZCRyxjQUFjO29CQUFFQyxPQUFPO3dCQUFDZDtxQkFBSztnQkFBQztZQUNoQztRQUNGO1FBRUEsTUFBTWQsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLG9CQUFvQkMsaUJBQWlCO1FBQy9EO1FBRUEsc0JBQXNCO1FBQ3RCLE1BQU1tQyxlQUFlckMsY0FBTSxDQUFDQyxTQUFTLENBQUM7UUFDdENVLGlCQUFTLENBQUNDLEtBQUssQ0FBQ3lCO1FBRWhCLDhCQUE4QjtRQUM5QixNQUFNbEMsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLG1CQUFtQkMsaUJBQWlCO1lBQzVESCxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQywrQ0FBK0NDLGlCQUFpQjtZQUN4RkgsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsc0JBQXNCQyxpQkFBaUI7UUFDakU7SUFDRjtJQUVBTixHQUFHLCtCQUErQjtRQUNoQ2QsVUFBVU0sa0JBQWtCLENBQUMsQ0FBQ0M7WUFDNUIsSUFBSUEsUUFBUSxvQkFBb0I7Z0JBQzlCLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQztvQkFDckJDLElBQUk7b0JBQ0pDLE1BQU0sSUFBTUgsUUFBUUMsT0FBTyxDQUFDOzRCQUMxQkcsU0FBUzs0QkFDVEMsV0FBVztnQ0FBQztnQ0FBTzs2QkFBVzt3QkFDaEM7Z0JBQ0Y7WUFDRjtZQUNBLElBQUlOLFFBQVEsNkJBQTZCO2dCQUN2QyxPQUFPQyxRQUFRQyxPQUFPLENBQUM7b0JBQ3JCQyxJQUFJO29CQUNKQyxNQUFNLElBQU1ILFFBQVFDLE9BQU8sQ0FBQzs0QkFDMUJHLFNBQVM7NEJBQ1R1QyxTQUFTOzRCQUNUQyxTQUFTO2dDQUNQO29DQUFFQyxLQUFLO29DQUFHekMsU0FBUztvQ0FBTzBDLGFBQWE7b0NBQW1CSCxTQUFTO2dDQUE0QjtnQ0FDL0Y7b0NBQUVFLEtBQUs7b0NBQUd6QyxTQUFTO29DQUFPMEMsYUFBYTtvQ0FBbUJILFNBQVM7Z0NBQWlFOzZCQUNySTt3QkFDSDtnQkFDRjtZQUNGO1lBQ0EsT0FBTzNDLFFBQVFDLE9BQU8sQ0FBQztnQkFBRUMsSUFBSTtnQkFBTUMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUMsQ0FBQztZQUFHO1FBQ3JFO1FBRUFNLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLHNCQUFzQjtRQUN0QixNQUFNUSxXQUFXM0IsY0FBTSxDQUFDQyxTQUFTLENBQUMsaURBQWlEMkIsT0FBTyxDQUFDO1FBQzNGLElBQUlELFVBQVU7WUFDWmhCLGlCQUFTLENBQUNxQixJQUFJLENBQUNMLFVBQVU7Z0JBQUVHLGNBQWM7b0JBQUVDLE9BQU87d0JBQUNkO3FCQUFLO2dCQUFDO1lBQUU7UUFDN0Q7UUFFQSxNQUFNZCxJQUFBQSxlQUFPLEVBQUM7WUFDWixNQUFNa0MsZUFBZXJDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDO1lBQ3RDVSxpQkFBUyxDQUFDQyxLQUFLLENBQUN5QjtRQUNsQjtRQUVBLHlCQUF5QjtRQUN6QixNQUFNbEMsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLG1CQUFtQkMsaUJBQWlCO1lBQzVESCxPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxvRkFBb0ZDLGlCQUFpQjtZQUM3SEgsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsOEJBQThCQyxpQkFBaUI7WUFDdkVILE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLG1FQUFtRUMsaUJBQWlCO1FBQzlHO0lBQ0Y7SUFFQU4sR0FBRyw4Q0FBOEM7UUFDL0NkLFVBQVVNLGtCQUFrQixDQUFDLENBQUNDO1lBQzVCLElBQUlBLFFBQVEsb0JBQW9CO2dCQUM5QixPQUFPQyxRQUFRQyxPQUFPLENBQUM7b0JBQ3JCQyxJQUFJO29CQUNKQyxNQUFNLElBQU1ILFFBQVFDLE9BQU8sQ0FBQzs0QkFDMUJHLFNBQVM7NEJBQ1RDLFdBQVc7Z0NBQUM7Z0NBQU87NkJBQVc7d0JBQ2hDO2dCQUNGO1lBQ0Y7WUFDQSxJQUFJTixRQUFRLDZCQUE2QjtnQkFDdkMsT0FBT0MsUUFBUWdELE1BQU0sQ0FBQyxJQUFJQyxNQUFNO1lBQ2xDO1lBQ0EsT0FBT2pELFFBQVFDLE9BQU8sQ0FBQztnQkFBRUMsSUFBSTtnQkFBTUMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUMsQ0FBQztZQUFHO1FBQ3JFO1FBRUFNLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLHNCQUFzQjtRQUN0QixNQUFNUSxXQUFXM0IsY0FBTSxDQUFDQyxTQUFTLENBQUMsaURBQWlEMkIsT0FBTyxDQUFDO1FBQzNGLElBQUlELFVBQVU7WUFDWmhCLGlCQUFTLENBQUNxQixJQUFJLENBQUNMLFVBQVU7Z0JBQUVHLGNBQWM7b0JBQUVDLE9BQU87d0JBQUNkO3FCQUFLO2dCQUFDO1lBQUU7UUFDN0Q7UUFFQSxNQUFNZCxJQUFBQSxlQUFPLEVBQUM7WUFDWixNQUFNa0MsZUFBZXJDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDO1lBQ3RDVSxpQkFBUyxDQUFDQyxLQUFLLENBQUN5QjtRQUNsQjtRQUVBLHlCQUF5QjtRQUN6QixNQUFNbEMsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLHFDQUFxQ0MsaUJBQWlCO1FBQ2hGO0lBQ0Y7SUFFQU4sR0FBRyxrREFBa0Q7UUFDbkRDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLFdBQVc7UUFDWCxNQUFNUSxXQUFXM0IsY0FBTSxDQUFDQyxTQUFTLENBQUMsaURBQWlEMkIsT0FBTyxDQUFDO1FBQzNGLElBQUlELFVBQVU7WUFDWmhCLGlCQUFTLENBQUNxQixJQUFJLENBQUNMLFVBQVU7Z0JBQUVHLGNBQWM7b0JBQUVDLE9BQU87d0JBQUNkO3FCQUFLO2dCQUFDO1lBQUU7UUFDN0Q7UUFFQSxNQUFNZCxJQUFBQSxlQUFPLEVBQUM7WUFDWkosT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0JBQWtCQyxpQkFBaUI7UUFDN0Q7UUFFQSxxQkFBcUI7UUFDckIsTUFBTXNDLGNBQWN4QyxjQUFNLENBQUNDLFNBQVMsQ0FBQztRQUNyQ1UsaUJBQVMsQ0FBQ0MsS0FBSyxDQUFDNEI7UUFFaEIsTUFBTXJDLElBQUFBLGVBQU8sRUFBQztZQUNaSixPQUFPQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxrREFBa0RDLGlCQUFpQjtZQUMzRkgsT0FBT0MsY0FBTSxDQUFDeUMsV0FBVyxDQUFDLGtCQUFrQkMsR0FBRyxDQUFDeEMsaUJBQWlCO1FBQ25FO0lBQ0Y7SUFFQU4sR0FBRyw4Q0FBOEM7UUFDL0MsSUFBSStDO1FBQ0osTUFBTUMsZ0JBQWdCLElBQUl0RCxRQUFRLENBQUNDO1lBQ2pDb0QsZ0JBQWdCcEQ7UUFDbEI7UUFFQVQsVUFBVU0sa0JBQWtCLENBQUMsQ0FBQ0M7WUFDNUIsSUFBSUEsUUFBUSxvQkFBb0I7Z0JBQzlCLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQztvQkFDckJDLElBQUk7b0JBQ0pDLE1BQU0sSUFBTUgsUUFBUUMsT0FBTyxDQUFDOzRCQUMxQkcsU0FBUzs0QkFDVEMsV0FBVztnQ0FBQztnQ0FBTzs2QkFBVzt3QkFDaEM7Z0JBQ0Y7WUFDRjtZQUNBLElBQUlOLFFBQVEsNkJBQTZCO2dCQUN2QyxPQUFPdUQsY0FBY0MsSUFBSSxDQUFDLElBQU8sQ0FBQTt3QkFDL0JyRCxJQUFJO3dCQUNKQyxNQUFNLElBQU1ILFFBQVFDLE9BQU8sQ0FBQztnQ0FDMUJHLFNBQVM7Z0NBQ1R1QyxTQUFTO2dDQUNUQyxTQUFTLEVBQUU7NEJBQ2I7b0JBQ0YsQ0FBQTtZQUNGO1lBQ0EsT0FBTzVDLFFBQVFDLE9BQU8sQ0FBQztnQkFBRUMsSUFBSTtnQkFBTUMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUMsQ0FBQztZQUFHO1FBQ3JFO1FBRUFNLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsTUFBTW1CLE9BQU8sSUFBSUMsS0FBSztZQUFDO1NBQWUsRUFBRSxpQkFBaUI7WUFDdkRDLE1BQU07UUFDUjtRQUVBLFdBQVc7UUFDWCxNQUFNUSxXQUFXM0IsY0FBTSxDQUFDQyxTQUFTLENBQUMsaURBQWlEMkIsT0FBTyxDQUFDO1FBQzNGLElBQUlELFVBQVU7WUFDWmhCLGlCQUFTLENBQUNxQixJQUFJLENBQUNMLFVBQVU7Z0JBQUVHLGNBQWM7b0JBQUVDLE9BQU87d0JBQUNkO3FCQUFLO2dCQUFDO1lBQUU7UUFDN0Q7UUFFQSxNQUFNZCxJQUFBQSxlQUFPLEVBQUM7WUFDWixNQUFNa0MsZUFBZXJDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDO1lBQ3RDVSxpQkFBUyxDQUFDQyxLQUFLLENBQUN5QjtRQUNsQjtRQUVBLHNCQUFzQjtRQUN0QnRDLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGlCQUFpQkMsaUJBQWlCO1FBRTFELGlCQUFpQjtRQUNqQnlDLGNBQWUsQ0FBQztRQUVoQixNQUFNeEMsSUFBQUEsZUFBTyxFQUFDO1lBQ1pKLE9BQU9DLGNBQU0sQ0FBQ3lDLFdBQVcsQ0FBQyxpQkFBaUJDLEdBQUcsQ0FBQ3hDLGlCQUFpQjtRQUNsRTtJQUNGO0lBRUFOLEdBQUcsMENBQTBDO1FBQzNDZCxVQUFVTSxrQkFBa0IsQ0FBQyxDQUFDQztZQUM1QixJQUFJQSxRQUFRLG9CQUFvQjtnQkFDOUIsT0FBT0MsUUFBUWdELE1BQU0sQ0FBQyxJQUFJQyxNQUFNO1lBQ2xDO1lBQ0EsT0FBT2pELFFBQVFDLE9BQU8sQ0FBQztnQkFBRUMsSUFBSTtnQkFBTUMsTUFBTSxJQUFNSCxRQUFRQyxPQUFPLENBQUMsQ0FBQztZQUFHO1FBQ3JFO1FBRUFNLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLGFBQWM7UUFFdEIsc0RBQXNEO1FBQ3RELE1BQU1LLElBQUFBLGVBQU8sRUFBQztZQUNaSixPQUFPQyxjQUFNLENBQUN5QyxXQUFXLENBQUMsMEJBQTBCQyxHQUFHLENBQUN4QyxpQkFBaUI7UUFDM0U7SUFDRjtJQUVBTixHQUFHLGlDQUFpQztRQUNsQ0MsSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0MsYUFBYztRQUV0QixNQUFNNkIsV0FBVzNCLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGlEQUFpRDJCLE9BQU8sQ0FBQztRQUUzRixJQUFJRCxVQUFVO1lBQ1osc0JBQXNCO1lBQ3RCaEIsaUJBQVMsQ0FBQ2tCLFNBQVMsQ0FBQ0Y7WUFFcEIsNkRBQTZEO1lBQzdENUIsT0FBTzRCLFVBQVVtQixXQUFXLENBQUMsbUJBQW1CO1FBQ2xEO0lBQ0Y7QUFDRiJ9