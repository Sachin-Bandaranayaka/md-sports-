{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/authService.test.ts"],"sourcesContent":["// Fixed Unit tests for AuthService\n// This file tests the authentication service functionality\n\nimport { jest } from '@jest/globals';\n\n// Mock dependencies BEFORE importing the service\nconst mockCacheService = {\n  get: jest.fn() as jest.MockedFunction<any>,\n  set: jest.fn() as jest.MockedFunction<any>,\n  delete: jest.fn() as jest.MockedFunction<any>,\n  increment: jest.fn() as jest.MockedFunction<any>,\n  generateKey: jest.fn() as jest.MockedFunction<any>,\n  clear: jest.fn() as jest.MockedFunction<any>,\n};\n\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn() as jest.MockedFunction<any>,\n    findFirst: jest.fn() as jest.MockedFunction<any>,\n    create: jest.fn() as jest.MockedFunction<any>,\n    update: jest.fn() as jest.MockedFunction<any>,\n    findMany: jest.fn() as jest.MockedFunction<any>,\n    delete: jest.fn() as jest.MockedFunction<any>,\n  },\n  permission: {\n    findMany: jest.fn() as jest.MockedFunction<any>,\n  },\n  session: {\n    create: jest.fn() as jest.MockedFunction<any>,\n    findUnique: jest.fn() as jest.MockedFunction<any>,\n    update: jest.fn() as jest.MockedFunction<any>,\n    deleteMany: jest.fn() as jest.MockedFunction<any>,\n  },\n  auditLog: {\n    create: jest.fn() as jest.MockedFunction<any>,\n  },\n};\n\nconst mockBcrypt = {\n  compare: jest.fn() as jest.MockedFunction<any>,\n  hash: jest.fn(),\n  genSalt: jest.fn(),\n};\n\n// Mock modules\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('@/lib/cache', () => ({\n  __esModule: true,\n  cacheService: mockCacheService,\n  cache: mockCacheService,\n  CACHE_CONFIG: {\n    KEYS: {\n      USER_SESSION: 'user_session',\n      TOKEN_VALIDATION: 'token_validation',\n    },\n    TTL: {\n      USER_SESSION: 3600,\n      TOKEN_VALIDATION: 1800,\n    },\n  },\n}));\n\njest.mock('bcryptjs', () => mockBcrypt);\n// Mock jsonwebtoken with a simple approach\nconst mockJwt = {\n  sign: jest.fn(),\n  verify: jest.fn(),\n  decode: jest.fn(),\n  TokenExpiredError: class extends Error {\n    expiredAt: Date;\n    constructor(message: string, expiredAt?: Date) {\n      super(message);\n      this.name = 'TokenExpiredError';\n      this.expiredAt = expiredAt || new Date();\n    }\n  },\n  JsonWebTokenError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = 'JsonWebTokenError';\n    }\n  },\n};\n\njest.mock('jsonwebtoken', () => mockJwt);\n\n// Import after mocking\nimport { authenticateUser, generateToken, verifyToken, parseTimeStringToSeconds, getUserFromDecodedPayload, getUserFromToken } from '@/services/authService';\nimport * as jwt from 'jsonwebtoken';\nimport { cacheService } from '@/lib/cache';\n\n// Import the executeWithRetry function to spy on it\nimport * as authService from '@/services/authService';\n\n// Spy on the imported jwt to ensure our mocks work\nconst jwtVerifySpy = jest.spyOn(jwt, 'verify');\nconst jwtSignSpy = jest.spyOn(jwt, 'sign');\n\n// Spy on the actual cacheService to verify mocking\nconst cacheServiceGenerateKeySpy = jest.spyOn(cacheService, 'generateKey');\nconst cacheServiceGetSpy = jest.spyOn(cacheService, 'get');\nconst cacheServiceSetSpy = jest.spyOn(cacheService, 'set');\n\n// Spy on executeWithRetry to bypass the retry logic in tests\nconst executeWithRetrySpy = jest.spyOn(authService as any, 'executeWithRetry').mockImplementation((operation) => operation());\n\n// Create proper mock types for easier access\nconst mockUserFindFirst = mockPrisma.user.findFirst as jest.MockedFunction<any>;\nconst mockPermissionFindMany = mockPrisma.permission.findMany as jest.MockedFunction<any>;\n// mockJwt is already defined above\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    process.env.JWT_SECRET = 'test-secret-key';\n    process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = '12h';\n    \n    // Setup default cache mocks\n    mockCacheService.generateKey.mockReturnValue('mock-cache-key');\n    mockCacheService.get.mockResolvedValue(null);\n    mockCacheService.set.mockResolvedValue(true);\n    mockCacheService.delete.mockResolvedValue(true);\n    \n    // Reset Prisma mocks\n    mockUserFindFirst.mockResolvedValue(null);\n    mockPermissionFindMany.mockResolvedValue([]);\n    \n    // Reset JWT mocks\n    mockJwt.sign.mockReturnValue('mocked-jwt-token');\n    mockJwt.verify.mockReturnValue({ userId: 1, email: 'test@example.com' });\n    mockJwt.decode.mockReturnValue({ userId: 1, email: 'test@example.com' });\n    jwtVerifySpy.mockClear();\n    jwtSignSpy.mockClear();\n  });\n\n  describe('parseTimeStringToSeconds', () => {\n    test('should parse seconds correctly', () => {\n      expect(parseTimeStringToSeconds('30s')).toBe(30);\n    });\n\n    test('should parse minutes correctly', () => {\n      expect(parseTimeStringToSeconds('5m')).toBe(300);\n    });\n\n    test('should parse hours correctly', () => {\n      expect(parseTimeStringToSeconds('2h')).toBe(7200);\n    });\n\n    test('should parse days correctly', () => {\n      expect(parseTimeStringToSeconds('1d')).toBe(86400);\n    });\n\n    test('should return 0 for invalid input', () => {\n      expect(parseTimeStringToSeconds('')).toBe(0);\n      expect(parseTimeStringToSeconds('invalid')).toBe(0);\n      expect(parseTimeStringToSeconds('abc')).toBe(0);\n    });\n\n    test('should handle edge cases', () => {\n      expect(parseTimeStringToSeconds('0s')).toBe(0);\n      expect(parseTimeStringToSeconds('100x')).toBe(100); // Falls back to parsing the number part\n    });\n  });\n\n  describe('authenticateUser', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      password: 'hashedpassword',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      roleName: 'admin',\n      permissions: null,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should authenticate valid user credentials', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(true as any);\n      mockJwt.sign.mockReturnValue('mock-jwt-token' as any);\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(true);\n      expect(result.token).toBe('mock-jwt-token');\n      expect(result.user).toEqual({\n        id: 1,\n        email: 'test@example.com',\n        username: 'testuser',\n        fullName: 'testuser',\n        roleId: 1,\n        roleName: 'admin',\n        shopId: 1,\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockUserFindFirst).toHaveBeenCalledWith({\n        where: {\n          email: 'test@example.com',\n          isActive: true\n        },\n        include: {\n          role: {\n            include: {\n              permissions: {\n                select: { name: true }\n              }\n            }\n          }\n        }\n      });\n    });\n\n    test('should reject invalid email', async () => {\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await authenticateUser('invalid@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject invalid password', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(false as any);\n\n      const result = await authenticateUser('test@example.com', 'wrongpassword');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject inactive user', async () => {\n      mockUserFindFirst.mockResolvedValue(null); // findFirst with isActive: true returns null\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should handle database errors gracefully', async () => {\n      mockUserFindFirst.mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n\n    test('should handle bcrypt errors gracefully', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockRejectedValue(new Error('Bcrypt error'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n  });\n\n  describe('generateToken', () => {\n    const mockPayload = {\n      sub: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      roleId: 1,\n      shopId: 1,\n      permissions: ['read_products', 'write_products']\n    };\n\n    test('should generate JWT token', () => {\n      const mockToken = 'mock-jwt-token';\n      mockJwt.sign.mockReturnValue(mockToken);\n\n      const result = generateToken(mockPayload);\n\n      expect(result).toBe(mockToken);\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n          mockPayload,\n          'test-secret-key',\n          { expiresIn: '12h' }\n        );\n    });\n  });\n\n  describe('verifyToken', () => {\n    test('should verify valid token from cache', async () => {\n      const mockPayload = {\n        sub: '1',\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(mockPayload);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should verify valid token and cache result', async () => {\n      const mockPayload = {\n        sub: '1',\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockJwt.verify.mockReturnValue(mockPayload as any);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret-key');\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      const invalidError = new Error('Invalid token');\n      mockJwt.verify.mockImplementation(() => {\n        throw invalidError;\n      });\n      jwtVerifySpy.mockImplementation(() => {\n         throw invalidError;\n       });\n\n      await expect(verifyToken('invalid-token')).rejects.toThrow('Invalid token');\n    });\n\n    test('should throw error for expired token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      const expiredError = new mockJwt.TokenExpiredError('Token expired', new Date());\n      mockJwt.verify.mockImplementation(() => {\n        throw expiredError;\n      });\n      jwtVerifySpy.mockImplementation(() => {\n         throw expiredError;\n       });\n\n      await expect(verifyToken('expired-token')).rejects.toThrow('Token expired');\n    });\n  });\n\n  describe('getUserFromDecodedPayload', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should return user from cache', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const cachedUser = {\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      };\n      \n      mockCacheService.get.mockResolvedValue(cachedUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual(cachedUser);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should return user from database and cache it', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      // Mock the findFirst call to return the user when called with the correct parameters\n      mockUserFindFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should return null for null payload', async () => {\n      const result = await getUserFromDecodedPayload(null);\n      expect(result).toBeNull();\n    });\n\n    test('should return null for invalid payload', async () => {\n      const result = await getUserFromDecodedPayload({} as any);\n      expect(result).toBeNull();\n    });\n\n    test('should return null when user not found', async () => {\n      const payload = {\n        sub: 999,\n        username: 'nonexistent',\n        email: 'nonexistent@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await getUserFromDecodedPayload(payload);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getUserFromToken', () => {\n    test('should return user from valid token', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'testuser',\n        isActive: true,\n        roleId: 1,\n        shopId: 1,\n        role: {\n          id: 1,\n          name: 'admin',\n          permissions: [{ name: 'read_products' }]\n        }\n      };\n\n      // Mock verifyToken to return payload\n      mockCacheService.get.mockResolvedValue(null); // Cache miss for user lookup\n      mockCacheService.generateKey.mockReturnValue('test-cache-key');\n      mockCacheService.set.mockResolvedValue(undefined);\n      mockJwt.verify.mockReturnValue(mockPayload);\n      jwtVerifySpy.mockReturnValue(mockPayload as any);\n      \n      // Mock the findFirst call to return the user\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      \n      // Set up spies to return expected values\n      cacheServiceGenerateKeySpy.mockReturnValue('test-cache-key');\n      cacheServiceGetSpy.mockResolvedValue(null);\n      cacheServiceSetSpy.mockResolvedValue(undefined);\n      \n      // Reset cache mock to ensure it always returns null (cache miss)\n       mockCacheService.get.mockResolvedValue(null);\n\n      // Test verifyToken separately first\n       const verifyResult = await verifyToken('valid-token');\n       expect(verifyResult).toBeDefined();\n       expect(verifyResult).toHaveProperty('sub', 1);\n       \n       // Test getUserFromDecodedPayload separately\n       // First verify the function exists\n       expect(typeof getUserFromDecodedPayload).toBe('function');\n       \n       // Test with null payload first to see if we get the expected error path\n       const nullResult = await getUserFromDecodedPayload(null);\n       expect(nullResult).toBeNull();\n       \n       // Test with payload missing sub\n       const noSubResult = await getUserFromDecodedPayload({ username: 'test' } as any);\n       expect(noSubResult).toBeNull();\n       \n       // Test with mockPayload\n       const decodedResult = await getUserFromDecodedPayload(mockPayload);\n       \n       // Check if the actual cacheService methods are being called\n       expect(cacheServiceGenerateKeySpy).toHaveBeenCalledWith('user_session', { userId: 1 });\n       expect(cacheServiceGetSpy).toHaveBeenCalled();\n       \n       expect(decodedResult).toBeDefined();\n       expect(decodedResult).not.toBeNull();\n       \n       // Now test the full flow\n       const result = await getUserFromToken('valid-token');\n       \n       expect(result).toEqual({\n         ...mockUser,\n         roleName: 'admin',\n         permissions: ['read_products']\n       });\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockCacheService.generateKey.mockReturnValue('test-cache-key');\n      \n      // Mock both the direct mock and the spy\n      const jwtError = new mockJwt.JsonWebTokenError('jwt malformed');\n      mockJwt.verify.mockImplementation(() => {\n        throw jwtError;\n      });\n      jwtVerifySpy.mockImplementation(() => {\n         throw jwtError;\n       });\n\n      await expect(getUserFromToken('invalid')).rejects.toThrow('jwt malformed');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle missing JWT_SECRET', async () => {\n      const originalSecret = process.env.JWT_SECRET;\n      delete process.env.JWT_SECRET;\n      \n      mockCacheService.get.mockResolvedValue(null);\n      const secretError = new Error('secretOrPrivateKey must have a value');\n      mockJwt.verify.mockImplementation(() => {\n        throw secretError;\n      });\n      jwtVerifySpy.mockImplementation(() => {\n         throw secretError;\n       });\n      \n      await expect(verifyToken('any-token')).rejects.toThrow();\n      \n      // Restore the secret\n      process.env.JWT_SECRET = originalSecret;\n    });\n\n    test('should handle malformed tokens gracefully', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      \n      // Mock both the direct mock and the spy\n      const jwtError = new mockJwt.JsonWebTokenError('jwt malformed');\n      mockJwt.verify.mockImplementation(() => {\n        throw jwtError;\n      });\n      jwtVerifySpy.mockImplementation(() => {\n        throw jwtError;\n      });\n      \n      await expect(verifyToken('malformed-token')).rejects.toThrow('jwt malformed');\n    });\n\n    test('should handle empty token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      \n      await expect(verifyToken('')).rejects.toThrow('jwt must be provided');\n    });\n  });\n});"],"names":["mockCacheService","get","jest","fn","set","delete","increment","generateKey","clear","mockPrisma","user","findUnique","findFirst","create","update","findMany","permission","session","deleteMany","auditLog","mockBcrypt","compare","hash","genSalt","mock","__esModule","default","cacheService","cache","CACHE_CONFIG","KEYS","USER_SESSION","TOKEN_VALIDATION","TTL","mockJwt","sign","verify","decode","TokenExpiredError","Error","constructor","message","expiredAt","name","Date","JsonWebTokenError","jwtVerifySpy","spyOn","jwt","jwtSignSpy","cacheServiceGenerateKeySpy","cacheServiceGetSpy","cacheServiceSetSpy","executeWithRetrySpy","authService","mockImplementation","operation","mockUserFindFirst","mockPermissionFindMany","describe","beforeEach","clearAllMocks","process","env","JWT_SECRET","JWT_ACCESS_TOKEN_EXPIRES_IN","mockReturnValue","mockResolvedValue","userId","email","mockClear","test","expect","parseTimeStringToSeconds","toBe","mockUser","id","password","isActive","roleId","shopId","roleName","permissions","role","result","authenticateUser","success","token","toEqual","username","fullName","toHaveBeenCalledWith","where","include","select","mockRejectedValue","mockPayload","sub","mockToken","generateToken","expiresIn","iat","Math","floor","now","exp","verifyToken","toHaveBeenCalled","invalidError","rejects","toThrow","expiredError","payload","cachedUser","getUserFromDecodedPayload","toBeNull","undefined","verifyResult","toBeDefined","toHaveProperty","nullResult","noSubResult","decodedResult","not","getUserFromToken","jwtError","originalSecret","secretError"],"mappings":"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"}