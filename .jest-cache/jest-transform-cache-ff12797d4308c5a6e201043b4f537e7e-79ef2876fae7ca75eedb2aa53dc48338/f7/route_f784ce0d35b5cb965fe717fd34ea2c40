3a32d0a0754f48c2431f82f1e35b7191
"use strict";

/* istanbul ignore next */
function cov_1i5576ayr4() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts";
  var hash = "7f0c59a68a59afd8c74c6dbaa24846b14c1b3012";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "13": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "14": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 36,
          column: 55
        }
      },
      "15": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 41
        }
      },
      "16": {
        start: {
          line: 39,
          column: 22
        },
        end: {
          line: 39,
          column: 24
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 30
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 54
        }
      },
      "21": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "23": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "24": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "25": {
        start: {
          line: 74,
          column: 41
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "26": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "27": {
        start: {
          line: 94,
          column: 29
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "28": {
        start: {
          line: 113,
          column: 38
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "29": {
        start: {
          line: 113,
          column: 71
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "30": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "31": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 61
        }
      },
      "32": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "33": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "34": {
        start: {
          line: 144,
          column: 97
        },
        end: {
          line: 144,
          column: 117
        }
      },
      "35": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "36": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "37": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "38": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "39": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "40": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "41": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "42": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 256,
          column: 10
        }
      },
      "43": {
        start: {
          line: 181,
          column: 35
        },
        end: {
          line: 204,
          column: 14
        }
      },
      "44": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "45": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 216,
          column: 19
        }
      },
      "46": {
        start: {
          line: 217,
          column: 19
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "47": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 227,
          column: 19
        }
      },
      "48": {
        start: {
          line: 228,
          column: 19
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "49": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "50": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 249,
          column: 19
        }
      },
      "51": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "52": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "53": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 60
        }
      },
      "54": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "55": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 373,
          column: 5
        }
      },
      "56": {
        start: {
          line: 277,
          column: 33
        },
        end: {
          line: 277,
          column: 53
        }
      },
      "57": {
        start: {
          line: 278,
          column: 19
        },
        end: {
          line: 278,
          column: 41
        }
      },
      "58": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "59": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 285,
          column: 15
        }
      },
      "60": {
        start: {
          line: 288,
          column: 28
        },
        end: {
          line: 296,
          column: 10
        }
      },
      "61": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "62": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "63": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 359,
          column: 11
        }
      },
      "64": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "65": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 318,
          column: 19
        }
      },
      "66": {
        start: {
          line: 319,
          column: 19
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "67": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 329,
          column: 19
        }
      },
      "68": {
        start: {
          line: 330,
          column: 19
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "69": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 341,
          column: 19
        }
      },
      "70": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 351,
          column: 19
        }
      },
      "71": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "72": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 363,
          column: 11
        }
      },
      "73": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 60
        }
      },
      "74": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 372,
          column: 11
        }
      },
      "75": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 567,
          column: 5
        }
      },
      "76": {
        start: {
          line: 377,
          column: 101
        },
        end: {
          line: 377,
          column: 121
        }
      },
      "77": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "78": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 385,
          column: 15
        }
      },
      "79": {
        start: {
          line: 388,
          column: 27
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "80": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "81": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 400,
          column: 15
        }
      },
      "82": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "83": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 409,
          column: 15
        }
      },
      "84": {
        start: {
          line: 412,
          column: 36
        },
        end: {
          line: 416,
          column: 10
        }
      },
      "85": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "86": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 423,
          column: 15
        }
      },
      "87": {
        start: {
          line: 426,
          column: 23
        },
        end: {
          line: 552,
          column: 10
        }
      },
      "88": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "89": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 438,
          column: 19
        }
      },
      "90": {
        start: {
          line: 439,
          column: 19
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "91": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 449,
          column: 19
        }
      },
      "92": {
        start: {
          line: 450,
          column: 19
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "93": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 461,
          column: 19
        }
      },
      "94": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 471,
          column: 19
        }
      },
      "95": {
        start: {
          line: 474,
          column: 39
        },
        end: {
          line: 500,
          column: 14
        }
      },
      "96": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "97": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 512,
          column: 19
        }
      },
      "98": {
        start: {
          line: 513,
          column: 19
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "99": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 523,
          column: 19
        }
      },
      "100": {
        start: {
          line: 524,
          column: 19
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "101": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 535,
          column: 19
        }
      },
      "102": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 545,
          column: 19
        }
      },
      "103": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 551,
          column: 14
        }
      },
      "104": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 557,
          column: 11
        }
      },
      "105": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 559,
          column: 60
        }
      },
      "106": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 566,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 18
          }
        },
        loc: {
          start: {
            line: 32,
            column: 28
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 32
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 113,
            column: 55
          },
          end: {
            line: 113,
            column: 56
          }
        },
        loc: {
          start: {
            line: 113,
            column: 71
          },
          end: {
            line: 126,
            column: 13
          }
        },
        line: 113
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 142,
            column: 15
          },
          end: {
            line: 142,
            column: 19
          }
        },
        loc: {
          start: {
            line: 142,
            column: 29
          },
          end: {
            line: 274,
            column: 1
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 179,
            column: 58
          },
          end: {
            line: 179,
            column: 59
          }
        },
        loc: {
          start: {
            line: 179,
            column: 70
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 179
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 275,
            column: 15
          },
          end: {
            line: 275,
            column: 21
          }
        },
        loc: {
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 374,
            column: 1
          }
        },
        line: 275
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 306,
            column: 43
          },
          end: {
            line: 306,
            column: 44
          }
        },
        loc: {
          start: {
            line: 306,
            column: 55
          },
          end: {
            line: 359,
            column: 9
          }
        },
        line: 306
      },
      "12": {
        name: "PATCH",
        decl: {
          start: {
            line: 375,
            column: 15
          },
          end: {
            line: 375,
            column: 20
          }
        },
        loc: {
          start: {
            line: 375,
            column: 30
          },
          end: {
            line: 568,
            column: 1
          }
        },
        line: 375
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 426,
            column: 58
          },
          end: {
            line: 426,
            column: 59
          }
        },
        loc: {
          start: {
            line: 426,
            column: 70
          },
          end: {
            line: 552,
            column: 9
          }
        },
        line: 426
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 19
          },
          end: {
            line: 136,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 44
          },
          end: {
            line: 136,
            column: 57
          }
        }, {
          start: {
            line: 136,
            column: 60
          },
          end: {
            line: 136,
            column: 73
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "8": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 33
          }
        }, {
          start: {
            line: 146,
            column: 37
          },
          end: {
            line: 146,
            column: 47
          }
        }, {
          start: {
            line: 146,
            column: 51
          },
          end: {
            line: 146,
            column: 56
          }
        }, {
          start: {
            line: 146,
            column: 60
          },
          end: {
            line: 146,
            column: 67
          }
        }, {
          start: {
            line: 146,
            column: 71
          },
          end: {
            line: 146,
            column: 80
          }
        }],
        line: 146
      },
      "9": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "10": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "11": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 31
          }
        }, {
          start: {
            line: 170,
            column: 35
          },
          end: {
            line: 170,
            column: 47
          }
        }],
        line: 170
      },
      "12": {
        loc: {
          start: {
            line: 186,
            column: 33
          },
          end: {
            line: 186,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 47
          },
          end: {
            line: 186,
            column: 72
          }
        }, {
          start: {
            line: 186,
            column: 75
          },
          end: {
            line: 186,
            column: 79
          }
        }],
        line: 186
      },
      "13": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        }],
        line: 206
      },
      "14": {
        loc: {
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: 228,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        }],
        line: 217
      },
      "15": {
        loc: {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 217,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 217,
            column: 41
          }
        }, {
          start: {
            line: 217,
            column: 45
          },
          end: {
            line: 217,
            column: 66
          }
        }],
        line: 217
      },
      "16": {
        loc: {
          start: {
            line: 228,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 19
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "17": {
        loc: {
          start: {
            line: 228,
            column: 23
          },
          end: {
            line: 228,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 23
          },
          end: {
            line: 228,
            column: 42
          }
        }, {
          start: {
            line: 228,
            column: 46
          },
          end: {
            line: 228,
            column: 57
          }
        }],
        line: 228
      },
      "18": {
        loc: {
          start: {
            line: 269,
            column: 19
          },
          end: {
            line: 269,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 44
          },
          end: {
            line: 269,
            column: 57
          }
        }, {
          start: {
            line: 269,
            column: 60
          },
          end: {
            line: 269,
            column: 73
          }
        }],
        line: 269
      },
      "19": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "20": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "21": {
        loc: {
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: 319,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        }],
        line: 308
      },
      "22": {
        loc: {
          start: {
            line: 319,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: 330,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        }],
        line: 319
      },
      "23": {
        loc: {
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 53
          }
        }, {
          start: {
            line: 319,
            column: 57
          },
          end: {
            line: 319,
            column: 90
          }
        }],
        line: 319
      },
      "24": {
        loc: {
          start: {
            line: 330,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 19
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "25": {
        loc: {
          start: {
            line: 330,
            column: 23
          },
          end: {
            line: 330,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 23
          },
          end: {
            line: 330,
            column: 54
          }
        }, {
          start: {
            line: 330,
            column: 58
          },
          end: {
            line: 330,
            column: 81
          }
        }],
        line: 330
      },
      "26": {
        loc: {
          start: {
            line: 369,
            column: 19
          },
          end: {
            line: 369,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 369,
            column: 44
          },
          end: {
            line: 369,
            column: 57
          }
        }, {
          start: {
            line: 369,
            column: 60
          },
          end: {
            line: 369,
            column: 73
          }
        }],
        line: 369
      },
      "27": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "28": {
        loc: {
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 379,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 379,
            column: 15
          }
        }, {
          start: {
            line: 379,
            column: 19
          },
          end: {
            line: 379,
            column: 24
          }
        }, {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 379,
            column: 40
          }
        }, {
          start: {
            line: 379,
            column: 44
          },
          end: {
            line: 379,
            column: 54
          }
        }, {
          start: {
            line: 379,
            column: 58
          },
          end: {
            line: 379,
            column: 63
          }
        }, {
          start: {
            line: 379,
            column: 67
          },
          end: {
            line: 379,
            column: 74
          }
        }, {
          start: {
            line: 379,
            column: 78
          },
          end: {
            line: 379,
            column: 87
          }
        }],
        line: 379
      },
      "29": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "30": {
        loc: {
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 410,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 410,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "31": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 403,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 403,
            column: 31
          }
        }, {
          start: {
            line: 403,
            column: 35
          },
          end: {
            line: 403,
            column: 47
          }
        }],
        line: 403
      },
      "32": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "33": {
        loc: {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: 439,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        }],
        line: 428
      },
      "34": {
        loc: {
          start: {
            line: 439,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: 450,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        }],
        line: 439
      },
      "35": {
        loc: {
          start: {
            line: 439,
            column: 23
          },
          end: {
            line: 439,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 23
          },
          end: {
            line: 439,
            column: 61
          }
        }, {
          start: {
            line: 439,
            column: 65
          },
          end: {
            line: 439,
            column: 106
          }
        }],
        line: 439
      },
      "36": {
        loc: {
          start: {
            line: 450,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 19
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "37": {
        loc: {
          start: {
            line: 450,
            column: 23
          },
          end: {
            line: 450,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 23
          },
          end: {
            line: 450,
            column: 62
          }
        }, {
          start: {
            line: 450,
            column: 66
          },
          end: {
            line: 450,
            column: 97
          }
        }],
        line: 450
      },
      "38": {
        loc: {
          start: {
            line: 482,
            column: 33
          },
          end: {
            line: 482,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 482,
            column: 47
          },
          end: {
            line: 482,
            column: 72
          }
        }, {
          start: {
            line: 482,
            column: 75
          },
          end: {
            line: 482,
            column: 79
          }
        }],
        line: 482
      },
      "39": {
        loc: {
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: 513,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        }],
        line: 502
      },
      "40": {
        loc: {
          start: {
            line: 513,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: 524,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        }],
        line: 513
      },
      "41": {
        loc: {
          start: {
            line: 513,
            column: 23
          },
          end: {
            line: 513,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 23
          },
          end: {
            line: 513,
            column: 41
          }
        }, {
          start: {
            line: 513,
            column: 45
          },
          end: {
            line: 513,
            column: 66
          }
        }],
        line: 513
      },
      "42": {
        loc: {
          start: {
            line: 524,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 19
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "43": {
        loc: {
          start: {
            line: 524,
            column: 23
          },
          end: {
            line: 524,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 524,
            column: 23
          },
          end: {
            line: 524,
            column: 42
          }
        }, {
          start: {
            line: 524,
            column: 46
          },
          end: {
            line: 524,
            column: 57
          }
        }],
        line: 524
      },
      "44": {
        loc: {
          start: {
            line: 563,
            column: 19
          },
          end: {
            line: 563,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 563,
            column: 44
          },
          end: {
            line: 563,
            column: 57
          }
        }, {
          start: {
            line: 563,
            column: 60
          },
          end: {
            line: 563,
            column: 73
          }
        }],
        line: 563
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0, 0, 0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/accounting/transactions/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET: Fetch all transactions\nexport async function GET(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const type = searchParams.get('type');\n        const accountId = searchParams.get('accountId');\n        const id = searchParams.get('id');\n\n        // Build filter conditions\n        const where: any = {};\n\n        if (type) {\n            where.type = type;\n        }\n\n        if (accountId) {\n            where.accountId = parseInt(accountId, 10);\n        }\n\n        if (id) {\n            // If ID is provided, fetch a single transaction\n            const transaction = await prisma.transaction.findUnique({\n                where: { id: parseInt(id, 10) },\n                include: {\n                    account: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    toAccount: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n\n            if (!transaction) {\n                return NextResponse.json({\n                    success: false,\n                    message: 'Transaction not found'\n                }, { status: 404 });\n            }\n\n            // Format the response\n            const formattedTransaction = {\n                id: transaction.id,\n                date: transaction.date,\n                description: transaction.description,\n                accountId: transaction.accountId,\n                accountName: transaction.account.name,\n                toAccountId: transaction.toAccountId,\n                toAccountName: transaction.toAccount?.name,\n                type: transaction.type,\n                amount: transaction.amount,\n                reference: transaction.reference,\n                category: transaction.category,\n                createdAt: transaction.createdAt\n            };\n\n            return NextResponse.json({\n                success: true,\n                data: formattedTransaction\n            });\n        }\n\n        // Get transactions with account names\n        const transactions = await prisma.transaction.findMany({\n            where,\n            orderBy: {\n                date: 'desc'\n            },\n            include: {\n                account: {\n                    select: {\n                        name: true\n                    }\n                },\n                toAccount: {\n                    select: {\n                        name: true\n                    }\n                }\n            }\n        });\n\n        // Format the response\n        const formattedTransactions = transactions.map(transaction => ({\n            id: transaction.id,\n            date: transaction.date,\n            description: transaction.description,\n            accountId: transaction.accountId,\n            accountName: transaction.account.name,\n            toAccountId: transaction.toAccountId,\n            toAccountName: transaction.toAccount?.name,\n            type: transaction.type,\n            amount: transaction.amount,\n            reference: transaction.reference,\n            category: transaction.category,\n            createdAt: transaction.createdAt\n        }));\n\n        return NextResponse.json({\n            success: true,\n            data: formattedTransactions\n        });\n    } catch (error) {\n        console.error('Error fetching transactions:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching transactions',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new transaction\nexport async function POST(request: Request) {\n    try {\n        const { date, description, accountId, toAccountId, type, amount, reference, category } = await request.json();\n\n        // Validate required fields\n        if (!date || !description || !accountId || !type || !amount || !category) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        // Validate transaction type\n        const validTypes = ['income', 'expense', 'withdrawal', 'transfer'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Transaction type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // For transfers, toAccountId is required\n        if (type === 'transfer' && !toAccountId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Destination account is required for transfers'\n            }, { status: 400 });\n        }\n\n        // Start a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // Create the transaction\n            const newTransaction = await tx.transaction.create({\n                data: {\n                    date: new Date(date),\n                    description,\n                    accountId: parseInt(accountId, 10),\n                    toAccountId: toAccountId ? parseInt(toAccountId, 10) : null,\n                    type,\n                    amount: parseFloat(amount),\n                    reference,\n                    category\n                },\n                include: {\n                    account: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    toAccount: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n\n            // Update account balances based on transaction type\n            if (type === 'income') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'expense' || type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'transfer' && toAccountId) {\n                // For transfers, decrease from account and increase to account\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: parseInt(toAccountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            }\n\n            return {\n                ...newTransaction,\n                accountName: newTransaction.account.name,\n                toAccountName: newTransaction.toAccount?.name\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction created successfully',\n            data: result\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete a transaction\nexport async function DELETE(request: Request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n\n        if (!id) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction ID is required'\n            }, { status: 400 });\n        }\n\n        // Get the transaction details first to reverse the account balance changes\n        const transaction = await prisma.transaction.findUnique({\n            where: { id: parseInt(id, 10) },\n            include: {\n                account: true,\n                toAccount: true\n            }\n        });\n\n        if (!transaction) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction not found'\n            }, { status: 404 });\n        }\n\n        // Start a transaction to ensure data consistency\n        await prisma.$transaction(async (tx) => {\n            // Reverse the account balance changes based on transaction type\n            if (transaction.type === 'income') {\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: transaction.amount\n                        }\n                    }\n                });\n            } else if (transaction.type === 'expense' || transaction.type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            increment: transaction.amount\n                        }\n                    }\n                });\n            } else if (transaction.type === 'transfer' && transaction.toAccountId) {\n                // For transfers, increase from account and decrease to account\n                await tx.account.update({\n                    where: { id: transaction.accountId },\n                    data: {\n                        balance: {\n                            increment: transaction.amount\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: transaction.toAccountId },\n                    data: {\n                        balance: {\n                            decrement: transaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Delete the transaction\n            await tx.transaction.delete({\n                where: { id: parseInt(id, 10) }\n            });\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update a transaction\nexport async function PATCH(request: Request) {\n    try {\n        const { id, date, description, accountId, toAccountId, type, amount, reference, category } = await request.json();\n\n        // Validate required fields\n        if (!id || !date || !description || !accountId || !type || !amount || !category) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        // Validate transaction type\n        const validTypes = ['income', 'expense', 'withdrawal', 'transfer'];\n        if (!validTypes.includes(type)) {\n            return NextResponse.json({\n                success: false,\n                message: `Transaction type must be one of: ${validTypes.join(', ')}`\n            }, { status: 400 });\n        }\n\n        // For transfers, toAccountId is required\n        if (type === 'transfer' && !toAccountId) {\n            return NextResponse.json({\n                success: false,\n                message: 'Destination account is required for transfers'\n            }, { status: 400 });\n        }\n\n        // Get the original transaction to calculate balance adjustments\n        const originalTransaction = await prisma.transaction.findUnique({\n            where: { id: parseInt(id, 10) }\n        });\n\n        if (!originalTransaction) {\n            return NextResponse.json({\n                success: false,\n                message: 'Transaction not found'\n            }, { status: 404 });\n        }\n\n        // Start a transaction to ensure data consistency\n        const result = await prisma.$transaction(async (tx) => {\n            // First, reverse the original transaction's effect on account balances\n            if (originalTransaction.type === 'income') {\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: originalTransaction.amount\n                        }\n                    }\n                });\n            } else if (originalTransaction.type === 'expense' || originalTransaction.type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            increment: originalTransaction.amount\n                        }\n                    }\n                });\n            } else if (originalTransaction.type === 'transfer' && originalTransaction.toAccountId) {\n                // For transfers, increase from account and decrease to account\n                await tx.account.update({\n                    where: { id: originalTransaction.accountId },\n                    data: {\n                        balance: {\n                            increment: originalTransaction.amount\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: originalTransaction.toAccountId },\n                    data: {\n                        balance: {\n                            decrement: originalTransaction.amount\n                        }\n                    }\n                });\n            }\n\n            // Update the transaction\n            const updatedTransaction = await tx.transaction.update({\n                where: { id: parseInt(id, 10) },\n                data: {\n                    date: new Date(date),\n                    description,\n                    accountId: parseInt(accountId, 10),\n                    toAccountId: toAccountId ? parseInt(toAccountId, 10) : null,\n                    type,\n                    amount: parseFloat(amount),\n                    reference,\n                    category\n                },\n                include: {\n                    account: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    toAccount: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n\n            // Now apply the new transaction's effect on account balances\n            if (type === 'income') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'expense' || type === 'withdrawal') {\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n            } else if (type === 'transfer' && toAccountId) {\n                // For transfers, decrease from account and increase to account\n                await tx.account.update({\n                    where: { id: parseInt(accountId, 10) },\n                    data: {\n                        balance: {\n                            decrement: parseFloat(amount)\n                        }\n                    }\n                });\n\n                await tx.account.update({\n                    where: { id: parseInt(toAccountId, 10) },\n                    data: {\n                        balance: {\n                            increment: parseFloat(amount)\n                        }\n                    }\n                });\n            }\n\n            return {\n                ...updatedTransaction,\n                accountName: updatedTransaction.account.name,\n                toAccountName: updatedTransaction.toAccount?.name\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Transaction updated successfully',\n            data: result\n        });\n    } catch (error) {\n        console.error('Error updating transaction:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating transaction',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["DELETE", "GET", "PATCH", "POST", "request", "searchParams", "URL", "url", "type", "get", "accountId", "id", "where", "parseInt", "transaction", "prisma", "findUnique", "include", "account", "select", "name", "toAccount", "NextResponse", "json", "success", "message", "status", "formattedTransaction", "date", "description", "accountName", "toAccountId", "toAccountName", "amount", "reference", "category", "createdAt", "data", "transactions", "findMany", "orderBy", "formattedTransactions", "map", "error", "console", "Error", "String", "validTypes", "includes", "join", "result", "$transaction", "tx", "newTransaction", "create", "Date", "parseFloat", "update", "balance", "increment", "decrement", "delete", "originalTransaction", "updatedTransaction"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7f0c59a68a59afd8c74c6dbaa24846b14c1b3012"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1i5576ayr4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1i5576ayr4();
cov_1i5576ayr4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[0]++;
  cov_1i5576ayr4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1i5576ayr4().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[1]++;
    cov_1i5576ayr4().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[2]++;
    cov_1i5576ayr4().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[3]++;
    cov_1i5576ayr4().s[6]++;
    return PATCH;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1i5576ayr4().f[4]++;
    cov_1i5576ayr4().s[7]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1i5576ayr4().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_1i5576ayr4().s[9]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[5]++;
  cov_1i5576ayr4().s[10]++;
  return /* istanbul ignore next */(cov_1i5576ayr4().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1i5576ayr4().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[6]++;
  cov_1i5576ayr4().s[11]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[12]++, new URL(request.url));
    const type =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[13]++, searchParams.get("type"));
    const accountId =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[14]++, searchParams.get("accountId"));
    const id =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[15]++, searchParams.get("id"));
    // Build filter conditions
    const where =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[16]++, {});
    /* istanbul ignore next */
    cov_1i5576ayr4().s[17]++;
    if (type) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[2][0]++;
      cov_1i5576ayr4().s[18]++;
      where.type = type;
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[2][1]++;
    }
    cov_1i5576ayr4().s[19]++;
    if (accountId) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[3][0]++;
      cov_1i5576ayr4().s[20]++;
      where.accountId = parseInt(accountId, 10);
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[3][1]++;
    }
    cov_1i5576ayr4().s[21]++;
    if (id) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[4][0]++;
      // If ID is provided, fetch a single transaction
      const transaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[22]++, await _prisma.default.transaction.findUnique({
        where: {
          id: parseInt(id, 10)
        },
        include: {
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1i5576ayr4().s[23]++;
      if (!transaction) {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[5][0]++;
        cov_1i5576ayr4().s[24]++;
        return _server.NextResponse.json({
          success: false,
          message: "Transaction not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1i5576ayr4().b[5][1]++;
      }
      // Format the response
      const formattedTransaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[25]++, {
        id: transaction.id,
        date: transaction.date,
        description: transaction.description,
        accountId: transaction.accountId,
        accountName: transaction.account.name,
        toAccountId: transaction.toAccountId,
        toAccountName: transaction.toAccount?.name,
        type: transaction.type,
        amount: transaction.amount,
        reference: transaction.reference,
        category: transaction.category,
        createdAt: transaction.createdAt
      });
      /* istanbul ignore next */
      cov_1i5576ayr4().s[26]++;
      return _server.NextResponse.json({
        success: true,
        data: formattedTransaction
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[4][1]++;
    }
    // Get transactions with account names
    const transactions =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[27]++, await _prisma.default.transaction.findMany({
      where,
      orderBy: {
        date: "desc"
      },
      include: {
        account: {
          select: {
            name: true
          }
        },
        toAccount: {
          select: {
            name: true
          }
        }
      }
    }));
    // Format the response
    const formattedTransactions =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[28]++, transactions.map(transaction => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[7]++;
      cov_1i5576ayr4().s[29]++;
      return {
        id: transaction.id,
        date: transaction.date,
        description: transaction.description,
        accountId: transaction.accountId,
        accountName: transaction.account.name,
        toAccountId: transaction.toAccountId,
        toAccountName: transaction.toAccount?.name,
        type: transaction.type,
        amount: transaction.amount,
        reference: transaction.reference,
        category: transaction.category,
        createdAt: transaction.createdAt
      };
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[30]++;
    return _server.NextResponse.json({
      success: true,
      data: formattedTransactions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[31]++;
    console.error("Error fetching transactions:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[32]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching transactions",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[6][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[8]++;
  cov_1i5576ayr4().s[33]++;
  try {
    const {
      date,
      description,
      accountId,
      toAccountId,
      type,
      amount,
      reference,
      category
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[34]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1i5576ayr4().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][0]++, !date) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][1]++, !description) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][2]++, !accountId) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][3]++, !type) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][4]++, !amount) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[8][5]++, !category)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[7][0]++;
      cov_1i5576ayr4().s[36]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[7][1]++;
    }
    // Validate transaction type
    const validTypes =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[37]++, ["income", "expense", "withdrawal", "transfer"]);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[38]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[9][0]++;
      cov_1i5576ayr4().s[39]++;
      return _server.NextResponse.json({
        success: false,
        message: `Transaction type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[9][1]++;
    }
    // For transfers, toAccountId is required
    cov_1i5576ayr4().s[40]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[11][0]++, type === "transfer") &&
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[11][1]++, !toAccountId)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[10][0]++;
      cov_1i5576ayr4().s[41]++;
      return _server.NextResponse.json({
        success: false,
        message: "Destination account is required for transfers"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[10][1]++;
    }
    // Start a transaction to ensure data consistency
    const result =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[42]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[9]++;
      // Create the transaction
      const newTransaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[43]++, await tx.transaction.create({
        data: {
          date: new Date(date),
          description,
          accountId: parseInt(accountId, 10),
          toAccountId: toAccountId ?
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[12][0]++, parseInt(toAccountId, 10)) :
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[12][1]++, null),
          type,
          amount: parseFloat(amount),
          reference,
          category
        },
        include: {
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      // Update account balances based on transaction type
      /* istanbul ignore next */
      cov_1i5576ayr4().s[44]++;
      if (type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[13][0]++;
        cov_1i5576ayr4().s[45]++;
        await tx.account.update({
          where: {
            id: parseInt(accountId, 10)
          },
          data: {
            balance: {
              increment: parseFloat(amount)
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[13][1]++;
        cov_1i5576ayr4().s[46]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[15][0]++, type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[15][1]++, type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[14][0]++;
          cov_1i5576ayr4().s[47]++;
          await tx.account.update({
            where: {
              id: parseInt(accountId, 10)
            },
            data: {
              balance: {
                decrement: parseFloat(amount)
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[14][1]++;
          cov_1i5576ayr4().s[48]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[17][0]++, type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[17][1]++, toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[16][0]++;
            cov_1i5576ayr4().s[49]++;
            // For transfers, decrease from account and increase to account
            await tx.account.update({
              where: {
                id: parseInt(accountId, 10)
              },
              data: {
                balance: {
                  decrement: parseFloat(amount)
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[50]++;
            await tx.account.update({
              where: {
                id: parseInt(toAccountId, 10)
              },
              data: {
                balance: {
                  increment: parseFloat(amount)
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[16][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1i5576ayr4().s[51]++;
      return {
        ...newTransaction,
        accountName: newTransaction.account.name,
        toAccountName: newTransaction.toAccount?.name
      };
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[52]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction created successfully",
      data: result
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[53]++;
    console.error("Error creating transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[54]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[18][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[10]++;
  cov_1i5576ayr4().s[55]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[56]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[57]++, searchParams.get("id"));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[58]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[19][0]++;
      cov_1i5576ayr4().s[59]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[19][1]++;
    }
    // Get the transaction details first to reverse the account balance changes
    const transaction =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[60]++, await _prisma.default.transaction.findUnique({
      where: {
        id: parseInt(id, 10)
      },
      include: {
        account: true,
        toAccount: true
      }
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[61]++;
    if (!transaction) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[20][0]++;
      cov_1i5576ayr4().s[62]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[20][1]++;
    }
    // Start a transaction to ensure data consistency
    cov_1i5576ayr4().s[63]++;
    await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[11]++;
      cov_1i5576ayr4().s[64]++;
      // Reverse the account balance changes based on transaction type
      if (transaction.type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[21][0]++;
        cov_1i5576ayr4().s[65]++;
        await tx.account.update({
          where: {
            id: transaction.accountId
          },
          data: {
            balance: {
              decrement: transaction.amount
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[21][1]++;
        cov_1i5576ayr4().s[66]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[23][0]++, transaction.type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[23][1]++, transaction.type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[22][0]++;
          cov_1i5576ayr4().s[67]++;
          await tx.account.update({
            where: {
              id: transaction.accountId
            },
            data: {
              balance: {
                increment: transaction.amount
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[22][1]++;
          cov_1i5576ayr4().s[68]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[25][0]++, transaction.type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[25][1]++, transaction.toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[24][0]++;
            cov_1i5576ayr4().s[69]++;
            // For transfers, increase from account and decrease to account
            await tx.account.update({
              where: {
                id: transaction.accountId
              },
              data: {
                balance: {
                  increment: transaction.amount
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[70]++;
            await tx.account.update({
              where: {
                id: transaction.toAccountId
              },
              data: {
                balance: {
                  decrement: transaction.amount
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[24][1]++;
          }
        }
      }
      // Delete the transaction
      /* istanbul ignore next */
      cov_1i5576ayr4().s[71]++;
      await tx.transaction.delete({
        where: {
          id: parseInt(id, 10)
        }
      });
    });
    /* istanbul ignore next */
    cov_1i5576ayr4().s[72]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[73]++;
    console.error("Error deleting transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[74]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[26][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_1i5576ayr4().f[12]++;
  cov_1i5576ayr4().s[75]++;
  try {
    const {
      id,
      date,
      description,
      accountId,
      toAccountId,
      type,
      amount,
      reference,
      category
    } =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[76]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1i5576ayr4().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][0]++, !id) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][1]++, !date) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][2]++, !description) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][3]++, !accountId) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][4]++, !type) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][5]++, !amount) ||
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[28][6]++, !category)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[27][0]++;
      cov_1i5576ayr4().s[78]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[27][1]++;
    }
    // Validate transaction type
    const validTypes =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[79]++, ["income", "expense", "withdrawal", "transfer"]);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[80]++;
    if (!validTypes.includes(type)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[29][0]++;
      cov_1i5576ayr4().s[81]++;
      return _server.NextResponse.json({
        success: false,
        message: `Transaction type must be one of: ${validTypes.join(", ")}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[29][1]++;
    }
    // For transfers, toAccountId is required
    cov_1i5576ayr4().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[31][0]++, type === "transfer") &&
    /* istanbul ignore next */
    (cov_1i5576ayr4().b[31][1]++, !toAccountId)) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[30][0]++;
      cov_1i5576ayr4().s[83]++;
      return _server.NextResponse.json({
        success: false,
        message: "Destination account is required for transfers"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[30][1]++;
    }
    // Get the original transaction to calculate balance adjustments
    const originalTransaction =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[84]++, await _prisma.default.transaction.findUnique({
      where: {
        id: parseInt(id, 10)
      }
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[85]++;
    if (!originalTransaction) {
      /* istanbul ignore next */
      cov_1i5576ayr4().b[32][0]++;
      cov_1i5576ayr4().s[86]++;
      return _server.NextResponse.json({
        success: false,
        message: "Transaction not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1i5576ayr4().b[32][1]++;
    }
    // Start a transaction to ensure data consistency
    const result =
    /* istanbul ignore next */
    (cov_1i5576ayr4().s[87]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_1i5576ayr4().f[13]++;
      cov_1i5576ayr4().s[88]++;
      // First, reverse the original transaction's effect on account balances
      if (originalTransaction.type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[33][0]++;
        cov_1i5576ayr4().s[89]++;
        await tx.account.update({
          where: {
            id: originalTransaction.accountId
          },
          data: {
            balance: {
              decrement: originalTransaction.amount
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[33][1]++;
        cov_1i5576ayr4().s[90]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[35][0]++, originalTransaction.type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[35][1]++, originalTransaction.type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[34][0]++;
          cov_1i5576ayr4().s[91]++;
          await tx.account.update({
            where: {
              id: originalTransaction.accountId
            },
            data: {
              balance: {
                increment: originalTransaction.amount
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[34][1]++;
          cov_1i5576ayr4().s[92]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[37][0]++, originalTransaction.type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[37][1]++, originalTransaction.toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[36][0]++;
            cov_1i5576ayr4().s[93]++;
            // For transfers, increase from account and decrease to account
            await tx.account.update({
              where: {
                id: originalTransaction.accountId
              },
              data: {
                balance: {
                  increment: originalTransaction.amount
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[94]++;
            await tx.account.update({
              where: {
                id: originalTransaction.toAccountId
              },
              data: {
                balance: {
                  decrement: originalTransaction.amount
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[36][1]++;
          }
        }
      }
      // Update the transaction
      const updatedTransaction =
      /* istanbul ignore next */
      (cov_1i5576ayr4().s[95]++, await tx.transaction.update({
        where: {
          id: parseInt(id, 10)
        },
        data: {
          date: new Date(date),
          description,
          accountId: parseInt(accountId, 10),
          toAccountId: toAccountId ?
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[38][0]++, parseInt(toAccountId, 10)) :
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[38][1]++, null),
          type,
          amount: parseFloat(amount),
          reference,
          category
        },
        include: {
          account: {
            select: {
              name: true
            }
          },
          toAccount: {
            select: {
              name: true
            }
          }
        }
      }));
      // Now apply the new transaction's effect on account balances
      /* istanbul ignore next */
      cov_1i5576ayr4().s[96]++;
      if (type === "income") {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[39][0]++;
        cov_1i5576ayr4().s[97]++;
        await tx.account.update({
          where: {
            id: parseInt(accountId, 10)
          },
          data: {
            balance: {
              increment: parseFloat(amount)
            }
          }
        });
      } else {
        /* istanbul ignore next */
        cov_1i5576ayr4().b[39][1]++;
        cov_1i5576ayr4().s[98]++;
        if (
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[41][0]++, type === "expense") ||
        /* istanbul ignore next */
        (cov_1i5576ayr4().b[41][1]++, type === "withdrawal")) {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[40][0]++;
          cov_1i5576ayr4().s[99]++;
          await tx.account.update({
            where: {
              id: parseInt(accountId, 10)
            },
            data: {
              balance: {
                decrement: parseFloat(amount)
              }
            }
          });
        } else {
          /* istanbul ignore next */
          cov_1i5576ayr4().b[40][1]++;
          cov_1i5576ayr4().s[100]++;
          if (
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[43][0]++, type === "transfer") &&
          /* istanbul ignore next */
          (cov_1i5576ayr4().b[43][1]++, toAccountId)) {
            /* istanbul ignore next */
            cov_1i5576ayr4().b[42][0]++;
            cov_1i5576ayr4().s[101]++;
            // For transfers, decrease from account and increase to account
            await tx.account.update({
              where: {
                id: parseInt(accountId, 10)
              },
              data: {
                balance: {
                  decrement: parseFloat(amount)
                }
              }
            });
            /* istanbul ignore next */
            cov_1i5576ayr4().s[102]++;
            await tx.account.update({
              where: {
                id: parseInt(toAccountId, 10)
              },
              data: {
                balance: {
                  increment: parseFloat(amount)
                }
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_1i5576ayr4().b[42][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1i5576ayr4().s[103]++;
      return {
        ...updatedTransaction,
        accountName: updatedTransaction.account.name,
        toAccountName: updatedTransaction.toAccount?.name
      };
    }));
    /* istanbul ignore next */
    cov_1i5576ayr4().s[104]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transaction updated successfully",
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1i5576ayr4().s[105]++;
    console.error("Error updating transaction:", error);
    /* istanbul ignore next */
    cov_1i5576ayr4().s[106]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating transaction",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[44][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1i5576ayr4().b[44][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUxFVEUiLCJjb3ZfMWk1NTc2YXlyNCIsImYiLCJzIiwiR0VUIiwiUEFUQ0giLCJQT1NUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsInR5cGUiLCJnZXQiLCJhY2NvdW50SWQiLCJpZCIsIndoZXJlIiwiYiIsInBhcnNlSW50IiwidHJhbnNhY3Rpb24iLCJfcHJpc21hIiwiZGVmYXVsdCIsImZpbmRVbmlxdWUiLCJpbmNsdWRlIiwiYWNjb3VudCIsInNlbGVjdCIsIm5hbWUiLCJ0b0FjY291bnQiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwic3RhdHVzIiwiZm9ybWF0dGVkVHJhbnNhY3Rpb24iLCJkYXRlIiwiZGVzY3JpcHRpb24iLCJhY2NvdW50TmFtZSIsInRvQWNjb3VudElkIiwidG9BY2NvdW50TmFtZSIsImFtb3VudCIsInJlZmVyZW5jZSIsImNhdGVnb3J5IiwiY3JlYXRlZEF0IiwiZGF0YSIsInRyYW5zYWN0aW9ucyIsImZpbmRNYW55Iiwib3JkZXJCeSIsImZvcm1hdHRlZFRyYW5zYWN0aW9ucyIsIm1hcCIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiU3RyaW5nIiwidmFsaWRUeXBlcyIsImluY2x1ZGVzIiwiam9pbiIsInJlc3VsdCIsIiR0cmFuc2FjdGlvbiIsInR4IiwibmV3VHJhbnNhY3Rpb24iLCJjcmVhdGUiLCJEYXRlIiwicGFyc2VGbG9hdCIsInVwZGF0ZSIsImJhbGFuY2UiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJkZWxldGUiLCJvcmlnaW5hbFRyYW5zYWN0aW9uIiwidXBkYXRlZFRyYW5zYWN0aW9uIl0sInNvdXJjZXMiOlsiL1VzZXJzL3NhY2hpbi9Eb2N1bWVudHMvbWQtc3BvcnRzLS9zcmMvYXBwL2FwaS9hY2NvdW50aW5nL3RyYW5zYWN0aW9ucy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgcHJpc21hIGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbi8vIEdFVDogRmV0Y2ggYWxsIHRyYW5zYWN0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICBjb25zdCB0eXBlID0gc2VhcmNoUGFyYW1zLmdldCgndHlwZScpO1xuICAgICAgICBjb25zdCBhY2NvdW50SWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdhY2NvdW50SWQnKTtcbiAgICAgICAgY29uc3QgaWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdpZCcpO1xuXG4gICAgICAgIC8vIEJ1aWxkIGZpbHRlciBjb25kaXRpb25zXG4gICAgICAgIGNvbnN0IHdoZXJlOiBhbnkgPSB7fTtcblxuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgd2hlcmUudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWNjb3VudElkKSB7XG4gICAgICAgICAgICB3aGVyZS5hY2NvdW50SWQgPSBwYXJzZUludChhY2NvdW50SWQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgLy8gSWYgSUQgaXMgcHJvdmlkZWQsIGZldGNoIGEgc2luZ2xlIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHByaXNtYS50cmFuc2FjdGlvbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoaWQsIDEwKSB9LFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0FjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUcmFuc2FjdGlvbiBub3QgZm91bmQnXG4gICAgICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRm9ybWF0IHRoZSByZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVHJhbnNhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHRyYW5zYWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgIGRhdGU6IHRyYW5zYWN0aW9uLmRhdGUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYW5zYWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGFjY291bnRJZDogdHJhbnNhY3Rpb24uYWNjb3VudElkLFxuICAgICAgICAgICAgICAgIGFjY291bnROYW1lOiB0cmFuc2FjdGlvbi5hY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgdG9BY2NvdW50SWQ6IHRyYW5zYWN0aW9uLnRvQWNjb3VudElkLFxuICAgICAgICAgICAgICAgIHRvQWNjb3VudE5hbWU6IHRyYW5zYWN0aW9uLnRvQWNjb3VudD8ubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0cmFuc2FjdGlvbi50eXBlLFxuICAgICAgICAgICAgICAgIGFtb3VudDogdHJhbnNhY3Rpb24uYW1vdW50LFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogdHJhbnNhY3Rpb24ucmVmZXJlbmNlLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiB0cmFuc2FjdGlvbi5jYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHRyYW5zYWN0aW9uLmNyZWF0ZWRBdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1hdHRlZFRyYW5zYWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0cmFuc2FjdGlvbnMgd2l0aCBhY2NvdW50IG5hbWVzXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGF3YWl0IHByaXNtYS50cmFuc2FjdGlvbi5maW5kTWFueSh7XG4gICAgICAgICAgICB3aGVyZSxcbiAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICBkYXRlOiAnZGVzYydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9BY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3JtYXQgdGhlIHJlc3BvbnNlXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFRyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9ucy5tYXAodHJhbnNhY3Rpb24gPT4gKHtcbiAgICAgICAgICAgIGlkOiB0cmFuc2FjdGlvbi5pZCxcbiAgICAgICAgICAgIGRhdGU6IHRyYW5zYWN0aW9uLmRhdGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhbnNhY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBhY2NvdW50SWQ6IHRyYW5zYWN0aW9uLmFjY291bnRJZCxcbiAgICAgICAgICAgIGFjY291bnROYW1lOiB0cmFuc2FjdGlvbi5hY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICB0b0FjY291bnRJZDogdHJhbnNhY3Rpb24udG9BY2NvdW50SWQsXG4gICAgICAgICAgICB0b0FjY291bnROYW1lOiB0cmFuc2FjdGlvbi50b0FjY291bnQ/Lm5hbWUsXG4gICAgICAgICAgICB0eXBlOiB0cmFuc2FjdGlvbi50eXBlLFxuICAgICAgICAgICAgYW1vdW50OiB0cmFuc2FjdGlvbi5hbW91bnQsXG4gICAgICAgICAgICByZWZlcmVuY2U6IHRyYW5zYWN0aW9uLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiB0cmFuc2FjdGlvbi5jYXRlZ29yeSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogdHJhbnNhY3Rpb24uY3JlYXRlZEF0XG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGE6IGZvcm1hdHRlZFRyYW5zYWN0aW9uc1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0cmFuc2FjdGlvbnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgdHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICB9XG59XG5cbi8vIFBPU1Q6IENyZWF0ZSBhIG5ldyB0cmFuc2FjdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0ZSwgZGVzY3JpcHRpb24sIGFjY291bnRJZCwgdG9BY2NvdW50SWQsIHR5cGUsIGFtb3VudCwgcmVmZXJlbmNlLCBjYXRlZ29yeSB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgIGlmICghZGF0ZSB8fCAhZGVzY3JpcHRpb24gfHwgIWFjY291bnRJZCB8fCAhdHlwZSB8fCAhYW1vdW50IHx8ICFjYXRlZ29yeSkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWlzc2luZyByZXF1aXJlZCBmaWVsZHMnXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgdHJhbnNhY3Rpb24gdHlwZVxuICAgICAgICBjb25zdCB2YWxpZFR5cGVzID0gWydpbmNvbWUnLCAnZXhwZW5zZScsICd3aXRoZHJhd2FsJywgJ3RyYW5zZmVyJ107XG4gICAgICAgIGlmICghdmFsaWRUeXBlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVHJhbnNhY3Rpb24gdHlwZSBtdXN0IGJlIG9uZSBvZjogJHt2YWxpZFR5cGVzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciB0cmFuc2ZlcnMsIHRvQWNjb3VudElkIGlzIHJlcXVpcmVkXG4gICAgICAgIGlmICh0eXBlID09PSAndHJhbnNmZXInICYmICF0b0FjY291bnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVzdGluYXRpb24gYWNjb3VudCBpcyByZXF1aXJlZCBmb3IgdHJhbnNmZXJzJ1xuICAgICAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IGEgdHJhbnNhY3Rpb24gdG8gZW5zdXJlIGRhdGEgY29uc2lzdGVuY3lcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLiR0cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IG5ld1RyYW5zYWN0aW9uID0gYXdhaXQgdHgudHJhbnNhY3Rpb24uY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGUpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudElkOiBwYXJzZUludChhY2NvdW50SWQsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgdG9BY2NvdW50SWQ6IHRvQWNjb3VudElkID8gcGFyc2VJbnQodG9BY2NvdW50SWQsIDEwKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogcGFyc2VGbG9hdChhbW91bnQpLFxuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9BY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGFjY291bnQgYmFsYW5jZXMgYmFzZWQgb24gdHJhbnNhY3Rpb24gdHlwZVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpbmNvbWUnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoYWNjb3VudElkLCAxMCkgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudDogcGFyc2VGbG9hdChhbW91bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2V4cGVuc2UnIHx8IHR5cGUgPT09ICd3aXRoZHJhd2FsJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGFjY291bnRJZCwgMTApIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNyZW1lbnQ6IHBhcnNlRmxvYXQoYW1vdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0cmFuc2ZlcicgJiYgdG9BY2NvdW50SWQpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgdHJhbnNmZXJzLCBkZWNyZWFzZSBmcm9tIGFjY291bnQgYW5kIGluY3JlYXNlIHRvIGFjY291bnRcbiAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXJzZUludChhY2NvdW50SWQsIDEwKSB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVtZW50OiBwYXJzZUZsb2F0KGFtb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQodG9BY2NvdW50SWQsIDEwKSB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50OiBwYXJzZUZsb2F0KGFtb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLm5ld1RyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgIGFjY291bnROYW1lOiBuZXdUcmFuc2FjdGlvbi5hY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgdG9BY2NvdW50TmFtZTogbmV3VHJhbnNhY3Rpb24udG9BY2NvdW50Py5uYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUcmFuc2FjdGlvbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICBkYXRhOiByZXN1bHRcbiAgICAgICAgfSwgeyBzdGF0dXM6IDIwMSB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyB0cmFuc2FjdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBjcmVhdGluZyB0cmFuc2FjdGlvbicsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxufVxuXG4vLyBERUxFVEU6IERlbGV0ZSBhIHRyYW5zYWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGNvbnN0IGlkID0gc2VhcmNoUGFyYW1zLmdldCgnaWQnKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUcmFuc2FjdGlvbiBJRCBpcyByZXF1aXJlZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMgZmlyc3QgdG8gcmV2ZXJzZSB0aGUgYWNjb3VudCBiYWxhbmNlIGNoYW5nZXNcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBwcmlzbWEudHJhbnNhY3Rpb24uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoaWQsIDEwKSB9LFxuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgIGFjY291bnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdG9BY2NvdW50OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RyYW5zYWN0aW9uIG5vdCBmb3VuZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCBhIHRyYW5zYWN0aW9uIHRvIGVuc3VyZSBkYXRhIGNvbnNpc3RlbmN5XG4gICAgICAgIGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgICAgICAgICAvLyBSZXZlcnNlIHRoZSBhY2NvdW50IGJhbGFuY2UgY2hhbmdlcyBiYXNlZCBvbiB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb24udHlwZSA9PT0gJ2luY29tZScpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiB0cmFuc2FjdGlvbi5hY2NvdW50SWQgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3JlbWVudDogdHJhbnNhY3Rpb24uYW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNhY3Rpb24udHlwZSA9PT0gJ2V4cGVuc2UnIHx8IHRyYW5zYWN0aW9uLnR5cGUgPT09ICd3aXRoZHJhd2FsJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHRyYW5zYWN0aW9uLmFjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50OiB0cmFuc2FjdGlvbi5hbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSAndHJhbnNmZXInICYmIHRyYW5zYWN0aW9uLnRvQWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIHRyYW5zZmVycywgaW5jcmVhc2UgZnJvbSBhY2NvdW50IGFuZCBkZWNyZWFzZSB0byBhY2NvdW50XG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogdHJhbnNhY3Rpb24uYWNjb3VudElkIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQ6IHRyYW5zYWN0aW9uLmFtb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiB0cmFuc2FjdGlvbi50b0FjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVtZW50OiB0cmFuc2FjdGlvbi5hbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWxldGUgdGhlIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBhd2FpdCB0eC50cmFuc2FjdGlvbi5kZWxldGUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXJzZUludChpZCwgMTApIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUcmFuc2FjdGlvbiBkZWxldGVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgdHJhbnNhY3Rpb246JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZGVsZXRpbmcgdHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICAgIH1cbn1cblxuLy8gUEFUQ0g6IFVwZGF0ZSBhIHRyYW5zYWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUEFUQ0gocmVxdWVzdDogUmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgaWQsIGRhdGUsIGRlc2NyaXB0aW9uLCBhY2NvdW50SWQsIHRvQWNjb3VudElkLCB0eXBlLCBhbW91bnQsIHJlZmVyZW5jZSwgY2F0ZWdvcnkgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgICBpZiAoIWlkIHx8ICFkYXRlIHx8ICFkZXNjcmlwdGlvbiB8fCAhYWNjb3VudElkIHx8ICF0eXBlIHx8ICFhbW91bnQgfHwgIWNhdGVnb3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdNaXNzaW5nIHJlcXVpcmVkIGZpZWxkcydcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWxpZGF0ZSB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICAgIGNvbnN0IHZhbGlkVHlwZXMgPSBbJ2luY29tZScsICdleHBlbnNlJywgJ3dpdGhkcmF3YWwnLCAndHJhbnNmZXInXTtcbiAgICAgICAgaWYgKCF2YWxpZFR5cGVzLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUcmFuc2FjdGlvbiB0eXBlIG11c3QgYmUgb25lIG9mOiAke3ZhbGlkVHlwZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIHRyYW5zZmVycywgdG9BY2NvdW50SWQgaXMgcmVxdWlyZWRcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0cmFuc2ZlcicgJiYgIXRvQWNjb3VudElkKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdEZXN0aW5hdGlvbiBhY2NvdW50IGlzIHJlcXVpcmVkIGZvciB0cmFuc2ZlcnMnXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiB0byBjYWxjdWxhdGUgYmFsYW5jZSBhZGp1c3RtZW50c1xuICAgICAgICBjb25zdCBvcmlnaW5hbFRyYW5zYWN0aW9uID0gYXdhaXQgcHJpc21hLnRyYW5zYWN0aW9uLmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGlkLCAxMCkgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW9yaWdpbmFsVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RyYW5zYWN0aW9uIG5vdCBmb3VuZCdcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCBhIHRyYW5zYWN0aW9uIHRvIGVuc3VyZSBkYXRhIGNvbnNpc3RlbmN5XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgcmV2ZXJzZSB0aGUgb3JpZ2luYWwgdHJhbnNhY3Rpb24ncyBlZmZlY3Qgb24gYWNjb3VudCBiYWxhbmNlc1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsVHJhbnNhY3Rpb24udHlwZSA9PT0gJ2luY29tZScpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBvcmlnaW5hbFRyYW5zYWN0aW9uLmFjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVtZW50OiBvcmlnaW5hbFRyYW5zYWN0aW9uLmFtb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsVHJhbnNhY3Rpb24udHlwZSA9PT0gJ2V4cGVuc2UnIHx8IG9yaWdpbmFsVHJhbnNhY3Rpb24udHlwZSA9PT0gJ3dpdGhkcmF3YWwnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogb3JpZ2luYWxUcmFuc2FjdGlvbi5hY2NvdW50SWQgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudDogb3JpZ2luYWxUcmFuc2FjdGlvbi5hbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbFRyYW5zYWN0aW9uLnR5cGUgPT09ICd0cmFuc2ZlcicgJiYgb3JpZ2luYWxUcmFuc2FjdGlvbi50b0FjY291bnRJZCkge1xuICAgICAgICAgICAgICAgIC8vIEZvciB0cmFuc2ZlcnMsIGluY3JlYXNlIGZyb20gYWNjb3VudCBhbmQgZGVjcmVhc2UgdG8gYWNjb3VudFxuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IG9yaWdpbmFsVHJhbnNhY3Rpb24uYWNjb3VudElkIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQ6IG9yaWdpbmFsVHJhbnNhY3Rpb24uYW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IG9yaWdpbmFsVHJhbnNhY3Rpb24udG9BY2NvdW50SWQgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3JlbWVudDogb3JpZ2luYWxUcmFuc2FjdGlvbi5hbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkVHJhbnNhY3Rpb24gPSBhd2FpdCB0eC50cmFuc2FjdGlvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXJzZUludChpZCwgMTApIH0sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShkYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRJZDogcGFyc2VJbnQoYWNjb3VudElkLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHRvQWNjb3VudElkOiB0b0FjY291bnRJZCA/IHBhcnNlSW50KHRvQWNjb3VudElkLCAxMCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IHBhcnNlRmxvYXQoYW1vdW50KSxcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE5vdyBhcHBseSB0aGUgbmV3IHRyYW5zYWN0aW9uJ3MgZWZmZWN0IG9uIGFjY291bnQgYmFsYW5jZXNcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5jb21lJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KGFjY291bnRJZCwgMTApIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQ6IHBhcnNlRmxvYXQoYW1vdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdleHBlbnNlJyB8fCB0eXBlID09PSAnd2l0aGRyYXdhbCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0eC5hY2NvdW50LnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBwYXJzZUludChhY2NvdW50SWQsIDEwKSB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcmVtZW50OiBwYXJzZUZsb2F0KGFtb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndHJhbnNmZXInICYmIHRvQWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIHRyYW5zZmVycywgZGVjcmVhc2UgZnJvbSBhY2NvdW50IGFuZCBpbmNyZWFzZSB0byBhY2NvdW50XG4gICAgICAgICAgICAgICAgYXdhaXQgdHguYWNjb3VudC51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogcGFyc2VJbnQoYWNjb3VudElkLCAxMCkgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY3JlbWVudDogcGFyc2VGbG9hdChhbW91bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHR4LmFjY291bnQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcnNlSW50KHRvQWNjb3VudElkLCAxMCkgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudDogcGFyc2VGbG9hdChhbW91bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi51cGRhdGVkVHJhbnNhY3Rpb24sXG4gICAgICAgICAgICAgICAgYWNjb3VudE5hbWU6IHVwZGF0ZWRUcmFuc2FjdGlvbi5hY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgdG9BY2NvdW50TmFtZTogdXBkYXRlZFRyYW5zYWN0aW9uLnRvQWNjb3VudD8ubmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVHJhbnNhY3Rpb24gdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHRyYW5zYWN0aW9uOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHVwZGF0aW5nIHRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICB9XG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBZ1BzQkEsTUFBTSxXQUFBQSxDQUFBO0lBQUE7SUFBQUMsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUFOSCxNQUFBOztFQTVPQUksR0FBRyxXQUFBQSxDQUFBO0lBQUE7SUFBQUgsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUFIQyxHQUFBOztFQXVVQUMsS0FBSyxXQUFBQSxDQUFBO0lBQUE7SUFBQUosY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FB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