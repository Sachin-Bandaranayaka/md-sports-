8a5d49e406761bd31f2da31aced0d750
// @ts-nocheck
"use strict";

/* istanbul ignore next */
function cov_1u0iw1jprc() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/auditService.ts";
  var hash = "eacf6fe452c787b0fff859b54c9eb383820a9121";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/auditService.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 40
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "9": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "12": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "13": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "14": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 63
        }
      },
      "15": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "16": {
        start: {
          line: 82,
          column: 22
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "17": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "18": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 117,
          column: 10
        }
      },
      "19": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 40
        }
      },
      "20": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 86
        }
      },
      "21": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 40
        }
      },
      "22": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "23": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 98
        }
      },
      "24": {
        start: {
          line: 119,
          column: 68
        },
        end: {
          line: 119,
          column: 79
        }
      },
      "25": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "26": {
        start: {
          line: 121,
          column: 26
        },
        end: {
          line: 132,
          column: 14
        }
      },
      "27": {
        start: {
          line: 124,
          column: 46
        },
        end: {
          line: 124,
          column: 59
        }
      },
      "28": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 136,
          column: 19
        }
      },
      "29": {
        start: {
          line: 133,
          column: 62
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "30": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "31": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "32": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 65
        }
      },
      "33": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "34": {
        start: {
          line: 151,
          column: 22
        },
        end: {
          line: 151,
          column: 24
        }
      },
      "35": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "36": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "37": {
        start: {
          line: 155,
          column: 31
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "38": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "39": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "40": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "41": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "42": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 186,
          column: 18
        }
      },
      "43": {
        start: {
          line: 188,
          column: 28
        },
        end: {
          line: 188,
          column: 46
        }
      },
      "44": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "45": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 193,
          column: 18
        }
      },
      "46": {
        start: {
          line: 196,
          column: 33
        },
        end: {
          line: 196,
          column: 102
        }
      },
      "47": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "48": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 36
        }
      },
      "49": {
        start: {
          line: 201,
          column: 35
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "50": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "51": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "52": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 230,
          column: 14
        }
      },
      "53": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 60
        }
      },
      "54": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "55": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "56": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "57": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "58": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 264,
          column: 26
        }
      },
      "59": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 280,
          column: 23
        }
      },
      "60": {
        start: {
          line: 281,
          column: 20
        },
        end: {
          line: 281,
          column: 26
        }
      },
      "61": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 296,
          column: 23
        }
      },
      "62": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 26
        }
      },
      "63": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 305,
          column: 23
        }
      },
      "64": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 26
        }
      },
      "65": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 316,
          column: 23
        }
      },
      "66": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 26
        }
      },
      "67": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 322,
          column: 22
        }
      },
      "68": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 328,
          column: 14
        }
      },
      "69": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 65
        }
      },
      "70": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 334,
          column: 14
        }
      },
      "71": {
        start: {
          line: 340,
          column: 24
        },
        end: {
          line: 372,
          column: 10
        }
      },
      "72": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 23
        }
      },
      "73": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 386,
          column: 11
        }
      },
      "74": {
        start: {
          line: 391,
          column: 27
        },
        end: {
          line: 391,
          column: 37
        }
      },
      "75": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 59
        }
      },
      "76": {
        start: {
          line: 393,
          column: 23
        },
        end: {
          line: 404,
          column: 10
        }
      },
      "77": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 28
        }
      },
      "78": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "79": {
        start: {
          line: 411,
          column: 35
        },
        end: {
          line: 420,
          column: 14
        }
      },
      "80": {
        start: {
          line: 422,
          column: 31
        },
        end: {
          line: 425,
          column: 69
        }
      },
      "81": {
        start: {
          line: 423,
          column: 32
        },
        end: {
          line: 423,
          column: 45
        }
      },
      "82": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 67
        }
      },
      "83": {
        start: {
          line: 425,
          column: 28
        },
        end: {
          line: 425,
          column: 42
        }
      },
      "84": {
        start: {
          line: 425,
          column: 57
        },
        end: {
          line: 425,
          column: 68
        }
      },
      "85": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 30
        }
      },
      "86": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 84
        }
      },
      "87": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 22
        }
      },
      "88": {
        start: {
          line: 433,
          column: 21
        },
        end: {
          line: 433,
          column: 47
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 17
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 33,
            column: 6
          },
          end: {
            line: 33,
            column: 7
          }
        },
        loc: {
          start: {
            line: 33,
            column: 29
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 33
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 7
          }
        },
        loc: {
          start: {
            line: 62,
            column: 82
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 62
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 6
          },
          end: {
            line: 81,
            column: 7
          }
        },
        loc: {
          start: {
            line: 81,
            column: 63
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 102,
            column: 45
          },
          end: {
            line: 102,
            column: 46
          }
        },
        loc: {
          start: {
            line: 102,
            column: 53
          },
          end: {
            line: 105,
            column: 9
          }
        },
        line: 102
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 105,
            column: 15
          },
          end: {
            line: 105,
            column: 16
          }
        },
        loc: {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 117,
            column: 9
          }
        },
        line: 105
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 119,
            column: 63
          },
          end: {
            line: 119,
            column: 64
          }
        },
        loc: {
          start: {
            line: 119,
            column: 68
          },
          end: {
            line: 119,
            column: 79
          }
        },
        line: 119
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 124,
            column: 40
          },
          end: {
            line: 124,
            column: 41
          }
        },
        loc: {
          start: {
            line: 124,
            column: 46
          },
          end: {
            line: 124,
            column: 59
          }
        },
        line: 124
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 133,
            column: 57
          },
          end: {
            line: 133,
            column: 58
          }
        },
        loc: {
          start: {
            line: 133,
            column: 62
          },
          end: {
            line: 136,
            column: 17
          }
        },
        line: 133
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 137,
            column: 36
          },
          end: {
            line: 137,
            column: 37
          }
        },
        loc: {
          start: {
            line: 137,
            column: 44
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 137
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 150,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        },
        loc: {
          start: {
            line: 150,
            column: 60
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 150
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 175,
            column: 7
          }
        },
        loc: {
          start: {
            line: 175,
            column: 44
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 175
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 241,
            column: 6
          },
          end: {
            line: 241,
            column: 7
          }
        },
        loc: {
          start: {
            line: 241,
            column: 52
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 241
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 59
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 339
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 377,
            column: 6
          },
          end: {
            line: 377,
            column: 7
          }
        },
        loc: {
          start: {
            line: 377,
            column: 43
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 377
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 390,
            column: 6
          },
          end: {
            line: 390,
            column: 7
          }
        },
        loc: {
          start: {
            line: 390,
            column: 49
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 390
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 409,
            column: 6
          },
          end: {
            line: 409,
            column: 7
          }
        },
        loc: {
          start: {
            line: 409,
            column: 40
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 409
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 422,
            column: 53
          },
          end: {
            line: 422,
            column: 54
          }
        },
        loc: {
          start: {
            line: 422,
            column: 62
          },
          end: {
            line: 425,
            column: 13
          }
        },
        line: 422
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 425,
            column: 19
          },
          end: {
            line: 425,
            column: 20
          }
        },
        loc: {
          start: {
            line: 425,
            column: 28
          },
          end: {
            line: 425,
            column: 42
          }
        },
        line: 425
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 425,
            column: 51
          },
          end: {
            line: 425,
            column: 52
          }
        },
        loc: {
          start: {
            line: 425,
            column: 57
          },
          end: {
            line: 425,
            column: 68
          }
        },
        line: 425
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 27
          },
          end: {
            line: 39,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 27
          },
          end: {
            line: 39,
            column: 42
          }
        }, {
          start: {
            line: 39,
            column: 46
          },
          end: {
            line: 39,
            column: 51
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 42,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 42,
            column: 44
          }
        }, {
          start: {
            line: 42,
            column: 48
          },
          end: {
            line: 42,
            column: 53
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 63
          },
          end: {
            line: 62,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 76
          },
          end: {
            line: 62,
            column: 80
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 39
          },
          end: {
            line: 81,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 47
          },
          end: {
            line: 81,
            column: 49
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 51
          },
          end: {
            line: 81,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 60
          },
          end: {
            line: 81,
            column: 61
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 84,
            column: 21
          }
        }, {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 86,
            column: 13
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 37
          }
        }, {
          start: {
            line: 104,
            column: 41
          },
          end: {
            line: 104,
            column: 60
          }
        }, {
          start: {
            line: 104,
            column: 64
          },
          end: {
            line: 104,
            column: 85
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 48
          },
          end: {
            line: 112,
            column: 75
          }
        }, {
          start: {
            line: 112,
            column: 78
          },
          end: {
            line: 112,
            column: 92
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 113,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 113,
            column: 45
          }
        }, {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 60
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 115,
            column: 28
          },
          end: {
            line: 115,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 28
          },
          end: {
            line: 115,
            column: 47
          }
        }, {
          start: {
            line: 115,
            column: 51
          },
          end: {
            line: 115,
            column: 56
          }
        }],
        line: 115
      },
      "11": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 20
          },
          end: {
            line: 138,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 20
          },
          end: {
            line: 138,
            column: 34
          }
        }, {
          start: {
            line: 138,
            column: 38
          },
          end: {
            line: 138,
            column: 61
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 150,
            column: 36
          },
          end: {
            line: 150,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 150,
            column: 46
          }
        }],
        line: 150
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 48
          },
          end: {
            line: 150,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 150,
            column: 57
          },
          end: {
            line: 150,
            column: 58
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 35
          }
        }, {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 189,
            column: 59
          }
        }, {
          start: {
            line: 189,
            column: 63
          },
          end: {
            line: 189,
            column: 83
          }
        }],
        line: 189
      },
      "20": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "21": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 264,
            column: 26
          }
        }, {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 281,
            column: 26
          }
        }, {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 297,
            column: 26
          }
        }, {
          start: {
            line: 298,
            column: 16
          },
          end: {
            line: 306,
            column: 26
          }
        }, {
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 317,
            column: 26
          }
        }, {
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 322,
            column: 22
          }
        }],
        line: 244
      },
      "22": {
        loc: {
          start: {
            line: 261,
            column: 38
          },
          end: {
            line: 261,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 38
          },
          end: {
            line: 261,
            column: 59
          }
        }, {
          start: {
            line: 261,
            column: 63
          },
          end: {
            line: 261,
            column: 67
          }
        }],
        line: 261
      },
      "23": {
        loc: {
          start: {
            line: 278,
            column: 38
          },
          end: {
            line: 278,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 38
          },
          end: {
            line: 278,
            column: 59
          }
        }, {
          start: {
            line: 278,
            column: 63
          },
          end: {
            line: 278,
            column: 67
          }
        }],
        line: 278
      },
      "24": {
        loc: {
          start: {
            line: 294,
            column: 38
          },
          end: {
            line: 294,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 38
          },
          end: {
            line: 294,
            column: 59
          }
        }, {
          start: {
            line: 294,
            column: 63
          },
          end: {
            line: 294,
            column: 67
          }
        }],
        line: 294
      },
      "25": {
        loc: {
          start: {
            line: 303,
            column: 38
          },
          end: {
            line: 303,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 38
          },
          end: {
            line: 303,
            column: 59
          }
        }, {
          start: {
            line: 303,
            column: 63
          },
          end: {
            line: 303,
            column: 67
          }
        }],
        line: 303
      },
      "26": {
        loc: {
          start: {
            line: 333,
            column: 57
          },
          end: {
            line: 333,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 82
          },
          end: {
            line: 333,
            column: 95
          }
        }, {
          start: {
            line: 333,
            column: 98
          },
          end: {
            line: 333,
            column: 113
          }
        }],
        line: 333
      },
      "27": {
        loc: {
          start: {
            line: 339,
            column: 47
          },
          end: {
            line: 339,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 339,
            column: 55
          },
          end: {
            line: 339,
            column: 57
          }
        }],
        line: 339
      },
      "28": {
        loc: {
          start: {
            line: 390,
            column: 35
          },
          end: {
            line: 390,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 390,
            column: 45
          },
          end: {
            line: 390,
            column: 47
          }
        }],
        line: 390
      },
      "29": {
        loc: {
          start: {
            line: 424,
            column: 23
          },
          end: {
            line: 424,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 23
          },
          end: {
            line: 424,
            column: 41
          }
        }, {
          start: {
            line: 424,
            column: 45
          },
          end: {
            line: 424,
            column: 66
          }
        }],
        line: 424
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0],
      "28": [0],
      "29": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],
      sourcesContent: ["// @ts-nocheck\nimport { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: string | null;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: string;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: string;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: string;\n  deletedByUser?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: string, // Changed to string\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId, // No toString needed\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || (item.userId as string),\n          deletedByUser: undefined,\n          canRecover: details?.canRecover || false,\n        } as RecycleBinItem;\n      });\n\n    // Fetch user details for deletedBy users if any\n    const userIds = Array.from(new Set(recycleBinItems.map((i) => i.deletedBy).filter(Boolean)));\n    if (userIds.length) {\n      const users = await this.prisma.user.findMany({\n        where: {\n          id: { in: userIds.map((id) => id.toString()) },\n        },\n        select: { id: true, name: true, email: true },\n      });\n      const userMap = Object.fromEntries(users.map((u) => [u.id, u]));\n      recycleBinItems.forEach((item) => {\n        if (item.deletedBy && userMap[item.deletedBy]) {\n          item.deletedByUser = userMap[item.deletedBy];\n        }\n      });\n    }\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Get paginated list of ALL audit entries (create/update/delete etc)\n   */\n  async getAuditEntries(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: AuditLogEntry[]; total: number }> {\n    const where: any = {};\n    if (entity) {\n      where.entity = entity;\n    }\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    return { items: items as AuditLogEntry[], total };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId.toString(),\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              amount: originalData.amount,\n              paymentId: originalData.paymentId,\n              issuedAt: originalData.issuedAt,\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20\n  ): Promise<AuditLogEntry[]> {\n    const entries = await this.prisma.auditLog.findMany({\n      where: {\n        entity,\n        entityId,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    // Permanently remove audit log entries (DELETE actions)\n    await this.prisma.auditLog.deleteMany({\n      where: {\n        id: { in: auditLogIds },\n        action: 'DELETE',\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],
      names: ["AuditService", "auditService", "prisma", "getInstance", "instance", "logAction", "entry", "details", "originalData", "isDeleted", "deletedAt", "deletedBy", "canRecover", "recoveredAt", "recoveredBy", "auditLog", "create", "data", "userId", "action", "entity", "entityId", "error", "console", "softDelete", "Date", "type", "recoverable", "getRecycleBinItems", "limit", "offset", "where", "items", "total", "Promise", "all", "findMany", "orderBy", "createdAt", "take", "skip", "count", "recycleBinItems", "filter", "item", "map", "id", "deletedByUser", "undefined", "userIds", "Array", "from", "Set", "i", "Boolean", "length", "users", "user", "in", "toString", "select", "name", "email", "userMap", "Object", "fromEntries", "u", "forEach", "getAuditEntries", "recoverItem", "auditLogId", "auditEntry", "findUnique", "success", "message", "restoredData", "restoreEntityData", "updatedDetails", "update", "originalAuditLogId", "recoveredData", "toLowerCase", "product", "description", "price", "cost", "sku", "barcode", "categoryId", "supplierId", "minStockLevel", "maxStockLevel", "unit", "weight", "dimensions", "isActive", "customer", "phone", "address", "city", "postalCode", "country", "taxNumber", "creditLimit", "paymentTerms", "supplier", "category", "receipt", "receiptNumber", "amount", "paymentId", "issuedAt", "notes", "Error", "getEntityHistory", "entries", "include", "recoveredByUser", "permanentlyDelete", "auditLogIds", "deleteMany", "cleanupOldDeletedItems", "daysOld", "cutoffDate", "setDate", "getDate", "result", "updateMany", "lt", "getDeletedEntityIds", "deletedEntries", "deletedIds"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eacf6fe452c787b0fff859b54c9eb383820a9121"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1u0iw1jprc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u0iw1jprc();
cov_1u0iw1jprc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1u0iw1jprc().f[0]++;
  cov_1u0iw1jprc().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1u0iw1jprc().s[3]++;
_export(exports, {
  AuditService: function () {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[1]++;
    cov_1u0iw1jprc().s[4]++;
    return AuditService;
  },
  auditService: function () {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[2]++;
    cov_1u0iw1jprc().s[5]++;
    return auditService;
  }
});
const _prisma =
/* istanbul ignore next */
(cov_1u0iw1jprc().s[6]++, require("../lib/prisma"));
class AuditService {
  constructor() {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[3]++;
    cov_1u0iw1jprc().s[7]++;
    this.prisma = _prisma.prisma;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[4]++;
    cov_1u0iw1jprc().s[8]++;
    if (!AuditService.instance) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().b[0][0]++;
      cov_1u0iw1jprc().s[9]++;
      AuditService.instance = new AuditService();
    } else
    /* istanbul ignore next */
    {
      cov_1u0iw1jprc().b[0][1]++;
    }
    cov_1u0iw1jprc().s[10]++;
    return AuditService.instance;
  }
  /**
  * Log an audit entry
  */
  async logAction(entry) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[5]++;
    cov_1u0iw1jprc().s[11]++;
    try {
      // Prepare details object with all the additional information
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[12]++, {
        ...entry.details,
        originalData: entry.originalData,
        isDeleted:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[1][0]++, entry.isDeleted) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[1][1]++, false),
        deletedAt: entry.deletedAt,
        deletedBy: entry.deletedBy,
        canRecover:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[2][0]++, entry.canRecover) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[2][1]++, false),
        recoveredAt: entry.recoveredAt,
        recoveredBy: entry.recoveredBy
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[13]++;
      await this.prisma.auditLog.create({
        data: {
          userId: entry.userId,
          action: entry.action,
          entity: entry.entity,
          entityId: entry.entityId,
          details: details
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[14]++;
      console.error("Failed to log audit entry:", error);
      // Don't throw error to avoid breaking the main operation
    }
  }
  /**
  * Soft delete an entity and log it
  */
  async softDelete(entity, entityId, originalData, userId, canRecover =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[3][0]++, true)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[6]++;
    cov_1u0iw1jprc().s[15]++;
    await this.logAction({
      userId,
      action: "DELETE",
      entity,
      entityId,
      originalData,
      isDeleted: true,
      deletedAt: new Date(),
      deletedBy: userId,
      canRecover,
      details: {
        type: "soft_delete",
        recoverable: canRecover
      }
    });
  }
  /**
  * Get recycle bin items (deleted items that can be recovered)
  */
  async getRecycleBinItems(entity, limit =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[4][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[5][0]++, 0)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[7]++;
    const where =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[16]++, {
      action: "DELETE",
      ...(
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[6][0]++, entity) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[6][1]++, {
        entity
      }))
    });
    const [items, total] =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[17]++, await Promise.all([this.prisma.auditLog.findMany({
      where,
      orderBy: {
        createdAt: "desc"
      },
      take: limit,
      skip: offset
    }), this.prisma.auditLog.count({
      where
    })]));
    // Filter and map items that are deleted and recoverable
    const recycleBinItems =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[18]++, items.filter(item => {
      /* istanbul ignore next */
      cov_1u0iw1jprc().f[8]++;
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[19]++, item.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[20]++;
      return /* istanbul ignore next */(cov_1u0iw1jprc().b[7][0]++, details?.isDeleted) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[7][1]++, details?.canRecover) &&
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[7][2]++, !details?.recoveredAt);
    }).map(item => {
      /* istanbul ignore next */
      cov_1u0iw1jprc().f[9]++;
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[21]++, item.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[22]++;
      return {
        id: item.id,
        entity: item.entity,
        entityId: item.entityId,
        originalData: details?.originalData,
        deletedAt: details?.deletedAt ?
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[8][0]++, new Date(details.deletedAt)) :
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[8][1]++, item.createdAt),
        deletedBy:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[9][0]++, details?.deletedBy) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[9][1]++, item.userId),
        deletedByUser: undefined,
        canRecover:
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[10][0]++, details?.canRecover) ||
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[10][1]++, false)
      };
    }));
    // Fetch user details for deletedBy users if any
    const userIds =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[23]++, Array.from(new Set(recycleBinItems.map(i => {
      /* istanbul ignore next */
      cov_1u0iw1jprc().f[10]++;
      cov_1u0iw1jprc().s[24]++;
      return i.deletedBy;
    }).filter(Boolean))));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[25]++;
    if (userIds.length) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().b[11][0]++;
      const users =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[26]++, await this.prisma.user.findMany({
        where: {
          id: {
            in: userIds.map(id => {
              /* istanbul ignore next */
              cov_1u0iw1jprc().f[11]++;
              cov_1u0iw1jprc().s[27]++;
              return id.toString();
            })
          }
        },
        select: {
          id: true,
          name: true,
          email: true
        }
      }));
      const userMap =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[28]++, Object.fromEntries(users.map(u => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[12]++;
        cov_1u0iw1jprc().s[29]++;
        return [u.id, u];
      })));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[30]++;
      recycleBinItems.forEach(item => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[13]++;
        cov_1u0iw1jprc().s[31]++;
        if (
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[13][0]++, item.deletedBy) &&
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[13][1]++, userMap[item.deletedBy])) {
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[12][0]++;
          cov_1u0iw1jprc().s[32]++;
          item.deletedByUser = userMap[item.deletedBy];
        } else
        /* istanbul ignore next */
        {
          cov_1u0iw1jprc().b[12][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1u0iw1jprc().b[11][1]++;
    }
    cov_1u0iw1jprc().s[33]++;
    return {
      items: recycleBinItems,
      total
    };
  }
  /**
  * Get paginated list of ALL audit entries (create/update/delete etc)
  */
  async getAuditEntries(entity, limit =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[14][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[15][0]++, 0)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[14]++;
    const where =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[34]++, {});
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[35]++;
    if (entity) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().b[16][0]++;
      cov_1u0iw1jprc().s[36]++;
      where.entity = entity;
    } else
    /* istanbul ignore next */
    {
      cov_1u0iw1jprc().b[16][1]++;
    }
    const [items, total] =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[37]++, await Promise.all([this.prisma.auditLog.findMany({
      where,
      orderBy: {
        createdAt: "desc"
      },
      skip: offset,
      take: limit
    }), this.prisma.auditLog.count({
      where
    })]));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[38]++;
    return {
      items: items,
      total
    };
  }
  /**
  * Recover a deleted item
  */
  async recoverItem(auditLogId, userId) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[15]++;
    cov_1u0iw1jprc().s[39]++;
    try {
      const auditEntry =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[40]++, await this.prisma.auditLog.findUnique({
        where: {
          id: auditLogId
        }
      }));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[41]++;
      if (!auditEntry) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[17][0]++;
        cov_1u0iw1jprc().s[42]++;
        return {
          success: false,
          message: "Audit entry not found"
        };
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[17][1]++;
      }
      const details =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[43]++, auditEntry.details);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[44]++;
      if (
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[19][0]++, !details?.isDeleted) ||
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[19][1]++, !details?.canRecover) ||
      /* istanbul ignore next */
      (cov_1u0iw1jprc().b[19][2]++, details?.recoveredAt)) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[18][0]++;
        cov_1u0iw1jprc().s[45]++;
        return {
          success: false,
          message: "Item cannot be recovered"
        };
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[18][1]++;
      }
      // Restore the data based on entity type
      const restoredData =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[46]++, await this.restoreEntityData(auditEntry.entity, details.originalData));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[47]++;
      if (!restoredData.success) {
        /* istanbul ignore next */
        cov_1u0iw1jprc().b[20][0]++;
        cov_1u0iw1jprc().s[48]++;
        return restoredData;
      } else
      /* istanbul ignore next */
      {
        cov_1u0iw1jprc().b[20][1]++;
      }
      // Mark as recovered by updating the details
      const updatedDetails =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[49]++, {
        ...details,
        recoveredAt: new Date(),
        recoveredBy: userId.toString()
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[50]++;
      await this.prisma.auditLog.update({
        where: {
          id: auditLogId
        },
        data: {
          details: updatedDetails
        }
      });
      // Log the recovery action
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[51]++;
      await this.logAction({
        userId,
        action: "RECOVER",
        entity: auditEntry.entity,
        entityId: restoredData.data?.id,
        details: {
          type: "recovery",
          originalAuditLogId: auditLogId,
          recoveredData: restoredData.data
        }
      });
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[52]++;
      return {
        success: true,
        message: "Item recovered successfully",
        data: restoredData.data
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[53]++;
      console.error("Failed to recover item:", error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[54]++;
      return {
        success: false,
        message: "Failed to recover item"
      };
    }
  }
  /**
  * Restore entity data based on entity type
  */
  async restoreEntityData(entity, originalData) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[16]++;
    cov_1u0iw1jprc().s[55]++;
    try {
      let restoredData;
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[56]++;
      switch (entity.toLowerCase()) {
        case "product":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][0]++;
          cov_1u0iw1jprc().s[57]++;
          restoredData = await this.prisma.product.create({
            data: {
              name: originalData.name,
              description: originalData.description,
              price: originalData.price,
              cost: originalData.cost,
              sku: originalData.sku,
              barcode: originalData.barcode,
              categoryId: originalData.categoryId,
              supplierId: originalData.supplierId,
              minStockLevel: originalData.minStockLevel,
              maxStockLevel: originalData.maxStockLevel,
              unit: originalData.unit,
              weight: originalData.weight,
              dimensions: originalData.dimensions,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[22][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[22][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[58]++;
          break;
        case "customer":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][1]++;
          cov_1u0iw1jprc().s[59]++;
          restoredData = await this.prisma.customer.create({
            data: {
              name: originalData.name,
              email: originalData.email,
              phone: originalData.phone,
              address: originalData.address,
              city: originalData.city,
              postalCode: originalData.postalCode,
              country: originalData.country,
              taxNumber: originalData.taxNumber,
              creditLimit: originalData.creditLimit,
              paymentTerms: originalData.paymentTerms,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[23][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[23][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[60]++;
          break;
        case "supplier":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][2]++;
          cov_1u0iw1jprc().s[61]++;
          restoredData = await this.prisma.supplier.create({
            data: {
              name: originalData.name,
              email: originalData.email,
              phone: originalData.phone,
              address: originalData.address,
              city: originalData.city,
              postalCode: originalData.postalCode,
              country: originalData.country,
              taxNumber: originalData.taxNumber,
              paymentTerms: originalData.paymentTerms,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[24][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[24][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[62]++;
          break;
        case "category":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][3]++;
          cov_1u0iw1jprc().s[63]++;
          restoredData = await this.prisma.category.create({
            data: {
              name: originalData.name,
              description: originalData.description,
              isActive:
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[25][0]++, originalData.isActive) ??
              /* istanbul ignore next */
              (cov_1u0iw1jprc().b[25][1]++, true)
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[64]++;
          break;
        case "receipt":
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][4]++;
          cov_1u0iw1jprc().s[65]++;
          restoredData = await this.prisma.receipt.create({
            data: {
              receiptNumber: originalData.receiptNumber,
              amount: originalData.amount,
              paymentId: originalData.paymentId,
              issuedAt: originalData.issuedAt,
              notes: originalData.notes
            }
          });
          /* istanbul ignore next */
          cov_1u0iw1jprc().s[66]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1u0iw1jprc().b[21][5]++;
          cov_1u0iw1jprc().s[67]++;
          return {
            success: false,
            message: `Recovery not supported for entity type: ${entity}`
          };
      }
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[68]++;
      return {
        success: true,
        message: "Entity restored successfully",
        data: restoredData
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[69]++;
      console.error(`Failed to restore ${entity}:`, error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[70]++;
      return {
        success: false,
        message: `Failed to restore ${entity}: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[26][1]++, "Unknown error")}`
      };
    }
  }
  /**
  * Get audit history for an entity
  */
  async getEntityHistory(entity, entityId, limit =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[27][0]++, 20)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[17]++;
    const entries =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[71]++, await this.prisma.auditLog.findMany({
      where: {
        entity,
        entityId
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        deletedByUser: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        recoveredByUser: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      },
      take: limit
    }));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[72]++;
    return entries;
  }
  /**
  * Permanently delete items from recycle bin
  */
  async permanentlyDelete(auditLogIds) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[18]++;
    cov_1u0iw1jprc().s[73]++;
    // Permanently remove audit log entries (DELETE actions)
    await this.prisma.auditLog.deleteMany({
      where: {
        id: {
          in: auditLogIds
        },
        action: "DELETE"
      }
    });
  }
  /**
  * Clean up old deleted items (older than specified days)
  */
  async cleanupOldDeletedItems(daysOld =
  /* istanbul ignore next */
  (cov_1u0iw1jprc().b[28][0]++, 30)) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[19]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[74]++, new Date());
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[75]++;
    cutoffDate.setDate(cutoffDate.getDate() - daysOld);
    const result =
    /* istanbul ignore next */
    (cov_1u0iw1jprc().s[76]++, await this.prisma.auditLog.updateMany({
      where: {
        isDeleted: true,
        canRecover: true,
        deletedAt: {
          lt: cutoffDate
        }
      },
      data: {
        canRecover: false
      }
    }));
    /* istanbul ignore next */
    cov_1u0iw1jprc().s[77]++;
    return result.count;
  }
  /**
  * Get IDs of soft-deleted entities for a specific entity type
  */
  async getDeletedEntityIds(entity) {
    /* istanbul ignore next */
    cov_1u0iw1jprc().f[20]++;
    cov_1u0iw1jprc().s[78]++;
    try {
      const deletedEntries =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[79]++, await this.prisma.auditLog.findMany({
        where: {
          entity,
          action: "DELETE"
        },
        select: {
          entityId: true,
          details: true
        }
      }));
      // Filter for items that are deleted and not recovered
      const deletedIds =
      /* istanbul ignore next */
      (cov_1u0iw1jprc().s[80]++, deletedEntries.filter(entry => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[21]++;
        const details =
        /* istanbul ignore next */
        (cov_1u0iw1jprc().s[81]++, entry.details);
        /* istanbul ignore next */
        cov_1u0iw1jprc().s[82]++;
        return /* istanbul ignore next */(cov_1u0iw1jprc().b[29][0]++, details?.isDeleted) &&
        /* istanbul ignore next */
        (cov_1u0iw1jprc().b[29][1]++, !details?.recoveredAt);
      }).map(entry => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[22]++;
        cov_1u0iw1jprc().s[83]++;
        return entry.entityId;
      }).filter(id => {
        /* istanbul ignore next */
        cov_1u0iw1jprc().f[23]++;
        cov_1u0iw1jprc().s[84]++;
        return id !== null;
      }));
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[85]++;
      return deletedIds;
    } catch (error) {
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[86]++;
      console.error(`Error getting deleted entity IDs for ${entity}:`, error);
      /* istanbul ignore next */
      cov_1u0iw1jprc().s[87]++;
      return [];
    }
  }
}
const auditService =
/* istanbul ignore next */
(cov_1u0iw1jprc().s[88]++, AuditService.getInstance());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,