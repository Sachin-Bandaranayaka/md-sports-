{"version":3,"names":["cov_1u0iw1jprc","actualCoverage","s","AuditService","f","auditService","constructor","prisma","_prisma","getInstance","instance","b","logAction","entry","details","originalData","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","auditLog","create","data","userId","action","entity","entityId","error","console","softDelete","Date","type","recoverable","getRecycleBinItems","limit","offset","where","items","total","Promise","all","findMany","orderBy","createdAt","take","skip","count","recycleBinItems","filter","item","map","id","deletedByUser","undefined","userIds","Array","from","Set","i","Boolean","length","users","user","in","toString","select","name","email","userMap","Object","fromEntries","u","forEach","getAuditEntries","recoverItem","auditLogId","auditEntry","findUnique","success","message","restoredData","restoreEntityData","updatedDetails","update","originalAuditLogId","recoveredData","toLowerCase","product","description","price","cost","sku","barcode","categoryId","supplierId","minStockLevel","maxStockLevel","unit","weight","dimensions","isActive","customer","phone","address","city","postalCode","country","taxNumber","creditLimit","paymentTerms","supplier","category","receipt","receiptNumber","amount","paymentId","issuedAt","notes","Error","getEntityHistory","entries","include","recoveredByUser","permanentlyDelete","auditLogIds","deleteMany","cleanupOldDeletedItems","daysOld","cutoffDate","setDate","getDate","result","updateMany","lt","getDeletedEntityIds","deletedEntries","deletedIds"],"sources":["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],"sourcesContent":["// @ts-nocheck\nimport { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: string | null;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: string;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: string;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: string;\n  deletedByUser?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: string, // Changed to string\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId, // No toString needed\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || (item.userId as string),\n          deletedByUser: undefined,\n          canRecover: details?.canRecover || false,\n        } as RecycleBinItem;\n      });\n\n    // Fetch user details for deletedBy users if any\n    const userIds = Array.from(new Set(recycleBinItems.map((i) => i.deletedBy).filter(Boolean)));\n    if (userIds.length) {\n      const users = await this.prisma.user.findMany({\n        where: {\n          id: { in: userIds.map((id) => id.toString()) },\n        },\n        select: { id: true, name: true, email: true },\n      });\n      const userMap = Object.fromEntries(users.map((u) => [u.id, u]));\n      recycleBinItems.forEach((item) => {\n        if (item.deletedBy && userMap[item.deletedBy]) {\n          item.deletedByUser = userMap[item.deletedBy];\n        }\n      });\n    }\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Get paginated list of ALL audit entries (create/update/delete etc)\n   */\n  async getAuditEntries(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: AuditLogEntry[]; total: number }> {\n    const where: any = {};\n    if (entity) {\n      where.entity = entity;\n    }\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    return { items: items as AuditLogEntry[], total };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId.toString(),\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              amount: originalData.amount,\n              paymentId: originalData.paymentId,\n              issuedAt: originalData.issuedAt,\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20\n  ): Promise<AuditLogEntry[]> {\n    const entries = await this.prisma.auditLog.findMany({\n      where: {\n        entity,\n        entityId,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    // Permanently remove audit log entries (DELETE actions)\n    await this.prisma.auditLog.deleteMany({\n      where: {\n        id: { in: auditLogIds },\n        action: 'DELETE',\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],"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","ignoreList":[]}