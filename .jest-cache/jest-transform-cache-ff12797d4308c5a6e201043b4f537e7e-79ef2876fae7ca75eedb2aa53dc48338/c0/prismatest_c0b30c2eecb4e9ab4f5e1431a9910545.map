{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/prisma.test.ts"],"sourcesContent":["// Unit tests for Prisma utilities\n// Testing the safeQuery helper function and Prisma client configuration\n\nimport { PrismaClient } from '@prisma/client';\n\n// Mock PrismaClient\nconst mockPrismaClient = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  shop: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n};\n\n// Mock the PrismaClient constructor\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => mockPrismaClient),\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Prisma Utilities', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('PrismaClient Configuration', () => {\n    it('should create PrismaClient with configuration', () => {\n      // Re-import to trigger constructor\n      jest.resetModules();\n      require('@/lib/prisma');\n      \n      expect(PrismaClient).toHaveBeenCalled();\n      expect(PrismaClient).toHaveBeenCalledWith(\n        expect.objectContaining({\n          datasources: expect.any(Object),\n          log: expect.any(Array),\n          errorFormat: expect.any(String),\n        })\n      );\n    });\n  });\n\n  describe('safeQuery function (isolated implementation)', () => {\n    // Isolated implementation of safeQuery matching the actual implementation\n    const safeQuery = async <T>(\n      queryFn: () => Promise<T>,\n      fallback: T,\n      logMessage = 'Database operation failed'\n    ): Promise<T> => {\n      try {\n        return await queryFn();\n      } catch (error) {\n        console.error(`${logMessage}:`, error);\n        return fallback;\n      }\n    };\n\n    it('should return result for successful operation', async () => {\n      const mockOperation = jest.fn().mockResolvedValue({ id: 1, name: 'Test User' });\n      \n      const result = await safeQuery(mockOperation, null, 'Find user');\n      \n      expect(result).toEqual({ id: 1, name: 'Test User' });\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).not.toHaveBeenCalled();\n    });\n\n    it('should return fallback and log error for failed operation', async () => {\n      const mockError = new Error('Database connection failed');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, null, 'Find user failed');\n      \n      expect(result).toBeNull();\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Find user failed:',\n        mockError\n      );\n    });\n\n    it('should handle database errors with fallback', async () => {\n      const mockError = { code: 'P2002', message: 'Unique constraint failed' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      const fallbackValue = { error: 'Operation failed' };\n      \n      const result = await safeQuery(mockOperation, fallbackValue, 'Create user failed');\n      \n      expect(result).toEqual(fallbackValue);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Create user failed:',\n        mockError\n      );\n    });\n\n    it('should use default log message when none provided', async () => {\n      const mockError = new Error('Generic error');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'default');\n      \n      expect(result).toBe('default');\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Database operation failed:',\n        mockError\n      );\n    });\n\n    it('should handle different fallback types', async () => {\n      const mockError = new Error('Operation failed');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      // Test with array fallback\n      const result1 = await safeQuery(mockOperation, [], 'Array operation failed');\n      expect(result1).toEqual([]);\n      \n      // Test with object fallback\n      const result2 = await safeQuery(mockOperation, { error: true }, 'Object operation failed');\n      expect(result2).toEqual({ error: true });\n      \n      // Test with number fallback\n      const result3 = await safeQuery(mockOperation, 0, 'Number operation failed');\n      expect(result3).toBe(0);\n    });\n\n    it('should handle async operations correctly', async () => {\n      const mockData = { id: 1, name: 'Async User' };\n      const mockOperation = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve(mockData), 10))\n      );\n      \n      const result = await safeQuery(mockOperation, null, 'Async operation');\n      \n      expect(result).toEqual(mockData);\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n    });\n\n    it('should preserve error objects in logs', async () => {\n      const mockError = {\n        code: 'P2002',\n        message: 'Unique constraint failed',\n        meta: { target: ['email'] }\n      };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, null, 'Constraint error');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Constraint error:',\n        mockError\n      );\n    });\n\n\n\n\n\n\n  });\n\n  describe('Database Operations with safeQuery', () => {\n    // Use the actual safeQuery implementation for integration testing\n    const safeQuery = async <T>(\n      queryFn: () => Promise<T>,\n      fallback: T,\n      logMessage = 'Database operation failed'\n    ): Promise<T> => {\n      try {\n        return await queryFn();\n      } catch (error) {\n        console.error(`${logMessage}:`, error);\n        return fallback;\n      }\n    };\n\n    it('should safely execute user findMany operation', async () => {\n      const mockUsers = [{ id: 1, name: 'User 1' }, { id: 2, name: 'User 2' }];\n      mockPrismaClient.user.findMany.mockResolvedValue(mockUsers);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.findMany(),\n        [],\n        'Find all users'\n      );\n      \n      expect(result).toEqual(mockUsers);\n      expect(mockPrismaClient.user.findMany).toHaveBeenCalledTimes(1);\n    });\n\n    it('should safely execute user create operation', async () => {\n      const newUser = { id: 1, name: 'New User', email: 'new@example.com' };\n      mockPrismaClient.user.create.mockResolvedValue(newUser);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.create({\n          data: { name: 'New User', email: 'new@example.com' }\n        }),\n        null,\n        'Create user'\n      );\n      \n      expect(result).toEqual(newUser);\n      expect(mockPrismaClient.user.create).toHaveBeenCalledWith({\n        data: { name: 'New User', email: 'new@example.com' }\n      });\n    });\n\n    it('should safely execute shop operations', async () => {\n      const mockShop = { id: 'shop1', name: 'Test Shop' };\n      mockPrismaClient.shop.findUnique.mockResolvedValue(mockShop);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.shop.findUnique({ where: { id: 'shop1' } }),\n        null,\n        'Find shop'\n      );\n      \n      expect(result).toEqual(mockShop);\n      expect(mockPrismaClient.shop.findUnique).toHaveBeenCalledWith({ where: { id: 'shop1' } });\n    });\n\n    it('should return fallback when operation fails', async () => {\n      const mockError = new Error('Database error');\n      mockPrismaClient.user.findUnique.mockRejectedValue(mockError);\n      \n      const result = await safeQuery(\n        () => mockPrismaClient.user.findUnique({ where: { id: 999 } }),\n        null,\n        'Find non-existent user'\n      );\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Find non-existent user:', mockError);\n    });\n  });\n\n  describe('Prisma Client Lifecycle', () => {\n    it('should handle connection operations', async () => {\n      mockPrismaClient.$connect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$connect();\n      \n      expect(mockPrismaClient.$connect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle disconnection operations', async () => {\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$disconnect();\n      \n      expect(mockPrismaClient.$disconnect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle connection errors', async () => {\n      const connectionError = new Error('Connection failed');\n      mockPrismaClient.$connect.mockRejectedValue(connectionError);\n      \n      await expect(mockPrismaClient.$connect()).rejects.toThrow('Connection failed');\n    });\n  });\n});"],"names":["jest","mock","PrismaClient","fn","mockImplementation","mockPrismaClient","$connect","$disconnect","user","findMany","findUnique","create","update","delete","shop","consoleSpy","log","spyOn","console","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","resetModules","require","expect","toHaveBeenCalled","toHaveBeenCalledWith","objectContaining","datasources","any","Object","Array","errorFormat","String","safeQuery","queryFn","fallback","logMessage","mockOperation","mockResolvedValue","id","name","result","toEqual","toHaveBeenCalledTimes","not","mockError","Error","mockRejectedValue","toBeNull","code","message","fallbackValue","toBe","result1","result2","result3","mockData","Promise","resolve","setTimeout","meta","target","mockUsers","newUser","email","data","mockShop","where","undefined","connectionError","rejects","toThrow"],"mappings":"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"}