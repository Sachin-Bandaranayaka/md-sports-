e92ff23324ff75f3886fe0ea7109e16b
// Fixed Unit tests for database operations
// This file tests various database operations and utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Prisma Client BEFORE importing
const mockPrismaUser = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn()
};
const mockPrismaProduct = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn()
};
const mockPrismaCustomer = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn()
};
const mockPrismaInvoice = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn()
};
const mockPrismaInventoryItem = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn()
};
const mockPrisma = {
    user: mockPrismaUser,
    product: mockPrismaProduct,
    customer: mockPrismaCustomer,
    invoice: mockPrismaInvoice,
    inventoryItem: mockPrismaInventoryItem,
    $transaction: _globals.jest.fn(),
    $connect: _globals.jest.fn(),
    $disconnect: _globals.jest.fn(),
    $executeRaw: _globals.jest.fn(),
    $queryRaw: _globals.jest.fn()
};
// Mock the Prisma module
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
describe("Database Operations - Prisma Models", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("User Model Operations", ()=>{
        const mockUser1 = {
            id: 1,
            username: "testuser",
            email: "test@example.com",
            password: "hashedpassword",
            firstName: "Test",
            lastName: "User",
            isActive: true,
            roleId: 1,
            shopId: "shop1",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active users", async ()=>{
                const mockUsers = [
                    mockUser1,
                    {
                        ...mockUser1,
                        id: 2,
                        username: "testuser2"
                    }
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsers);
                const result = await _prisma.default.user.findMany({
                    where: {
                        isActive: true
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockUsers);
                expect(result).toHaveLength(2);
            });
            it("should fetch users with role and shop relations", async ()=>{
                const mockUsersWithRelations = [
                    {
                        ...mockUser1,
                        role: {
                            id: 1,
                            name: "admin",
                            permissions: []
                        },
                        shop: {
                            id: "shop1",
                            name: "Main Shop"
                        }
                    }
                ];
                mockPrisma.user.findMany.mockResolvedValue(mockUsersWithRelations);
                const result = await _prisma.default.user.findMany({
                    include: {
                        role: {
                            include: {
                                permissions: true
                            }
                        },
                        shop: true
                    }
                });
                expect(mockPrisma.user.findMany).toHaveBeenCalledWith({
                    include: {
                        role: {
                            include: {
                                permissions: true
                            }
                        },
                        shop: true
                    }
                });
                expect(result[0]).toHaveProperty("role");
                expect(result[0]).toHaveProperty("shop");
            });
        });
        describe("findUnique", ()=>{
            it("should find user by id", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser1);
            });
            it("should find user by email", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        email: "test@example.com"
                    }
                });
                expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                    where: {
                        email: "test@example.com"
                    }
                });
                expect(result).toEqual(mockUser1);
            });
            it("should return null for non-existent user", async ()=>{
                mockPrisma.user.findUnique.mockResolvedValue(null);
                const result = await _prisma.default.user.findUnique({
                    where: {
                        id: 999
                    }
                });
                expect(result).toBeNull();
            });
        });
        describe("create", ()=>{
            it("should create a new user", async ()=>{
                const newUserData = {
                    username: "newuser",
                    email: "new@example.com",
                    password: "hashedpassword",
                    firstName: "New",
                    lastName: "User",
                    roleId: 2
                };
                const createdUser = {
                    ...mockUser1,
                    ...newUserData,
                    id: 3
                };
                mockPrisma.user.create.mockResolvedValue(createdUser);
                const result = await _prisma.default.user.create({
                    data: newUserData
                });
                expect(mockPrisma.user.create).toHaveBeenCalledWith({
                    data: newUserData
                });
                expect(result).toEqual(createdUser);
            });
        });
        describe("update", ()=>{
            it("should update user data", async ()=>{
                const updateData = {
                    firstName: "Updated",
                    lastName: "Name"
                };
                const updatedUser = {
                    ...mockUser1,
                    ...updateData
                };
                mockPrisma.user.update.mockResolvedValue(updatedUser);
                const result = await _prisma.default.user.update({
                    where: {
                        id: 1
                    },
                    data: updateData
                });
                expect(mockPrisma.user.update).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    },
                    data: updateData
                });
                expect(result).toEqual(updatedUser);
            });
        });
        describe("delete", ()=>{
            it("should delete a user", async ()=>{
                mockPrisma.user.delete.mockResolvedValue(mockUser1);
                const result = await _prisma.default.user.delete({
                    where: {
                        id: 1
                    }
                });
                expect(mockPrisma.user.delete).toHaveBeenCalledWith({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockUser1);
            });
        });
    });
    describe("Product Model Operations", ()=>{
        const mockProduct1 = {
            id: 1,
            name: "Test Product",
            description: "Test Description",
            price: 99.99,
            costPrice: 50.00,
            sku: "TEST-001",
            barcode: "1234567890",
            categoryId: 1,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active products", async ()=>{
                const mockProducts = [
                    mockProduct1,
                    {
                        ...mockProduct1,
                        id: 2,
                        name: "Product 2"
                    }
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProducts);
                const result = await _prisma.default.product.findMany({
                    where: {
                        isActive: true
                    }
                });
                expect(mockPrisma.product.findMany).toHaveBeenCalledWith({
                    where: {
                        isActive: true
                    }
                });
                expect(result).toEqual(mockProducts);
            });
            it("should fetch products with category and inventory", async ()=>{
                const mockProductsWithRelations = [
                    {
                        ...mockProduct1,
                        category: {
                            id: 1,
                            name: "Electronics"
                        },
                        inventoryItems: [
                            {
                                id: 1,
                                quantity: 100,
                                shopId: "shop1"
                            }
                        ]
                    }
                ];
                mockPrisma.product.findMany.mockResolvedValue(mockProductsWithRelations);
                const result = await _prisma.default.product.findMany({
                    include: {
                        category: true,
                        inventoryItems: true
                    }
                });
                expect(result[0]).toHaveProperty("category");
                expect(result[0]).toHaveProperty("inventoryItems");
            });
        });
        describe("findUnique", ()=>{
            it("should find product by id", async ()=>{
                mockPrisma.product.findUnique.mockResolvedValue(mockProduct1);
                const result = await _prisma.default.product.findUnique({
                    where: {
                        id: 1
                    }
                });
                expect(result).toEqual(mockProduct1);
            });
            it("should find product by SKU", async ()=>{
                mockPrisma.product.findUnique.mockResolvedValue(mockProduct1);
                const result = await _prisma.default.product.findUnique({
                    where: {
                        sku: "TEST-001"
                    }
                });
                expect(result).toEqual(mockProduct1);
            });
        });
        describe("create", ()=>{
            it("should create a new product", async ()=>{
                const newProductData = {
                    name: "New Product",
                    price: 149.99,
                    costPrice: 75.00,
                    sku: "NEW-001",
                    categoryId: 1
                };
                const createdProduct = {
                    ...mockProduct1,
                    ...newProductData,
                    id: 3
                };
                mockPrisma.product.create.mockResolvedValue(createdProduct);
                const result = await _prisma.default.product.create({
                    data: newProductData
                });
                expect(result).toEqual(createdProduct);
            });
        });
    });
    describe("Customer Model Operations", ()=>{
        const mockCustomer = {
            id: 1,
            name: "Test Customer",
            email: "customer@example.com",
            phone: "+1234567890",
            address: "123 Test St",
            city: "Test City",
            status: "active",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch all active customers", async ()=>{
                const mockCustomers = [
                    mockCustomer,
                    {
                        ...mockCustomer,
                        id: 2,
                        name: "Customer 2"
                    }
                ];
                mockPrisma.customer.findMany.mockResolvedValue(mockCustomers);
                const result = await _prisma.default.customer.findMany({
                    where: {
                        status: "active"
                    }
                });
                expect(result).toEqual(mockCustomers);
            });
            it("should fetch customers with invoices", async ()=>{
                const mockCustomersWithInvoices = [
                    {
                        ...mockCustomer,
                        invoices: [
                            {
                                id: 1,
                                total: 100.00,
                                status: "paid"
                            }
                        ]
                    }
                ];
                mockPrisma.customer.findMany.mockResolvedValue(mockCustomersWithInvoices);
                const result = await _prisma.default.customer.findMany({
                    include: {
                        invoices: true
                    }
                });
                expect(result[0]).toHaveProperty("invoices");
            });
        });
        describe("create", ()=>{
            it("should create a new customer", async ()=>{
                const newCustomerData = {
                    name: "New Customer",
                    email: "new@customer.com",
                    phone: "+9876543210"
                };
                const createdCustomer = {
                    ...mockCustomer,
                    ...newCustomerData,
                    id: 3
                };
                mockPrisma.customer.create.mockResolvedValue(createdCustomer);
                const result = await _prisma.default.customer.create({
                    data: newCustomerData
                });
                expect(result).toEqual(createdCustomer);
            });
        });
    });
    describe("Invoice Model Operations", ()=>{
        const mockInvoice = {
            id: 1,
            invoiceNumber: "INV-001",
            customerId: 1,
            total: 199.99,
            status: "pending",
            paymentMethod: "Cash",
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch invoices with filters", async ()=>{
                const mockInvoices = [
                    mockInvoice,
                    {
                        ...mockInvoice,
                        id: 2,
                        invoiceNumber: "INV-002"
                    }
                ];
                mockPrisma.invoice.findMany.mockResolvedValue(mockInvoices);
                const result = await _prisma.default.invoice.findMany({
                    where: {
                        status: "pending",
                        createdAt: {
                            gte: new Date("2024-01-01")
                        }
                    },
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(mockPrisma.invoice.findMany).toHaveBeenCalledWith({
                    where: {
                        status: "pending",
                        createdAt: {
                            gte: new Date("2024-01-01")
                        }
                    },
                    orderBy: {
                        createdAt: "desc"
                    }
                });
                expect(result).toEqual(mockInvoices);
            });
            it("should fetch invoices with customer and items", async ()=>{
                const mockInvoicesWithRelations = [
                    {
                        ...mockInvoice,
                        customer: {
                            id: 1,
                            name: "Test Customer"
                        },
                        items: [
                            {
                                id: 1,
                                productId: 1,
                                quantity: 2,
                                price: 99.99
                            }
                        ]
                    }
                ];
                mockPrisma.invoice.findMany.mockResolvedValue(mockInvoicesWithRelations);
                const result = await _prisma.default.invoice.findMany({
                    include: {
                        customer: true,
                        items: {
                            include: {
                                product: true
                            }
                        }
                    }
                });
                expect(result[0]).toHaveProperty("customer");
                expect(result[0]).toHaveProperty("items");
            });
        });
        describe("create", ()=>{
            it("should create invoice with items", async ()=>{
                const invoiceData = {
                    invoiceNumber: "INV-003",
                    customerId: 1,
                    total: 299.99,
                    status: "pending",
                    items: {
                        create: [
                            {
                                productId: 1,
                                quantity: 2,
                                price: 99.99,
                                total: 199.98
                            },
                            {
                                productId: 2,
                                quantity: 1,
                                price: 100.01,
                                total: 100.01
                            }
                        ]
                    }
                };
                const createdInvoice = {
                    ...mockInvoice,
                    ...invoiceData,
                    id: 3
                };
                mockPrisma.invoice.create.mockResolvedValue(createdInvoice);
                const result = await _prisma.default.invoice.create({
                    data: invoiceData,
                    include: {
                        items: true
                    }
                });
                expect(mockPrisma.invoice.create).toHaveBeenCalledWith({
                    data: invoiceData,
                    include: {
                        items: true
                    }
                });
                expect(result).toEqual(createdInvoice);
            });
        });
    });
    describe("Inventory Model Operations", ()=>{
        const mockInventoryItem = {
            id: 1,
            productId: 1,
            shopId: "shop1",
            quantity: 100,
            minStockLevel: 10,
            maxStockLevel: 500,
            reorderPoint: 20,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        describe("findMany", ()=>{
            it("should fetch inventory items by shop", async ()=>{
                const mockInventoryItems = [
                    mockInventoryItem,
                    {
                        ...mockInventoryItem,
                        id: 2,
                        productId: 2
                    }
                ];
                mockPrisma.inventoryItem.findMany.mockResolvedValue(mockInventoryItems);
                const result = await _prisma.default.inventoryItem.findMany({
                    where: {
                        shopId: "shop1"
                    },
                    include: {
                        product: true
                    }
                });
                expect(mockPrisma.inventoryItem.findMany).toHaveBeenCalledWith({
                    where: {
                        shopId: "shop1"
                    },
                    include: {
                        product: true
                    }
                });
                expect(result).toEqual(mockInventoryItems);
            });
            it("should fetch low stock items", async ()=>{
                const lowStockItems = [
                    {
                        ...mockInventoryItem,
                        quantity: 5
                    }
                ];
                mockPrisma.inventoryItem.findMany.mockResolvedValue(lowStockItems);
                const result = await _prisma.default.inventoryItem.findMany({
                    where: {
                        quantity: {
                            lte: mockInventoryItem.minStockLevel
                        }
                    }
                });
                expect(result).toEqual(lowStockItems);
            });
        });
        describe("update", ()=>{
            it("should update inventory quantity", async ()=>{
                const updatedItem = {
                    ...mockInventoryItem,
                    quantity: 150
                };
                mockPrisma.inventoryItem.update.mockResolvedValue(updatedItem);
                const result = await _prisma.default.inventoryItem.update({
                    where: {
                        productId_shopId: {
                            productId: 1,
                            shopId: "shop1"
                        }
                    },
                    data: {
                        quantity: 150
                    }
                });
                expect(result).toEqual(updatedItem);
            });
        });
    });
    describe("Transaction Operations", ()=>{
        describe("$transaction", ()=>{
            it("should execute multiple operations in a transaction", async ()=>{
                const mockResults = [
                    mockUser,
                    mockProduct
                ];
                mockPrisma.$transaction.mockResolvedValue(mockResults);
                const result = await _prisma.default.$transaction([
                    _prisma.default.user.create({
                        data: {
                            username: "test",
                            email: "test@test.com"
                        }
                    }),
                    _prisma.default.product.create({
                        data: {
                            name: "Test Product",
                            price: 99.99
                        }
                    })
                ]);
                expect(mockPrisma.$transaction).toHaveBeenCalled();
                expect(result).toEqual(mockResults);
            });
            it("should handle transaction rollback on error", async ()=>{
                const error = new Error("Transaction failed");
                mockPrisma.$transaction.mockRejectedValue(error);
                await expect(_prisma.default.$transaction([
                    _prisma.default.user.create({
                        data: {
                            username: "test",
                            email: "test@test.com"
                        }
                    }),
                    _prisma.default.product.create({
                        data: {
                            name: "Test Product",
                            price: 99.99
                        }
                    })
                ])).rejects.toThrow("Transaction failed");
            });
        });
    });
    describe("Connection Management", ()=>{
        describe("$connect", ()=>{
            it("should connect to database", async ()=>{
                mockPrisma.$connect.mockResolvedValue(undefined);
                await _prisma.default.$connect();
                expect(mockPrisma.$connect).toHaveBeenCalled();
            });
        });
        describe("$disconnect", ()=>{
            it("should disconnect from database", async ()=>{
                mockPrisma.$disconnect.mockResolvedValue(undefined);
                await _prisma.default.$disconnect();
                expect(mockPrisma.$disconnect).toHaveBeenCalled();
            });
        });
    });
    describe("Error Handling", ()=>{
        it("should handle database connection errors", async ()=>{
            const connectionError = new Error("Database connection failed");
            mockPrisma.user.findMany.mockRejectedValue(connectionError);
            await expect(_prisma.default.user.findMany()).rejects.toThrow("Database connection failed");
        });
        it("should handle unique constraint violations", async ()=>{
            const uniqueError = new Error("Unique constraint failed");
            mockPrisma.user.create.mockRejectedValue(uniqueError);
            await expect(_prisma.default.user.create({
                data: {
                    username: "existing",
                    email: "existing@test.com"
                }
            })).rejects.toThrow("Unique constraint failed");
        });
        it("should handle foreign key constraint violations", async ()=>{
            const fkError = new Error("Foreign key constraint failed");
            mockPrisma.product.create.mockRejectedValue(fkError);
            await expect(_prisma.default.product.create({
                data: {
                    name: "Test",
                    price: 99.99,
                    categoryId: 999
                }
            })).rejects.toThrow("Foreign key constraint failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvdW5pdC9kYXRhYmFzZU9wZXJhdGlvbnMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaXhlZCBVbml0IHRlc3RzIGZvciBkYXRhYmFzZSBvcGVyYXRpb25zXG4vLyBUaGlzIGZpbGUgdGVzdHMgdmFyaW91cyBkYXRhYmFzZSBvcGVyYXRpb25zIGFuZCB1dGlsaXRpZXNcblxuaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuXG4vLyBNb2NrIFByaXNtYSBDbGllbnQgQkVGT1JFIGltcG9ydGluZ1xuY29uc3QgbW9ja1ByaXNtYVVzZXIgPSB7XG4gIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgZmluZEZpcnN0OiBqZXN0LmZuKCksXG4gIGNyZWF0ZTogamVzdC5mbigpLFxuICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgZGVsZXRlOiBqZXN0LmZuKCksXG4gIGNvdW50OiBqZXN0LmZuKCksXG4gIGFnZ3JlZ2F0ZTogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja1ByaXNtYVByb2R1Y3QgPSB7XG4gIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgZmluZEZpcnN0OiBqZXN0LmZuKCksXG4gIGNyZWF0ZTogamVzdC5mbigpLFxuICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgZGVsZXRlOiBqZXN0LmZuKCksXG4gIGNvdW50OiBqZXN0LmZuKCksXG4gIGFnZ3JlZ2F0ZTogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja1ByaXNtYUN1c3RvbWVyID0ge1xuICBmaW5kTWFueTogamVzdC5mbigpLFxuICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gIGZpbmRGaXJzdDogamVzdC5mbigpLFxuICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIGRlbGV0ZTogamVzdC5mbigpLFxuICBjb3VudDogamVzdC5mbigpLFxuICBhZ2dyZWdhdGU6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IG1vY2tQcmlzbWFJbnZvaWNlID0ge1xuICBmaW5kTWFueTogamVzdC5mbigpLFxuICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gIGZpbmRGaXJzdDogamVzdC5mbigpLFxuICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIGRlbGV0ZTogamVzdC5mbigpLFxuICBjb3VudDogamVzdC5mbigpLFxuICBhZ2dyZWdhdGU6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IG1vY2tQcmlzbWFJbnZlbnRvcnlJdGVtID0ge1xuICBmaW5kTWFueTogamVzdC5mbigpLFxuICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gIGZpbmRGaXJzdDogamVzdC5mbigpLFxuICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIGRlbGV0ZTogamVzdC5mbigpLFxuICBjb3VudDogamVzdC5mbigpLFxuICBhZ2dyZWdhdGU6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IG1vY2tQcmlzbWEgPSB7XG4gIHVzZXI6IG1vY2tQcmlzbWFVc2VyLFxuICBwcm9kdWN0OiBtb2NrUHJpc21hUHJvZHVjdCxcbiAgY3VzdG9tZXI6IG1vY2tQcmlzbWFDdXN0b21lcixcbiAgaW52b2ljZTogbW9ja1ByaXNtYUludm9pY2UsXG4gIGludmVudG9yeUl0ZW06IG1vY2tQcmlzbWFJbnZlbnRvcnlJdGVtLFxuICAkdHJhbnNhY3Rpb246IGplc3QuZm4oKSxcbiAgJGNvbm5lY3Q6IGplc3QuZm4oKSxcbiAgJGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcbiAgJGV4ZWN1dGVSYXc6IGplc3QuZm4oKSxcbiAgJHF1ZXJ5UmF3OiBqZXN0LmZuKCksXG59IGFzIGFueTtcblxuLy8gTW9jayB0aGUgUHJpc21hIG1vZHVsZVxuamVzdC5tb2NrKCdAL2xpYi9wcmlzbWEnLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiBtb2NrUHJpc21hLFxufSkpO1xuXG4vLyBJbXBvcnQgYWZ0ZXIgbW9ja2luZ1xuaW1wb3J0IHByaXNtYSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuaW1wb3J0IHsgRGF0YWJhc2VPcGVyYXRpb25zIH0gZnJvbSAnQC9saWIvZGF0YWJhc2Uvb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBEYXRhYmFzZUVycm9yLCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICdAL2xpYi9lcnJvcnMnO1xuXG5kZXNjcmliZSgnRGF0YWJhc2UgT3BlcmF0aW9ucyAtIFByaXNtYSBNb2RlbHMnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnVXNlciBNb2RlbCBPcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tVc2VyID0ge1xuICAgICAgaWQ6IDEsXG4gICAgICB1c2VybmFtZTogJ3Rlc3R1c2VyJyxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ2hhc2hlZHBhc3N3b3JkJyxcbiAgICAgIGZpcnN0TmFtZTogJ1Rlc3QnLFxuICAgICAgbGFzdE5hbWU6ICdVc2VyJyxcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgcm9sZUlkOiAxLFxuICAgICAgc2hvcElkOiAnc2hvcDEnLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIH07XG5cbiAgICBkZXNjcmliZSgnZmluZE1hbnknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGZldGNoIGFsbCBhY3RpdmUgdXNlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tVc2VycyA9IFttb2NrVXNlciwgeyAuLi5tb2NrVXNlciwgaWQ6IDIsIHVzZXJuYW1lOiAndGVzdHVzZXIyJyB9XTtcbiAgICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VycyBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRNYW55KHtcbiAgICAgICAgICB3aGVyZTogeyBpc0FjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS51c2VyLmZpbmRNYW55KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgd2hlcmU6IHsgaXNBY3RpdmU6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1VzZXJzKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZmV0Y2ggdXNlcnMgd2l0aCByb2xlIGFuZCBzaG9wIHJlbGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja1VzZXJzV2l0aFJlbGF0aW9ucyA9IFt7XG4gICAgICAgICAgLi4ubW9ja1VzZXIsXG4gICAgICAgICAgcm9sZTogeyBpZDogMSwgbmFtZTogJ2FkbWluJywgcGVybWlzc2lvbnM6IFtdIH0sXG4gICAgICAgICAgc2hvcDogeyBpZDogJ3Nob3AxJywgbmFtZTogJ01haW4gU2hvcCcgfSxcbiAgICAgICAgfV07XG4gICAgICAgIG1vY2tQcmlzbWEudXNlci5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcnNXaXRoUmVsYXRpb25zIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZE1hbnkoe1xuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIHJvbGU6IHsgaW5jbHVkZTogeyBwZXJtaXNzaW9uczogdHJ1ZSB9IH0sXG4gICAgICAgICAgICBzaG9wOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cGVjdChtb2NrUHJpc21hLnVzZXIuZmluZE1hbnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICByb2xlOiB7IGluY2x1ZGU6IHsgcGVybWlzc2lvbnM6IHRydWUgfSB9LFxuICAgICAgICAgICAgc2hvcDogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdFswXSkudG9IYXZlUHJvcGVydHkoJ3JvbGUnKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdFswXSkudG9IYXZlUHJvcGVydHkoJ3Nob3AnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRVbmlxdWUnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGZpbmQgdXNlciBieSBpZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIgYXMgYW55KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogMSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogMSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrVXNlcik7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBmaW5kIHVzZXIgYnkgZW1haWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vY2tQcmlzbWEudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICB3aGVyZTogeyBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tVc2VyKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJldHVybiBudWxsIGZvciBub24tZXhpc3RlbnQgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja1ByaXNtYS51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IDk5OSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3JlYXRlJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VXNlckRhdGEgPSB7XG4gICAgICAgICAgdXNlcm5hbWU6ICduZXd1c2VyJyxcbiAgICAgICAgICBlbWFpbDogJ25ld0BleGFtcGxlLmNvbScsXG4gICAgICAgICAgcGFzc3dvcmQ6ICdoYXNoZWRwYXNzd29yZCcsXG4gICAgICAgICAgZmlyc3ROYW1lOiAnTmV3JyxcbiAgICAgICAgICBsYXN0TmFtZTogJ1VzZXInLFxuICAgICAgICAgIHJvbGVJZDogMixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY3JlYXRlZFVzZXIgPSB7IC4uLm1vY2tVc2VyLCAuLi5uZXdVc2VyRGF0YSwgaWQ6IDMgfTtcbiAgICAgICAgbW9ja1ByaXNtYS51c2VyLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShjcmVhdGVkVXNlciBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogbmV3VXNlckRhdGEsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cGVjdChtb2NrUHJpc21hLnVzZXIuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgZGF0YTogbmV3VXNlckRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGNyZWF0ZWRVc2VyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3VwZGF0ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHVzZXIgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHsgZmlyc3ROYW1lOiAnVXBkYXRlZCcsIGxhc3ROYW1lOiAnTmFtZScgfTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSB7IC4uLm1vY2tVc2VyLCAuLi51cGRhdGVEYXRhIH07XG4gICAgICAgIG1vY2tQcmlzbWEudXNlci51cGRhdGUubW9ja1Jlc29sdmVkVmFsdWUodXBkYXRlZFVzZXIgYXMgYW55KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEudXNlci51cGRhdGUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiAxIH0sXG4gICAgICAgICAgZGF0YTogdXBkYXRlRGF0YSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tQcmlzbWEudXNlci51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogMSB9LFxuICAgICAgICAgIGRhdGE6IHVwZGF0ZURhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHVwZGF0ZWRVc2VyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2RlbGV0ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZGVsZXRlIGEgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja1ByaXNtYS51c2VyLmRlbGV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlciBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS51c2VyLmRlbGV0ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IDEgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tQcmlzbWEudXNlci5kZWxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogMSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrVXNlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Byb2R1Y3QgTW9kZWwgT3BlcmF0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBtb2NrUHJvZHVjdCA9IHtcbiAgICAgIGlkOiAxLFxuICAgICAgbmFtZTogJ1Rlc3QgUHJvZHVjdCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgRGVzY3JpcHRpb24nLFxuICAgICAgcHJpY2U6IDk5Ljk5LFxuICAgICAgY29zdFByaWNlOiA1MC4wMCxcbiAgICAgIHNrdTogJ1RFU1QtMDAxJyxcbiAgICAgIGJhcmNvZGU6ICcxMjM0NTY3ODkwJyxcbiAgICAgIGNhdGVnb3J5SWQ6IDEsXG4gICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRNYW55JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmZXRjaCBhbGwgYWN0aXZlIHByb2R1Y3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrUHJvZHVjdHMgPSBbbW9ja1Byb2R1Y3QsIHsgLi4ubW9ja1Byb2R1Y3QsIGlkOiAyLCBuYW1lOiAnUHJvZHVjdCAyJyB9XTtcbiAgICAgICAgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9kdWN0cyBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5wcm9kdWN0LmZpbmRNYW55KHtcbiAgICAgICAgICB3aGVyZTogeyBpc0FjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRNYW55KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgd2hlcmU6IHsgaXNBY3RpdmU6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Byb2R1Y3RzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGZldGNoIHByb2R1Y3RzIHdpdGggY2F0ZWdvcnkgYW5kIGludmVudG9yeScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja1Byb2R1Y3RzV2l0aFJlbGF0aW9ucyA9IFt7XG4gICAgICAgICAgLi4ubW9ja1Byb2R1Y3QsXG4gICAgICAgICAgY2F0ZWdvcnk6IHsgaWQ6IDEsIG5hbWU6ICdFbGVjdHJvbmljcycgfSxcbiAgICAgICAgICBpbnZlbnRvcnlJdGVtczogW3sgaWQ6IDEsIHF1YW50aXR5OiAxMDAsIHNob3BJZDogJ3Nob3AxJyB9XSxcbiAgICAgICAgfV07XG4gICAgICAgIG1vY2tQcmlzbWEucHJvZHVjdC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJvZHVjdHNXaXRoUmVsYXRpb25zIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnByb2R1Y3QuZmluZE1hbnkoe1xuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiB0cnVlLFxuICAgICAgICAgICAgaW52ZW50b3J5SXRlbXM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdFswXSkudG9IYXZlUHJvcGVydHkoJ2NhdGVnb3J5Jyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRbMF0pLnRvSGF2ZVByb3BlcnR5KCdpbnZlbnRvcnlJdGVtcycpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZmluZFVuaXF1ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZmluZCBwcm9kdWN0IGJ5IGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBtb2NrUHJpc21hLnByb2R1Y3QuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJvZHVjdCBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5wcm9kdWN0LmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiAxIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Byb2R1Y3QpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZmluZCBwcm9kdWN0IGJ5IFNLVScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja1ByaXNtYS5wcm9kdWN0LmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2R1Y3QgYXMgYW55KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEucHJvZHVjdC5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBza3U6ICdURVNULTAwMScgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUHJvZHVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjcmVhdGUnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIG5ldyBwcm9kdWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdQcm9kdWN0RGF0YSA9IHtcbiAgICAgICAgICBuYW1lOiAnTmV3IFByb2R1Y3QnLFxuICAgICAgICAgIHByaWNlOiAxNDkuOTksXG4gICAgICAgICAgY29zdFByaWNlOiA3NS4wMCxcbiAgICAgICAgICBza3U6ICdORVctMDAxJyxcbiAgICAgICAgICBjYXRlZ29yeUlkOiAxLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjcmVhdGVkUHJvZHVjdCA9IHsgLi4ubW9ja1Byb2R1Y3QsIC4uLm5ld1Byb2R1Y3REYXRhLCBpZDogMyB9O1xuICAgICAgICBtb2NrUHJpc21hLnByb2R1Y3QuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKGNyZWF0ZWRQcm9kdWN0IGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnByb2R1Y3QuY3JlYXRlKHtcbiAgICAgICAgICBkYXRhOiBuZXdQcm9kdWN0RGF0YSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChjcmVhdGVkUHJvZHVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0N1c3RvbWVyIE1vZGVsIE9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0N1c3RvbWVyID0ge1xuICAgICAgaWQ6IDEsXG4gICAgICBuYW1lOiAnVGVzdCBDdXN0b21lcicsXG4gICAgICBlbWFpbDogJ2N1c3RvbWVyQGV4YW1wbGUuY29tJyxcbiAgICAgIHBob25lOiAnKzEyMzQ1Njc4OTAnLFxuICAgICAgYWRkcmVzczogJzEyMyBUZXN0IFN0JyxcbiAgICAgIGNpdHk6ICdUZXN0IENpdHknLFxuICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRNYW55JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmZXRjaCBhbGwgYWN0aXZlIGN1c3RvbWVycycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja0N1c3RvbWVycyA9IFttb2NrQ3VzdG9tZXIsIHsgLi4ubW9ja0N1c3RvbWVyLCBpZDogMiwgbmFtZTogJ0N1c3RvbWVyIDInIH1dO1xuICAgICAgICBtb2NrUHJpc21hLmN1c3RvbWVyLmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tDdXN0b21lcnMgYXMgYW55KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuY3VzdG9tZXIuZmluZE1hbnkoe1xuICAgICAgICAgIHdoZXJlOiB7IHN0YXR1czogJ2FjdGl2ZScgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ3VzdG9tZXJzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGZldGNoIGN1c3RvbWVycyB3aXRoIGludm9pY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrQ3VzdG9tZXJzV2l0aEludm9pY2VzID0gW3tcbiAgICAgICAgICAuLi5tb2NrQ3VzdG9tZXIsXG4gICAgICAgICAgaW52b2ljZXM6IFt7IGlkOiAxLCB0b3RhbDogMTAwLjAwLCBzdGF0dXM6ICdwYWlkJyB9XSxcbiAgICAgICAgfV07XG4gICAgICAgIG1vY2tQcmlzbWEuY3VzdG9tZXIuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0N1c3RvbWVyc1dpdGhJbnZvaWNlcyBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5jdXN0b21lci5maW5kTWFueSh7XG4gICAgICAgICAgaW5jbHVkZTogeyBpbnZvaWNlczogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0WzBdKS50b0hhdmVQcm9wZXJ0eSgnaW52b2ljZXMnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgbmV3IGN1c3RvbWVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDdXN0b21lckRhdGEgPSB7XG4gICAgICAgICAgbmFtZTogJ05ldyBDdXN0b21lcicsXG4gICAgICAgICAgZW1haWw6ICduZXdAY3VzdG9tZXIuY29tJyxcbiAgICAgICAgICBwaG9uZTogJys5ODc2NTQzMjEwJyxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY3JlYXRlZEN1c3RvbWVyID0geyAuLi5tb2NrQ3VzdG9tZXIsIC4uLm5ld0N1c3RvbWVyRGF0YSwgaWQ6IDMgfTtcbiAgICAgICAgbW9ja1ByaXNtYS5jdXN0b21lci5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoY3JlYXRlZEN1c3RvbWVyIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmN1c3RvbWVyLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogbmV3Q3VzdG9tZXJEYXRhLFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGNyZWF0ZWRDdXN0b21lcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ludm9pY2UgTW9kZWwgT3BlcmF0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBtb2NrSW52b2ljZSA9IHtcbiAgICAgIGlkOiAxLFxuICAgICAgaW52b2ljZU51bWJlcjogJ0lOVi0wMDEnLFxuICAgICAgY3VzdG9tZXJJZDogMSxcbiAgICAgIHRvdGFsOiAxOTkuOTksXG4gICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgIHBheW1lbnRNZXRob2Q6ICdDYXNoJyxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRNYW55JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmZXRjaCBpbnZvaWNlcyB3aXRoIGZpbHRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tJbnZvaWNlcyA9IFttb2NrSW52b2ljZSwgeyAuLi5tb2NrSW52b2ljZSwgaWQ6IDIsIGludm9pY2VOdW1iZXI6ICdJTlYtMDAyJyB9XTtcbiAgICAgICAgbW9ja1ByaXNtYS5pbnZvaWNlLmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tJbnZvaWNlcyBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5pbnZvaWNlLmZpbmRNYW55KHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICAgICAgZ3RlOiBuZXcgRGF0ZSgnMjAyNC0wMS0wMScpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tQcmlzbWEuaW52b2ljZS5maW5kTWFueSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgICBndGU6IG5ldyBEYXRlKCcyMDI0LTAxLTAxJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrSW52b2ljZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZmV0Y2ggaW52b2ljZXMgd2l0aCBjdXN0b21lciBhbmQgaXRlbXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tJbnZvaWNlc1dpdGhSZWxhdGlvbnMgPSBbe1xuICAgICAgICAgIC4uLm1vY2tJbnZvaWNlLFxuICAgICAgICAgIGN1c3RvbWVyOiB7IGlkOiAxLCBuYW1lOiAnVGVzdCBDdXN0b21lcicgfSxcbiAgICAgICAgICBpdGVtczogW3sgaWQ6IDEsIHByb2R1Y3RJZDogMSwgcXVhbnRpdHk6IDIsIHByaWNlOiA5OS45OSB9XSxcbiAgICAgICAgfV07XG4gICAgICAgIG1vY2tQcmlzbWEuaW52b2ljZS5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrSW52b2ljZXNXaXRoUmVsYXRpb25zIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmludm9pY2UuZmluZE1hbnkoe1xuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIGN1c3RvbWVyOiB0cnVlLFxuICAgICAgICAgICAgaXRlbXM6IHsgaW5jbHVkZTogeyBwcm9kdWN0OiB0cnVlIH0gfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0WzBdKS50b0hhdmVQcm9wZXJ0eSgnY3VzdG9tZXInKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdFswXSkudG9IYXZlUHJvcGVydHkoJ2l0ZW1zJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjcmVhdGUnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBpbnZvaWNlIHdpdGggaXRlbXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGludm9pY2VEYXRhID0ge1xuICAgICAgICAgIGludm9pY2VOdW1iZXI6ICdJTlYtMDAzJyxcbiAgICAgICAgICBjdXN0b21lcklkOiAxLFxuICAgICAgICAgIHRvdGFsOiAyOTkuOTksXG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgIGNyZWF0ZTogW1xuICAgICAgICAgICAgICB7IHByb2R1Y3RJZDogMSwgcXVhbnRpdHk6IDIsIHByaWNlOiA5OS45OSwgdG90YWw6IDE5OS45OCB9LFxuICAgICAgICAgICAgICB7IHByb2R1Y3RJZDogMiwgcXVhbnRpdHk6IDEsIHByaWNlOiAxMDAuMDEsIHRvdGFsOiAxMDAuMDEgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY3JlYXRlZEludm9pY2UgPSB7IC4uLm1vY2tJbnZvaWNlLCAuLi5pbnZvaWNlRGF0YSwgaWQ6IDMgfTtcbiAgICAgICAgbW9ja1ByaXNtYS5pbnZvaWNlLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShjcmVhdGVkSW52b2ljZSBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5pbnZvaWNlLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogaW52b2ljZURhdGEsXG4gICAgICAgICAgaW5jbHVkZTogeyBpdGVtczogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS5pbnZvaWNlLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICAgIGRhdGE6IGludm9pY2VEYXRhLFxuICAgICAgICAgIGluY2x1ZGU6IHsgaXRlbXM6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoY3JlYXRlZEludm9pY2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnZlbnRvcnkgTW9kZWwgT3BlcmF0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBtb2NrSW52ZW50b3J5SXRlbSA9IHtcbiAgICAgIGlkOiAxLFxuICAgICAgcHJvZHVjdElkOiAxLFxuICAgICAgc2hvcElkOiAnc2hvcDEnLFxuICAgICAgcXVhbnRpdHk6IDEwMCxcbiAgICAgIG1pblN0b2NrTGV2ZWw6IDEwLFxuICAgICAgbWF4U3RvY2tMZXZlbDogNTAwLFxuICAgICAgcmVvcmRlclBvaW50OiAyMCxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRNYW55JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmZXRjaCBpbnZlbnRvcnkgaXRlbXMgYnkgc2hvcCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja0ludmVudG9yeUl0ZW1zID0gW21vY2tJbnZlbnRvcnlJdGVtLCB7IC4uLm1vY2tJbnZlbnRvcnlJdGVtLCBpZDogMiwgcHJvZHVjdElkOiAyIH1dO1xuICAgICAgICBtb2NrUHJpc21hLmludmVudG9yeUl0ZW0uZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUobW9ja0ludmVudG9yeUl0ZW1zIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZmluZE1hbnkoe1xuICAgICAgICAgIHdoZXJlOiB7IHNob3BJZDogJ3Nob3AxJyB9LFxuICAgICAgICAgIGluY2x1ZGU6IHsgcHJvZHVjdDogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS5pbnZlbnRvcnlJdGVtLmZpbmRNYW55KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgd2hlcmU6IHsgc2hvcElkOiAnc2hvcDEnIH0sXG4gICAgICAgICAgaW5jbHVkZTogeyBwcm9kdWN0OiB0cnVlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tJbnZlbnRvcnlJdGVtcyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBmZXRjaCBsb3cgc3RvY2sgaXRlbXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxvd1N0b2NrSXRlbXMgPSBbeyAuLi5tb2NrSW52ZW50b3J5SXRlbSwgcXVhbnRpdHk6IDUgfV07XG4gICAgICAgIG1vY2tQcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShsb3dTdG9ja0l0ZW1zIGFzIGFueSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLmludmVudG9yeUl0ZW0uZmluZE1hbnkoe1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBxdWFudGl0eTogeyBsdGU6IG1vY2tJbnZlbnRvcnlJdGVtLm1pblN0b2NrTGV2ZWwgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGxvd1N0b2NrSXRlbXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndXBkYXRlJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgaW52ZW50b3J5IHF1YW50aXR5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IHsgLi4ubW9ja0ludmVudG9yeUl0ZW0sIHF1YW50aXR5OiAxNTAgfTtcbiAgICAgICAgbW9ja1ByaXNtYS5pbnZlbnRvcnlJdGVtLnVwZGF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh1cGRhdGVkSXRlbSBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS5pbnZlbnRvcnlJdGVtLnVwZGF0ZSh7XG4gICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgIHByb2R1Y3RJZF9zaG9wSWQ6IHtcbiAgICAgICAgICAgICAgcHJvZHVjdElkOiAxLFxuICAgICAgICAgICAgICBzaG9wSWQ6ICdzaG9wMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YTogeyBxdWFudGl0eTogMTUwIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwodXBkYXRlZEl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUcmFuc2FjdGlvbiBPcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCckdHJhbnNhY3Rpb24nLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbXVsdGlwbGUgb3BlcmF0aW9ucyBpbiBhIHRyYW5zYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrUmVzdWx0cyA9IFttb2NrVXNlciwgbW9ja1Byb2R1Y3RdO1xuICAgICAgICBtb2NrUHJpc21hLiR0cmFuc2FjdGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzdWx0cyBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oW1xuICAgICAgICAgIHByaXNtYS51c2VyLmNyZWF0ZSh7IGRhdGE6IHsgdXNlcm5hbWU6ICd0ZXN0JywgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyB9IH0pLFxuICAgICAgICAgIHByaXNtYS5wcm9kdWN0LmNyZWF0ZSh7IGRhdGE6IHsgbmFtZTogJ1Rlc3QgUHJvZHVjdCcsIHByaWNlOiA5OS45OSB9IH0pLFxuICAgICAgICBdKTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS4kdHJhbnNhY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUmVzdWx0cyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgdHJhbnNhY3Rpb24gcm9sbGJhY2sgb24gZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBmYWlsZWQnKTtcbiAgICAgICAgbW9ja1ByaXNtYS4kdHJhbnNhY3Rpb24ubW9ja1JlamVjdGVkVmFsdWUoZXJyb3IpO1xuXG4gICAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgICBwcmlzbWEuJHRyYW5zYWN0aW9uKFtcbiAgICAgICAgICAgIHByaXNtYS51c2VyLmNyZWF0ZSh7IGRhdGE6IHsgdXNlcm5hbWU6ICd0ZXN0JywgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyB9IH0pLFxuICAgICAgICAgICAgcHJpc21hLnByb2R1Y3QuY3JlYXRlKHsgZGF0YTogeyBuYW1lOiAnVGVzdCBQcm9kdWN0JywgcHJpY2U6IDk5Ljk5IH0gfSksXG4gICAgICAgICAgXSlcbiAgICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ1RyYW5zYWN0aW9uIGZhaWxlZCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb25uZWN0aW9uIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJyRjb25uZWN0JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjb25uZWN0IHRvIGRhdGFiYXNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBtb2NrUHJpc21hLiRjb25uZWN0Lm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYXdhaXQgcHJpc21hLiRjb25uZWN0KCk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tQcmlzbWEuJGNvbm5lY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJyRkaXNjb25uZWN0JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBkaXNjb25uZWN0IGZyb20gZGF0YWJhc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vY2tQcmlzbWEuJGRpc2Nvbm5lY3QubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICBhd2FpdCBwcmlzbWEuJGRpc2Nvbm5lY3QoKTtcblxuICAgICAgICBleHBlY3QobW9ja1ByaXNtYS4kZGlzY29ubmVjdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFcnJvciBIYW5kbGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkYXRhYmFzZSBjb25uZWN0aW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb25FcnJvciA9IG5ldyBFcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKTtcbiAgICAgIG1vY2tQcmlzbWEudXNlci5maW5kTWFueS5tb2NrUmVqZWN0ZWRWYWx1ZShjb25uZWN0aW9uRXJyb3IpO1xuXG4gICAgICBhd2FpdCBleHBlY3QocHJpc21hLnVzZXIuZmluZE1hbnkoKSkucmVqZWN0cy50b1Rocm93KCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5pcXVlIGNvbnN0cmFpbnQgdmlvbGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVuaXF1ZUVycm9yID0gbmV3IEVycm9yKCdVbmlxdWUgY29uc3RyYWludCBmYWlsZWQnKTtcbiAgICAgIG1vY2tQcmlzbWEudXNlci5jcmVhdGUubW9ja1JlamVjdGVkVmFsdWUodW5pcXVlRXJyb3IpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogeyB1c2VybmFtZTogJ2V4aXN0aW5nJywgZW1haWw6ICdleGlzdGluZ0B0ZXN0LmNvbScgfSxcbiAgICAgICAgfSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdVbmlxdWUgY29uc3RyYWludCBmYWlsZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZvcmVpZ24ga2V5IGNvbnN0cmFpbnQgdmlvbGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZrRXJyb3IgPSBuZXcgRXJyb3IoJ0ZvcmVpZ24ga2V5IGNvbnN0cmFpbnQgZmFpbGVkJyk7XG4gICAgICBtb2NrUHJpc21hLnByb2R1Y3QuY3JlYXRlLm1vY2tSZWplY3RlZFZhbHVlKGZrRXJyb3IpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHByaXNtYS5wcm9kdWN0LmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YTogeyBuYW1lOiAnVGVzdCcsIHByaWNlOiA5OS45OSwgY2F0ZWdvcnlJZDogOTk5IH0sXG4gICAgICAgIH0pXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnRm9yZWlnbiBrZXkgY29uc3RyYWludCBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsibW9ja1ByaXNtYVVzZXIiLCJmaW5kTWFueSIsImplc3QiLCJmbiIsImZpbmRVbmlxdWUiLCJmaW5kRmlyc3QiLCJjcmVhdGUiLCJ1cGRhdGUiLCJkZWxldGUiLCJjb3VudCIsImFnZ3JlZ2F0ZSIsIm1vY2tQcmlzbWFQcm9kdWN0IiwibW9ja1ByaXNtYUN1c3RvbWVyIiwibW9ja1ByaXNtYUludm9pY2UiLCJtb2NrUHJpc21hSW52ZW50b3J5SXRlbSIsIm1vY2tQcmlzbWEiLCJ1c2VyIiwicHJvZHVjdCIsImN1c3RvbWVyIiwiaW52b2ljZSIsImludmVudG9yeUl0ZW0iLCIkdHJhbnNhY3Rpb24iLCIkY29ubmVjdCIsIiRkaXNjb25uZWN0IiwiJGV4ZWN1dGVSYXciLCIkcXVlcnlSYXciLCJtb2NrIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1VzZXIiLCJpZCIsInVzZXJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiaXNBY3RpdmUiLCJyb2xlSWQiLCJzaG9wSWQiLCJjcmVhdGVkQXQiLCJEYXRlIiwidXBkYXRlZEF0IiwiaXQiLCJtb2NrVXNlcnMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInJlc3VsdCIsInByaXNtYSIsIndoZXJlIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0VxdWFsIiwidG9IYXZlTGVuZ3RoIiwibW9ja1VzZXJzV2l0aFJlbGF0aW9ucyIsInJvbGUiLCJuYW1lIiwicGVybWlzc2lvbnMiLCJzaG9wIiwiaW5jbHVkZSIsInRvSGF2ZVByb3BlcnR5IiwidG9CZU51bGwiLCJuZXdVc2VyRGF0YSIsImNyZWF0ZWRVc2VyIiwiZGF0YSIsInVwZGF0ZURhdGEiLCJ1cGRhdGVkVXNlciIsIm1vY2tQcm9kdWN0IiwiZGVzY3JpcHRpb24iLCJwcmljZSIsImNvc3RQcmljZSIsInNrdSIsImJhcmNvZGUiLCJjYXRlZ29yeUlkIiwibW9ja1Byb2R1Y3RzIiwibW9ja1Byb2R1Y3RzV2l0aFJlbGF0aW9ucyIsImNhdGVnb3J5IiwiaW52ZW50b3J5SXRlbXMiLCJxdWFudGl0eSIsIm5ld1Byb2R1Y3REYXRhIiwiY3JlYXRlZFByb2R1Y3QiLCJtb2NrQ3VzdG9tZXIiLCJwaG9uZSIsImFkZHJlc3MiLCJjaXR5Iiwic3RhdHVzIiwibW9ja0N1c3RvbWVycyIsIm1vY2tDdXN0b21lcnNXaXRoSW52b2ljZXMiLCJpbnZvaWNlcyIsInRvdGFsIiwibmV3Q3VzdG9tZXJEYXRhIiwiY3JlYXRlZEN1c3RvbWVyIiwibW9ja0ludm9pY2UiLCJpbnZvaWNlTnVtYmVyIiwiY3VzdG9tZXJJZCIsInBheW1lbnRNZXRob2QiLCJtb2NrSW52b2ljZXMiLCJndGUiLCJvcmRlckJ5IiwibW9ja0ludm9pY2VzV2l0aFJlbGF0aW9ucyIsIml0ZW1zIiwicHJvZHVjdElkIiwiaW52b2ljZURhdGEiLCJjcmVhdGVkSW52b2ljZSIsIm1vY2tJbnZlbnRvcnlJdGVtIiwibWluU3RvY2tMZXZlbCIsIm1heFN0b2NrTGV2ZWwiLCJyZW9yZGVyUG9pbnQiLCJtb2NrSW52ZW50b3J5SXRlbXMiLCJsb3dTdG9ja0l0ZW1zIiwibHRlIiwidXBkYXRlZEl0ZW0iLCJwcm9kdWN0SWRfc2hvcElkIiwibW9ja1Jlc3VsdHMiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZXJyb3IiLCJFcnJvciIsIm1vY2tSZWplY3RlZFZhbHVlIiwicmVqZWN0cyIsInRvVGhyb3ciLCJ1bmRlZmluZWQiLCJjb25uZWN0aW9uRXJyb3IiLCJ1bmlxdWVFcnJvciIsImZrRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQztBQUMzQyw0REFBNEQ7Ozs7O3lCQUV2QzsrREE4RUY7Ozs7OztBQTVFbkIsc0NBQXNDO0FBQ3RDLE1BQU1BLGlCQUFpQjtJQUNyQkMsVUFBVUMsYUFBSSxDQUFDQyxFQUFFO0lBQ2pCQyxZQUFZRixhQUFJLENBQUNDLEVBQUU7SUFDbkJFLFdBQVdILGFBQUksQ0FBQ0MsRUFBRTtJQUNsQkcsUUFBUUosYUFBSSxDQUFDQyxFQUFFO0lBQ2ZJLFFBQVFMLGFBQUksQ0FBQ0MsRUFBRTtJQUNmSyxRQUFRTixhQUFJLENBQUNDLEVBQUU7SUFDZk0sT0FBT1AsYUFBSSxDQUFDQyxFQUFFO0lBQ2RPLFdBQVdSLGFBQUksQ0FBQ0MsRUFBRTtBQUNwQjtBQUVBLE1BQU1RLG9CQUFvQjtJQUN4QlYsVUFBVUMsYUFBSSxDQUFDQyxFQUFFO0lBQ2pCQyxZQUFZRixhQUFJLENBQUNDLEVBQUU7SUFDbkJFLFdBQVdILGFBQUksQ0FBQ0MsRUFBRTtJQUNsQkcsUUFBUUosYUFBSSxDQUFDQyxFQUFFO0lBQ2ZJLFFBQVFMLGFBQUksQ0FBQ0MsRUFBRTtJQUNmSyxRQUFRTixhQUFJLENBQUNDLEVBQUU7SUFDZk0sT0FBT1AsYUFBSSxDQUFDQyxFQUFFO0lBQ2RPLFdBQVdSLGFBQUksQ0FBQ0MsRUFBRTtB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