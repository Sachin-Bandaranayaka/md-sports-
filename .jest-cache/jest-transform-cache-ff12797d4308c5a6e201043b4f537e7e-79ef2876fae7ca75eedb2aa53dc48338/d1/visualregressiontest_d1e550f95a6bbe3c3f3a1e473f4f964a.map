{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/visual/visual-regression.test.ts"],"sourcesContent":["import { test, expect, Page } from '@playwright/test';\nimport { injectAxe, checkA11y } from 'axe-playwright';\n\n// Visual regression test configuration\nconst VIEWPORTS = {\n  mobile: { width: 375, height: 667 },\n  tablet: { width: 768, height: 1024 },\n  desktop: { width: 1920, height: 1080 },\n  ultrawide: { width: 2560, height: 1440 },\n};\n\nconst PAGES_TO_TEST = [\n  {\n    name: 'login',\n    url: '/login',\n    description: 'Login page with form and branding',\n    waitFor: 'form[data-testid=\"login-form\"]',\n  },\n  {\n    name: 'dashboard',\n    url: '/dashboard',\n    description: 'Main dashboard with stats and charts',\n    waitFor: '[data-testid=\"dashboard-stats\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'products-list',\n    url: '/products',\n    description: 'Products listing page with filters',\n    waitFor: '[data-testid=\"products-grid\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'product-detail',\n    url: '/products/1',\n    description: 'Individual product detail page',\n    waitFor: '[data-testid=\"product-details\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'inventory',\n    url: '/inventory',\n    description: 'Inventory management interface',\n    waitFor: '[data-testid=\"inventory-table\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'sales',\n    url: '/sales',\n    description: 'Sales dashboard and transactions',\n    waitFor: '[data-testid=\"sales-dashboard\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'reports',\n    url: '/reports',\n    description: 'Reports and analytics page',\n    waitFor: '[data-testid=\"reports-container\"]',\n    requiresAuth: true,\n  },\n  {\n    name: 'settings',\n    url: '/settings',\n    description: 'Application settings page',\n    waitFor: '[data-testid=\"settings-form\"]',\n    requiresAuth: true,\n  },\n];\n\n// Test utilities\nclass VisualTestUtils {\n  static async authenticateUser(page: Page) {\n    // Navigate to login page\n    await page.goto('/login');\n    \n    // Fill login form\n    await page.fill('[data-testid=\"email-input\"]', 'admin@test.com');\n    await page.fill('[data-testid=\"password-input\"]', 'password123');\n    \n    // Submit form\n    await page.click('[data-testid=\"login-button\"]');\n    \n    // Wait for redirect to dashboard\n    await page.waitForURL('/dashboard');\n    \n    // Verify authentication\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n  }\n\n  static async waitForPageLoad(page: Page, waitFor?: string) {\n    // Wait for network to be idle\n    await page.waitForLoadState('networkidle');\n    \n    // Wait for specific element if provided\n    if (waitFor) {\n      await page.waitForSelector(waitFor, { timeout: 10000 });\n    }\n    \n    // Wait for any loading spinners to disappear\n    await page.waitForFunction(() => {\n      const spinners = document.querySelectorAll('[data-testid*=\"loading\"], .loading, .spinner');\n      return spinners.length === 0;\n    }, { timeout: 5000 }).catch(() => {\n      // Ignore timeout - some pages might not have loading indicators\n    });\n    \n    // Additional wait for animations to complete\n    await page.waitForTimeout(500);\n  }\n\n  static async hideVolatileElements(page: Page) {\n    // Hide elements that change frequently and would cause false positives\n    await page.addStyleTag({\n      content: `\n        [data-testid*=\"timestamp\"],\n        [data-testid*=\"time\"],\n        .timestamp,\n        .current-time,\n        .last-updated,\n        .real-time-data,\n        .chart-tooltip,\n        .loading-animation,\n        .pulse,\n        .blink {\n          visibility: hidden !important;\n        }\n        \n        /* Hide scrollbars for consistent screenshots */\n        ::-webkit-scrollbar {\n          display: none;\n        }\n        \n        /* Disable animations for consistent screenshots */\n        *, *::before, *::after {\n          animation-duration: 0s !important;\n          animation-delay: 0s !important;\n          transition-duration: 0s !important;\n          transition-delay: 0s !important;\n        }\n      `\n    });\n  }\n\n  static async mockDynamicData(page: Page) {\n    // Mock API responses to ensure consistent data\n    await page.route('**/api/dashboard/stats', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          totalSales: 125000,\n          totalProducts: 1250,\n          lowStockItems: 15,\n          pendingOrders: 8,\n          salesGrowth: 12.5,\n          inventoryValue: 450000,\n        }),\n      });\n    });\n\n    await page.route('**/api/products**', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          products: [\n            {\n              id: 1,\n              name: 'Nike Air Max 270',\n              price: 150.00,\n              stock: 25,\n              category: 'Footwear',\n              image: '/images/sample-product.jpg',\n            },\n            {\n              id: 2,\n              name: 'Adidas Ultraboost 22',\n              price: 180.00,\n              stock: 18,\n              category: 'Footwear',\n              image: '/images/sample-product-2.jpg',\n            },\n          ],\n          total: 2,\n          page: 1,\n          limit: 20,\n        }),\n      });\n    });\n\n    await page.route('**/api/sales**', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          sales: [\n            {\n              id: 1,\n              date: '2024-01-15',\n              amount: 299.99,\n              customer: 'John Doe',\n              status: 'completed',\n            },\n          ],\n          total: 1,\n        }),\n      });\n    });\n  }\n\n  static getScreenshotOptions(viewport: string) {\n    return {\n      fullPage: true,\n      animations: 'disabled' as const,\n      clip: viewport === 'mobile' ? { x: 0, y: 0, width: 375, height: 667 } : undefined,\n      threshold: 0.2, // Allow 20% pixel difference\n      maxDiffPixels: 1000, // Allow up to 1000 different pixels\n    };\n  }\n}\n\n// Main visual regression tests\ntest.describe('Visual Regression Tests', () => {\n  test.beforeEach(async ({ page }) => {\n    // Set up consistent test environment\n    await VisualTestUtils.mockDynamicData(page);\n    \n    // Set consistent timezone\n    await page.addInitScript(() => {\n      // Mock Date to return consistent timestamps\n      const mockDate = new Date('2024-01-15T10:00:00Z');\n      global.Date = class extends Date {\n        constructor(...args: any[]) {\n          if (args.length === 0) {\n            super(mockDate);\n          } else {\n            super(...args);\n          }\n        }\n        static now() {\n          return mockDate.getTime();\n        }\n      } as any;\n    });\n  });\n\n  // Test each page across different viewports\n  Object.entries(VIEWPORTS).forEach(([viewportName, viewport]) => {\n    test.describe(`${viewportName} viewport (${viewport.width}x${viewport.height})`, () => {\n      test.beforeEach(async ({ page }) => {\n        await page.setViewportSize(viewport);\n      });\n\n      PAGES_TO_TEST.forEach(({ name, url, description, waitFor, requiresAuth }) => {\n        test(`${name} page should match visual baseline`, async ({ page }) => {\n          // Authenticate if required\n          if (requiresAuth) {\n            await VisualTestUtils.authenticateUser(page);\n          }\n\n          // Navigate to page\n          await page.goto(url);\n\n          // Wait for page to load completely\n          await VisualTestUtils.waitForPageLoad(page, waitFor);\n\n          // Hide volatile elements\n          await VisualTestUtils.hideVolatileElements(page);\n\n          // Take screenshot and compare\n          await expect(page).toHaveScreenshot(\n            `${name}-${viewportName}.png`,\n            VisualTestUtils.getScreenshotOptions(viewportName)\n          );\n        });\n      });\n    });\n  });\n\n  test.describe('Component Visual Tests', () => {\n    test.beforeEach(async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n    });\n\n    test('navigation menu states', async ({ page }) => {\n      await page.goto('/dashboard');\n      await VisualTestUtils.waitForPageLoad(page);\n      await VisualTestUtils.hideVolatileElements(page);\n\n      // Test collapsed navigation\n      await expect(page.locator('[data-testid=\"navigation\"]')).toHaveScreenshot(\n        'navigation-collapsed.png'\n      );\n\n      // Test expanded navigation (if applicable)\n      const expandButton = page.locator('[data-testid=\"nav-expand\"]');\n      if (await expandButton.isVisible()) {\n        await expandButton.click();\n        await page.waitForTimeout(300); // Wait for animation\n        \n        await expect(page.locator('[data-testid=\"navigation\"]')).toHaveScreenshot(\n          'navigation-expanded.png'\n        );\n      }\n    });\n\n    test('modal dialogs', async ({ page }) => {\n      await page.goto('/products');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      // Open add product modal\n      const addButton = page.locator('[data-testid=\"add-product-button\"]');\n      if (await addButton.isVisible()) {\n        await addButton.click();\n        await page.waitForSelector('[data-testid=\"product-modal\"]');\n        \n        await expect(page.locator('[data-testid=\"product-modal\"]')).toHaveScreenshot(\n          'add-product-modal.png'\n        );\n      }\n    });\n\n    test('form validation states', async ({ page }) => {\n      await page.goto('/login');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      // Test empty form validation\n      await page.click('[data-testid=\"login-button\"]');\n      await page.waitForTimeout(500); // Wait for validation messages\n      \n      await expect(page.locator('form[data-testid=\"login-form\"]')).toHaveScreenshot(\n        'login-form-validation-errors.png'\n      );\n      \n      // Test partially filled form\n      await page.fill('[data-testid=\"email-input\"]', 'invalid-email');\n      await page.click('[data-testid=\"login-button\"]');\n      await page.waitForTimeout(500);\n      \n      await expect(page.locator('form[data-testid=\"login-form\"]')).toHaveScreenshot(\n        'login-form-partial-validation.png'\n      );\n    });\n\n    test('data table states', async ({ page }) => {\n      await page.goto('/products');\n      await VisualTestUtils.waitForPageLoad(page, '[data-testid=\"products-grid\"]');\n      await VisualTestUtils.hideVolatileElements(page);\n      \n      // Test default table state\n      await expect(page.locator('[data-testid=\"products-grid\"]')).toHaveScreenshot(\n        'products-table-default.png'\n      );\n      \n      // Test sorted table (if sortable)\n      const sortButton = page.locator('[data-testid=\"sort-name\"]');\n      if (await sortButton.isVisible()) {\n        await sortButton.click();\n        await page.waitForTimeout(500);\n        \n        await expect(page.locator('[data-testid=\"products-grid\"]')).toHaveScreenshot(\n          'products-table-sorted.png'\n        );\n      }\n      \n      // Test filtered table (if filterable)\n      const filterInput = page.locator('[data-testid=\"search-input\"]');\n      if (await filterInput.isVisible()) {\n        await filterInput.fill('Nike');\n        await page.waitForTimeout(500);\n        \n        await expect(page.locator('[data-testid=\"products-grid\"]')).toHaveScreenshot(\n          'products-table-filtered.png'\n        );\n      }\n    });\n\n    test('loading states', async ({ page }) => {\n      // Intercept API calls to simulate loading\n      await page.route('**/api/products**', async route => {\n        // Delay response to capture loading state\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        await route.continue();\n      });\n      \n      await page.goto('/products');\n      \n      // Capture loading state\n      await expect(page.locator('[data-testid=\"products-container\"]')).toHaveScreenshot(\n        'products-loading-state.png',\n        { timeout: 1000 }\n      );\n    });\n\n    test('empty states', async ({ page }) => {\n      // Mock empty responses\n      await page.route('**/api/products**', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            products: [],\n            total: 0,\n            page: 1,\n            limit: 20,\n          }),\n        });\n      });\n      \n      await page.goto('/products');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      await expect(page.locator('[data-testid=\"products-container\"]')).toHaveScreenshot(\n        'products-empty-state.png'\n      );\n    });\n\n    test('error states', async ({ page }) => {\n      // Mock error responses\n      await page.route('**/api/products**', async route => {\n        await route.fulfill({\n          status: 500,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            error: 'Internal server error',\n          }),\n        });\n      });\n      \n      await page.goto('/products');\n      await page.waitForTimeout(2000); // Wait for error to appear\n      \n      await expect(page.locator('[data-testid=\"products-container\"]')).toHaveScreenshot(\n        'products-error-state.png'\n      );\n    });\n  });\n\n  test.describe('Theme and Dark Mode', () => {\n    test('light theme consistency', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n      \n      // Ensure light theme is active\n      await page.evaluate(() => {\n        document.documentElement.classList.remove('dark');\n        localStorage.setItem('theme', 'light');\n      });\n      \n      await page.goto('/dashboard');\n      await VisualTestUtils.waitForPageLoad(page);\n      await VisualTestUtils.hideVolatileElements(page);\n      \n      await expect(page).toHaveScreenshot('dashboard-light-theme.png');\n    });\n\n    test('dark theme consistency', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n      \n      // Enable dark theme\n      await page.evaluate(() => {\n        document.documentElement.classList.add('dark');\n        localStorage.setItem('theme', 'dark');\n      });\n      \n      await page.goto('/dashboard');\n      await VisualTestUtils.waitForPageLoad(page);\n      await VisualTestUtils.hideVolatileElements(page);\n      \n      await expect(page).toHaveScreenshot('dashboard-dark-theme.png');\n    });\n  });\n\n  test.describe('Print Styles', () => {\n    test('print layout for reports', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n      \n      await page.goto('/reports');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      // Emulate print media\n      await page.emulateMedia({ media: 'print' });\n      \n      await expect(page).toHaveScreenshot('reports-print-layout.png', {\n        fullPage: true,\n      });\n    });\n\n    test('print layout for invoices', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n      \n      // Mock invoice data\n      await page.route('**/api/invoices/1', async route => {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            id: 1,\n            number: 'INV-001',\n            date: '2024-01-15',\n            customer: 'John Doe',\n            items: [\n              { name: 'Nike Air Max', quantity: 1, price: 150.00 },\n            ],\n            total: 150.00,\n          }),\n        });\n      });\n      \n      await page.goto('/invoices/1');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      // Emulate print media\n      await page.emulateMedia({ media: 'print' });\n      \n      await expect(page).toHaveScreenshot('invoice-print-layout.png', {\n        fullPage: true,\n      });\n    });\n  });\n\n  test.describe('Accessibility Visual Tests', () => {\n    test('high contrast mode', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await VisualTestUtils.authenticateUser(page);\n      \n      // Enable high contrast mode\n      await page.addStyleTag({\n        content: `\n          @media (prefers-contrast: high) {\n            * {\n              filter: contrast(150%) !important;\n            }\n          }\n        `\n      });\n      \n      await page.goto('/dashboard');\n      await VisualTestUtils.waitForPageLoad(page);\n      await VisualTestUtils.hideVolatileElements(page);\n      \n      await expect(page).toHaveScreenshot('dashboard-high-contrast.png');\n    });\n\n    test('focus indicators visibility', async ({ page }) => {\n      await page.setViewportSize(VIEWPORTS.desktop);\n      await page.goto('/login');\n      await VisualTestUtils.waitForPageLoad(page);\n      \n      // Focus on email input\n      await page.focus('[data-testid=\"email-input\"]');\n      \n      await expect(page.locator('form[data-testid=\"login-form\"]')).toHaveScreenshot(\n        'login-form-focus-email.png'\n      );\n      \n      // Focus on password input\n      await page.focus('[data-testid=\"password-input\"]');\n      \n      await expect(page.locator('form[data-testid=\"login-form\"]')).toHaveScreenshot(\n        'login-form-focus-password.png'\n      );\n      \n      // Focus on submit button\n      await page.focus('[data-testid=\"login-button\"]');\n      \n      await expect(page.locator('form[data-testid=\"login-form\"]')).toHaveScreenshot(\n        'login-form-focus-button.png'\n      );\n    });\n  });\n});\n\n// Performance visual tests\ntest.describe('Performance Visual Tests', () => {\n  test('layout stability during loading', async ({ page }) => {\n    await page.setViewportSize(VIEWPORTS.desktop);\n    \n    // Slow down network to observe loading behavior\n    await page.route('**/*', async route => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      await route.continue();\n    });\n    \n    await page.goto('/dashboard');\n    \n    // Take screenshots at different loading stages\n    await page.waitForTimeout(500);\n    await expect(page).toHaveScreenshot('dashboard-loading-stage-1.png');\n    \n    await page.waitForTimeout(1000);\n    await expect(page).toHaveScreenshot('dashboard-loading-stage-2.png');\n    \n    await VisualTestUtils.waitForPageLoad(page);\n    await expect(page).toHaveScreenshot('dashboard-loading-complete.png');\n  });\n\n  test('responsive image loading', async ({ page }) => {\n    await page.setViewportSize(VIEWPORTS.mobile);\n    await VisualTestUtils.authenticateUser(page);\n    \n    await page.goto('/products');\n    await VisualTestUtils.waitForPageLoad(page);\n    \n    // Check that images are properly sized for mobile\n    await expect(page.locator('[data-testid=\"products-grid\"]')).toHaveScreenshot(\n      'products-mobile-images.png'\n    );\n    \n    // Switch to desktop and verify images scale appropriately\n    await page.setViewportSize(VIEWPORTS.desktop);\n    await page.waitForTimeout(500); // Wait for responsive changes\n    \n    await expect(page.locator('[data-testid=\"products-grid\"]')).toHaveScreenshot(\n      'products-desktop-images.png'\n    );\n  });\n});"],"names":["VIEWPORTS","mobile","width","height","tablet","desktop","ultrawide","PAGES_TO_TEST","name","url","description","waitFor","requiresAuth","VisualTestUtils","authenticateUser","page","goto","fill","click","waitForURL","expect","locator","toBeVisible","waitForPageLoad","waitForLoadState","waitForSelector","timeout","waitForFunction","spinners","document","querySelectorAll","length","catch","waitForTimeout","hideVolatileElements","addStyleTag","content","mockDynamicData","route","fulfill","status","contentType","body","JSON","stringify","totalSales","totalProducts","lowStockItems","pendingOrders","salesGrowth","inventoryValue","products","id","price","stock","category","image","total","limit","sales","date","amount","customer","getScreenshotOptions","viewport","fullPage","animations","clip","x","y","undefined","threshold","maxDiffPixels","test","describe","beforeEach","addInitScript","mockDate","Date","global","constructor","args","now","getTime","Object","entries","forEach","viewportName","setViewportSize","toHaveScreenshot","expandButton","isVisible","addButton","sortButton","filterInput","Promise","resolve","setTimeout","continue","error","evaluate","documentElement","classList","remove","localStorage","setItem","add","emulateMedia","media","number","items","quantity","focus"],"mappings":"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"}