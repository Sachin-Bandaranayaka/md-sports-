3942df0ce2a1fd03539d4bf344a034f1
"use strict";

/* istanbul ignore next */
function cov_trd22sxb5() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts";
  var hash = "3ff933ae4d0cad535c7b528d674acdb53e0cc86f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "10": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "11": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 55
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "13": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 31,
          column: 57
        }
      },
      "14": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "15": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "16": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "18": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 40,
          column: 14
        }
      },
      "19": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "20": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 58
        }
      },
      "21": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 14
        }
      },
      "23": {
        start: {
          line: 54,
          column: 15
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "25": {
        start: {
          line: 58,
          column: 15
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "27": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "28": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 53
        }
      },
      "29": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 59
        }
      },
      "30": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "31": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "32": {
        start: {
          line: 102,
          column: 21
        },
        end: {
          line: 102,
          column: 41
        }
      },
      "33": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "34": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 105
        }
      },
      "35": {
        start: {
          line: 108,
          column: 44
        },
        end: {
          line: 108,
          column: 48
        }
      },
      "36": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "37": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 78
        }
      },
      "38": {
        start: {
          line: 112,
          column: 15
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "39": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 82
        }
      },
      "40": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "41": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 46
        }
      },
      "42": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "43": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 38
        }
      },
      "44": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "45": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 74
        }
      },
      "46": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 44
        }
      },
      "47": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 44
        }
      },
      "48": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 44
        }
      },
      "49": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "50": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 42
        }
      },
      "51": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "52": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 42
        }
      },
      "53": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "54": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 39
        }
      },
      "55": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "56": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 40
        }
      },
      "57": {
        start: {
          line: 152,
          column: 26
        },
        end: {
          line: 190,
          column: 10
        }
      },
      "58": {
        start: {
          line: 154,
          column: 37
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "59": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "60": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "61": {
        start: {
          line: 160,
          column: 37
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "62": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 173,
          column: 23
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "64": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "65": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 58
        }
      },
      "66": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 100,
            column: 19
          }
        },
        loc: {
          start: {
            line: 100,
            column: 29
          },
          end: {
            line: 202,
            column: 1
          }
        },
        line: 100
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 152,
            column: 61
          },
          end: {
            line: 152,
            column: 62
          }
        },
        loc: {
          start: {
            line: 152,
            column: 73
          },
          end: {
            line: 190,
            column: 9
          }
        },
        line: 152
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 14
          }
        }, {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 32
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 49
          }
        }, {
          start: {
            line: 29,
            column: 53
          },
          end: {
            line: 29,
            column: 55
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 21
          }
        }, {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 32
          }
        }],
        line: 49
      },
      "7": {
        loc: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }],
        line: 54
      },
      "8": {
        loc: {
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 116,
            column: 9
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 36
          }
        }, {
          start: {
            line: 110,
            column: 40
          },
          end: {
            line: 110,
            column: 84
          }
        }],
        line: 110
      },
      "12": {
        loc: {
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "13": {
        loc: {
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 112,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 112,
            column: 43
          }
        }, {
          start: {
            line: 112,
            column: 47
          },
          end: {
            line: 112,
            column: 91
          }
        }],
        line: 112
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 126
      },
      "17": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "18": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "19": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "20": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "21": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "22": {
        loc: {
          start: {
            line: 158,
            column: 16
          },
          end: {
            line: 158,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 16
          },
          end: {
            line: 158,
            column: 21
          }
        }, {
          start: {
            line: 158,
            column: 25
          },
          end: {
            line: 158,
            column: 45
          }
        }],
        line: 158
      },
      "23": {
        loc: {
          start: {
            line: 164,
            column: 42
          },
          end: {
            line: 164,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 42
          },
          end: {
            line: 164,
            column: 56
          }
        }, {
          start: {
            line: 164,
            column: 60
          },
          end: {
            line: 164,
            column: 70
          }
        }],
        line: 164
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET /api/quotations - Get all quotations\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('search') || '';\n        const status = searchParams.get('status');\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n\n        // Build the where clause for Prisma\n        const whereClause: any = {};\n\n        if (search) {\n            whereClause.quotationNumber = {\n                contains: search,\n                mode: 'insensitive'\n            };\n        }\n\n        // Note: status field is not available in Quotation model\n        // if (status) {\n        //     whereClause.status = status;\n        // }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate)\n            };\n        } else if (startDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate)\n            };\n        } else if (endDate) {\n            whereClause.createdAt = {\n                lte: new Date(endDate)\n            };\n        }\n\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: {\n                            select: {\n                                id: true,\n                                name: true,\n                                sku: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(quotations);\n    } catch (error) {\n        console.error('Error fetching quotations:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotations' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "searchParams", "URL", "url", "search", "get", "status", "customerId", "startDate", "endDate", "whereClause", "quotationNumber", "contains", "mode", "parseInt", "createdAt", "gte", "Date", "lte", "quotations", "prisma", "quotation", "findMany", "where", "include", "customer", "select", "id", "name", "email", "phone", "items", "product", "sku", "orderBy", "NextResponse", "json", "error", "console", "body", "Math", "floor", "random", "toString", "padStart", "quotationData", "customerName", "date", "expiryDate", "validUntil", "subtotal", "discount", "notes", "$transaction", "tx", "createdQuotation", "create", "data", "Array", "isArray", "item", "itemData", "quotationId", "productId", "quantity", "price", "parseFloat", "unitPrice", "total", "quotationItem", "findUnique"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3ff933ae4d0cad535c7b528d674acdb53e0cc86f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_trd22sxb5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_trd22sxb5();
cov_trd22sxb5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[0]++;
  cov_trd22sxb5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_trd22sxb5().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[1]++;
    cov_trd22sxb5().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[2]++;
    cov_trd22sxb5().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_trd22sxb5().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_trd22sxb5().s[7]++, _interop_require_default(require("../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[3]++;
  cov_trd22sxb5().s[8]++;
  return /* istanbul ignore next */(cov_trd22sxb5().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_trd22sxb5().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[4]++;
  cov_trd22sxb5().s[9]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[10]++, new URL(request.url));
    const search =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[11]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[2][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[2][1]++, ""));
    const status =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[12]++, searchParams.get("status"));
    const customerId =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[13]++, searchParams.get("customerId"));
    const startDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[14]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[15]++, searchParams.get("endDate"));
    // Build the where clause for Prisma
    const whereClause =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[16]++, {});
    /* istanbul ignore next */
    cov_trd22sxb5().s[17]++;
    if (search) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[3][0]++;
      cov_trd22sxb5().s[18]++;
      whereClause.quotationNumber = {
        contains: search,
        mode: "insensitive"
      };
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[3][1]++;
    }
    // Note: status field is not available in Quotation model
    // if (status) {
    //     whereClause.status = status;
    // }
    cov_trd22sxb5().s[19]++;
    if (customerId) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[4][0]++;
      cov_trd22sxb5().s[20]++;
      whereClause.customerId = parseInt(customerId);
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[4][1]++;
    }
    cov_trd22sxb5().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[6][0]++, startDate) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[6][1]++, endDate)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[5][0]++;
      cov_trd22sxb5().s[22]++;
      whereClause.createdAt = {
        gte: new Date(startDate),
        lte: new Date(endDate)
      };
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[5][1]++;
      cov_trd22sxb5().s[23]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[7][0]++;
        cov_trd22sxb5().s[24]++;
        whereClause.createdAt = {
          gte: new Date(startDate)
        };
      } else {
        /* istanbul ignore next */
        cov_trd22sxb5().b[7][1]++;
        cov_trd22sxb5().s[25]++;
        if (endDate) {
          /* istanbul ignore next */
          cov_trd22sxb5().b[8][0]++;
          cov_trd22sxb5().s[26]++;
          whereClause.createdAt = {
            lte: new Date(endDate)
          };
        } else
        /* istanbul ignore next */
        {
          cov_trd22sxb5().b[8][1]++;
        }
      }
    }
    const quotations =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[27]++, await _prisma.default.quotation.findMany({
      where: whereClause,
      include: {
        customer: {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                sku: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[28]++;
    return _server.NextResponse.json(quotations);
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[29]++;
    console.error("Error fetching quotations:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[30]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotations"
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[5]++;
  cov_trd22sxb5().s[31]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[32]++, await request.json());
    // Generate a quotation number if not provided
    /* istanbul ignore next */
    cov_trd22sxb5().s[33]++;
    if (!body.quotationNumber) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[9][0]++;
      cov_trd22sxb5().s[34]++;
      body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, "0")}`;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[9][1]++;
    }
    // Extract items from the request
    const {
      items,
      ...quotationData
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[35]++, body);
    // Ensure customerId is an integer
    /* istanbul ignore next */
    cov_trd22sxb5().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[11][0]++, quotationData.customerId) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[11][1]++, typeof quotationData.customerId === "string")) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[10][0]++;
      cov_trd22sxb5().s[37]++;
      quotationData.customerId = parseInt(quotationData.customerId, 10);
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[10][1]++;
      cov_trd22sxb5().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[13][0]++, quotationData.customerId) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[13][1]++, typeof quotationData.customerId !== "number")) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[12][0]++;
        cov_trd22sxb5().s[39]++;
        // Potentially return an error if customerId is not a parsable string or number
        console.error("Invalid customerId format:", quotationData.customerId);
        // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[12][1]++;
      }
    }
    // Remove customerName as it's not a direct field of Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[40]++;
    if ("customerName" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[14][0]++;
      cov_trd22sxb5().s[41]++;
      delete quotationData.customerName;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[14][1]++;
    }
    // Remove date as createdAt is automatically handled by Prisma
    cov_trd22sxb5().s[42]++;
    if ("date" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[15][0]++;
      cov_trd22sxb5().s[43]++;
      delete quotationData.date;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[15][1]++;
    }
    // Rename expiryDate to validUntil and convert to Date object
    cov_trd22sxb5().s[44]++;
    if (quotationData.expiryDate) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[16][0]++;
      cov_trd22sxb5().s[45]++;
      quotationData.validUntil = new Date(quotationData.expiryDate);
      /* istanbul ignore next */
      cov_trd22sxb5().s[46]++;
      delete quotationData.expiryDate;
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[16][1]++;
      cov_trd22sxb5().s[47]++;
      // Set validUntil to null or a default if expiryDate is not provided and it's optional
      // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.
      // If you want to ensure it's always set, you might add a default here or make it required in the request.
      quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields
      /* istanbul ignore next */
      cov_trd22sxb5().s[48]++;
      delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar
    }
    // Remove subtotal and discount as they are not direct fields of the Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[49]++;
    if ("subtotal" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[17][0]++;
      cov_trd22sxb5().s[50]++;
      delete quotationData.subtotal;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[17][1]++;
    }
    cov_trd22sxb5().s[51]++;
    if ("discount" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[18][0]++;
      cov_trd22sxb5().s[52]++;
      delete quotationData.discount;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[18][1]++;
    }
    // Remove notes as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[53]++;
    if ("notes" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[19][0]++;
      cov_trd22sxb5().s[54]++;
      delete quotationData.notes;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[19][1]++;
    }
    // Remove status as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[55]++;
    if ("status" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[20][0]++;
      cov_trd22sxb5().s[56]++;
      delete quotationData.status;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[20][1]++;
    }
    // Create the quotation with items in a transaction
    const quotation =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[57]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_trd22sxb5().f[6]++;
      // Create the quotation
      const createdQuotation =
      /* istanbul ignore next */
      (cov_trd22sxb5().s[58]++, await tx.quotation.create({
        data: quotationData
      }));
      // Create the quotation items
      /* istanbul ignore next */
      cov_trd22sxb5().s[59]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[22][0]++, items) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[22][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[21][0]++;
        cov_trd22sxb5().s[60]++;
        for (const item of items) {
          const itemData =
          /* istanbul ignore next */
          (cov_trd22sxb5().s[61]++, {
            quotationId: createdQuotation.id,
            productId: parseInt(item.productId, 10),
            quantity: parseInt(item.quantity, 10),
            price: parseFloat(
            /* istanbul ignore next */
            (cov_trd22sxb5().b[23][0]++, item.unitPrice) ||
            /* istanbul ignore next */
            (cov_trd22sxb5().b[23][1]++, item.price)),
            total: parseFloat(item.total) // Ensure total is also a float
          });
          // Remove productName if it exists, as it's not part of QuotationItem schema
          // The actual product details are linked via productId
          // We also remove unitPrice explicitly if it was the original field name
          // and any other unexpected fields that might have come from `...item` spread previously.
          /* istanbul ignore next */
          cov_trd22sxb5().s[62]++;
          await tx.quotationItem.create({
            data: itemData
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[21][1]++;
      }
      // Return the complete quotation with relations
      cov_trd22sxb5().s[63]++;
      return tx.quotation.findUnique({
        where: {
          id: createdQuotation.id
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[64]++;
    return _server.NextResponse.json(quotation, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[65]++;
    console.error("Error creating quotation:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[66]++;
    return _server.NextResponse.json({
      error: "Failed to create quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,