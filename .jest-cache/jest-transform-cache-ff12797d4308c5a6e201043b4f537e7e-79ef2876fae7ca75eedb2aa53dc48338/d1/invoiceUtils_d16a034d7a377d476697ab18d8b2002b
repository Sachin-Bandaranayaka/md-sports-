187125853a017eef395db00f11b5b443
"use strict";

/* istanbul ignore next */
function cov_1zavllnp3a() {
  var path = "/Users/sachin/Documents/md-sports-/src/utils/invoiceUtils.ts";
  var hash = "f92e245456e35cf83328bf5aa9dd36f392ffeee1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/utils/invoiceUtils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 53
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "9": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 32
        }
      },
      "10": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 31
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 64
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 20
        }
      },
      "14": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 44
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "17": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 70
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "19": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 59,
          column: 59
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "22": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "23": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 27
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "25": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "26": {
        start: {
          line: 73,
          column: 31
        },
        end: {
          line: 73,
          column: 91
        }
      },
      "27": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "28": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 35
        }
      },
      "29": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 34
        }
      },
      "30": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 90
        }
      },
      "31": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 30
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 97,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 15,
            column: 34
          }
        },
        loc: {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "findOverdueInvoices",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 34
          }
        },
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "sendOverduePaymentReminders",
        decl: {
          start: {
            line: 44,
            column: 15
          },
          end: {
            line: 44,
            column: 42
          }
        },
        loc: {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 44
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: 76,
            column: 23
          },
          end: {
            line: 78,
            column: 17
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 74,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 74,
            column: 40
          }
        }, {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 63
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 94,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 46
          },
          end: {
            line: 94,
            column: 59
          }
        }, {
          start: {
            line: 94,
            column: 62
          },
          end: {
            line: 94,
            column: 77
          }
        }],
        line: 94
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/utils/invoiceUtils.ts"],
      sourcesContent: ["import { prisma } from '@/lib/prisma';\nimport { smsService } from '@/services/smsService';\n\n/**\n * Find all overdue invoices\n * @returns Array of overdue invoices\n */\nexport async function findOverdueInvoices() {\n    try {\n        const today = new Date();\n\n        // Find invoices that are past due date and not fully paid\n        const overdueInvoices = await prisma.invoice.findMany({\n            where: {\n                dueDate: {\n                    lt: today\n                },\n                paymentStatus: {\n                    not: 'paid'\n                }\n            },\n            include: {\n                customer: true\n            }\n        });\n\n        return overdueInvoices;\n    } catch (error) {\n        console.error('Error finding overdue invoices:', error);\n        throw error;\n    }\n}\n\n/**\n * Send payment reminders for all overdue invoices\n * @returns Object with success count and failed count\n */\nexport async function sendOverduePaymentReminders() {\n    try {\n        // Initialize SMS service\n        await smsService.init();\n\n        // Check if SMS service is configured\n        if (!smsService.isConfigured()) {\n            console.warn('SMS service is not configured or disabled');\n            return {\n                success: false,\n                message: 'SMS service is not configured or disabled',\n                successCount: 0,\n                failedCount: 0\n            };\n        }\n\n        // Find overdue invoices\n        const overdueInvoices = await findOverdueInvoices();\n\n        if (overdueInvoices.length === 0) {\n            return {\n                success: true,\n                message: 'No overdue invoices found',\n                successCount: 0,\n                failedCount: 0\n            };\n        }\n\n        // Send reminders\n        let successCount = 0;\n        let failedCount = 0;\n\n        for (const invoice of overdueInvoices) {\n            try {\n                const result = await smsService.sendPaymentReminder(invoice.id);\n\n                if (result.status >= 200 && result.status < 300) {\n                    successCount++;\n                } else {\n                    failedCount++;\n                }\n            } catch (error) {\n                console.error(`Error sending reminder for invoice ${invoice.id}:`, error);\n                failedCount++;\n            }\n        }\n\n        return {\n            success: true,\n            message: `Sent ${successCount} payment reminders (${failedCount} failed)`,\n            successCount,\n            failedCount\n        };\n    } catch (error) {\n        console.error('Error sending payment reminders:', error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : 'Unknown error',\n            successCount: 0,\n            failedCount: 0\n        };\n    }\n} "],
      names: ["findOverdueInvoices", "sendOverduePaymentReminders", "today", "Date", "overdueInvoices", "prisma", "invoice", "findMany", "where", "dueDate", "lt", "paymentStatus", "not", "include", "customer", "error", "console", "smsService", "init", "isConfigured", "warn", "success", "message", "successCount", "failedCount", "length", "result", "sendPaymentReminder", "id", "status", "Error"],
      mappings: ";;;;;;;;;;;IAOsBA,mBAAmB;eAAnBA;;IA8BAC,2BAA2B;eAA3BA;;;wBArCC;4BACI;AAMpB,eAAeD;IAClB,IAAI;QACA,MAAME,QAAQ,IAAIC;QAElB,0DAA0D;QAC1D,MAAMC,kBAAkB,MAAMC,cAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;YAClDC,OAAO;gBACHC,SAAS;oBACLC,IAAIR;gBACR;gBACAS,eAAe;oBACXC,KAAK;gBACT;YACJ;YACAC,SAAS;gBACLC,UAAU;YACd;QACJ;QAEA,OAAOV;IACX,EAAE,OAAOW,OAAO;QACZC,QAAQD,KAAK,CAAC,mCAAmCA;QACjD,MAAMA;IACV;AACJ;AAMO,eAAed;IAClB,IAAI;QACA,yBAAyB;QACzB,MAAMgB,sBAAU,CAACC,IAAI;QAErB,qCAAqC;QACrC,IAAI,CAACD,sBAAU,CAACE,YAAY,IAAI;YAC5BH,QAAQI,IAAI,CAAC;YACb,OAAO;gBACHC,SAAS;gBACTC,SAAS;gBACTC,cAAc;gBACdC,aAAa;YACjB;QACJ;QAEA,wBAAwB;QACxB,MAAMpB,kBAAkB,MAAMJ;QAE9B,IAAII,gBAAgBqB,MAAM,KAAK,GAAG;YAC9B,OAAO;gBACHJ,SAAS;gBACTC,SAAS;gBACTC,cAAc;gBACdC,aAAa;YACjB;QACJ;QAEA,iBAAiB;QACjB,IAAID,eAAe;QACnB,IAAIC,cAAc;QAElB,KAAK,MAAMlB,WAAWF,gBAAiB;YACnC,IAAI;gBACA,MAAMsB,SAAS,MAAMT,sBAAU,CAACU,mBAAmB,CAACrB,QAAQsB,EAAE;gBAE9D,IAAIF,OAAOG,MAAM,IAAI,OAAOH,OAAOG,MAAM,GAAG,KAAK;oBAC7CN;gBACJ,OAAO;oBACHC;gBACJ;YACJ,EAAE,OAAOT,OAAO;gBACZC,QAAQD,KAAK,CAAC,CAAC,mCAAmC,EAAET,QAAQsB,EAAE,CAAC,CAAC,CAAC,EAAEb;gBACnES;YACJ;QACJ;QAEA,OAAO;YACHH,SAAS;YACTC,SAAS,CAAC,KAAK,EAAEC,aAAa,oBAAoB,EAAEC,YAAY,QAAQ,CAAC;YACzED;YACAC;QACJ;IACJ,EAAE,OAAOT,OAAO;QACZC,QAAQD,KAAK,CAAC,oCAAoCA;QAClD,OAAO;YACHM,SAAS;YACTC,SAASP,iBAAiBe,QAAQf,MAAMO,OAAO,GAAG;YAClDC,cAAc;YACdC,aAAa;QACjB;IACJ;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f92e245456e35cf83328bf5aa9dd36f392ffeee1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zavllnp3a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zavllnp3a();
cov_1zavllnp3a().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1zavllnp3a().f[0]++;
  cov_1zavllnp3a().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1zavllnp3a().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1zavllnp3a().s[3]++;
_export(exports, {
  findOverdueInvoices: function () {
    /* istanbul ignore next */
    cov_1zavllnp3a().f[1]++;
    cov_1zavllnp3a().s[4]++;
    return findOverdueInvoices;
  },
  sendOverduePaymentReminders: function () {
    /* istanbul ignore next */
    cov_1zavllnp3a().f[2]++;
    cov_1zavllnp3a().s[5]++;
    return sendOverduePaymentReminders;
  }
});
const _prisma =
/* istanbul ignore next */
(cov_1zavllnp3a().s[6]++, require("../lib/prisma"));
const _smsService =
/* istanbul ignore next */
(cov_1zavllnp3a().s[7]++, require("../services/smsService"));
async function findOverdueInvoices() {
  /* istanbul ignore next */
  cov_1zavllnp3a().f[3]++;
  cov_1zavllnp3a().s[8]++;
  try {
    const today =
    /* istanbul ignore next */
    (cov_1zavllnp3a().s[9]++, new Date());
    // Find invoices that are past due date and not fully paid
    const overdueInvoices =
    /* istanbul ignore next */
    (cov_1zavllnp3a().s[10]++, await _prisma.prisma.invoice.findMany({
      where: {
        dueDate: {
          lt: today
        },
        paymentStatus: {
          not: "paid"
        }
      },
      include: {
        customer: true
      }
    }));
    /* istanbul ignore next */
    cov_1zavllnp3a().s[11]++;
    return overdueInvoices;
  } catch (error) {
    /* istanbul ignore next */
    cov_1zavllnp3a().s[12]++;
    console.error("Error finding overdue invoices:", error);
    /* istanbul ignore next */
    cov_1zavllnp3a().s[13]++;
    throw error;
  }
}
async function sendOverduePaymentReminders() {
  /* istanbul ignore next */
  cov_1zavllnp3a().f[4]++;
  cov_1zavllnp3a().s[14]++;
  try {
    /* istanbul ignore next */
    cov_1zavllnp3a().s[15]++;
    // Initialize SMS service
    await _smsService.smsService.init();
    // Check if SMS service is configured
    /* istanbul ignore next */
    cov_1zavllnp3a().s[16]++;
    if (!_smsService.smsService.isConfigured()) {
      /* istanbul ignore next */
      cov_1zavllnp3a().b[0][0]++;
      cov_1zavllnp3a().s[17]++;
      console.warn("SMS service is not configured or disabled");
      /* istanbul ignore next */
      cov_1zavllnp3a().s[18]++;
      return {
        success: false,
        message: "SMS service is not configured or disabled",
        successCount: 0,
        failedCount: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zavllnp3a().b[0][1]++;
    }
    // Find overdue invoices
    const overdueInvoices =
    /* istanbul ignore next */
    (cov_1zavllnp3a().s[19]++, await findOverdueInvoices());
    /* istanbul ignore next */
    cov_1zavllnp3a().s[20]++;
    if (overdueInvoices.length === 0) {
      /* istanbul ignore next */
      cov_1zavllnp3a().b[1][0]++;
      cov_1zavllnp3a().s[21]++;
      return {
        success: true,
        message: "No overdue invoices found",
        successCount: 0,
        failedCount: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_1zavllnp3a().b[1][1]++;
    }
    // Send reminders
    let successCount =
    /* istanbul ignore next */
    (cov_1zavllnp3a().s[22]++, 0);
    let failedCount =
    /* istanbul ignore next */
    (cov_1zavllnp3a().s[23]++, 0);
    /* istanbul ignore next */
    cov_1zavllnp3a().s[24]++;
    for (const invoice of overdueInvoices) {
      /* istanbul ignore next */
      cov_1zavllnp3a().s[25]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1zavllnp3a().s[26]++, await _smsService.smsService.sendPaymentReminder(invoice.id));
        /* istanbul ignore next */
        cov_1zavllnp3a().s[27]++;
        if (
        /* istanbul ignore next */
        (cov_1zavllnp3a().b[3][0]++, result.status >= 200) &&
        /* istanbul ignore next */
        (cov_1zavllnp3a().b[3][1]++, result.status < 300)) {
          /* istanbul ignore next */
          cov_1zavllnp3a().b[2][0]++;
          cov_1zavllnp3a().s[28]++;
          successCount++;
        } else {
          /* istanbul ignore next */
          cov_1zavllnp3a().b[2][1]++;
          cov_1zavllnp3a().s[29]++;
          failedCount++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1zavllnp3a().s[30]++;
        console.error(`Error sending reminder for invoice ${invoice.id}:`, error);
        /* istanbul ignore next */
        cov_1zavllnp3a().s[31]++;
        failedCount++;
      }
    }
    /* istanbul ignore next */
    cov_1zavllnp3a().s[32]++;
    return {
      success: true,
      message: `Sent ${successCount} payment reminders (${failedCount} failed)`,
      successCount,
      failedCount
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1zavllnp3a().s[33]++;
    console.error("Error sending payment reminders:", error);
    /* istanbul ignore next */
    cov_1zavllnp3a().s[34]++;
    return {
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1zavllnp3a().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1zavllnp3a().b[4][1]++, "Unknown error"),
      successCount: 0,
      failedCount: 0
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,