{"version":3,"names":["GET","cov_trd22sxb5","f","s","POST","request","searchParams","URL","url","search","b","get","status","customerId","startDate","endDate","whereClause","quotationNumber","contains","mode","parseInt","createdAt","gte","Date","lte","quotations","_prisma","default","quotation","findMany","where","include","customer","select","id","name","email","phone","items","product","sku","orderBy","_server","NextResponse","json","error","console","body","Math","floor","random","toString","padStart","quotationData","customerName","date","expiryDate","validUntil","subtotal","discount","notes","$transaction","tx","createdQuotation","create","data","Array","isArray","item","itemData","quotationId","productId","quantity","price","parseFloat","unitPrice","total","quotationItem","findUnique"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET /api/quotations - Get all quotations\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('search') || '';\n        const status = searchParams.get('status');\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n\n        // Build the where clause for Prisma\n        const whereClause: any = {};\n\n        if (search) {\n            whereClause.quotationNumber = {\n                contains: search,\n                mode: 'insensitive'\n            };\n        }\n\n        // Note: status field is not available in Quotation model\n        // if (status) {\n        //     whereClause.status = status;\n        // }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate)\n            };\n        } else if (startDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate)\n            };\n        } else if (endDate) {\n            whereClause.createdAt = {\n                lte: new Date(endDate)\n            };\n        }\n\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: {\n                            select: {\n                                id: true,\n                                name: true,\n                                sku: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(quotations);\n    } catch (error) {\n        console.error('Error fetching quotations:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotations' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        const body = await request.json();\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}