b022651b69e5015636d2249babb63f3d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@playwright/test");
// Visual regression test configuration
const VIEWPORTS = {
    mobile: {
        width: 375,
        height: 667
    },
    tablet: {
        width: 768,
        height: 1024
    },
    desktop: {
        width: 1920,
        height: 1080
    },
    ultrawide: {
        width: 2560,
        height: 1440
    }
};
const PAGES_TO_TEST = [
    {
        name: "login",
        url: "/login",
        description: "Login page with form and branding",
        waitFor: 'form[data-testid="login-form"]'
    },
    {
        name: "dashboard",
        url: "/dashboard",
        description: "Main dashboard with stats and charts",
        waitFor: '[data-testid="dashboard-stats"]',
        requiresAuth: true
    },
    {
        name: "products-list",
        url: "/products",
        description: "Products listing page with filters",
        waitFor: '[data-testid="products-grid"]',
        requiresAuth: true
    },
    {
        name: "product-detail",
        url: "/products/1",
        description: "Individual product detail page",
        waitFor: '[data-testid="product-details"]',
        requiresAuth: true
    },
    {
        name: "inventory",
        url: "/inventory",
        description: "Inventory management interface",
        waitFor: '[data-testid="inventory-table"]',
        requiresAuth: true
    },
    {
        name: "sales",
        url: "/sales",
        description: "Sales dashboard and transactions",
        waitFor: '[data-testid="sales-dashboard"]',
        requiresAuth: true
    },
    {
        name: "reports",
        url: "/reports",
        description: "Reports and analytics page",
        waitFor: '[data-testid="reports-container"]',
        requiresAuth: true
    },
    {
        name: "settings",
        url: "/settings",
        description: "Application settings page",
        waitFor: '[data-testid="settings-form"]',
        requiresAuth: true
    }
];
// Test utilities
class VisualTestUtils {
    static async authenticateUser(page) {
        // Navigate to login page
        await page.goto("/login");
        // Fill login form
        await page.fill('[data-testid="email-input"]', "admin@test.com");
        await page.fill('[data-testid="password-input"]', "password123");
        // Submit form
        await page.click('[data-testid="login-button"]');
        // Wait for redirect to dashboard
        await page.waitForURL("/dashboard");
        // Verify authentication
        await (0, _test.expect)(page.locator('[data-testid="user-menu"]')).toBeVisible();
    }
    static async waitForPageLoad(page, waitFor) {
        // Wait for network to be idle
        await page.waitForLoadState("networkidle");
        // Wait for specific element if provided
        if (waitFor) {
            await page.waitForSelector(waitFor, {
                timeout: 10000
            });
        }
        // Wait for any loading spinners to disappear
        await page.waitForFunction(()=>{
            const spinners = document.querySelectorAll('[data-testid*="loading"], .loading, .spinner');
            return spinners.length === 0;
        }, {
            timeout: 5000
        }).catch(()=>{
        // Ignore timeout - some pages might not have loading indicators
        });
        // Additional wait for animations to complete
        await page.waitForTimeout(500);
    }
    static async hideVolatileElements(page) {
        // Hide elements that change frequently and would cause false positives
        await page.addStyleTag({
            content: `
        [data-testid*="timestamp"],
        [data-testid*="time"],
        .timestamp,
        .current-time,
        .last-updated,
        .real-time-data,
        .chart-tooltip,
        .loading-animation,
        .pulse,
        .blink {
          visibility: hidden !important;
        }
        
        /* Hide scrollbars for consistent screenshots */
        ::-webkit-scrollbar {
          display: none;
        }
        
        /* Disable animations for consistent screenshots */
        *, *::before, *::after {
          animation-duration: 0s !important;
          animation-delay: 0s !important;
          transition-duration: 0s !important;
          transition-delay: 0s !important;
        }
      `
        });
    }
    static async mockDynamicData(page) {
        // Mock API responses to ensure consistent data
        await page.route("**/api/dashboard/stats", async (route)=>{
            await route.fulfill({
                status: 200,
                contentType: "application/json",
                body: JSON.stringify({
                    totalSales: 125000,
                    totalProducts: 1250,
                    lowStockItems: 15,
                    pendingOrders: 8,
                    salesGrowth: 12.5,
                    inventoryValue: 450000
                })
            });
        });
        await page.route("**/api/products**", async (route)=>{
            await route.fulfill({
                status: 200,
                contentType: "application/json",
                body: JSON.stringify({
                    products: [
                        {
                            id: 1,
                            name: "Nike Air Max 270",
                            price: 150.00,
                            stock: 25,
                            category: "Footwear",
                            image: "/images/sample-product.jpg"
                        },
                        {
                            id: 2,
                            name: "Adidas Ultraboost 22",
                            price: 180.00,
                            stock: 18,
                            category: "Footwear",
                            image: "/images/sample-product-2.jpg"
                        }
                    ],
                    total: 2,
                    page: 1,
                    limit: 20
                })
            });
        });
        await page.route("**/api/sales**", async (route)=>{
            await route.fulfill({
                status: 200,
                contentType: "application/json",
                body: JSON.stringify({
                    sales: [
                        {
                            id: 1,
                            date: "2024-01-15",
                            amount: 299.99,
                            customer: "John Doe",
                            status: "completed"
                        }
                    ],
                    total: 1
                })
            });
        });
    }
    static getScreenshotOptions(viewport) {
        return {
            fullPage: true,
            animations: "disabled",
            clip: viewport === "mobile" ? {
                x: 0,
                y: 0,
                width: 375,
                height: 667
            } : undefined,
            threshold: 0.2,
            maxDiffPixels: 1000
        };
    }
}
// Main visual regression tests
_test.test.describe("Visual Regression Tests", ()=>{
    _test.test.beforeEach(async ({ page })=>{
        // Set up consistent test environment
        await VisualTestUtils.mockDynamicData(page);
        // Set consistent timezone
        await page.addInitScript(()=>{
            // Mock Date to return consistent timestamps
            const mockDate = new Date("2024-01-15T10:00:00Z");
            global.Date = class extends Date {
                constructor(...args){
                    if (args.length === 0) {
                        super(mockDate);
                    } else {
                        super(...args);
                    }
                }
                static now() {
                    return mockDate.getTime();
                }
            };
        });
    });
    // Test each page across different viewports
    Object.entries(VIEWPORTS).forEach(([viewportName, viewport])=>{
        _test.test.describe(`${viewportName} viewport (${viewport.width}x${viewport.height})`, ()=>{
            _test.test.beforeEach(async ({ page })=>{
                await page.setViewportSize(viewport);
            });
            PAGES_TO_TEST.forEach(({ name, url, description, waitFor, requiresAuth })=>{
                (0, _test.test)(`${name} page should match visual baseline`, async ({ page })=>{
                    // Authenticate if required
                    if (requiresAuth) {
                        await VisualTestUtils.authenticateUser(page);
                    }
                    // Navigate to page
                    await page.goto(url);
                    // Wait for page to load completely
                    await VisualTestUtils.waitForPageLoad(page, waitFor);
                    // Hide volatile elements
                    await VisualTestUtils.hideVolatileElements(page);
                    // Take screenshot and compare
                    await (0, _test.expect)(page).toHaveScreenshot(`${name}-${viewportName}.png`, VisualTestUtils.getScreenshotOptions(viewportName));
                });
            });
        });
    });
    _test.test.describe("Component Visual Tests", ()=>{
        _test.test.beforeEach(async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
        });
        (0, _test.test)("navigation menu states", async ({ page })=>{
            await page.goto("/dashboard");
            await VisualTestUtils.waitForPageLoad(page);
            await VisualTestUtils.hideVolatileElements(page);
            // Test collapsed navigation
            await (0, _test.expect)(page.locator('[data-testid="navigation"]')).toHaveScreenshot("navigation-collapsed.png");
            // Test expanded navigation (if applicable)
            const expandButton = page.locator('[data-testid="nav-expand"]');
            if (await expandButton.isVisible()) {
                await expandButton.click();
                await page.waitForTimeout(300); // Wait for animation
                await (0, _test.expect)(page.locator('[data-testid="navigation"]')).toHaveScreenshot("navigation-expanded.png");
            }
        });
        (0, _test.test)("modal dialogs", async ({ page })=>{
            await page.goto("/products");
            await VisualTestUtils.waitForPageLoad(page);
            // Open add product modal
            const addButton = page.locator('[data-testid="add-product-button"]');
            if (await addButton.isVisible()) {
                await addButton.click();
                await page.waitForSelector('[data-testid="product-modal"]');
                await (0, _test.expect)(page.locator('[data-testid="product-modal"]')).toHaveScreenshot("add-product-modal.png");
            }
        });
        (0, _test.test)("form validation states", async ({ page })=>{
            await page.goto("/login");
            await VisualTestUtils.waitForPageLoad(page);
            // Test empty form validation
            await page.click('[data-testid="login-button"]');
            await page.waitForTimeout(500); // Wait for validation messages
            await (0, _test.expect)(page.locator('form[data-testid="login-form"]')).toHaveScreenshot("login-form-validation-errors.png");
            // Test partially filled form
            await page.fill('[data-testid="email-input"]', "invalid-email");
            await page.click('[data-testid="login-button"]');
            await page.waitForTimeout(500);
            await (0, _test.expect)(page.locator('form[data-testid="login-form"]')).toHaveScreenshot("login-form-partial-validation.png");
        });
        (0, _test.test)("data table states", async ({ page })=>{
            await page.goto("/products");
            await VisualTestUtils.waitForPageLoad(page, '[data-testid="products-grid"]');
            await VisualTestUtils.hideVolatileElements(page);
            // Test default table state
            await (0, _test.expect)(page.locator('[data-testid="products-grid"]')).toHaveScreenshot("products-table-default.png");
            // Test sorted table (if sortable)
            const sortButton = page.locator('[data-testid="sort-name"]');
            if (await sortButton.isVisible()) {
                await sortButton.click();
                await page.waitForTimeout(500);
                await (0, _test.expect)(page.locator('[data-testid="products-grid"]')).toHaveScreenshot("products-table-sorted.png");
            }
            // Test filtered table (if filterable)
            const filterInput = page.locator('[data-testid="search-input"]');
            if (await filterInput.isVisible()) {
                await filterInput.fill("Nike");
                await page.waitForTimeout(500);
                await (0, _test.expect)(page.locator('[data-testid="products-grid"]')).toHaveScreenshot("products-table-filtered.png");
            }
        });
        (0, _test.test)("loading states", async ({ page })=>{
            // Intercept API calls to simulate loading
            await page.route("**/api/products**", async (route)=>{
                // Delay response to capture loading state
                await new Promise((resolve)=>setTimeout(resolve, 2000));
                await route.continue();
            });
            await page.goto("/products");
            // Capture loading state
            await (0, _test.expect)(page.locator('[data-testid="products-container"]')).toHaveScreenshot("products-loading-state.png", {
                timeout: 1000
            });
        });
        (0, _test.test)("empty states", async ({ page })=>{
            // Mock empty responses
            await page.route("**/api/products**", async (route)=>{
                await route.fulfill({
                    status: 200,
                    contentType: "application/json",
                    body: JSON.stringify({
                        products: [],
                        total: 0,
                        page: 1,
                        limit: 20
                    })
                });
            });
            await page.goto("/products");
            await VisualTestUtils.waitForPageLoad(page);
            await (0, _test.expect)(page.locator('[data-testid="products-container"]')).toHaveScreenshot("products-empty-state.png");
        });
        (0, _test.test)("error states", async ({ page })=>{
            // Mock error responses
            await page.route("**/api/products**", async (route)=>{
                await route.fulfill({
                    status: 500,
                    contentType: "application/json",
                    body: JSON.stringify({
                        error: "Internal server error"
                    })
                });
            });
            await page.goto("/products");
            await page.waitForTimeout(2000); // Wait for error to appear
            await (0, _test.expect)(page.locator('[data-testid="products-container"]')).toHaveScreenshot("products-error-state.png");
        });
    });
    _test.test.describe("Theme and Dark Mode", ()=>{
        (0, _test.test)("light theme consistency", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
            // Ensure light theme is active
            await page.evaluate(()=>{
                document.documentElement.classList.remove("dark");
                localStorage.setItem("theme", "light");
            });
            await page.goto("/dashboard");
            await VisualTestUtils.waitForPageLoad(page);
            await VisualTestUtils.hideVolatileElements(page);
            await (0, _test.expect)(page).toHaveScreenshot("dashboard-light-theme.png");
        });
        (0, _test.test)("dark theme consistency", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
            // Enable dark theme
            await page.evaluate(()=>{
                document.documentElement.classList.add("dark");
                localStorage.setItem("theme", "dark");
            });
            await page.goto("/dashboard");
            await VisualTestUtils.waitForPageLoad(page);
            await VisualTestUtils.hideVolatileElements(page);
            await (0, _test.expect)(page).toHaveScreenshot("dashboard-dark-theme.png");
        });
    });
    _test.test.describe("Print Styles", ()=>{
        (0, _test.test)("print layout for reports", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
            await page.goto("/reports");
            await VisualTestUtils.waitForPageLoad(page);
            // Emulate print media
            await page.emulateMedia({
                media: "print"
            });
            await (0, _test.expect)(page).toHaveScreenshot("reports-print-layout.png", {
                fullPage: true
            });
        });
        (0, _test.test)("print layout for invoices", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
            // Mock invoice data
            await page.route("**/api/invoices/1", async (route)=>{
                await route.fulfill({
                    status: 200,
                    contentType: "application/json",
                    body: JSON.stringify({
                        id: 1,
                        number: "INV-001",
                        date: "2024-01-15",
                        customer: "John Doe",
                        items: [
                            {
                                name: "Nike Air Max",
                                quantity: 1,
                                price: 150.00
                            }
                        ],
                        total: 150.00
                    })
                });
            });
            await page.goto("/invoices/1");
            await VisualTestUtils.waitForPageLoad(page);
            // Emulate print media
            await page.emulateMedia({
                media: "print"
            });
            await (0, _test.expect)(page).toHaveScreenshot("invoice-print-layout.png", {
                fullPage: true
            });
        });
    });
    _test.test.describe("Accessibility Visual Tests", ()=>{
        (0, _test.test)("high contrast mode", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await VisualTestUtils.authenticateUser(page);
            // Enable high contrast mode
            await page.addStyleTag({
                content: `
          @media (prefers-contrast: high) {
            * {
              filter: contrast(150%) !important;
            }
          }
        `
            });
            await page.goto("/dashboard");
            await VisualTestUtils.waitForPageLoad(page);
            await VisualTestUtils.hideVolatileElements(page);
            await (0, _test.expect)(page).toHaveScreenshot("dashboard-high-contrast.png");
        });
        (0, _test.test)("focus indicators visibility", async ({ page })=>{
            await page.setViewportSize(VIEWPORTS.desktop);
            await page.goto("/login");
            await VisualTestUtils.waitForPageLoad(page);
            // Focus on email input
            await page.focus('[data-testid="email-input"]');
            await (0, _test.expect)(page.locator('form[data-testid="login-form"]')).toHaveScreenshot("login-form-focus-email.png");
            // Focus on password input
            await page.focus('[data-testid="password-input"]');
            await (0, _test.expect)(page.locator('form[data-testid="login-form"]')).toHaveScreenshot("login-form-focus-password.png");
            // Focus on submit button
            await page.focus('[data-testid="login-button"]');
            await (0, _test.expect)(page.locator('form[data-testid="login-form"]')).toHaveScreenshot("login-form-focus-button.png");
        });
    });
});
// Performance visual tests
_test.test.describe("Performance Visual Tests", ()=>{
    (0, _test.test)("layout stability during loading", async ({ page })=>{
        await page.setViewportSize(VIEWPORTS.desktop);
        // Slow down network to observe loading behavior
        await page.route("**/*", async (route)=>{
            await new Promise((resolve)=>setTimeout(resolve, 100));
            await route.continue();
        });
        await page.goto("/dashboard");
        // Take screenshots at different loading stages
        await page.waitForTimeout(500);
        await (0, _test.expect)(page).toHaveScreenshot("dashboard-loading-stage-1.png");
        await page.waitForTimeout(1000);
        await (0, _test.expect)(page).toHaveScreenshot("dashboard-loading-stage-2.png");
        await VisualTestUtils.waitForPageLoad(page);
        await (0, _test.expect)(page).toHaveScreenshot("dashboard-loading-complete.png");
    });
    (0, _test.test)("responsive image loading", async ({ page })=>{
        await page.setViewportSize(VIEWPORTS.mobile);
        await VisualTestUtils.authenticateUser(page);
        await page.goto("/products");
        await VisualTestUtils.waitForPageLoad(page);
        // Check that images are properly sized for mobile
        await (0, _test.expect)(page.locator('[data-testid="products-grid"]')).toHaveScreenshot("products-mobile-images.png");
        // Switch to desktop and verify images scale appropriately
        await page.setViewportSize(VIEWPORTS.desktop);
        await page.waitForTimeout(500); // Wait for responsive changes
        await (0, _test.expect)(page.locator('[data-testid="products-grid"]')).toHaveScreenshot("products-desktop-images.png");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvdmlzdWFsL3Zpc3VhbC1yZWdyZXNzaW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdCwgZXhwZWN0LCBQYWdlIH0gZnJvbSAnQHBsYXl3cmlnaHQvdGVzdCc7XG5pbXBvcnQgeyBpbmplY3RBeGUsIGNoZWNrQTExeSB9IGZyb20gJ2F4ZS1wbGF5d3JpZ2h0JztcblxuLy8gVmlzdWFsIHJlZ3Jlc3Npb24gdGVzdCBjb25maWd1cmF0aW9uXG5jb25zdCBWSUVXUE9SVFMgPSB7XG4gIG1vYmlsZTogeyB3aWR0aDogMzc1LCBoZWlnaHQ6IDY2NyB9LFxuICB0YWJsZXQ6IHsgd2lkdGg6IDc2OCwgaGVpZ2h0OiAxMDI0IH0sXG4gIGRlc2t0b3A6IHsgd2lkdGg6IDE5MjAsIGhlaWdodDogMTA4MCB9LFxuICB1bHRyYXdpZGU6IHsgd2lkdGg6IDI1NjAsIGhlaWdodDogMTQ0MCB9LFxufTtcblxuY29uc3QgUEFHRVNfVE9fVEVTVCA9IFtcbiAge1xuICAgIG5hbWU6ICdsb2dpbicsXG4gICAgdXJsOiAnL2xvZ2luJyxcbiAgICBkZXNjcmlwdGlvbjogJ0xvZ2luIHBhZ2Ugd2l0aCBmb3JtIGFuZCBicmFuZGluZycsXG4gICAgd2FpdEZvcjogJ2Zvcm1bZGF0YS10ZXN0aWQ9XCJsb2dpbi1mb3JtXCJdJyxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdkYXNoYm9hcmQnLFxuICAgIHVybDogJy9kYXNoYm9hcmQnLFxuICAgIGRlc2NyaXB0aW9uOiAnTWFpbiBkYXNoYm9hcmQgd2l0aCBzdGF0cyBhbmQgY2hhcnRzJyxcbiAgICB3YWl0Rm9yOiAnW2RhdGEtdGVzdGlkPVwiZGFzaGJvYXJkLXN0YXRzXCJdJyxcbiAgICByZXF1aXJlc0F1dGg6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAncHJvZHVjdHMtbGlzdCcsXG4gICAgdXJsOiAnL3Byb2R1Y3RzJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Byb2R1Y3RzIGxpc3RpbmcgcGFnZSB3aXRoIGZpbHRlcnMnLFxuICAgIHdhaXRGb3I6ICdbZGF0YS10ZXN0aWQ9XCJwcm9kdWN0cy1ncmlkXCJdJyxcbiAgICByZXF1aXJlc0F1dGg6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAncHJvZHVjdC1kZXRhaWwnLFxuICAgIHVybDogJy9wcm9kdWN0cy8xJyxcbiAgICBkZXNjcmlwdGlvbjogJ0luZGl2aWR1YWwgcHJvZHVjdCBkZXRhaWwgcGFnZScsXG4gICAgd2FpdEZvcjogJ1tkYXRhLXRlc3RpZD1cInByb2R1Y3QtZGV0YWlsc1wiXScsXG4gICAgcmVxdWlyZXNBdXRoOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ2ludmVudG9yeScsXG4gICAgdXJsOiAnL2ludmVudG9yeScsXG4gICAgZGVzY3JpcHRpb246ICdJbnZlbnRvcnkgbWFuYWdlbWVudCBpbnRlcmZhY2UnLFxuICAgIHdhaXRGb3I6ICdbZGF0YS10ZXN0aWQ9XCJpbnZlbnRvcnktdGFibGVcIl0nLFxuICAgIHJlcXVpcmVzQXV0aDogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzYWxlcycsXG4gICAgdXJsOiAnL3NhbGVzJyxcbiAgICBkZXNjcmlwdGlvbjogJ1NhbGVzIGRhc2hib2FyZCBhbmQgdHJhbnNhY3Rpb25zJyxcbiAgICB3YWl0Rm9yOiAnW2RhdGEtdGVzdGlkPVwic2FsZXMtZGFzaGJvYXJkXCJdJyxcbiAgICByZXF1aXJlc0F1dGg6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAncmVwb3J0cycsXG4gICAgdXJsOiAnL3JlcG9ydHMnLFxuICAgIGRlc2NyaXB0aW9uOiAnUmVwb3J0cyBhbmQgYW5hbHl0aWNzIHBhZ2UnLFxuICAgIHdhaXRGb3I6ICdbZGF0YS10ZXN0aWQ9XCJyZXBvcnRzLWNvbnRhaW5lclwiXScsXG4gICAgcmVxdWlyZXNBdXRoOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ3NldHRpbmdzJyxcbiAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgIGRlc2NyaXB0aW9uOiAnQXBwbGljYXRpb24gc2V0dGluZ3MgcGFnZScsXG4gICAgd2FpdEZvcjogJ1tkYXRhLXRlc3RpZD1cInNldHRpbmdzLWZvcm1cIl0nLFxuICAgIHJlcXVpcmVzQXV0aDogdHJ1ZSxcbiAgfSxcbl07XG5cbi8vIFRlc3QgdXRpbGl0aWVzXG5jbGFzcyBWaXN1YWxUZXN0VXRpbHMge1xuICBzdGF0aWMgYXN5bmMgYXV0aGVudGljYXRlVXNlcihwYWdlOiBQYWdlKSB7XG4gICAgLy8gTmF2aWdhdGUgdG8gbG9naW4gcGFnZVxuICAgIGF3YWl0IHBhZ2UuZ290bygnL2xvZ2luJyk7XG4gICAgXG4gICAgLy8gRmlsbCBsb2dpbiBmb3JtXG4gICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICdhZG1pbkB0ZXN0LmNvbScpO1xuICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKTtcbiAgICBcbiAgICAvLyBTdWJtaXQgZm9ybVxuICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpO1xuICAgIFxuICAgIC8vIFdhaXQgZm9yIHJlZGlyZWN0IHRvIGRhc2hib2FyZFxuICAgIGF3YWl0IHBhZ2Uud2FpdEZvclVSTCgnL2Rhc2hib2FyZCcpO1xuICAgIFxuICAgIC8vIFZlcmlmeSBhdXRoZW50aWNhdGlvblxuICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInVzZXItbWVudVwiXScpKS50b0JlVmlzaWJsZSgpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHdhaXRGb3JQYWdlTG9hZChwYWdlOiBQYWdlLCB3YWl0Rm9yPzogc3RyaW5nKSB7XG4gICAgLy8gV2FpdCBmb3IgbmV0d29yayB0byBiZSBpZGxlXG4gICAgYXdhaXQgcGFnZS53YWl0Rm9yTG9hZFN0YXRlKCduZXR3b3JraWRsZScpO1xuICAgIFxuICAgIC8vIFdhaXQgZm9yIHNwZWNpZmljIGVsZW1lbnQgaWYgcHJvdmlkZWRcbiAgICBpZiAod2FpdEZvcikge1xuICAgICAgYXdhaXQgcGFnZS53YWl0Rm9yU2VsZWN0b3Iod2FpdEZvciwgeyB0aW1lb3V0OiAxMDAwMCB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gV2FpdCBmb3IgYW55IGxvYWRpbmcgc3Bpbm5lcnMgdG8gZGlzYXBwZWFyXG4gICAgYXdhaXQgcGFnZS53YWl0Rm9yRnVuY3Rpb24oKCkgPT4ge1xuICAgICAgY29uc3Qgc3Bpbm5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10ZXN0aWQqPVwibG9hZGluZ1wiXSwgLmxvYWRpbmcsIC5zcGlubmVyJyk7XG4gICAgICByZXR1cm4gc3Bpbm5lcnMubGVuZ3RoID09PSAwO1xuICAgIH0sIHsgdGltZW91dDogNTAwMCB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAvLyBJZ25vcmUgdGltZW91dCAtIHNvbWUgcGFnZXMgbWlnaHQgbm90IGhhdmUgbG9hZGluZyBpbmRpY2F0b3JzXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQWRkaXRpb25hbCB3YWl0IGZvciBhbmltYXRpb25zIHRvIGNvbXBsZXRlXG4gICAgYXdhaXQgcGFnZS53YWl0Rm9yVGltZW91dCg1MDApO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGhpZGVWb2xhdGlsZUVsZW1lbnRzKHBhZ2U6IFBhZ2UpIHtcbiAgICAvLyBIaWRlIGVsZW1lbnRzIHRoYXQgY2hhbmdlIGZyZXF1ZW50bHkgYW5kIHdvdWxkIGNhdXNlIGZhbHNlIHBvc2l0aXZlc1xuICAgIGF3YWl0IHBhZ2UuYWRkU3R5bGVUYWcoe1xuICAgICAgY29udGVudDogYFxuICAgICAgICBbZGF0YS10ZXN0aWQqPVwidGltZXN0YW1wXCJdLFxuICAgICAgICBbZGF0YS10ZXN0aWQqPVwidGltZVwiXSxcbiAgICAgICAgLnRpbWVzdGFtcCxcbiAgICAgICAgLmN1cnJlbnQtdGltZSxcbiAgICAgICAgLmxhc3QtdXBkYXRlZCxcbiAgICAgICAgLnJlYWwtdGltZS1kYXRhLFxuICAgICAgICAuY2hhcnQtdG9vbHRpcCxcbiAgICAgICAgLmxvYWRpbmctYW5pbWF0aW9uLFxuICAgICAgICAucHVsc2UsXG4gICAgICAgIC5ibGluayB7XG4gICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qIEhpZGUgc2Nyb2xsYmFycyBmb3IgY29uc2lzdGVudCBzY3JlZW5zaG90cyAqL1xuICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKiBEaXNhYmxlIGFuaW1hdGlvbnMgZm9yIGNvbnNpc3RlbnQgc2NyZWVuc2hvdHMgKi9cbiAgICAgICAgKiwgKjo6YmVmb3JlLCAqOjphZnRlciB7XG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwcyAhaW1wb3J0YW50O1xuICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMHMgIWltcG9ydGFudDtcbiAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwcyAhaW1wb3J0YW50O1xuICAgICAgICAgIHRyYW5zaXRpb24tZGVsYXk6IDBzICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIGBcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBtb2NrRHluYW1pY0RhdGEocGFnZTogUGFnZSkge1xuICAgIC8vIE1vY2sgQVBJIHJlc3BvbnNlcyB0byBlbnN1cmUgY29uc2lzdGVudCBkYXRhXG4gICAgYXdhaXQgcGFnZS5yb3V0ZSgnKiovYXBpL2Rhc2hib2FyZC9zdGF0cycsIGFzeW5jIHJvdXRlID0+IHtcbiAgICAgIGF3YWl0IHJvdXRlLmZ1bGZpbGwoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHRvdGFsU2FsZXM6IDEyNTAwMCxcbiAgICAgICAgICB0b3RhbFByb2R1Y3RzOiAxMjUwLFxuICAgICAgICAgIGxvd1N0b2NrSXRlbXM6IDE1LFxuICAgICAgICAgIHBlbmRpbmdPcmRlcnM6IDgsXG4gICAgICAgICAgc2FsZXNHcm93dGg6IDEyLjUsXG4gICAgICAgICAgaW52ZW50b3J5VmFsdWU6IDQ1MDAwMCxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHBhZ2Uucm91dGUoJyoqL2FwaS9wcm9kdWN0cyoqJywgYXN5bmMgcm91dGUgPT4ge1xuICAgICAgYXdhaXQgcm91dGUuZnVsZmlsbCh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgcHJvZHVjdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICAgIG5hbWU6ICdOaWtlIEFpciBNYXggMjcwJyxcbiAgICAgICAgICAgICAgcHJpY2U6IDE1MC4wMCxcbiAgICAgICAgICAgICAgc3RvY2s6IDI1LFxuICAgICAgICAgICAgICBjYXRlZ29yeTogJ0Zvb3R3ZWFyJyxcbiAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL3NhbXBsZS1wcm9kdWN0LmpwZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgICAgbmFtZTogJ0FkaWRhcyBVbHRyYWJvb3N0IDIyJyxcbiAgICAgICAgICAgICAgcHJpY2U6IDE4MC4wMCxcbiAgICAgICAgICAgICAgc3RvY2s6IDE4LFxuICAgICAgICAgICAgICBjYXRlZ29yeTogJ0Zvb3R3ZWFyJyxcbiAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL3NhbXBsZS1wcm9kdWN0LTIuanBnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICB0b3RhbDogMixcbiAgICAgICAgICBwYWdlOiAxLFxuICAgICAgICAgIGxpbWl0OiAyMCxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHBhZ2Uucm91dGUoJyoqL2FwaS9zYWxlcyoqJywgYXN5bmMgcm91dGUgPT4ge1xuICAgICAgYXdhaXQgcm91dGUuZnVsZmlsbCh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgc2FsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICAgIGRhdGU6ICcyMDI0LTAxLTE1JyxcbiAgICAgICAgICAgICAgYW1vdW50OiAyOTkuOTksXG4gICAgICAgICAgICAgIGN1c3RvbWVyOiAnSm9obiBEb2UnLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHRvdGFsOiAxLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldFNjcmVlbnNob3RPcHRpb25zKHZpZXdwb3J0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZnVsbFBhZ2U6IHRydWUsXG4gICAgICBhbmltYXRpb25zOiAnZGlzYWJsZWQnIGFzIGNvbnN0LFxuICAgICAgY2xpcDogdmlld3BvcnQgPT09ICdtb2JpbGUnID8geyB4OiAwLCB5OiAwLCB3aWR0aDogMzc1LCBoZWlnaHQ6IDY2NyB9IDogdW5kZWZpbmVkLFxuICAgICAgdGhyZXNob2xkOiAwLjIsIC8vIEFsbG93IDIwJSBwaXhlbCBkaWZmZXJlbmNlXG4gICAgICBtYXhEaWZmUGl4ZWxzOiAxMDAwLCAvLyBBbGxvdyB1cCB0byAxMDAwIGRpZmZlcmVudCBwaXhlbHNcbiAgICB9O1xuICB9XG59XG5cbi8vIE1haW4gdmlzdWFsIHJlZ3Jlc3Npb24gdGVzdHNcbnRlc3QuZGVzY3JpYmUoJ1Zpc3VhbCBSZWdyZXNzaW9uIFRlc3RzJywgKCkgPT4ge1xuICB0ZXN0LmJlZm9yZUVhY2goYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgLy8gU2V0IHVwIGNvbnNpc3RlbnQgdGVzdCBlbnZpcm9ubWVudFxuICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5tb2NrRHluYW1pY0RhdGEocGFnZSk7XG4gICAgXG4gICAgLy8gU2V0IGNvbnNpc3RlbnQgdGltZXpvbmVcbiAgICBhd2FpdCBwYWdlLmFkZEluaXRTY3JpcHQoKCkgPT4ge1xuICAgICAgLy8gTW9jayBEYXRlIHRvIHJldHVybiBjb25zaXN0ZW50IHRpbWVzdGFtcHNcbiAgICAgIGNvbnN0IG1vY2tEYXRlID0gbmV3IERhdGUoJzIwMjQtMDEtMTVUMTA6MDA6MDBaJyk7XG4gICAgICBnbG9iYWwuRGF0ZSA9IGNsYXNzIGV4dGVuZHMgRGF0ZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzdXBlcihtb2NrRGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgbm93KCkge1xuICAgICAgICAgIHJldHVybiBtb2NrRGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0gYXMgYW55O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBUZXN0IGVhY2ggcGFnZSBhY3Jvc3MgZGlmZmVyZW50IHZpZXdwb3J0c1xuICBPYmplY3QuZW50cmllcyhWSUVXUE9SVFMpLmZvckVhY2goKFt2aWV3cG9ydE5hbWUsIHZpZXdwb3J0XSkgPT4ge1xuICAgIHRlc3QuZGVzY3JpYmUoYCR7dmlld3BvcnROYW1lfSB2aWV3cG9ydCAoJHt2aWV3cG9ydC53aWR0aH14JHt2aWV3cG9ydC5oZWlnaHR9KWAsICgpID0+IHtcbiAgICAgIHRlc3QuYmVmb3JlRWFjaChhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydFNpemUodmlld3BvcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIFBBR0VTX1RPX1RFU1QuZm9yRWFjaCgoeyBuYW1lLCB1cmwsIGRlc2NyaXB0aW9uLCB3YWl0Rm9yLCByZXF1aXJlc0F1dGggfSkgPT4ge1xuICAgICAgICB0ZXN0KGAke25hbWV9IHBhZ2Ugc2hvdWxkIG1hdGNoIHZpc3VhbCBiYXNlbGluZWAsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgICAgIC8vIEF1dGhlbnRpY2F0ZSBpZiByZXF1aXJlZFxuICAgICAgICAgIGlmIChyZXF1aXJlc0F1dGgpIHtcbiAgICAgICAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5hdXRoZW50aWNhdGVVc2VyKHBhZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE5hdmlnYXRlIHRvIHBhZ2VcbiAgICAgICAgICBhd2FpdCBwYWdlLmdvdG8odXJsKTtcblxuICAgICAgICAgIC8vIFdhaXQgZm9yIHBhZ2UgdG8gbG9hZCBjb21wbGV0ZWx5XG4gICAgICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlLCB3YWl0Rm9yKTtcblxuICAgICAgICAgIC8vIEhpZGUgdm9sYXRpbGUgZWxlbWVudHNcbiAgICAgICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuaGlkZVZvbGF0aWxlRWxlbWVudHMocGFnZSk7XG5cbiAgICAgICAgICAvLyBUYWtlIHNjcmVlbnNob3QgYW5kIGNvbXBhcmVcbiAgICAgICAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlU2NyZWVuc2hvdChcbiAgICAgICAgICAgIGAke25hbWV9LSR7dmlld3BvcnROYW1lfS5wbmdgLFxuICAgICAgICAgICAgVmlzdWFsVGVzdFV0aWxzLmdldFNjcmVlbnNob3RPcHRpb25zKHZpZXdwb3J0TmFtZSlcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0LmRlc2NyaWJlKCdDb21wb25lbnQgVmlzdWFsIFRlc3RzJywgKCkgPT4ge1xuICAgIHRlc3QuYmVmb3JlRWFjaChhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnRTaXplKFZJRVdQT1JUUy5kZXNrdG9wKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5hdXRoZW50aWNhdGVVc2VyKHBhZ2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnbmF2aWdhdGlvbiBtZW51IHN0YXRlcycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvZGFzaGJvYXJkJyk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMud2FpdEZvclBhZ2VMb2FkKHBhZ2UpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLmhpZGVWb2xhdGlsZUVsZW1lbnRzKHBhZ2UpO1xuXG4gICAgICAvLyBUZXN0IGNvbGxhcHNlZCBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJuYXZpZ2F0aW9uXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICduYXZpZ2F0aW9uLWNvbGxhcHNlZC5wbmcnXG4gICAgICApO1xuXG4gICAgICAvLyBUZXN0IGV4cGFuZGVkIG5hdmlnYXRpb24gKGlmIGFwcGxpY2FibGUpXG4gICAgICBjb25zdCBleHBhbmRCdXR0b24gPSBwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIm5hdi1leHBhbmRcIl0nKTtcbiAgICAgIGlmIChhd2FpdCBleHBhbmRCdXR0b24uaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgYXdhaXQgZXhwYW5kQnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclRpbWVvdXQoMzAwKTsgLy8gV2FpdCBmb3IgYW5pbWF0aW9uXG4gICAgICAgIFxuICAgICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJuYXZpZ2F0aW9uXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICAgJ25hdmlnYXRpb24tZXhwYW5kZWQucG5nJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdCgnbW9kYWwgZGlhbG9ncycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvcHJvZHVjdHMnKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgICBcbiAgICAgIC8vIE9wZW4gYWRkIHByb2R1Y3QgbW9kYWxcbiAgICAgIGNvbnN0IGFkZEJ1dHRvbiA9IHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiYWRkLXByb2R1Y3QtYnV0dG9uXCJdJyk7XG4gICAgICBpZiAoYXdhaXQgYWRkQnV0dG9uLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIGF3YWl0IGFkZEJ1dHRvbi5jbGljaygpO1xuICAgICAgICBhd2FpdCBwYWdlLndhaXRGb3JTZWxlY3RvcignW2RhdGEtdGVzdGlkPVwicHJvZHVjdC1tb2RhbFwiXScpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicHJvZHVjdC1tb2RhbFwiXScpKS50b0hhdmVTY3JlZW5zaG90KFxuICAgICAgICAgICdhZGQtcHJvZHVjdC1tb2RhbC5wbmcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdmb3JtIHZhbGlkYXRpb24gc3RhdGVzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9sb2dpbicpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCBlbXB0eSBmb3JtIHZhbGlkYXRpb25cbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpO1xuICAgICAgYXdhaXQgcGFnZS53YWl0Rm9yVGltZW91dCg1MDApOyAvLyBXYWl0IGZvciB2YWxpZGF0aW9uIG1lc3NhZ2VzXG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ2Zvcm1bZGF0YS10ZXN0aWQ9XCJsb2dpbi1mb3JtXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICdsb2dpbi1mb3JtLXZhbGlkYXRpb24tZXJyb3JzLnBuZydcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIFRlc3QgcGFydGlhbGx5IGZpbGxlZCBmb3JtXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJywgJ2ludmFsaWQtZW1haWwnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpO1xuICAgICAgYXdhaXQgcGFnZS53YWl0Rm9yVGltZW91dCg1MDApO1xuICAgICAgXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdmb3JtW2RhdGEtdGVzdGlkPVwibG9naW4tZm9ybVwiXScpKS50b0hhdmVTY3JlZW5zaG90KFxuICAgICAgICAnbG9naW4tZm9ybS1wYXJ0aWFsLXZhbGlkYXRpb24ucG5nJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RhdGEgdGFibGUgc3RhdGVzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9wcm9kdWN0cycpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlLCAnW2RhdGEtdGVzdGlkPVwicHJvZHVjdHMtZ3JpZFwiXScpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLmhpZGVWb2xhdGlsZUVsZW1lbnRzKHBhZ2UpO1xuICAgICAgXG4gICAgICAvLyBUZXN0IGRlZmF1bHQgdGFibGUgc3RhdGVcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInByb2R1Y3RzLWdyaWRcIl0nKSkudG9IYXZlU2NyZWVuc2hvdChcbiAgICAgICAgJ3Byb2R1Y3RzLXRhYmxlLWRlZmF1bHQucG5nJ1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCBzb3J0ZWQgdGFibGUgKGlmIHNvcnRhYmxlKVxuICAgICAgY29uc3Qgc29ydEJ1dHRvbiA9IHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic29ydC1uYW1lXCJdJyk7XG4gICAgICBpZiAoYXdhaXQgc29ydEJ1dHRvbi5pc1Zpc2libGUoKSkge1xuICAgICAgICBhd2FpdCBzb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclRpbWVvdXQoNTAwKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInByb2R1Y3RzLWdyaWRcIl0nKSkudG9IYXZlU2NyZWVuc2hvdChcbiAgICAgICAgICAncHJvZHVjdHMtdGFibGUtc29ydGVkLnBuZydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVGVzdCBmaWx0ZXJlZCB0YWJsZSAoaWYgZmlsdGVyYWJsZSlcbiAgICAgIGNvbnN0IGZpbHRlcklucHV0ID0gcGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJzZWFyY2gtaW5wdXRcIl0nKTtcbiAgICAgIGlmIChhd2FpdCBmaWx0ZXJJbnB1dC5pc1Zpc2libGUoKSkge1xuICAgICAgICBhd2FpdCBmaWx0ZXJJbnB1dC5maWxsKCdOaWtlJyk7XG4gICAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclRpbWVvdXQoNTAwKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInByb2R1Y3RzLWdyaWRcIl0nKSkudG9IYXZlU2NyZWVuc2hvdChcbiAgICAgICAgICAncHJvZHVjdHMtdGFibGUtZmlsdGVyZWQucG5nJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdCgnbG9hZGluZyBzdGF0ZXMnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIC8vIEludGVyY2VwdCBBUEkgY2FsbHMgdG8gc2ltdWxhdGUgbG9hZGluZ1xuICAgICAgYXdhaXQgcGFnZS5yb3V0ZSgnKiovYXBpL3Byb2R1Y3RzKionLCBhc3luYyByb3V0ZSA9PiB7XG4gICAgICAgIC8vIERlbGF5IHJlc3BvbnNlIHRvIGNhcHR1cmUgbG9hZGluZyBzdGF0ZVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpO1xuICAgICAgICBhd2FpdCByb3V0ZS5jb250aW51ZSgpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL3Byb2R1Y3RzJyk7XG4gICAgICBcbiAgICAgIC8vIENhcHR1cmUgbG9hZGluZyBzdGF0ZVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicHJvZHVjdHMtY29udGFpbmVyXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICdwcm9kdWN0cy1sb2FkaW5nLXN0YXRlLnBuZycsXG4gICAgICAgIHsgdGltZW91dDogMTAwMCB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZW1wdHkgc3RhdGVzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyBNb2NrIGVtcHR5IHJlc3BvbnNlc1xuICAgICAgYXdhaXQgcGFnZS5yb3V0ZSgnKiovYXBpL3Byb2R1Y3RzKionLCBhc3luYyByb3V0ZSA9PiB7XG4gICAgICAgIGF3YWl0IHJvdXRlLmZ1bGZpbGwoe1xuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcHJvZHVjdHM6IFtdLFxuICAgICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgICBwYWdlOiAxLFxuICAgICAgICAgICAgbGltaXQ6IDIwLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9wcm9kdWN0cycpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicHJvZHVjdHMtY29udGFpbmVyXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICdwcm9kdWN0cy1lbXB0eS1zdGF0ZS5wbmcnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZXJyb3Igc3RhdGVzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyBNb2NrIGVycm9yIHJlc3BvbnNlc1xuICAgICAgYXdhaXQgcGFnZS5yb3V0ZSgnKiovYXBpL3Byb2R1Y3RzKionLCBhc3luYyByb3V0ZSA9PiB7XG4gICAgICAgIGF3YWl0IHJvdXRlLmZ1bGZpbGwoe1xuICAgICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9wcm9kdWN0cycpO1xuICAgICAgYXdhaXQgcGFnZS53YWl0Rm9yVGltZW91dCgyMDAwKTsgLy8gV2FpdCBmb3IgZXJyb3IgdG8gYXBwZWFyXG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInByb2R1Y3RzLWNvbnRhaW5lclwiXScpKS50b0hhdmVTY3JlZW5zaG90KFxuICAgICAgICAncHJvZHVjdHMtZXJyb3Itc3RhdGUucG5nJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdC5kZXNjcmliZSgnVGhlbWUgYW5kIERhcmsgTW9kZScsICgpID0+IHtcbiAgICB0ZXN0KCdsaWdodCB0aGVtZSBjb25zaXN0ZW5jeScsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydFNpemUoVklFV1BPUlRTLmRlc2t0b3ApO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLmF1dGhlbnRpY2F0ZVVzZXIocGFnZSk7XG4gICAgICBcbiAgICAgIC8vIEVuc3VyZSBsaWdodCB0aGVtZSBpcyBhY3RpdmVcbiAgICAgIGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZGFyaycpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCAnbGlnaHQnKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9kYXNoYm9hcmQnKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuaGlkZVZvbGF0aWxlRWxlbWVudHMocGFnZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVTY3JlZW5zaG90KCdkYXNoYm9hcmQtbGlnaHQtdGhlbWUucG5nJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdkYXJrIHRoZW1lIGNvbnNpc3RlbmN5JywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0U2l6ZShWSUVXUE9SVFMuZGVza3RvcCk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuYXV0aGVudGljYXRlVXNlcihwYWdlKTtcbiAgICAgIFxuICAgICAgLy8gRW5hYmxlIGRhcmsgdGhlbWVcbiAgICAgIGF3YWl0IHBhZ2UuZXZhbHVhdGUoKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGFyaycpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGhlbWUnLCAnZGFyaycpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2Rhc2hib2FyZCcpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5oaWRlVm9sYXRpbGVFbGVtZW50cyhwYWdlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVNjcmVlbnNob3QoJ2Rhc2hib2FyZC1kYXJrLXRoZW1lLnBuZycpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0LmRlc2NyaWJlKCdQcmludCBTdHlsZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgncHJpbnQgbGF5b3V0IGZvciByZXBvcnRzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0U2l6ZShWSUVXUE9SVFMuZGVza3RvcCk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuYXV0aGVudGljYXRlVXNlcihwYWdlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvcmVwb3J0cycpO1xuICAgICAgYXdhaXQgVmlzdWFsVGVzdFV0aWxzLndhaXRGb3JQYWdlTG9hZChwYWdlKTtcbiAgICAgIFxuICAgICAgLy8gRW11bGF0ZSBwcmludCBtZWRpYVxuICAgICAgYXdhaXQgcGFnZS5lbXVsYXRlTWVkaWEoeyBtZWRpYTogJ3ByaW50JyB9KTtcbiAgICAgIFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVNjcmVlbnNob3QoJ3JlcG9ydHMtcHJpbnQtbGF5b3V0LnBuZycsIHtcbiAgICAgICAgZnVsbFBhZ2U6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3ByaW50IGxheW91dCBmb3IgaW52b2ljZXMnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnRTaXplKFZJRVdQT1JUUy5kZXNrdG9wKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5hdXRoZW50aWNhdGVVc2VyKHBhZ2UpO1xuICAgICAgXG4gICAgICAvLyBNb2NrIGludm9pY2UgZGF0YVxuICAgICAgYXdhaXQgcGFnZS5yb3V0ZSgnKiovYXBpL2ludm9pY2VzLzEnLCBhc3luYyByb3V0ZSA9PiB7XG4gICAgICAgIGF3YWl0IHJvdXRlLmZ1bGZpbGwoe1xuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICBudW1iZXI6ICdJTlYtMDAxJyxcbiAgICAgICAgICAgIGRhdGU6ICcyMDI0LTAxLTE1JyxcbiAgICAgICAgICAgIGN1c3RvbWVyOiAnSm9obiBEb2UnLFxuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgeyBuYW1lOiAnTmlrZSBBaXIgTWF4JywgcXVhbnRpdHk6IDEsIHByaWNlOiAxNTAuMDAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0b3RhbDogMTUwLjAwLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9pbnZvaWNlcy8xJyk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMud2FpdEZvclBhZ2VMb2FkKHBhZ2UpO1xuICAgICAgXG4gICAgICAvLyBFbXVsYXRlIHByaW50IG1lZGlhXG4gICAgICBhd2FpdCBwYWdlLmVtdWxhdGVNZWRpYSh7IG1lZGlhOiAncHJpbnQnIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlU2NyZWVuc2hvdCgnaW52b2ljZS1wcmludC1sYXlvdXQucG5nJywge1xuICAgICAgICBmdWxsUGFnZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0LmRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5IFZpc3VhbCBUZXN0cycsICgpID0+IHtcbiAgICB0ZXN0KCdoaWdoIGNvbnRyYXN0IG1vZGUnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnRTaXplKFZJRVdQT1JUUy5kZXNrdG9wKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy5hdXRoZW50aWNhdGVVc2VyKHBhZ2UpO1xuICAgICAgXG4gICAgICAvLyBFbmFibGUgaGlnaCBjb250cmFzdCBtb2RlXG4gICAgICBhd2FpdCBwYWdlLmFkZFN0eWxlVGFnKHtcbiAgICAgICAgY29udGVudDogYFxuICAgICAgICAgIEBtZWRpYSAocHJlZmVycy1jb250cmFzdDogaGlnaCkge1xuICAgICAgICAgICAgKiB7XG4gICAgICAgICAgICAgIGZpbHRlcjogY29udHJhc3QoMTUwJSkgIWltcG9ydGFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9kYXNoYm9hcmQnKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuaGlkZVZvbGF0aWxlRWxlbWVudHMocGFnZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVTY3JlZW5zaG90KCdkYXNoYm9hcmQtaGlnaC1jb250cmFzdC5wbmcnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ZvY3VzIGluZGljYXRvcnMgdmlzaWJpbGl0eScsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydFNpemUoVklFV1BPUlRTLmRlc2t0b3ApO1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvbG9naW4nKTtcbiAgICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgICBcbiAgICAgIC8vIEZvY3VzIG9uIGVtYWlsIGlucHV0XG4gICAgICBhd2FpdCBwYWdlLmZvY3VzKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScpO1xuICAgICAgXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdmb3JtW2RhdGEtdGVzdGlkPVwibG9naW4tZm9ybVwiXScpKS50b0hhdmVTY3JlZW5zaG90KFxuICAgICAgICAnbG9naW4tZm9ybS1mb2N1cy1lbWFpbC5wbmcnXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBGb2N1cyBvbiBwYXNzd29yZCBpbnB1dFxuICAgICAgYXdhaXQgcGFnZS5mb2N1cygnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nKTtcbiAgICAgIFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignZm9ybVtkYXRhLXRlc3RpZD1cImxvZ2luLWZvcm1cIl0nKSkudG9IYXZlU2NyZWVuc2hvdChcbiAgICAgICAgJ2xvZ2luLWZvcm0tZm9jdXMtcGFzc3dvcmQucG5nJ1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gRm9jdXMgb24gc3VibWl0IGJ1dHRvblxuICAgICAgYXdhaXQgcGFnZS5mb2N1cygnW2RhdGEtdGVzdGlkPVwibG9naW4tYnV0dG9uXCJdJyk7XG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ2Zvcm1bZGF0YS10ZXN0aWQ9XCJsb2dpbi1mb3JtXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAgICdsb2dpbi1mb3JtLWZvY3VzLWJ1dHRvbi5wbmcnXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBQZXJmb3JtYW5jZSB2aXN1YWwgdGVzdHNcbnRlc3QuZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIFZpc3VhbCBUZXN0cycsICgpID0+IHtcbiAgdGVzdCgnbGF5b3V0IHN0YWJpbGl0eSBkdXJpbmcgbG9hZGluZycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnRTaXplKFZJRVdQT1JUUy5kZXNrdG9wKTtcbiAgICBcbiAgICAvLyBTbG93IGRvd24gbmV0d29yayB0byBvYnNlcnZlIGxvYWRpbmcgYmVoYXZpb3JcbiAgICBhd2FpdCBwYWdlLnJvdXRlKCcqKi8qJywgYXN5bmMgcm91dGUgPT4ge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xuICAgICAgYXdhaXQgcm91dGUuY29udGludWUoKTtcbiAgICB9KTtcbiAgICBcbiAgICBhd2FpdCBwYWdlLmdvdG8oJy9kYXNoYm9hcmQnKTtcbiAgICBcbiAgICAvLyBUYWtlIHNjcmVlbnNob3RzIGF0IGRpZmZlcmVudCBsb2FkaW5nIHN0YWdlc1xuICAgIGF3YWl0IHBhZ2Uud2FpdEZvclRpbWVvdXQoNTAwKTtcbiAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlU2NyZWVuc2hvdCgnZGFzaGJvYXJkLWxvYWRpbmctc3RhZ2UtMS5wbmcnKTtcbiAgICBcbiAgICBhd2FpdCBwYWdlLndhaXRGb3JUaW1lb3V0KDEwMDApO1xuICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVTY3JlZW5zaG90KCdkYXNoYm9hcmQtbG9hZGluZy1zdGFnZS0yLnBuZycpO1xuICAgIFxuICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVNjcmVlbnNob3QoJ2Rhc2hib2FyZC1sb2FkaW5nLWNvbXBsZXRlLnBuZycpO1xuICB9KTtcblxuICB0ZXN0KCdyZXNwb25zaXZlIGltYWdlIGxvYWRpbmcnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0U2l6ZShWSUVXUE9SVFMubW9iaWxlKTtcbiAgICBhd2FpdCBWaXN1YWxUZXN0VXRpbHMuYXV0aGVudGljYXRlVXNlcihwYWdlKTtcbiAgICBcbiAgICBhd2FpdCBwYWdlLmdvdG8oJy9wcm9kdWN0cycpO1xuICAgIGF3YWl0IFZpc3VhbFRlc3RVdGlscy53YWl0Rm9yUGFnZUxvYWQocGFnZSk7XG4gICAgXG4gICAgLy8gQ2hlY2sgdGhhdCBpbWFnZXMgYXJlIHByb3Blcmx5IHNpemVkIGZvciBtb2JpbGVcbiAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJwcm9kdWN0cy1ncmlkXCJdJykpLnRvSGF2ZVNjcmVlbnNob3QoXG4gICAgICAncHJvZHVjdHMtbW9iaWxlLWltYWdlcy5wbmcnXG4gICAgKTtcbiAgICBcbiAgICAvLyBTd2l0Y2ggdG8gZGVza3RvcCBhbmQgdmVyaWZ5IGltYWdlcyBzY2FsZSBhcHByb3ByaWF0ZWx5XG4gICAgYXdhaXQgcGFnZS5zZXRWaWV3cG9ydFNpemUoVklFV1BPUlRTLmRlc2t0b3ApO1xuICAgIGF3YWl0IHBhZ2Uud2FpdEZvclRpbWVvdXQoNTAwKTsgLy8gV2FpdCBmb3IgcmVzcG9uc2l2ZSBjaGFuZ2VzXG4gICAgXG4gICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicHJvZHVjdHMtZ3JpZFwiXScpKS50b0hhdmVTY3JlZW5zaG90KFxuICAgICAgJ3Byb2R1Y3RzLWRlc2t0b3AtaW1hZ2VzLnBuZydcbiAgICApO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJWSUVXUE9SVFMiLCJtb2JpbGUiLCJ3aWR0aCIsImhlaWdodCIsInRhYmxldCIsImRlc2t0b3AiLCJ1bHRyYXdpZGUiLCJQQUdFU19UT19URVNUIiwibmFtZSIsInVybCIsImRlc2NyaXB0aW9uIiwid2FpdEZvciIsInJlcXVpcmVzQXV0aCIsIlZpc3VhbFRlc3RVdGlscyIsImF1dGhlbnRpY2F0ZVVzZXIiLCJwYWdlIiwiZ290byIsImZpbGwiLCJjbGljayIsIndhaXRGb3JVUkwiLCJleHBlY3QiLCJsb2NhdG9yIiwidG9CZVZpc2libGUiLCJ3YWl0Rm9yUGFnZUxvYWQiLCJ3YWl0Rm9yTG9hZFN0YXRlIiwid2FpdEZvclNlbGVjdG9yIiwidGltZW91dCIsIndhaXRGb3JGdW5jdGlvbiIsInNwaW5uZXJzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY2F0Y2giLCJ3YWl0Rm9yVGltZW91dCIsImhpZGVWb2xhdGlsZUVsZW1lbnRzIiwiYWRkU3R5bGVUYWciLCJjb250ZW50IiwibW9ja0R5bmFtaWNEYXRhIiwicm91dGUiLCJmdWxmaWxsIiwic3RhdHVzIiwiY29udGVudFR5cGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvdGFsU2FsZXMiLCJ0b3RhbFByb2R1Y3RzIiwibG93U3RvY2tJdGVtcyIsInBlbmRpbmdPcmRlcnMiLCJzYWxlc0dyb3d0aCIsImludmVudG9yeVZhbHVlIiwicHJvZHVjdHMiLCJpZCIsInByaWNlIiwic3RvY2siLCJjYXRlZ29yeSIsImltYWdlIiwidG90YWwiLCJsaW1pdCIsInNhbGVzIiwiZGF0ZSIsImFtb3VudCIsImN1c3RvbWVyIiwiZ2V0U2NyZWVuc2hvdE9wdGlvbnMiLCJ2aWV3cG9ydCIsImZ1bGxQYWdlIiwiYW5pbWF0aW9ucyIsImNsaXAiLCJ4IiwieSIsInVuZGVmaW5lZCIsInRocmVzaG9sZCIsIm1heERpZmZQaXhlbHMiLCJ0ZXN0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiYWRkSW5pdFNjcmlwdCIsIm1vY2tEYXRlIiwiRGF0ZSIsImdsb2JhbCIsImNvbnN0cnVjdG9yIiwiYXJncyIsIm5vdyIsImdldFRpbWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInZpZXdwb3J0TmFtZSIsInNldFZpZXdwb3J0U2l6ZSIsInRvSGF2ZVNjcmVlbnNob3QiLCJleHBhbmRCdXR0b24iLCJpc1Zpc2libGUiLCJhZGRCdXR0b24iLCJzb3J0QnV0dG9uIiwiZmlsdGVySW5wdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjb250aW51ZSIsImVycm9yIiwiZXZhbHVhdGUiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiYWRkIiwiZW11bGF0ZU1lZGlhIiwibWVkaWEiLCJudW1iZXIiLCJpdGVtcyIsInF1YW50aXR5IiwiZm9jdXMiXSwibWFwcGluZ3MiOiI7Ozs7c0JBQW1DO0FBR25DLHVDQUF1QztBQUN2QyxNQUFNQSxZQUFZO0lBQ2hCQyxRQUFRO1FBQUVDLE9BQU87UUFBS0MsUUFBUTtJQUFJO0lBQ2xDQyxRQUFRO1FBQUVGLE9BQU87UUFBS0MsUUFBUTtJQUFLO0lBQ25DRSxTQUFTO1FBQUVILE9BQU87UUFBTUMsUUFBUTtJQUFLO0lBQ3JDRyxXQUFXO1FBQUVKLE9BQU87UUFBTUMsUUFBUTtJQUFLO0FBQ3pDO0FBRUEsTUFBTUksZ0JBQWdCO0lBQ3BCO1FBQ0VDLE1BQU07UUFDTkMsS0FBSztRQUNMQyxh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