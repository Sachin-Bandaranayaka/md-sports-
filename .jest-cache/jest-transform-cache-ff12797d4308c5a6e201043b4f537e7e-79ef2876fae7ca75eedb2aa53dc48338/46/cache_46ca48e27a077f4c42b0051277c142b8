000e7c3394ec70ee05b29a6d128d2c1c
/**
 * Redis-based caching service for improved performance
 * Falls back to in-memory cache in development
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CACHE_CONFIG: function() {
        return CACHE_CONFIG;
    },
    cache: function() {
        return cache;
    },
    cacheService: function() {
        return cache;
    }
});
const _ioredis = require("ioredis");
// Cache configuration
const CACHE_CONFIG = {
    // Default TTL in seconds
    DEFAULT_TTL: 300,
    // Cache keys
    KEYS: {
        INVENTORY_SUMMARY: "inventory:summary",
        INVOICES: "invoices:list",
        INVOICE_STATS: "invoices:stats",
        CATEGORIES: "categories:list",
        SHOPS: "shops:list",
        CUSTOMERS: "customers:list",
        PRODUCTS: "products:list",
        // Authentication cache keys
        USER_SESSION: "auth:user:session",
        USER_PERMISSIONS: "auth:user:permissions",
        ROLE_PERMISSIONS: "auth:role:permissions",
        TOKEN_VALIDATION: "auth:token:validation"
    },
    // TTL for different data types
    TTL: {
        INVENTORY: 60,
        INVOICES: 120,
        STATS: 300,
        REFERENCE_DATA: 3600,
        // Authentication TTLs
        USER_SESSION: 900,
        USER_PERMISSIONS: 1800,
        ROLE_PERMISSIONS: 3600,
        TOKEN_VALIDATION: 300
    }
};
// In-memory cache fallback for development
class MemoryCache {
    constructor(){
        this.cache = new Map();
        // Clean up expired entries every 5 minutes
        this.cleanupInterval = setInterval(()=>{
            this.cleanup();
        }, 5 * 60 * 1000);
    }
    async get(key) {
        const entry = this.cache.get(key);
        if (!entry) return null;
        if (Date.now() > entry.expires) {
            this.cache.delete(key);
            return null;
        }
        return entry.data;
    }
    async set(key, value, ttlSeconds = CACHE_CONFIG.DEFAULT_TTL) {
        const expires = Date.now() + ttlSeconds * 1000;
        this.cache.set(key, {
            data: value,
            expires
        });
    }
    async del(key) {
        this.cache.delete(key);
    }
    async invalidatePattern(pattern) {
        const regex = new RegExp(pattern.replace("*", ".*"));
        for (const key of this.cache.keys()){
            if (regex.test(key)) {
                this.cache.delete(key);
            }
        }
    }
    cleanup() {
        const now = Date.now();
        for (const [key, entry] of this.cache.entries()){
            if (now > entry.expires) {
                this.cache.delete(key);
            }
        }
    }
    destroy() {
        clearInterval(this.cleanupInterval);
        this.cache.clear();
    }
}
// Redis cache implementation
class RedisCache {
    constructor(){
        this.isConnected = false;
        const redisUrl = process.env.REDIS_URL || "redis://localhost:6379";
        this.redis = new _ioredis.Redis(redisUrl, {
            retryDelayOnFailover: 100,
            maxRetriesPerRequest: 3,
            lazyConnect: true
        });
        this.redis.on("connect", ()=>{
            console.log("✅ Redis connected");
            this.isConnected = true;
        });
        this.redis.on("error", (error)=>{
            console.error("❌ Redis connection error:", error);
            this.isConnected = false;
        });
    }
    async get(key) {
        if (!this.isConnected) return null;
        try {
            const value = await this.redis.get(key);
            return value ? JSON.parse(value) : null;
        } catch (error) {
            console.error("Redis get error:", error);
            return null;
        }
    }
    async set(key, value, ttlSeconds = CACHE_CONFIG.DEFAULT_TTL) {
        if (!this.isConnected) return;
        try {
            await this.redis.setex(key, ttlSeconds, JSON.stringify(value));
        } catch (error) {
            console.error("Redis set error:", error);
        }
    }
    async del(key) {
        if (!this.isConnected) return;
        try {
            await this.redis.del(key);
        } catch (error) {
            console.error("Redis del error:", error);
        }
    }
    async invalidatePattern(pattern) {
        if (!this.isConnected) return;
        try {
            const keys = await this.redis.keys(pattern);
            if (keys.length > 0) {
                await this.redis.del(...keys);
            }
        } catch (error) {
            console.error("Redis invalidatePattern error:", error);
        }
    }
    disconnect() {
        this.redis.disconnect();
    }
}
// Cache service implementation
class CacheManager {
    constructor(){
        this.useRedis = process.env.NODE_ENV === "production" && !!process.env.REDIS_URL;
        if (this.useRedis) {
            console.log("\uD83D\uDE80 Using Redis cache");
            this.cache = new RedisCache();
        } else {
            console.log("\uD83D\uDCBE Using in-memory cache");
            this.cache = new MemoryCache();
        }
    }
    async get(key) {
        return this.cache.get(key);
    }
    async set(key, value, ttlSeconds) {
        return this.cache.set(key, value, ttlSeconds);
    }
    async del(key) {
        return this.cache.del(key);
    }
    async invalidatePattern(pattern) {
        return this.cache.invalidatePattern(pattern);
    }
    // Helper methods for common cache operations
    async getOrSet(key, fetcher, ttlSeconds) {
        // Try to get from cache first
        const cached = await this.get(key);
        if (cached !== null) {
            return cached;
        }
        // Fetch fresh data
        const data = await fetcher();
        // Store in cache
        await this.set(key, data, ttlSeconds);
        return data;
    }
    // Generate cache key with parameters
    generateKey(prefix, params = {}) {
        const sortedParams = Object.keys(params).sort().map((key)=>`${key}:${params[key]}`).join("|");
        return sortedParams ? `${prefix}:${sortedParams}` : prefix;
    }
    // Invalidate related cache entries
    async invalidateInventory() {
        await Promise.all([
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVENTORY_SUMMARY}*`),
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.PRODUCTS}*`)
        ]);
    }
    async invalidateInvoices() {
        await Promise.all([
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVOICES}*`),
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.INVOICE_STATS}*`)
        ]);
    }
    async invalidateReferenceData() {
        await Promise.all([
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.CATEGORIES}*`),
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.SHOPS}*`),
            this.invalidatePattern(`${CACHE_CONFIG.KEYS.CUSTOMERS}*`)
        ]);
    }
    // Authentication cache invalidation methods
    async invalidateUserSession(userId) {
        const userSessionKey = this.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, {
            userId
        });
        await this.del(userSessionKey);
    }
    async invalidateUserPermissions(userId) {
        const userPermissionsKey = this.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, {
            userId
        });
        await this.del(userPermissionsKey);
    }
    async invalidateRolePermissions(roleId) {
        const rolePermissionsKey = this.generateKey(CACHE_CONFIG.KEYS.ROLE_PERMISSIONS, {
            roleId
        });
        await this.del(rolePermissionsKey);
        // Also invalidate all user permissions for users with this role
        await this.invalidatePattern(`${CACHE_CONFIG.KEYS.USER_PERMISSIONS}*`);
    }
    async invalidateTokenValidation(token) {
        const tokenKey = this.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, {
            token: token.substring(0, 20)
        });
        await this.del(tokenKey);
    }
    async invalidateAllUserAuth(userId) {
        await Promise.all([
            this.invalidateUserSession(userId),
            this.invalidateUserPermissions(userId)
        ]);
    }
}
// Export singleton instance
const cache = new CacheManager();
// Cleanup on process exit
process.on("SIGINT", ()=>{
    if (cache.cache instanceof RedisCache) {
        cache.cache.disconnect();
    } else if (cache.cache instanceof MemoryCache) {
        cache.cache.destroy();
    }
});

//# sourceMappingURL=data:application/json;base64,