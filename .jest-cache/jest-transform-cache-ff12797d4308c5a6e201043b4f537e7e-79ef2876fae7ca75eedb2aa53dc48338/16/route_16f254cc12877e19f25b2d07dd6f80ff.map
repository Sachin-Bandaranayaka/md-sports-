{"version":3,"names":["POST","JWT_SECRET","cov_9galnbarb","s","b","process","env","JWT_ACCESS_TOKEN_EXPIRES_IN","COOKIE_SECURE","NODE_ENV","req","f","cookieRefreshToken","cookies","get","value","tokenFromBody","body","json","refreshToken","e","console","log","tokenToVerify","hasCookieToken","hasTokenFromBody","_server","NextResponse","success","message","status","userId","_refreshTokenService","verifyRefreshToken","error","substring","user","_prisma","default","findFirst","where","id","isActive","include","role","permissions","map","p","name","newAccessToken","_jsonwebtoken","sign","sub","username","email","roleId","shopId","expiresIn","response","accessToken","fullName","roleName","set","httpOnly","secure","sameSite","maxAge","_authService","parseTimeStringToSeconds","path"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport prisma from '@/lib/prisma';\nimport { verifyRefreshToken } from '@/services/refreshTokenService';\nimport { parseTimeStringToSeconds } from '@/services/authService';\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token\n        const user = await prisma.user.findFirst({\n            where: {\n                id: userId,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: true\n                    }\n                }\n            }\n        });\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        const permissions = user.role.permissions.map(p => p.name);\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN });\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role.name,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n} "],"mappingssB;;;;;;WAAAA,IAAA;;;;;iCAXoB;;;uEAC1B;;;uEACG;;;iCACgB;;;iCACM;;;;;;;;;;;;;;;AAEzC;AACA,MAAMC,UAAA;AAAA;AAAA,CAAAC,aAAA,GAAAC,CAAA;AAAa;AAAA,CAAAD,aAAA,GAAAE,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACL,UAAU;AAAA;AAAA,CAAAC,aAAA,GAAAE,CAAA,UAAI;AAC7C,MAAMG,2BAAA;AAAA;AAAA,CAAAL,aAAA,GAAAC,CAAA;AAA8B;AAAA,CAAAD,aAAA,GAAAE,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,2BAA2B;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,UAAI;AAC/E,MAAMI,aAAA;AAAA;AAAA,CAAAN,aAAA,GAAAC,CAAA,QAAgBE,OAAA,CAAQC,GAAG,CAACG,QAAQ,KAAK;AAExC,eAAeT,KAAKU,GAAgB;EAAA;EAAAR,aAAA,GAAAS,CAAA;EAAAT,aAAA,GAAAC,CAAA;EACvC,IAAI;IACA;IACA,MAAMS,kBAAA;IAAA;IAAA,CAAAV,aAAA,GAAAC,CAAA,QAAqBO,GAAA,CAAIG,OAAO,CAACC,GAAG,CAAC,iBAAiBC,KAAA;IAC5D,IAAIC,aAAA;IAAA;IAAA,CAAAd,aAAA,GAAAC,CAAA,QAAgB;IAEpB;IAAA;IAAAD,aAAA,GAAAC,CAAA;IACA,IAAI,CAACS,kBAAA,EAAoB;MAAA;MAAAV,aAAA,GAAAE,CAAA;MAAAF,aAAA,GAAAC,CAAA;MACrB,IAAI;QACA,MAAMc,IAAA;QAAA;QAAA,CAAAf,aAAA,GAAAC,CAAA,QAAO,MAAMO,GAAA,CAAIQ,IAAI;QAAA;QAAAhB,aAAA,GAAAC,CAAA;QAC3Ba,aAAA,GAAgBC,IAAA,EAAME,YAAA;MAC1B,EAAE,OAAOC,CAAA,EAAG;QAAA;QAAAlB,aAAA,GAAAC,CAAA;QACR;QACAkB,OAAA,CAAQC,GAAG,CAAC;MAChB;IACJ;IAAA;IAAA;MAAApB,aAAA,GAAAE,CAAA;IAAA;IAEA,MAAMmB,aAAA;IAAA;IAAA,CAAArB,aAAA,GAAAC,CAAA;IAAgB;IAAA,CAAAD,aAAA,GAAAE,CAAA,UAAAQ,kBAAA;IAAA;IAAA,CAAAV,aAAA,GAAAE,CAAA,UAAsBY,aAAA;IAAA;IAAAd,aAAA,GAAAC,CAAA;IAE5CkB,OAAA,CAAQC,GAAG,CAAC,kCAAkC;MAC1CE,cAAA,EAAgB,CAAC,CAACZ,kBAAA;MAClBa,gBAAA,EAAkB,CAAC,CAACT;IACxB;IAAA;IAAAd,aAAA,GAAAC,CAAA;IAEA,IAAI,CAACoB,aAAA,EAAe;MAAA;MAAArB,aAAA,GAAAE,CAAA;MAAAF,aAAA,GAAAC,CAAA;MAChBkB,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAApB,aAAA,GAAAC,CAAA;MACZ,OAAOuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;QACrBU,OAAA,EAAS;QACTC,OAAA,EAAS;MACb,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA5B,aAAA,GAAAE,CAAA;IAAA;IAEA;IACA,IAAI2B,MAAA;IAAA;IAAA7B,aAAA,GAAAC,CAAA;IACJ,IAAI;MAAA;MAAAD,aAAA,GAAAC,CAAA;MACA4B,MAAA,GAAS,MAAM,IAAAC,oBAAA,CAAAC,kBAAkB,EAACV,aAAA;IACtC,EAAE,OAAOW,KAAA,EAAO;MAAA;MAAAhC,aAAA,GAAAC,CAAA;MACZkB,OAAA,CAAQa,KAAK,CAAC,4CAA4CA,KAAA;MAC1D;MAAA;MAAAhC,aAAA,GAAAC,CAAA;MACA,OAAOuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;QACrBU,OAAA,EAAS;QACTC,OAAA,EAAS,oCAAoC;MACjD,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA5B,aAAA,GAAAC,CAAA;IAEA,IAAI,CAAC4B,MAAA,EAAQ;MAAA;MAAA7B,aAAA,GAAAE,CAAA;MAAAF,aAAA,GAAAC,CAAA;MACTkB,OAAA,CAAQC,GAAG,CAAC,2DAA2DC,aAAA,CAAcY,SAAS,CAAC,GAAG,MAAM;MAAA;MAAAjC,aAAA,GAAAC,CAAA;MACxG,OAAOuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;QACrBU,OAAA,EAAS;QACTC,OAAA,EAAS;MACb,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA5B,aAAA,GAAAE,CAAA;IAAA;IAAAF,aAAA,GAAAC,CAAA;IAEAkB,OAAA,CAAQC,GAAG,CAAC,oCAAoCS,MAAA;IAEhD;IACA,MAAMK,IAAA;IAAA;IAAA,CAAAlC,aAAA,GAAAC,CAAA,QAAO,MAAMkC,OAAA,CAAAC,OAAM,CAACF,IAAI,CAACG,SAAS,CAAC;MACrCC,KAAA,EAAO;QACHC,EAAA,EAAIV,MAAA;QACJW,QAAA,EAAU;MACd;MACAC,OAAA,EAAS;QACLC,IAAA,EAAM;UACFD,OAAA,EAAS;YACLE,WAAA,EAAa;UACjB;QACJ;MACJ;IACJ;IAAA;IAAA3C,aAAA,GAAAC,CAAA;IAEA,IAAI,CAACiC,IAAA,EAAM;MAAA;MAAAlC,aAAA,GAAAE,CAAA;MAAAF,aAAA,GAAAC,CAAA;MACPkB,OAAA,CAAQC,GAAG,CAAC,sCAAsCS,MAAA;MAAA;MAAA7B,aAAA,GAAAC,CAAA;MAClD,OAAOuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;QACrBU,OAAA,EAAS;QACTC,OAAA,EAAS;MACb,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrB;IAAA;IAAA;MAAA5B,aAAA,GAAAE,CAAA;IAAA;IAEA,MAAMyC,WAAA;IAAA;IAAA,CAAA3C,aAAA,GAAAC,CAAA,QAAciC,IAAA,CAAKQ,IAAI,CAACC,WAAW,CAACC,GAAG,CAACC,CAAA,IAAK;MAAA;MAAA7C,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAC,CAAA;MAAA,OAAA4C,CAAA,CAAEC,IAAI;IAAJ,CAAI;IAEzD,MAAMC,cAAA;IAAA;IAAA,CAAA/C,aAAA,GAAAC,CAAA,QAAiB+C,aAAA,CAAAZ,OAAG,CAACa,IAAI,CAAC;MAC5BC,GAAA,EAAKhB,IAAA,CAAKK,EAAE;MACZY,QAAA,EAAUjB,IAAA,CAAKY,IAAI;MACnBM,KAAA,EAAOlB,IAAA,CAAKkB,KAAK;MACjBC,MAAA,EAAQnB,IAAA,CAAKmB,MAAM;MACnBV,WAAA;MACAW,MAAA,EAAQpB,IAAA,CAAKoB;IACjB,GAAGvD,UAAA,EAAY;MAAEwD,SAAA,EAAWlD;IAA4B;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAExDkB,OAAA,CAAQC,GAAG,CAAC,wCAAwCc,IAAA,CAAKK,EAAE;IAE3D,MAAMiB,QAAA;IAAA;IAAA,CAAAxD,aAAA,GAAAC,CAAA,QAAWuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;MAC/BU,OAAA,EAAS;MACT+B,WAAA,EAAaV,cAAA;MACbb,IAAA,EAAM;QACFK,EAAA,EAAIL,IAAA,CAAKK,EAAE;QACXY,QAAA,EAAUjB,IAAA,CAAKY,IAAI;QACnBY,QAAA,EAAUxB,IAAA,CAAKY,IAAI;QACnBM,KAAA,EAAOlB,IAAA,CAAKkB,KAAK;QACjBC,MAAA,EAAQnB,IAAA,CAAKmB,MAAM;QACnBM,QAAA,EAAUzB,IAAA,CAAKQ,IAAI,CAACI,IAAI;QACxBQ,MAAA,EAAQpB,IAAA,CAAKoB,MAAM;QACnBX;MACJ;IACJ;IAEA;IAAA;IAAA3C,aAAA,GAAAC,CAAA;IACAuD,QAAA,CAAS7C,OAAO,CAACiD,GAAG,CAAC;MACjBd,IAAA,EAAM;MACNjC,KAAA,EAAOkC,cAAA;MACPc,QAAA,EAAU;MACVC,MAAA,EAAQxD,aAAA;MACRyD,QAAA,EAAU;MACVC,MAAA,EAAQ,IAAAC,YAAA,CAAAC,wBAAwB,EAAC7D,2BAAA;MACjC8D,IAAA,EAAM;IACV;IAEA;IACA;IAAA;IAAAnE,aAAA,GAAAC,CAAA;IAEA,OAAOuD,QAAA;EACX,EAAE,OAAOxB,KAAA,EAAO;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IACZkB,OAAA,CAAQa,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IACtC,OAAOuB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;MACrBU,OAAA,EAAS;MACTC,OAAA,EAAS;IACb,GAAG;MAAEC,MAAA,EAAQ;IAAI;EACrB;AACJ","ignoreList":[]}