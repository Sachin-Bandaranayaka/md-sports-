dc56f5c28cd471f72ea76b2eb0bb4588
"use strict";

/* istanbul ignore next */
function cov_9galnbarb() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts";
  var hash = "baac44aba27a70c7c1f8ea9a548f76eb84ec5771";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 85
        }
      },
      "5": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 89
        }
      },
      "6": {
        start: {
          line: 14,
          column: 29
        },
        end: {
          line: 14,
          column: 80
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "9": {
        start: {
          line: 22,
          column: 19
        },
        end: {
          line: 22,
          column: 72
        }
      },
      "10": {
        start: {
          line: 23,
          column: 36
        },
        end: {
          line: 23,
          column: 84
        }
      },
      "11": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 59
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "13": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 73
        }
      },
      "14": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "15": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "17": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 45
        }
      },
      "18": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 51
        }
      },
      "19": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 105
        }
      },
      "20": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "23": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 71
        }
      },
      "24": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 87
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 77
        }
      },
      "28": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "29": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "30": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 123
        }
      },
      "31": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "32": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 64
        }
      },
      "33": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "35": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 70
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "37": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 66
        }
      },
      "38": {
        start: {
          line: 101,
          column: 59
        },
        end: {
          line: 101,
          column: 65
        }
      },
      "39": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "40": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 69
        }
      },
      "41": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "42": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "43": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 24
        }
      },
      "44": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 53
        }
      },
      "45": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 19
          }
        },
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 149,
            column: 1
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 101,
            column: 54
          },
          end: {
            line: 101,
            column: 55
          }
        },
        loc: {
          start: {
            line: 101,
            column: 59
          },
          end: {
            line: 101,
            column: 65
          }
        },
        line: 101
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 41
          }
        }, {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 22,
            column: 72
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 75
          }
        }, {
          start: {
            line: 23,
            column: 79
          },
          end: {
            line: 23,
            column: 84
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 48
          }
        }, {
          start: {
            line: 40,
            column: 52
          },
          end: {
            line: 40,
            column: 65
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "8": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/refresh/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport prisma from '@/lib/prisma';\nimport { verifyRefreshToken } from '@/services/refreshTokenService';\nimport { parseTimeStringToSeconds } from '@/services/authService';\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    try {\n        // Prioritize refresh token from httpOnly cookie\n        const cookieRefreshToken = req.cookies.get('refreshToken')?.value;\n        let tokenFromBody = null;\n\n        // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies\n        if (!cookieRefreshToken) {\n            try {\n                const body = await req.json();\n                tokenFromBody = body?.refreshToken;\n            } catch (e) {\n                // Ignore error if body is empty or not valid JSON, cookie is the preferred method\n                console.log('No JSON body or refreshToken field in body, relying on cookie if present.');\n            }\n        }\n\n        const tokenToVerify = cookieRefreshToken || tokenFromBody;\n\n        console.log('Refresh token request received', {\n            hasCookieToken: !!cookieRefreshToken,\n            hasTokenFromBody: !!tokenFromBody,\n        });\n\n        if (!tokenToVerify) {\n            console.log('No refresh token provided in cookie or body');\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token is required'\n            }, { status: 400 });\n        }\n\n        // Verify refresh token (this comes from refreshTokenService)\n        let userId;\n        try {\n            userId = await verifyRefreshToken(tokenToVerify);\n        } catch (error) {\n            console.error('Error during refresh token verification:', error);\n            // verifyRefreshToken itself should handle logging details of the error.\n            return NextResponse.json({\n                success: false,\n                message: 'Refresh token verification failed' // Generic message\n            }, { status: 401 });\n        }\n\n        if (!userId) {\n            console.log('Invalid, expired, or revoked refresh token. Token used:', tokenToVerify.substring(0, 10) + '...');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid or expired refresh token'\n            }, { status: 401 });\n        }\n\n        console.log('Valid refresh token for user ID:', userId);\n\n        // Get user data to include in new token\n        const user = await prisma.user.findFirst({\n            where: {\n                id: userId,\n                isActive: true\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: true\n                    }\n                }\n            }\n        });\n\n        if (!user) {\n            console.log('User not found or inactive for ID:', userId);\n            return NextResponse.json({\n                success: false,\n                message: 'User not found or inactive'\n            }, { status: 401 });\n        }\n\n        const permissions = user.role.permissions.map(p => p.name);\n\n        const newAccessToken = jwt.sign({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            permissions,\n            shopId: user.shopId\n        }, JWT_SECRET, { expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN });\n\n        console.log('Generated new access token for user:', user.id);\n\n        const response = NextResponse.json({\n            success: true,\n            accessToken: newAccessToken,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.role.name,\n                shopId: user.shopId,\n                permissions\n            }\n        });\n\n        // Set the new access token in an httpOnly cookie as well\n        response.cookies.set({\n            name: 'accessToken',\n            value: newAccessToken,\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here\n        // and set it in the 'refreshToken' cookie, potentially revoking the old one.\n\n        return response;\n    } catch (error) {\n        console.error('Token refresh error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to refresh token'\n        }, { status: 500 });\n    }\n} "],
      names: ["POST", "JWT_SECRET", "process", "env", "JWT_ACCESS_TOKEN_EXPIRES_IN", "COOKIE_SECURE", "NODE_ENV", "req", "cookieRefreshToken", "cookies", "get", "value", "tokenFromBody", "body", "json", "refreshToken", "e", "console", "log", "tokenToVerify", "hasCookieToken", "hasTokenFromBody", "NextResponse", "success", "message", "status", "userId", "verifyRefreshToken", "error", "substring", "user", "prisma", "findFirst", "where", "id", "isActive", "include", "role", "permissions", "map", "p", "name", "newAccessToken", "jwt", "sign", "sub", "username", "email", "roleId", "shopId", "expiresIn", "response", "accessToken", "fullName", "roleName", "set", "httpOnly", "secure", "sameSite", "maxAge", "parseTimeStringToSeconds", "path"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "baac44aba27a70c7c1f8ea9a548f76eb84ec5771"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9galnbarb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9galnbarb();
cov_9galnbarb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9galnbarb().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9galnbarb().f[0]++;
    cov_9galnbarb().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_9galnbarb().s[3]++, require("next/server"));
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[4]++, _interop_require_default(require("jsonwebtoken")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_9galnbarb().s[5]++, _interop_require_default(require("../../../../lib/prisma")));
const _refreshTokenService =
/* istanbul ignore next */
(cov_9galnbarb().s[6]++, require("../../../../services/refreshTokenService"));
const _authService =
/* istanbul ignore next */
(cov_9galnbarb().s[7]++, require("../../../../services/authService"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_9galnbarb().f[1]++;
  cov_9galnbarb().s[8]++;
  return /* istanbul ignore next */(cov_9galnbarb().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_9galnbarb().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_9galnbarb().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_9galnbarb().b[0][1]++, {
    default: obj
  });
}
// JWT configuration
const JWT_SECRET =
/* istanbul ignore next */
(cov_9galnbarb().s[9]++,
/* istanbul ignore next */
(cov_9galnbarb().b[2][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_9galnbarb().b[2][1]++, "CHANGE_THIS_IN_PRODUCTION"));
const JWT_ACCESS_TOKEN_EXPIRES_IN =
/* istanbul ignore next */
(cov_9galnbarb().s[10]++,
/* istanbul ignore next */
(cov_9galnbarb().b[3][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_9galnbarb().b[3][1]++, "15m"));
const COOKIE_SECURE =
/* istanbul ignore next */
(cov_9galnbarb().s[11]++, process.env.NODE_ENV === "production");
async function POST(req) {
  /* istanbul ignore next */
  cov_9galnbarb().f[2]++;
  cov_9galnbarb().s[12]++;
  try {
    // Prioritize refresh token from httpOnly cookie
    const cookieRefreshToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[13]++, req.cookies.get("refreshToken")?.value);
    let tokenFromBody =
    /* istanbul ignore next */
    (cov_9galnbarb().s[14]++, null);
    // Attempt to parse body only if cookie is not present, and be careful with empty/malformed bodies
    /* istanbul ignore next */
    cov_9galnbarb().s[15]++;
    if (!cookieRefreshToken) {
      /* istanbul ignore next */
      cov_9galnbarb().b[4][0]++;
      cov_9galnbarb().s[16]++;
      try {
        const body =
        /* istanbul ignore next */
        (cov_9galnbarb().s[17]++, await req.json());
        /* istanbul ignore next */
        cov_9galnbarb().s[18]++;
        tokenFromBody = body?.refreshToken;
      } catch (e) {
        /* istanbul ignore next */
        cov_9galnbarb().s[19]++;
        // Ignore error if body is empty or not valid JSON, cookie is the preferred method
        console.log("No JSON body or refreshToken field in body, relying on cookie if present.");
      }
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[4][1]++;
    }
    const tokenToVerify =
    /* istanbul ignore next */
    (cov_9galnbarb().s[20]++,
    /* istanbul ignore next */
    (cov_9galnbarb().b[5][0]++, cookieRefreshToken) ||
    /* istanbul ignore next */
    (cov_9galnbarb().b[5][1]++, tokenFromBody));
    /* istanbul ignore next */
    cov_9galnbarb().s[21]++;
    console.log("Refresh token request received", {
      hasCookieToken: !!cookieRefreshToken,
      hasTokenFromBody: !!tokenFromBody
    });
    /* istanbul ignore next */
    cov_9galnbarb().s[22]++;
    if (!tokenToVerify) {
      /* istanbul ignore next */
      cov_9galnbarb().b[6][0]++;
      cov_9galnbarb().s[23]++;
      console.log("No refresh token provided in cookie or body");
      /* istanbul ignore next */
      cov_9galnbarb().s[24]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[6][1]++;
    }
    // Verify refresh token (this comes from refreshTokenService)
    let userId;
    /* istanbul ignore next */
    cov_9galnbarb().s[25]++;
    try {
      /* istanbul ignore next */
      cov_9galnbarb().s[26]++;
      userId = await (0, _refreshTokenService.verifyRefreshToken)(tokenToVerify);
    } catch (error) {
      /* istanbul ignore next */
      cov_9galnbarb().s[27]++;
      console.error("Error during refresh token verification:", error);
      // verifyRefreshToken itself should handle logging details of the error.
      /* istanbul ignore next */
      cov_9galnbarb().s[28]++;
      return _server.NextResponse.json({
        success: false,
        message: "Refresh token verification failed" // Generic message
      }, {
        status: 401
      });
    }
    /* istanbul ignore next */
    cov_9galnbarb().s[29]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9galnbarb().b[7][0]++;
      cov_9galnbarb().s[30]++;
      console.log("Invalid, expired, or revoked refresh token. Token used:", tokenToVerify.substring(0, 10) + "...");
      /* istanbul ignore next */
      cov_9galnbarb().s[31]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid or expired refresh token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[7][1]++;
    }
    cov_9galnbarb().s[32]++;
    console.log("Valid refresh token for user ID:", userId);
    // Get user data to include in new token
    const user =
    /* istanbul ignore next */
    (cov_9galnbarb().s[33]++, await _prisma.default.user.findFirst({
      where: {
        id: userId,
        isActive: true
      },
      include: {
        role: {
          include: {
            permissions: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_9galnbarb().s[34]++;
    if (!user) {
      /* istanbul ignore next */
      cov_9galnbarb().b[8][0]++;
      cov_9galnbarb().s[35]++;
      console.log("User not found or inactive for ID:", userId);
      /* istanbul ignore next */
      cov_9galnbarb().s[36]++;
      return _server.NextResponse.json({
        success: false,
        message: "User not found or inactive"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_9galnbarb().b[8][1]++;
    }
    const permissions =
    /* istanbul ignore next */
    (cov_9galnbarb().s[37]++, user.role.permissions.map(p => {
      /* istanbul ignore next */
      cov_9galnbarb().f[3]++;
      cov_9galnbarb().s[38]++;
      return p.name;
    }));
    const newAccessToken =
    /* istanbul ignore next */
    (cov_9galnbarb().s[39]++, _jsonwebtoken.default.sign({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      permissions,
      shopId: user.shopId
    }, JWT_SECRET, {
      expiresIn: JWT_ACCESS_TOKEN_EXPIRES_IN
    }));
    /* istanbul ignore next */
    cov_9galnbarb().s[40]++;
    console.log("Generated new access token for user:", user.id);
    const response =
    /* istanbul ignore next */
    (cov_9galnbarb().s[41]++, _server.NextResponse.json({
      success: true,
      accessToken: newAccessToken,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName: user.role.name,
        shopId: user.shopId,
        permissions
      }
    }));
    // Set the new access token in an httpOnly cookie as well
    /* istanbul ignore next */
    cov_9galnbarb().s[42]++;
    response.cookies.set({
      name: "accessToken",
      value: newAccessToken,
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: (0, _authService.parseTimeStringToSeconds)(JWT_ACCESS_TOKEN_EXPIRES_IN),
      path: "/"
    });
    // IMPORTANT: If you implement refresh token rotation, generate a new refresh token here
    // and set it in the 'refreshToken' cookie, potentially revoking the old one.
    /* istanbul ignore next */
    cov_9galnbarb().s[43]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_9galnbarb().s[44]++;
    console.error("Token refresh error:", error);
    /* istanbul ignore next */
    cov_9galnbarb().s[45]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to refresh token"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,