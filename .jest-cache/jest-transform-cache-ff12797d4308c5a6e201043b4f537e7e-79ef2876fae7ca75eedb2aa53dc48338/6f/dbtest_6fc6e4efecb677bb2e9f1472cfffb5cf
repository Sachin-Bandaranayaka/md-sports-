05404839b81c9c7ac46cf41fc670ff3e
// Mock Prisma operations
"use strict";
// Mock the prisma module
jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma,
        prisma: mockPrisma
    }));
// Mock the db module
jest.mock("@/lib/db", ()=>({
        __esModule: true,
        db: mockPrisma,
        prisma: mockPrisma,
        default: mockPrisma
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _db = require("../../src/lib/db");
const createMockPrismaOperations = ()=>({
        findMany: jest.fn(),
        findUnique: jest.fn(),
        findFirst: jest.fn(),
        create: jest.fn(),
        createMany: jest.fn(),
        update: jest.fn(),
        updateMany: jest.fn(),
        upsert: jest.fn(),
        delete: jest.fn(),
        deleteMany: jest.fn(),
        count: jest.fn(),
        aggregate: jest.fn(),
        groupBy: jest.fn()
    });
// Create mock Prisma client
const mockPrisma = {
    $connect: jest.fn(),
    $disconnect: jest.fn(),
    $transaction: jest.fn(),
    user: createMockPrismaOperations(),
    product: createMockPrismaOperations(),
    category: createMockPrismaOperations(),
    order: createMockPrismaOperations(),
    orderItem: createMockPrismaOperations(),
    review: createMockPrismaOperations(),
    cart: createMockPrismaOperations(),
    cartItem: createMockPrismaOperations(),
    payment: createMockPrismaOperations(),
    shipping: createMockPrismaOperations(),
    address: createMockPrismaOperations(),
    wishlist: createMockPrismaOperations(),
    wishlistItem: createMockPrismaOperations(),
    notification: createMockPrismaOperations(),
    auditLog: createMockPrismaOperations(),
    session: createMockPrismaOperations(),
    account: createMockPrismaOperations(),
    verificationToken: createMockPrismaOperations(),
    inventory: createMockPrismaOperations(),
    supplier: createMockPrismaOperations(),
    purchaseOrder: createMockPrismaOperations(),
    purchaseOrderItem: createMockPrismaOperations(),
    salesInvoice: createMockPrismaOperations(),
    salesInvoiceItem: createMockPrismaOperations()
};
// Mock environment variables
const originalEnv = process.env;
beforeAll(()=>{
    process.env = {
        ...originalEnv,
        DATABASE_URL: "postgresql://test:test@localhost:5432/test_db",
        NODE_ENV: "test"
    };
});
afterAll(()=>{
    process.env = originalEnv;
});
describe("Database Library", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("exports", ()=>{
        it("should export db", ()=>{
            expect(_db.db).toBeDefined();
        });
        it("should export prisma", ()=>{
            expect(_db.prisma).toBeDefined();
        });
        it("should have db and prisma reference the same instance", ()=>{
            expect(_db.db).toBe(_db.prisma);
        });
    });
    describe("database operations", ()=>{
        it("should have $connect method", ()=>{
            expect(_db.db.$connect).toBeDefined();
            expect(typeof _db.db.$connect).toBe("function");
        });
        it("should have $disconnect method", ()=>{
            expect(_db.db.$disconnect).toBeDefined();
            expect(typeof _db.db.$disconnect).toBe("function");
        });
        it("should have $transaction method", ()=>{
            expect(_db.db.$transaction).toBeDefined();
            expect(typeof _db.db.$transaction).toBe("function");
        });
        it("should have user model", ()=>{
            expect(_db.db.user).toBeDefined();
            expect(_db.db.user.findMany).toBeDefined();
            expect(_db.db.user.create).toBeDefined();
            expect(_db.db.user.update).toBeDefined();
            expect(_db.db.user.delete).toBeDefined();
        });
        it("should have product model", ()=>{
            expect(_db.db.product).toBeDefined();
            expect(_db.db.product.findMany).toBeDefined();
            expect(_db.db.product.create).toBeDefined();
            expect(_db.db.product.update).toBeDefined();
            expect(_db.db.product.delete).toBeDefined();
        });
        it("should have category model", ()=>{
            expect(_db.db.category).toBeDefined();
            expect(_db.db.category.findMany).toBeDefined();
            expect(_db.db.category.create).toBeDefined();
            expect(_db.db.category.update).toBeDefined();
            expect(_db.db.category.delete).toBeDefined();
        });
        it("should have order model", ()=>{
            expect(_db.db.order).toBeDefined();
            expect(_db.db.order.findMany).toBeDefined();
            expect(_db.db.order.create).toBeDefined();
            expect(_db.db.order.update).toBeDefined();
            expect(_db.db.order.delete).toBeDefined();
        });
        it("should have cart model", ()=>{
            expect(_db.db.cart).toBeDefined();
            expect(_db.db.cart.findMany).toBeDefined();
            expect(_db.db.cart.create).toBeDefined();
            expect(_db.db.cart.update).toBeDefined();
            expect(_db.db.cart.delete).toBeDefined();
        });
        it("should have review model", ()=>{
            expect(_db.db.review).toBeDefined();
            expect(_db.db.review.findMany).toBeDefined();
            expect(_db.db.review.create).toBeDefined();
            expect(_db.db.review.update).toBeDefined();
            expect(_db.db.review.delete).toBeDefined();
        });
        it("should have payment model", ()=>{
            expect(_db.db.payment).toBeDefined();
            expect(_db.db.payment.findMany).toBeDefined();
            expect(_db.db.payment.create).toBeDefined();
            expect(_db.db.payment.update).toBeDefined();
            expect(_db.db.payment.delete).toBeDefined();
        });
        it("should have shipping model", ()=>{
            expect(_db.db.shipping).toBeDefined();
            expect(_db.db.shipping.findMany).toBeDefined();
            expect(_db.db.shipping.create).toBeDefined();
            expect(_db.db.shipping.update).toBeDefined();
            expect(_db.db.shipping.delete).toBeDefined();
        });
        it("should have address model", ()=>{
            expect(_db.db.address).toBeDefined();
            expect(_db.db.address.findMany).toBeDefined();
            expect(_db.db.address.create).toBeDefined();
            expect(_db.db.address.update).toBeDefined();
            expect(_db.db.address.delete).toBeDefined();
        });
        it("should have wishlist model", ()=>{
            expect(_db.db.wishlist).toBeDefined();
            expect(_db.db.wishlist.findMany).toBeDefined();
            expect(_db.db.wishlist.create).toBeDefined();
            expect(_db.db.wishlist.update).toBeDefined();
            expect(_db.db.wishlist.delete).toBeDefined();
        });
        it("should have notification model", ()=>{
            expect(_db.db.notification).toBeDefined();
            expect(_db.db.notification.findMany).toBeDefined();
            expect(_db.db.notification.create).toBeDefined();
            expect(_db.db.notification.update).toBeDefined();
            expect(_db.db.notification.delete).toBeDefined();
        });
        it("should have auditLog model", ()=>{
            expect(_db.db.auditLog).toBeDefined();
            expect(_db.db.auditLog.findMany).toBeDefined();
            expect(_db.db.auditLog.create).toBeDefined();
            expect(_db.db.auditLog.update).toBeDefined();
            expect(_db.db.auditLog.delete).toBeDefined();
        });
        it("should have session model", ()=>{
            expect(_db.db.session).toBeDefined();
            expect(_db.db.session.findMany).toBeDefined();
            expect(_db.db.session.create).toBeDefined();
            expect(_db.db.session.update).toBeDefined();
            expect(_db.db.session.delete).toBeDefined();
        });
    });
    describe("error handling", ()=>{
        it("should handle connection errors", async ()=>{
            mockPrisma.$connect.mockRejectedValue(new Error("Database connection failed"));
            await expect(_db.db.$connect()).rejects.toThrow("Database connection failed");
        });
        it("should handle query errors", async ()=>{
            mockPrisma.user.findUnique.mockRejectedValue(new Error("Query failed"));
            await expect(_db.db.user.findUnique({
                where: {
                    id: "invalid"
                }
            })).rejects.toThrow("Query failed");
        });
        it("should propagate transaction errors", async ()=>{
            mockPrisma.$transaction.mockRejectedValue(new Error("Transaction failed"));
            const transactionFn = jest.fn();
            await expect(_db.db.$transaction(transactionFn)).rejects.toThrow("Transaction failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,