{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Mock Prisma operations\nconst createMockPrismaOperations = () => ({\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  createMany: jest.fn(),\n  update: jest.fn(),\n  updateMany: jest.fn(),\n  upsert: jest.fn(),\n  delete: jest.fn(),\n  deleteMany: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  groupBy: jest.fn(),\n});\n\n// Create mock Prisma client\nconst mockPrisma = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $transaction: jest.fn(),\n  user: createMockPrismaOperations(),\n  product: createMockPrismaOperations(),\n  category: createMockPrismaOperations(),\n  order: createMockPrismaOperations(),\n  orderItem: createMockPrismaOperations(),\n  review: createMockPrismaOperations(),\n  cart: createMockPrismaOperations(),\n  cartItem: createMockPrismaOperations(),\n  payment: createMockPrismaOperations(),\n  shipping: createMockPrismaOperations(),\n  address: createMockPrismaOperations(),\n  wishlist: createMockPrismaOperations(),\n  wishlistItem: createMockPrismaOperations(),\n  notification: createMockPrismaOperations(),\n  auditLog: createMockPrismaOperations(),\n  session: createMockPrismaOperations(),\n  account: createMockPrismaOperations(),\n  verificationToken: createMockPrismaOperations(),\n  inventory: createMockPrismaOperations(),\n  supplier: createMockPrismaOperations(),\n  purchaseOrder: createMockPrismaOperations(),\n  purchaseOrderItem: createMockPrismaOperations(),\n  salesInvoice: createMockPrismaOperations(),\n  salesInvoiceItem: createMockPrismaOperations(),\n};\n\n// Mock the prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n  prisma: mockPrisma,\n}));\n\n// Mock the db module\njest.mock('@/lib/db', () => ({\n  __esModule: true,\n  db: mockPrisma,\n  prisma: mockPrisma,\n  default: mockPrisma,\n}));\n\n// Mock environment variables\nconst originalEnv = process.env;\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\n// Import after mocking\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('exports', () => {\n    it('should export db', () => {\n      expect(db).toBeDefined();\n    });\n\n    it('should export prisma', () => {\n      expect(prisma).toBeDefined();\n    });\n\n    it('should have db and prisma reference the same instance', () => {\n      expect(db).toBe(prisma);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should have $connect method', () => {\n      expect(db.$connect).toBeDefined();\n      expect(typeof db.$connect).toBe('function');\n    });\n\n    it('should have $disconnect method', () => {\n      expect(db.$disconnect).toBeDefined();\n      expect(typeof db.$disconnect).toBe('function');\n    });\n\n    it('should have $transaction method', () => {\n      expect(db.$transaction).toBeDefined();\n      expect(typeof db.$transaction).toBe('function');\n    });\n\n    it('should have user model', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have product model', () => {\n      expect(db.product).toBeDefined();\n      expect(db.product.findMany).toBeDefined();\n      expect(db.product.create).toBeDefined();\n      expect(db.product.update).toBeDefined();\n      expect(db.product.delete).toBeDefined();\n    });\n\n    it('should have category model', () => {\n      expect(db.category).toBeDefined();\n      expect(db.category.findMany).toBeDefined();\n      expect(db.category.create).toBeDefined();\n      expect(db.category.update).toBeDefined();\n      expect(db.category.delete).toBeDefined();\n    });\n\n    it('should have order model', () => {\n      expect(db.order).toBeDefined();\n      expect(db.order.findMany).toBeDefined();\n      expect(db.order.create).toBeDefined();\n      expect(db.order.update).toBeDefined();\n      expect(db.order.delete).toBeDefined();\n    });\n\n    it('should have cart model', () => {\n      expect(db.cart).toBeDefined();\n      expect(db.cart.findMany).toBeDefined();\n      expect(db.cart.create).toBeDefined();\n      expect(db.cart.update).toBeDefined();\n      expect(db.cart.delete).toBeDefined();\n    });\n\n    it('should have review model', () => {\n      expect(db.review).toBeDefined();\n      expect(db.review.findMany).toBeDefined();\n      expect(db.review.create).toBeDefined();\n      expect(db.review.update).toBeDefined();\n      expect(db.review.delete).toBeDefined();\n    });\n\n    it('should have payment model', () => {\n      expect(db.payment).toBeDefined();\n      expect(db.payment.findMany).toBeDefined();\n      expect(db.payment.create).toBeDefined();\n      expect(db.payment.update).toBeDefined();\n      expect(db.payment.delete).toBeDefined();\n    });\n\n    it('should have shipping model', () => {\n      expect(db.shipping).toBeDefined();\n      expect(db.shipping.findMany).toBeDefined();\n      expect(db.shipping.create).toBeDefined();\n      expect(db.shipping.update).toBeDefined();\n      expect(db.shipping.delete).toBeDefined();\n    });\n\n    it('should have address model', () => {\n      expect(db.address).toBeDefined();\n      expect(db.address.findMany).toBeDefined();\n      expect(db.address.create).toBeDefined();\n      expect(db.address.update).toBeDefined();\n      expect(db.address.delete).toBeDefined();\n    });\n\n    it('should have wishlist model', () => {\n      expect(db.wishlist).toBeDefined();\n      expect(db.wishlist.findMany).toBeDefined();\n      expect(db.wishlist.create).toBeDefined();\n      expect(db.wishlist.update).toBeDefined();\n      expect(db.wishlist.delete).toBeDefined();\n    });\n\n    it('should have notification model', () => {\n      expect(db.notification).toBeDefined();\n      expect(db.notification.findMany).toBeDefined();\n      expect(db.notification.create).toBeDefined();\n      expect(db.notification.update).toBeDefined();\n      expect(db.notification.delete).toBeDefined();\n    });\n\n    it('should have auditLog model', () => {\n      expect(db.auditLog).toBeDefined();\n      expect(db.auditLog.findMany).toBeDefined();\n      expect(db.auditLog.create).toBeDefined();\n      expect(db.auditLog.update).toBeDefined();\n      expect(db.auditLog.delete).toBeDefined();\n    });\n\n    it('should have session model', () => {\n      expect(db.session).toBeDefined();\n      expect(db.session.findMany).toBeDefined();\n      expect(db.session.create).toBeDefined();\n      expect(db.session.update).toBeDefined();\n      expect(db.session.delete).toBeDefined();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle connection errors', async () => {\n      mockPrisma.$connect.mockRejectedValue(new Error('Database connection failed'));\n      \n      await expect(db.$connect()).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle query errors', async () => {\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Query failed'));\n      \n      await expect(db.user.findUnique({ where: { id: 'invalid' } })).rejects.toThrow('Query failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      mockPrisma.$transaction.mockRejectedValue(new Error('Transaction failed'));\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["jest","mock","__esModule","default","mockPrisma","prisma","db","createMockPrismaOperations","findMany","fn","findUnique","findFirst","create","createMany","update","updateMany","upsert","delete","deleteMany","count","aggregate","groupBy","$connect","$disconnect","$transaction","user","product","category","order","orderItem","review","cart","cartItem","payment","shipping","address","wishlist","wishlistItem","notification","auditLog","session","account","verificationToken","inventory","supplier","purchaseOrder","purchaseOrderItem","salesInvoice","salesInvoiceItem","originalEnv","process","env","beforeAll","DATABASE_URL","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","it","expect","toBeDefined","toBe","mockRejectedValue","Error","rejects","toThrow","where","id","transactionFn"],"mappings":"AAAA,yBAAyB;;AAgDzB,yBAAyB;AACzBA,KAAKC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,YAAY;QACZC,SAASC;QACTC,QAAQD;IACV,CAAA;AAEA,qBAAqB;AACrBJ,KAAKC,IAAI,CAAC,YAAY,IAAO,CAAA;QAC3BC,YAAY;QACZI,IAAIF;QACJC,QAAQD;QACRD,SAASC;IACX,CAAA;;;;oBAiB2B;AA7E3B,MAAMG,6BAA6B,IAAO,CAAA;QACxCC,UAAUR,KAAKS,EAAE;QACjBC,YAAYV,KAAKS,EAAE;QACnBE,WAAWX,KAAKS,EAAE;QAClBG,QAAQZ,KAAKS,EAAE;QACfI,YAAYb,KAAKS,EAAE;QACnBK,QAAQd,KAAKS,EAAE;QACfM,YAAYf,KAAKS,EAAE;QACnBO,QAAQhB,KAAKS,EAAE;QACfQ,QAAQjB,KAAKS,EAAE;QACfS,YAAYlB,KAAKS,EAAE;QACnBU,OAAOnB,KAAKS,EAAE;QACdW,WAAWpB,KAAKS,EAAE;QAClBY,SAASrB,KAAKS,EAAE;IAClB,CAAA;AAEA,4BAA4B;AAC5B,MAAML,aAAa;IACjBkB,UAAUtB,KAAKS,EAAE;IACjBc,aAAavB,KAAKS,EAAE;IACpBe,cAAcxB,KAAKS,EAAE;IACrBgB,MAAMlB;IACNmB,SAASnB;IACToB,UAAUpB;IACVqB,OAAOrB;IACPsB,WAAWtB;IACXuB,QAAQvB;IACRwB,MAAMxB;IACNyB,UAAUzB;IACV0B,SAAS1B;IACT2B,UAAU3B;IACV4B,SAAS5B;IACT6B,UAAU7B;IACV8B,cAAc9B;IACd+B,cAAc/B;IACdgC,UAAUhC;IACViC,SAASjC;IACTkC,SAASlC;IACTmC,mBAAmBnC;IACnBoC,WAAWpC;IACXqC,UAAUrC;IACVsC,eAAetC;IACfuC,mBAAmBvC;IACnBwC,cAAcxC;IACdyC,kBAAkBzC;AACpB;AAiBA,6BAA6B;AAC7B,MAAM0C,cAAcC,QAAQC,GAAG;AAC/BC,UAAU;IACRF,QAAQC,GAAG,GAAG;QACZ,GAAGF,WAAW;QACdI,cAAc;QACdC,UAAU;IACZ;AACF;AAEAC,SAAS;IACPL,QAAQC,GAAG,GAAGF;AAChB;AAKAO,SAAS,oBAAoB;IAC3BC,WAAW;QACTzD,KAAK0D,aAAa;IACpB;IAEAF,SAAS,WAAW;QAClBG,GAAG,oBAAoB;YACrBC,OAAOtD,MAAE,EAAEuD,WAAW;QACxB;QAEAF,GAAG,wBAAwB;YACzBC,OAAOvD,UAAM,EAAEwD,WAAW;QAC5B;QAEAF,GAAG,yDAAyD;YAC1DC,OAAOtD,MAAE,EAAEwD,IAAI,CAACzD,UAAM;QACxB;IACF;IAEAmD,SAAS,uBAAuB;QAC9BG,GAAG,+BAA+B;YAChCC,OAAOtD,MAAE,CAACgB,QAAQ,EAAEuC,WAAW;YAC/BD,OAAO,OAAOtD,MAAE,CAACgB,QAAQ,EAAEwC,IAAI,CAAC;QAClC;QAEAH,GAAG,kCAAkC;YACnCC,OAAOtD,MAAE,CAACiB,WAAW,EAAEsC,WAAW;YAClCD,OAAO,OAAOtD,MAAE,CAACiB,WAAW,EAAEuC,IAAI,CAAC;QACrC;QAEAH,GAAG,mCAAmC;YACpCC,OAAOtD,MAAE,CAACkB,YAAY,EAAEqC,WAAW;YACnCD,OAAO,OAAOtD,MAAE,CAACkB,YAAY,EAAEsC,IAAI,CAAC;QACtC;QAEAH,GAAG,0BAA0B;YAC3BC,OAAOtD,MAAE,CAACmB,IAAI,EAAEoC,WAAW;YAC3BD,OAAOtD,MAAE,CAACmB,IAAI,CAACjB,QAAQ,EAAEqD,WAAW;YACpCD,OAAOtD,MAAE,CAACmB,IAAI,CAACb,MAAM,EAAEiD,WAAW;YAClCD,OAAOtD,MAAE,CAACmB,IAAI,CAACX,MAAM,EAAE+C,WAAW;YAClCD,OAAOtD,MAAE,CAACmB,IAAI,CAACR,MAAM,EAAE4C,WAAW;QACpC;QAEAF,GAAG,6BAA6B;YAC9BC,OAAOtD,MAAE,CAACoB,OAAO,EAAEmC,WAAW;YAC9BD,OAAOtD,MAAE,CAACoB,OAAO,CAAClB,QAAQ,EAAEqD,WAAW;YACvCD,OAAOtD,MAAE,CAACoB,OAAO,CAACd,MAAM,EAAEiD,WAAW;YACrCD,OAAOtD,MAAE,CAACoB,OAAO,CAACZ,MAAM,EAAE+C,WAAW;YACrCD,OAAOtD,MAAE,CAACoB,OAAO,CAACT,MAAM,EAAE4C,WAAW;QACvC;QAEAF,GAAG,8BAA8B;YAC/BC,OAAOtD,MAAE,CAACqB,QAAQ,EAAEkC,WAAW;YAC/BD,OAAOtD,MAAE,CAACqB,QAAQ,CAACnB,QAAQ,EAAEqD,WAAW;YACxCD,OAAOtD,MAAE,CAACqB,QAAQ,CAACf,MAAM,EAAEiD,WAAW;YACtCD,OAAOtD,MAAE,CAACqB,QAAQ,CAACb,MAAM,EAAE+C,WAAW;YACtCD,OAAOtD,MAAE,CAACqB,QAAQ,CAACV,MAAM,EAAE4C,WAAW;QACxC;QAEAF,GAAG,2BAA2B;YAC5BC,OAAOtD,MAAE,CAACsB,KAAK,EAAEiC,WAAW;YAC5BD,OAAOtD,MAAE,CAACsB,KAAK,CAACpB,QAAQ,EAAEqD,WAAW;YACrCD,OAAOtD,MAAE,CAACsB,KAAK,CAAChB,MAAM,EAAEiD,WAAW;YACnCD,OAAOtD,MAAE,CAACsB,KAAK,CAACd,MAAM,EAAE+C,WAAW;YACnCD,OAAOtD,MAAE,CAACsB,KAAK,CAACX,MAAM,EAAE4C,WAAW;QACrC;QAEAF,GAAG,0BAA0B;YAC3BC,OAAOtD,MAAE,CAACyB,IAAI,EAAE8B,WAAW;YAC3BD,OAAOtD,MAAE,CAACyB,IAAI,CAACvB,QAAQ,EAAEqD,WAAW;YACpCD,OAAOtD,MAAE,CAACyB,IAAI,CAACnB,MAAM,EAAEiD,WAAW;YAClCD,OAAOtD,MAAE,CAACyB,IAAI,CAACjB,MAAM,EAAE+C,WAAW;YAClCD,OAAOtD,MAAE,CAACyB,IAAI,CAACd,MAAM,EAAE4C,WAAW;QACpC;QAEAF,GAAG,4BAA4B;YAC7BC,OAAOtD,MAAE,CAACwB,MAAM,EAAE+B,WAAW;YAC7BD,OAAOtD,MAAE,CAACwB,MAAM,CAACtB,QAAQ,EAAEqD,WAAW;YACtCD,OAAOtD,MAAE,CAACwB,MAAM,CAAClB,MAAM,EAAEiD,WAAW;YACpCD,OAAOtD,MAAE,CAACwB,MAAM,CAAChB,MAAM,EAAE+C,WAAW;YACpCD,OAAOtD,MAAE,CAACwB,MAAM,CAACb,MAAM,EAAE4C,WAAW;QACtC;QAEAF,GAAG,6BAA6B;YAC9BC,OAAOtD,MAAE,CAAC2B,OAAO,EAAE4B,WAAW;YAC9BD,OAAOtD,MAAE,CAAC2B,OAAO,CAACzB,QAAQ,EAAEqD,WAAW;YACvCD,OAAOtD,MAAE,CAAC2B,OAAO,CAACrB,MAAM,EAAEiD,WAAW;YACrCD,OAAOtD,MAAE,CAAC2B,OAAO,CAACnB,MAAM,EAAE+C,WAAW;YACrCD,OAAOtD,MAAE,CAAC2B,OAAO,CAAChB,MAAM,EAAE4C,WAAW;QACvC;QAEAF,GAAG,8BAA8B;YAC/BC,OAAOtD,MAAE,CAAC4B,QAAQ,EAAE2B,WAAW;YAC/BD,OAAOtD,MAAE,CAAC4B,QAAQ,CAAC1B,QAAQ,EAAEqD,WAAW;YACxCD,OAAOtD,MAAE,CAAC4B,QAAQ,CAACtB,MAAM,EAAEiD,WAAW;YACtCD,OAAOtD,MAAE,CAAC4B,QAAQ,CAACpB,MAAM,EAAE+C,WAAW;YACtCD,OAAOtD,MAAE,CAAC4B,QAAQ,CAACjB,MAAM,EAAE4C,WAAW;QACxC;QAEAF,GAAG,6BAA6B;YAC9BC,OAAOtD,MAAE,CAAC6B,OAAO,EAAE0B,WAAW;YAC9BD,OAAOtD,MAAE,CAAC6B,OAAO,CAAC3B,QAAQ,EAAEqD,WAAW;YACvCD,OAAOtD,MAAE,CAAC6B,OAAO,CAACvB,MAAM,EAAEiD,WAAW;YACrCD,OAAOtD,MAAE,CAAC6B,OAAO,CAACrB,MAAM,EAAE+C,WAAW;YACrCD,OAAOtD,MAAE,CAAC6B,OAAO,CAAClB,MAAM,EAAE4C,WAAW;QACvC;QAEAF,GAAG,8BAA8B;YAC/BC,OAAOtD,MAAE,CAAC8B,QAAQ,EAAEyB,WAAW;YAC/BD,OAAOtD,MAAE,CAAC8B,QAAQ,CAAC5B,QAAQ,EAAEqD,WAAW;YACxCD,OAAOtD,MAAE,CAAC8B,QAAQ,CAACxB,MAAM,EAAEiD,WAAW;YACtCD,OAAOtD,MAAE,CAAC8B,QAAQ,CAACtB,MAAM,EAAE+C,WAAW;YACtCD,OAAOtD,MAAE,CAAC8B,QAAQ,CAACnB,MAAM,EAAE4C,WAAW;QACxC;QAEAF,GAAG,kCAAkC;YACnCC,OAAOtD,MAAE,CAACgC,YAAY,EAAEuB,WAAW;YACnCD,OAAOtD,MAAE,CAACgC,YAAY,CAAC9B,QAAQ,EAAEqD,WAAW;YAC5CD,OAAOtD,MAAE,CAACgC,YAAY,CAAC1B,MAAM,EAAEiD,WAAW;YAC1CD,OAAOtD,MAAE,CAACgC,YAAY,CAACxB,MAAM,EAAE+C,WAAW;YAC1CD,OAAOtD,MAAE,CAACgC,YAAY,CAACrB,MAAM,EAAE4C,WAAW;QAC5C;QAEAF,GAAG,8BAA8B;YAC/BC,OAAOtD,MAAE,CAACiC,QAAQ,EAAEsB,WAAW;YAC/BD,OAAOtD,MAAE,CAACiC,QAAQ,CAAC/B,QAAQ,EAAEqD,WAAW;YACxCD,OAAOtD,MAAE,CAACiC,QAAQ,CAAC3B,MAAM,EAAEiD,WAAW;YACtCD,OAAOtD,MAAE,CAACiC,QAAQ,CAACzB,MAAM,EAAE+C,WAAW;YACtCD,OAAOtD,MAAE,CAACiC,QAAQ,CAACtB,MAAM,EAAE4C,WAAW;QACxC;QAEAF,GAAG,6BAA6B;YAC9BC,OAAOtD,MAAE,CAACkC,OAAO,EAAEqB,WAAW;YAC9BD,OAAOtD,MAAE,CAACkC,OAAO,CAAChC,QAAQ,EAAEqD,WAAW;YACvCD,OAAOtD,MAAE,CAACkC,OAAO,CAAC5B,MAAM,EAAEiD,WAAW;YACrCD,OAAOtD,MAAE,CAACkC,OAAO,CAAC1B,MAAM,EAAE+C,WAAW;YACrCD,OAAOtD,MAAE,CAACkC,OAAO,CAACvB,MAAM,EAAE4C,WAAW;QACvC;IACF;IAEAL,SAAS,kBAAkB;QACzBG,GAAG,mCAAmC;YACpCvD,WAAWkB,QAAQ,CAACyC,iBAAiB,CAAC,IAAIC,MAAM;YAEhD,MAAMJ,OAAOtD,MAAE,CAACgB,QAAQ,IAAI2C,OAAO,CAACC,OAAO,CAAC;QAC9C;QAEAP,GAAG,8BAA8B;YAC/BvD,WAAWqB,IAAI,CAACf,UAAU,CAACqD,iBAAiB,CAAC,IAAIC,MAAM;YAEvD,MAAMJ,OAAOtD,MAAE,CAACmB,IAAI,CAACf,UAAU,CAAC;gBAAEyD,OAAO;oBAAEC,IAAI;gBAAU;YAAE,IAAIH,OAAO,CAACC,OAAO,CAAC;QACjF;QAEAP,GAAG,uCAAuC;YACxCvD,WAAWoB,YAAY,CAACuC,iBAAiB,CAAC,IAAIC,MAAM;YAEpD,MAAMK,gBAAgBrE,KAAKS,EAAE;YAC7B,MAAMmD,OAAOtD,MAAE,CAACkB,YAAY,CAAC6C,gBAAgBJ,OAAO,CAACC,OAAO,CAAC;QAC/D;IACF;AACF"}