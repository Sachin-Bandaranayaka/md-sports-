{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Mock Prisma before imports\njest.mock('@/lib/prisma', () => {\n  const mockPrisma = {\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n    $transaction: jest.fn(),\n    user: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    shop: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n  };\n  \n  return {\n    __esModule: true,\n    default: mockPrisma,\n    prisma: mockPrisma,\n  };\n});\n\nimport { db, prisma } from '@/lib/db';\nimport mockPrismaClient from '@/lib/prisma';\n\nconst mockPrisma = mockPrismaClient as jest.Mocked<typeof mockPrismaClient>;\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('db export', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrismaClient);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have shop methods', () => {\n      expect(db.shop).toBeDefined();\n      expect(db.shop.findMany).toBeDefined();\n      expect(db.shop.findUnique).toBeDefined();\n      expect(db.shop.create).toBeDefined();\n      expect(db.shop.update).toBeDefined();\n      expect(db.shop.delete).toBeDefined();\n    });\n\n    it('should have connection methods', () => {\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n      expect(db.$transaction).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrismaClient);\n      expect(prisma).toBe(db);\n    });\n  });\n\n  describe('default export', () => {\n    it('should export db as default', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrismaClient);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow user queries', async () => {\n      const mockUser = { id: 1, name: 'Test User', email: 'test@example.com' };\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const result = await db.user.findUnique({ where: { id: 1 } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({ where: { id: 1 } });\n    });\n\n    it('should allow shop queries', async () => {\n      const mockShop = { id: 'shop1', name: 'Test Shop' };\n      mockPrisma.shop.findUnique.mockResolvedValue(mockShop);\n\n      const result = await db.shop.findUnique({ where: { id: 'shop1' } });\n      \n      expect(result).toEqual(mockShop);\n      expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({ where: { id: 'shop1' } });\n    });\n\n    it('should allow transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n\n    it('should handle connection operations', async () => {\n      mockPrisma.$connect.mockResolvedValue(undefined);\n      mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n      await db.$connect();\n      await db.$disconnect();\n      \n      expect(mockPrisma.$connect).toHaveBeenCalled();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should propagate database errors', async () => {\n      const dbError = new Error('Database connection failed');\n      mockPrisma.user.findUnique.mockRejectedValue(dbError);\n\n      await expect(db.user.findUnique({ where: { id: 1 } })).rejects.toThrow('Database connection failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      const transactionError = new Error('Transaction failed');\n      mockPrisma.$transaction.mockRejectedValue(transactionError);\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["jest","mock","mockPrisma","$connect","fn","$disconnect","$transaction","user","findMany","findUnique","create","update","delete","shop","__esModule","default","prisma","mockPrismaClient","describe","beforeEach","clearAllMocks","it","expect","db","toBeDefined","toBe","defaultExport","mockUser","id","name","email","mockResolvedValue","result","where","toEqual","toHaveBeenCalledWith","mockShop","mockResult","success","transactionFn","undefined","toHaveBeenCalled","dbError","Error","mockRejectedValue","rejects","toThrow","transactionError"],"mappings":"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"}