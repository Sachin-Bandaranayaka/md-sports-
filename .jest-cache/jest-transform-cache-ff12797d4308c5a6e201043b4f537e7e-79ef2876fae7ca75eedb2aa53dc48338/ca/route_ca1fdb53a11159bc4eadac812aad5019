26069aaa7b20f64077c217cedddac0d8
"use strict";

/* istanbul ignore next */
function cov_24mgq6y4zr() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/inventory/route.ts";
  var hash = "c7cd18b8c2129c21551daedc6936252c7ec91ac0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/inventory/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "10": {
        start: {
          line: 23,
          column: 14
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 125
        }
      },
      "12": {
        start: {
          line: 26,
          column: 56
        },
        end: {
          line: 26,
          column: 90
        }
      },
      "13": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 39,
          column: 50
        }
      },
      "14": {
        start: {
          line: 28,
          column: 60
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "15": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "16": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "18": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "19": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "20": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 54
        }
      },
      "21": {
        start: {
          line: 53,
          column: 33
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "23": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 54
        }
      },
      "24": {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "25": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "26": {
        start: {
          line: 65,
          column: 18
        },
        end: {
          line: 65,
          column: 35
        }
      },
      "27": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 69,
          column: 6
        }
      },
      "28": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 128,
          column: 2
        }
      },
      "29": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "30": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 74,
          column: 94
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "32": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "33": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 65
        }
      },
      "34": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 65
        }
      },
      "35": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 66
        }
      },
      "36": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "37": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 62
        }
      },
      "38": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "39": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "40": {
        start: {
          line: 101,
          column: 32
        },
        end: {
          line: 101,
          column: 76
        }
      },
      "41": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "42": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 67
        }
      },
      "43": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 72
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 55
        }
      },
      "45": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 71
        }
      },
      "46": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 15,
            column: 37
          }
        },
        loc: {
          start: {
            line: 15,
            column: 47
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "fetchInventoryDistributionData",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 45
          }
        },
        loc: {
          start: {
            line: 24,
            column: 54
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 52
          },
          end: {
            line: 26,
            column: 53
          }
        },
        loc: {
          start: {
            line: 26,
            column: 56
          },
          end: {
            line: 26,
            column: 90
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 56
          },
          end: {
            line: 28,
            column: 57
          }
        },
        loc: {
          start: {
            line: 28,
            column: 60
          },
          end: {
            line: 39,
            column: 10
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 43,
            column: 24
          }
        },
        loc: {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 43
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 28
          }
        },
        loc: {
          start: {
            line: 50,
            column: 35
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 50
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 64,
            column: 42
          }
        },
        line: 64
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 65,
            column: 10
          },
          end: {
            line: 65,
            column: 11
          }
        },
        loc: {
          start: {
            line: 65,
            column: 18
          },
          end: {
            line: 65,
            column: 35
          }
        },
        line: 65
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 71,
            column: 61
          },
          end: {
            line: 71,
            column: 62
          }
        },
        loc: {
          start: {
            line: 71,
            column: 87
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 71
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 31,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 18
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 24
          }
        }, {
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 51,
            column: 49
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 53,
            column: 60
          }
        }, {
          start: {
            line: 53,
            column: 64
          },
          end: {
            line: 56,
            column: 13
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 44
          },
          end: {
            line: 82,
            column: 58
          }
        }, {
          start: {
            line: 82,
            column: 61
          },
          end: {
            line: 82,
            column: 65
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 48
          },
          end: {
            line: 84,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 48
          },
          end: {
            line: 84,
            column: 54
          }
        }, {
          start: {
            line: 84,
            column: 58
          },
          end: {
            line: 84,
            column: 63
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "8": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 46
          },
          end: {
            line: 121,
            column: 59
          }
        }, {
          start: {
            line: 121,
            column: 62
          },
          end: {
            line: 121,
            column: 77
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/inventory/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nexport async function fetchInventoryDistributionData(shopId?: string | null) {\n    // Get all categories\n    const categories = await safeQuery(\n        () => prisma.category.findMany(),\n        [], // Empty array fallback\n        'Failed to fetch categories'\n    );\n\n    // Get inventory items with their products and categories, with optional shop filtering\n    const inventoryItems = await safeQuery(\n        () => prisma.inventoryItem.findMany({\n            where: shopId ? { shopId } : {},\n            include: {\n                product: {\n                    include: {\n                        category: true\n                    }\n                }\n            }\n        }),\n        [], // Empty array fallback\n        'Failed to fetch inventory items'\n    );\n\n    // Create a map of category ID to aggregate data\n    const categoryMap = new Map();\n\n    // Initialize the map with all categories (including those with no inventory)\n    categories.forEach(category => {\n        categoryMap.set(category.id, {\n            name: category.name,\n            value: 0 // Start with zero\n        });\n    });\n\n    // Aggregate items by category\n    inventoryItems.forEach(item => {\n        if (item.product && item.product.category) {\n            const categoryId = item.product.categoryId;\n            const categoryData = categoryMap.get(categoryId) || {\n                name: item.product.category.name,\n                value: 0\n            };\n\n            // Increment the count for this category\n            categoryData.value += item.quantity;\n            categoryMap.set(categoryId, categoryData);\n        }\n    });\n\n    // Convert the map to an array\n    const data = Array.from(categoryMap.values())\n        // Filter out categories with no items\n        .filter(category => category.value > 0)\n        // Sort by count (highest first)\n        .sort((a, b) => b.value - a.value);\n\n    return {\n        success: true,\n        data\n    };\n}\n\n// GET: Fetch inventory distribution by category\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n        \n        const shopId = context.isFiltered ? context.shopId : null;\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:inventory:${shopId || 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('\u2705 Inventory data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('\uD83D\uDD04 Fetching fresh inventory data with shop context:', {\n            shopId: shopId,\n            isFiltered: context.isFiltered\n        });\n        const inventoryResult = await fetchInventoryDistributionData(shopId);\n\n        // Add metadata to response\n        const responseData = {\n            ...inventoryResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 3 minutes (inventory changes moderately)\n        await cacheService.set(cacheKey, responseData, 180);\n        console.log('\uD83D\uDCBE Inventory data cached for 3 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching inventory distribution:', error);\n        // Return empty array on error, consistent with original logic\n        return NextResponse.json({\n            success: true, // Or false, depending on desired error signaling\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        });\n    }\n});"],
      names: ["GET", "fetchInventoryDistributionData", "shopId", "categories", "safeQuery", "prisma", "category", "findMany", "inventoryItems", "inventoryItem", "where", "include", "product", "categoryMap", "Map", "forEach", "set", "id", "name", "value", "item", "categoryId", "categoryData", "get", "quantity", "data", "Array", "from", "values", "filter", "sort", "a", "b", "success", "ShopAccessControl", "withShopAccess", "request", "context", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "isFiltered", "cacheKey", "cachedData", "cacheService", "console", "log", "meta", "shopFiltered", "fromCache", "inventoryResult", "responseData", "Error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c7cd18b8c2129c21551daedc6936252c7ec91ac0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24mgq6y4zr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24mgq6y4zr();
cov_24mgq6y4zr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_24mgq6y4zr().f[0]++;
  cov_24mgq6y4zr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_24mgq6y4zr().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[1]++;
    cov_24mgq6y4zr().s[4]++;
    return GET;
  },
  fetchInventoryDistributionData: function () {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[2]++;
    cov_24mgq6y4zr().s[5]++;
    return fetchInventoryDistributionData;
  }
});
const _server =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[7]++, require("../../../../lib/prisma"));
const _cache =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[8]++, require("../../../../lib/cache"));
const _shopMiddleware =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[9]++, require("../../../../lib/utils/shopMiddleware"));
const _auth =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[10]++, require("../../../../lib/auth"));
async function fetchInventoryDistributionData(shopId) {
  /* istanbul ignore next */
  cov_24mgq6y4zr().f[3]++;
  // Get all categories
  const categories =
  /* istanbul ignore next */
  (cov_24mgq6y4zr().s[11]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[4]++;
    cov_24mgq6y4zr().s[12]++;
    return _prisma.prisma.category.findMany();
  }, [], "Failed to fetch categories"));
  // Get inventory items with their products and categories, with optional shop filtering
  const inventoryItems =
  /* istanbul ignore next */
  (cov_24mgq6y4zr().s[13]++, await (0, _prisma.safeQuery)(() => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[5]++;
    cov_24mgq6y4zr().s[14]++;
    return _prisma.prisma.inventoryItem.findMany({
      where: shopId ?
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[0][0]++, {
        shopId
      }) :
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[0][1]++, {}),
      include: {
        product: {
          include: {
            category: true
          }
        }
      }
    });
  }, [], "Failed to fetch inventory items"));
  // Create a map of category ID to aggregate data
  const categoryMap =
  /* istanbul ignore next */
  (cov_24mgq6y4zr().s[15]++, new Map());
  // Initialize the map with all categories (including those with no inventory)
  /* istanbul ignore next */
  cov_24mgq6y4zr().s[16]++;
  categories.forEach(category => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[6]++;
    cov_24mgq6y4zr().s[17]++;
    categoryMap.set(category.id, {
      name: category.name,
      value: 0 // Start with zero
    });
  });
  // Aggregate items by category
  /* istanbul ignore next */
  cov_24mgq6y4zr().s[18]++;
  inventoryItems.forEach(item => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[7]++;
    cov_24mgq6y4zr().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[2][0]++, item.product) &&
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[2][1]++, item.product.category)) {
      /* istanbul ignore next */
      cov_24mgq6y4zr().b[1][0]++;
      const categoryId =
      /* istanbul ignore next */
      (cov_24mgq6y4zr().s[20]++, item.product.categoryId);
      const categoryData =
      /* istanbul ignore next */
      (cov_24mgq6y4zr().s[21]++,
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[3][0]++, categoryMap.get(categoryId)) ||
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[3][1]++, {
        name: item.product.category.name,
        value: 0
      }));
      // Increment the count for this category
      /* istanbul ignore next */
      cov_24mgq6y4zr().s[22]++;
      categoryData.value += item.quantity;
      /* istanbul ignore next */
      cov_24mgq6y4zr().s[23]++;
      categoryMap.set(categoryId, categoryData);
    } else
    /* istanbul ignore next */
    {
      cov_24mgq6y4zr().b[1][1]++;
    }
  });
  // Convert the map to an array
  const data =
  /* istanbul ignore next */
  (cov_24mgq6y4zr().s[24]++, Array.from(categoryMap.values()) // Filter out categories with no items
  .filter(category => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[8]++;
    cov_24mgq6y4zr().s[25]++;
    return category.value > 0;
  }) // Sort by count (highest first)
  .sort((a, b) => {
    /* istanbul ignore next */
    cov_24mgq6y4zr().f[9]++;
    cov_24mgq6y4zr().s[26]++;
    return b.value - a.value;
  }));
  /* istanbul ignore next */
  cov_24mgq6y4zr().s[27]++;
  return {
    success: true,
    data
  };
}
const GET =
/* istanbul ignore next */
(cov_24mgq6y4zr().s[28]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_24mgq6y4zr().f[10]++;
  cov_24mgq6y4zr().s[29]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[30]++, await (0, _auth.validateTokenPermission)(request, "dashboard:view"));
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[31]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_24mgq6y4zr().b[4][0]++;
      cov_24mgq6y4zr().s[32]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_24mgq6y4zr().b[4][1]++;
    }
    const shopId =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[33]++, context.isFiltered ?
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[5][0]++, context.shopId) :
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[5][1]++, null));
    // Check cache first with shop context
    const cacheKey =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[34]++, `dashboard:inventory:${
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[6][0]++, shopId) ||
    /* istanbul ignore next */
    (cov_24mgq6y4zr().b[6][1]++, "all")}`);
    const cachedData =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[35]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[36]++;
    if (cachedData) {
      /* istanbul ignore next */
      cov_24mgq6y4zr().b[7][0]++;
      cov_24mgq6y4zr().s[37]++;
      console.log("✅ Inventory data served from cache");
      /* istanbul ignore next */
      cov_24mgq6y4zr().s[38]++;
      return _server.NextResponse.json({
        ...cachedData,
        meta: {
          shopFiltered: context.isFiltered,
          shopId: context.shopId,
          fromCache: true
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_24mgq6y4zr().b[7][1]++;
    }
    cov_24mgq6y4zr().s[39]++;
    console.log("\uD83D\uDD04 Fetching fresh inventory data with shop context:", {
      shopId: shopId,
      isFiltered: context.isFiltered
    });
    const inventoryResult =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[40]++, await fetchInventoryDistributionData(shopId));
    // Add metadata to response
    const responseData =
    /* istanbul ignore next */
    (cov_24mgq6y4zr().s[41]++, {
      ...inventoryResult,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        fromCache: false
      }
    });
    // Cache for 3 minutes (inventory changes moderately)
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[42]++;
    await _cache.cacheService.set(cacheKey, responseData, 180);
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[43]++;
    console.log("\uD83D\uDCBE Inventory data cached for 3 minutes");
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[44]++;
    return _server.NextResponse.json(responseData);
  } catch (error) {
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[45]++;
    console.error("Error fetching inventory distribution:", error);
    // Return empty array on error, consistent with original logic
    /* istanbul ignore next */
    cov_24mgq6y4zr().s[46]++;
    return _server.NextResponse.json({
      success: true,
      data: [],
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_24mgq6y4zr().b[8][1]++, "Unknown error"),
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId
      }
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,