{"version":3,"names":["GET","cov_24mgq6y4zr","f","s","fetchInventoryDistributionData","shopId","categories","_prisma","safeQuery","prisma","category","findMany","inventoryItems","inventoryItem","where","b","include","product","categoryMap","Map","forEach","set","id","name","value","item","categoryId","categoryData","get","quantity","data","Array","from","values","filter","sort","a","success","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","isFiltered","cacheKey","cachedData","_cache","cacheService","console","log","meta","shopFiltered","fromCache","inventoryResult","responseData","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/inventory/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\nexport async function fetchInventoryDistributionData(shopId?: string | null) {\n    // Get all categories\n    const categories = await safeQuery(\n        () => prisma.category.findMany(),\n        [], // Empty array fallback\n        'Failed to fetch categories'\n    );\n\n    // Get inventory items with their products and categories, with optional shop filtering\n    const inventoryItems = await safeQuery(\n        () => prisma.inventoryItem.findMany({\n            where: shopId ? { shopId } : {},\n            include: {\n                product: {\n                    include: {\n                        category: true\n                    }\n                }\n            }\n        }),\n        [], // Empty array fallback\n        'Failed to fetch inventory items'\n    );\n\n    // Create a map of category ID to aggregate data\n    const categoryMap = new Map();\n\n    // Initialize the map with all categories (including those with no inventory)\n    categories.forEach(category => {\n        categoryMap.set(category.id, {\n            name: category.name,\n            value: 0 // Start with zero\n        });\n    });\n\n    // Aggregate items by category\n    inventoryItems.forEach(item => {\n        if (item.product && item.product.category) {\n            const categoryId = item.product.categoryId;\n            const categoryData = categoryMap.get(categoryId) || {\n                name: item.product.category.name,\n                value: 0\n            };\n\n            // Increment the count for this category\n            categoryData.value += item.quantity;\n            categoryMap.set(categoryId, categoryData);\n        }\n    });\n\n    // Convert the map to an array\n    const data = Array.from(categoryMap.values())\n        // Filter out categories with no items\n        .filter(category => category.value > 0)\n        // Sort by count (highest first)\n        .sort((a, b) => b.value - a.value);\n\n    return {\n        success: true,\n        data\n    };\n}\n\n// GET: Fetch inventory distribution by category\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'dashboard:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n        \n        const shopId = context.isFiltered ? context.shopId : null;\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:inventory:${shopId || 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Inventory data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh inventory data with shop context:', {\n            shopId: shopId,\n            isFiltered: context.isFiltered\n        });\n        const inventoryResult = await fetchInventoryDistributionData(shopId);\n\n        // Add metadata to response\n        const responseData = {\n            ...inventoryResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 3 minutes (inventory changes moderately)\n        await cacheService.set(cacheKey, responseData, 180);\n        console.log('ðŸ’¾ Inventory data cached for 3 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching inventory distribution:', error);\n        // Return empty array on error, consistent with original logic\n        return NextResponse.json({\n            success: true, // Or false, depending on desired error signaling\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        });\n    }\n});"],"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","ignoreList":[]}