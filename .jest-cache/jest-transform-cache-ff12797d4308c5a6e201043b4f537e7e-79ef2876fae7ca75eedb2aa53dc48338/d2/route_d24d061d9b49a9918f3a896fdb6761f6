28f98b7f6a6ad386ae446ae126e60242
"use strict";

/* istanbul ignore next */
function cov_vn4mgc0gq() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts";
  var hash = "3c7254966a1a7149f98310b3bb3623cedfb82023";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 60
        }
      },
      "9": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "11": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 88
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "15": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "16": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "17": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 54
        }
      },
      "18": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "19": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "20": {
        start: {
          line: 83,
          column: 25
        },
        end: {
          line: 83,
          column: 41
        }
      },
      "21": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "22": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "23": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "24": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "25": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "26": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "27": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "28": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "29": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "30": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "31": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "32": {
        start: {
          line: 127,
          column: 23
        },
        end: {
          line: 127,
          column: 36
        }
      },
      "33": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 133,
          column: 10
        }
      },
      "34": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "35": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "36": {
        start: {
          line: 143,
          column: 31
        },
        end: {
          line: 143,
          column: 82
        }
      },
      "37": {
        start: {
          line: 145,
          column: 21
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "38": {
        start: {
          line: 146,
          column: 23
        },
        end: {
          line: 146,
          column: 27
        }
      },
      "39": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "40": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "41": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "42": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 38
        }
      },
      "43": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 35
        }
      },
      "44": {
        start: {
          line: 158,
          column: 15
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "45": {
        start: {
          line: 159,
          column: 34
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "46": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "47": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 42
        }
      },
      "48": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 40
        }
      },
      "49": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "50": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 68
        }
      },
      "51": {
        start: {
          line: 182,
          column: 21
        },
        end: {
          line: 198,
          column: 10
        }
      },
      "52": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "53": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "54": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 76,
            column: 15
          },
          end: {
            line: 76,
            column: 19
          }
        },
        loc: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 76
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 38
          }
        }, {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 14
          }
        }, {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 32
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 30
          }
        }, {
          start: {
            line: 102,
            column: 34
          },
          end: {
            line: 102,
            column: 62
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 26
          }
        }, {
          start: {
            line: 110,
            column: 30
          },
          end: {
            line: 110,
            column: 50
          }
        }, {
          start: {
            line: 110,
            column: 54
          },
          end: {
            line: 110,
            column: 83
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 33
          }
        }, {
          start: {
            line: 118,
            column: 37
          },
          end: {
            line: 118,
            column: 70
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 168,
            column: 9
          }
        }],
        line: 148
      },
      "13": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "14": {
        loc: {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "15": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 25
          },
          end: {
            line: 177,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 25
          },
          end: {
            line: 177,
            column: 45
          }
        }, {
          start: {
            line: 177,
            column: 49
          },
          end: {
            line: 177,
            column: 51
          }
        }],
        line: 177
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport bcrypt from 'bcryptjs';\n\n// GET: List all users\nexport async function GET(req: NextRequest) {\n    // Check for 'user:manage' permission\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            users\n        });\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch users' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new user\nexport async function POST(req: NextRequest) {\n    // Temporarily bypass permission check for adding users\n    // const permissionError = await requirePermission('user:manage')(req);\n    // if (permissionError) {\n    //     return permissionError;\n    // }\n\n    try {\n        const userData = await req.json();\n\n        console.log('Received user data:', userData); // Log the incoming data\n\n        // Validation examples\n        if (!userData.name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.password || userData.password.length < 8) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 8 characters' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.shop || userData.shop === '' || userData.shop === 'undefined') {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.permissions || userData.permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Validate shop ID (keep as string since it's a cuid)\n        const shopId = userData.shop;\n        \n        // Verify the shop exists in the database\n        const shopExists = await prisma.shop.findUnique({\n            where: { id: shopId }\n        });\n        \n        if (!shopExists) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid shop ID provided - shop does not exist' },\n                { status: 400 }\n            );\n        }\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(userData.password, 12);\n\n        // Determine role based on permissions\n        let roleId = null;\n        let roleName = null;\n        \n        // Check if user has admin permissions\n        if (userData.permissions.includes('admin:all')) {\n            const adminRole = await prisma.role.findUnique({\n                where: { name: 'Admin' }\n            });\n            if (adminRole) {\n                roleId = adminRole.id;\n                roleName = 'Admin';\n            }\n        }\n        // Check if user has shop staff permissions\n        else if (userData.permissions.includes('shop:assigned_only')) {\n            const shopStaffRole = await prisma.role.findUnique({\n                where: { name: 'Shop Staff' }\n            });\n            if (shopStaffRole) {\n                roleId = shopStaffRole.id;\n                roleName = 'Shop Staff';\n            }\n        }\n\n        // Prepare user data\n        const userData_final = {\n            name: userData.name,\n            email: userData.email,\n            password: hashedPassword,\n            roleId: roleId,\n            roleName: roleName,\n            shopId: shopId,\n            permissions: userData.permissions || [],\n            isActive: true\n        };\n\n        console.log('Final user data to be saved:', userData_final); // Log the final data\n\n        // Create the user\n        const user = await prisma.user.create({\n            data: userData_final,\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                shopId: true,\n                permissions: true,\n                createdAt: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        // Return success response\n        return NextResponse.json({\n            success: true,\n            message: 'User created successfully',\n            data: user\n        });\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create user' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "req", "permissionError", "requirePermission", "users", "prisma", "user", "findMany", "select", "id", "name", "email", "phone", "isActive", "roleId", "shopId", "roleName", "permissions", "createdAt", "updatedAt", "role", "shop", "NextResponse", "json", "success", "error", "console", "message", "status", "userData", "log", "password", "length", "shopExists", "findUnique", "where", "hashedPassword", "bcrypt", "hash", "includes", "adminRole", "shopStaffRole", "userData_final", "create", "data"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c7254966a1a7149f98310b3bb3623cedfb82023"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vn4mgc0gq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vn4mgc0gq();
cov_vn4mgc0gq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[0]++;
  cov_vn4mgc0gq().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_vn4mgc0gq().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_vn4mgc0gq().f[1]++;
    cov_vn4mgc0gq().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_vn4mgc0gq().f[2]++;
    cov_vn4mgc0gq().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_vn4mgc0gq().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_vn4mgc0gq().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _middleware =
/* istanbul ignore next */
(cov_vn4mgc0gq().s[8]++, require("../../../lib/utils/middleware"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_vn4mgc0gq().s[9]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[3]++;
  cov_vn4mgc0gq().s[10]++;
  return /* istanbul ignore next */(cov_vn4mgc0gq().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_vn4mgc0gq().b[0][1]++, {
    default: obj
  });
}
async function GET(req) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[4]++;
  // Check for 'user:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_vn4mgc0gq().s[11]++, await (0, _middleware.requirePermission)("user:manage")(req));
  /* istanbul ignore next */
  cov_vn4mgc0gq().s[12]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().b[2][0]++;
    cov_vn4mgc0gq().s[13]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_vn4mgc0gq().b[2][1]++;
  }
  cov_vn4mgc0gq().s[14]++;
  try {
    const users =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[15]++, await _prisma.default.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        isActive: true,
        roleId: true,
        shopId: true,
        roleName: true,
        permissions: true,
        createdAt: true,
        updatedAt: true,
        role: {
          select: {
            id: true,
            name: true
          }
        },
        shop: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[16]++;
    return _server.NextResponse.json({
      success: true,
      users
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[17]++;
    console.error("Error fetching users:", error);
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[18]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch users"
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_vn4mgc0gq().f[5]++;
  cov_vn4mgc0gq().s[19]++;
  // Temporarily bypass permission check for adding users
  // const permissionError = await requirePermission('user:manage')(req);
  // if (permissionError) {
  //     return permissionError;
  // }
  try {
    const userData =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[20]++, await req.json());
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[21]++;
    console.log("Received user data:", userData); // Log the incoming data
    // Validation examples
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[22]++;
    if (!userData.name) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[3][0]++;
      cov_vn4mgc0gq().s[23]++;
      return _server.NextResponse.json({
        success: false,
        message: "Name is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[3][1]++;
    }
    cov_vn4mgc0gq().s[24]++;
    if (!userData.email) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[4][0]++;
      cov_vn4mgc0gq().s[25]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[4][1]++;
    }
    cov_vn4mgc0gq().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[6][0]++, !userData.password) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[6][1]++, userData.password.length < 8)) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[5][0]++;
      cov_vn4mgc0gq().s[27]++;
      return _server.NextResponse.json({
        success: false,
        message: "Password must be at least 8 characters"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[5][1]++;
    }
    cov_vn4mgc0gq().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][0]++, !userData.shop) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][1]++, userData.shop === "") ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[8][2]++, userData.shop === "undefined")) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[7][0]++;
      cov_vn4mgc0gq().s[29]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop assignment is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[7][1]++;
    }
    cov_vn4mgc0gq().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[10][0]++, !userData.permissions) ||
    /* istanbul ignore next */
    (cov_vn4mgc0gq().b[10][1]++, userData.permissions.length === 0)) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[9][0]++;
      cov_vn4mgc0gq().s[31]++;
      return _server.NextResponse.json({
        success: false,
        message: "At least one permission is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[9][1]++;
    }
    // Validate shop ID (keep as string since it's a cuid)
    const shopId =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[32]++, userData.shop);
    // Verify the shop exists in the database
    const shopExists =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[33]++, await _prisma.default.shop.findUnique({
      where: {
        id: shopId
      }
    }));
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[34]++;
    if (!shopExists) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[11][0]++;
      cov_vn4mgc0gq().s[35]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid shop ID provided - shop does not exist"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_vn4mgc0gq().b[11][1]++;
    }
    // Hash the password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[36]++, await _bcryptjs.default.hash(userData.password, 12));
    // Determine role based on permissions
    let roleId =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[37]++, null);
    let roleName =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[38]++, null);
    // Check if user has admin permissions
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[39]++;
    if (userData.permissions.includes("admin:all")) {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[12][0]++;
      const adminRole =
      /* istanbul ignore next */
      (cov_vn4mgc0gq().s[40]++, await _prisma.default.role.findUnique({
        where: {
          name: "Admin"
        }
      }));
      /* istanbul ignore next */
      cov_vn4mgc0gq().s[41]++;
      if (adminRole) {
        /* istanbul ignore next */
        cov_vn4mgc0gq().b[13][0]++;
        cov_vn4mgc0gq().s[42]++;
        roleId = adminRole.id;
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[43]++;
        roleName = "Admin";
      } else
      /* istanbul ignore next */
      {
        cov_vn4mgc0gq().b[13][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_vn4mgc0gq().b[12][1]++;
      cov_vn4mgc0gq().s[44]++;
      if (userData.permissions.includes("shop:assigned_only")) {
        /* istanbul ignore next */
        cov_vn4mgc0gq().b[14][0]++;
        const shopStaffRole =
        /* istanbul ignore next */
        (cov_vn4mgc0gq().s[45]++, await _prisma.default.role.findUnique({
          where: {
            name: "Shop Staff"
          }
        }));
        /* istanbul ignore next */
        cov_vn4mgc0gq().s[46]++;
        if (shopStaffRole) {
          /* istanbul ignore next */
          cov_vn4mgc0gq().b[15][0]++;
          cov_vn4mgc0gq().s[47]++;
          roleId = shopStaffRole.id;
          /* istanbul ignore next */
          cov_vn4mgc0gq().s[48]++;
          roleName = "Shop Staff";
        } else
        /* istanbul ignore next */
        {
          cov_vn4mgc0gq().b[15][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_vn4mgc0gq().b[14][1]++;
      }
    }
    // Prepare user data
    const userData_final =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[49]++, {
      name: userData.name,
      email: userData.email,
      password: hashedPassword,
      roleId: roleId,
      roleName: roleName,
      shopId: shopId,
      permissions:
      /* istanbul ignore next */
      (cov_vn4mgc0gq().b[16][0]++, userData.permissions) ||
      /* istanbul ignore next */
      (cov_vn4mgc0gq().b[16][1]++, []),
      isActive: true
    });
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[50]++;
    console.log("Final user data to be saved:", userData_final); // Log the final data
    // Create the user
    const user =
    /* istanbul ignore next */
    (cov_vn4mgc0gq().s[51]++, await _prisma.default.user.create({
      data: userData_final,
      select: {
        id: true,
        name: true,
        email: true,
        shopId: true,
        permissions: true,
        createdAt: true,
        shop: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    // Return success response
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[52]++;
    return _server.NextResponse.json({
      success: true,
      message: "User created successfully",
      data: user
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[53]++;
    console.error("Error creating user:", error);
    /* istanbul ignore next */
    cov_vn4mgc0gq().s[54]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to create user"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,