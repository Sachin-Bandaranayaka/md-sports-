{"version":3,"names":["authMiddleware","cov_wwhylcflf","f","s","checkApiPermission","createRouteMiddleware","default","_default","ROUTE_PERMISSIONS","_permissions","PERMISSIONS","SALES_VIEW","INVENTORY_VIEW","CATEGORIES_VIEW","BRANDS_VIEW","TRANSFERS_VIEW","QUOTATIONS_VIEW","CUSTOMERS_VIEW","SUPPLIERS_VIEW","PURCHASES_VIEW","REPORTS_VIEW","ACCOUNTING_VIEW","SETTINGS_VIEW","USERS_VIEW","SHOP_VIEW","ADMIN_ROUTES","PUBLIC_ROUTES","getUserFromRequest","request","authHeader","headers","get","sessionCookie","cookies","error","console","isPublicRoute","pathname","some","route","startsWith","isAdminRoute","getRoutePermission","b","nextUrl","includes","_server","NextResponse","next","user","loginUrl","URL","url","searchParams","set","redirect","_PermissionService","permissionService","isAdmin","requiredPermission","hasAccess","Array","isArray","hasAnyPermission","hasPermission","response","id","JSON","stringify","permissions","authorized","join"],"sources":["/Users/sachin/Documents/md-sports-/src/middleware/auth.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PERMISSIONS, Permission } from '@/lib/constants/permissions';\nimport { permissionService } from '@/lib/services/PermissionService';\nimport { AuthenticatedUser } from '@/types/auth';\n\n// Route permission mapping\nconst ROUTE_PERMISSIONS: Record<string, Permission | Permission[]> = {\n  '/dashboard': PERMISSIONS.SALES_VIEW, // Dashboard requires at least sales view\n  '/inventory': PERMISSIONS.INVENTORY_VIEW,\n  '/inventory/products': PERMISSIONS.INVENTORY_VIEW,\n  '/inventory/categories': PERMISSIONS.CATEGORIES_VIEW,\n  '/inventory/brands': PERMISSIONS.BRANDS_VIEW,\n  '/inventory/transfers': PERMISSIONS.TRANSFERS_VIEW,\n  '/sales': PERMISSIONS.SALES_VIEW,\n  '/sales/invoices': PERMISSIONS.SALES_VIEW,\n  '/sales/quotations': PERMISSIONS.QUOTATIONS_VIEW,\n  '/customers': PERMISSIONS.CUSTOMERS_VIEW,\n  '/suppliers': PERMISSIONS.SUPPLIERS_VIEW,\n  '/purchases': PERMISSIONS.PURCHASES_VIEW,\n  '/reports': PERMISSIONS.REPORTS_VIEW,\n  '/accounting': PERMISSIONS.ACCOUNTING_VIEW,\n  '/settings': PERMISSIONS.SETTINGS_VIEW,\n  '/users': PERMISSIONS.USERS_VIEW,\n  '/shops': PERMISSIONS.SHOP_VIEW,\n};\n\n// Admin-only routes\nconst ADMIN_ROUTES = [\n  '/users/create',\n  '/users/edit',\n  '/settings/system',\n  '/settings/permissions',\n];\n\n// Public routes that don't require authentication\nconst PUBLIC_ROUTES = [\n  '/login',\n  '/register',\n  '/forgot-password',\n  '/reset-password',\n  '/api/auth',\n];\n\n/**\n * Extract user information from request headers or cookies\n * This would typically come from your authentication system\n */\nfunction getUserFromRequest(request: NextRequest): AuthenticatedUser | null {\n  try {\n    // This is a placeholder - replace with your actual auth logic\n    const authHeader = request.headers.get('authorization');\n    const sessionCookie = request.cookies.get('session');\n    \n    // You would decode JWT token or validate session here\n    // For now, returning null to indicate no user found\n    return null;\n  } catch (error) {\n    console.error('Error extracting user from request:', error);\n    return null;\n  }\n}\n\n/**\n * Check if a route is public (doesn't require authentication)\n */\nfunction isPublicRoute(pathname: string): boolean {\n  return PUBLIC_ROUTES.some(route => pathname.startsWith(route));\n}\n\n/**\n * Check if a route requires admin permissions\n */\nfunction isAdminRoute(pathname: string): boolean {\n  return ADMIN_ROUTES.some(route => pathname.startsWith(route));\n}\n\n/**\n * Get required permission for a route\n */\nfunction getRoutePermission(pathname: string): Permission | Permission[] | null {\n  // Check for exact match first\n  if (ROUTE_PERMISSIONS[pathname]) {\n    return ROUTE_PERMISSIONS[pathname];\n  }\n  \n  // Check for partial matches (e.g., /inventory/products/123)\n  for (const route in ROUTE_PERMISSIONS) {\n    if (pathname.startsWith(route + '/')) {\n      return ROUTE_PERMISSIONS[route];\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Main authentication middleware\n */\nexport function authMiddleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // Skip middleware for API routes, static files, and public routes\n  if (\n    pathname.startsWith('/_next') ||\n    pathname.startsWith('/api') ||\n    pathname.includes('.') ||\n    isPublicRoute(pathname)\n  ) {\n    return NextResponse.next();\n  }\n  \n  // Get user from request\n  const user = getUserFromRequest(request);\n  \n  // Redirect to login if not authenticated\n  if (!user) {\n    const loginUrl = new URL('/login', request.url);\n    loginUrl.searchParams.set('redirect', pathname);\n    return NextResponse.redirect(loginUrl);\n  }\n  \n  // Check admin routes\n  if (isAdminRoute(pathname)) {\n    if (!permissionService.isAdmin(user)) {\n      return NextResponse.redirect(new URL('/unauthorized', request.url));\n    }\n    return NextResponse.next();\n  }\n  \n  // Check route permissions\n  const requiredPermission = getRoutePermission(pathname);\n  if (requiredPermission) {\n    const hasAccess = Array.isArray(requiredPermission)\n      ? permissionService.hasAnyPermission(user, requiredPermission)\n      : permissionService.hasPermission(user, requiredPermission);\n    \n    if (!hasAccess) {\n      return NextResponse.redirect(new URL('/unauthorized', request.url));\n    }\n  }\n  \n  // Add user info to headers for downstream components\n  const response = NextResponse.next();\n  response.headers.set('x-user-id', user.id);\n  response.headers.set('x-user-permissions', JSON.stringify(user.permissions));\n  \n  return response;\n}\n\n/**\n * Higher-order function to create route-specific middleware\n */\nexport function createRouteMiddleware(requiredPermission: Permission | Permission[]) {\n  return (request: NextRequest) => {\n    const user = getUserFromRequest(request);\n    \n    if (!user) {\n      return NextResponse.redirect(new URL('/login', request.url));\n    }\n    \n    const hasAccess = Array.isArray(requiredPermission)\n      ? permissionService.hasAnyPermission(user, requiredPermission)\n      : permissionService.hasPermission(user, requiredPermission);\n    \n    if (!hasAccess) {\n      return NextResponse.redirect(new URL('/unauthorized', request.url));\n    }\n    \n    return NextResponse.next();\n  };\n}\n\n/**\n * Utility function to check permissions in API routes\n */\nexport function checkApiPermission(\n  request: NextRequest,\n  requiredPermission: Permission | Permission[]\n): { authorized: boolean; user: AuthenticatedUser | null; error?: string } {\n  const user = getUserFromRequest(request);\n  \n  if (!user) {\n    return { authorized: false, user: null, error: 'Authentication required' };\n  }\n  \n  const hasAccess = Array.isArray(requiredPermission)\n    ? permissionService.hasAnyPermission(user, requiredPermission)\n    : permissionService.hasPermission(user, requiredPermission);\n  \n  if (!hasAccess) {\n    return { \n      authorized: false, \n      user, \n      error: `Insufficient permissions. Required: ${Array.isArray(requiredPermission) ? requiredPermission.join(' OR ') : requiredPermission}` \n    };\n  }\n  \n  return { authorized: true, user };\n}\n\nexport default authMiddleware;"],"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","ignoreList":[]}