{"version":3,"names":["GET","cov_8ko9wrib9","f","s","PATCH","dynamic","maxDuration","runtime","CACHE_CONFIG","invoices","ttl","staleWhileRevalidate","statistics","customers","createCursor","id","createdAt","Buffer","from","getTime","toString","parseCursor","cursor","decoded","timestamp","split","Date","parseInt","buildWhereClause","filters","shopId","where","b","status","paymentMethod","customerId","search","OR","invoiceNumber","contains","mode","customer","name","total","equals","parseFloat","undefined","filter","condition","Object","keys","length","timePeriod","now","startDate","getFullYear","getMonth","getDate","quarterStart","Math","floor","gte","buildOrderBy","sortBy","dueDate","getStatistics","cacheKey","_cache","cache","getOrSet","whereClause","result","_prisma","prisma","$queryRaw","stats","totalOutstanding","total_outstanding","paidThisMonth","paid_this_month","overdueCount","overdue_count","totalCreditSales","total_credit_sales","totalNonCreditSales","total_non_credit_sales","error","console","warn","creditSales","nonCreditSales","Promise","all","invoice","aggregate","not","_sum","count","bulkUpdateInvoices","invoiceIds","updates","updateMany","in","data","request","startTime","_performance","performance","token","_auth","extractToken","_server","NextResponse","json","payload","verifyToken","sub","searchParams","URL","url","get","limit","min","includeStatistics","user","findUnique","select","role","userShopId","effectiveShopId","JSON","stringify","cachedResult","cached","responseTime","cursorData","lt","orderBy","totalCount","findMany","take","totalProfit","profitMargin","updatedAt","shop","payments","receipt","isNot","amount","_count","items","resolve","hasMore","resultInvoices","slice","nextCursor","formattedInvoices","map","totalPaid","reduce","sum","payment","dueAmount","max","customerName","shopName","itemCount","date","toISOString","set","details","process","env","NODE_ENV","message","body","operation","Array","isArray","userShops","userShop","userId","shopIds","us","deleteMany","invalidatePattern","success","affected"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/optimized/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { cache } from '@/lib/cache';\nimport { cache as vercelCache } from '@/lib/cache-vercel';\nimport { performance } from '@/lib/performance';\n\n// Vercel serverless optimizations\nexport const runtime = 'nodejs';\nexport const dynamic = 'force-dynamic';\nexport const maxDuration = 10;\n\n// Enhanced caching configuration\nconst CACHE_CONFIG = {\n    invoices: {\n        ttl: 60, // 1 minute for invoice list\n        staleWhileRevalidate: 300 // 5 minutes\n    },\n    statistics: {\n        ttl: 300, // 5 minutes for statistics\n        staleWhileRevalidate: 900 // 15 minutes\n    },\n    customers: {\n        ttl: 600, // 10 minutes for customers\n        staleWhileRevalidate: 1800 // 30 minutes\n    }\n};\n\n// Cursor-based pagination helper\nfunction createCursor(id: string | number, createdAt: Date): string {\n    return Buffer.from(`${id}:${createdAt.getTime()}`).toString('base64');\n}\n\nfunction parseCursor(cursor: string): { id: string; createdAt: Date } | null {\n    try {\n        const decoded = Buffer.from(cursor, 'base64').toString();\n        const [id, timestamp] = decoded.split(':');\n        return {\n            id,\n            createdAt: new Date(parseInt(timestamp))\n        };\n    } catch {\n        return null;\n    }\n}\n\n// Optimized query builder\nfunction buildWhereClause(filters: any, shopId?: string) {\n    const where: any = {};\n\n    if (shopId) {\n        where.shopId = shopId;\n    }\n\n    if (filters.status) {\n        where.status = filters.status;\n    }\n\n    if (filters.paymentMethod) {\n        where.paymentMethod = filters.paymentMethod;\n    }\n\n    if (filters.customerId) {\n        where.customerId = parseInt(filters.customerId);\n    }\n\n    if (filters.search) {\n        where.OR = [\n            { invoiceNumber: { contains: filters.search, mode: 'insensitive' } },\n            { customer: { name: { contains: filters.search, mode: 'insensitive' } } },\n            { total: { equals: parseFloat(filters.search) || undefined } }\n        ].filter(condition => {\n            // Remove invalid conditions\n            if (condition.total?.equals === undefined) {\n                delete condition.total;\n            }\n            return Object.keys(condition).length > 0;\n        });\n    }\n\n    // Time period filtering\n    if (filters.timePeriod && filters.timePeriod !== 'all') {\n        const now = new Date();\n        let startDate: Date;\n\n        switch (filters.timePeriod) {\n            case 'today':\n                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                break;\n            case 'week':\n                startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n            case 'month':\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                break;\n            case 'quarter':\n                const quarterStart = Math.floor(now.getMonth() / 3) * 3;\n                startDate = new Date(now.getFullYear(), quarterStart, 1);\n                break;\n            case 'year':\n                startDate = new Date(now.getFullYear(), 0, 1);\n                break;\n            default:\n                startDate = new Date(0);\n        }\n\n        where.createdAt = { gte: startDate };\n    }\n\n    return where;\n}\n\nfunction buildOrderBy(sortBy: string) {\n    switch (sortBy) {\n        case 'oldest':\n            return { createdAt: 'asc' };\n        case 'amount-high':\n            return { total: 'desc' };\n        case 'amount-low':\n            return { total: 'asc' };\n        case 'customer':\n            return { customer: { name: 'asc' } };\n        case 'due-date':\n            return { dueDate: 'asc' };\n        case 'due-date-desc':\n            return { dueDate: 'desc' };\n        case 'newest':\n        default:\n            return { createdAt: 'desc' };\n    }\n}\n\n// Optimized statistics query with materialized view fallback\nasync function getStatistics(shopId?: string) {\n    const cacheKey = `invoice-statistics:${shopId || 'all'}`;\n\n    return cache.getOrSet(\n        cacheKey,\n        async () => {\n            const whereClause = shopId ? { shopId } : {};\n\n            // Try to use materialized view first (if exists)\n            try {\n                const result = await prisma.$queryRaw`\n                    SELECT \n                        COALESCE(SUM(CASE WHEN LOWER(status) != 'paid' THEN total ELSE 0 END), 0) as total_outstanding,\n                        COALESCE(SUM(CASE WHEN LOWER(status) = 'paid' AND DATE_TRUNC('month', \"createdAt\") = DATE_TRUNC('month', CURRENT_DATE) THEN total ELSE 0 END), 0) as paid_this_month,\n                        COUNT(CASE WHEN status = 'overdue' THEN 1 END) as overdue_count,\n                        COALESCE(SUM(CASE WHEN \"paymentMethod\" = 'credit' THEN total ELSE 0 END), 0) as total_credit_sales,\n                        COALESCE(SUM(CASE WHEN \"paymentMethod\" != 'credit' THEN total ELSE 0 END), 0) as total_non_credit_sales\n                    FROM \"Invoice\"\n                    ${shopId ? `WHERE \"shopId\" = '${shopId}'` : ''}\n                `;\n\n                const stats = result[0] as any;\n                return {\n                    totalOutstanding: parseFloat(stats.total_outstanding) || 0,\n                    paidThisMonth: parseFloat(stats.paid_this_month) || 0,\n                    overdueCount: parseInt(stats.overdue_count) || 0,\n                    totalCreditSales: parseFloat(stats.total_credit_sales) || 0,\n                    totalNonCreditSales: parseFloat(stats.total_non_credit_sales) || 0\n                };\n            } catch (error) {\n                console.warn('Materialized view not available, falling back to aggregation queries');\n\n                // Fallback to individual queries\n                const [totalOutstanding, paidThisMonth, overdueCount, creditSales, nonCreditSales] = await Promise.all([\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, status: { not: 'paid' } },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: {\n                            ...whereClause,\n                            status: 'paid',\n                            createdAt: {\n                                gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n                            }\n                        },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.count({\n                        where: { ...whereClause, status: 'overdue' }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, paymentMethod: 'credit' },\n                        _sum: { total: true }\n                    }),\n                    prisma.invoice.aggregate({\n                        where: { ...whereClause, paymentMethod: { not: 'credit' } },\n                        _sum: { total: true }\n                    })\n                ]);\n\n                return {\n                    totalOutstanding: totalOutstanding._sum.total || 0,\n                    paidThisMonth: paidThisMonth._sum.total || 0,\n                    overdueCount,\n                    totalCreditSales: creditSales._sum.total || 0,\n                    totalNonCreditSales: nonCreditSales._sum.total || 0\n                };\n            }\n        },\n        CACHE_CONFIG.statistics.ttl\n    );\n}\n\n// Bulk operations helper\nasync function bulkUpdateInvoices(invoiceIds: string[], updates: any) {\n    return prisma.invoice.updateMany({\n        where: {\n            id: { in: invoiceIds }\n        },\n        data: updates\n    });\n}\n\nexport async function GET(request: NextRequest) {\n    const startTime = performance.now();\n\n    try {\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const filters = {\n            cursor: searchParams.get('cursor'),\n            limit: Math.min(parseInt(searchParams.get('limit') || '20'), 100),\n            status: searchParams.get('status'),\n            paymentMethod: searchParams.get('paymentMethod'),\n            customerId: searchParams.get('customerId'),\n            search: searchParams.get('search'),\n            timePeriod: searchParams.get('timePeriod') || 'all',\n            sortBy: searchParams.get('sortBy') || 'newest',\n            includeStatistics: searchParams.get('includeStatistics') === 'true'\n        };\n\n        // Get user's shop access\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { \n                shopId: true, \n                role: {\n                    select: { name: true }\n                }\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        const userShopId = user.shopId;\n        const shopId = searchParams.get('shopId');\n\n        // Determine effective shop ID for filtering\n        let effectiveShopId;\n        if (user.role?.name === 'Shop Staff' && userShopId) {\n            if (shopId && shopId !== userShopId) {\n                return NextResponse.json({ error: 'Access denied to this shop' }, { status: 403 });\n            }\n            // Force shop staff to only see their shop's data\n            effectiveShopId = userShopId;\n        } else {\n            // For other roles (admin, etc.), allow access to requested shop or all shops\n            effectiveShopId = shopId;\n        }\n\n        // Build cache key\n        const cacheKey = `invoices:${JSON.stringify({ ...filters, shopId: effectiveShopId })}`;\n\n        // Try cache first\n        const cachedResult = await cache.get(cacheKey);\n        if (cachedResult) {\n            return NextResponse.json({\n                ...cachedResult,\n                cached: true,\n                responseTime: performance.now() - startTime\n            });\n        }\n\n        // Build query conditions\n        const where = buildWhereClause(filters, effectiveShopId);\n\n        // Handle cursor-based pagination\n        if (filters.cursor) {\n            const cursorData = parseCursor(filters.cursor);\n            if (cursorData) {\n                where.OR = [\n                    {\n                        createdAt: { lt: cursorData.createdAt }\n                    },\n                    {\n                        createdAt: cursorData.createdAt,\n                        id: { lt: cursorData.id }\n                    }\n                ];\n            }\n        }\n\n        const orderBy = buildOrderBy(filters.sortBy);\n\n        // Optimized query with selective field loading\n        const [invoices, totalCount, statistics] = await Promise.all([\n            prisma.invoice.findMany({\n                where,\n                orderBy,\n                take: filters.limit + 1, // Take one extra to check if there are more\n                select: {\n                    id: true,\n                    invoiceNumber: true,\n                    customerId: true,\n                    total: true,\n                    totalProfit: true,\n                    profitMargin: true,\n                    status: true,\n                    paymentMethod: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    dueDate: true,\n                    customer: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    shop: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    payments: {\n                        where: {\n                            receipt: {\n                                isNot: null\n                            }\n                        },\n                        select: {\n                            amount: true\n                        }\n                    },\n                    _count: {\n                        select: {\n                            items: true\n                        }\n                    }\n                }\n            }),\n            // Only count if we need pagination info\n            filters.cursor ? Promise.resolve(0) : prisma.invoice.count({ where }),\n            // Only fetch statistics if requested\n            filters.includeStatistics ? getStatistics(effectiveShopId) : Promise.resolve(null)\n        ]);\n\n        // Check if there are more results\n        const hasMore = invoices.length > filters.limit;\n        const resultInvoices = hasMore ? invoices.slice(0, -1) : invoices;\n\n        // Generate next cursor\n        const nextCursor = hasMore && resultInvoices.length > 0\n            ? createCursor(resultInvoices[resultInvoices.length - 1].id, resultInvoices[resultInvoices.length - 1].createdAt)\n            : null;\n\n        // Format response\n        const formattedInvoices = resultInvoices.map(invoice => {\n            const totalPaid = invoice.payments.reduce((sum, payment) => sum + payment.amount, 0);\n            const dueAmount = Math.max(0, invoice.total - totalPaid);\n            \n            return {\n                ...invoice,\n                customerName: invoice.customer.name,\n                shopName: invoice.shop?.name,\n                itemCount: invoice._count.items,\n                date: invoice.createdAt.toISOString().split('T')[0],\n                dueDate: invoice.dueDate?.toISOString().split('T')[0],\n                totalPaid,\n                dueAmount\n            };\n        });\n\n        const result = {\n            invoices: formattedInvoices,\n            hasMore,\n            nextCursor,\n            totalCount: filters.cursor ? undefined : totalCount,\n            statistics,\n            responseTime: performance.now() - startTime\n        };\n\n        // Cache the result\n        await cache.set(cacheKey, result, CACHE_CONFIG.invoices.ttl);\n\n        return NextResponse.json(result);\n\n    } catch (error) {\n        console.error('Error fetching invoices:', error);\n        return NextResponse.json(\n            {\n                error: 'Failed to fetch invoices',\n                details: process.env.NODE_ENV === 'development' ? error.message : undefined,\n                responseTime: performance.now() - startTime\n            },\n            { status: 500 }\n        );\n    }\n}\n\n// Bulk operations endpoint\nexport async function PATCH(request: NextRequest) {\n    try {\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        const body = await request.json();\n        const { operation, invoiceIds, data } = body;\n\n        if (!operation || !invoiceIds || !Array.isArray(invoiceIds)) {\n            return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });\n        }\n\n        // Verify user has access to these invoices\n        const userShops = await prisma.userShop.findMany({\n            where: { userId: payload.sub as string },\n            select: { shopId: true }\n        });\n        const shopIds = userShops.map(us => us.shopId);\n\n        const invoices = await prisma.invoice.findMany({\n            where: {\n                id: { in: invoiceIds },\n                shopId: { in: shopIds }\n            },\n            select: { id: true }\n        });\n\n        if (invoices.length !== invoiceIds.length) {\n            return NextResponse.json({ error: 'Some invoices not found or access denied' }, { status: 403 });\n        }\n\n        let result;\n        switch (operation) {\n            case 'bulkUpdateStatus':\n                result = await bulkUpdateInvoices(invoiceIds, { status: data.status });\n                break;\n            case 'bulkDelete':\n                result = await prisma.invoice.deleteMany({\n                    where: { id: { in: invoiceIds } }\n                });\n                break;\n            default:\n                return NextResponse.json({ error: 'Invalid operation' }, { status: 400 });\n        }\n\n        // Invalidate related caches\n        await cache.invalidatePattern('invoices:*');\n        await cache.invalidatePattern('invoice-statistics:*');\n\n        return NextResponse.json({\n            success: true,\n            affected: result.count,\n            operation\n        });\n\n    } catch (error) {\n        console.error('Error in bulk operation:', error);\n        return NextResponse.json(\n            { error: 'Failed to perform bulk operation' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}