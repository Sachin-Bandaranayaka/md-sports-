ad48cb7b474940a19da45e42f03776ef
// jest-dom adds custom jest matchers for asserting on DOM nodes.
"use strict";
// Mock Sequelize models for testing
jest.mock("@/lib/models", ()=>({
        Product: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        User: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Customer: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        Invoice: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        },
        AuditLog: {
            findAll: jest.fn(),
            findByPk: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            destroy: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _cache = require("./src/lib/cache");
// Set up environment variables for testing
process.env.JWT_SECRET = "test-secret-key";
process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = "12h";
process.env.NEXTAUTH_SECRET = "test-nextauth-secret";
process.env.NODE_ENV = "test";
process.env.DATABASE_URL = "postgresql://test:test@localhost:5432/test";
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock window.matchMedia
if (typeof window !== "undefined") {
    Object.defineProperty(window, "matchMedia", {
        writable: true,
        value: jest.fn().mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
    });
}
// Clean up cache after all tests
afterAll(()=>{
    (0, _cache.cleanupCache)();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LWRvbSBhZGRzIGN1c3RvbSBqZXN0IG1hdGNoZXJzIGZvciBhc3NlcnRpbmcgb24gRE9NIG5vZGVzLlxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCB7IGNsZWFudXBDYWNoZSB9IGZyb20gJy4vc3JjL2xpYi9jYWNoZSc7XG5cbi8vIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRlc3RpbmdcbnByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1zZWNyZXQta2V5JztcbnByb2Nlc3MuZW52LkpXVF9BQ0NFU1NfVE9LRU5fRVhQSVJFU19JTiA9ICcxMmgnO1xucHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUID0gJ3Rlc3QtbmV4dGF1dGgtc2VjcmV0JztcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gJ3Bvc3RncmVzcWw6Ly90ZXN0OnRlc3RAbG9jYWxob3N0OjU0MzIvdGVzdCc7XG5cbi8vIE1vY2sgU2VxdWVsaXplIG1vZGVscyBmb3IgdGVzdGluZ1xuamVzdC5tb2NrKCdAL2xpYi9tb2RlbHMnLCAoKSA9PiAoe1xuICBQcm9kdWN0OiB7XG4gICAgZmluZEFsbDogamVzdC5mbigpLFxuICAgIGZpbmRCeVBrOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgZGVzdHJveTogamVzdC5mbigpXG4gIH0sXG4gIFVzZXI6IHtcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCksXG4gICAgZmluZEJ5UGs6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICBkZXN0cm95OiBqZXN0LmZuKClcbiAgfSxcbiAgQ3VzdG9tZXI6IHtcbiAgICBmaW5kQWxsOiBqZXN0LmZuKCksXG4gICAgZmluZEJ5UGs6IGplc3QuZm4oKSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICBkZXN0cm95OiBqZXN0LmZuKClcbiAgfSxcbiAgSW52b2ljZToge1xuICAgIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgICBmaW5kQnlQazogamVzdC5mbigpLFxuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIGRlc3Ryb3k6IGplc3QuZm4oKVxuICB9LFxuICBBdWRpdExvZzoge1xuICAgIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgICBmaW5kQnlQazogamVzdC5mbigpLFxuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgIGRlc3Ryb3k6IGplc3QuZm4oKVxuICB9XG59KSk7XG5cbi8vIE1vY2sgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuICBkaXNjb25uZWN0KCkge31cbiAgb2JzZXJ2ZSgpIHt9XG4gIHVub2JzZXJ2ZSgpIHt9XG59O1xuXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgZGlzY29ubmVjdCgpIHt9XG4gIG9ic2VydmUoKSB7fVxuICB1bm9ic2VydmUoKSB7fVxufTtcblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHF1ZXJ5ID0+ICh7XG4gICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgfSk7XG59XG5cbi8vIENsZWFuIHVwIGNhY2hlIGFmdGVyIGFsbCB0ZXN0c1xuYWZ0ZXJBbGwoKCkgPT4ge1xuICBjbGVhbnVwQ2FjaGUoKTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIlByb2R1Y3QiLCJmaW5kQWxsIiwiZm4iLCJmaW5kQnlQayIsImNyZWF0ZSIsInVwZGF0ZSIsImRlc3Ryb3kiLCJVc2VyIiwiQ3VzdG9tZXIiLCJJbnZvaWNlIiwiQXVkaXRMb2ciLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsIkpXVF9BQ0NFU1NfVE9LRU5fRVhQSVJFU19JTiIsIk5FWFRBVVRIX1NFQ1JFVCIsIk5PREVfRU5WIiwiREFUQUJBU0VfVVJMIiwiZ2xvYmFsIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiUmVzaXplT2JzZXJ2ZXIiLCJ3aW5kb3ciLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwidmFsdWUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsIm9uY2hhbmdlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImFmdGVyQWxsIiwiY2xlYW51cENhY2hlIl0sIm1hcHBpbmdzIjoiQUFBQSxpRUFBaUU7O0FBV2pFLG9DQUFvQztBQUNwQ0EsS0FBS0MsSUFBSSxDQUFDLGdCQUFnQixJQUFPLENBQUE7UUFDL0JDLFNBQVM7WUFDUEMsU0FBU0gsS0FBS0ksRUFBRTtZQUNoQkMsVUFBVUwsS0FBS0ksRUFBRTtZQUNqQkUsUUFBUU4sS0FBS0ksRUFBRTtZQUNmRyxRQUFRUCxLQUFLSSxFQUFFO1lBQ2ZJLFNBQVNSLEtBQUtJLEVBQUU7UUFDbEI7UUFDQUssTUFBTTtZQUNKTixTQUFTSCxLQUFLSSxFQUFFO1lBQ2hCQyxVQUFVTCxLQUFLSSxFQUFFO1lBQ2pCRSxRQUFRTixLQUFLSSxFQUFFO1lBQ2ZHLFFBQVFQLEtBQUtJLEVBQUU7WUFDZkksU0FBU1IsS0FBS0ksRUFBRTtRQUNsQjtRQUNBTSxVQUFVO1lBQ1JQLFNBQVNILEtBQUtJLEVBQUU7WUFDaEJDLFVBQVVMLEtBQUtJLEVBQUU7WUFDakJFLFFBQVFOLEtBQUtJLEVBQUU7WUFDZkcsUUFBUVAsS0FBS0ksRUFBRTtZQUNmSSxTQUFTUixLQUFLSSxFQUFFO1FBQ2xCO1FBQ0FPLFNBQVM7WUFDUFIsU0FBU0gsS0FBS0ksRUFBRTtZQUNoQkMsVUFBVUwsS0FBS0ksRUFBRTtZQUNqQkUsUUFBUU4sS0FBS0ksRUFBRTtZQUNmRyxRQUFRUCxLQUFLSSxFQUFFO1lBQ2ZJLFNBQVNSLEtBQUtJLEVBQUU7UUFDbEI7UUFDQVEsVUFBVTtZQUNSVCxTQUFTSCxLQUFLSSxFQUFFO1lBQ2hCQyxVQUFVTCxLQUFLSSxFQUFFO1lBQ2pCRSxRQUFRTixLQUFLSSxFQUFFO1lBQ2ZHLFFBQVFQLEtBQUtJLEVBQUU7WUFDZkksU0FBU1IsS0FBS0ksRUFBRTtRQUNsQjtJQUNGLENBQUE7Ozs7UUEvQ087dUJBQ3NCO0FBRTdCLDJDQUEyQztBQUMzQ1MsUUFBUUMsR0FBRyxDQUFDQyxVQUFVLEdBQUc7QUFDekJGLFFBQVFDLEdBQUcsQ0FBQ0UsMkJBQTJCLEdBQUc7QUFDMUNILFFBQVFDLEdBQUcsQ0FBQ0csZUFBZSxHQUFHO0FBQzlCSixRQUFRQyxHQUFHLENBQUNJLFFBQVEsR0FBRztBQUN2QkwsUUFBUUMsR0FBRyxDQUFDSyxZQUFZLEdBQUc7QUF5QzNCLDRCQUE0QjtBQUM1QkMsT0FBT0Msb0JBQW9CLEdBQUcsTUFBTUE7SUFDbENDLGFBQWMsQ0FBQztJQUNmQyxhQUFhLENBQUM7SUFDZEMsVUFBVSxDQUFDO0lBQ1hDLFlBQVksQ0FBQztBQUNmO0FBRUEsc0JBQXNCO0FBQ3RCTCxPQUFPTSxjQUFjLEdBQUcsTUFBTUE7SUFDNUJKLGFBQWMsQ0FBQztJQUNmQyxhQUFhLENBQUM7SUFDZEMsVUFBVSxDQUFDO0lBQ1hDLFlBQVksQ0FBQztBQUNmO0FBRUEseUJBQXlCO0FBQ3pCLElBQUksT0FBT0UsV0FBVyxhQUFhO0lBQ2pDQyxPQUFPQyxjQUFjLENBQUNGLFFBQVEsY0FBYztRQUMxQ0csVUFBVTtRQUNWQyxPQUFPL0IsS0FBS0ksRUFBRSxHQUFHNEIsa0JBQWtCLENBQUNDLENBQUFBLFFBQVUsQ0FBQTtnQkFDNUNDLFNBQVM7Z0JBQ1RDLE9BQU9GO2dCQUNQRyxVQUFVO2dCQUNWQyxhQUFhckMsS0FBS0ksRUFBRTtnQkFDcEJrQyxnQkFBZ0J0QyxLQUFLSSxFQUFFO2dCQUN2Qm1DLGtCQUFrQnZDLEtBQUtJLEVBQUU7Z0JBQ3pCb0MscUJBQXFCeEMsS0FBS0ksRUFBRTtnQkFDNUJxQyxlQUFlekMsS0FBS0ksRUFBRTtZQUN4QixDQUFBO0lBQ0Y7QUFDRjtBQUVBLGlDQUFpQztBQUNqQ3NDLFNBQVM7SUFDUEMsSUFBQUEsbUJBQVk7QUFDZCJ9