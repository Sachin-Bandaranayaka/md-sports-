{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/batch/route.ts"],"sourcesContent":["/**\n * Batch Transfer Operations API\n * Handles multiple transfer operations efficiently with transaction safety\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { verifyToken } from '@/lib/auth';\nimport { transferCacheService } from '@/lib/transferCache';\nimport { z } from 'zod';\n\nconst prisma = new PrismaClient();\n\n// Validation schemas\nconst batchCompleteSchema = z.object({\n  transferIds: z.array(z.number().positive()).min(1).max(50), // Limit batch size\n  action: z.literal('complete')\n});\n\nconst batchCancelSchema = z.object({\n  transferIds: z.array(z.number().positive()).min(1).max(50),\n  action: z.literal('cancel')\n});\n\nconst batchCreateSchema = z.object({\n  transfers: z.array(z.object({\n    sourceShopId: z.number().positive(),\n    destinationShopId: z.number().positive(),\n    items: z.array(z.object({\n      productId: z.number().positive(),\n      quantity: z.number().positive()\n    })).min(1)\n  })).min(1).max(20) // Limit batch size\n});\n\ntype BatchCompleteRequest = z.infer<typeof batchCompleteSchema>;\ntype BatchCancelRequest = z.infer<typeof batchCancelSchema>;\ntype BatchCreateRequest = z.infer<typeof batchCreateSchema>;\n\n// Helper function to calculate weighted average cost\nconst calculateWeightedAverageCost = (\n  currentQuantity: number,\n  currentCost: number,\n  addedQuantity: number,\n  addedCost: number\n): number => {\n  if (currentQuantity + addedQuantity === 0) return 0;\n\n  const totalValue = (currentQuantity * currentCost) + (addedQuantity * addedCost);\n  const totalQuantity = currentQuantity + addedQuantity;\n\n  return totalValue / totalQuantity;\n};\n\n// Batch complete transfers\nconst batchCompleteTransfers = async (transferIds: number[], userId: number) => {\n  const results: { id: number; success: boolean; error?: string }[] = [];\n  const affectedShopIds = new Set<number>();\n  const affectedProductIds = new Set<number>();\n\n  await prisma.$transaction(async (tx) => {\n    // Fetch all transfers with their items in one query\n    const transfers = await tx.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds },\n        status: 'pending'\n      },\n      include: {\n        items: {\n          include: {\n            product: true\n          }\n        },\n        sourceShop: true,\n        destinationShop: true\n      }\n    });\n\n    // Validate permissions for all transfers\n    for (const transfer of transfers) {\n      const hasPermission = await tx.userShop.findFirst({\n        where: {\n          userId,\n          shopId: { in: [transfer.sourceShopId, transfer.destinationShopId] }\n        }\n      });\n\n      if (!hasPermission) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: 'Insufficient permissions'\n        });\n        continue;\n      }\n\n      try {\n        // Process each transfer item\n        for (const item of transfer.items) {\n          // If we ever switch back to the old behaviour we can flip this flag.\n          const APPLY_SOURCE_DECREMENT = false;\n\n          if (APPLY_SOURCE_DECREMENT) {\n            // Update source inventory (decrease)\n            await tx.inventoryItem.update({\n              where: {\n                productId_shopId: {\n                  productId: item.productId,\n                  shopId: transfer.sourceShopId\n                }\n              },\n              data: {\n                quantity: { decrement: item.quantity }\n              }\n            });\n          }\n\n          // Find or create destination inventory\n          const destinationInventory = await tx.inventoryItem.findUnique({\n            where: {\n              productId_shopId: {\n                productId: item.productId,\n                shopId: transfer.destinationShopId\n              }\n            }\n          });\n\n          if (destinationInventory) {\n            // Calculate new shop-specific WAC\n            const newShopSpecificCost = calculateWeightedAverageCost(\n              destinationInventory.quantity,\n              parseFloat(destinationInventory.shopSpecificCost),\n              item.quantity,\n              parseFloat(item.product.weightedAverageCost)\n            );\n\n            // Update existing inventory\n            await tx.inventoryItem.update({\n              where: {\n                productId_shopId: {\n                  productId: item.productId,\n                  shopId: transfer.destinationShopId\n                }\n              },\n              data: {\n                quantity: { increment: item.quantity },\n                shopSpecificCost: newShopSpecificCost.toFixed(2)\n              }\n            });\n          } else {\n            // Create new inventory item\n            await tx.inventoryItem.create({\n              data: {\n                productId: item.productId,\n                shopId: transfer.destinationShopId,\n                quantity: item.quantity,\n                shopSpecificCost: item.product.weightedAverageCost\n              }\n            });\n          }\n\n          affectedShopIds.add(transfer.sourceShopId);\n          affectedShopIds.add(transfer.destinationShopId);\n          affectedProductIds.add(item.productId);\n        }\n\n        // Mark transfer as completed\n        await tx.inventoryTransfer.update({\n          where: { id: transfer.id },\n          data: {\n            status: 'completed',\n            completedAt: new Date()\n          }\n        });\n\n        results.push({ id: transfer.id, success: true });\n      } catch (error) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    // Batch update global WAC for all affected products\n    for (const productId of affectedProductIds) {\n      const allInventories = await tx.inventoryItem.findMany({\n        where: {\n          productId,\n          quantity: { gt: 0 }\n        }\n      });\n\n      if (allInventories.length > 0) {\n        let totalValue = 0;\n        let totalQuantity = 0;\n\n        for (const inventory of allInventories) {\n          totalValue += inventory.quantity * parseFloat(inventory.shopSpecificCost);\n          totalQuantity += inventory.quantity;\n        }\n\n        const newGlobalWAC = totalQuantity > 0 ? totalValue / totalQuantity : 0;\n\n        await tx.product.update({\n          where: { id: productId },\n          data: { weightedAverageCost: newGlobalWAC.toFixed(2) }\n        });\n      }\n    }\n  });\n\n  // Invalidate cache for affected shops\n  await transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));\n\n  return results;\n};\n\n// Batch cancel transfers\nconst batchCancelTransfers = async (transferIds: number[], userId: number) => {\n  const results: { id: number; success: boolean; error?: string }[] = [];\n\n  await prisma.$transaction(async (tx) => {\n    const transfers = await tx.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds },\n        status: 'pending'\n      },\n      include: {\n        sourceShop: true,\n        destinationShop: true\n      }\n    });\n\n    for (const transfer of transfers) {\n      // Check permissions\n      const hasPermission = await tx.userShop.findFirst({\n        where: {\n          userId,\n          shopId: { in: [transfer.sourceShopId, transfer.destinationShopId] }\n        }\n      });\n\n      if (!hasPermission) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: 'Insufficient permissions'\n        });\n        continue;\n      }\n\n      try {\n        await tx.inventoryTransfer.update({\n          where: { id: transfer.id },\n          data: {\n            status: 'cancelled',\n            completedAt: new Date()\n          }\n        });\n\n        results.push({ id: transfer.id, success: true });\n      } catch (error) {\n        results.push({\n          id: transfer.id,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n  });\n\n  // Invalidate transfer cache\n  await transferCacheService.invalidateTransferCache();\n\n  return results;\n};\n\n// Batch create transfers\nconst batchCreateTransfers = async (transfers: BatchCreateRequest['transfers'], userId: number) => {\n  const results: { success: boolean; transferId?: number; error?: string }[] = [];\n  const affectedShopIds = new Set<number>();\n\n  await prisma.$transaction(async (tx) => {\n    for (const transferData of transfers) {\n      try {\n        // Validate permissions\n        const hasPermission = await tx.userShop.findFirst({\n          where: {\n            userId,\n            shopId: { in: [transferData.sourceShopId, transferData.destinationShopId] }\n          }\n        });\n\n        if (!hasPermission) {\n          results.push({\n            success: false,\n            error: 'Insufficient permissions for one or both shops'\n          });\n          continue;\n        }\n\n        // Validate inventory availability\n        for (const item of transferData.items) {\n          const inventory = await tx.inventoryItem.findUnique({\n            where: {\n              productId_shopId: {\n                productId: item.productId,\n                shopId: transferData.sourceShopId\n              }\n            }\n          });\n\n          if (!inventory || inventory.quantity < item.quantity) {\n            results.push({\n              success: false,\n              error: `Insufficient inventory for product ${item.productId}`\n            });\n            continue;\n          }\n        }\n\n        // Create transfer\n        const transfer = await tx.inventoryTransfer.create({\n          data: {\n            sourceShopId: transferData.sourceShopId,\n            destinationShopId: transferData.destinationShopId,\n            initiatedBy: userId,\n            status: 'pending'\n          }\n        });\n\n        // Create transfer items\n        await tx.transferItem.createMany({\n          data: transferData.items.map(item => ({\n            transferId: transfer.id,\n            productId: item.productId,\n            quantity: item.quantity\n          }))\n        });\n\n        affectedShopIds.add(transferData.sourceShopId);\n        affectedShopIds.add(transferData.destinationShopId);\n\n        results.push({\n          success: true,\n          transferId: transfer.id\n        });\n      } catch (error) {\n        results.push({\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n  });\n\n  // Invalidate cache for affected shops\n  await transferCacheService.invalidateTransferCache(undefined, Array.from(affectedShopIds));\n\n  return results;\n};\n\n// POST handler for batch operations\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    if (!token) {\n      return NextResponse.json(\n        { success: false, error: 'Authorization token required' },\n        { status: 401 }\n      );\n    }\n\n    const decoded = await verifyToken(token);\n    if (!decoded?.userId) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { action } = body;\n\n    let results;\n\n    switch (action) {\n      case 'complete': {\n        const validatedData = batchCompleteSchema.parse(body);\n        results = await batchCompleteTransfers(validatedData.transferIds, decoded.userId);\n        break;\n      }\n      case 'cancel': {\n        const validatedData = batchCancelSchema.parse(body);\n        results = await batchCancelTransfers(validatedData.transferIds, decoded.userId);\n        break;\n      }\n      case 'create': {\n        const validatedData = batchCreateSchema.parse(body);\n        results = await batchCreateTransfers(validatedData.transfers, decoded.userId);\n        break;\n      }\n      default:\n        return NextResponse.json(\n          { success: false, error: 'Invalid action. Must be \"complete\", \"cancel\", or \"create\"' },\n          { status: 400 }\n        );\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const failureCount = results.filter(r => !r.success).length;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results,\n        summary: {\n          total: results.length,\n          successful: successCount,\n          failed: failureCount\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Batch transfer operation error:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Validation error',\n          details: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET handler for batch operation status\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.headers.get('authorization')?.replace('Bearer ', '');\n    if (!token) {\n      return NextResponse.json(\n        { success: false, error: 'Authorization token required' },\n        { status: 401 }\n      );\n    }\n\n    const decoded = await verifyToken(token);\n    if (!decoded?.userId) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const transferIds = searchParams.get('ids')?.split(',').map(Number) || [];\n\n    if (transferIds.length === 0) {\n      return NextResponse.json(\n        { success: false, error: 'Transfer IDs required' },\n        { status: 400 }\n      );\n    }\n\n    const transfers = await prisma.inventoryTransfer.findMany({\n      where: {\n        id: { in: transferIds }\n      },\n      select: {\n        id: true,\n        status: true,\n        createdAt: true,\n        completedAt: true,\n        sourceShop: { select: { name: true } },\n        destinationShop: { select: { name: true } },\n        _count: {\n          select: { items: true }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: transfers.map(transfer => ({\n        id: transfer.id,\n        status: transfer.status,\n        createdAt: transfer.createdAt,\n        completedAt: transfer.completedAt,\n        sourceShopName: transfer.sourceShop.name,\n        destinationShopName: transfer.destinationShop.name,\n        itemCount: transfer._count.items\n      }))\n    });\n  } catch (error) {\n    console.error('Batch transfer status error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":["GET","POST","prisma","PrismaClient","batchCompleteSchema","z","object","transferIds","array","number","positive","min","max","action","literal","batchCancelSchema","batchCreateSchema","transfers","sourceShopId","destinationShopId","items","productId","quantity","calculateWeightedAverageCost","currentQuantity","currentCost","addedQuantity","addedCost","totalValue","totalQuantity","batchCompleteTransfers","userId","results","affectedShopIds","Set","affectedProductIds","$transaction","tx","inventoryTransfer","findMany","where","id","in","status","include","product","sourceShop","destinationShop","transfer","hasPermission","userShop","findFirst","shopId","push","success","error","item","APPLY_SOURCE_DECREMENT","inventoryItem","update","productId_shopId","data","decrement","destinationInventory","findUnique","newShopSpecificCost","parseFloat","shopSpecificCost","weightedAverageCost","increment","toFixed","create","add","completedAt","Date","Error","message","allInventories","gt","length","inventory","newGlobalWAC","transferCacheService","invalidateTransferCache","undefined","Array","from","batchCancelTransfers","batchCreateTransfers","transferData","initiatedBy","transferItem","createMany","map","transferId","request","token","headers","get","replace","NextResponse","json","decoded","verifyToken","body","validatedData","parse","successCount","filter","r","failureCount","summary","total","successful","failed","console","ZodError","details","errors","searchParams","URL","url","split","Number","select","createdAt","name","_count","sourceShopName","destinationShopName","itemCount"],"mappings":"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"}