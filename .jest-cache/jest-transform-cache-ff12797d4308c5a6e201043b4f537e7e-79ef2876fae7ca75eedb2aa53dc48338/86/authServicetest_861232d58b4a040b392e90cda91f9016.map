{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/authService.test.ts"],"sourcesContent":["// Fixed Unit tests for AuthService\n// This file tests the authentication service functionality\n\nimport { jest } from '@jest/globals';\n\n// Mock dependencies BEFORE importing the service\nconst mockCacheService = {\n  get: jest.fn(),\n  set: jest.fn(),\n  delete: jest.fn(),\n  increment: jest.fn(),\n  generateKey: jest.fn(),\n  clear: jest.fn(),\n};\n\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n    findFirst: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    findMany: jest.fn(),\n    delete: jest.fn(),\n  },\n  permission: {\n    findMany: jest.fn(),\n  },\n  session: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    update: jest.fn(),\n    deleteMany: jest.fn(),\n  },\n  auditLog: {\n    create: jest.fn(),\n  },\n};\n\nconst mockBcrypt = {\n  compare: jest.fn(),\n  hash: jest.fn(),\n  genSalt: jest.fn(),\n};\n\n// Mock modules\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('@/lib/cache', () => ({\n  cacheService: mockCacheService,\n  CACHE_CONFIG: {\n    KEYS: {\n      USER_SESSION: 'user_session',\n      TOKEN_VALIDATION: 'token_validation',\n    },\n    TTL: {\n      USER_SESSION: 3600,\n      TOKEN_VALIDATION: 1800,\n    },\n  },\n}));\n\njest.mock('bcryptjs', () => mockBcrypt);\njest.doMock('jsonwebtoken', () => ({\n  sign: jest.fn(),\n  verify: jest.fn(),\n  decode: jest.fn(),\n  TokenExpiredError: class TokenExpiredError extends Error {\n    constructor(message: string, expiredAt: Date) {\n      super(message);\n      this.name = 'TokenExpiredError';\n      this.expiredAt = expiredAt;\n    }\n    expiredAt: Date;\n  },\n  JsonWebTokenError: class JsonWebTokenError extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = 'JsonWebTokenError';\n    }\n  }\n}));\n\n// Import after mocking\nimport { authenticateUser, generateToken, verifyToken, parseTimeStringToSeconds, getUserFromDecodedPayload, getUserFromToken } from '@/services/authService';\n\n// Create proper mock types for easier access\nconst mockUserFindFirst = mockPrisma.user.findFirst as jest.MockedFunction<typeof mockPrisma.user.findFirst>;\nconst mockPermissionFindMany = mockPrisma.permission.findMany as jest.MockedFunction<typeof mockPrisma.permission.findMany>;\nconst mockJwt = require('jsonwebtoken');\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    process.env.JWT_SECRET = 'test-secret-key';\n    process.env.JWT_ACCESS_TOKEN_EXPIRES_IN = '12h';\n    \n    // Setup default cache mocks\n    mockCacheService.generateKey.mockReturnValue('mock-cache-key');\n    mockCacheService.get.mockResolvedValue(null);\n    mockCacheService.set.mockResolvedValue(undefined);\n    \n    // JWT mocks will be set up individually in each test\n  });\n\n  describe('parseTimeStringToSeconds', () => {\n    test('should parse seconds correctly', () => {\n      expect(parseTimeStringToSeconds('30s')).toBe(30);\n    });\n\n    test('should parse minutes correctly', () => {\n      expect(parseTimeStringToSeconds('5m')).toBe(300);\n    });\n\n    test('should parse hours correctly', () => {\n      expect(parseTimeStringToSeconds('2h')).toBe(7200);\n    });\n\n    test('should parse days correctly', () => {\n      expect(parseTimeStringToSeconds('1d')).toBe(86400);\n    });\n\n    test('should return 0 for invalid input', () => {\n      expect(parseTimeStringToSeconds('')).toBe(0);\n      expect(parseTimeStringToSeconds('invalid')).toBe(0);\n      expect(parseTimeStringToSeconds('abc')).toBe(0);\n    });\n\n    test('should handle edge cases', () => {\n      expect(parseTimeStringToSeconds('0s')).toBe(0);\n      expect(parseTimeStringToSeconds('100x')).toBe(100); // Falls back to parsing the number part\n    });\n  });\n\n  describe('authenticateUser', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      password: 'hashedpassword',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      roleName: 'admin',\n      permissions: null,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should authenticate valid user credentials', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(true as any);\n      mockJwt.sign.mockReturnValue('mock-jwt-token' as any);\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(true);\n      expect(result.token).toBe('mock-jwt-token');\n      expect(result.user).toEqual({\n        id: 1,\n        email: 'test@example.com',\n        username: 'testuser',\n        fullName: 'testuser',\n        roleId: 1,\n        roleName: 'admin',\n        shopId: 1,\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockUserFindFirst).toHaveBeenCalledWith({\n        where: {\n          email: 'test@example.com',\n          isActive: true\n        },\n        include: {\n          role: {\n            include: {\n              permissions: {\n                select: { name: true }\n              }\n            }\n          }\n        }\n      });\n    });\n\n    test('should reject invalid email', async () => {\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await authenticateUser('invalid@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject invalid password', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockResolvedValue(false as any);\n\n      const result = await authenticateUser('test@example.com', 'wrongpassword');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should reject inactive user', async () => {\n      mockUserFindFirst.mockResolvedValue(null); // findFirst with isActive: true returns null\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid email or password');\n    });\n\n    test('should handle database errors gracefully', async () => {\n      mockUserFindFirst.mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n\n    test('should handle bcrypt errors gracefully', async () => {\n      mockUserFindFirst.mockResolvedValue(mockUser);\n      mockBcrypt.compare.mockRejectedValue(new Error('Bcrypt error'));\n\n      const result = await authenticateUser('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Authentication failed');\n    });\n  });\n\n  describe('generateToken', () => {\n    const mockPayload = {\n      sub: 1,\n      username: 'testuser',\n      email: 'test@example.com',\n      roleId: 1,\n      shopId: 1,\n      permissions: ['read_products', 'write_products']\n    };\n\n    test('should generate JWT token', () => {\n      const mockToken = 'mock-jwt-token';\n      mockJwt.sign.mockReturnValue(mockToken);\n\n      const result = generateToken(mockPayload);\n\n      expect(result).toBe(mockToken);\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n          mockPayload,\n          'test-secret-key',\n          { expiresIn: '12h' }\n        );\n    });\n  });\n\n  describe('verifyToken', () => {\n    test('should verify valid token from cache', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(mockPayload);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should verify valid token and cache result', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockJwt.verify.mockReturnValue(mockPayload as any);\n\n      const result = await verifyToken('valid-token');\n\n      expect(result).toEqual(mockPayload);\n      expect(mockJwt.verify).toHaveBeenCalledWith('valid-token', 'test-secret-key');\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      await expect(verifyToken('invalid-token')).rejects.toThrow('Invalid token');\n    });\n\n    test('should throw error for expired token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        const error = new Error('Token expired') as any;\n        error.name = 'TokenExpiredError';\n        error.expiredAt = new Date();\n        throw error;\n      });\n\n      await expect(verifyToken('expired-token')).rejects.toThrow('Token expired');\n    });\n  });\n\n  describe('getUserFromDecodedPayload', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'testuser',\n      isActive: true,\n      roleId: 1,\n      shopId: 1,\n      role: {\n        id: 1,\n        name: 'admin',\n        permissions: [\n          { name: 'read_products' },\n          { name: 'write_products' }\n        ]\n      }\n    };\n\n    test('should return user from cache', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const cachedUser = {\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      };\n      \n      mockCacheService.get.mockResolvedValue(cachedUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual(cachedUser);\n      expect(mockCacheService.get).toHaveBeenCalled();\n    });\n\n    test('should return user from database and cache it', async () => {\n      const payload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null); // Not in cache\n      mockUserFindFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromDecodedPayload(payload);\n\n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products', 'write_products']\n      });\n      expect(mockCacheService.set).toHaveBeenCalled();\n    });\n\n    test('should return null for null payload', async () => {\n      const result = await getUserFromDecodedPayload(null);\n      expect(result).toBeNull();\n    });\n\n    test('should return null for invalid payload', async () => {\n      const result = await getUserFromDecodedPayload({} as any);\n      expect(result).toBeNull();\n    });\n\n    test('should return null when user not found', async () => {\n      const payload = {\n        sub: 999,\n        username: 'nonexistent',\n        email: 'nonexistent@example.com',\n        roleId: 1\n      };\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockUserFindFirst.mockResolvedValue(null);\n\n      const result = await getUserFromDecodedPayload(payload);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getUserFromToken', () => {\n    test('should return user from valid token', async () => {\n      const mockPayload = {\n        sub: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        roleId: 1\n      };\n      \n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'testuser',\n        isActive: true,\n        roleId: 1,\n        shopId: 1,\n        role: {\n          id: 1,\n          name: 'admin',\n          permissions: [{ name: 'read_products' }]\n        }\n      };\n\n      // Mock verifyToken to return payload\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => mockPayload);\n      \n      // Mock getUserFromDecodedPayload\n      mockUserFindFirst.mockResolvedValue(mockUser);\n\n      const result = await getUserFromToken('valid-token');\n      \n      expect(result).toEqual({\n        ...mockUser,\n        roleName: 'admin',\n        permissions: ['read_products']\n      });\n    });\n\n    test('should throw error for invalid token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt malformed');\n      });\n\n      await expect(getUserFromToken('invalid-token')).rejects.toThrow('jwt malformed');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle missing JWT_SECRET', async () => {\n      const originalSecret = process.env.JWT_SECRET;\n      delete process.env.JWT_SECRET;\n      \n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('secretOrPrivateKey must have a value');\n      });\n      \n      await expect(verifyToken('any-token')).rejects.toThrow();\n      \n      // Restore the secret\n      process.env.JWT_SECRET = originalSecret;\n    });\n\n    test('should handle malformed tokens gracefully', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt malformed');\n      });\n      \n      await expect(verifyToken('not.a.valid.jwt.token')).rejects.toThrow('jwt malformed');\n    });\n\n    test('should handle empty token', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('jwt must be provided');\n      });\n      \n      await expect(verifyToken('')).rejects.toThrow('jwt must be provided');\n    });\n  });\n});"],"names":["mockCacheService","get","jest","fn","set","delete","increment","generateKey","clear","mockPrisma","user","findUnique","findFirst","create","update","findMany","permission","session","deleteMany","auditLog","mockBcrypt","compare","hash","genSalt","mock","__esModule","default","cacheService","CACHE_CONFIG","KEYS","USER_SESSION","TOKEN_VALIDATION","TTL","doMock","sign","verify","decode","TokenExpiredError","Error","constructor","message","expiredAt","name","JsonWebTokenError","mockUserFindFirst","mockPermissionFindMany","mockJwt","require","describe","beforeEach","clearAllMocks","process","env","JWT_SECRET","JWT_ACCESS_TOKEN_EXPIRES_IN","mockReturnValue","mockResolvedValue","undefined","test","expect","parseTimeStringToSeconds","toBe","mockUser","id","email","password","isActive","roleId","shopId","roleName","permissions","role","result","authenticateUser","success","token","toEqual","username","fullName","toHaveBeenCalledWith","where","include","select","mockRejectedValue","mockPayload","sub","mockToken","generateToken","expiresIn","iat","Math","floor","Date","now","exp","verifyToken","toHaveBeenCalled","mockImplementation","rejects","toThrow","error","payload","cachedUser","getUserFromDecodedPayload","toBeNull","getUserFromToken","originalSecret"],"mappings":"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"}