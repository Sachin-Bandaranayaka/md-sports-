01fe237835a7ffedc51322eb0da77069
/**
 * Performance monitoring utility for tracking function execution times
 * and identifying performance bottlenecks
 */ // Node.js compatible performance timing
"use strict";

/* istanbul ignore next */
function cov_kw8xzvnqf() {
  var path = "/Users/sachin/Documents/md-sports-/src/lib/performance.ts";
  var hash = "d55f0e3a8e36a23cd4a925678e044b489e1d94b9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/lib/performance.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 28
        }
      },
      "7": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "8": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "9": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "10": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "11": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "12": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "14": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 39
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "16": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 34
        }
      },
      "17": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 34
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 51
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "20": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 58
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "22": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "23": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 47
        }
      },
      "24": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "25": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 64
        }
      },
      "26": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "27": {
        start: {
          line: 72,
          column: 25
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "28": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 33
        }
      },
      "29": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 34
        }
      },
      "31": {
        start: {
          line: 82,
          column: 22
        },
        end: {
          line: 82,
          column: 105
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 88
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "34": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 39
        }
      },
      "35": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 39
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "38": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 37
        }
      },
      "39": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "40": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 26
        }
      },
      "41": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "42": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "43": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 39
        }
      },
      "44": {
        start: {
          line: 118,
          column: 27
        },
        end: {
          line: 118,
          column: 39
        }
      },
      "45": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 40
        }
      },
      "46": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "47": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 31
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "49": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 26
        }
      },
      "50": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "51": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "52": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "53": {
        start: {
          line: 149,
          column: 22
        },
        end: {
          line: 149,
          column: 81
        }
      },
      "54": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 70
        }
      },
      "55": {
        start: {
          line: 150,
          column: 45
        },
        end: {
          line: 150,
          column: 68
        }
      },
      "56": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 65
        }
      },
      "57": {
        start: {
          line: 157,
          column: 49
        },
        end: {
          line: 157,
          column: 64
        }
      },
      "58": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "59": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 165,
          column: 14
        }
      },
      "60": {
        start: {
          line: 167,
          column: 26
        },
        end: {
          line: 167,
          column: 54
        }
      },
      "61": {
        start: {
          line: 167,
          column: 43
        },
        end: {
          line: 167,
          column: 53
        }
      },
      "62": {
        start: {
          line: 168,
          column: 22
        },
        end: {
          line: 168,
          column: 60
        }
      },
      "63": {
        start: {
          line: 168,
          column: 49
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "64": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 10
        }
      },
      "65": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 26
        }
      },
      "66": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 28
        }
      },
      "67": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "68": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 54
        }
      },
      "69": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "70": {
        start: {
          line: 191,
          column: 45
        },
        end: {
          line: 191,
          column: 51
        }
      },
      "71": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "72": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      },
      "73": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 198,
          column: 45
        }
      },
      "74": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 225
        }
      },
      "75": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 33
        }
      },
      "76": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 31
        }
      },
      "77": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 28
        }
      },
      "78": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 26
        }
      },
      "79": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 32
        }
      },
      "80": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 62
        }
      },
      "81": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 51
        }
      },
      "82": {
        start: {
          line: 222,
          column: 19
        },
        end: {
          line: 222,
          column: 82
        }
      },
      "83": {
        start: {
          line: 222,
          column: 37
        },
        end: {
          line: 222,
          column: 82
        }
      },
      "84": {
        start: {
          line: 223,
          column: 17
        },
        end: {
          line: 223,
          column: 78
        }
      },
      "85": {
        start: {
          line: 223,
          column: 35
        },
        end: {
          line: 223,
          column: 78
        }
      },
      "86": {
        start: {
          line: 224,
          column: 21
        },
        end: {
          line: 224,
          column: 94
        }
      },
      "87": {
        start: {
          line: 224,
          column: 43
        },
        end: {
          line: 224,
          column: 94
        }
      },
      "88": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 92
        }
      },
      "89": {
        start: {
          line: 225,
          column: 42
        },
        end: {
          line: 225,
          column: 92
        }
      },
      "90": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 232,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 16,
            column: 25
          }
        },
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 14
          },
          end: {
            line: 19,
            column: 15
          }
        },
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 19
          }
        },
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 17
          },
          end: {
            line: 25,
            column: 18
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 25
          }
        },
        loc: {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        },
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 27
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 38
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        loc: {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 53
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        loc: {
          start: {
            line: 65,
            column: 31
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 65
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 7
          }
        },
        loc: {
          start: {
            line: 92,
            column: 45
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 92
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 117,
            column: 6
          },
          end: {
            line: 117,
            column: 7
          }
        },
        loc: {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 117
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 139,
            column: 6
          },
          end: {
            line: 139,
            column: 7
          }
        },
        loc: {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 139
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 6
          },
          end: {
            line: 148,
            column: 7
          }
        },
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 148
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 150,
            column: 35
          },
          end: {
            line: 150,
            column: 36
          }
        },
        loc: {
          start: {
            line: 150,
            column: 45
          },
          end: {
            line: 150,
            column: 68
          }
        },
        line: 150
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        },
        loc: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 156
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 45
          }
        },
        loc: {
          start: {
            line: 157,
            column: 49
          },
          end: {
            line: 157,
            column: 64
          }
        },
        line: 157
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 167,
            column: 38
          },
          end: {
            line: 167,
            column: 39
          }
        },
        loc: {
          start: {
            line: 167,
            column: 43
          },
          end: {
            line: 167,
            column: 53
          }
        },
        line: 167
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 168,
            column: 39
          },
          end: {
            line: 168,
            column: 40
          }
        },
        loc: {
          start: {
            line: 168,
            column: 49
          },
          end: {
            line: 168,
            column: 56
          }
        },
        line: 168
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 179,
            column: 6
          },
          end: {
            line: 179,
            column: 7
          }
        },
        loc: {
          start: {
            line: 179,
            column: 21
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 179
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 186,
            column: 6
          },
          end: {
            line: 186,
            column: 7
          }
        },
        loc: {
          start: {
            line: 186,
            column: 23
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 186
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 191,
            column: 40
          },
          end: {
            line: 191,
            column: 41
          }
        },
        loc: {
          start: {
            line: 191,
            column: 45
          },
          end: {
            line: 191,
            column: 51
          }
        },
        line: 191
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 197,
            column: 28
          },
          end: {
            line: 197,
            column: 29
          }
        },
        loc: {
          start: {
            line: 197,
            column: 36
          },
          end: {
            line: 200,
            column: 9
          }
        },
        line: 197
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 206,
            column: 6
          },
          end: {
            line: 206,
            column: 7
          }
        },
        loc: {
          start: {
            line: 206,
            column: 26
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 206
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 212,
            column: 6
          },
          end: {
            line: 212,
            column: 7
          }
        },
        loc: {
          start: {
            line: 212,
            column: 18
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 212
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 17
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 215
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 222,
            column: 19
          },
          end: {
            line: 222,
            column: 20
          }
        },
        loc: {
          start: {
            line: 222,
            column: 37
          },
          end: {
            line: 222,
            column: 82
          }
        },
        line: 222
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 223,
            column: 17
          },
          end: {
            line: 223,
            column: 18
          }
        },
        loc: {
          start: {
            line: 223,
            column: 35
          },
          end: {
            line: 223,
            column: 78
          }
        },
        line: 223
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 224,
            column: 21
          },
          end: {
            line: 224,
            column: 22
          }
        },
        loc: {
          start: {
            line: 224,
            column: 43
          },
          end: {
            line: 224,
            column: 94
          }
        },
        line: 224
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 225,
            column: 21
          }
        },
        loc: {
          start: {
            line: 225,
            column: 42
          },
          end: {
            line: 225,
            column: 92
          }
        },
        line: 225
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }, {
          start: {
            line: 42,
            column: 11
          },
          end: {
            line: 46,
            column: 5
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 42
          }
        }, {
          start: {
            line: 39,
            column: 46
          },
          end: {
            line: 39,
            column: 61
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 54,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 54,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 40
          },
          end: {
            line: 82,
            column: 54
          }
        }, {
          start: {
            line: 82,
            column: 57
          },
          end: {
            line: 82,
            column: 105
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 82,
            column: 57
          },
          end: {
            line: 82,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 74
          },
          end: {
            line: 82,
            column: 88
          }
        }, {
          start: {
            line: 82,
            column: 91
          },
          end: {
            line: 82,
            column: 105
          }
        }],
        line: 82
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 93,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 93,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 23
          },
          end: {
            line: 106,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 106,
            column: 61
          }
        }, {
          start: {
            line: 106,
            column: 64
          },
          end: {
            line: 106,
            column: 79
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 118,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 118,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 48
          },
          end: {
            line: 131,
            column: 61
          }
        }, {
          start: {
            line: 131,
            column: 64
          },
          end: {
            line: 131,
            column: 79
          }
        }],
        line: 131
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 22
          },
          end: {
            line: 149,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 149,
            column: 71
          }
        }, {
          start: {
            line: 149,
            column: 74
          },
          end: {
            line: 149,
            column: 81
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "14": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/lib/performance.ts"],
      sourcesContent: ["/**\n * Performance monitoring utility for tracking function execution times\n * and identifying performance bottlenecks\n */\n\n// Node.js compatible performance timing\nconst getPerformanceNow = (): number => {\n  if (typeof performance !== 'undefined' && performance.now) {\n    // Browser environment\n    return performance.now();\n  } else {\n    // Node.js environment\n    const hrTime = process.hrtime();\n    return hrTime[0] * 1000 + hrTime[1] / 1000000;\n  }\n};\n\ninterface PerformanceMetric {\n  name: string;\n  duration: number;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private timers: Map<string, number> = new Map();\n  private enabled: boolean = process.env.NODE_ENV === 'development';\n\n  /**\n   * Start timing a function or operation\n   * @param name - Unique identifier for the timer\n   * @param metadata - Optional metadata to store with the metric\n   */\n  startTimer(name: string, metadata?: Record<string, any>): void {\n    if (!this.enabled) return;\n\n    this.timers.set(name, getPerformanceNow());\n    if (metadata) {\n      console.log(`\u23F1\uFE0F  Started: ${name}`, metadata);\n    }\n  }\n\n  /**\n   * End timing and record the metric\n   * @param name - Timer identifier\n   * @param metadata - Optional metadata to store with the metric\n   * @returns Duration in milliseconds\n   */\n  endTimer(name: string, metadata?: Record<string, any>): number {\n    if (!this.enabled) return 0;\n\n    const startTime = this.timers.get(name);\n    if (!startTime) {\n      console.warn(`\u26A0\uFE0F  Timer '${name}' was not started`);\n      return 0;\n    }\n\n    const duration = getPerformanceNow() - startTime;\n    this.timers.delete(name);\n\n    const metric: PerformanceMetric = {\n      name,\n      duration,\n      timestamp: new Date(),\n      metadata\n    };\n\n    this.metrics.push(metric);\n\n    // Log performance metric\n    const color = duration > 1000 ? '\uD83D\uDD34' : duration > 500 ? '\uD83D\uDFE1' : '\uD83D\uDFE2';\n    console.log(`${color} Completed: ${name} - ${duration.toFixed(2)}ms`, metadata);\n\n    return duration;\n  }\n\n  /**\n   * Measure the execution time of an async function\n   * @param name - Identifier for the measurement\n   * @param fn - Async function to measure\n   * @param metadata - Optional metadata\n   * @returns Promise with the function result\n   */\n  async measureAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> {\n    if (!this.enabled) return fn();\n\n    this.startTimer(name, metadata);\n    try {\n      const result = await fn();\n      this.endTimer(name, { ...metadata, success: true });\n      return result;\n    } catch (error) {\n      this.endTimer(name, { ...metadata, success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n      throw error;\n    }\n  }\n\n  /**\n   * Measure the execution time of a synchronous function\n   * @param name - Identifier for the measurement\n   * @param fn - Function to measure\n   * @param metadata - Optional metadata\n   * @returns Function result\n   */\n  measureSync<T>(\n    name: string,\n    fn: () => T,\n    metadata?: Record<string, any>\n  ): T {\n    if (!this.enabled) return fn();\n\n    this.startTimer(name, metadata);\n    try {\n      const result = fn();\n      this.endTimer(name, { ...metadata, success: true });\n      return result;\n    } catch (error) {\n      this.endTimer(name, { ...metadata, success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n      throw error;\n    }\n  }\n\n  /**\n   * Get all recorded metrics\n   * @returns Array of performance metrics\n   */\n  getMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  /**\n   * Get metrics filtered by name pattern\n   * @param pattern - String or regex pattern to match\n   * @returns Filtered metrics\n   */\n  getMetricsByName(pattern: string | RegExp): PerformanceMetric[] {\n    const regex = typeof pattern === 'string' ? new RegExp(pattern) : pattern;\n    return this.metrics.filter(metric => regex.test(metric.name));\n  }\n\n  /**\n   * Get performance statistics for a specific metric name\n   * @param name - Metric name\n   * @returns Statistics object\n   */\n  getStats(name: string): {\n    count: number;\n    avg: number;\n    min: number;\n    max: number;\n    total: number;\n  } {\n    const metrics = this.metrics.filter(m => m.name === name);\n\n    if (metrics.length === 0) {\n      return { count: 0, avg: 0, min: 0, max: 0, total: 0 };\n    }\n\n    const durations = metrics.map(m => m.duration);\n    const total = durations.reduce((sum, d) => sum + d, 0);\n\n    return {\n      count: metrics.length,\n      avg: total / metrics.length,\n      min: Math.min(...durations),\n      max: Math.max(...durations),\n      total\n    };\n  }\n\n  /**\n   * Clear all recorded metrics\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n    this.timers.clear();\n  }\n\n  /**\n   * Generate a performance report\n   * @returns Formatted performance report\n   */\n  generateReport(): string {\n    if (this.metrics.length === 0) {\n      return 'No performance metrics recorded.';\n    }\n\n    const uniqueNames = [...new Set(this.metrics.map(m => m.name))];\n    const report = ['\\n\uD83D\uDCCA Performance Report', '='.repeat(50)];\n\n    uniqueNames.forEach(name => {\n      const stats = this.getStats(name);\n      report.push(\n        `\\n\uD83D\uDD0D ${name}:`,\n        `   Count: ${stats.count}`,\n        `   Average: ${stats.avg.toFixed(2)}ms`,\n        `   Min: ${stats.min.toFixed(2)}ms`,\n        `   Max: ${stats.max.toFixed(2)}ms`,\n        `   Total: ${stats.total.toFixed(2)}ms`\n      );\n    });\n\n    return report.join('\\n');\n  }\n\n  /**\n   * Enable or disable performance monitoring\n   * @param enabled - Whether to enable monitoring\n   */\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  /**\n   * Check if performance monitoring is enabled\n   * @returns True if enabled\n   */\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export convenience functions\nexport const startTimer = (name: string, metadata?: Record<string, any>) =>\n  performanceMonitor.startTimer(name, metadata);\n\nexport const endTimer = (name: string, metadata?: Record<string, any>) =>\n  performanceMonitor.endTimer(name, metadata);\n\nexport const measureAsync = <T>(\n  name: string,\n  fn: () => Promise<T>,\n  metadata?: Record<string, any>\n) => performanceMonitor.measureAsync(name, fn, metadata);\n\nexport const measureSync = <T>(\n  name: string,\n  fn: () => T,\n  metadata?: Record<string, any>\n) => performanceMonitor.measureSync(name, fn, metadata);\n\n// Export types and classes\nexport type { PerformanceMetric };\nexport { PerformanceMonitor };\n\n// Export singleton instance\nexport const performance = {\n  monitor: performanceMonitor,\n  startTimer,\n  endTimer,\n  measureAsync,\n  measureSync\n};"],
      names: ["PerformanceMonitor", "endTimer", "measureAsync", "measureSync", "performance", "performanceMonitor", "startTimer", "getPerformanceNow", "now", "hrTime", "process", "hrtime", "name", "metadata", "enabled", "timers", "set", "console", "log", "startTime", "get", "warn", "duration", "delete", "metric", "timestamp", "Date", "metrics", "push", "color", "toFixed", "fn", "result", "success", "error", "Error", "message", "getMetrics", "getMetricsByName", "pattern", "regex", "RegExp", "filter", "test", "getStats", "m", "length", "count", "avg", "min", "max", "total", "durations", "map", "reduce", "sum", "d", "Math", "clearMetrics", "clear", "generateReport", "uniqueNames", "Set", "report", "repeat", "forEach", "stats", "join", "setEnabled", "isEnabled", "Map", "env", "NODE_ENV", "monitor"],
      mappings: "AAAA;;;CAGC,GAED,wCAAwC;;;;;;;;;;;;IAsP/BA,kBAAkB;eAAlBA;;IAjBIC,QAAQ;eAARA;;IAGAC,YAAY;eAAZA;;IAMAC,WAAW;eAAXA;;IAWAC,WAAW;eAAXA;;IA1BAC,kBAAkB;eAAlBA;;IAGAC,UAAU;eAAVA;;;AAjOb,MAAMC,oBAAoB;IACxB,IAAI,OAAOH,gBAAgB,eAAeA,YAAYI,GAAG,EAAE;QACzD,sBAAsB;QACtB,OAAOJ,YAAYI,GAAG;IACxB,OAAO;QACL,sBAAsB;QACtB,MAAMC,SAASC,QAAQC,MAAM;QAC7B,OAAOF,MAAM,CAAC,EAAE,GAAG,OAAOA,MAAM,CAAC,EAAE,GAAG;IACxC;AACF;AASA,MAAMT;IAKJ;;;;GAIC,GACDM,WAAWM,IAAY,EAAEC,QAA8B,EAAQ;QAC7D,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;QAEnB,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAML;QACtB,IAAIM,UAAU;YACZI,QAAQC,GAAG,CAAC,CAAC,aAAa,EAAEN,KAAK,CAAC,EAAEC;QACtC;IACF;IAEA;;;;;GAKC,GACDZ,SAASW,IAAY,EAAEC,QAA8B,EAAU;QAC7D,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,OAAO;QAE1B,MAAMK,YAAY,IAAI,CAACJ,MAAM,CAACK,GAAG,CAACR;QAClC,IAAI,CAACO,WAAW;YACdF,QAAQI,IAAI,CAAC,CAAC,WAAW,EAAET,KAAK,iBAAiB,CAAC;YAClD,OAAO;QACT;QAEA,MAAMU,WAAWf,sBAAsBY;QACvC,IAAI,CAACJ,MAAM,CAACQ,MAAM,CAACX;QAEnB,MAAMY,SAA4B;YAChCZ;YACAU;YACAG,WAAW,IAAIC;YACfb;QACF;QAEA,IAAI,CAACc,OAAO,CAACC,IAAI,CAACJ;QAElB,yBAAyB;QACzB,MAAMK,QAAQP,WAAW,OAAO,iBAAOA,WAAW,MAAM,iBAAO;QAC/DL,QAAQC,GAAG,CAAC,CAAC,EAAEW,MAAM,YAAY,EAAEjB,KAAK,GAAG,EAAEU,SAASQ,OAAO,CAAC,GAAG,EAAE,CAAC,EAAEjB;QAEtE,OAAOS;IACT;IAEA;;;;;;GAMC,GACD,MAAMpB,aACJU,IAAY,EACZmB,EAAoB,EACpBlB,QAA8B,EAClB;QACZ,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,OAAOiB;QAE1B,IAAI,CAACzB,UAAU,CAACM,MAAMC;QACtB,IAAI;YACF,MAAMmB,SAAS,MAAMD;YACrB,IAAI,CAAC9B,QAAQ,CAACW,MAAM;gBAAE,GAAGC,QAAQ;gBAAEoB,SAAS;YAAK;YACjD,OAAOD;QACT,EAAE,OAAOE,OAAO;YACd,IAAI,CAACjC,QAAQ,CAACW,MAAM;gBAAE,GAAGC,QAAQ;gBAAEoB,SAAS;gBAAOC,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YAAgB;YACnH,MAAMF;QACR;IACF;IAEA;;;;;;GAMC,GACD/B,YACES,IAAY,EACZmB,EAAW,EACXlB,QAA8B,EAC3B;QACH,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,OAAOiB;QAE1B,IAAI,CAACzB,UAAU,CAACM,MAAMC;QACtB,IAAI;YACF,MAAMmB,SAASD;YACf,IAAI,CAAC9B,QAAQ,CAACW,MAAM;gBAAE,GAAGC,QAAQ;gBAAEoB,SAAS;YAAK;YACjD,OAAOD;QACT,EAAE,OAAOE,OAAO;YACd,IAAI,CAACjC,QAAQ,CAACW,MAAM;gBAAE,GAAGC,QAAQ;gBAAEoB,SAAS;gBAAOC,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YAAgB;YACnH,MAAMF;QACR;IACF;IAEA;;;GAGC,GACDG,aAAkC;QAChC,OAAO;eAAI,IAAI,CAACV,OAAO;SAAC;IAC1B;IAEA;;;;GAIC,GACDW,iBAAiBC,OAAwB,EAAuB;QAC9D,MAAMC,QAAQ,OAAOD,YAAY,WAAW,IAAIE,OAAOF,WAAWA;QAClE,OAAO,IAAI,CAACZ,OAAO,CAACe,MAAM,CAAClB,CAAAA,SAAUgB,MAAMG,IAAI,CAACnB,OAAOZ,IAAI;IAC7D;IAEA;;;;GAIC,GACDgC,SAAShC,IAAY,EAMnB;QACA,MAAMe,UAAU,IAAI,CAACA,OAAO,CAACe,MAAM,CAACG,CAAAA,IAAKA,EAAEjC,IAAI,KAAKA;QAEpD,IAAIe,QAAQmB,MAAM,KAAK,GAAG;YACxB,OAAO;gBAAEC,OAAO;gBAAGC,KAAK;gBAAGC,KAAK;gBAAGC,KAAK;gBAAGC,OAAO;YAAE;QACtD;QAEA,MAAMC,YAAYzB,QAAQ0B,GAAG,CAACR,CAAAA,IAAKA,EAAEvB,QAAQ;QAC7C,MAAM6B,QAAQC,UAAUE,MAAM,CAAC,CAACC,KAAKC,IAAMD,MAAMC,GAAG;QAEpD,OAAO;YACLT,OAAOpB,QAAQmB,MAAM;YACrBE,KAAKG,QAAQxB,QAAQmB,MAAM;YAC3BG,KAAKQ,KAAKR,GAAG,IAAIG;YACjBF,KAAKO,KAAKP,GAAG,IAAIE;YACjBD;QACF;IACF;IAEA;;GAEC,GACDO,eAAqB;QACnB,IAAI,CAAC/B,OAAO,GAAG,EAAE;QACjB,IAAI,CAACZ,MAAM,CAAC4C,KAAK;IACnB;IAEA;;;GAGC,GACDC,iBAAyB;QACvB,IAAI,IAAI,CAACjC,OAAO,CAACmB,MAAM,KAAK,GAAG;YAC7B,OAAO;QACT;QAEA,MAAMe,cAAc;eAAI,IAAIC,IAAI,IAAI,CAACnC,OAAO,CAAC0B,GAAG,CAACR,CAAAA,IAAKA,EAAEjC,IAAI;SAAG;QAC/D,MAAMmD,SAAS;YAAC;YAA2B,IAAIC,MAAM,CAAC;SAAI;QAE1DH,YAAYI,OAAO,CAACrD,CAAAA;YAClB,MAAMsD,QAAQ,IAAI,CAACtB,QAAQ,CAAChC;YAC5BmD,OAAOnC,IAAI,CACT,CAAC,KAAK,EAAEhB,KAAK,CAAC,CAAC,EACf,CAAC,UAAU,EAAEsD,MAAMnB,KAAK,CAAC,CAAC,EAC1B,CAAC,YAAY,EAAEmB,MAAMlB,GAAG,CAAClB,OAAO,CAAC,GAAG,EAAE,CAAC,EACvC,CAAC,QAAQ,EAAEoC,MAAMjB,GAAG,CAACnB,OAAO,CAAC,GAAG,EAAE,CAAC,EACnC,CAAC,QAAQ,EAAEoC,MAAMhB,GAAG,CAACpB,OAAO,CAAC,GAAG,EAAE,CAAC,EACnC,CAAC,UAAU,EAAEoC,MAAMf,KAAK,CAACrB,OAAO,CAAC,GAAG,EAAE,CAAC;QAE3C;QAEA,OAAOiC,OAAOI,IAAI,CAAC;IACrB;IAEA;;;GAGC,GACDC,WAAWtD,OAAgB,EAAQ;QACjC,IAAI,CAACA,OAAO,GAAGA;IACjB;IAEA;;;GAGC,GACDuD,YAAqB;QACnB,OAAO,IAAI,CAACvD,OAAO;IACrB;;aAvMQa,UAA+B,EAAE;aACjCZ,SAA8B,IAAIuD;aAClCxD,UAAmBJ,QAAQ6D,GAAG,CAACC,QAAQ,KAAK;;AAsMtD;AAGO,MAAMnE,qBAAqB,IAAIL;AAG/B,MAAMM,aAAa,CAACM,MAAcC,WACvCR,mBAAmBC,UAAU,CAACM,MAAMC;AAE/B,MAAMZ,WAAW,CAACW,MAAcC,WACrCR,mBAAmBJ,QAAQ,CAACW,MAAMC;AAE7B,MAAMX,eAAe,CAC1BU,MACAmB,IACAlB,WACGR,mBAAmBH,YAAY,CAACU,MAAMmB,IAAIlB;AAExC,MAAMV,cAAc,CACzBS,MACAmB,IACAlB,WACGR,mBAAmBF,WAAW,CAACS,MAAMmB,IAAIlB;AAOvC,MAAMT,cAAc;IACzBqE,SAASpE;IACTC;IACAL;IACAC;IACAC;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d55f0e3a8e36a23cd4a925678e044b489e1d94b9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kw8xzvnqf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kw8xzvnqf();
cov_kw8xzvnqf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[0]++;
  cov_kw8xzvnqf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_kw8xzvnqf().s[3]++;
_export(exports, {
  PerformanceMonitor: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[1]++;
    cov_kw8xzvnqf().s[4]++;
    return PerformanceMonitor;
  },
  endTimer: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[2]++;
    cov_kw8xzvnqf().s[5]++;
    return endTimer;
  },
  measureAsync: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[3]++;
    cov_kw8xzvnqf().s[6]++;
    return measureAsync;
  },
  measureSync: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[4]++;
    cov_kw8xzvnqf().s[7]++;
    return measureSync;
  },
  performance: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[5]++;
    cov_kw8xzvnqf().s[8]++;
    return performance;
  },
  performanceMonitor: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[6]++;
    cov_kw8xzvnqf().s[9]++;
    return performanceMonitor;
  },
  startTimer: function () {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[7]++;
    cov_kw8xzvnqf().s[10]++;
    return startTimer;
  }
});
/* istanbul ignore next */
cov_kw8xzvnqf().s[11]++;
const getPerformanceNow = () => {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[8]++;
  cov_kw8xzvnqf().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_kw8xzvnqf().b[1][0]++, typeof performance !== "undefined") &&
  /* istanbul ignore next */
  (cov_kw8xzvnqf().b[1][1]++, performance.now)) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().b[0][0]++;
    cov_kw8xzvnqf().s[13]++;
    // Browser environment
    return performance.now();
  } else {
    /* istanbul ignore next */
    cov_kw8xzvnqf().b[0][1]++;
    // Node.js environment
    const hrTime =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[14]++, process.hrtime());
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[15]++;
    return hrTime[0] * 1000 + hrTime[1] / 1000000;
  }
};
class PerformanceMonitor {
  /**
  * Start timing a function or operation
  * @param name - Unique identifier for the timer
  * @param metadata - Optional metadata to store with the metric
  */
  startTimer(name, metadata) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[9]++;
    cov_kw8xzvnqf().s[16]++;
    if (!this.enabled) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[2][0]++;
      cov_kw8xzvnqf().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[2][1]++;
    }
    cov_kw8xzvnqf().s[18]++;
    this.timers.set(name, getPerformanceNow());
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[19]++;
    if (metadata) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[3][0]++;
      cov_kw8xzvnqf().s[20]++;
      console.log(`⏱️  Started: ${name}`, metadata);
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[3][1]++;
    }
  }
  /**
  * End timing and record the metric
  * @param name - Timer identifier
  * @param metadata - Optional metadata to store with the metric
  * @returns Duration in milliseconds
  */
  endTimer(name, metadata) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[10]++;
    cov_kw8xzvnqf().s[21]++;
    if (!this.enabled) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[4][0]++;
      cov_kw8xzvnqf().s[22]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[4][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[23]++, this.timers.get(name));
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[24]++;
    if (!startTime) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[5][0]++;
      cov_kw8xzvnqf().s[25]++;
      console.warn(`⚠️  Timer '${name}' was not started`);
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[26]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[5][1]++;
    }
    const duration =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[27]++, getPerformanceNow() - startTime);
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[28]++;
    this.timers.delete(name);
    const metric =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[29]++, {
      name,
      duration,
      timestamp: new Date(),
      metadata
    });
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[30]++;
    this.metrics.push(metric);
    // Log performance metric
    const color =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[31]++, duration > 1000 ?
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[6][0]++, "\uD83D\uDD34") :
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[6][1]++, duration > 500 ?
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[7][0]++, "\uD83D\uDFE1") :
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[7][1]++, "\uD83D\uDFE2")));
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[32]++;
    console.log(`${color} Completed: ${name} - ${duration.toFixed(2)}ms`, metadata);
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[33]++;
    return duration;
  }
  /**
  * Measure the execution time of an async function
  * @param name - Identifier for the measurement
  * @param fn - Async function to measure
  * @param metadata - Optional metadata
  * @returns Promise with the function result
  */
  async measureAsync(name, fn, metadata) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[11]++;
    cov_kw8xzvnqf().s[34]++;
    if (!this.enabled) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[8][0]++;
      cov_kw8xzvnqf().s[35]++;
      return fn();
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[8][1]++;
    }
    cov_kw8xzvnqf().s[36]++;
    this.startTimer(name, metadata);
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[37]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_kw8xzvnqf().s[38]++, await fn());
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[39]++;
      this.endTimer(name, {
        ...metadata,
        success: true
      });
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[40]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[41]++;
      this.endTimer(name, {
        ...metadata,
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_kw8xzvnqf().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_kw8xzvnqf().b[9][1]++, "Unknown error")
      });
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[42]++;
      throw error;
    }
  }
  /**
  * Measure the execution time of a synchronous function
  * @param name - Identifier for the measurement
  * @param fn - Function to measure
  * @param metadata - Optional metadata
  * @returns Function result
  */
  measureSync(name, fn, metadata) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[12]++;
    cov_kw8xzvnqf().s[43]++;
    if (!this.enabled) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[10][0]++;
      cov_kw8xzvnqf().s[44]++;
      return fn();
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[10][1]++;
    }
    cov_kw8xzvnqf().s[45]++;
    this.startTimer(name, metadata);
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[46]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_kw8xzvnqf().s[47]++, fn());
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[48]++;
      this.endTimer(name, {
        ...metadata,
        success: true
      });
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[49]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[50]++;
      this.endTimer(name, {
        ...metadata,
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_kw8xzvnqf().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_kw8xzvnqf().b[11][1]++, "Unknown error")
      });
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[51]++;
      throw error;
    }
  }
  /**
  * Get all recorded metrics
  * @returns Array of performance metrics
  */
  getMetrics() {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[13]++;
    cov_kw8xzvnqf().s[52]++;
    return [...this.metrics];
  }
  /**
  * Get metrics filtered by name pattern
  * @param pattern - String or regex pattern to match
  * @returns Filtered metrics
  */
  getMetricsByName(pattern) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[14]++;
    const regex =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[53]++, typeof pattern === "string" ?
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[12][0]++, new RegExp(pattern)) :
    /* istanbul ignore next */
    (cov_kw8xzvnqf().b[12][1]++, pattern));
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[54]++;
    return this.metrics.filter(metric => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[15]++;
      cov_kw8xzvnqf().s[55]++;
      return regex.test(metric.name);
    });
  }
  /**
  * Get performance statistics for a specific metric name
  * @param name - Metric name
  * @returns Statistics object
  */
  getStats(name) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[16]++;
    const metrics =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[56]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[17]++;
      cov_kw8xzvnqf().s[57]++;
      return m.name === name;
    }));
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[58]++;
    if (metrics.length === 0) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[13][0]++;
      cov_kw8xzvnqf().s[59]++;
      return {
        count: 0,
        avg: 0,
        min: 0,
        max: 0,
        total: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[13][1]++;
    }
    const durations =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[60]++, metrics.map(m => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[18]++;
      cov_kw8xzvnqf().s[61]++;
      return m.duration;
    }));
    const total =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[62]++, durations.reduce((sum, d) => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[19]++;
      cov_kw8xzvnqf().s[63]++;
      return sum + d;
    }, 0));
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[64]++;
    return {
      count: metrics.length,
      avg: total / metrics.length,
      min: Math.min(...durations),
      max: Math.max(...durations),
      total
    };
  }
  /**
  * Clear all recorded metrics
  */
  clearMetrics() {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[20]++;
    cov_kw8xzvnqf().s[65]++;
    this.metrics = [];
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[66]++;
    this.timers.clear();
  }
  /**
  * Generate a performance report
  * @returns Formatted performance report
  */
  generateReport() {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[21]++;
    cov_kw8xzvnqf().s[67]++;
    if (this.metrics.length === 0) {
      /* istanbul ignore next */
      cov_kw8xzvnqf().b[14][0]++;
      cov_kw8xzvnqf().s[68]++;
      return "No performance metrics recorded.";
    } else
    /* istanbul ignore next */
    {
      cov_kw8xzvnqf().b[14][1]++;
    }
    const uniqueNames =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[69]++, [...new Set(this.metrics.map(m => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[22]++;
      cov_kw8xzvnqf().s[70]++;
      return m.name;
    }))]);
    const report =
    /* istanbul ignore next */
    (cov_kw8xzvnqf().s[71]++, ["\n\uD83D\uDCCA Performance Report", "=".repeat(50)]);
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[72]++;
    uniqueNames.forEach(name => {
      /* istanbul ignore next */
      cov_kw8xzvnqf().f[23]++;
      const stats =
      /* istanbul ignore next */
      (cov_kw8xzvnqf().s[73]++, this.getStats(name));
      /* istanbul ignore next */
      cov_kw8xzvnqf().s[74]++;
      report.push(`\n🔍 ${name}:`, `   Count: ${stats.count}`, `   Average: ${stats.avg.toFixed(2)}ms`, `   Min: ${stats.min.toFixed(2)}ms`, `   Max: ${stats.max.toFixed(2)}ms`, `   Total: ${stats.total.toFixed(2)}ms`);
    });
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[75]++;
    return report.join("\n");
  }
  /**
  * Enable or disable performance monitoring
  * @param enabled - Whether to enable monitoring
  */
  setEnabled(enabled) {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[24]++;
    cov_kw8xzvnqf().s[76]++;
    this.enabled = enabled;
  }
  /**
  * Check if performance monitoring is enabled
  * @returns True if enabled
  */
  isEnabled() {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[25]++;
    cov_kw8xzvnqf().s[77]++;
    return this.enabled;
  }
  constructor() {
    /* istanbul ignore next */
    cov_kw8xzvnqf().f[26]++;
    cov_kw8xzvnqf().s[78]++;
    this.metrics = [];
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[79]++;
    this.timers = new Map();
    /* istanbul ignore next */
    cov_kw8xzvnqf().s[80]++;
    this.enabled = process.env.NODE_ENV === "development";
  }
}
const performanceMonitor =
/* istanbul ignore next */
(cov_kw8xzvnqf().s[81]++, new PerformanceMonitor());
/* istanbul ignore next */
cov_kw8xzvnqf().s[82]++;
const startTimer = (name, metadata) => {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[27]++;
  cov_kw8xzvnqf().s[83]++;
  return performanceMonitor.startTimer(name, metadata);
};
/* istanbul ignore next */
cov_kw8xzvnqf().s[84]++;
const endTimer = (name, metadata) => {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[28]++;
  cov_kw8xzvnqf().s[85]++;
  return performanceMonitor.endTimer(name, metadata);
};
/* istanbul ignore next */
cov_kw8xzvnqf().s[86]++;
const measureAsync = (name, fn, metadata) => {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[29]++;
  cov_kw8xzvnqf().s[87]++;
  return performanceMonitor.measureAsync(name, fn, metadata);
};
/* istanbul ignore next */
cov_kw8xzvnqf().s[88]++;
const measureSync = (name, fn, metadata) => {
  /* istanbul ignore next */
  cov_kw8xzvnqf().f[30]++;
  cov_kw8xzvnqf().s[89]++;
  return performanceMonitor.measureSync(name, fn, metadata);
};
const performance =
/* istanbul ignore next */
(cov_kw8xzvnqf().s[90]++, {
  monitor: performanceMonitor,
  startTimer,
  endTimer,
  measureAsync,
  measureSync
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,