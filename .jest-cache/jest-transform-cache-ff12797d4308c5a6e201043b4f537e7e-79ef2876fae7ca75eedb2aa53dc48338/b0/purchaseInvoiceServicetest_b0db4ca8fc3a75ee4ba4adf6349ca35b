8d55de0579255c5ac0d754bd82047031
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _purchaseInvoiceService = require("../../src/services/purchaseInvoiceService");
const _client = require("@prisma/client");
const _db = require("../../src/lib/db");
// Mock the database
_globals.jest.mock("@/lib/db", ()=>({
        db: {
            purchaseInvoice: {
                create: _globals.jest.fn(),
                findUnique: _globals.jest.fn(),
                findMany: _globals.jest.fn(),
                update: _globals.jest.fn(),
                delete: _globals.jest.fn()
            },
            purchaseInvoiceItem: {
                createMany: _globals.jest.fn(),
                deleteMany: _globals.jest.fn()
            },
            $transaction: _globals.jest.fn()
        }
    }));
const mockDb = _db.db;
(0, _globals.describe)("PurchaseInvoiceService", ()=>{
    let service;
    (0, _globals.beforeEach)(()=>{
        service = new _purchaseInvoiceService.PurchaseInvoiceService();
        _globals.jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("createPurchaseInvoice", ()=>{
        (0, _globals.it)("should create a purchase invoice successfully", async ()=>{
            const invoiceData = {
                invoiceNumber: "PI-001",
                supplierId: 1,
                totalAmount: 1000,
                status: _client.PurchaseInvoiceStatus.PENDING,
                notes: "Test invoice",
                shopId: 1
            };
            const mockCreatedInvoice = {
                id: 1,
                ...invoiceData,
                createdAt: new Date(),
                updatedAt: new Date(),
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.create.mockResolvedValue(mockCreatedInvoice);
            const result = await service.createPurchaseInvoice(invoiceData);
            (0, _globals.expect)(mockDb.purchaseInvoice.create).toHaveBeenCalledWith({
                data: invoiceData,
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockCreatedInvoice);
        });
        (0, _globals.it)("should handle database errors", async ()=>{
            const invoiceData = {
                invoiceNumber: "PI-001",
                supplierId: 1,
                totalAmount: 1000,
                status: _client.PurchaseInvoiceStatus.PENDING
            };
            mockDb.purchaseInvoice.create.mockRejectedValue(new Error("Database error"));
            await (0, _globals.expect)(service.createPurchaseInvoice(invoiceData)).rejects.toThrow("Database error");
        });
    });
    (0, _globals.describe)("createPurchaseInvoiceWithItems", ()=>{
        (0, _globals.it)("should create a purchase invoice with items successfully", async ()=>{
            const invoiceData = {
                invoiceNumber: "PI-002",
                supplierId: 1,
                totalAmount: 1500,
                status: _client.PurchaseInvoiceStatus.PENDING,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    },
                    {
                        productId: 2,
                        quantity: 5,
                        price: 100
                    }
                ]
            };
            const mockCreatedInvoice = {
                id: 1,
                invoiceNumber: "PI-002",
                supplierId: 1,
                totalAmount: 1500,
                status: _client.PurchaseInvoiceStatus.PENDING,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            const mockFinalInvoice = {
                ...mockCreatedInvoice,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: [
                    {
                        id: 1,
                        purchaseInvoiceId: 1,
                        productId: 1,
                        quantity: 10,
                        price: 100,
                        product: {
                            id: 1,
                            name: "Product 1"
                        }
                    },
                    {
                        id: 2,
                        purchaseInvoiceId: 1,
                        productId: 2,
                        quantity: 5,
                        price: 100,
                        product: {
                            id: 2,
                            name: "Product 2"
                        }
                    }
                ]
            };
            mockDb.$transaction.mockImplementation(async (callback)=>{
                const mockTx = {
                    purchaseInvoice: {
                        create: _globals.jest.fn().mockResolvedValue(mockCreatedInvoice),
                        findUnique: _globals.jest.fn().mockResolvedValue(mockFinalInvoice)
                    },
                    purchaseInvoiceItem: {
                        createMany: _globals.jest.fn().mockResolvedValue({
                            count: 2
                        })
                    }
                };
                return await callback(mockTx);
            });
            const result = await service.createPurchaseInvoiceWithItems(invoiceData);
            (0, _globals.expect)(mockDb.$transaction).toHaveBeenCalled();
            (0, _globals.expect)(result).toEqual(mockFinalInvoice);
        });
        (0, _globals.it)("should handle empty items array", async ()=>{
            const invoiceData = {
                invoiceNumber: "PI-003",
                supplierId: 1,
                totalAmount: 0,
                status: _client.PurchaseInvoiceStatus.PENDING,
                items: []
            };
            const mockCreatedInvoice = {
                id: 1,
                invoiceNumber: "PI-003",
                supplierId: 1,
                totalAmount: 0,
                status: _client.PurchaseInvoiceStatus.PENDING,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.$transaction.mockImplementation(async (callback)=>{
                const mockTx = {
                    purchaseInvoice: {
                        create: _globals.jest.fn().mockResolvedValue(mockCreatedInvoice),
                        findUnique: _globals.jest.fn().mockResolvedValue(mockCreatedInvoice)
                    },
                    purchaseInvoiceItem: {
                        createMany: _globals.jest.fn()
                    }
                };
                return await callback(mockTx);
            });
            const result = await service.createPurchaseInvoiceWithItems(invoiceData);
            (0, _globals.expect)(result).toEqual(mockCreatedInvoice);
        });
    });
    (0, _globals.describe)("createPurchaseInvoiceWithCalculations", ()=>{
        (0, _globals.it)("should calculate total amount from items and create invoice", async ()=>{
            const invoiceData = {
                invoiceNumber: "PI-004",
                supplierId: 1,
                totalAmount: 0,
                status: _client.PurchaseInvoiceStatus.PENDING,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    },
                    {
                        productId: 2,
                        quantity: 5,
                        price: 200
                    }
                ]
            };
            const mockFinalInvoice = {
                id: 1,
                invoiceNumber: "PI-004",
                supplierId: 1,
                totalAmount: 2000,
                status: _client.PurchaseInvoiceStatus.PENDING,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.$transaction.mockImplementation(async (callback)=>{
                const mockTx = {
                    purchaseInvoice: {
                        create: _globals.jest.fn().mockResolvedValue(mockFinalInvoice),
                        findUnique: _globals.jest.fn().mockResolvedValue(mockFinalInvoice)
                    },
                    purchaseInvoiceItem: {
                        createMany: _globals.jest.fn().mockResolvedValue({
                            count: 2
                        })
                    }
                };
                return await callback(mockTx);
            });
            const result = await service.createPurchaseInvoiceWithCalculations(invoiceData);
            (0, _globals.expect)(result.totalAmount).toBe(2000);
        });
    });
    (0, _globals.describe)("getPurchaseInvoiceById", ()=>{
        (0, _globals.it)("should retrieve a purchase invoice by ID", async ()=>{
            const invoiceId = 1;
            const mockInvoice = {
                id: invoiceId,
                invoiceNumber: "PI-001",
                supplierId: 1,
                totalAmount: 1000,
                status: _client.PurchaseInvoiceStatus.PENDING,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.findUnique.mockResolvedValue(mockInvoice);
            const result = await service.getPurchaseInvoiceById(invoiceId);
            (0, _globals.expect)(mockDb.purchaseInvoice.findUnique).toHaveBeenCalledWith({
                where: {
                    id: invoiceId
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockInvoice);
        });
        (0, _globals.it)("should return null for non-existent invoice", async ()=>{
            const invoiceId = 999;
            mockDb.purchaseInvoice.findUnique.mockResolvedValue(null);
            const result = await service.getPurchaseInvoiceById(invoiceId);
            (0, _globals.expect)(result).toBeNull();
        });
    });
    (0, _globals.describe)("getPurchaseInvoices", ()=>{
        (0, _globals.it)("should retrieve purchase invoices with default pagination", async ()=>{
            const mockInvoices = [
                {
                    id: 1,
                    invoiceNumber: "PI-001",
                    supplierId: 1,
                    totalAmount: 1000,
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    supplier: {
                        id: 1,
                        name: "Supplier 1"
                    },
                    items: []
                },
                {
                    id: 2,
                    invoiceNumber: "PI-002",
                    supplierId: 2,
                    totalAmount: 1500,
                    status: _client.PurchaseInvoiceStatus.APPROVED,
                    supplier: {
                        id: 2,
                        name: "Supplier 2"
                    },
                    items: []
                }
            ];
            mockDb.purchaseInvoice.findMany.mockResolvedValue(mockInvoices);
            const result = await service.getPurchaseInvoices();
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                skip: 0,
                take: 10,
                orderBy: {
                    createdAt: "desc"
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockInvoices);
        });
        (0, _globals.it)("should retrieve purchase invoices with custom pagination and sorting", async ()=>{
            const options = {
                page: 2,
                limit: 5,
                sortBy: "totalAmount",
                sortOrder: "asc"
            };
            mockDb.purchaseInvoice.findMany.mockResolvedValue([]);
            await service.getPurchaseInvoices(options);
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                skip: 5,
                take: 5,
                orderBy: {
                    totalAmount: "asc"
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
        });
    });
    (0, _globals.describe)("updatePurchaseInvoice", ()=>{
        (0, _globals.it)("should update a purchase invoice successfully", async ()=>{
            const invoiceId = 1;
            const updateData = {
                totalAmount: 1200,
                status: _client.PurchaseInvoiceStatus.APPROVED,
                notes: "Updated notes"
            };
            const mockUpdatedInvoice = {
                id: invoiceId,
                invoiceNumber: "PI-001",
                supplierId: 1,
                ...updateData,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.update.mockResolvedValue(mockUpdatedInvoice);
            const result = await service.updatePurchaseInvoice(invoiceId, updateData);
            (0, _globals.expect)(mockDb.purchaseInvoice.update).toHaveBeenCalledWith({
                where: {
                    id: invoiceId
                },
                data: updateData,
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockUpdatedInvoice);
        });
    });
    (0, _globals.describe)("updatePurchaseInvoiceStatus", ()=>{
        (0, _globals.it)("should update purchase invoice status", async ()=>{
            const invoiceId = 1;
            const newStatus = _client.PurchaseInvoiceStatus.APPROVED;
            const mockUpdatedInvoice = {
                id: invoiceId,
                status: newStatus,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.update.mockResolvedValue(mockUpdatedInvoice);
            const result = await service.updatePurchaseInvoiceStatus(invoiceId, newStatus);
            (0, _globals.expect)(mockDb.purchaseInvoice.update).toHaveBeenCalledWith({
                where: {
                    id: invoiceId
                },
                data: {
                    status: newStatus
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockUpdatedInvoice);
        });
    });
    (0, _globals.describe)("deletePurchaseInvoice", ()=>{
        (0, _globals.it)("should delete a purchase invoice and its items", async ()=>{
            const invoiceId = 1;
            const mockDeletedInvoice = {
                id: invoiceId,
                invoiceNumber: "PI-001"
            };
            mockDb.$transaction.mockImplementation(async (callback)=>{
                const mockTx = {
                    purchaseInvoiceItem: {
                        deleteMany: _globals.jest.fn().mockResolvedValue({
                            count: 2
                        })
                    },
                    purchaseInvoice: {
                        delete: _globals.jest.fn().mockResolvedValue(mockDeletedInvoice)
                    }
                };
                return await callback(mockTx);
            });
            const result = await service.deletePurchaseInvoice(invoiceId);
            (0, _globals.expect)(mockDb.$transaction).toHaveBeenCalled();
            (0, _globals.expect)(result).toEqual(mockDeletedInvoice);
        });
    });
    (0, _globals.describe)("searchPurchaseInvoices", ()=>{
        (0, _globals.it)("should search purchase invoices with supplier filter", async ()=>{
            const filters = {
                supplierId: 1
            };
            const mockInvoices = [
                {
                    id: 1,
                    supplierId: 1,
                    supplier: {
                        id: 1,
                        name: "Supplier 1"
                    },
                    items: []
                }
            ];
            mockDb.purchaseInvoice.findMany.mockResolvedValue(mockInvoices);
            const result = await service.searchPurchaseInvoices(filters);
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                where: {
                    supplierId: 1
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                },
                orderBy: {
                    createdAt: "desc"
                }
            });
            (0, _globals.expect)(result).toEqual(mockInvoices);
        });
        (0, _globals.it)("should search purchase invoices with date range filter", async ()=>{
            const startDate = new Date("2024-01-01");
            const endDate = new Date("2024-01-31");
            const filters = {
                startDate,
                endDate
            };
            mockDb.purchaseInvoice.findMany.mockResolvedValue([]);
            await service.searchPurchaseInvoices(filters);
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                where: {
                    createdAt: {
                        gte: startDate,
                        lte: endDate
                    }
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                },
                orderBy: {
                    createdAt: "desc"
                }
            });
        });
        (0, _globals.it)("should search purchase invoices with text search", async ()=>{
            const filters = {
                search: "test invoice"
            };
            mockDb.purchaseInvoice.findMany.mockResolvedValue([]);
            await service.searchPurchaseInvoices(filters);
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                where: {
                    OR: [
                        {
                            invoiceNumber: {
                                contains: "test invoice",
                                mode: "insensitive"
                            }
                        },
                        {
                            notes: {
                                contains: "test invoice",
                                mode: "insensitive"
                            }
                        }
                    ]
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                },
                orderBy: {
                    createdAt: "desc"
                }
            });
        });
        (0, _globals.it)("should search purchase invoices with multiple filters", async ()=>{
            const filters = {
                supplierId: 1,
                status: _client.PurchaseInvoiceStatus.PENDING,
                search: "test",
                startDate: new Date("2024-01-01")
            };
            mockDb.purchaseInvoice.findMany.mockResolvedValue([]);
            await service.searchPurchaseInvoices(filters);
            (0, _globals.expect)(mockDb.purchaseInvoice.findMany).toHaveBeenCalledWith({
                where: {
                    supplierId: 1,
                    status: _client.PurchaseInvoiceStatus.PENDING,
                    createdAt: {
                        gte: new Date("2024-01-01")
                    },
                    OR: [
                        {
                            invoiceNumber: {
                                contains: "test",
                                mode: "insensitive"
                            }
                        },
                        {
                            notes: {
                                contains: "test",
                                mode: "insensitive"
                            }
                        }
                    ]
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                },
                orderBy: {
                    createdAt: "desc"
                }
            });
        });
    });
    (0, _globals.describe)("approvePurchaseInvoice", ()=>{
        (0, _globals.it)("should approve a purchase invoice", async ()=>{
            const invoiceId = 1;
            const mockApprovedInvoice = {
                id: invoiceId,
                status: _client.PurchaseInvoiceStatus.APPROVED,
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.update.mockResolvedValue(mockApprovedInvoice);
            const result = await service.approvePurchaseInvoice(invoiceId);
            (0, _globals.expect)(mockDb.purchaseInvoice.update).toHaveBeenCalledWith({
                where: {
                    id: invoiceId
                },
                data: {
                    status: _client.PurchaseInvoiceStatus.APPROVED
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockApprovedInvoice);
        });
    });
    (0, _globals.describe)("getPurchaseInvoiceWithDetails", ()=>{
        (0, _globals.it)("should get purchase invoice with details (alias for getPurchaseInvoiceById)", async ()=>{
            const invoiceId = 1;
            const mockInvoice = {
                id: invoiceId,
                invoiceNumber: "PI-001",
                supplier: {
                    id: 1,
                    name: "Test Supplier"
                },
                items: []
            };
            mockDb.purchaseInvoice.findUnique.mockResolvedValue(mockInvoice);
            const result = await service.getPurchaseInvoiceWithDetails(invoiceId);
            (0, _globals.expect)(mockDb.purchaseInvoice.findUnique).toHaveBeenCalledWith({
                where: {
                    id: invoiceId
                },
                include: {
                    supplier: true,
                    items: {
                        include: {
                            product: true
                        }
                    }
                }
            });
            (0, _globals.expect)(result).toEqual(mockInvoice);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,