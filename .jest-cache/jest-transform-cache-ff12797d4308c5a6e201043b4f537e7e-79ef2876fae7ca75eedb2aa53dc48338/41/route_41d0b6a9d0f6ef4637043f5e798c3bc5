a6278702355815bf899ea20d81bf09bb
"use strict";

/* istanbul ignore next */
function cov_o5qyqnafe() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/permissions/route.ts";
  var hash = "9f1711ca78479f1fce7e65d9adf2618c28e652e5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/permissions/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 86
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "7": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 19
          },
          end: {
            line: 35,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 44
          },
          end: {
            line: 35,
            column: 57
          }
        }, {
          start: {
            line: 35,
            column: 60
          },
          end: {
            line: 35,
            column: 73
          }
        }],
        line: 35
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/permissions/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n/**\n * GET handler for retrieving all permissions\n */\nexport async function GET() {\n    try {\n        const permissions = await prisma.permission.findMany({\n            orderBy: {\n                name: 'asc'\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Permissions retrieved successfully',\n            data: permissions\n        });\n    } catch (error) {\n        console.error('Error fetching permissions:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to retrieve permissions',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["GET", "permissions", "prisma", "permission", "findMany", "orderBy", "name", "NextResponse", "json", "success", "message", "data", "error", "console", "Error", "String", "status"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANO;+DACV;;;;;;AAKZ,eAAeA;IAClB,IAAI;QACA,MAAMC,cAAc,MAAMC,eAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;YACjDC,SAAS;gBACLC,MAAM;YACV;QACJ;QAEA,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTC,MAAMV;QACV;IACJ,EAAE,OAAOW,OAAO;QACZC,QAAQD,KAAK,CAAC,+BAA+BA;QAC7C,OAAOL,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTE,OAAOA,iBAAiBE,QAAQF,MAAMF,OAAO,GAAGK,OAAOH;QAC3D,GAAG;YAAEI,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f1711ca78479f1fce7e65d9adf2618c28e652e5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_o5qyqnafe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_o5qyqnafe();
cov_o5qyqnafe().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_o5qyqnafe().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_o5qyqnafe().f[0]++;
    cov_o5qyqnafe().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_o5qyqnafe().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_o5qyqnafe().s[4]++, _interop_require_default(require("../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_o5qyqnafe().f[1]++;
  cov_o5qyqnafe().s[5]++;
  return /* istanbul ignore next */(cov_o5qyqnafe().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_o5qyqnafe().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_o5qyqnafe().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_o5qyqnafe().b[0][1]++, {
    default: obj
  });
}
async function GET() {
  /* istanbul ignore next */
  cov_o5qyqnafe().f[2]++;
  cov_o5qyqnafe().s[6]++;
  try {
    const permissions =
    /* istanbul ignore next */
    (cov_o5qyqnafe().s[7]++, await _prisma.default.permission.findMany({
      orderBy: {
        name: "asc"
      }
    }));
    /* istanbul ignore next */
    cov_o5qyqnafe().s[8]++;
    return _server.NextResponse.json({
      success: true,
      message: "Permissions retrieved successfully",
      data: permissions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o5qyqnafe().s[9]++;
    console.error("Error fetching permissions:", error);
    /* istanbul ignore next */
    cov_o5qyqnafe().s[10]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to retrieve permissions",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_o5qyqnafe().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_o5qyqnafe().b[2][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfbzVxeXFuYWZlIiwiZiIsInMiLCJwZXJtaXNzaW9ucyIsIl9wcmlzbWEiLCJkZWZhdWx0IiwicGVybWlzc2lvbiIsImZpbmRNYW55Iiwib3JkZXJCeSIsIm5hbWUiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiZGF0YSIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiYiIsIlN0cmluZyIsInN0YXR1cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2FwcC9hcGkvcGVybWlzc2lvbnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHByaXNtYSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuXG4vKipcbiAqIEdFVCBoYW5kbGVyIGZvciByZXRyaWV2aW5nIGFsbCBwZXJtaXNzaW9uc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBlcm1pc3Npb25zID0gYXdhaXQgcHJpc21hLnBlcm1pc3Npb24uZmluZE1hbnkoe1xuICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdhc2MnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1Blcm1pc3Npb25zIHJldHJpZXZlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICAgICAgZGF0YTogcGVybWlzc2lvbnNcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcGVybWlzc2lvbnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJldHJpZXZlIHBlcm1pc3Npb25zJyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgICAgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgICB9XG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBTXNCOzs7Ozs7V0FBQUEsR0FBQTs7Ozs7aUNBTk87Ozt1RUFDVjs7Ozs7Ozs7Ozs7Ozs7O0FBS1osZUFBZUEsSUFBQTtFQUFBO0VBQUFDLGFBQUEsR0FBQUMsQ0FBQTtFQUFBRCxhQUFBLEdBQUFFLENBQUE7RUFDbEIsSUFBSTtJQUNBLE1BQU1DLFdBQUE7SUFBQTtJQUFBLENBQUFILGFBQUEsR0FBQUUsQ0FBQSxPQUFjLE1BQU1FLE9BQUEsQ0FBQUMsT0FBTSxDQUFDQyxVQUFVLENBQUNDLFFBQVEsQ0FBQztNQUNqREMsT0FBQSxFQUFTO1FBQ0xDLElBQUEsRUFBTTtNQUNWO0lBQ0o7SUFBQTtJQUFBVCxhQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPUSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQ3JCQyxPQUFBLEVBQVM7TUFDVEMsT0FBQSxFQUFTO01BQ1RDLElBQUEsRUFBTVo7SUFDVjtFQUNKLEVBQUUsT0FBT2EsS0FBQSxFQUFPO0lBQUE7SUFBQWhCLGFBQUEsR0FBQUUsQ0FBQTtJQUNaZSxPQUFBLENBQVFELEtBQUssQ0FBQywrQkFBK0JBLEtBQUE7SUFBQTtJQUFBaEIsYUFBQSxHQUFBRSxDQUFBO0lBQzdDLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFDckJDLE9BQUEsRUFBUztNQUNUQyxPQUFBLEVBQVM7TUFDVEUsS0FBQSxFQUFPQSxLQUFBLFlBQWlCRSxLQUFBO01BQUE7TUFBQSxDQUFBbEIsYUFBQSxHQUFBbUIsQ0FBQSxVQUFRSCxLQUFBLENBQU1GLE9BQU87TUFBQTtNQUFBLENBQUFkLGFBQUEsR0FBQW1CLENBQUEsVUFBR0MsTUFBQSxDQUFPSixLQUFBO0lBQzNELEdBQUc7TUFBRUssTUFBQSxFQUFRO0lBQUk7RUFDckI7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==