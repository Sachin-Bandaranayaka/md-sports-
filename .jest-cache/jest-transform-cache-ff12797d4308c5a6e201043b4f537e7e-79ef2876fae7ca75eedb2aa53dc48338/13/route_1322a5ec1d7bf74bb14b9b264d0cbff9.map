{"version":3,"names":["GET","request","params","cov_7f8tk9lo8","f","s","productId","parseInt","id","isNaN","b","_server","NextResponse","json","success","message","status","invoiceItems","_prisma","default","invoiceItem","findMany","where","include","invoice","user","select","name","customer","orderBy","createdAt","length","data","salesData","map","item","invoiceNumber","invoiceId","date","shopId","toString","shopName","shop","cashierName","quantity","total","totalQuantitySold","reduce","sum","totalSalesValue","now","Date","oneDayAgo","getTime","oneWeekAgo","oneMonthAgo","dailySales","filter","weeklySales","monthlySales","invoices","metrics","daily","weekly","monthly","error","console","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/sales/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n/**\n * API endpoint to fetch sales history for a specific product\n * GET /api/products/[id]/sales\n */\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const productId = parseInt(params.id);\n\n        if (isNaN(productId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid product ID' },\n                { status: 400 }\n            );\n        }\n\n        // Get all invoice items for this product\n        const invoiceItems = await prisma.invoiceItem.findMany({\n            where: {\n                productId: productId\n            },\n            include: {\n                invoice: {\n                    include: {\n                        // shop: true, // Error: Unknown field 'shop' for include statement on model 'Invoice'.\n                        // This line needs to be removed or fixed based on actual Invoice model schema.\n                        user: {\n                            select: {\n                                id: true,\n                                name: true\n                            }\n                        },\n                        customer: true // Assuming 'customer' is a valid relation on Invoice\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        if (!invoiceItems || invoiceItems.length === 0) {\n            return NextResponse.json({ success: true, data: [], message: 'No sales history found for this product.' });\n        }\n\n        // Format the data for the frontend\n        const salesData = invoiceItems.map(item => ({\n            id: item.invoice.invoiceNumber || `INV-${item.invoiceId}`,\n            date: item.invoice.createdAt,\n            shopId: item.invoice.shopId.toString(),\n            shopName: item.invoice.shop?.name || 'Unknown Shop',\n            cashierName: item.invoice.user?.name || 'Unknown User',\n            quantity: item.quantity,\n            total: item.total\n        }));\n\n        // Calculate sales metrics\n        const totalQuantitySold = invoiceItems.reduce((sum, item) => sum + item.quantity, 0);\n        const totalSalesValue = invoiceItems.reduce((sum, item) => sum + item.total, 0);\n\n        // Calculate daily, weekly and monthly sales (using date filtering)\n        const now = new Date();\n        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const dailySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneDayAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        const weeklySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneWeekAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        const monthlySales = invoiceItems.filter(item =>\n            item.invoice.createdAt >= oneMonthAgo\n        ).reduce((sum, item) => sum + item.quantity, 0);\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                invoices: salesData,\n                metrics: {\n                    totalQuantitySold,\n                    totalSalesValue,\n                    daily: dailySales,\n                    weekly: weeklySales,\n                    monthly: monthlySales\n                }\n            }\n        });\n    } catch (error) {\n        console.error(`Error fetching sales history for product ${params.id}:`, error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to fetch sales history',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}