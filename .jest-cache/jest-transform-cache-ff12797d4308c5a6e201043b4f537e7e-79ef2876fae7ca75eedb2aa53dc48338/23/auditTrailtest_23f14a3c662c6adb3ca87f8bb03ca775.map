{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/auditTrail.test.ts"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\n// Mock dependencies\njest.mock('@/lib/auth', () => ({\n  verifyToken: jest.fn(),\n}));\n\n// Import after mocking\nconst { verifyToken } = require('@/lib/auth');\n\n// Mock auditService completely\nconst mockAuditService = {\n  getRecycleBinItems: jest.fn(),\n  recoverItem: jest.fn(),\n  getEntityHistory: jest.fn(),\n  logAction: jest.fn(),\n};\n\njest.mock('@/services/auditService', () => ({\n  auditService: mockAuditService,\n  AuditService: {\n    getInstance: () => mockAuditService,\n  },\n}));\njest.mock('next/cache', () => ({\n  revalidateTag: jest.fn(),\n}));\n\n// Mock useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock useToast hook\nconst mockToast = jest.fn();\njest.mock('@/components/ui/use-toast', () => ({\n  useToast: () => ({ toast: mockToast }),\n}));\n\n// Mock next/navigation\nconst mockPush = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  usePathname: () => '/audit-trail',\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock data\nconst mockUser = {\n  id: '1',\n  name: 'Test User',\n  email: 'test@example.com',\n  role: 'admin',\n};\n\nconst mockRecycleBinItem = {\n  id: 1,\n  userId: 1,\n  action: 'DELETE',\n  entity: 'product',\n  entityId: 123,\n  originalData: {\n    id: 123,\n    name: 'Test Product',\n    price: 99.99,\n    stock: 10,\n  },\n  isDeleted: true,\n  deletedAt: new Date('2024-01-15T10:00:00Z'),\n  deletedBy: 1,\n  canRecover: true,\n  createdAt: new Date('2024-01-15T10:00:00Z'),\n  user: {\n    id: 1,\n    name: 'Test User',\n    email: 'test@example.com',\n  },\n};\n\nconst mockAuditHistoryItem = {\n  id: 2,\n  userId: 1,\n  action: 'UPDATE',\n  entity: 'customer',\n  entityId: 456,\n  details: {\n    changes: {\n      name: { from: 'Old Name', to: 'New Name' },\n      email: { from: 'old@email.com', to: 'new@email.com' },\n    },\n  },\n  createdAt: new Date('2024-01-16T14:30:00Z'),\n  user: {\n    id: 1,\n    name: 'Test User',\n    email: 'test@example.com',\n  },\n};\n\ndescribe('Audit Trail Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default auth state\n    mockUseAuth.mockReturnValue({\n      user: mockUser,\n      isAuthenticated: true,\n      accessToken: 'mock-access-token',\n      login: jest.fn(),\n      logout: jest.fn(),\n      loading: false,\n    });\n\n    // Mock verifyToken\n    (verifyToken as jest.Mock).mockResolvedValue({\n      sub: '1',\n      userId: 1,\n      email: 'test@example.com',\n    });\n  });\n\n  describe('API Route Tests', () => {\n    describe('GET /api/audit-trail', () => {\n      test('should fetch recycle bin items successfully', async () => {\n        const mockRecycleBinData = {\n          items: [mockRecycleBinItem],\n          total: 1,\n        };\n\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockRecycleBinData,\n        });\n\n        const response = await fetch('/api/audit-trail?type=deleted', {\n          headers: {\n            Authorization: 'Bearer mock-token',\n          },\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(data.items).toHaveLength(1);\n        expect(data.items[0].entity).toBe('product');\n        expect(data.total).toBe(1);\n      });\n\n      test('should fetch audit history successfully', async () => {\n        const mockAuditData = {\n          items: [mockAuditHistoryItem],\n          total: 1,\n        };\n\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockAuditData,\n        });\n\n        const response = await fetch('/api/audit-trail?type=history&entity=customer&entityId=456', {\n          headers: {\n            Authorization: 'Bearer mock-token',\n          },\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(data.items).toHaveLength(1);\n        expect(data.items[0].action).toBe('UPDATE');\n        expect(data.items[0].entity).toBe('customer');\n      });\n\n      test('should handle fetch error', async () => {\n        mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n        try {\n          await fetch('/api/audit-trail?type=deleted');\n        } catch (error) {\n          expect(error.message).toBe('Network error');\n        }\n      });\n\n      test('should handle non-ok response', async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 500,\n          json: async () => ({ error: 'Internal server error' }),\n        });\n\n        const response = await fetch('/api/audit-trail?type=deleted');\n        const data = await response.json();\n\n        expect(response.status).toBe(500);\n        expect(data.error).toBe('Internal server error');\n      });\n    });\n\n    describe('POST /api/audit-trail/recover', () => {\n      test('should recover item successfully', async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => ({\n            success: true,\n            message: 'Item recovered successfully',\n          }),\n        });\n\n        const response = await fetch('/api/audit-trail/recover', {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer mock-token',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ auditLogId: 1 }),\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(200);\n        expect(data.success).toBe(true);\n        expect(data.message).toBe('Item recovered successfully');\n      });\n\n      test('should handle authentication error', async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 401,\n          json: async () => ({ error: 'Unauthorized' }),\n        });\n\n        const response = await fetch('/api/audit-trail/recover', {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer invalid-token',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ auditLogId: 1 }),\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(401);\n        expect(data.error).toBe('Unauthorized');\n      });\n\n      test('should handle service error', async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 500,\n          json: async () => ({ error: 'Internal server error' }),\n        });\n\n        const response = await fetch('/api/audit-trail/recover', {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer mock-token',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ auditLogId: 1 }),\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(500);\n        expect(data.error).toBe('Internal server error');\n      });\n\n      test('should handle missing auditLogId', async () => {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 400,\n          json: async () => ({ error: 'Audit log ID is required' }),\n        });\n\n        const response = await fetch('/api/audit-trail/recover', {\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer mock-token',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({}),\n        });\n        const data = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(data.error).toBe('Audit log ID is required');\n      });\n    });\n  });\n\n  describe('Service Integration Tests', () => {\n    test('should call auditService.getRecycleBinItems with correct parameters', async () => {\n      const mockData = {\n        items: [mockRecycleBinItem],\n        total: 1,\n      };\n\n      mockAuditService.getRecycleBinItems.mockResolvedValue(mockData);\n\n       const result = await mockAuditService.getRecycleBinItems('product', 10, 0);\n\n       expect(mockAuditService.getRecycleBinItems).toHaveBeenCalledWith('product', 10, 0);\n      expect(result.items).toHaveLength(1);\n      expect(result.total).toBe(1);\n    });\n\n    test('should call auditService.recoverItem with correct parameters', async () => {\n      const mockResult = {\n        success: true,\n        message: 'Item recovered successfully',\n      };\n\n      mockAuditService.recoverItem.mockResolvedValue(mockResult);\n\n       const result = await mockAuditService.recoverItem(1, 1);\n\n       expect(mockAuditService.recoverItem).toHaveBeenCalledWith(1, 1);\n      expect(result.success).toBe(true);\n      expect(result.message).toBe('Item recovered successfully');\n    });\n\n    test('should handle service errors gracefully', async () => {\n      mockAuditService.getRecycleBinItems.mockRejectedValue(\n         new Error('Database connection failed')\n       );\n\n       try {\n         await mockAuditService.getRecycleBinItems();\n      } catch (error) {\n        expect(error.message).toBe('Database connection failed');\n      }\n    });\n  });\n\n  describe('Authentication Integration Tests', () => {\n    test('should handle unauthenticated user', () => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        accessToken: null,\n        login: jest.fn(),\n        logout: jest.fn(),\n        loading: false,\n      });\n\n      const authState = mockUseAuth();\n      expect(authState.isAuthenticated).toBe(false);\n      expect(authState.user).toBeNull();\n      expect(authState.accessToken).toBeNull();\n    });\n\n    test('should handle authenticated user', () => {\n      const authState = mockUseAuth();\n      expect(authState.isAuthenticated).toBe(true);\n      expect(authState.user).toEqual(mockUser);\n      expect(authState.accessToken).toBe('mock-access-token');\n    });\n\n    test('should handle token verification', async () => {\n      const tokenPayload = await verifyToken('mock-token');\n      \n      expect(verifyToken).toHaveBeenCalledWith('mock-token');\n      expect(tokenPayload.userId).toBe(1);\n      expect(tokenPayload.email).toBe('test@example.com');\n    });\n\n    test('should handle invalid token', async () => {\n      (verifyToken as jest.Mock).mockRejectedValue(new Error('Invalid token'));\n\n      try {\n        await verifyToken('invalid-token');\n      } catch (error) {\n        expect(error.message).toBe('Invalid token');\n      }\n    });\n  });\n\n  describe('Error Handling Tests', () => {\n    test('should handle network errors', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      try {\n        await fetch('/api/audit-trail');\n      } catch (error) {\n        expect(error.message).toBe('Network error');\n      }\n    });\n\n    test('should handle malformed JSON response', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => {\n          throw new Error('Invalid JSON');\n        },\n      });\n\n      const response = await fetch('/api/audit-trail');\n      \n      try {\n        await response.json();\n      } catch (error) {\n        expect(error.message).toBe('Invalid JSON');\n      }\n    });\n\n    test('should handle timeout errors', async () => {\n      mockFetch.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Request timeout')), 100)\n        )\n      );\n\n      try {\n        await fetch('/api/audit-trail');\n      } catch (error) {\n        expect(error.message).toBe('Request timeout');\n      }\n    });\n  });\n});"],"names":["jest","mock","verifyToken","fn","auditService","mockAuditService","AuditService","getInstance","revalidateTag","useAuth","mockUseAuth","useToast","toast","mockToast","useRouter","push","mockPush","replace","back","forward","refresh","prefetch","usePathname","useSearchParams","URLSearchParams","require","getRecycleBinItems","recoverItem","getEntityHistory","logAction","mockFetch","global","fetch","mockUser","id","name","email","role","mockRecycleBinItem","userId","action","entity","entityId","originalData","price","stock","isDeleted","deletedAt","Date","deletedBy","canRecover","createdAt","user","mockAuditHistoryItem","details","changes","from","to","describe","beforeEach","clearAllMocks","mockReturnValue","isAuthenticated","accessToken","login","logout","loading","mockResolvedValue","sub","test","mockRecycleBinData","items","total","mockResolvedValueOnce","ok","status","json","response","headers","Authorization","data","expect","toBe","toHaveLength","mockAuditData","mockRejectedValueOnce","Error","error","message","success","method","body","JSON","stringify","auditLogId","mockData","result","toHaveBeenCalledWith","mockResult","mockRejectedValue","authState","toBeNull","toEqual","tokenPayload","mockImplementation","Promise","_","reject","setTimeout"],"mappings":"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"}