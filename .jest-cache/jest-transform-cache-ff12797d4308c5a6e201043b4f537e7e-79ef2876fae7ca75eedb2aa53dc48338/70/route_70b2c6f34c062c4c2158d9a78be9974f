030342bd2331c7728037c227c216b531
"use strict";

/* istanbul ignore next */
function cov_20xu9akzyb() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shop-wise/route.ts";
  var hash = "475dbc711da2c4d9dfc96d9e372735dd1573db91";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shop-wise/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 193,
          column: 5
        }
      },
      "7": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 94
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "10": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 26,
          column: 53
        }
      },
      "11": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 60
        }
      },
      "12": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "13": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "14": {
        start: {
          line: 31,
          column: 26
        },
        end: {
          line: 35,
          column: 12
        }
      },
      "15": {
        start: {
          line: 32,
          column: 25
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "17": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 24
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "19": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 49,
          column: 44
        }
      },
      "20": {
        start: {
          line: 41,
          column: 55
        },
        end: {
          line: 49,
          column: 14
        }
      },
      "21": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "23": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "24": {
        start: {
          line: 60,
          column: 40
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "25": {
        start: {
          line: 60,
          column: 73
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "26": {
        start: {
          line: 72,
          column: 39
        },
        end: {
          line: 72,
          column: 194
        }
      },
      "27": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 92,
          column: 64
        }
      },
      "28": {
        start: {
          line: 74,
          column: 66
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "29": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 66
        }
      },
      "30": {
        start: {
          line: 95,
          column: 38
        },
        end: {
          line: 113,
          column: 78
        }
      },
      "31": {
        start: {
          line: 95,
          column: 71
        },
        end: {
          line: 109,
          column: 18
        }
      },
      "32": {
        start: {
          line: 114,
          column: 40
        },
        end: {
          line: 114,
          column: 73
        }
      },
      "33": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 134,
          column: 63
        }
      },
      "34": {
        start: {
          line: 116,
          column: 65
        },
        end: {
          line: 130,
          column: 18
        }
      },
      "35": {
        start: {
          line: 135,
          column: 31
        },
        end: {
          line: 135,
          column: 58
        }
      },
      "36": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 144,
          column: 77
        }
      },
      "37": {
        start: {
          line: 137,
          column: 67
        },
        end: {
          line: 144,
          column: 18
        }
      },
      "38": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 153,
          column: 14
        }
      },
      "39": {
        start: {
          line: 156,
          column: 23
        },
        end: {
          line: 168,
          column: 10
        }
      },
      "40": {
        start: {
          line: 156,
          column: 56
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "41": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "42": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 76
        }
      },
      "43": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 18
          }
        },
        loc: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 194,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 71
          },
          end: {
            line: 31,
            column: 72
          }
        },
        loc: {
          start: {
            line: 31,
            column: 75
          },
          end: {
            line: 35,
            column: 9
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 52
          }
        },
        loc: {
          start: {
            line: 41,
            column: 55
          },
          end: {
            line: 49,
            column: 14
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 56
          },
          end: {
            line: 58,
            column: 57
          }
        },
        loc: {
          start: {
            line: 58,
            column: 70
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 69
          },
          end: {
            line: 60,
            column: 70
          }
        },
        loc: {
          start: {
            line: 60,
            column: 73
          },
          end: {
            line: 67,
            column: 21
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 74,
            column: 62
          },
          end: {
            line: 74,
            column: 63
          }
        },
        loc: {
          start: {
            line: 74,
            column: 66
          },
          end: {
            line: 88,
            column: 18
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 67
          },
          end: {
            line: 95,
            column: 68
          }
        },
        loc: {
          start: {
            line: 95,
            column: 71
          },
          end: {
            line: 109,
            column: 18
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 116,
            column: 62
          }
        },
        loc: {
          start: {
            line: 116,
            column: 65
          },
          end: {
            line: 130,
            column: 18
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 137,
            column: 63
          },
          end: {
            line: 137,
            column: 64
          }
        },
        loc: {
          start: {
            line: 137,
            column: 67
          },
          end: {
            line: 144,
            column: 18
          }
        },
        line: 137
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 43
          }
        },
        loc: {
          start: {
            line: 156,
            column: 56
          },
          end: {
            line: 162,
            column: 13
          }
        },
        line: 156
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 30,
            column: 61
          }
        }, {
          start: {
            line: 30,
            column: 64
          },
          end: {
            line: 30,
            column: 74
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 26
          },
          end: {
            line: 35,
            column: 12
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 43
          },
          end: {
            line: 31,
            column: 67
          }
        }, {
          start: {
            line: 31,
            column: 70
          },
          end: {
            line: 35,
            column: 12
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 18
          }
        }, {
          start: {
            line: 50,
            column: 22
          },
          end: {
            line: 50,
            column: 40
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 39
          },
          end: {
            line: 72,
            column: 194
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 141
          },
          end: {
            line: 72,
            column: 190
          }
        }, {
          start: {
            line: 72,
            column: 193
          },
          end: {
            line: 72,
            column: 194
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 39
          },
          end: {
            line: 72,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 39
          },
          end: {
            line: 72,
            column: 58
          }
        }, {
          start: {
            line: 72,
            column: 62
          },
          end: {
            line: 72,
            column: 84
          }
        }, {
          start: {
            line: 72,
            column: 88
          },
          end: {
            line: 72,
            column: 138
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 61
          }
        }, {
          start: {
            line: 93,
            column: 65
          },
          end: {
            line: 93,
            column: 66
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 40
          },
          end: {
            line: 114,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 40
          },
          end: {
            line: 114,
            column: 68
          }
        }, {
          start: {
            line: 114,
            column: 72
          },
          end: {
            line: 114,
            column: 73
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 31
          },
          end: {
            line: 135,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 31
          },
          end: {
            line: 135,
            column: 53
          }
        }, {
          start: {
            line: 135,
            column: 57
          },
          end: {
            line: 135,
            column: 58
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 46
          },
          end: {
            line: 189,
            column: 59
          }
        }, {
          start: {
            line: 189,
            column: 62
          },
          end: {
            line: 189,
            column: 77
          }
        }],
        line: 189
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shop-wise/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Interface for shop-wise metrics\ninterface ShopWiseMetrics {\n    shopId: string;\n    shopName: string;\n    totalInventoryCost: number;\n    totalProfit: number;\n    totalSales: number;\n    outstandingInvoices: number;\n    lowStockItems: number;\n}\n\nexport async function GET(request: NextRequest) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract date range from query parameters\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n        \n        // Default to current month if no dates provided\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : (() => {\n            const date = new Date();\n            date.setDate(date.getDate() - 30); // Default to last 30 days\n            return date;\n        })();\n\n        console.log('Fetching shop-wise metrics for date range:', { startDate, endDate });\n\n        // 1. Get all active shops\n        const shops = await safeQuery(\n            () => prisma.shop.findMany({\n                where: { is_active: true },\n                select: {\n                    id: true,\n                    name: true\n                }\n            }),\n            [],\n            'Failed to fetch shops'\n        );\n\n        if (!shops || shops.length === 0) {\n            return NextResponse.json({\n                success: true,\n                data: [],\n                message: 'No active shops found'\n            });\n        }\n\n        // 2. Calculate metrics for each shop\n        const shopMetrics: ShopWiseMetrics[] = await Promise.all(\n            shops.map(async (shop) => {\n                // Calculate total inventory cost for this shop using shop-specific cost\n                const inventoryCostResult = await safeQuery<Array<{ totalinventorycost: bigint | number | null }>>(\n                    () => prisma.$queryRaw`\n                        SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as \"totalinventorycost\"\n                        FROM \"InventoryItem\" i\n                        WHERE i.quantity > 0 \n                        AND i.shopspecificcost IS NOT NULL \n                        AND i.shopspecificcost > 0\n                        AND i.\"shopId\" = ${shop.id}\n                    `,\n                    [{ totalinventorycost: 0 }],\n                    `Failed to calculate inventory cost for shop ${shop.id}`\n                );\n\n                const totalInventoryCost = inventoryCostResult && inventoryCostResult[0] && inventoryCostResult[0].totalinventorycost !== null\n                    ? Number(inventoryCostResult[0].totalinventorycost)\n                    : 0;\n\n                // Calculate total profit for this shop (from invoices in the date range)\n                const profitResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { not: 'Cancelled' },\n                            invoiceDate: {\n                                gte: startDate,\n                                lte: endDate\n                            }\n                        },\n                        _sum: {\n                            totalProfit: true\n                        }\n                    }),\n                    { _sum: { totalProfit: null } },\n                    `Failed to calculate profit for shop ${shop.id}`\n                );\n\n                const totalProfit = profitResult._sum.totalProfit || 0;\n\n                // Calculate outstanding invoices for this shop\n                const outstandingResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { notIn: ['paid', 'cancelled', 'void'] }\n                        },\n                        _sum: {\n                            total: true\n                        }\n                    }),\n                    { _sum: { total: null } },\n                    `Failed to calculate outstanding invoices for shop ${shop.id}`\n                );\n\n                const outstandingInvoices = outstandingResult._sum.total || 0;\n\n                // Calculate total sales for this shop (from invoices in the date range)\n                const salesResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { not: 'Cancelled' },\n                            invoiceDate: {\n                                gte: startDate,\n                                lte: endDate\n                            }\n                        },\n                        _sum: {\n                            total: true\n                        }\n                    }),\n                    { _sum: { total: null } },\n                    `Failed to calculate sales for shop ${shop.id}`\n                );\n\n                const totalSales = salesResult._sum.total || 0;\n\n                // Count low stock items for this shop (quantity <= 10)\n                const lowStockCount = await safeQuery(\n                    () => prisma.inventoryItem.count({\n                        where: {\n                            shopId: shop.id,\n                            quantity: { lte: 10 }\n                        }\n                    }),\n                    0,\n                    `Failed to count low stock items for shop ${shop.id}`\n                );\n\n                return {\n                    shopId: shop.id,\n                    shopName: shop.name,\n                    totalInventoryCost,\n                    totalProfit,\n                    totalSales,\n                    outstandingInvoices,\n                    lowStockItems: lowStockCount\n                };\n            })\n        );\n\n        // 3. Calculate totals across all shops\n        const totals = shopMetrics.reduce(\n            (acc, shop) => ({\n                totalInventoryCost: acc.totalInventoryCost + shop.totalInventoryCost,\n                totalProfit: acc.totalProfit + shop.totalProfit,\n                totalSales: acc.totalSales + shop.totalSales,\n                outstandingInvoices: acc.outstandingInvoices + shop.outstandingInvoices,\n                lowStockItems: acc.lowStockItems + shop.lowStockItems\n            }),\n            {\n                totalInventoryCost: 0,\n                totalProfit: 0,\n                totalSales: 0,\n                outstandingInvoices: 0,\n                lowStockItems: 0\n            }\n        );\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                shopMetrics,\n                totals,\n                dateRange: {\n                    startDate: startDate.toISOString(),\n                    endDate: endDate.toISOString()\n                }\n            },\n            meta: {\n                shopsCount: shops.length,\n                generatedAt: new Date().toISOString()\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching shop-wise dashboard metrics:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                error: 'Failed to fetch shop-wise dashboard metrics',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "status", "searchParams", "URL", "url", "startDateParam", "get", "endDateParam", "endDate", "Date", "startDate", "date", "setDate", "getDate", "console", "log", "shops", "safeQuery", "prisma", "shop", "findMany", "where", "is_active", "select", "id", "name", "length", "success", "data", "shopMetrics", "Promise", "all", "map", "inventoryCostResult", "$queryRaw", "totalinventorycost", "totalInventoryCost", "Number", "profitResult", "invoice", "aggregate", "shopId", "not", "invoiceDate", "gte", "lte", "_sum", "totalProfit", "outstandingResult", "notIn", "total", "outstandingInvoices", "salesResult", "totalSales", "lowStockCount", "inventoryItem", "count", "quantity", "shopName", "lowStockItems", "totals", "reduce", "acc", "dateRange", "toISOString", "meta", "shopsCount", "generatedAt", "details", "Error"],
      mappings: ";;;;+BAesBA;;;eAAAA;;;wBAfoB;wBACR;sBACM;AAajC,eAAeA,IAAIC,OAAoB;IAC1C,IAAI;QACA,iCAAiC;QACjC,MAAMC,aAAa,MAAMC,IAAAA,6BAAuB,EAACF,SAAS;QAC1D,IAAI,CAACC,WAAWE,OAAO,EAAE;YACrB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAOL,WAAWM,OAAO;YAAC,GAAG;gBAAEC,QAAQ;YAAI;QAC1E;QAEA,2CAA2C;QAC3C,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIV,QAAQW,GAAG;QAC5C,MAAMC,iBAAiBH,aAAaI,GAAG,CAAC;QACxC,MAAMC,eAAeL,aAAaI,GAAG,CAAC;QAEtC,gDAAgD;QAChD,MAAME,UAAUD,eAAe,IAAIE,KAAKF,gBAAgB,IAAIE;QAC5D,MAAMC,YAAYL,iBAAiB,IAAII,KAAKJ,kBAAkB,AAAC,CAAA;YAC3D,MAAMM,OAAO,IAAIF;YACjBE,KAAKC,OAAO,CAACD,KAAKE,OAAO,KAAK,KAAK,0BAA0B;YAC7D,OAAOF;QACX,CAAA;QAEAG,QAAQC,GAAG,CAAC,8CAA8C;YAAEL;YAAWF;QAAQ;QAE/E,0BAA0B;QAC1B,MAAMQ,QAAQ,MAAMC,IAAAA,iBAAS,EACzB,IAAMC,cAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;gBACvBC,OAAO;oBAAEC,WAAW;gBAAK;gBACzBC,QAAQ;oBACJC,IAAI;oBACJC,MAAM;gBACV;YACJ,IACA,EAAE,EACF;QAGJ,IAAI,CAACT,SAASA,MAAMU,MAAM,KAAK,GAAG;YAC9B,OAAO7B,oBAAY,CAACC,IAAI,CAAC;gBACrB6B,SAAS;gBACTC,MAAM,EAAE;gBACR5B,SAAS;YACb;QACJ;QAEA,qCAAqC;QACrC,MAAM6B,cAAiC,MAAMC,QAAQC,GAAG,CACpDf,MAAMgB,GAAG,CAAC,OAAOb;YACb,wEAAwE;YACxE,MAAMc,sBAAsB,MAAMhB,IAAAA,iBAAS,EACvC,IAAMC,cAAM,CAACgB,SAAS,CAAC;;;;;;yCAMF,EAAEf,KAAKK,EAAE,CAAC;oBAC/B,CAAC,EACD;gBAAC;oBAAEW,oBAAoB;gBAAE;aAAE,EAC3B,CAAC,4CAA4C,EAAEhB,KAAKK,EAAE,CAAC,CAAC;YAG5D,MAAMY,qBAAqBH,uBAAuBA,mBAAmB,CAAC,EAAE,IAAIA,mBAAmB,CAAC,EAAE,CAACE,kBAAkB,KAAK,OACpHE,OAAOJ,mBAAmB,CAAC,EAAE,CAACE,kBAAkB,IAChD;YAEN,yEAAyE;YACzE,MAAMG,eAAe,MAAMrB,IAAAA,iBAAS,EAChC,IAAMC,cAAM,CAACqB,OAAO,CAACC,SAAS,CAAC;oBAC3BnB,OAAO;wBACHoB,QAAQtB,KAAKK,EAAE;wBACfvB,QAAQ;4BAAEyC,KAAK;wBAAY;wBAC3BC,aAAa;4BACTC,KAAKlC;4BACLmC,KAAKrC;wBACT;oBACJ;oBACAsC,MAAM;wBACFC,aAAa;oBACjB;gBACJ,IACA;gBAAED,MAAM;oBAAEC,aAAa;gBAAK;YAAE,GAC9B,CAAC,oCAAoC,EAAE5B,KAAKK,EAAE,CAAC,CAAC;YAGpD,MAAMuB,cAAcT,aAAaQ,IAAI,CAACC,WAAW,IAAI;YAErD,+CAA+C;YAC/C,MAAMC,oBAAoB,MAAM/B,IAAAA,iBAAS,EACrC,IAAMC,cAAM,CAACqB,OAAO,CAACC,SAAS,CAAC;oBAC3BnB,OAAO;wBACHoB,QAAQtB,KAAKK,EAAE;wBACfvB,QAAQ;4BAAEgD,OAAO;gCAAC;gCAAQ;gCAAa;6BAAO;wBAAC;oBACnD;oBACAH,MAAM;wBACFI,OAAO;oBACX;gBACJ,IACA;gBAAEJ,MAAM;oBAAEI,OAAO;gBAAK;YAAE,GACxB,CAAC,kDAAkD,EAAE/B,KAAKK,EAAE,CAAC,CAAC;YAGlE,MAAM2B,sBAAsBH,kBAAkBF,IAAI,CAACI,KAAK,IAAI;YAE5D,wEAAwE;YACxE,MAAME,cAAc,MAAMnC,IAAAA,iBAAS,EAC/B,IAAMC,cAAM,CAACqB,OAAO,CAACC,SAAS,CAAC;oBAC3BnB,OAAO;wBACHoB,QAAQtB,KAAKK,EAAE;wBACfvB,QAAQ;4BAAEyC,KAAK;wBAAY;wBAC3BC,aAAa;4BACTC,KAAKlC;4BACLmC,KAAKrC;wBACT;oBACJ;oBACAsC,MAAM;wBACFI,OAAO;oBACX;gBACJ,IACA;gBAAEJ,MAAM;oBAAEI,OAAO;gBAAK;YAAE,GACxB,CAAC,mCAAmC,EAAE/B,KAAKK,EAAE,CAAC,CAAC;YAGnD,MAAM6B,aAAaD,YAAYN,IAAI,CAACI,KAAK,IAAI;YAE7C,uDAAuD;YACvD,MAAMI,gBAAgB,MAAMrC,IAAAA,iBAAS,EACjC,IAAMC,cAAM,CAACqC,aAAa,CAACC,KAAK,CAAC;oBAC7BnC,OAAO;wBACHoB,QAAQtB,KAAKK,EAAE;wBACfiC,UAAU;4BAAEZ,KAAK;wBAAG;oBACxB;gBACJ,IACA,GACA,CAAC,yCAAyC,EAAE1B,KAAKK,EAAE,CAAC,CAAC;YAGzD,OAAO;gBACHiB,QAAQtB,KAAKK,EAAE;gBACfkC,UAAUvC,KAAKM,IAAI;gBACnBW;gBACAW;gBACAM;gBACAF;gBACAQ,eAAeL;YACnB;QACJ;QAGJ,uCAAuC;QACvC,MAAMM,SAAS/B,YAAYgC,MAAM,CAC7B,CAACC,KAAK3C,OAAU,CAAA;gBACZiB,oBAAoB0B,IAAI1B,kBAAkB,GAAGjB,KAAKiB,kBAAkB;gBACpEW,aAAae,IAAIf,WAAW,GAAG5B,KAAK4B,WAAW;gBAC/CM,YAAYS,IAAIT,UAAU,GAAGlC,KAAKkC,UAAU;gBAC5CF,qBAAqBW,IAAIX,mBAAmB,GAAGhC,KAAKgC,mBAAmB;gBACvEQ,eAAeG,IAAIH,aAAa,GAAGxC,KAAKwC,aAAa;YACzD,CAAA,GACA;YACIvB,oBAAoB;YACpBW,aAAa;YACbM,YAAY;YACZF,qBAAqB;YACrBQ,eAAe;QACnB;QAGJ,OAAO9D,oBAAY,CAACC,IAAI,CAAC;YACrB6B,SAAS;YACTC,MAAM;gBACFC;gBACA+B;gBACAG,WAAW;oBACPrD,WAAWA,UAAUsD,WAAW;oBAChCxD,SAASA,QAAQwD,WAAW;gBAChC;YACJ;YACAC,MAAM;gBACFC,YAAYlD,MAAMU,MAAM;gBACxByC,aAAa,IAAI1D,OAAOuD,WAAW;YACvC;QACJ;IAEJ,EAAE,OAAOjE,OAAO;QACZe,QAAQf,KAAK,CAAC,+CAA+CA;QAC7D,OAAOF,oBAAY,CAACC,IAAI,CACpB;YACI6B,SAAS;YACT5B,OAAO;YACPqE,SAASrE,iBAAiBsE,QAAQtE,MAAMC,OAAO,GAAG;QACtD,GACA;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "475dbc711da2c4d9dfc96d9e372735dd1573db91"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20xu9akzyb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20xu9akzyb();
cov_20xu9akzyb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20xu9akzyb().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_20xu9akzyb().f[0]++;
    cov_20xu9akzyb().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_20xu9akzyb().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_20xu9akzyb().s[4]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_20xu9akzyb().s[5]++, require("../../../../lib/auth"));
async function GET(request) {
  /* istanbul ignore next */
  cov_20xu9akzyb().f[1]++;
  cov_20xu9akzyb().s[6]++;
  try {
    // Validate token and permissions
    const authResult =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[7]++, await (0, _auth.validateTokenPermission)(request, "view_dashboard"));
    /* istanbul ignore next */
    cov_20xu9akzyb().s[8]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_20xu9akzyb().b[0][0]++;
      cov_20xu9akzyb().s[9]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_20xu9akzyb().b[0][1]++;
    }
    // Extract date range from query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[10]++, new URL(request.url));
    const startDateParam =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[11]++, searchParams.get("startDate"));
    const endDateParam =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[12]++, searchParams.get("endDate"));
    // Default to current month if no dates provided
    const endDate =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[13]++, endDateParam ?
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[1][0]++, new Date(endDateParam)) :
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[1][1]++, new Date()));
    const startDate =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[14]++, startDateParam ?
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[2][0]++, new Date(startDateParam)) :
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[2][1]++, (() => {
      /* istanbul ignore next */
      cov_20xu9akzyb().f[2]++;
      const date =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[15]++, new Date());
      /* istanbul ignore next */
      cov_20xu9akzyb().s[16]++;
      date.setDate(date.getDate() - 30); // Default to last 30 days
      /* istanbul ignore next */
      cov_20xu9akzyb().s[17]++;
      return date;
    })()));
    /* istanbul ignore next */
    cov_20xu9akzyb().s[18]++;
    console.log("Fetching shop-wise metrics for date range:", {
      startDate,
      endDate
    });
    // 1. Get all active shops
    const shops =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[19]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_20xu9akzyb().f[3]++;
      cov_20xu9akzyb().s[20]++;
      return _prisma.prisma.shop.findMany({
        where: {
          is_active: true
        },
        select: {
          id: true,
          name: true
        }
      });
    }, [], "Failed to fetch shops"));
    /* istanbul ignore next */
    cov_20xu9akzyb().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[4][0]++, !shops) ||
    /* istanbul ignore next */
    (cov_20xu9akzyb().b[4][1]++, shops.length === 0)) {
      /* istanbul ignore next */
      cov_20xu9akzyb().b[3][0]++;
      cov_20xu9akzyb().s[22]++;
      return _server.NextResponse.json({
        success: true,
        data: [],
        message: "No active shops found"
      });
    } else
    /* istanbul ignore next */
    {
      cov_20xu9akzyb().b[3][1]++;
    }
    // 2. Calculate metrics for each shop
    const shopMetrics =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[23]++, await Promise.all(shops.map(async shop => {
      /* istanbul ignore next */
      cov_20xu9akzyb().f[4]++;
      // Calculate total inventory cost for this shop using shop-specific cost
      const inventoryCostResult =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[24]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_20xu9akzyb().f[5]++;
        cov_20xu9akzyb().s[25]++;
        return _prisma.prisma.$queryRaw`
                        SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as "totalinventorycost"
                        FROM "InventoryItem" i
                        WHERE i.quantity > 0 
                        AND i.shopspecificcost IS NOT NULL 
                        AND i.shopspecificcost > 0
                        AND i."shopId" = ${shop.id}
                    `;
      }, [{
        totalinventorycost: 0
      }], `Failed to calculate inventory cost for shop ${shop.id}`));
      const totalInventoryCost =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[26]++,
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[6][0]++, inventoryCostResult) &&
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[6][1]++, inventoryCostResult[0]) &&
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[6][2]++, inventoryCostResult[0].totalinventorycost !== null) ?
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[5][0]++, Number(inventoryCostResult[0].totalinventorycost)) :
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[5][1]++, 0));
      // Calculate total profit for this shop (from invoices in the date range)
      const profitResult =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[27]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_20xu9akzyb().f[6]++;
        cov_20xu9akzyb().s[28]++;
        return _prisma.prisma.invoice.aggregate({
          where: {
            shopId: shop.id,
            status: {
              not: "Cancelled"
            },
            invoiceDate: {
              gte: startDate,
              lte: endDate
            }
          },
          _sum: {
            totalProfit: true
          }
        });
      }, {
        _sum: {
          totalProfit: null
        }
      }, `Failed to calculate profit for shop ${shop.id}`));
      const totalProfit =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[29]++,
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[7][0]++, profitResult._sum.totalProfit) ||
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[7][1]++, 0));
      // Calculate outstanding invoices for this shop
      const outstandingResult =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[30]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_20xu9akzyb().f[7]++;
        cov_20xu9akzyb().s[31]++;
        return _prisma.prisma.invoice.aggregate({
          where: {
            shopId: shop.id,
            status: {
              notIn: ["paid", "cancelled", "void"]
            }
          },
          _sum: {
            total: true
          }
        });
      }, {
        _sum: {
          total: null
        }
      }, `Failed to calculate outstanding invoices for shop ${shop.id}`));
      const outstandingInvoices =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[32]++,
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[8][0]++, outstandingResult._sum.total) ||
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[8][1]++, 0));
      // Calculate total sales for this shop (from invoices in the date range)
      const salesResult =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[33]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_20xu9akzyb().f[8]++;
        cov_20xu9akzyb().s[34]++;
        return _prisma.prisma.invoice.aggregate({
          where: {
            shopId: shop.id,
            status: {
              not: "Cancelled"
            },
            invoiceDate: {
              gte: startDate,
              lte: endDate
            }
          },
          _sum: {
            total: true
          }
        });
      }, {
        _sum: {
          total: null
        }
      }, `Failed to calculate sales for shop ${shop.id}`));
      const totalSales =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[35]++,
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[9][0]++, salesResult._sum.total) ||
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[9][1]++, 0));
      // Count low stock items for this shop (quantity <= 10)
      const lowStockCount =
      /* istanbul ignore next */
      (cov_20xu9akzyb().s[36]++, await (0, _prisma.safeQuery)(() => {
        /* istanbul ignore next */
        cov_20xu9akzyb().f[9]++;
        cov_20xu9akzyb().s[37]++;
        return _prisma.prisma.inventoryItem.count({
          where: {
            shopId: shop.id,
            quantity: {
              lte: 10
            }
          }
        });
      }, 0, `Failed to count low stock items for shop ${shop.id}`));
      /* istanbul ignore next */
      cov_20xu9akzyb().s[38]++;
      return {
        shopId: shop.id,
        shopName: shop.name,
        totalInventoryCost,
        totalProfit,
        totalSales,
        outstandingInvoices,
        lowStockItems: lowStockCount
      };
    })));
    // 3. Calculate totals across all shops
    const totals =
    /* istanbul ignore next */
    (cov_20xu9akzyb().s[39]++, shopMetrics.reduce((acc, shop) => {
      /* istanbul ignore next */
      cov_20xu9akzyb().f[10]++;
      cov_20xu9akzyb().s[40]++;
      return {
        totalInventoryCost: acc.totalInventoryCost + shop.totalInventoryCost,
        totalProfit: acc.totalProfit + shop.totalProfit,
        totalSales: acc.totalSales + shop.totalSales,
        outstandingInvoices: acc.outstandingInvoices + shop.outstandingInvoices,
        lowStockItems: acc.lowStockItems + shop.lowStockItems
      };
    }, {
      totalInventoryCost: 0,
      totalProfit: 0,
      totalSales: 0,
      outstandingInvoices: 0,
      lowStockItems: 0
    }));
    /* istanbul ignore next */
    cov_20xu9akzyb().s[41]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        shopMetrics,
        totals,
        dateRange: {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString()
        }
      },
      meta: {
        shopsCount: shops.length,
        generatedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_20xu9akzyb().s[42]++;
    console.error("Error fetching shop-wise dashboard metrics:", error);
    /* istanbul ignore next */
    cov_20xu9akzyb().s[43]++;
    return _server.NextResponse.json({
      success: false,
      error: "Failed to fetch shop-wise dashboard metrics",
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_20xu9akzyb().b[10][1]++, "Unknown error")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,