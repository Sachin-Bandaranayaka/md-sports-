{"version":3,"names":["cov_20xu9akzyb","actualCoverage","s","GET","request","f","authResult","_auth","validateTokenPermission","isValid","b","_server","NextResponse","json","error","message","status","searchParams","URL","url","startDateParam","get","endDateParam","endDate","Date","startDate","date","setDate","getDate","console","log","shops","_prisma","safeQuery","prisma","shop","findMany","where","is_active","select","id","name","length","success","data","shopMetrics","Promise","all","map","inventoryCostResult","$queryRaw","totalinventorycost","totalInventoryCost","Number","profitResult","invoice","aggregate","shopId","not","invoiceDate","gte","lte","_sum","totalProfit","outstandingResult","notIn","total","outstandingInvoices","salesResult","totalSales","lowStockCount","inventoryItem","count","quantity","shopName","lowStockItems","totals","reduce","acc","dateRange","toISOString","meta","shopsCount","generatedAt","details","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shop-wise/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Interface for shop-wise metrics\ninterface ShopWiseMetrics {\n    shopId: string;\n    shopName: string;\n    totalInventoryCost: number;\n    totalProfit: number;\n    totalSales: number;\n    outstandingInvoices: number;\n    lowStockItems: number;\n}\n\nexport async function GET(request: NextRequest) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract date range from query parameters\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n        \n        // Default to current month if no dates provided\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : (() => {\n            const date = new Date();\n            date.setDate(date.getDate() - 30); // Default to last 30 days\n            return date;\n        })();\n\n        console.log('Fetching shop-wise metrics for date range:', { startDate, endDate });\n\n        // 1. Get all active shops\n        const shops = await safeQuery(\n            () => prisma.shop.findMany({\n                where: { is_active: true },\n                select: {\n                    id: true,\n                    name: true\n                }\n            }),\n            [],\n            'Failed to fetch shops'\n        );\n\n        if (!shops || shops.length === 0) {\n            return NextResponse.json({\n                success: true,\n                data: [],\n                message: 'No active shops found'\n            });\n        }\n\n        // 2. Calculate metrics for each shop\n        const shopMetrics: ShopWiseMetrics[] = await Promise.all(\n            shops.map(async (shop) => {\n                // Calculate total inventory cost for this shop using shop-specific cost\n                const inventoryCostResult = await safeQuery<Array<{ totalinventorycost: bigint | number | null }>>(\n                    () => prisma.$queryRaw`\n                        SELECT SUM(COALESCE(i.shopspecificcost, 0) * i.quantity) as \"totalinventorycost\"\n                        FROM \"InventoryItem\" i\n                        WHERE i.quantity > 0 \n                        AND i.shopspecificcost IS NOT NULL \n                        AND i.shopspecificcost > 0\n                        AND i.\"shopId\" = ${shop.id}\n                    `,\n                    [{ totalinventorycost: 0 }],\n                    `Failed to calculate inventory cost for shop ${shop.id}`\n                );\n\n                const totalInventoryCost = inventoryCostResult && inventoryCostResult[0] && inventoryCostResult[0].totalinventorycost !== null\n                    ? Number(inventoryCostResult[0].totalinventorycost)\n                    : 0;\n\n                // Calculate total profit for this shop (from invoices in the date range)\n                const profitResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { not: 'Cancelled' },\n                            invoiceDate: {\n                                gte: startDate,\n                                lte: endDate\n                            }\n                        },\n                        _sum: {\n                            totalProfit: true\n                        }\n                    }),\n                    { _sum: { totalProfit: null } },\n                    `Failed to calculate profit for shop ${shop.id}`\n                );\n\n                const totalProfit = profitResult._sum.totalProfit || 0;\n\n                // Calculate outstanding invoices for this shop\n                const outstandingResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { notIn: ['paid', 'cancelled', 'void'] }\n                        },\n                        _sum: {\n                            total: true\n                        }\n                    }),\n                    { _sum: { total: null } },\n                    `Failed to calculate outstanding invoices for shop ${shop.id}`\n                );\n\n                const outstandingInvoices = outstandingResult._sum.total || 0;\n\n                // Calculate total sales for this shop (from invoices in the date range)\n                const salesResult = await safeQuery(\n                    () => prisma.invoice.aggregate({\n                        where: {\n                            shopId: shop.id,\n                            status: { not: 'Cancelled' },\n                            invoiceDate: {\n                                gte: startDate,\n                                lte: endDate\n                            }\n                        },\n                        _sum: {\n                            total: true\n                        }\n                    }),\n                    { _sum: { total: null } },\n                    `Failed to calculate sales for shop ${shop.id}`\n                );\n\n                const totalSales = salesResult._sum.total || 0;\n\n                // Count low stock items for this shop (quantity <= 10)\n                const lowStockCount = await safeQuery(\n                    () => prisma.inventoryItem.count({\n                        where: {\n                            shopId: shop.id,\n                            quantity: { lte: 10 }\n                        }\n                    }),\n                    0,\n                    `Failed to count low stock items for shop ${shop.id}`\n                );\n\n                return {\n                    shopId: shop.id,\n                    shopName: shop.name,\n                    totalInventoryCost,\n                    totalProfit,\n                    totalSales,\n                    outstandingInvoices,\n                    lowStockItems: lowStockCount\n                };\n            })\n        );\n\n        // 3. Calculate totals across all shops\n        const totals = shopMetrics.reduce(\n            (acc, shop) => ({\n                totalInventoryCost: acc.totalInventoryCost + shop.totalInventoryCost,\n                totalProfit: acc.totalProfit + shop.totalProfit,\n                totalSales: acc.totalSales + shop.totalSales,\n                outstandingInvoices: acc.outstandingInvoices + shop.outstandingInvoices,\n                lowStockItems: acc.lowStockItems + shop.lowStockItems\n            }),\n            {\n                totalInventoryCost: 0,\n                totalProfit: 0,\n                totalSales: 0,\n                outstandingInvoices: 0,\n                lowStockItems: 0\n            }\n        );\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                shopMetrics,\n                totals,\n                dateRange: {\n                    startDate: startDate.toISOString(),\n                    endDate: endDate.toISOString()\n                }\n            },\n            meta: {\n                shopsCount: shops.length,\n                generatedAt: new Date().toISOString()\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching shop-wise dashboard metrics:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                error: 'Failed to fetch shop-wise dashboard metrics',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            { status: 500 }\n        );\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBQ;IAAAA,cAAA,YAA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","ignoreList":[]}