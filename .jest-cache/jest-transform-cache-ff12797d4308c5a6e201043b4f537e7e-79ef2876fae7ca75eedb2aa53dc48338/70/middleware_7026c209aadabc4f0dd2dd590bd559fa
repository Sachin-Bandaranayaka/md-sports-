fa7db8e6817b08698ced921820f5cd7f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getShopId: function() {
        return getShopId;
    },
    getUserId: function() {
        return getUserId;
    },
    requireAuth: function() {
        return requireAuth;
    },
    requirePermission: function() {
        return requirePermission;
    }
});
const _server = require("next/server");
const _authService = require("../../services/authService");
const requireAuth = ()=>{
    return async (req)=>{
        try {
            const token = req.headers.get("authorization")?.replace("Bearer ", "");
            if (!token) {
                return _server.NextResponse.json({
                    success: false,
                    message: "Authentication required"
                }, {
                    status: 401
                });
            }
            // Special case for development token
            if (token === "dev-token") {
                console.log("Using development token - skipping verification");
                return null;
            }
            // Use optimized cached authentication
            const user = await (0, _authService.getUserFromToken)(token);
            if (!user) {
                return _server.NextResponse.json({
                    success: false,
                    message: "Invalid token or user not found"
                }, {
                    status: 401
                });
            }
            // User is authenticated
            return null;
        } catch (error) {
            console.error("Auth error:", error);
            return _server.NextResponse.json({
                success: false,
                message: "Authentication failed"
            }, {
                status: 401
            });
        }
    };
};
const requirePermission = (permission)=>{
    return async (req)=>{
        try {
            const token = req.headers.get("authorization")?.replace("Bearer ", "");
            console.log(`Checking permission: ${permission} for token: ${token?.substring(0, 10)}...`);
            if (!token) {
                return _server.NextResponse.json({
                    success: false,
                    message: "Authentication required"
                }, {
                    status: 401
                });
            }
            // Special case for development token - only grant basic permissions, not admin
            if (token === "dev-token") {
                const allowedDevPermissions = [
                    "shop:distribution:view",
                    "read:products",
                    "write:products",
                    "read:invoices",
                    "write:invoices",
                    "user:manage",
                    "shop:manage",
                    "inventory:manage",
                    "settings:manage",
                    "sales:manage",
                    "sales:create:shop"
                ];
                if (allowedDevPermissions.includes(permission)) {
                    console.log(`Development mode: granting permission '${permission}'`);
                    return null;
                } else {
                    console.log(`Development mode: denying admin permission '${permission}'`);
                    return _server.NextResponse.json({
                        success: false,
                        message: `Permission denied: ${permission}`
                    }, {
                        status: 403
                    });
                }
            }
            // Verify the token to get the payload first
            const tokenPayload = await (0, _authService.verifyToken)(token);
            if (!tokenPayload) {
                console.error("Invalid token - payload could not be verified");
                return _server.NextResponse.json({
                    success: false,
                    message: "Invalid token"
                }, {
                    status: 401
                });
            }
            // Now pass the TokenPayload object to hasPermission
            const userHasPermission = await (0, _authService.hasPermission)(tokenPayload, permission);
            if (!userHasPermission) {
                console.error(`Permission denied: ${permission}`);
                return _server.NextResponse.json({
                    success: false,
                    message: `Permission denied: ${permission}`
                }, {
                    status: 403
                });
            }
            console.log(`Permission granted: ${permission}`);
            return null;
        } catch (error) {
            console.error(`Permission check error for ${permission}:`, error);
            return _server.NextResponse.json({
                success: false,
                message: "Permission check failed"
            }, {
                status: 500
            });
        }
    };
};
async function getUserId(req) {
    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return null;
    }
    const token = authHeader.split(" ")[1];
    // Special case for development token
    if (token === "dev-token") {
        return "1"; // Development user ID
    }
    try {
        // Use optimized cached user lookup
        const user = await (0, _authService.getUserFromToken)(token);
        return user ? user.id : null;
    } catch (error) {
        console.error("Token verification error:", error);
        return null;
    }
}
async function getShopId(req) {
    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return null;
    }
    const token = authHeader.split(" ")[1];
    // Special case for development token
    if (token === "dev-token") {
        return null; // Development user might not have a shop
    }
    try {
        // Use optimized cached user lookup
        const user = await (0, _authService.getUserFromToken)(token);
        return user ? user.shopId : null;
    } catch (error) {
        console.error("Token verification error:", error);
        return null;
    }
}

//# sourceMappingURL=data:application/json;base64,