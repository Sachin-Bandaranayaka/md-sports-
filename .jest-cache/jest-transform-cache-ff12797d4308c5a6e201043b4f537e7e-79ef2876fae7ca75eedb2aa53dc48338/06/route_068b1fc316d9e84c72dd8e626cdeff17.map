{"version":3,"names":["DELETE","cov_2goud2vg3b","f","s","GET","PUT","request","params","supplierId","parseInt","id","isNaN","b","_server","NextResponse","json","error","status","supplier","_prisma","default","findUnique","where","console","body","updatedSupplier","update","data","token","headers","get","replace","decoded","_auth","verifyToken","include","purchaseInvoices","auditService","_auditService","AuditService","softDelete","userId","message"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/suppliers/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// GET /api/suppliers/[id] - Get a specific supplier\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(supplier);\n    } catch (error) {\n        console.error(`Error fetching supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch supplier' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/suppliers/[id] - Update a supplier\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        const updatedSupplier = await prisma.supplier.update({\n            where: {\n                id: supplierId\n            },\n            data: body\n        });\n\n        return NextResponse.json(updatedSupplier);\n    } catch (error) {\n        console.error(`Error updating supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to update supplier' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/suppliers/[id] - Delete a supplier\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Get user from token for audit logging\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json(\n                { error: 'No token provided' },\n                { status: 401 }\n            );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json(\n                { error: 'Invalid token' },\n                { status: 401 }\n            );\n        }\n\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            },\n            include: {\n                purchaseInvoices: true\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        // Use audit service for soft delete\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Supplier',\n            supplierId,\n            supplier,\n            decoded.userId,\n            true // canRecover\n        );\n\n        return NextResponse.json(\n            { message: 'Supplier moved to recycle bin successfully' },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error(`Error deleting supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete supplier' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}