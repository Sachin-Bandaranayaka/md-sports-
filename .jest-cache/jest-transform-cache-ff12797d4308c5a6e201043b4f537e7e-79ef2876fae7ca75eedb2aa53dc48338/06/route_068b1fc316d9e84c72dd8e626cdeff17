19d58f78270cf50791134eac47151eff
"use strict";

/* istanbul ignore next */
function cov_2goud2vg3b() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/suppliers/[id]/route.ts";
  var hash = "001f9e7e75a6c900d82a1130a479ad0339ec7157";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/suppliers/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "12": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "13": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "15": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "16": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 51
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 70
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "22": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "23": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 46
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "25": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "26": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 73,
          column: 41
        }
      },
      "27": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "28": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "29": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "30": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "31": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "32": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "34": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 160,
          column: 5
        }
      },
      "35": {
        start: {
          line: 105,
          column: 22
        },
        end: {
          line: 105,
          column: 82
        }
      },
      "36": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "37": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "38": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 59
        }
      },
      "39": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "40": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "41": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 46
        }
      },
      "42": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "43": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "44": {
        start: {
          line: 129,
          column: 25
        },
        end: {
          line: 136,
          column: 10
        }
      },
      "45": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "46": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "47": {
        start: {
          line: 145,
          column: 29
        },
        end: {
          line: 145,
          column: 61
        }
      },
      "48": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 147,
          column: 10
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "50": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 70
        }
      },
      "51": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 18
          }
        },
        loc: {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 18
          }
        },
        loc: {
          start: {
            line: 63,
            column: 40
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 63
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 21
          }
        },
        loc: {
          start: {
            line: 102,
            column: 43
          },
          end: {
            line: 161,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/suppliers/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// GET /api/suppliers/[id] - Get a specific supplier\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(supplier);\n    } catch (error) {\n        console.error(`Error fetching supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to fetch supplier' },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/suppliers/[id] - Update a supplier\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const body = await request.json();\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        const updatedSupplier = await prisma.supplier.update({\n            where: {\n                id: supplierId\n            },\n            data: body\n        });\n\n        return NextResponse.json(updatedSupplier);\n    } catch (error) {\n        console.error(`Error updating supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to update supplier' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE /api/suppliers/[id] - Delete a supplier\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Get user from token for audit logging\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json(\n                { error: 'No token provided' },\n                { status: 401 }\n            );\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json(\n                { error: 'Invalid token' },\n                { status: 401 }\n            );\n        }\n\n        const supplierId = parseInt(params.id);\n\n        if (isNaN(supplierId)) {\n            return NextResponse.json(\n                { error: 'Invalid supplier ID' },\n                { status: 400 }\n            );\n        }\n\n        const supplier = await prisma.supplier.findUnique({\n            where: {\n                id: supplierId\n            },\n            include: {\n                purchaseInvoices: true\n            }\n        });\n\n        if (!supplier) {\n            return NextResponse.json(\n                { error: 'Supplier not found' },\n                { status: 404 }\n            );\n        }\n\n        // Use audit service for soft delete\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Supplier',\n            supplierId,\n            supplier,\n            decoded.userId,\n            true // canRecover\n        );\n\n        return NextResponse.json(\n            { message: 'Supplier moved to recycle bin successfully' },\n            { status: 200 }\n        );\n    } catch (error) {\n        console.error(`Error deleting supplier ${params.id}:`, error);\n        return NextResponse.json(\n            { error: 'Failed to delete supplier' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "supplierId", "parseInt", "id", "isNaN", "NextResponse", "json", "error", "status", "supplier", "prisma", "findUnique", "where", "console", "body", "updatedSupplier", "update", "data", "token", "headers", "get", "replace", "decoded", "verifyToken", "include", "purchaseInvoices", "auditService", "AuditService", "softDelete", "userId", "message"],
      mappings: ";;;;;;;;;;;IA0FsBA,MAAM;eAANA;;IApFAC,GAAG;eAAHA;;IAsCAC,GAAG;eAAHA;;;wBA5CoB;+DACvB;8BACU;sBACD;;;;;;AAGrB,eAAeD,IAClBE,OAAoB,EACpB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACA,MAAMC,aAAaC,SAASF,OAAOG,EAAE;QAErC,IAAIC,MAAMH,aAAa;YACnB,OAAOI,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAsB,GAC/B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMC,WAAW,MAAMC,eAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBACHT,IAAIF;YACR;QACJ;QAEA,IAAI,CAACQ,UAAU;YACX,OAAOJ,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAqB,GAC9B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CAACG;IAC7B,EAAE,OAAOF,OAAO;QACZM,QAAQN,KAAK,CAAC,CAAC,wBAAwB,EAAEP,OAAOG,EAAE,CAAC,CAAC,CAAC,EAAEI;QACvD,OAAOF,oBAAY,CAACC,IAAI,CACpB;YAAEC,OAAO;QAA2B,GACpC;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeV,IAClBC,OAAoB,EACpB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACA,MAAMC,aAAaC,SAASF,OAAOG,EAAE;QAErC,IAAIC,MAAMH,aAAa;YACnB,OAAOI,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAsB,GAC/B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMM,OAAO,MAAMf,QAAQO,IAAI;QAC/B,MAAMG,WAAW,MAAMC,eAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBACHT,IAAIF;YACR;QACJ;QAEA,IAAI,CAACQ,UAAU;YACX,OAAOJ,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAqB,GAC9B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMO,kBAAkB,MAAML,eAAM,CAACD,QAAQ,CAACO,MAAM,CAAC;YACjDJ,OAAO;gBACHT,IAAIF;YACR;YACAgB,MAAMH;QACV;QAEA,OAAOT,oBAAY,CAACC,IAAI,CAACS;IAC7B,EAAE,OAAOR,OAAO;QACZM,QAAQN,KAAK,CAAC,CAAC,wBAAwB,EAAEP,OAAOG,EAAE,CAAC,CAAC,CAAC,EAAEI;QACvD,OAAOF,oBAAY,CAACC,IAAI,CACpB;YAAEC,OAAO;QAA4B,GACrC;YAAEC,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAeZ,OAClBG,OAAoB,EACpB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACA,wCAAwC;QACxC,MAAMkB,QAAQnB,QAAQoB,OAAO,CAACC,GAAG,CAAC,kBAAkBC,QAAQ,WAAW;QACvE,IAAI,CAACH,OAAO;YACR,OAAOb,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAoB,GAC7B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMc,UAAU,MAAMC,IAAAA,iBAAW,EAACL;QAClC,IAAI,CAACI,SAAS;YACV,OAAOjB,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAgB,GACzB;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMP,aAAaC,SAASF,OAAOG,EAAE;QAErC,IAAIC,MAAMH,aAAa;YACnB,OAAOI,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAsB,GAC/B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAMC,WAAW,MAAMC,eAAM,CAACD,QAAQ,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBACHT,IAAIF;YACR;YACAuB,SAAS;gBACLC,kBAAkB;YACtB;QACJ;QAEA,IAAI,CAAChB,UAAU;YACX,OAAOJ,oBAAY,CAACC,IAAI,CACpB;gBAAEC,OAAO;YAAqB,GAC9B;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,oCAAoC;QACpC,MAAMkB,eAAe,IAAIC,0BAAY;QACrC,MAAMD,aAAaE,UAAU,CACzB,YACA3B,YACAQ,UACAa,QAAQO,MAAM,EACd,KAAK,aAAa;;QAGtB,OAAOxB,oBAAY,CAACC,IAAI,CACpB;YAAEwB,SAAS;QAA6C,GACxD;YAAEtB,QAAQ;QAAI;IAEtB,EAAE,OAAOD,OAAO;QACZM,QAAQN,KAAK,CAAC,CAAC,wBAAwB,EAAEP,OAAOG,EAAE,CAAC,CAAC,CAAC,EAAEI;QACvD,OAAOF,oBAAY,CAACC,IAAI,CACpB;YAAEC,OAAO;QAA4B,GACrC;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "001f9e7e75a6c900d82a1130a479ad0339ec7157"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2goud2vg3b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2goud2vg3b();
cov_2goud2vg3b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2goud2vg3b().f[0]++;
  cov_2goud2vg3b().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2goud2vg3b().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2goud2vg3b().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2goud2vg3b().f[1]++;
    cov_2goud2vg3b().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2goud2vg3b().f[2]++;
    cov_2goud2vg3b().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_2goud2vg3b().f[3]++;
    cov_2goud2vg3b().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2goud2vg3b().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2goud2vg3b().s[8]++, _interop_require_default(require("../../../../lib/prisma")));
const _auditService =
/* istanbul ignore next */
(cov_2goud2vg3b().s[9]++, require("../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_2goud2vg3b().s[10]++, require("../../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2goud2vg3b().f[4]++;
  cov_2goud2vg3b().s[11]++;
  return /* istanbul ignore next */(cov_2goud2vg3b().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2goud2vg3b().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2goud2vg3b().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2goud2vg3b().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2goud2vg3b().f[5]++;
  cov_2goud2vg3b().s[12]++;
  try {
    const supplierId =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[13]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[14]++;
    if (isNaN(supplierId)) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[2][0]++;
      cov_2goud2vg3b().s[15]++;
      return _server.NextResponse.json({
        error: "Invalid supplier ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[2][1]++;
    }
    const supplier =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[16]++, await _prisma.default.supplier.findUnique({
      where: {
        id: supplierId
      }
    }));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[17]++;
    if (!supplier) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[3][0]++;
      cov_2goud2vg3b().s[18]++;
      return _server.NextResponse.json({
        error: "Supplier not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[3][1]++;
    }
    cov_2goud2vg3b().s[19]++;
    return _server.NextResponse.json(supplier);
  } catch (error) {
    /* istanbul ignore next */
    cov_2goud2vg3b().s[20]++;
    console.error(`Error fetching supplier ${params.id}:`, error);
    /* istanbul ignore next */
    cov_2goud2vg3b().s[21]++;
    return _server.NextResponse.json({
      error: "Failed to fetch supplier"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2goud2vg3b().f[6]++;
  cov_2goud2vg3b().s[22]++;
  try {
    const supplierId =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[23]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[24]++;
    if (isNaN(supplierId)) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[4][0]++;
      cov_2goud2vg3b().s[25]++;
      return _server.NextResponse.json({
        error: "Invalid supplier ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[4][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[26]++, await request.json());
    const supplier =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[27]++, await _prisma.default.supplier.findUnique({
      where: {
        id: supplierId
      }
    }));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[28]++;
    if (!supplier) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[5][0]++;
      cov_2goud2vg3b().s[29]++;
      return _server.NextResponse.json({
        error: "Supplier not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[5][1]++;
    }
    const updatedSupplier =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[30]++, await _prisma.default.supplier.update({
      where: {
        id: supplierId
      },
      data: body
    }));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[31]++;
    return _server.NextResponse.json(updatedSupplier);
  } catch (error) {
    /* istanbul ignore next */
    cov_2goud2vg3b().s[32]++;
    console.error(`Error updating supplier ${params.id}:`, error);
    /* istanbul ignore next */
    cov_2goud2vg3b().s[33]++;
    return _server.NextResponse.json({
      error: "Failed to update supplier"
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2goud2vg3b().f[7]++;
  cov_2goud2vg3b().s[34]++;
  try {
    // Get user from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[35]++, request.headers.get("authorization")?.replace("Bearer ", ""));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[36]++;
    if (!token) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[6][0]++;
      cov_2goud2vg3b().s[37]++;
      return _server.NextResponse.json({
        error: "No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[6][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[38]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[39]++;
    if (!decoded) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[7][0]++;
      cov_2goud2vg3b().s[40]++;
      return _server.NextResponse.json({
        error: "Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[7][1]++;
    }
    const supplierId =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[41]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[42]++;
    if (isNaN(supplierId)) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[8][0]++;
      cov_2goud2vg3b().s[43]++;
      return _server.NextResponse.json({
        error: "Invalid supplier ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[8][1]++;
    }
    const supplier =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[44]++, await _prisma.default.supplier.findUnique({
      where: {
        id: supplierId
      },
      include: {
        purchaseInvoices: true
      }
    }));
    /* istanbul ignore next */
    cov_2goud2vg3b().s[45]++;
    if (!supplier) {
      /* istanbul ignore next */
      cov_2goud2vg3b().b[9][0]++;
      cov_2goud2vg3b().s[46]++;
      return _server.NextResponse.json({
        error: "Supplier not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2goud2vg3b().b[9][1]++;
    }
    // Use audit service for soft delete
    const auditService =
    /* istanbul ignore next */
    (cov_2goud2vg3b().s[47]++, new _auditService.AuditService());
    /* istanbul ignore next */
    cov_2goud2vg3b().s[48]++;
    await auditService.softDelete("Supplier", supplierId, supplier, decoded.userId, true // canRecover
    );
    /* istanbul ignore next */
    cov_2goud2vg3b().s[49]++;
    return _server.NextResponse.json({
      message: "Supplier moved to recycle bin successfully"
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2goud2vg3b().s[50]++;
    console.error(`Error deleting supplier ${params.id}:`, error);
    /* istanbul ignore next */
    cov_2goud2vg3b().s[51]++;
    return _server.NextResponse.json({
      error: "Failed to delete supplier"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,