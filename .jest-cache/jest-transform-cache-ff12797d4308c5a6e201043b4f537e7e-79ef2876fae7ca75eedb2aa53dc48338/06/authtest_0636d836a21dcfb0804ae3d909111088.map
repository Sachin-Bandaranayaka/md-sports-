{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/auth.test.ts"],"sourcesContent":["// Set up environment variables before any imports\nprocess.env.JWT_SECRET = 'test-secret-key-for-testing';\nprocess.env.NEXTAUTH_SECRET = 'test-nextauth-secret';\n\n// Mock jose library\nconst mockJwtVerify = jest.fn();\njest.mock('jose', () => ({\n  jwtVerify: mockJwtVerify,\n}));\n\n// Mock prisma\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n  },\n};\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\nimport { NextRequest } from 'next/server';\nimport { verifyToken, extractToken, validateTokenPermission, getUserIdFromToken, getShopIdFromToken } from '@/lib/auth';\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n};\n\ndescribe('Auth Utility Functions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n  });\n\n  describe('verifyToken', () => {\n    it('should verify valid token', async () => {\n      const mockPayload = { sub: '1', permissions: ['read'] };\n      mockJwtVerify.mockResolvedValue({ payload: mockPayload });\n\n      const result = await verifyToken('valid-token');\n      expect(result).toEqual(mockPayload);\n      expect(mockJwtVerify).toHaveBeenCalledWith(\n        'valid-token',\n        expect.any(Uint8Array)\n      );\n    });\n\n    it('should handle expired token', async () => {\n      const error = new Error('Token expired');\n      (error as any).code = 'ERR_JWT_EXPIRED';\n      mockJwtVerify.mockRejectedValue(error);\n\n      const result = await verifyToken('expired-token');\n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Token expired:', 'Token expired');\n    });\n\n    it('should handle invalid token signature', async () => {\n      const error = new Error('Invalid signature');\n      (error as any).code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n      mockJwtVerify.mockRejectedValue(error);\n\n      const result = await verifyToken('invalid-token');\n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Invalid token:', 'Invalid signature');\n    });\n\n    it('should handle other verification errors', async () => {\n      const error = new Error('Unknown error');\n      (error as any).code = 'ERR_UNKNOWN';\n      mockJwtVerify.mockRejectedValue(error);\n\n      const result = await verifyToken('error-token');\n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Token verification error:', 'Unknown error');\n    });\n  });\n\n  describe('extractToken', () => {\n    it('should extract token from valid authorization header', () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token-123')\n        }\n      } as unknown as NextRequest;\n\n      const result = extractToken(req);\n      expect(result).toBe('valid-token-123');\n      expect(req.headers.get).toHaveBeenCalledWith('authorization');\n    });\n\n    it('should return null for missing authorization header', () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as unknown as NextRequest;\n\n      const result = extractToken(req);\n      expect(result).toBeNull();\n    });\n\n    it('should return null for invalid authorization header format', () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Invalid token-123')\n        }\n      } as unknown as NextRequest;\n\n      const result = extractToken(req);\n      expect(result).toBeNull();\n    });\n\n    it('should return null for empty authorization header', () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('')\n        }\n      } as unknown as NextRequest;\n\n      const result = extractToken(req);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('validateTokenPermission', () => {\n    it('should return invalid for missing token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as unknown as NextRequest;\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({\n        isValid: false,\n        message: 'Authentication required'\n      });\n    });\n\n    it('should grant permission for dev-token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer dev-token')\n        }\n      } as unknown as NextRequest;\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({ isValid: true });\n      expect(consoleSpy.log).toHaveBeenCalledWith(\"Development mode: granting permission 'read'\");\n    });\n\n    it('should return invalid for invalid token payload', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer invalid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({ payload: null });\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({\n        isValid: false,\n        message: 'Invalid authentication token'\n      });\n    });\n\n    it('should grant permission from token payload', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '1', permissions: ['read', 'write'] }\n      });\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({ isValid: true });\n    });\n\n    it('should fallback to database when permission not in token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '1', permissions: ['write'] }\n      });\n\n      mockPrisma.user.findUnique.mockResolvedValue({\n        id: 1,\n        permissions: ['read', 'write']\n      });\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({ isValid: true });\n    });\n\n    it('should return invalid for user not found', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '999' }\n      });\n\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const result = await validateTokenPermission(req, 'read');\n      expect(result).toEqual({\n        isValid: false,\n        message: 'User not found'\n      });\n    });\n  });\n\n  describe('getUserIdFromToken', () => {\n    it('should return null for missing token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as unknown as NextRequest;\n\n      const result = await getUserIdFromToken(req);\n      expect(result).toBeNull();\n    });\n\n    it('should return 1 for dev-token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer dev-token')\n        }\n      } as unknown as NextRequest;\n\n      const result = await getUserIdFromToken(req);\n      expect(result).toBe(1);\n    });\n\n    it('should return user ID from valid token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '123' }\n      });\n\n      const result = await getUserIdFromToken(req);\n      expect(result).toBe(123);\n    });\n\n    it('should return null for invalid token payload', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer invalid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({ payload: null });\n\n      const result = await getUserIdFromToken(req);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getShopIdFromToken', () => {\n    it('should return null for missing token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue(null)\n        }\n      } as unknown as NextRequest;\n\n      const result = await getShopIdFromToken(req);\n      expect(result).toBeNull();\n    });\n\n    it('should return default shop ID for dev-token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer dev-token')\n        }\n      } as unknown as NextRequest;\n\n      const result = await getShopIdFromToken(req);\n      expect(result).toBe('cmbtr9q6l000061romoxi7uvf');\n    });\n\n    it('should return shop ID from valid token', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '1', shopId: 'shop123' }\n      });\n\n      const result = await getShopIdFromToken(req);\n      expect(result).toBe('shop123');\n    });\n\n    it('should return null for token without shopId', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer no-shop-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '1' }\n      });\n\n      const result = await getShopIdFromToken(req);\n      expect(result).toBeNull();\n    });\n\n    it('should convert numeric shopId to string', async () => {\n      const req = {\n        headers: {\n          get: jest.fn().mockReturnValue('Bearer valid-token')\n        }\n      } as unknown as NextRequest;\n\n      mockJwtVerify.mockResolvedValue({\n        payload: { sub: '1', shopId: 123 }\n      });\n\n      const result = await getShopIdFromToken(req);\n      expect(result).toBe('123');\n    });\n  });\n});"],"names":["jest","mock","jwtVerify","mockJwtVerify","__esModule","default","mockPrisma","process","env","JWT_SECRET","NEXTAUTH_SECRET","fn","user","findUnique","consoleSpy","log","spyOn","console","mockImplementation","error","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","mockPayload","sub","permissions","mockResolvedValue","payload","result","verifyToken","expect","toEqual","toHaveBeenCalledWith","any","Uint8Array","Error","code","mockRejectedValue","toBeNull","req","headers","get","mockReturnValue","extractToken","toBe","validateTokenPermission","isValid","message","id","getUserIdFromToken","getShopIdFromToken","shopId"],"mappings":"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"}