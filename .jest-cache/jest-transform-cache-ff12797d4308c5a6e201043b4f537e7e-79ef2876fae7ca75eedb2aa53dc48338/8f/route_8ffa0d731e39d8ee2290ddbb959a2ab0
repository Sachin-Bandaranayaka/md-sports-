ace4226c4d6c8a74acb4dc02a3082c94
"use strict";

/* istanbul ignore next */
function cov_2aulkl4kta() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/auth/login/route.ts";
  var hash = "f4d7008bf867e8038b2ba03e41712c75e01fc634";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/auth/login/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 12,
          column: 80
        }
      },
      "5": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 64
        }
      },
      "6": {
        start: {
          line: 15,
          column: 19
        },
        end: {
          line: 15,
          column: 72
        }
      },
      "7": {
        start: {
          line: 16,
          column: 36
        },
        end: {
          line: 16,
          column: 84
        }
      },
      "8": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 58
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "11": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 37
        }
      },
      "12": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "15": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 53
        }
      },
      "16": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "18": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 84
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 53
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "21": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 70
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "23": {
        start: {
          line: 47,
          column: 45
        },
        end: {
          line: 47,
          column: 55
        }
      },
      "24": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 60
        }
      },
      "25": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 72
        }
      },
      "26": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 144
        }
      },
      "27": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 31
        }
      },
      "28": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "29": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 103
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 64
        }
      },
      "31": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 115
        }
      },
      "32": {
        start: {
          line: 61,
          column: 25
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "33": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "34": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 87,
          column: 15
        }
      },
      "36": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 66
        }
      },
      "37": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "38": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 45
        }
      },
      "39": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 41
          }
        }, {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 15,
            column: 72
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 16,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 16,
            column: 75
          }
        }, {
          start: {
            line: 16,
            column: 79
          },
          end: {
            line: 16,
            column: 84
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 18
          }
        }, {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 31
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 77
          },
          end: {
            line: 50,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 91
          },
          end: {
            line: 50,
            column: 127
          }
        }, {
          start: {
            line: 50,
            column: 130
          },
          end: {
            line: 50,
            column: 142
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 34
          },
          end: {
            line: 54,
            column: 95
          }
        }, {
          start: {
            line: 54,
            column: 98
          },
          end: {
            line: 54,
            column: 102
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 30
          }
        }, {
          start: {
            line: 70,
            column: 34
          },
          end: {
            line: 70,
            column: 36
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/auth/login/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { generateRefreshToken } from '@/services/refreshTokenService';\nimport { authenticateUser, parseTimeStringToSeconds } from '@/services/authService';\n\n// JWT configuration - use environment variables\nconst JWT_SECRET = process.env.JWT_SECRET || 'CHANGE_THIS_IN_PRODUCTION';\nconst JWT_ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '15m';\nconst COOKIE_SECURE = process.env.NODE_ENV === 'production';\n\nexport async function POST(req: NextRequest) {\n    console.log('[LoginRoute] POST /api/auth/login hit!');\n    try {\n        const body = await req.json();\n        const { email, password } = body;\n\n        console.log('Login attempt for email:', email);\n\n        // Validate request body\n        if (!email || !password) {\n            console.log('Missing email or password');\n            return NextResponse.json(\n                { success: false, message: 'Email and password are required' },\n                { status: 400 }\n            );\n        }\n\n        // Use optimized authentication service\n        console.time('total authentication time');\n        const authResult = await authenticateUser(email, password);\n        console.timeEnd('total authentication time');\n\n        if (!authResult.success) {\n            console.log('Authentication failed:', authResult.message);\n            return NextResponse.json(\n                { success: false, message: authResult.message },\n                { status: 401 }\n            );\n        }\n\n        const { token: accessToken, user } = authResult;\n        console.log('User permissions:', user?.permissions);\n\n        console.log('[LoginRoute] COOKIE_SECURE value:', COOKIE_SECURE);\n        console.log('[LoginRoute] AccessToken value before setting cookie:', accessToken ? accessToken.substring(0, 20) + '...' : 'EMPTY/NULL');\n\n        // Generate refresh token - with fallback if it fails\n        let refreshToken = null;\n        try {\n            refreshToken = user ? await generateRefreshToken(user.id) : null;\n            console.log('Successfully generated refresh token');\n        } catch (error) {\n            console.error('Failed to generate refresh token, continuing with login without refresh token:', error);\n            // We'll continue with login even if refresh token generation fails\n        }\n\n        // Create response object with cookies\n        const response = NextResponse.json({\n            success: true,\n            accessToken,\n            refreshToken,\n            user\n        });\n\n        // Set HTTP-only cookies for tokens (more secure approach)\n        response.cookies.set({\n            name: 'accessToken',\n            value: accessToken || '',\n            httpOnly: true,\n            secure: COOKIE_SECURE,\n            sameSite: 'strict',\n            maxAge: parseTimeStringToSeconds(JWT_ACCESS_TOKEN_EXPIRES_IN),\n            path: '/'\n        });\n\n        // Only set refresh token cookie if we have one\n        if (refreshToken) {\n            response.cookies.set({\n                name: 'refreshToken',\n                value: refreshToken,\n                httpOnly: true,\n                secure: COOKIE_SECURE,\n                sameSite: 'strict',\n                maxAge: 60 * 60 * 24 * 30, // 30 days in seconds\n                path: '/'\n            });\n        }\n\n        console.log('Login successful for user:', user?.username);\n        return response;\n    } catch (error) {\n        console.error('Login error:', error);\n        return NextResponse.json(\n            { success: false, message: 'Authentication failed' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["POST", "JWT_SECRET", "process", "env", "JWT_ACCESS_TOKEN_EXPIRES_IN", "COOKIE_SECURE", "NODE_ENV", "req", "console", "log", "body", "json", "email", "password", "NextResponse", "success", "message", "status", "time", "authResult", "authenticateUser", "timeEnd", "token", "accessToken", "user", "permissions", "substring", "refreshToken", "generateRefreshToken", "id", "error", "response", "cookies", "set", "name", "value", "httpOnly", "secure", "sameSite", "maxAge", "parseTimeStringToSeconds", "path", "username"],
      mappings: ";;;;+BASsBA;;;eAAAA;;;wBAToB;qCACL;6BACsB;AAE3D,gDAAgD;AAChD,MAAMC,aAAaC,QAAQC,GAAG,CAACF,UAAU,IAAI;AAC7C,MAAMG,8BAA8BF,QAAQC,GAAG,CAACC,2BAA2B,IAAI;AAC/E,MAAMC,gBAAgBH,QAAQC,GAAG,CAACG,QAAQ,KAAK;AAExC,eAAeN,KAAKO,GAAgB;IACvCC,QAAQC,GAAG,CAAC;IACZ,IAAI;QACA,MAAMC,OAAO,MAAMH,IAAII,IAAI;QAC3B,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAE5BF,QAAQC,GAAG,CAAC,4BAA4BG;QAExC,wBAAwB;QACxB,IAAI,CAACA,SAAS,CAACC,UAAU;YACrBL,QAAQC,GAAG,CAAC;YACZ,OAAOK,oBAAY,CAACH,IAAI,CACpB;gBAAEI,SAAS;gBAAOC,SAAS;YAAkC,GAC7D;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,uCAAuC;QACvCT,QAAQU,IAAI,CAAC;QACb,MAAMC,aAAa,MAAMC,IAAAA,6BAAgB,EAACR,OAAOC;QACjDL,QAAQa,OAAO,CAAC;QAEhB,IAAI,CAACF,WAAWJ,OAAO,EAAE;YACrBP,QAAQC,GAAG,CAAC,0BAA0BU,WAAWH,OAAO;YACxD,OAAOF,oBAAY,CAACH,IAAI,CACpB;gBAAEI,SAAS;gBAAOC,SAASG,WAAWH,OAAO;YAAC,GAC9C;gBAAEC,QAAQ;YAAI;QAEtB;QAEA,MAAM,EAAEK,OAAOC,WAAW,EAAEC,IAAI,EAAE,GAAGL;QACrCX,QAAQC,GAAG,CAAC,qBAAqBe,MAAMC;QAEvCjB,QAAQC,GAAG,CAAC,qCAAqCJ;QACjDG,QAAQC,GAAG,CAAC,yDAAyDc,cAAcA,YAAYG,SAAS,CAAC,GAAG,MAAM,QAAQ;QAE1H,qDAAqD;QACrD,IAAIC,eAAe;QACnB,IAAI;YACAA,eAAeH,OAAO,MAAMI,IAAAA,yCAAoB,EAACJ,KAAKK,EAAE,IAAI;YAC5DrB,QAAQC,GAAG,CAAC;QAChB,EAAE,OAAOqB,OAAO;YACZtB,QAAQsB,KAAK,CAAC,kFAAkFA;QAChG,mEAAmE;QACvE;QAEA,sCAAsC;QACtC,MAAMC,WAAWjB,oBAAY,CAACH,IAAI,CAAC;YAC/BI,SAAS;YACTQ;YACAI;YACAH;QACJ;QAEA,0DAA0D;QAC1DO,SAASC,OAAO,CAACC,GAAG,CAAC;YACjBC,MAAM;YACNC,OAAOZ,eAAe;YACtBa,UAAU;YACVC,QAAQhC;YACRiC,UAAU;YACVC,QAAQC,IAAAA,qCAAwB,EAACpC;YACjCqC,MAAM;QACV;QAEA,+CAA+C;QAC/C,IAAId,cAAc;YACdI,SAASC,OAAO,CAACC,GAAG,CAAC;gBACjBC,MAAM;gBACNC,OAAOR;gBACPS,UAAU;gBACVC,QAAQhC;gBACRiC,UAAU;gBACVC,QAAQ,KAAK,KAAK,KAAK;gBACvBE,MAAM;YACV;QACJ;QAEAjC,QAAQC,GAAG,CAAC,8BAA8Be,MAAMkB;QAChD,OAAOX;IACX,EAAE,OAAOD,OAAO;QACZtB,QAAQsB,KAAK,CAAC,gBAAgBA;QAC9B,OAAOhB,oBAAY,CAACH,IAAI,CACpB;YAAEI,SAAS;YAAOC,SAAS;QAAwB,GACnD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f4d7008bf867e8038b2ba03e41712c75e01fc634"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2aulkl4kta = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2aulkl4kta();
cov_2aulkl4kta().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2aulkl4kta().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2aulkl4kta().f[0]++;
    cov_2aulkl4kta().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2aulkl4kta().s[3]++, require("next/server"));
const _refreshTokenService =
/* istanbul ignore next */
(cov_2aulkl4kta().s[4]++, require("../../../../services/refreshTokenService"));
const _authService =
/* istanbul ignore next */
(cov_2aulkl4kta().s[5]++, require("../../../../services/authService"));
// JWT configuration - use environment variables
const JWT_SECRET =
/* istanbul ignore next */
(cov_2aulkl4kta().s[6]++,
/* istanbul ignore next */
(cov_2aulkl4kta().b[0][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_2aulkl4kta().b[0][1]++, "CHANGE_THIS_IN_PRODUCTION"));
const JWT_ACCESS_TOKEN_EXPIRES_IN =
/* istanbul ignore next */
(cov_2aulkl4kta().s[7]++,
/* istanbul ignore next */
(cov_2aulkl4kta().b[1][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_2aulkl4kta().b[1][1]++, "15m"));
const COOKIE_SECURE =
/* istanbul ignore next */
(cov_2aulkl4kta().s[8]++, process.env.NODE_ENV === "production");
async function POST(req) {
  /* istanbul ignore next */
  cov_2aulkl4kta().f[1]++;
  cov_2aulkl4kta().s[9]++;
  console.log("[LoginRoute] POST /api/auth/login hit!");
  /* istanbul ignore next */
  cov_2aulkl4kta().s[10]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[11]++, await req.json());
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[12]++, body);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[13]++;
    console.log("Login attempt for email:", email);
    // Validate request body
    /* istanbul ignore next */
    cov_2aulkl4kta().s[14]++;
    if (
    /* istanbul ignore next */
    (cov_2aulkl4kta().b[3][0]++, !email) ||
    /* istanbul ignore next */
    (cov_2aulkl4kta().b[3][1]++, !password)) {
      /* istanbul ignore next */
      cov_2aulkl4kta().b[2][0]++;
      cov_2aulkl4kta().s[15]++;
      console.log("Missing email or password");
      /* istanbul ignore next */
      cov_2aulkl4kta().s[16]++;
      return _server.NextResponse.json({
        success: false,
        message: "Email and password are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2aulkl4kta().b[2][1]++;
    }
    // Use optimized authentication service
    cov_2aulkl4kta().s[17]++;
    console.time("total authentication time");
    const authResult =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[18]++, await (0, _authService.authenticateUser)(email, password));
    /* istanbul ignore next */
    cov_2aulkl4kta().s[19]++;
    console.timeEnd("total authentication time");
    /* istanbul ignore next */
    cov_2aulkl4kta().s[20]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_2aulkl4kta().b[4][0]++;
      cov_2aulkl4kta().s[21]++;
      console.log("Authentication failed:", authResult.message);
      /* istanbul ignore next */
      cov_2aulkl4kta().s[22]++;
      return _server.NextResponse.json({
        success: false,
        message: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2aulkl4kta().b[4][1]++;
    }
    const {
      token: accessToken,
      user
    } =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[23]++, authResult);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[24]++;
    console.log("User permissions:", user?.permissions);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[25]++;
    console.log("[LoginRoute] COOKIE_SECURE value:", COOKIE_SECURE);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[26]++;
    console.log("[LoginRoute] AccessToken value before setting cookie:", accessToken ?
    /* istanbul ignore next */
    (cov_2aulkl4kta().b[5][0]++, accessToken.substring(0, 20) + "...") :
    /* istanbul ignore next */
    (cov_2aulkl4kta().b[5][1]++, "EMPTY/NULL"));
    // Generate refresh token - with fallback if it fails
    let refreshToken =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[27]++, null);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[28]++;
    try {
      /* istanbul ignore next */
      cov_2aulkl4kta().s[29]++;
      refreshToken = user ?
      /* istanbul ignore next */
      (cov_2aulkl4kta().b[6][0]++, await (0, _refreshTokenService.generateRefreshToken)(user.id)) :
      /* istanbul ignore next */
      (cov_2aulkl4kta().b[6][1]++, null);
      /* istanbul ignore next */
      cov_2aulkl4kta().s[30]++;
      console.log("Successfully generated refresh token");
    } catch (error) {
      /* istanbul ignore next */
      cov_2aulkl4kta().s[31]++;
      console.error("Failed to generate refresh token, continuing with login without refresh token:", error);
      // We'll continue with login even if refresh token generation fails
    }
    // Create response object with cookies
    const response =
    /* istanbul ignore next */
    (cov_2aulkl4kta().s[32]++, _server.NextResponse.json({
      success: true,
      accessToken,
      refreshToken,
      user
    }));
    // Set HTTP-only cookies for tokens (more secure approach)
    /* istanbul ignore next */
    cov_2aulkl4kta().s[33]++;
    response.cookies.set({
      name: "accessToken",
      value:
      /* istanbul ignore next */
      (cov_2aulkl4kta().b[7][0]++, accessToken) ||
      /* istanbul ignore next */
      (cov_2aulkl4kta().b[7][1]++, ""),
      httpOnly: true,
      secure: COOKIE_SECURE,
      sameSite: "strict",
      maxAge: (0, _authService.parseTimeStringToSeconds)(JWT_ACCESS_TOKEN_EXPIRES_IN),
      path: "/"
    });
    // Only set refresh token cookie if we have one
    /* istanbul ignore next */
    cov_2aulkl4kta().s[34]++;
    if (refreshToken) {
      /* istanbul ignore next */
      cov_2aulkl4kta().b[8][0]++;
      cov_2aulkl4kta().s[35]++;
      response.cookies.set({
        name: "refreshToken",
        value: refreshToken,
        httpOnly: true,
        secure: COOKIE_SECURE,
        sameSite: "strict",
        maxAge: 60 * 60 * 24 * 30,
        path: "/"
      });
    } else
    /* istanbul ignore next */
    {
      cov_2aulkl4kta().b[8][1]++;
    }
    cov_2aulkl4kta().s[36]++;
    console.log("Login successful for user:", user?.username);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[37]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_2aulkl4kta().s[38]++;
    console.error("Login error:", error);
    /* istanbul ignore next */
    cov_2aulkl4kta().s[39]++;
    return _server.NextResponse.json({
      success: false,
      message: "Authentication failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,