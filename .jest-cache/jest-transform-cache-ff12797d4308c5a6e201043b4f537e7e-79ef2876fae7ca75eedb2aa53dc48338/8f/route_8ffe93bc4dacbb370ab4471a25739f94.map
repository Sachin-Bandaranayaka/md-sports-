{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/bulk-create/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\n\ninterface BulkProductData {\n    name: string;\n    sku?: string;\n    description?: string;\n    price: number;\n    weightedAverageCost?: number;\n    barcode?: string;\n    categoryId?: number;\n    minStockLevel?: number;\n    initialQuantity?: number;\n    shopId?: string;\n}\n\nexport async function POST(request: NextRequest) {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'inventory:manage');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        const { products }: { products: BulkProductData[] } = await request.json();\n\n        if (!Array.isArray(products) || products.length === 0) {\n            return NextResponse.json({ \n                success: false, \n                message: 'Products array is required and must not be empty' \n            }, { status: 400 });\n        }\n\n        const results = [];\n        let successCount = 0;\n\n        for (let i = 0; i < products.length; i++) {\n            const product = products[i];\n            const index = i + 1;\n\n            try {\n                // Validate required fields\n                if (!product.name || !product.price) {\n                    results.push({\n                        index,\n                        success: false,\n                        message: 'Product name and price are required',\n                        productName: product.name\n                    });\n                    continue;\n                }\n\n                // Check for duplicate SKU within the batch\n                if (product.sku) {\n                    const duplicateInBatch = products.slice(0, i).find(p => p.sku === product.sku);\n                    if (duplicateInBatch) {\n                        results.push({\n                            index,\n                            success: false,\n                            message: `SKU '${product.sku}' is duplicated within the batch`,\n                            productName: product.name\n                        });\n                        continue;\n                    }\n\n                    // Check if SKU already exists in database\n                    const existingSKU = await prisma.product.findUnique({\n                        where: { sku: product.sku }\n                    });\n\n                    if (existingSKU) {\n                        results.push({\n                            index,\n                            success: false,\n                            message: `SKU '${product.sku}' already exists`,\n                            productName: product.name\n                        });\n                        continue;\n                    }\n                }\n\n                // Create product in transaction\n                await prisma.$transaction(async (tx) => {\n                    const newProduct = await tx.product.create({\n                        data: {\n                            name: product.name,\n                            sku: product.sku || null,\n                            description: product.description || null,\n                            price: product.price,\n                            weightedAverageCost: product.weightedAverageCost || 0,\n                            barcode: product.barcode || null,\n                            categoryId: product.categoryId || null,\n                            minStockLevel: product.minStockLevel || 10,\n                        }\n                    });\n\n                    // Create initial inventory if specified\n                    if (product.initialQuantity && product.initialQuantity > 0 && product.shopId) {\n                        await tx.inventoryItem.create({\n                            data: {\n                                productId: newProduct.id,\n                                quantity: product.initialQuantity,\n                                shopId: product.shopId,\n                            }\n                        });\n                    }\n                });\n\n                results.push({\n                    index,\n                    success: true,\n                    message: 'Product created successfully',\n                    productName: product.name\n                });\n                successCount++;\n\n            } catch (error: any) {\n                console.error(`Error creating product ${index}:`, error);\n                let message = 'Database error during creation';\n                \n                if (error.code === 'P2002') {\n                    if (error.meta?.target?.includes('sku')) {\n                        message = `SKU '${product.sku}' already exists`;\n                    } else {\n                        message = 'Duplicate entry detected';\n                    }\n                }\n\n                results.push({\n                    index,\n                    success: false,\n                    message,\n                    productName: product.name\n                });\n            }\n        }\n\n        // Invalidate cache if any products were created\n        if (successCount > 0) {\n            const { cacheService } = await import('@/lib/cache');\n            await cacheService.invalidateInventory();\n        }\n\n        return NextResponse.json({\n            success: successCount > 0,\n            message: `${successCount} out of ${products.length} products created successfully`,\n            totalProcessed: products.length,\n            successCount,\n            failureCount: products.length - successCount,\n            results\n        });\n\n    } catch (error: any) {\n        console.error('Bulk product creation error:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to process bulk product creation',\n            error: error.message\n        }, { status: 500 });\n    }\n} "],"names":["POST","request","authResult","validateTokenPermission","isValid","NextResponse","json","error","message","status","products","Array","isArray","length","success","results","successCount","i","product","index","name","price","push","productName","sku","duplicateInBatch","slice","find","p","existingSKU","prisma","findUnique","where","$transaction","tx","newProduct","create","data","description","weightedAverageCost","barcode","categoryId","minStockLevel","initialQuantity","shopId","inventoryItem","productId","id","quantity","console","code","meta","target","includes","cacheService","invalidateInventory","totalProcessed","failureCount"],"mappings":"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"}