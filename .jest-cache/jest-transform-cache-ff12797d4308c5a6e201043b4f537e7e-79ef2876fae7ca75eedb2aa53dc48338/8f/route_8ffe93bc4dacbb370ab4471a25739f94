2adfdf7c8e0720fbd4ffb0d32d0df54d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _prisma = require("../../../../lib/prisma");
const _auth = require("../../../../lib/auth");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
async function POST(request) {
    try {
        // Validate token and permissions
        const authResult = await (0, _auth.validateTokenPermission)(request, "inventory:manage");
        if (!authResult.isValid) {
            return _server.NextResponse.json({
                error: authResult.message
            }, {
                status: 401
            });
        }
        const { products } = await request.json();
        if (!Array.isArray(products) || products.length === 0) {
            return _server.NextResponse.json({
                success: false,
                message: "Products array is required and must not be empty"
            }, {
                status: 400
            });
        }
        const results = [];
        let successCount = 0;
        for(let i = 0; i < products.length; i++){
            const product = products[i];
            const index = i + 1;
            try {
                // Validate required fields
                if (!product.name || !product.price) {
                    results.push({
                        index,
                        success: false,
                        message: "Product name and price are required",
                        productName: product.name
                    });
                    continue;
                }
                // Check for duplicate SKU within the batch
                if (product.sku) {
                    const duplicateInBatch = products.slice(0, i).find((p)=>p.sku === product.sku);
                    if (duplicateInBatch) {
                        results.push({
                            index,
                            success: false,
                            message: `SKU '${product.sku}' is duplicated within the batch`,
                            productName: product.name
                        });
                        continue;
                    }
                    // Check if SKU already exists in database
                    const existingSKU = await _prisma.prisma.product.findUnique({
                        where: {
                            sku: product.sku
                        }
                    });
                    if (existingSKU) {
                        results.push({
                            index,
                            success: false,
                            message: `SKU '${product.sku}' already exists`,
                            productName: product.name
                        });
                        continue;
                    }
                }
                // Create product in transaction
                await _prisma.prisma.$transaction(async (tx)=>{
                    const newProduct = await tx.product.create({
                        data: {
                            name: product.name,
                            sku: product.sku || null,
                            description: product.description || null,
                            price: product.price,
                            weightedAverageCost: product.weightedAverageCost || 0,
                            barcode: product.barcode || null,
                            categoryId: product.categoryId || null,
                            minStockLevel: product.minStockLevel || 10
                        }
                    });
                    // Create initial inventory if specified
                    if (product.initialQuantity && product.initialQuantity > 0 && product.shopId) {
                        await tx.inventoryItem.create({
                            data: {
                                productId: newProduct.id,
                                quantity: product.initialQuantity,
                                shopId: product.shopId
                            }
                        });
                    }
                });
                results.push({
                    index,
                    success: true,
                    message: "Product created successfully",
                    productName: product.name
                });
                successCount++;
            } catch (error) {
                console.error(`Error creating product ${index}:`, error);
                let message = "Database error during creation";
                if (error.code === "P2002") {
                    if (error.meta?.target?.includes("sku")) {
                        message = `SKU '${product.sku}' already exists`;
                    } else {
                        message = "Duplicate entry detected";
                    }
                }
                results.push({
                    index,
                    success: false,
                    message,
                    productName: product.name
                });
            }
        }
        // Invalidate cache if any products were created
        if (successCount > 0) {
            const { cacheService } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../../lib/cache")));
            await cacheService.invalidateInventory();
        }
        return _server.NextResponse.json({
            success: successCount > 0,
            message: `${successCount} out of ${products.length} products created successfully`,
            totalProcessed: products.length,
            successCount,
            failureCount: products.length - successCount,
            results
        });
    } catch (error) {
        console.error("Bulk product creation error:", error);
        return _server.NextResponse.json({
            success: false,
            message: "Failed to process bulk product creation",
            error: error.message
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,