{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/auditService.ts"],"sourcesContent":["// @ts-nocheck\nimport { PrismaClient } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\n\nexport interface AuditLogEntry {\n  id?: number;\n  userId?: string | null;\n  action: string;\n  entity: string;\n  entityId?: number;\n  details?: any;\n  originalData?: any;\n  isDeleted?: boolean;\n  deletedAt?: Date;\n  deletedBy?: string;\n  canRecover?: boolean;\n  recoveredAt?: Date;\n  recoveredBy?: string;\n  createdAt?: Date;\n}\n\nexport interface RecycleBinItem {\n  id: number;\n  entity: string;\n  entityId: number;\n  originalData: any;\n  deletedAt: Date;\n  deletedBy: string;\n  deletedByUser?: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  canRecover: boolean;\n}\n\nexport class AuditService {\n  private static instance: AuditService;\n  private prisma: PrismaClient;\n\n  private constructor() {\n    this.prisma = prisma;\n  }\n\n  public static getInstance(): AuditService {\n    if (!AuditService.instance) {\n      AuditService.instance = new AuditService();\n    }\n    return AuditService.instance;\n  }\n\n  /**\n   * Log an audit entry\n   */\n  async logAction(entry: AuditLogEntry): Promise<void> {\n    try {\n      // Prepare details object with all the additional information\n      const details = {\n        ...entry.details,\n        originalData: entry.originalData,\n        isDeleted: entry.isDeleted || false,\n        deletedAt: entry.deletedAt,\n        deletedBy: entry.deletedBy,\n        canRecover: entry.canRecover || false,\n        recoveredAt: entry.recoveredAt,\n        recoveredBy: entry.recoveredBy,\n      };\n\n      await this.prisma.auditLog.create({\n        data: {\n          userId: entry.userId,\n          action: entry.action,\n          entity: entry.entity,\n          entityId: entry.entityId,\n          details: details,\n        },\n      });\n    } catch (error) {\n      console.error('Failed to log audit entry:', error);\n      // Don't throw error to avoid breaking the main operation\n    }\n  }\n\n  /**\n   * Soft delete an entity and log it\n   */\n  async softDelete(\n    entity: string,\n    entityId: number,\n    originalData: any,\n    userId: string, // Changed to string\n    canRecover: boolean = true\n  ): Promise<void> {\n    await this.logAction({\n      userId,\n      action: 'DELETE',\n      entity,\n      entityId,\n      originalData,\n      isDeleted: true,\n      deletedAt: new Date(),\n      deletedBy: userId, // No toString needed\n      canRecover,\n      details: {\n        type: 'soft_delete',\n        recoverable: canRecover,\n      },\n    });\n  }\n\n  /**\n   * Get recycle bin items (deleted items that can be recovered)\n   */\n  async getRecycleBinItems(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: RecycleBinItem[]; total: number }> {\n    const where = {\n      action: 'DELETE',\n      ...(entity && { entity }),\n    };\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: limit,\n        skip: offset,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    // Filter and map items that are deleted and recoverable\n    const recycleBinItems = items\n      .filter((item) => {\n        const details = item.details as any;\n        return details?.isDeleted && details?.canRecover && !details?.recoveredAt;\n      })\n      .map((item) => {\n        const details = item.details as any;\n        return {\n          id: item.id,\n          entity: item.entity,\n          entityId: item.entityId!,\n          originalData: details?.originalData,\n          deletedAt: details?.deletedAt ? new Date(details.deletedAt) : item.createdAt,\n          deletedBy: details?.deletedBy || (item.userId as string),\n          deletedByUser: undefined,\n          canRecover: details?.canRecover || false,\n        } as RecycleBinItem;\n      });\n\n    // Fetch user details for deletedBy users if any\n    const userIds = Array.from(new Set(recycleBinItems.map((i) => i.deletedBy).filter(Boolean)));\n    if (userIds.length) {\n      const users = await this.prisma.user.findMany({\n        where: {\n          id: { in: userIds.map((id) => id.toString()) },\n        },\n        select: { id: true, name: true, email: true },\n      });\n      const userMap = Object.fromEntries(users.map((u) => [u.id, u]));\n      recycleBinItems.forEach((item) => {\n        if (item.deletedBy && userMap[item.deletedBy]) {\n          item.deletedByUser = userMap[item.deletedBy];\n        }\n      });\n    }\n\n    return {\n      items: recycleBinItems,\n      total,\n    };\n  }\n\n  /**\n   * Get paginated list of ALL audit entries (create/update/delete etc)\n   */\n  async getAuditEntries(\n    entity?: string,\n    limit: number = 50,\n    offset: number = 0\n  ): Promise<{ items: AuditLogEntry[]; total: number }> {\n    const where: any = {};\n    if (entity) {\n      where.entity = entity;\n    }\n\n    const [items, total] = await Promise.all([\n      this.prisma.auditLog.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        skip: offset,\n        take: limit,\n      }),\n      this.prisma.auditLog.count({ where }),\n    ]);\n\n    return { items: items as AuditLogEntry[], total };\n  }\n\n  /**\n   * Recover a deleted item\n   */\n  async recoverItem(\n    auditLogId: number,\n    userId: number\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const auditEntry = await this.prisma.auditLog.findUnique({\n        where: { id: auditLogId },\n      });\n\n      if (!auditEntry) {\n        return { success: false, message: 'Audit entry not found' };\n      }\n\n      const details = auditEntry.details as any;\n      if (!details?.isDeleted || !details?.canRecover || details?.recoveredAt) {\n        return { success: false, message: 'Item cannot be recovered' };\n      }\n\n      // Restore the data based on entity type\n      const restoredData = await this.restoreEntityData(\n        auditEntry.entity,\n        details.originalData\n      );\n\n      if (!restoredData.success) {\n        return restoredData;\n      }\n\n      // Mark as recovered by updating the details\n      const updatedDetails = {\n        ...details,\n        recoveredAt: new Date(),\n        recoveredBy: userId.toString(),\n      };\n\n      await this.prisma.auditLog.update({\n        where: { id: auditLogId },\n        data: {\n          details: updatedDetails,\n        },\n      });\n\n      // Log the recovery action\n      await this.logAction({\n        userId,\n        action: 'RECOVER',\n        entity: auditEntry.entity,\n        entityId: restoredData.data?.id,\n        details: {\n          type: 'recovery',\n          originalAuditLogId: auditLogId,\n          recoveredData: restoredData.data,\n        },\n      });\n\n      return {\n        success: true,\n        message: 'Item recovered successfully',\n        data: restoredData.data,\n      };\n    } catch (error) {\n      console.error('Failed to recover item:', error);\n      return { success: false, message: 'Failed to recover item' };\n    }\n  }\n\n  /**\n   * Restore entity data based on entity type\n   */\n  private async restoreEntityData(\n    entity: string,\n    originalData: any\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      let restoredData;\n\n      switch (entity.toLowerCase()) {\n        case 'product':\n          restoredData = await this.prisma.product.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              price: originalData.price,\n              cost: originalData.cost,\n              sku: originalData.sku,\n              barcode: originalData.barcode,\n              categoryId: originalData.categoryId,\n              supplierId: originalData.supplierId,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n              unit: originalData.unit,\n              weight: originalData.weight,\n              dimensions: originalData.dimensions,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'customer':\n          restoredData = await this.prisma.customer.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              creditLimit: originalData.creditLimit,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'supplier':\n          restoredData = await this.prisma.supplier.create({\n            data: {\n              name: originalData.name,\n              email: originalData.email,\n              phone: originalData.phone,\n              address: originalData.address,\n              city: originalData.city,\n              postalCode: originalData.postalCode,\n              country: originalData.country,\n              taxNumber: originalData.taxNumber,\n              paymentTerms: originalData.paymentTerms,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'category':\n          restoredData = await this.prisma.category.create({\n            data: {\n              name: originalData.name,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'receipt':\n          restoredData = await this.prisma.receipt.create({\n            data: {\n              receiptNumber: originalData.receiptNumber,\n              paymentId: originalData.paymentId,\n              receiptDate: originalData.receiptDate ? new Date(originalData.receiptDate) : new Date(),\n              bankName: originalData.bankName,\n              accountNumber: originalData.accountNumber,\n              chequeNumber: originalData.chequeNumber,\n              transactionId: originalData.transactionId,\n              notes: originalData.notes,\n              confirmedBy: originalData.confirmedBy,\n            },\n          });\n          break;\n\n        case 'user':\n          restoredData = await this.prisma.user.create({\n            data: {\n              id: originalData.id,\n              name: originalData.name,\n              email: originalData.email,\n              password: originalData.password,\n              phone: originalData.phone,\n              roleId: originalData.roleId,\n              roleName: originalData.roleName,\n              shopId: originalData.shopId,\n              permissions: originalData.permissions,\n              allowedAccounts: originalData.allowedAccounts,\n              isActive: originalData.isActive ?? true,\n            },\n          });\n          break;\n\n        case 'shop':\n          restoredData = await this.prisma.shop.create({\n            data: {\n              id: originalData.id,\n              name: originalData.name,\n              location: originalData.location,\n              contact_person: originalData.contact_person,\n              phone: originalData.phone,\n              email: originalData.email,\n              is_active: originalData.is_active ?? true,\n              opening_time: originalData.opening_time,\n              closing_time: originalData.closing_time,\n              manager_id: originalData.manager_id,\n              opening_date: originalData.opening_date ? new Date(originalData.opening_date) : null,\n              status: originalData.status,\n              address_line1: originalData.address_line1,\n              address_line2: originalData.address_line2,\n              city: originalData.city,\n              state: originalData.state,\n              postal_code: originalData.postal_code,\n              country: originalData.country,\n              latitude: originalData.latitude,\n              longitude: originalData.longitude,\n              tax_rate: originalData.tax_rate,\n            },\n          });\n          break;\n\n        case 'inventoryitem':\n          restoredData = await this.prisma.inventoryItem.create({\n            data: {\n              productId: originalData.productId,\n              shopId: originalData.shopId,\n              quantity: originalData.quantity,\n              shopSpecificCost: originalData.shopSpecificCost,\n              minStockLevel: originalData.minStockLevel,\n              maxStockLevel: originalData.maxStockLevel,\n            },\n          });\n          break;\n\n        case 'inventorytransfer':\n          restoredData = await this.prisma.inventoryTransfer.create({\n            data: {\n              fromShopId: originalData.fromShopId,\n              toShopId: originalData.toShopId,\n              fromUserId: originalData.fromUserId,\n              toUserId: originalData.toUserId,\n              status: originalData.status || 'pending',\n              notes: originalData.notes,\n            },\n          });\n          break;\n\n        case 'purchaseinvoice':\n          restoredData = await this.prisma.purchaseInvoice.create({\n            data: {\n              invoiceNumber: originalData.invoiceNumber,\n              supplierId: originalData.supplierId,\n              total: originalData.total,\n              status: originalData.status,\n              distributions: originalData.distributions,\n              date: originalData.date ? new Date(originalData.date) : null,\n              dueDate: originalData.dueDate ? new Date(originalData.dueDate) : null,\n            },\n          });\n          break;\n\n        case 'payment':\n          restoredData = await this.prisma.payment.create({\n            data: {\n              invoiceId: originalData.invoiceId,\n              customerId: originalData.customerId,\n              amount: originalData.amount,\n              paymentMethod: originalData.paymentMethod,\n              referenceNumber: originalData.referenceNumber,\n              accountId: originalData.accountId,\n            },\n          });\n          break;\n\n        case 'notification':\n          restoredData = await this.prisma.notification.create({\n            data: {\n              userId: originalData.userId,\n              title: originalData.title,\n              message: originalData.message,\n              isRead: originalData.isRead ?? false,\n            },\n          });\n          break;\n\n        case 'systemsettings':\n          restoredData = await this.prisma.systemSettings.create({\n            data: {\n              key: originalData.key,\n              value: originalData.value,\n              description: originalData.description,\n            },\n          });\n          break;\n\n        case 'account':\n          restoredData = await this.prisma.account.create({\n            data: {\n              name: originalData.name,\n              type: originalData.type,\n              balance: originalData.balance,\n              description: originalData.description,\n              isActive: originalData.isActive ?? true,\n              parentId: originalData.parentId,\n            },\n          });\n          break;\n\n        case 'transaction':\n          restoredData = await this.prisma.transaction.create({\n            data: {\n              date: originalData.date ? new Date(originalData.date) : new Date(),\n              description: originalData.description,\n              accountId: originalData.accountId,\n              toAccountId: originalData.toAccountId,\n              type: originalData.type,\n              amount: originalData.amount,\n              reference: originalData.reference,\n              category: originalData.category,\n            },\n          });\n          break;\n\n        case 'quotation':\n          restoredData = await this.prisma.quotation.create({\n            data: {\n              quotationNumber: originalData.quotationNumber,\n              customerId: originalData.customerId,\n              total: originalData.total,\n              validUntil: originalData.validUntil ? new Date(originalData.validUntil) : null,\n              shopId: originalData.shopId,\n            },\n          });\n          break;\n\n        case 'invoice':\n          restoredData = await this.prisma.invoice.create({\n            data: {\n              invoiceNumber: originalData.invoiceNumber,\n              customerId: originalData.customerId,\n              total: originalData.total,\n              discountType: originalData.discountType,\n              discountValue: originalData.discountValue,\n              totalProfit: originalData.totalProfit,\n              profitMargin: originalData.profitMargin,\n              status: originalData.status,\n              paymentMethod: originalData.paymentMethod,\n              invoiceDate: originalData.invoiceDate ? new Date(originalData.invoiceDate) : null,\n              dueDate: originalData.dueDate ? new Date(originalData.dueDate) : null,\n              notes: originalData.notes,\n              shopId: originalData.shopId,\n              createdBy: originalData.createdBy,\n            },\n          });\n          break;\n\n        default:\n          return {\n            success: false,\n            message: `Recovery not supported for entity type: ${entity}`,\n          };\n      }\n\n      return {\n        success: true,\n        message: 'Entity restored successfully',\n        data: restoredData,\n      };\n    } catch (error) {\n      console.error(`Failed to restore ${entity}:`, error);\n      return {\n        success: false,\n        message: `Failed to restore ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Get audit history for an entity\n   */\n  async getEntityHistory(\n    entity: string,\n    entityId: number,\n    limit: number = 20\n  ): Promise<AuditLogEntry[]> {\n    const entries = await this.prisma.auditLog.findMany({\n      where: {\n        entity,\n        entityId,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        deletedByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n        recoveredByUser: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n\n    return entries;\n  }\n\n  /**\n   * Permanently delete items from recycle bin\n   */\n  async permanentlyDelete(auditLogIds: number[]): Promise<void> {\n    // Permanently remove audit log entries (DELETE actions)\n    await this.prisma.auditLog.deleteMany({\n      where: {\n        id: { in: auditLogIds },\n        action: 'DELETE',\n      },\n    });\n  }\n\n  /**\n   * Clean up old deleted items (older than specified days)\n   */\n  async cleanupOldDeletedItems(daysOld: number = 30): Promise<number> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n    const result = await this.prisma.auditLog.updateMany({\n      where: {\n        isDeleted: true,\n        canRecover: true,\n        deletedAt: {\n          lt: cutoffDate,\n        },\n      },\n      data: {\n        canRecover: false,\n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Get IDs of soft-deleted entities for a specific entity type\n   */\n  async getDeletedEntityIds(entity: string): Promise<number[]> {\n    try {\n      const deletedEntries = await this.prisma.auditLog.findMany({\n        where: {\n          entity,\n          action: 'DELETE',\n        },\n        select: {\n          entityId: true,\n          details: true,\n        },\n      });\n\n      // Filter for items that are deleted and not recovered\n      const deletedIds = deletedEntries\n        .filter((entry) => {\n          const details = entry.details as any;\n          return details?.isDeleted && !details?.recoveredAt;\n        })\n        .map((entry) => entry.entityId!)\n        .filter((id) => id !== null);\n\n      return deletedIds;\n    } catch (error) {\n      console.error(`Error getting deleted entity IDs for ${entity}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const auditService = AuditService.getInstance();"],"names":["AuditService","auditService","prisma","getInstance","instance","logAction","entry","details","originalData","isDeleted","deletedAt","deletedBy","canRecover","recoveredAt","recoveredBy","auditLog","create","data","userId","action","entity","entityId","error","console","softDelete","Date","type","recoverable","getRecycleBinItems","limit","offset","where","items","total","Promise","all","findMany","orderBy","createdAt","take","skip","count","recycleBinItems","filter","item","map","id","deletedByUser","undefined","userIds","Array","from","Set","i","Boolean","length","users","user","in","toString","select","name","email","userMap","Object","fromEntries","u","forEach","getAuditEntries","recoverItem","auditLogId","auditEntry","findUnique","success","message","restoredData","restoreEntityData","updatedDetails","update","originalAuditLogId","recoveredData","toLowerCase","product","description","price","cost","sku","barcode","categoryId","supplierId","minStockLevel","maxStockLevel","unit","weight","dimensions","isActive","customer","phone","address","city","postalCode","country","taxNumber","creditLimit","paymentTerms","supplier","category","receipt","receiptNumber","paymentId","receiptDate","bankName","accountNumber","chequeNumber","transactionId","notes","confirmedBy","password","roleId","roleName","shopId","permissions","allowedAccounts","shop","location","contact_person","is_active","opening_time","closing_time","manager_id","opening_date","status","address_line1","address_line2","state","postal_code","latitude","longitude","tax_rate","inventoryItem","productId","quantity","shopSpecificCost","inventoryTransfer","fromShopId","toShopId","fromUserId","toUserId","purchaseInvoice","invoiceNumber","distributions","date","dueDate","payment","invoiceId","customerId","amount","paymentMethod","referenceNumber","accountId","notification","title","isRead","systemSettings","key","value","account","balance","parentId","transaction","toAccountId","reference","quotation","quotationNumber","validUntil","invoice","discountType","discountValue","totalProfit","profitMargin","invoiceDate","createdBy","Error","getEntityHistory","entries","include","recoveredByUser","permanentlyDelete","auditLogIds","deleteMany","cleanupOldDeletedItems","daysOld","cutoffDate","setDate","getDate","result","updateMany","lt","getDeletedEntityIds","deletedEntries","deletedIds"],"mappings":"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"}