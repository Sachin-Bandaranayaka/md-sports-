8bb578c0fc729f83a5471beb17e8ccc6
"use strict";

/* istanbul ignore next */
function cov_ovr9nr576() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/history/route.ts";
  var hash = "a65412145e69e781e8a37176eac932fc8249e17c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/history/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 92
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "7": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "10": {
        start: {
          line: 29,
          column: 33
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "11": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "12": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "13": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "14": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 33,
          column: 82
        }
      },
      "15": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 74
        }
      },
      "16": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "17": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 50
        }
      },
      "19": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 38,
          column: 50
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "21": {
        start: {
          line: 41,
          column: 36
        },
        end: {
          line: 41,
          column: 53
        }
      },
      "22": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "23": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 45
        }
      },
      "24": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 28
        }
      },
      "25": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "27": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "28": {
        start: {
          line: 85,
          column: 22
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "29": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "30": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "31": {
        start: {
          line: 126,
          column: 26
        },
        end: {
          line: 147,
          column: 10
        }
      },
      "32": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "33": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "34": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "35": {
        start: {
          line: 186,
          column: 26
        },
        end: {
          line: 211,
          column: 10
        }
      },
      "36": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "37": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 35
        }
      },
      "38": {
        start: {
          line: 214,
          column: 35
        },
        end: {
          line: 214,
          column: 75
        }
      },
      "39": {
        start: {
          line: 215,
          column: 36
        },
        end: {
          line: 215,
          column: 45
        }
      },
      "40": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 43
        }
      },
      "41": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "42": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 45
        }
      },
      "43": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 138
        }
      },
      "44": {
        start: {
          line: 220,
          column: 80
        },
        end: {
          line: 220,
          column: 126
        }
      },
      "45": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 74
        }
      },
      "46": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 44
        }
      },
      "47": {
        start: {
          line: 223,
          column: 19
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "48": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 42
        }
      },
      "49": {
        start: {
          line: 225,
          column: 35
        },
        end: {
          line: 225,
          column: 46
        }
      },
      "50": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 61
        }
      },
      "51": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 110
        }
      },
      "52": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 43
        }
      },
      "53": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "54": {
        start: {
          line: 243,
          column: 31
        },
        end: {
          line: 243,
          column: 137
        }
      },
      "55": {
        start: {
          line: 243,
          column: 87
        },
        end: {
          line: 243,
          column: 124
        }
      },
      "56": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 83
        }
      },
      "57": {
        start: {
          line: 245,
          column: 36
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "58": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "59": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 92
        }
      },
      "60": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 252,
          column: 92
        }
      },
      "61": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 259,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 66,
            column: 27
          }
        },
        loc: {
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 23
          }
        },
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 148,
            column: 26
          },
          end: {
            line: 148,
            column: 27
          }
        },
        loc: {
          start: {
            line: 148,
            column: 34
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 148
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 27
          }
        },
        loc: {
          start: {
            line: 212,
            column: 33
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 212
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 220,
            column: 64
          },
          end: {
            line: 220,
            column: 65
          }
        },
        loc: {
          start: {
            line: 220,
            column: 80
          },
          end: {
            line: 220,
            column: 126
          }
        },
        line: 220
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 243,
            column: 78
          },
          end: {
            line: 243,
            column: 79
          }
        },
        loc: {
          start: {
            line: 243,
            column: 87
          },
          end: {
            line: 243,
            column: 124
          }
        },
        line: 243
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 245,
            column: 28
          },
          end: {
            line: 245,
            column: 29
          }
        },
        loc: {
          start: {
            line: 245,
            column: 36
          },
          end: {
            line: 245,
            column: 81
          }
        },
        line: 245
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 33
          },
          end: {
            line: 33,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 51
          },
          end: {
            line: 33,
            column: 77
          }
        }, {
          start: {
            line: 33,
            column: 80
          },
          end: {
            line: 33,
            column: 82
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 43
          },
          end: {
            line: 34,
            column: 67
          }
        }, {
          start: {
            line: 34,
            column: 70
          },
          end: {
            line: 34,
            column: 74
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 61
          }
        }, {
          start: {
            line: 35,
            column: 64
          },
          end: {
            line: 35,
            column: 68
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 51,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 68
          },
          end: {
            line: 51,
            column: 78
          }
        }, {
          start: {
            line: 51,
            column: 81
          },
          end: {
            line: 51,
            column: 90
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 31
          },
          end: {
            line: 89,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 68
          },
          end: {
            line: 89,
            column: 78
          }
        }, {
          start: {
            line: 89,
            column: 81
          },
          end: {
            line: 89,
            column: 90
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 24
          },
          end: {
            line: 111,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 24
          },
          end: {
            line: 111,
            column: 43
          }
        }, {
          start: {
            line: 111,
            column: 47
          },
          end: {
            line: 111,
            column: 56
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 112,
            column: 26
          },
          end: {
            line: 112,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 26
          },
          end: {
            line: 112,
            column: 49
          }
        }, {
          start: {
            line: 112,
            column: 53
          },
          end: {
            line: 112,
            column: 62
          }
        }],
        line: 112
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 68
          },
          end: {
            line: 130,
            column: 78
          }
        }, {
          start: {
            line: 130,
            column: 81
          },
          end: {
            line: 130,
            column: 90
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 64
          },
          end: {
            line: 205,
            column: 74
          }
        }, {
          start: {
            line: 205,
            column: 77
          },
          end: {
            line: 205,
            column: 86
          }
        }],
        line: 205
      },
      "14": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: 223,
            column: 19
          },
          end: {
            line: 229,
            column: 13
          }
        }],
        line: 218
      },
      "15": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 218,
            column: 47
          }
        }, {
          start: {
            line: 218,
            column: 51
          },
          end: {
            line: 218,
            column: 82
          }
        }, {
          start: {
            line: 218,
            column: 86
          },
          end: {
            line: 218,
            column: 106
          }
        }],
        line: 218
      },
      "16": {
        loc: {
          start: {
            line: 223,
            column: 19
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 19
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "17": {
        loc: {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 53
          }
        }, {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 88
          }
        }, {
          start: {
            line: 223,
            column: 92
          },
          end: {
            line: 223,
            column: 112
          }
        }],
        line: 223
      },
      "18": {
        loc: {
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 55
          }
        }, {
          start: {
            line: 226,
            column: 59
          },
          end: {
            line: 226,
            column: 60
          }
        }],
        line: 226
      },
      "19": {
        loc: {
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 235,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 235,
            column: 43
          }
        }, {
          start: {
            line: 235,
            column: 47
          },
          end: {
            line: 235,
            column: 56
          }
        }],
        line: 235
      },
      "20": {
        loc: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 236,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 236,
            column: 34
          }
        }, {
          start: {
            line: 236,
            column: 38
          },
          end: {
            line: 236,
            column: 47
          }
        }],
        line: 236
      },
      "21": {
        loc: {
          start: {
            line: 243,
            column: 31
          },
          end: {
            line: 243,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 61
          },
          end: {
            line: 243,
            column: 125
          }
        }, {
          start: {
            line: 243,
            column: 128
          },
          end: {
            line: 243,
            column: 137
          }
        }],
        line: 243
      },
      "22": {
        loc: {
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 252,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 49
          },
          end: {
            line: 252,
            column: 62
          }
        }, {
          start: {
            line: 252,
            column: 65
          },
          end: {
            line: 252,
            column: 92
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/history/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\ninterface ProductHistoryEvent {\n    timestamp: Date;\n    type: string;\n    description: string;\n    quantityChange?: number;\n    shopId?: number;\n    shopName?: string;\n    userId?: number;\n    userName?: string;\n    relatedDocumentId?: string;\n    details?: any;\n}\n\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const productId = parseInt(params.id);\n        if (isNaN(productId)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const eventTypesParam = searchParams.get('eventTypes');\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n\n        const filterEventTypes = eventTypesParam ? eventTypesParam.split(',') : [];\n        const startDate = startDateParam ? new Date(startDateParam) : null;\n        const endDate = endDateParam ? new Date(endDateParam) : null;\n\n        // Construct date filter for Prisma\n        const dateFilter: any = {};\n        if (startDate) dateFilter.gte = startDate;\n        if (endDate) {\n            // Adjust endDate to include the whole day\n            const adjustedEndDate = new Date(endDate);\n            adjustedEndDate.setHours(23, 59, 59, 999);\n            dateFilter.lte = adjustedEndDate;\n        }\n\n        const allEvents: ProductHistoryEvent[] = [];\n\n        // 1. Fetch Purchases\n        const purchases = await prisma.purchaseInvoiceItem.findMany({\n            where: {\n                productId,\n                purchaseInvoice: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                purchaseInvoice: { include: { supplier: true } },\n                product: true // To get product name if needed for description, though we have productId\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        purchases.forEach(item => {\n            allEvents.push({\n                timestamp: item.purchaseInvoice.createdAt, // Or item.createdAt if more specific\n                type: 'Purchase',\n                description: `Purchased ${item.quantity} units from ${item.purchaseInvoice.supplier.name}. Price: Rs. ${item.price.toFixed(2)} each.`,\n                quantityChange: item.quantity,\n                relatedDocumentId: `Purchase Invoice #${item.purchaseInvoice.invoiceNumber}`,\n                // shopId: item.purchaseInvoice.shopId, // If PurchaseInvoice has a shopId\n                // userName: // If PurchaseInvoice has a creator/userId\n                details: {\n                    supplier: item.purchaseInvoice.supplier.name,\n                    invoiceNumber: item.purchaseInvoice.invoiceNumber,\n                    quantity: item.quantity,\n                    price: item.price,\n                    total: item.total,\n                }\n            });\n        });\n\n        // 2. Fetch Sales\n        const sales = await prisma.invoiceItem.findMany({\n            where: {\n                productId,\n                invoice: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                invoice: { include: { customer: true, shop: true } }, // Assuming Invoice has shop\n                product: true\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        sales.forEach(item => {\n            allEvents.push({\n                timestamp: item.invoice.createdAt, // Or item.createdAt\n                type: 'Sale',\n                description: `Sold ${item.quantity} units to ${item.invoice.customer.name}.Price: Rs.${item.price.toFixed(2)} each.`,\n                quantityChange: -item.quantity, // Negative for sale\n                shopId: item.invoice.shopId || undefined,\n                shopName: item.invoice.shop?.name || undefined,\n                relatedDocumentId: `Sales Invoice #${item.invoice.invoiceNumber}`,\n                // userName: item.invoice.userId // If Invoice has a creator/userId\n                details: {\n                    customer: item.invoice.customer.name,\n                    invoiceNumber: item.invoice.invoiceNumber,\n                    quantity: item.quantity,\n                    price: item.price,\n                    total: item.total,\n                    shop: item.invoice.shop?.name,\n                }\n            });\n        });\n\n        // 3. Fetch Transfers\n        const transfers = await prisma.transferItem.findMany({\n            where: {\n                productId,\n                transfer: {\n                    createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n                }\n            },\n            include: {\n                transfer: { include: { fromShop: true, toShop: true, fromUser: true, toUser: true } },\n                product: true\n            },\n            orderBy: { createdAt: 'desc' }\n        });\n\n        transfers.forEach(item => {\n            // Create two events for each transfer: one for 'out' and one for 'in'\n            // Transfer Out\n            allEvents.push({\n                timestamp: item.transfer.createdAt,\n                type: 'Transfer Out',\n                description: `Transferred ${item.quantity} units from ${item.transfer.fromShop.name} to ${item.transfer.toShop.name}.`,\n                quantityChange: -item.quantity,\n                shopId: item.transfer.fromShopId,\n                shopName: item.transfer.fromShop.name,\n                userId: item.transfer.fromUserId, // User initiating transfer\n                userName: item.transfer.fromUser.name,\n                relatedDocumentId: `Transfer ID #${item.transfer.id}`,\n                details: {\n                    fromShop: item.transfer.fromShop.name,\n                    toShop: item.transfer.toShop.name,\n                    quantity: item.quantity,\n                    status: item.transfer.status,\n                    notes: item.transfer.notes\n                }\n            });\n            // Transfer In\n            allEvents.push({\n                timestamp: item.transfer.createdAt, // Could be a slightly later time if transfer has receivedAt\n                type: 'Transfer In',\n                description: `Received ${item.quantity} units at ${item.transfer.toShop.name} from ${item.transfer.fromShop.name}.`,\n                quantityChange: item.quantity,\n                shopId: item.transfer.toShopId,\n                shopName: item.transfer.toShop.name,\n                userId: item.transfer.toUserId, // User receiving/confirming transfer\n                userName: item.transfer.toUser.name,\n                relatedDocumentId: `Transfer ID #${item.transfer.id}`,\n                details: { ...allEvents[allEvents.length - 1].details } // same details as out\n            });\n        });\n\n        // 4. Fetch Audit Logs (Product Updates and Stock Additions)\n        const auditLogs = await prisma.auditLog.findMany({\n            where: {\n                OR: [\n                    { entity: 'Product', entityId: productId, action: 'UPDATE_PRODUCT' },\n                    { entity: 'InventoryItem', details: { path: ['productId'], equals: productId }, action: 'ADD_INVENTORY' },\n                    // Add more specific audit actions if needed, e.g., for manual adjustments\n                ],\n                createdAt: Object.keys(dateFilter).length > 0 ? dateFilter : undefined\n            },\n            // include: { user: true }, // Temporarily removed due to missing explicit relation\n            orderBy: { createdAt: 'desc' }\n        });\n\n        auditLogs.forEach(log => {\n            let eventType = 'Audit';\n            let eventDescription = `Action: ${log.action} on ${log.entity}`;\n            let quantityChangeVal: number | undefined = undefined;\n            let detailsObject = log.details;\n            // let userNameVal: string | undefined = undefined; // Temporarily remove user name\n\n            if (log.action === 'UPDATE_PRODUCT' && typeof log.details === 'object' && log.details !== null) {\n                eventType = 'Product Update';\n                const changes = Object.entries(log.details as Record<string, { old: any, new: any }>)\n                    .map(([key, value]) => `  - ${key}: '${value.old}' -> '${value.new}'`)\n                    .join('\\n');\n                eventDescription = `Product details updated:\\n${changes}`;\n                detailsObject = log.details; // Already an object\n            } else if (log.action === 'ADD_INVENTORY' && typeof log.details === 'object' && log.details !== null) {\n                eventType = 'Stock Added';\n                const detailJson = log.details as any; // Already parsed by Prisma if jsonb\n                quantityChangeVal = detailJson.quantity || 0;\n                eventDescription = `Added ${quantityChangeVal} units directly. Shop ID: ${detailJson.shopId}`;\n                detailsObject = detailJson;\n            }\n\n            allEvents.push({\n                timestamp: log.createdAt,\n                type: eventType,\n                description: eventDescription,\n                quantityChange: quantityChangeVal,\n                shopId: (log.details as any)?.shopId || undefined,\n                userId: log.userId || undefined,\n                // userName: userNameVal, // Temporarily remove user name\n                relatedDocumentId: `Audit ID #${log.id}`,\n                details: detailsObject\n            });\n        });\n\n        // Filter by event types if provided\n        const filteredEvents = filterEventTypes.length > 0\n            ? allEvents.filter(event => filterEventTypes.includes(event.type))\n            : allEvents;\n\n        // Sort all collected events by timestamp in descending order\n        filteredEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n        return NextResponse.json({ success: true, data: filteredEvents });\n\n    } catch (error) {\n        console.error(`Error fetching product history for product ID ${params.id}:`, error);\n        const message = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json({ success: false, message: 'Failed to fetch product history', details: message }, { status: 500 });\n    }\n} "],
      names: ["GET", "request", "params", "productId", "parseInt", "id", "isNaN", "NextResponse", "json", "success", "message", "status", "searchParams", "URL", "url", "eventTypesParam", "get", "startDateParam", "endDateParam", "filterEventTypes", "split", "startDate", "Date", "endDate", "dateFilter", "gte", "adjustedEndDate", "setHours", "lte", "allEvents", "purchases", "prisma", "purchaseInvoiceItem", "findMany", "where", "purchaseInvoice", "createdAt", "Object", "keys", "length", "undefined", "include", "supplier", "product", "orderBy", "forEach", "item", "push", "timestamp", "type", "description", "quantity", "name", "price", "toFixed", "quantityChange", "relatedDocumentId", "invoiceNumber", "details", "total", "sales", "invoiceItem", "invoice", "customer", "shop", "shopId", "shopName", "transfers", "transferItem", "transfer", "fromShop", "toShop", "fromUser", "toUser", "fromShopId", "userId", "fromUserId", "userName", "notes", "toShopId", "toUserId", "auditLogs", "auditLog", "OR", "entity", "entityId", "action", "path", "equals", "log", "eventType", "eventDescription", "quantityChangeVal", "detailsObject", "changes", "entries", "map", "key", "value", "old", "new", "join", "detailJson", "filteredEvents", "filter", "event", "includes", "sort", "a", "b", "getTime", "data", "error", "console", "Error"],
      mappings: ";;;;+BAgBsBA;;;eAAAA;;;wBAhBoB;+DACvB;;;;;;AAeZ,eAAeA,IAClBC,OAAoB,EACpB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACA,MAAMC,YAAYC,SAASF,OAAOG,EAAE;QACpC,IAAIC,MAAMH,YAAY;YAClB,OAAOI,oBAAY,CAACC,IAAI,CAAC;gBAAEC,SAAS;gBAAOC,SAAS;YAAqB,GAAG;gBAAEC,QAAQ;YAAI;QAC9F;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIZ,QAAQa,GAAG;QAC5C,MAAMC,kBAAkBH,aAAaI,GAAG,CAAC;QACzC,MAAMC,iBAAiBL,aAAaI,GAAG,CAAC;QACxC,MAAME,eAAeN,aAAaI,GAAG,CAAC;QAEtC,MAAMG,mBAAmBJ,kBAAkBA,gBAAgBK,KAAK,CAAC,OAAO,EAAE;QAC1E,MAAMC,YAAYJ,iBAAiB,IAAIK,KAAKL,kBAAkB;QAC9D,MAAMM,UAAUL,eAAe,IAAII,KAAKJ,gBAAgB;QAExD,mCAAmC;QACnC,MAAMM,aAAkB,CAAC;QACzB,IAAIH,WAAWG,WAAWC,GAAG,GAAGJ;QAChC,IAAIE,SAAS;YACT,0CAA0C;YAC1C,MAAMG,kBAAkB,IAAIJ,KAAKC;YACjCG,gBAAgBC,QAAQ,CAAC,IAAI,IAAI,IAAI;YACrCH,WAAWI,GAAG,GAAGF;QACrB;QAEA,MAAMG,YAAmC,EAAE;QAE3C,qBAAqB;QACrB,MAAMC,YAAY,MAAMC,eAAM,CAACC,mBAAmB,CAACC,QAAQ,CAAC;YACxDC,OAAO;gBACH/B;gBACAgC,iBAAiB;oBACbC,WAAWC,OAAOC,IAAI,CAACd,YAAYe,MAAM,GAAG,IAAIf,aAAagB;gBACjE;YACJ;YACAC,SAAS;gBACLN,iBAAiB;oBAAEM,SAAS;wBAAEC,UAAU;oBAAK;gBAAE;gBAC/CC,SAAS,KAAK,0EAA0E;YAC5F;YACAC,SAAS;gBAAER,WAAW;YAAO;QACjC;QAEAN,UAAUe,OAAO,CAACC,CAAAA;YACdjB,UAAUkB,IAAI,CAAC;gBACXC,WAAWF,KAAKX,eAAe,CAACC,SAAS;gBACzCa,MAAM;gBACNC,aAAa,CAAC,UAAU,EAAEJ,KAAKK,QAAQ,CAAC,YAAY,EAAEL,KAAKX,eAAe,CAACO,QAAQ,CAACU,IAAI,CAAC,aAAa,EAAEN,KAAKO,KAAK,CAACC,OAAO,CAAC,GAAG,MAAM,CAAC;gBACrIC,gBAAgBT,KAAKK,QAAQ;gBAC7BK,mBAAmB,CAAC,kBAAkB,EAAEV,KAAKX,eAAe,CAACsB,aAAa,CAAC,CAAC;gBAC5E,0EAA0E;gBAC1E,uDAAuD;gBACvDC,SAAS;oBACLhB,UAAUI,KAAKX,eAAe,CAACO,QAAQ,CAACU,IAAI;oBAC5CK,eAAeX,KAAKX,eAAe,CAACsB,aAAa;oBACjDN,UAAUL,KAAKK,QAAQ;oBACvBE,OAAOP,KAAKO,KAAK;oBACjBM,OAAOb,KAAKa,KAAK;gBACrB;YACJ;QACJ;QAEA,iBAAiB;QACjB,MAAMC,QAAQ,MAAM7B,eAAM,CAAC8B,WAAW,CAAC5B,QAAQ,CAAC;YAC5CC,OAAO;gBACH/B;gBACA2D,SAAS;oBACL1B,WAAWC,OAAOC,IAAI,CAACd,YAAYe,MAAM,GAAG,IAAIf,aAAagB;gBACjE;YACJ;YACAC,SAAS;gBACLqB,SAAS;oBAAErB,SAAS;wBAAEsB,UAAU;wBAAMC,MAAM;oBAAK;gBAAE;gBACnDrB,SAAS;YACb;YACAC,SAAS;gBAAER,WAAW;YAAO;QACjC;QAEAwB,MAAMf,OAAO,CAACC,CAAAA;YACVjB,UAAUkB,IAAI,CAAC;gBACXC,WAAWF,KAAKgB,OAAO,CAAC1B,SAAS;gBACjCa,MAAM;gBACNC,aAAa,CAAC,KAAK,EAAEJ,KAAKK,QAAQ,CAAC,UAAU,EAAEL,KAAKgB,OAAO,CAACC,QAAQ,CAACX,IAAI,CAAC,WAAW,EAAEN,KAAKO,KAAK,CAACC,OAAO,CAAC,GAAG,MAAM,CAAC;gBACpHC,gBAAgB,CAACT,KAAKK,QAAQ;gBAC9Bc,QAAQnB,KAAKgB,OAAO,CAACG,MAAM,IAAIzB;gBAC/B0B,UAAUpB,KAAKgB,OAAO,CAACE,IAAI,EAAEZ,QAAQZ;gBACrCgB,mBAAmB,CAAC,eAAe,EAAEV,KAAKgB,OAAO,CAACL,aAAa,CAAC,CAAC;gBACjE,mEAAmE;gBACnEC,SAAS;oBACLK,UAAUjB,KAAKgB,OAAO,CAACC,QAAQ,CAACX,IAAI;oBACpCK,eAAeX,KAAKgB,OAAO,CAACL,aAAa;oBACzCN,UAAUL,KAAKK,QAAQ;oBACvBE,OAAOP,KAAKO,KAAK;oBACjBM,OAAOb,KAAKa,KAAK;oBACjBK,MAAMlB,KAAKgB,OAAO,CAACE,IAAI,EAAEZ;gBAC7B;YACJ;QACJ;QAEA,qBAAqB;QACrB,MAAMe,YAAY,MAAMpC,eAAM,CAACqC,YAAY,CAACnC,QAAQ,CAAC;YACjDC,OAAO;gBACH/B;gBACAkE,UAAU;oBACNjC,WAAWC,OAAOC,IAAI,CAACd,YAAYe,MAAM,GAAG,IAAIf,aAAagB;gBACjE;YACJ;YACAC,SAAS;gBACL4B,UAAU;oBAAE5B,SAAS;wBAAE6B,UAAU;wBAAMC,QAAQ;wBAAMC,UAAU;wBAAMC,QAAQ;oBAAK;gBAAE;gBACpF9B,SAAS;YACb;YACAC,SAAS;gBAAER,WAAW;YAAO;QACjC;QAEA+B,UAAUtB,OAAO,CAACC,CAAAA;YACd,sEAAsE;YACtE,eAAe;YACfjB,UAAUkB,IAAI,CAAC;gBACXC,WAAWF,KAAKuB,QAAQ,CAACjC,SAAS;gBAClCa,MAAM;gBACNC,aAAa,CAAC,YAAY,EAAEJ,KAAKK,QAAQ,CAAC,YAAY,EAAEL,KAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI,CAAC,IAAI,EAAEN,KAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI,CAAC,CAAC,CAAC;gBACtHG,gBAAgB,CAACT,KAAKK,QAAQ;gBAC9Bc,QAAQnB,KAAKuB,QAAQ,CAACK,UAAU;gBAChCR,UAAUpB,KAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI;gBACrCuB,QAAQ7B,KAAKuB,QAAQ,CAACO,UAAU;gBAChCC,UAAU/B,KAAKuB,QAAQ,CAACG,QAAQ,CAACpB,IAAI;gBACrCI,mBAAmB,CAAC,aAAa,EAAEV,KAAKuB,QAAQ,CAAChE,EAAE,CAAC,CAAC;gBACrDqD,SAAS;oBACLY,UAAUxB,KAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI;oBACrCmB,QAAQzB,KAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI;oBACjCD,UAAUL,KAAKK,QAAQ;oBACvBxC,QAAQmC,KAAKuB,QAAQ,CAAC1D,MAAM;oBAC5BmE,OAAOhC,KAAKuB,QAAQ,CAACS,KAAK;gBAC9B;YACJ;YACA,cAAc;YACdjD,UAAUkB,IAAI,CAAC;gBACXC,WAAWF,KAAKuB,QAAQ,CAACjC,SAAS;gBAClCa,MAAM;gBACNC,aAAa,CAAC,SAAS,EAAEJ,KAAKK,QAAQ,CAAC,UAAU,EAAEL,KAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI,CAAC,MAAM,EAAEN,KAAKuB,QAAQ,CAACC,QAAQ,CAAClB,IAAI,CAAC,CAAC,CAAC;gBACnHG,gBAAgBT,KAAKK,QAAQ;gBAC7Bc,QAAQnB,KAAKuB,QAAQ,CAACU,QAAQ;gBAC9Bb,UAAUpB,KAAKuB,QAAQ,CAACE,MAAM,CAACnB,IAAI;gBACnCuB,QAAQ7B,KAAKuB,QAAQ,CAACW,QAAQ;gBAC9BH,UAAU/B,KAAKuB,QAAQ,CAACI,MAAM,CAACrB,IAAI;gBACnCI,mBAAmB,CAAC,aAAa,EAAEV,KAAKuB,QAAQ,CAAChE,EAAE,CAAC,CAAC;gBACrDqD,SAAS;oBAAE,GAAG7B,SAAS,CAACA,UAAUU,MAAM,GAAG,EAAE,CAACmB,OAAO;gBAAC,EAAE,sBAAsB;YAClF;QACJ;QAEA,4DAA4D;QAC5D,MAAMuB,YAAY,MAAMlD,eAAM,CAACmD,QAAQ,CAACjD,QAAQ,CAAC;YAC7CC,OAAO;gBACHiD,IAAI;oBACA;wBAAEC,QAAQ;wBAAWC,UAAUlF;wBAAWmF,QAAQ;oBAAiB;oBACnE;wBAAEF,QAAQ;wBAAiB1B,SAAS;4BAAE6B,MAAM;gCAAC;6BAAY;4BAAEC,QAAQrF;wBAAU;wBAAGmF,QAAQ;oBAAgB;iBAE3G;gBACDlD,WAAWC,OAAOC,IAAI,CAACd,YAAYe,MAAM,GAAG,IAAIf,aAAagB;YACjE;YACA,mFAAmF;YACnFI,SAAS;gBAAER,WAAW;YAAO;QACjC;QAEA6C,UAAUpC,OAAO,CAAC4C,CAAAA;YACd,IAAIC,YAAY;YAChB,IAAIC,mBAAmB,CAAC,QAAQ,EAAEF,IAAIH,MAAM,CAAC,IAAI,EAAEG,IAAIL,MAAM,CAAC,CAAC;YAC/D,IAAIQ,oBAAwCpD;YAC5C,IAAIqD,gBAAgBJ,IAAI/B,OAAO;YAC/B,mFAAmF;YAEnF,IAAI+B,IAAIH,MAAM,KAAK,oBAAoB,OAAOG,IAAI/B,OAAO,KAAK,YAAY+B,IAAI/B,OAAO,KAAK,MAAM;gBAC5FgC,YAAY;gBACZ,MAAMI,UAAUzD,OAAO0D,OAAO,CAACN,IAAI/B,OAAO,EACrCsC,GAAG,CAAC,CAAC,CAACC,KAAKC,MAAM,GAAK,CAAC,IAAI,EAAED,IAAI,GAAG,EAAEC,MAAMC,GAAG,CAAC,MAAM,EAAED,MAAME,GAAG,CAAC,CAAC,CAAC,EACpEC,IAAI,CAAC;gBACVV,mBAAmB,CAAC,0BAA0B,EAAEG,QAAQ,CAAC;gBACzDD,gBAAgBJ,IAAI/B,OAAO,EAAE,oBAAoB;YACrD,OAAO,IAAI+B,IAAIH,MAAM,KAAK,mBAAmB,OAAOG,IAAI/B,OAAO,KAAK,YAAY+B,IAAI/B,OAAO,KAAK,MAAM;gBAClGgC,YAAY;gBACZ,MAAMY,aAAab,IAAI/B,OAAO,EAAS,oCAAoC;gBAC3EkC,oBAAoBU,WAAWnD,QAAQ,IAAI;gBAC3CwC,mBAAmB,CAAC,MAAM,EAAEC,kBAAkB,0BAA0B,EAAEU,WAAWrC,MAAM,CAAC,CAAC;gBAC7F4B,gBAAgBS;YACpB;YAEAzE,UAAUkB,IAAI,CAAC;gBACXC,WAAWyC,IAAIrD,SAAS;gBACxBa,MAAMyC;gBACNxC,aAAayC;gBACbpC,gBAAgBqC;gBAChB3B,QAAQ,AAACwB,IAAI/B,OAAO,EAAUO,UAAUzB;gBACxCmC,QAAQc,IAAId,MAAM,IAAInC;gBACtB,yDAAyD;gBACzDgB,mBAAmB,CAAC,UAAU,EAAEiC,IAAIpF,EAAE,CAAC,CAAC;gBACxCqD,SAASmC;YACb;QACJ;QAEA,oCAAoC;QACpC,MAAMU,iBAAiBpF,iBAAiBoB,MAAM,GAAG,IAC3CV,UAAU2E,MAAM,CAACC,CAAAA,QAAStF,iBAAiBuF,QAAQ,CAACD,MAAMxD,IAAI,KAC9DpB;QAEN,6DAA6D;QAC7D0E,eAAeI,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAE7D,SAAS,CAAC8D,OAAO,KAAKF,EAAE5D,SAAS,CAAC8D,OAAO;QAEzE,OAAOvG,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAMsG,MAAMR;QAAe;IAEnE,EAAE,OAAOS,OAAO;QACZC,QAAQD,KAAK,CAAC,CAAC,8CAA8C,EAAE9G,OAAOG,EAAE,CAAC,CAAC,CAAC,EAAE2G;QAC7E,MAAMtG,UAAUsG,iBAAiBE,QAAQF,MAAMtG,OAAO,GAAG;QACzD,OAAOH,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAOC,SAAS;YAAmCgD,SAAShD;QAAQ,GAAG;YAAEC,QAAQ;QAAI;IAC7H;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a65412145e69e781e8a37176eac932fc8249e17c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ovr9nr576 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ovr9nr576();
cov_ovr9nr576().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ovr9nr576().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_ovr9nr576().f[0]++;
    cov_ovr9nr576().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_ovr9nr576().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_ovr9nr576().s[4]++, _interop_require_default(require("../../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_ovr9nr576().f[1]++;
  cov_ovr9nr576().s[5]++;
  return /* istanbul ignore next */(cov_ovr9nr576().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_ovr9nr576().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_ovr9nr576().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_ovr9nr576().b[0][1]++, {
    default: obj
  });
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_ovr9nr576().f[2]++;
  cov_ovr9nr576().s[6]++;
  try {
    const productId =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[7]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_ovr9nr576().s[8]++;
    if (isNaN(productId)) {
      /* istanbul ignore next */
      cov_ovr9nr576().b[2][0]++;
      cov_ovr9nr576().s[9]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_ovr9nr576().b[2][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[10]++, new URL(request.url));
    const eventTypesParam =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[11]++, searchParams.get("eventTypes"));
    const startDateParam =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[12]++, searchParams.get("startDate"));
    const endDateParam =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[13]++, searchParams.get("endDate"));
    const filterEventTypes =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[14]++, eventTypesParam ?
    /* istanbul ignore next */
    (cov_ovr9nr576().b[3][0]++, eventTypesParam.split(",")) :
    /* istanbul ignore next */
    (cov_ovr9nr576().b[3][1]++, []));
    const startDate =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[15]++, startDateParam ?
    /* istanbul ignore next */
    (cov_ovr9nr576().b[4][0]++, new Date(startDateParam)) :
    /* istanbul ignore next */
    (cov_ovr9nr576().b[4][1]++, null));
    const endDate =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[16]++, endDateParam ?
    /* istanbul ignore next */
    (cov_ovr9nr576().b[5][0]++, new Date(endDateParam)) :
    /* istanbul ignore next */
    (cov_ovr9nr576().b[5][1]++, null));
    // Construct date filter for Prisma
    const dateFilter =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[17]++, {});
    /* istanbul ignore next */
    cov_ovr9nr576().s[18]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_ovr9nr576().b[6][0]++;
      cov_ovr9nr576().s[19]++;
      dateFilter.gte = startDate;
    } else
    /* istanbul ignore next */
    {
      cov_ovr9nr576().b[6][1]++;
    }
    cov_ovr9nr576().s[20]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_ovr9nr576().b[7][0]++;
      // Adjust endDate to include the whole day
      const adjustedEndDate =
      /* istanbul ignore next */
      (cov_ovr9nr576().s[21]++, new Date(endDate));
      /* istanbul ignore next */
      cov_ovr9nr576().s[22]++;
      adjustedEndDate.setHours(23, 59, 59, 999);
      /* istanbul ignore next */
      cov_ovr9nr576().s[23]++;
      dateFilter.lte = adjustedEndDate;
    } else
    /* istanbul ignore next */
    {
      cov_ovr9nr576().b[7][1]++;
    }
    const allEvents =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[24]++, []);
    // 1. Fetch Purchases
    const purchases =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[25]++, await _prisma.default.purchaseInvoiceItem.findMany({
      where: {
        productId,
        purchaseInvoice: {
          createdAt: Object.keys(dateFilter).length > 0 ?
          /* istanbul ignore next */
          (cov_ovr9nr576().b[8][0]++, dateFilter) :
          /* istanbul ignore next */
          (cov_ovr9nr576().b[8][1]++, undefined)
        }
      },
      include: {
        purchaseInvoice: {
          include: {
            supplier: true
          }
        },
        product: true // To get product name if needed for description, though we have productId
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_ovr9nr576().s[26]++;
    purchases.forEach(item => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[3]++;
      cov_ovr9nr576().s[27]++;
      allEvents.push({
        timestamp: item.purchaseInvoice.createdAt,
        type: "Purchase",
        description: `Purchased ${item.quantity} units from ${item.purchaseInvoice.supplier.name}. Price: Rs. ${item.price.toFixed(2)} each.`,
        quantityChange: item.quantity,
        relatedDocumentId: `Purchase Invoice #${item.purchaseInvoice.invoiceNumber}`,
        // shopId: item.purchaseInvoice.shopId, // If PurchaseInvoice has a shopId
        // userName: // If PurchaseInvoice has a creator/userId
        details: {
          supplier: item.purchaseInvoice.supplier.name,
          invoiceNumber: item.purchaseInvoice.invoiceNumber,
          quantity: item.quantity,
          price: item.price,
          total: item.total
        }
      });
    });
    // 2. Fetch Sales
    const sales =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[28]++, await _prisma.default.invoiceItem.findMany({
      where: {
        productId,
        invoice: {
          createdAt: Object.keys(dateFilter).length > 0 ?
          /* istanbul ignore next */
          (cov_ovr9nr576().b[9][0]++, dateFilter) :
          /* istanbul ignore next */
          (cov_ovr9nr576().b[9][1]++, undefined)
        }
      },
      include: {
        invoice: {
          include: {
            customer: true,
            shop: true
          }
        },
        product: true
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_ovr9nr576().s[29]++;
    sales.forEach(item => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[4]++;
      cov_ovr9nr576().s[30]++;
      allEvents.push({
        timestamp: item.invoice.createdAt,
        type: "Sale",
        description: `Sold ${item.quantity} units to ${item.invoice.customer.name}.Price: Rs.${item.price.toFixed(2)} each.`,
        quantityChange: -item.quantity,
        shopId:
        /* istanbul ignore next */
        (cov_ovr9nr576().b[10][0]++, item.invoice.shopId) ||
        /* istanbul ignore next */
        (cov_ovr9nr576().b[10][1]++, undefined),
        shopName:
        /* istanbul ignore next */
        (cov_ovr9nr576().b[11][0]++, item.invoice.shop?.name) ||
        /* istanbul ignore next */
        (cov_ovr9nr576().b[11][1]++, undefined),
        relatedDocumentId: `Sales Invoice #${item.invoice.invoiceNumber}`,
        // userName: item.invoice.userId // If Invoice has a creator/userId
        details: {
          customer: item.invoice.customer.name,
          invoiceNumber: item.invoice.invoiceNumber,
          quantity: item.quantity,
          price: item.price,
          total: item.total,
          shop: item.invoice.shop?.name
        }
      });
    });
    // 3. Fetch Transfers
    const transfers =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[31]++, await _prisma.default.transferItem.findMany({
      where: {
        productId,
        transfer: {
          createdAt: Object.keys(dateFilter).length > 0 ?
          /* istanbul ignore next */
          (cov_ovr9nr576().b[12][0]++, dateFilter) :
          /* istanbul ignore next */
          (cov_ovr9nr576().b[12][1]++, undefined)
        }
      },
      include: {
        transfer: {
          include: {
            fromShop: true,
            toShop: true,
            fromUser: true,
            toUser: true
          }
        },
        product: true
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_ovr9nr576().s[32]++;
    transfers.forEach(item => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[5]++;
      cov_ovr9nr576().s[33]++;
      // Create two events for each transfer: one for 'out' and one for 'in'
      // Transfer Out
      allEvents.push({
        timestamp: item.transfer.createdAt,
        type: "Transfer Out",
        description: `Transferred ${item.quantity} units from ${item.transfer.fromShop.name} to ${item.transfer.toShop.name}.`,
        quantityChange: -item.quantity,
        shopId: item.transfer.fromShopId,
        shopName: item.transfer.fromShop.name,
        userId: item.transfer.fromUserId,
        userName: item.transfer.fromUser.name,
        relatedDocumentId: `Transfer ID #${item.transfer.id}`,
        details: {
          fromShop: item.transfer.fromShop.name,
          toShop: item.transfer.toShop.name,
          quantity: item.quantity,
          status: item.transfer.status,
          notes: item.transfer.notes
        }
      });
      // Transfer In
      /* istanbul ignore next */
      cov_ovr9nr576().s[34]++;
      allEvents.push({
        timestamp: item.transfer.createdAt,
        type: "Transfer In",
        description: `Received ${item.quantity} units at ${item.transfer.toShop.name} from ${item.transfer.fromShop.name}.`,
        quantityChange: item.quantity,
        shopId: item.transfer.toShopId,
        shopName: item.transfer.toShop.name,
        userId: item.transfer.toUserId,
        userName: item.transfer.toUser.name,
        relatedDocumentId: `Transfer ID #${item.transfer.id}`,
        details: {
          ...allEvents[allEvents.length - 1].details
        } // same details as out
      });
    });
    // 4. Fetch Audit Logs (Product Updates and Stock Additions)
    const auditLogs =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[35]++, await _prisma.default.auditLog.findMany({
      where: {
        OR: [{
          entity: "Product",
          entityId: productId,
          action: "UPDATE_PRODUCT"
        }, {
          entity: "InventoryItem",
          details: {
            path: ["productId"],
            equals: productId
          },
          action: "ADD_INVENTORY"
        }],
        createdAt: Object.keys(dateFilter).length > 0 ?
        /* istanbul ignore next */
        (cov_ovr9nr576().b[13][0]++, dateFilter) :
        /* istanbul ignore next */
        (cov_ovr9nr576().b[13][1]++, undefined)
      },
      // include: { user: true }, // Temporarily removed due to missing explicit relation
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_ovr9nr576().s[36]++;
    auditLogs.forEach(log => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[6]++;
      let eventType =
      /* istanbul ignore next */
      (cov_ovr9nr576().s[37]++, "Audit");
      let eventDescription =
      /* istanbul ignore next */
      (cov_ovr9nr576().s[38]++, `Action: ${log.action} on ${log.entity}`);
      let quantityChangeVal =
      /* istanbul ignore next */
      (cov_ovr9nr576().s[39]++, undefined);
      let detailsObject =
      /* istanbul ignore next */
      (cov_ovr9nr576().s[40]++, log.details);
      // let userNameVal: string | undefined = undefined; // Temporarily remove user name
      /* istanbul ignore next */
      cov_ovr9nr576().s[41]++;
      if (
      /* istanbul ignore next */
      (cov_ovr9nr576().b[15][0]++, log.action === "UPDATE_PRODUCT") &&
      /* istanbul ignore next */
      (cov_ovr9nr576().b[15][1]++, typeof log.details === "object") &&
      /* istanbul ignore next */
      (cov_ovr9nr576().b[15][2]++, log.details !== null)) {
        /* istanbul ignore next */
        cov_ovr9nr576().b[14][0]++;
        cov_ovr9nr576().s[42]++;
        eventType = "Product Update";
        const changes =
        /* istanbul ignore next */
        (cov_ovr9nr576().s[43]++, Object.entries(log.details).map(([key, value]) => {
          /* istanbul ignore next */
          cov_ovr9nr576().f[7]++;
          cov_ovr9nr576().s[44]++;
          return `  - ${key}: '${value.old}' -> '${value.new}'`;
        }).join("\n"));
        /* istanbul ignore next */
        cov_ovr9nr576().s[45]++;
        eventDescription = `Product details updated:\n${changes}`;
        /* istanbul ignore next */
        cov_ovr9nr576().s[46]++;
        detailsObject = log.details; // Already an object
      } else {
        /* istanbul ignore next */
        cov_ovr9nr576().b[14][1]++;
        cov_ovr9nr576().s[47]++;
        if (
        /* istanbul ignore next */
        (cov_ovr9nr576().b[17][0]++, log.action === "ADD_INVENTORY") &&
        /* istanbul ignore next */
        (cov_ovr9nr576().b[17][1]++, typeof log.details === "object") &&
        /* istanbul ignore next */
        (cov_ovr9nr576().b[17][2]++, log.details !== null)) {
          /* istanbul ignore next */
          cov_ovr9nr576().b[16][0]++;
          cov_ovr9nr576().s[48]++;
          eventType = "Stock Added";
          const detailJson =
          /* istanbul ignore next */
          (cov_ovr9nr576().s[49]++, log.details); // Already parsed by Prisma if jsonb
          /* istanbul ignore next */
          cov_ovr9nr576().s[50]++;
          quantityChangeVal =
          /* istanbul ignore next */
          (cov_ovr9nr576().b[18][0]++, detailJson.quantity) ||
          /* istanbul ignore next */
          (cov_ovr9nr576().b[18][1]++, 0);
          /* istanbul ignore next */
          cov_ovr9nr576().s[51]++;
          eventDescription = `Added ${quantityChangeVal} units directly. Shop ID: ${detailJson.shopId}`;
          /* istanbul ignore next */
          cov_ovr9nr576().s[52]++;
          detailsObject = detailJson;
        } else
        /* istanbul ignore next */
        {
          cov_ovr9nr576().b[16][1]++;
        }
      }
      /* istanbul ignore next */
      cov_ovr9nr576().s[53]++;
      allEvents.push({
        timestamp: log.createdAt,
        type: eventType,
        description: eventDescription,
        quantityChange: quantityChangeVal,
        shopId:
        /* istanbul ignore next */
        (cov_ovr9nr576().b[19][0]++, log.details?.shopId) ||
        /* istanbul ignore next */
        (cov_ovr9nr576().b[19][1]++, undefined),
        userId:
        /* istanbul ignore next */
        (cov_ovr9nr576().b[20][0]++, log.userId) ||
        /* istanbul ignore next */
        (cov_ovr9nr576().b[20][1]++, undefined),
        // userName: userNameVal, // Temporarily remove user name
        relatedDocumentId: `Audit ID #${log.id}`,
        details: detailsObject
      });
    });
    // Filter by event types if provided
    const filteredEvents =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[54]++, filterEventTypes.length > 0 ?
    /* istanbul ignore next */
    (cov_ovr9nr576().b[21][0]++, allEvents.filter(event => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[8]++;
      cov_ovr9nr576().s[55]++;
      return filterEventTypes.includes(event.type);
    })) :
    /* istanbul ignore next */
    (cov_ovr9nr576().b[21][1]++, allEvents));
    // Sort all collected events by timestamp in descending order
    /* istanbul ignore next */
    cov_ovr9nr576().s[56]++;
    filteredEvents.sort((a, b) => {
      /* istanbul ignore next */
      cov_ovr9nr576().f[9]++;
      cov_ovr9nr576().s[57]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
    /* istanbul ignore next */
    cov_ovr9nr576().s[58]++;
    return _server.NextResponse.json({
      success: true,
      data: filteredEvents
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ovr9nr576().s[59]++;
    console.error(`Error fetching product history for product ID ${params.id}:`, error);
    const message =
    /* istanbul ignore next */
    (cov_ovr9nr576().s[60]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_ovr9nr576().b[22][0]++, error.message) :
    /* istanbul ignore next */
    (cov_ovr9nr576().b[22][1]++, "An unknown error occurred"));
    /* istanbul ignore next */
    cov_ovr9nr576().s[61]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch product history",
      details: message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,