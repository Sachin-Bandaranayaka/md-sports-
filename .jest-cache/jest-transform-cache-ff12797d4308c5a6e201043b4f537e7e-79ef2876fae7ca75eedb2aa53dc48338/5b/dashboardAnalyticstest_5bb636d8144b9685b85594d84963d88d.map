{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/dashboardAnalytics.test.ts"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock the useAuth hook\nconst mockUseAuth = jest.fn();\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth(),\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('Dashboard and Analytics System', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(() => 'mock-token'),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock user with dashboard permissions\n    mockUseAuth.mockReturnValue({\n      user: {\n        id: '1',\n        name: 'Dashboard User',\n        email: 'dashboard@test.com',\n        permissions: ['dashboard:view', 'analytics:view', 'reports:view', 'sales:view', 'inventory:view']\n      },\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      hasPermission: jest.fn((permission) => {\n        const userPermissions = ['dashboard:view', 'analytics:view', 'reports:view', 'sales:view', 'inventory:view'];\n        return userPermissions.includes(permission);\n      })\n    });\n  });\n\n  describe('Sales Analytics', () => {\n    test('should calculate sales metrics correctly', () => {\n      const calculateSalesMetrics = (salesData: any[]) => {\n        const totalRevenue = salesData.reduce((sum, sale) => sum + sale.amount, 0);\n        const totalTransactions = salesData.length;\n        const averageOrderValue = totalTransactions > 0 ? totalRevenue / totalTransactions : 0;\n        \n        const today = new Date();\n        const todaySales = salesData.filter(sale => {\n          const saleDate = new Date(sale.date);\n          return saleDate.toDateString() === today.toDateString();\n        });\n        \n        const thisMonth = salesData.filter(sale => {\n          const saleDate = new Date(sale.date);\n          return saleDate.getMonth() === today.getMonth() && saleDate.getFullYear() === today.getFullYear();\n        });\n        \n        return {\n          totalRevenue,\n          totalTransactions,\n          averageOrderValue: Math.round(averageOrderValue * 100) / 100,\n          todayRevenue: todaySales.reduce((sum, sale) => sum + sale.amount, 0),\n          monthlyRevenue: thisMonth.reduce((sum, sale) => sum + sale.amount, 0),\n          todayTransactions: todaySales.length,\n          monthlyTransactions: thisMonth.length\n        };\n      };\n\n      const salesData = [\n        { id: 1, amount: 1000, date: new Date().toISOString() }, // Today\n        { id: 2, amount: 1500, date: new Date().toISOString() }, // Today\n        { id: 3, amount: 800, date: new Date(Date.now() - 86400000).toISOString() }, // Yesterday\n        { id: 4, amount: 1200, date: new Date(Date.now() - 172800000).toISOString() } // 2 days ago\n      ];\n\n      const metrics = calculateSalesMetrics(salesData);\n      \n      expect(metrics.totalRevenue).toBe(4500);\n      expect(metrics.totalTransactions).toBe(4);\n      expect(metrics.averageOrderValue).toBe(1125);\n      expect(metrics.todayRevenue).toBe(2500);\n      expect(metrics.todayTransactions).toBe(2);\n    });\n\n    test('should calculate growth rates', () => {\n      const calculateGrowthRate = (current: number, previous: number) => {\n        if (previous === 0) return current > 0 ? 100 : 0;\n        return Math.round(((current - previous) / previous) * 100 * 100) / 100;\n      };\n\n      const comparePerformance = (currentPeriod: any[], previousPeriod: any[]) => {\n        const currentRevenue = currentPeriod.reduce((sum, sale) => sum + sale.amount, 0);\n        const previousRevenue = previousPeriod.reduce((sum, sale) => sum + sale.amount, 0);\n        \n        const revenueGrowth = calculateGrowthRate(currentRevenue, previousRevenue);\n        const transactionGrowth = calculateGrowthRate(currentPeriod.length, previousPeriod.length);\n        \n        return {\n          currentRevenue,\n          previousRevenue,\n          revenueGrowth,\n          transactionGrowth,\n          trend: revenueGrowth > 0 ? 'up' : revenueGrowth < 0 ? 'down' : 'stable'\n        };\n      };\n\n      const currentMonth = [\n        { amount: 1000 },\n        { amount: 1500 },\n        { amount: 800 }\n      ];\n      \n      const previousMonth = [\n        { amount: 900 },\n        { amount: 1100 }\n      ];\n\n      const performance = comparePerformance(currentMonth, previousMonth);\n      \n      expect(performance.currentRevenue).toBe(3300);\n      expect(performance.previousRevenue).toBe(2000);\n      expect(performance.revenueGrowth).toBe(65);\n      expect(performance.transactionGrowth).toBe(50);\n      expect(performance.trend).toBe('up');\n    });\n\n    test('should generate sales by category data', () => {\n      const generateCategoryAnalysis = (salesData: any[]) => {\n        const categoryTotals = salesData.reduce((acc, sale) => {\n          const category = sale.category || 'Uncategorized';\n          acc[category] = (acc[category] || 0) + sale.amount;\n          return acc;\n        }, {} as Record<string, number>);\n        \n        const totalRevenue = Object.values(categoryTotals).reduce((sum, amount) => sum + amount, 0);\n        \n        return Object.entries(categoryTotals)\n          .map(([category, amount]) => ({\n            category,\n            amount,\n            percentage: Math.round((amount / totalRevenue) * 100 * 100) / 100\n          }))\n          .sort((a, b) => b.amount - a.amount);\n      };\n\n      const salesData = [\n        { category: 'Electronics', amount: 2000 },\n        { category: 'Clothing', amount: 1500 },\n        { category: 'Electronics', amount: 1000 },\n        { category: 'Books', amount: 500 },\n        { category: 'Clothing', amount: 800 }\n      ];\n\n      const analysis = generateCategoryAnalysis(salesData);\n      \n      expect(analysis[0]).toEqual({\n        category: 'Electronics',\n        amount: 3000,\n        percentage: 51.72\n      });\n      expect(analysis[1]).toEqual({\n        category: 'Clothing',\n        amount: 2300,\n        percentage: 39.66\n      });\n    });\n  });\n\n  describe('Inventory Analytics', () => {\n    test('should calculate inventory turnover', () => {\n      const calculateInventoryTurnover = (costOfGoodsSold: number, averageInventoryValue: number) => {\n        if (averageInventoryValue === 0) return 0;\n        return Math.round((costOfGoodsSold / averageInventoryValue) * 100) / 100;\n      };\n\n      const calculateDaysInInventory = (inventoryTurnover: number) => {\n        if (inventoryTurnover === 0) return 0;\n        return Math.round((365 / inventoryTurnover) * 100) / 100;\n      };\n\n      const turnover = calculateInventoryTurnover(120000, 20000);\n      const daysInInventory = calculateDaysInInventory(turnover);\n      \n      expect(turnover).toBe(6);\n      expect(daysInInventory).toBe(60.83);\n    });\n\n    test('should identify slow-moving inventory', () => {\n      const identifySlowMovingItems = (inventoryItems: any[], salesData: any[], daysThreshold: number = 90) => {\n        const itemSales = salesData.reduce((acc, sale) => {\n          sale.items.forEach((item: any) => {\n            acc[item.productId] = (acc[item.productId] || 0) + item.quantity;\n          });\n          return acc;\n        }, {} as Record<string, number>);\n        \n        const cutoffDate = new Date(Date.now() - daysThreshold * 24 * 60 * 60 * 1000);\n        \n        return inventoryItems.filter(item => {\n          const lastSaleQuantity = itemSales[item.id] || 0;\n          const lastUpdated = new Date(item.lastUpdated);\n          \n          return lastSaleQuantity === 0 || lastUpdated < cutoffDate;\n        }).map(item => ({\n          ...item,\n          daysSinceLastSale: Math.floor((Date.now() - new Date(item.lastUpdated).getTime()) / (24 * 60 * 60 * 1000)),\n          totalSales: itemSales[item.id] || 0\n        }));\n      };\n\n      const inventoryItems = [\n        { id: 'item1', name: 'Product A', lastUpdated: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString() },\n        { id: 'item2', name: 'Product B', lastUpdated: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() },\n        { id: 'item3', name: 'Product C', lastUpdated: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString() }\n      ];\n      \n      const salesData = [\n        { items: [{ productId: 'item2', quantity: 5 }] }\n      ];\n\n      const slowMoving = identifySlowMovingItems(inventoryItems, salesData, 90);\n      \n      expect(slowMoving).toHaveLength(2); // item1 and item3\n      expect(slowMoving.find(item => item.id === 'item1')?.daysSinceLastSale).toBe(100);\n    });\n\n    test('should calculate stock level alerts', () => {\n      const generateStockAlerts = (inventoryItems: any[]) => {\n        return inventoryItems.map(item => {\n          const stockLevel = item.currentStock;\n          const reorderPoint = item.reorderPoint || 0;\n          const maxStock = item.maxStock || 0;\n          \n          let alertType = 'normal';\n          let alertMessage = '';\n          \n          if (stockLevel <= 0) {\n            alertType = 'critical';\n            alertMessage = 'Out of stock';\n          } else if (stockLevel <= reorderPoint) {\n            alertType = 'warning';\n            alertMessage = 'Low stock - reorder needed';\n          } else if (stockLevel >= maxStock && maxStock > 0) {\n            alertType = 'info';\n            alertMessage = 'Overstock';\n          }\n          \n          return {\n            ...item,\n            alertType,\n            alertMessage,\n            stockPercentage: maxStock > 0 ? Math.round((stockLevel / maxStock) * 100) : 0\n          };\n        }).filter(item => item.alertType !== 'normal');\n      };\n\n      const inventoryItems = [\n        { id: 'item1', name: 'Product A', currentStock: 0, reorderPoint: 10, maxStock: 100 },\n        { id: 'item2', name: 'Product B', currentStock: 5, reorderPoint: 10, maxStock: 100 },\n        { id: 'item3', name: 'Product C', currentStock: 50, reorderPoint: 10, maxStock: 100 },\n        { id: 'item4', name: 'Product D', currentStock: 120, reorderPoint: 10, maxStock: 100 }\n      ];\n\n      const alerts = generateStockAlerts(inventoryItems);\n      \n      expect(alerts).toHaveLength(3);\n      expect(alerts.find(alert => alert.id === 'item1')?.alertType).toBe('critical');\n      expect(alerts.find(alert => alert.id === 'item2')?.alertType).toBe('warning');\n      expect(alerts.find(alert => alert.id === 'item4')?.alertType).toBe('info');\n    });\n  });\n\n  describe('Financial Analytics', () => {\n    test('should calculate profit margins', () => {\n      const calculateProfitMargins = (salesData: any[]) => {\n        return salesData.map(sale => {\n          const revenue = sale.amount;\n          const cost = sale.cost || 0;\n          const profit = revenue - cost;\n          const marginPercentage = revenue > 0 ? Math.round((profit / revenue) * 100 * 100) / 100 : 0;\n          \n          return {\n            ...sale,\n            profit,\n            marginPercentage,\n            profitCategory: marginPercentage >= 30 ? 'high' : marginPercentage >= 15 ? 'medium' : 'low'\n          };\n        });\n      };\n\n      const salesData = [\n        { id: 1, amount: 1000, cost: 600 },\n        { id: 2, amount: 1500, cost: 1200 },\n        { id: 3, amount: 800, cost: 400 }\n      ];\n\n      const margins = calculateProfitMargins(salesData);\n      \n      expect(margins[0].profit).toBe(400);\n      expect(margins[0].marginPercentage).toBe(40);\n      expect(margins[0].profitCategory).toBe('high');\n      \n      expect(margins[1].marginPercentage).toBe(20);\n      expect(margins[1].profitCategory).toBe('medium');\n      \n      expect(margins[2].marginPercentage).toBe(50);\n      expect(margins[2].profitCategory).toBe('high');\n    });\n\n    test('should calculate cash flow projections', () => {\n      const calculateCashFlow = (transactions: any[], projectionDays: number = 30) => {\n        const today = new Date();\n        const projectionDate = new Date(today.getTime() + projectionDays * 24 * 60 * 60 * 1000);\n        \n        const inflows = transactions\n          .filter(t => t.type === 'income' && new Date(t.dueDate) <= projectionDate)\n          .reduce((sum, t) => sum + t.amount, 0);\n          \n        const outflows = transactions\n          .filter(t => t.type === 'expense' && new Date(t.dueDate) <= projectionDate)\n          .reduce((sum, t) => sum + t.amount, 0);\n          \n        const netCashFlow = inflows - outflows;\n        \n        return {\n          projectionPeriod: projectionDays,\n          expectedInflows: inflows,\n          expectedOutflows: outflows,\n          netCashFlow,\n          cashFlowStatus: netCashFlow > 0 ? 'positive' : netCashFlow < 0 ? 'negative' : 'neutral'\n        };\n      };\n\n      const transactions = [\n        { type: 'income', amount: 5000, dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString() },\n        { type: 'income', amount: 3000, dueDate: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000).toISOString() },\n        { type: 'expense', amount: 2000, dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString() },\n        { type: 'expense', amount: 1500, dueDate: new Date(Date.now() + 40 * 24 * 60 * 60 * 1000).toISOString() } // Outside 30-day window\n      ];\n\n      const cashFlow = calculateCashFlow(transactions, 30);\n      \n      expect(cashFlow.expectedInflows).toBe(8000);\n      expect(cashFlow.expectedOutflows).toBe(2000);\n      expect(cashFlow.netCashFlow).toBe(6000);\n      expect(cashFlow.cashFlowStatus).toBe('positive');\n    });\n  });\n\n  describe('Customer Analytics', () => {\n    test('should calculate customer lifetime value', () => {\n      const calculateCustomerLTV = (customer: any, averageOrderValue: number, purchaseFrequency: number, customerLifespan: number) => {\n        return Math.round(averageOrderValue * purchaseFrequency * customerLifespan * 100) / 100;\n      };\n\n      const segmentCustomers = (customers: any[]) => {\n        return customers.map(customer => {\n          const totalSpent = customer.orders.reduce((sum: number, order: any) => sum + order.amount, 0);\n          const orderCount = customer.orders.length;\n          const avgOrderValue = orderCount > 0 ? totalSpent / orderCount : 0;\n          \n          // Calculate days since first order\n          const firstOrderDate = new Date(Math.min(...customer.orders.map((o: any) => new Date(o.date).getTime())));\n          const daysSinceFirst = Math.floor((Date.now() - firstOrderDate.getTime()) / (24 * 60 * 60 * 1000));\n          const purchaseFrequency = daysSinceFirst > 0 ? orderCount / (daysSinceFirst / 365) : 0;\n          \n          const ltv = calculateCustomerLTV(customer, avgOrderValue, purchaseFrequency, 2); // 2 year lifespan\n          \n          let segment = 'low-value';\n          if (ltv >= 5000) segment = 'high-value';\n          else if (ltv >= 2000) segment = 'medium-value';\n          \n          return {\n            ...customer,\n            totalSpent,\n            orderCount,\n            avgOrderValue: Math.round(avgOrderValue * 100) / 100,\n            purchaseFrequency: Math.round(purchaseFrequency * 100) / 100,\n            ltv,\n            segment\n          };\n        });\n      };\n\n      const customers = [\n        {\n          id: 'cust1',\n          name: 'High Value Customer',\n          orders: [\n            { amount: 1000, date: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString() },\n            { amount: 1500, date: new Date(Date.now() - 300 * 24 * 60 * 60 * 1000).toISOString() },\n            { amount: 2000, date: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString() }\n          ]\n        },\n        {\n          id: 'cust2',\n          name: 'Low Value Customer',\n          orders: [\n            { amount: 100, date: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString() }\n          ]\n        }\n      ];\n\n      const segmented = segmentCustomers(customers);\n      \n      expect(segmented[0].totalSpent).toBe(4500);\n      expect(segmented[0].orderCount).toBe(3);\n      expect(segmented[0].segment).toBe('high-value');\n      \n      expect(segmented[1].totalSpent).toBe(100);\n      expect(segmented[1].segment).toBe('low-value');\n    });\n\n    test('should identify customer churn risk', () => {\n      const identifyChurnRisk = (customers: any[], daysSinceLastOrder: number = 90) => {\n        const cutoffDate = new Date(Date.now() - daysSinceLastOrder * 24 * 60 * 60 * 1000);\n        \n        return customers.map(customer => {\n          const lastOrderDate = new Date(Math.max(...customer.orders.map((o: any) => new Date(o.date).getTime())));\n          const daysSinceLast = Math.floor((Date.now() - lastOrderDate.getTime()) / (24 * 60 * 60 * 1000));\n          \n          let churnRisk = 'low';\n          if (daysSinceLast > daysSinceLastOrder * 2) churnRisk = 'high';\n          else if (daysSinceLast > daysSinceLastOrder) churnRisk = 'medium';\n          \n          return {\n            ...customer,\n            lastOrderDate: lastOrderDate.toISOString(),\n            daysSinceLastOrder: daysSinceLast,\n            churnRisk\n          };\n        }).filter(customer => customer.churnRisk !== 'low');\n      };\n\n      const customers = [\n        {\n          id: 'cust1',\n          orders: [{ date: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString() }] // 200 days ago\n        },\n        {\n          id: 'cust2',\n          orders: [{ date: new Date(Date.now() - 50 * 24 * 60 * 60 * 1000).toISOString() }] // 50 days ago\n        }\n      ];\n\n      const atRisk = identifyChurnRisk(customers, 90);\n      \n      expect(atRisk).toHaveLength(1);\n      expect(atRisk[0].id).toBe('cust1');\n      expect(atRisk[0].churnRisk).toBe('high');\n    });\n  });\n\n  describe('Dashboard API Integration', () => {\n    test('should fetch dashboard data', async () => {\n      const fetchDashboardData = async (dateRange: string = '30d') => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            success: true,\n            data: {\n              sales: {\n                totalRevenue: 125000,\n                totalTransactions: 450,\n                averageOrderValue: 277.78,\n                growth: 15.5\n              },\n              inventory: {\n                totalItems: 1250,\n                lowStockItems: 23,\n                outOfStockItems: 5,\n                inventoryValue: 85000\n              },\n              customers: {\n                totalCustomers: 890,\n                newCustomers: 45,\n                activeCustomers: 234,\n                churnRate: 5.2\n              }\n            }\n          })\n        });\n\n        const response = await fetch(`/api/dashboard?range=${dateRange}`, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return response.json();\n      };\n\n      const result = await fetchDashboardData('30d');\n      \n      expect(result.success).toBe(true);\n      expect(result.data.sales.totalRevenue).toBe(125000);\n      expect(result.data.inventory.totalItems).toBe(1250);\n      expect(result.data.customers.totalCustomers).toBe(890);\n    });\n\n    test('should fetch chart data for different periods', async () => {\n      const fetchChartData = async (chartType: string, period: string) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            success: true,\n            chartData: {\n              labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n              datasets: [{\n                label: 'Revenue',\n                data: [12000, 15000, 18000, 16000, 20000]\n              }]\n            }\n          })\n        });\n\n        const response = await fetch(`/api/analytics/charts/${chartType}?period=${period}`, {\n          headers: {\n            'Authorization': 'Bearer mock-token'\n          }\n        });\n\n        return response.json();\n      };\n\n      const result = await fetchChartData('revenue', '6m');\n      \n      expect(result.success).toBe(true);\n      expect(result.chartData.labels).toHaveLength(5);\n      expect(result.chartData.datasets[0].data).toEqual([12000, 15000, 18000, 16000, 20000]);\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    test('should handle real-time dashboard updates', () => {\n      const createDashboardUpdater = () => {\n        let subscribers: Array<(data: any) => void> = [];\n        \n        const subscribe = (callback: (data: any) => void) => {\n          subscribers.push(callback);\n          return () => {\n            subscribers = subscribers.filter(sub => sub !== callback);\n          };\n        };\n        \n        const broadcast = (data: any) => {\n          subscribers.forEach(callback => callback(data));\n        };\n        \n        return { subscribe, broadcast };\n      };\n\n      const updater = createDashboardUpdater();\n      const mockCallback1 = jest.fn();\n      const mockCallback2 = jest.fn();\n      \n      const unsubscribe1 = updater.subscribe(mockCallback1);\n      const unsubscribe2 = updater.subscribe(mockCallback2);\n      \n      const updateData = { type: 'sales_update', value: 1000 };\n      updater.broadcast(updateData);\n      \n      expect(mockCallback1).toHaveBeenCalledWith(updateData);\n      expect(mockCallback2).toHaveBeenCalledWith(updateData);\n      \n      unsubscribe1();\n      updater.broadcast({ type: 'another_update', value: 2000 });\n      \n      expect(mockCallback1).toHaveBeenCalledTimes(1); // Should not be called again\n      expect(mockCallback2).toHaveBeenCalledTimes(2); // Should be called again\n    });\n\n    test('should throttle frequent updates', () => {\n      const createThrottledUpdater = (delay: number = 1000) => {\n        let lastUpdate = 0;\n        let pendingData: any = null;\n        let timeoutId: NodeJS.Timeout | null = null;\n        \n        const update = (data: any, callback: (data: any) => void) => {\n          const now = Date.now();\n          pendingData = data;\n          \n          if (now - lastUpdate >= delay) {\n            lastUpdate = now;\n            callback(data);\n            pendingData = null;\n          } else if (!timeoutId) {\n            timeoutId = setTimeout(() => {\n              if (pendingData) {\n                lastUpdate = Date.now();\n                callback(pendingData);\n                pendingData = null;\n              }\n              timeoutId = null;\n            }, delay - (now - lastUpdate));\n          }\n        };\n        \n        return { update };\n      };\n\n      const mockCallback = jest.fn();\n      const updater = createThrottledUpdater(100);\n      \n      // First update should go through immediately\n      updater.update({ value: 1 }, mockCallback);\n      expect(mockCallback).toHaveBeenCalledTimes(1);\n      \n      // Subsequent updates within delay should be throttled\n      updater.update({ value: 2 }, mockCallback);\n      updater.update({ value: 3 }, mockCallback);\n      expect(mockCallback).toHaveBeenCalledTimes(1); // Still only called once\n    });\n  });\n});"],"names":["jest","mock","useAuth","mockUseAuth","useRouter","push","fn","replace","back","forward","refresh","prefetch","mockFetch","global","fetch","describe","beforeEach","clearAllMocks","Object","defineProperty","window","value","getItem","setItem","removeItem","writable","mockReturnValue","user","id","name","email","permissions","isLoading","isAuthenticated","login","logout","hasPermission","permission","userPermissions","includes","test","calculateSalesMetrics","salesData","totalRevenue","reduce","sum","sale","amount","totalTransactions","length","averageOrderValue","today","Date","todaySales","filter","saleDate","date","toDateString","thisMonth","getMonth","getFullYear","Math","round","todayRevenue","monthlyRevenue","todayTransactions","monthlyTransactions","toISOString","now","metrics","expect","toBe","calculateGrowthRate","current","previous","comparePerformance","currentPeriod","previousPeriod","currentRevenue","previousRevenue","revenueGrowth","transactionGrowth","trend","currentMonth","previousMonth","performance","generateCategoryAnalysis","categoryTotals","acc","category","values","entries","map","percentage","sort","a","b","analysis","toEqual","calculateInventoryTurnover","costOfGoodsSold","averageInventoryValue","calculateDaysInInventory","inventoryTurnover","turnover","daysInInventory","identifySlowMovingItems","inventoryItems","daysThreshold","itemSales","items","forEach","item","productId","quantity","cutoffDate","lastSaleQuantity","lastUpdated","daysSinceLastSale","floor","getTime","totalSales","slowMoving","toHaveLength","find","generateStockAlerts","stockLevel","currentStock","reorderPoint","maxStock","alertType","alertMessage","stockPercentage","alerts","alert","calculateProfitMargins","revenue","cost","profit","marginPercentage","profitCategory","margins","calculateCashFlow","transactions","projectionDays","projectionDate","inflows","t","type","dueDate","outflows","netCashFlow","projectionPeriod","expectedInflows","expectedOutflows","cashFlowStatus","cashFlow","calculateCustomerLTV","customer","purchaseFrequency","customerLifespan","segmentCustomers","customers","totalSpent","orders","order","orderCount","avgOrderValue","firstOrderDate","min","o","daysSinceFirst","ltv","segment","segmented","identifyChurnRisk","daysSinceLastOrder","lastOrderDate","max","daysSinceLast","churnRisk","atRisk","fetchDashboardData","dateRange","mockResolvedValueOnce","ok","json","success","data","sales","growth","inventory","totalItems","lowStockItems","outOfStockItems","inventoryValue","totalCustomers","newCustomers","activeCustomers","churnRate","response","headers","result","fetchChartData","chartType","period","chartData","labels","datasets","label","createDashboardUpdater","subscribers","subscribe","callback","sub","broadcast","updater","mockCallback1","mockCallback2","unsubscribe1","unsubscribe2","updateData","toHaveBeenCalledWith","toHaveBeenCalledTimes","createThrottledUpdater","delay","lastUpdate","pendingData","timeoutId","update","setTimeout","mockCallback"],"mappings":"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"}