80b8dd85211944679202f46655ceda85
"use server";
"use strict";

/* istanbul ignore next */
function cov_rr8jh1b45() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/invoices/components/InvoicesList.tsx";
  var hash = "4ff07ad5263ab0a0d5ef77bde3cd3123328921a3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/invoices/components/InvoicesList.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 28
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "5": {
        start: {
          line: 14,
          column: 44
        },
        end: {
          line: 14,
          column: 103
        }
      },
      "6": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "7": {
        start: {
          line: 16,
          column: 14
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 25
        }
      },
      "10": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 84
        }
      },
      "11": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 44
        }
      },
      "12": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "13": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "14": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "15": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 30
        }
      },
      "16": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "17": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 87
        }
      },
      "18": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 22
        }
      },
      "19": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 78
        }
      },
      "20": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 22
        }
      },
      "21": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 75
        }
      },
      "22": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "23": {
        start: {
          line: 70,
          column: 37
        },
        end: {
          line: 70,
          column: 71
        }
      },
      "24": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 73
        }
      },
      "25": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 22
        }
      },
      "26": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "27": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 22
        }
      },
      "28": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "30": {
        start: {
          line: 83,
          column: 18
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "31": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "33": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 91,
          column: 18
        }
      },
      "34": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 22
        }
      },
      "35": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 96,
          column: 18
        }
      },
      "36": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 22
        }
      },
      "37": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 101,
          column: 18
        }
      },
      "38": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 22
        }
      },
      "39": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 108,
          column: 18
        }
      },
      "40": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 22
        }
      },
      "41": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 113,
          column: 18
        }
      },
      "42": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "43": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 18
        }
      },
      "44": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 22
        }
      },
      "45": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 124,
          column: 18
        }
      },
      "46": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 22
        }
      },
      "47": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "48": {
        start: {
          line: 129,
          column: 159
        },
        end: {
          line: 223,
          column: 10
        }
      },
      "49": {
        start: {
          line: 225,
          column: 27
        },
        end: {
          line: 225,
          column: 60
        }
      },
      "50": {
        start: {
          line: 225,
          column: 53
        },
        end: {
          line: 225,
          column: 59
        }
      },
      "51": {
        start: {
          line: 226,
          column: 32
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "52": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 242,
          column: 33
        }
      },
      "53": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "54": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 57
        }
      },
      "55": {
        start: {
          line: 246,
          column: 34
        },
        end: {
          line: 268,
          column: 10
        }
      },
      "56": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 247,
          column: 55
        }
      },
      "57": {
        start: {
          line: 248,
          column: 33
        },
        end: {
          line: 248,
          column: 101
        }
      },
      "58": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "59": {
        start: {
          line: 250,
          column: 36
        },
        end: {
          line: 250,
          column: 61
        }
      },
      "60": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "61": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 73
        }
      },
      "62": {
        start: {
          line: 254,
          column: 30
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "63": {
        start: {
          line: 255,
          column: 30
        },
        end: {
          line: 255,
          column: 64
        }
      },
      "64": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 267,
          column: 14
        }
      },
      "65": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 281,
          column: 10
        }
      },
      "66": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 62
        }
      },
      "67": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 296,
          column: 10
        }
      },
      "68": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 53
        }
      },
      "69": {
        start: {
          line: 301,
          column: 18
        },
        end: {
          line: 301,
          column: 55
        }
      },
      "70": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 308,
          column: 5
        }
      },
      "71": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 59
        }
      },
      "72": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "73": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 40
        }
      },
      "74": {
        start: {
          line: 309,
          column: 80
        },
        end: {
          line: 309,
          column: 92
        }
      },
      "75": {
        start: {
          line: 310,
          column: 26
        },
        end: {
          line: 310,
          column: 46
        }
      },
      "76": {
        start: {
          line: 311,
          column: 78
        },
        end: {
          line: 328,
          column: 6
        }
      },
      "77": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 340,
          column: 5
        }
      },
      "78": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 339,
          column: 11
        }
      },
      "79": {
        start: {
          line: 341,
          column: 4
        },
        end: {
          line: 353,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "fetchInvoicesData",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 32
          }
        },
        loc: {
          start: {
            line: 23,
            column: 126
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 225,
            column: 46
          },
          end: {
            line: 225,
            column: 47
          }
        },
        loc: {
          start: {
            line: 225,
            column: 53
          },
          end: {
            line: 225,
            column: 59
          }
        },
        line: 225
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 243,
            column: 32
          },
          end: {
            line: 243,
            column: 33
          }
        },
        loc: {
          start: {
            line: 243,
            column: 37
          },
          end: {
            line: 245,
            column: 9
          }
        },
        line: 243
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 246,
            column: 53
          },
          end: {
            line: 246,
            column: 54
          }
        },
        loc: {
          start: {
            line: 246,
            column: 60
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 246
      },
      "6": {
        name: "InvoicesList",
        decl: {
          start: {
            line: 299,
            column: 15
          },
          end: {
            line: 299,
            column: 27
          }
        },
        loc: {
          start: {
            line: 299,
            column: 46
          },
          end: {
            line: 354,
            column: 1
          }
        },
        line: 299
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 38
          }
        }, {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 18
          },
          end: {
            line: 18,
            column: 32
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 23,
            column: 48
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 49
          },
          end: {
            line: 24,
            column: 72
          }
        }, {
          start: {
            line: 24,
            column: 75
          },
          end: {
            line: 24,
            column: 84
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 17
          }
        }, {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 28,
            column: 37
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 9
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 24
          }
        }, {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 31,
            column: 51
          }
        }, {
          start: {
            line: 31,
            column: 55
          },
          end: {
            line: 33,
            column: 9
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 11
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 11
          },
          end: {
            line: 34,
            column: 17
          }
        }, {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 37
          }
        }, {
          start: {
            line: 34,
            column: 41
          },
          end: {
            line: 36,
            column: 9
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 37,
            column: 11
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 11
          },
          end: {
            line: 37,
            column: 27
          }
        }, {
          start: {
            line: 37,
            column: 31
          },
          end: {
            line: 54,
            column: 9
          }
        }],
        line: 37
      },
      "8": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "9": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 18
          }
        }, {
          start: {
            line: 56,
            column: 22
          },
          end: {
            line: 56,
            column: 42
          }
        }],
        line: 56
      },
      "10": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 22
          }
        }, {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 22
          }
        }, {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 22
          }
        }, {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 72,
            column: 22
          }
        }, {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 22
          }
        }, {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 77,
            column: 40
          }
        }],
        line: 59
      },
      "11": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "12": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 92,
            column: 22
          }
        }, {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 97,
            column: 22
          }
        }, {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 102,
            column: 22
          }
        }, {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 109,
            column: 22
          }
        }, {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 114,
            column: 22
          }
        }, {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 119,
            column: 22
          }
        }, {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 26
          }
        }, {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 125,
            column: 22
          }
        }],
        line: 87
      },
      "13": {
        loc: {
          start: {
            line: 226,
            column: 32
          },
          end: {
            line: 241,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 56
          },
          end: {
            line: 241,
            column: 10
          }
        }, {
          start: {
            line: 241,
            column: 13
          },
          end: {
            line: 241,
            column: 15
          }
        }],
        line: 226
      },
      "14": {
        loc: {
          start: {
            line: 244,
            column: 37
          },
          end: {
            line: 244,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 37
          },
          end: {
            line: 244,
            column: 50
          }
        }, {
          start: {
            line: 244,
            column: 54
          },
          end: {
            line: 244,
            column: 55
          }
        }],
        line: 244
      },
      "15": {
        loc: {
          start: {
            line: 248,
            column: 33
          },
          end: {
            line: 248,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 47
          },
          end: {
            line: 248,
            column: 96
          }
        }, {
          start: {
            line: 248,
            column: 99
          },
          end: {
            line: 248,
            column: 101
          }
        }],
        line: 248
      },
      "16": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "17": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 31
          }
        }, {
          start: {
            line: 249,
            column: 35
          },
          end: {
            line: 249,
            column: 50
          }
        }],
        line: 249
      },
      "18": {
        loc: {
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 49
          }
        }, {
          start: {
            line: 254,
            column: 53
          },
          end: {
            line: 254,
            column: 54
          }
        }],
        line: 254
      },
      "19": {
        loc: {
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 259,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 259,
            column: 48
          }
        }, {
          start: {
            line: 259,
            column: 52
          },
          end: {
            line: 259,
            column: 70
          }
        }],
        line: 259
      },
      "20": {
        loc: {
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 44
          }
        }, {
          start: {
            line: 260,
            column: 48
          },
          end: {
            line: 260,
            column: 49
          }
        }],
        line: 260
      },
      "21": {
        loc: {
          start: {
            line: 263,
            column: 29
          },
          end: {
            line: 263,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 29
          },
          end: {
            line: 263,
            column: 44
          }
        }, {
          start: {
            line: 263,
            column: 48
          },
          end: {
            line: 263,
            column: 49
          }
        }],
        line: 263
      },
      "22": {
        loc: {
          start: {
            line: 264,
            column: 30
          },
          end: {
            line: 264,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 30
          },
          end: {
            line: 264,
            column: 46
          }
        }, {
          start: {
            line: 264,
            column: 50
          },
          end: {
            line: 264,
            column: 51
          }
        }],
        line: 264
      },
      "23": {
        loc: {
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 274,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 274,
            column: 67
          }
        }, {
          start: {
            line: 274,
            column: 71
          },
          end: {
            line: 274,
            column: 72
          }
        }],
        line: 274
      },
      "24": {
        loc: {
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 275,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 31
          },
          end: {
            line: 275,
            column: 61
          }
        }, {
          start: {
            line: 275,
            column: 65
          },
          end: {
            line: 275,
            column: 66
          }
        }],
        line: 275
      },
      "25": {
        loc: {
          start: {
            line: 277,
            column: 29
          },
          end: {
            line: 277,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 29
          },
          end: {
            line: 277,
            column: 57
          }
        }, {
          start: {
            line: 277,
            column: 61
          },
          end: {
            line: 277,
            column: 62
          }
        }],
        line: 277
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 278,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 278,
            column: 63
          }
        }, {
          start: {
            line: 278,
            column: 67
          },
          end: {
            line: 278,
            column: 68
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "28": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "29": {
        loc: {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 310,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 310,
            column: 36
          }
        }, {
          start: {
            line: 310,
            column: 40
          },
          end: {
            line: 310,
            column: 46
          }
        }],
        line: 310
      },
      "30": {
        loc: {
          start: {
            line: 313,
            column: 23
          },
          end: {
            line: 313,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 30
          },
          end: {
            line: 313,
            column: 48
          }
        }, {
          start: {
            line: 313,
            column: 51
          },
          end: {
            line: 313,
            column: 52
          }
        }],
        line: 313
      },
      "31": {
        loc: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/invoices/components/InvoicesList.tsx"],
      sourcesContent: ["'use server';\n\nimport { prisma } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\nimport InvoiceClientWrapper from './InvoiceClientWrapper';\nimport { cookies } from 'next/headers';\nimport { verifyToken } from '@/lib/auth';\n\ninterface Invoice {\n    id: string | number;\n    invoiceNumber: string;\n    customerId: number | null;\n    customerName?: string;\n    total: number;\n    totalProfit?: number;\n    profitMargin?: number;\n    status: string;\n    paymentMethod: string | null;\n    createdAt: Date | string;\n    updatedAt: Date | string;\n    date?: string;\n    dueDate?: string;\n    notes?: string | null;\n    totalPaid?: number;\n    dueAmount?: number;\n}\n\nconst ITEMS_PER_PAGE = 15;\n\nasync function fetchInvoicesData({\n    pageParam = 1,\n    status,\n    paymentMethod,\n    timePeriod,\n    searchQueryParam,\n    sortByParam,\n    shopId\n}: {\n    pageParam?: number;\n    status?: string;\n    paymentMethod?: string;\n    timePeriod?: string;\n    searchQueryParam?: string;\n    sortByParam?: string;\n    shopId?: string;\n}) {\n    const page = typeof pageParam === 'string' ? parseInt(pageParam, 10) : pageParam;\n    const skip = (page - 1) * ITEMS_PER_PAGE;\n    const take = ITEMS_PER_PAGE;\n\n    const whereClause: Prisma.InvoiceWhereInput = {\n        ...(status && status !== 'all' && { status }),\n        ...(paymentMethod && paymentMethod !== 'all' && { paymentMethod }),\n        ...(shopId && shopId !== 'all' && { shopId }),\n        ...(searchQueryParam && {\n            OR: [\n                { invoiceNumber: { contains: searchQueryParam, mode: 'insensitive' } },\n                { customer: { name: { contains: searchQueryParam, mode: 'insensitive' } } },\n            ],\n        }),\n    };\n\n    if (timePeriod && timePeriod !== 'all') {\n        const now = new Date();\n        let startDate: Date;\n\n        switch (timePeriod) {\n            case 'today':\n                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                break;\n            case 'week':\n                startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n            case 'month':\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                break;\n            case 'quarter':\n                const quarterStart = Math.floor(now.getMonth() / 3) * 3;\n                startDate = new Date(now.getFullYear(), quarterStart, 1);\n                break;\n            case 'year':\n                startDate = new Date(now.getFullYear(), 0, 1);\n                break;\n            default:\n                startDate = new Date(0);\n        }\n\n        whereClause.createdAt = {\n            gte: startDate,\n        };\n    }\n\n    let orderBy: Prisma.InvoiceOrderByWithRelationInput = { createdAt: 'desc' };\n    if (sortByParam) {\n        switch (sortByParam) {\n            case 'oldest':\n                orderBy = { createdAt: 'asc' };\n                break;\n            case 'amount-high':\n                orderBy = { total: 'desc' };\n                break;\n            case 'amount-low':\n                orderBy = { total: 'asc' };\n                break;\n            case 'customer':\n                orderBy = { customer: { name: 'asc' } };\n                break;\n            case 'due-date':\n                orderBy = { dueDate: 'asc' };\n                break;\n            case 'due-date-desc':\n                orderBy = { dueDate: 'desc' };\n                break;\n            case 'newest':\n            default:\n                orderBy = { createdAt: 'desc' };\n                break;\n        }\n    }\n\n    try {\n        const [invoicesFromDB, totalInvoicesCount, totalOutstandingResult, paidThisMonthResult, overdueCountResult, creditSalesResult, nonCreditSalesResult] = await Promise.all([\n            prisma.invoice.findMany({\n                where: whereClause,\n                select: {\n                    id: true,\n                    invoiceNumber: true,\n                    customerId: true,\n                    total: true,\n                    totalProfit: true,\n                    profitMargin: true,\n                    status: true,\n                    paymentMethod: true,\n                    createdAt: true,\n                    updatedAt: true,\n                    invoiceDate: true,\n                    dueDate: true,\n                    notes: true,\n                    shopId: true,\n                    customer: true,\n                    shop: {\n                        select: {\n                            id: true,\n                            name: true,\n                            location: true\n                        }\n                    },\n                    _count: {\n                        select: { items: true },\n                    },\n                },\n                orderBy: orderBy,\n                skip: (page - 1) * ITEMS_PER_PAGE,\n                take: ITEMS_PER_PAGE,\n            }),\n            prisma.invoice.count({ where: whereClause }),\n            prisma.invoice.aggregate({\n                _sum: { total: true },\n                where: {\n                    ...whereClause,\n                    status: { notIn: ['paid', 'cancelled', 'void'] },\n                }\n            }),\n            prisma.invoice.aggregate({\n                _sum: { total: true },\n                where: {\n                    ...whereClause,\n                    status: 'paid',\n                    updatedAt: { gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1) },\n                }\n            }),\n            prisma.invoice.count({\n                where: {\n                    ...whereClause,\n                    status: 'overdue',\n                }\n            }),\n            prisma.invoice.aggregate({\n                _sum: { total: true },\n                where: {\n                    ...whereClause,\n                    customer: {\n                        customerType: 'wholesale'\n                    }\n                }\n            }),\n            prisma.invoice.aggregate({\n                _sum: { total: true },\n                where: {\n                    ...whereClause,\n                    customer: {\n                        customerType: 'retail'\n                    }\n                }\n            }),\n        ]);\n\n        // Fetch totalPaid per invoice via payment groupBy (only receipts counted)\n        const invoiceIds = invoicesFromDB.map(inv => inv.id);\n        const paymentsGrouped = invoiceIds.length > 0 ? await prisma.payment.groupBy({\n            by: ['invoiceId'],\n            where: {\n                invoiceId: { in: invoiceIds },\n                receipt: { isNot: null }\n            },\n            _sum: { amount: true }\n        }) : [];\n\n        const paidMap = new Map<number, number>();\n        paymentsGrouped.forEach(p => {\n            paidMap.set(p.invoiceId as unknown as number, p._sum.amount ?? 0);\n        });\n\n        const formattedInvoices: Invoice[] = invoicesFromDB.map(inv => {\n            const createdDate = new Date(inv.createdAt);\n            let displayDueDate = inv.dueDate ? new Date(inv.dueDate).toISOString().split('T')[0] : '';\n            if (!displayDueDate && inv.invoiceDate) {\n                const tempDueDate = new Date(inv.invoiceDate);\n                tempDueDate.setDate(tempDueDate.getDate() + 30);\n                displayDueDate = tempDueDate.toISOString().split('T')[0];\n            }\n\n            const totalPaid = paidMap.get(inv.id as unknown as number) || 0;\n            const dueAmount = Math.max(0, inv.total - totalPaid);\n\n            return {\n                ...inv,\n                id: inv.id.toString(),\n                customerName: inv.customer?.name || 'Unknown Customer',\n                itemCount: inv._count?.items || 0,\n                date: createdDate.toISOString().split('T')[0],\n                dueDate: displayDueDate,\n                totalProfit: inv.totalProfit || 0,\n                profitMargin: inv.profitMargin || 0,\n                totalPaid,\n                dueAmount\n            };\n        });\n\n        return {\n            invoices: formattedInvoices,\n            totalPages: Math.ceil(totalInvoicesCount / ITEMS_PER_PAGE),\n            currentPage: page,\n            statistics: {\n                totalOutstanding: totalOutstandingResult._sum.total || 0,\n                paidThisMonth: paidThisMonthResult._sum.total || 0,\n                overdueCount: overdueCountResult,\n                creditSales: creditSalesResult._sum.total || 0,\n                nonCreditSales: nonCreditSalesResult._sum.total || 0,\n            },\n            error: null,\n        };\n\n    } catch (error) {\n        console.error('Error fetching invoices data:', error);\n        return {\n            invoices: [],\n            totalPages: 0,\n            currentPage: 1,\n            statistics: {\n                totalOutstanding: 0,\n                paidThisMonth: 0,\n                overdueCount: 0,\n                creditSales: 0,\n                nonCreditSales: 0,\n            },\n            error: 'Failed to fetch invoices',\n        };\n    }\n}\n\nexport default async function InvoicesList({\n    searchParams,\n}: {\n    searchParams: { \n        page?: string;\n        status?: string;\n        paymentMethod?: string;\n        search?: string;\n        timePeriod?: string;\n        sortBy?: string;\n        shopId?: string;\n    };\n}) {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('accessToken')?.value;\n    let userShopId: string | undefined;\n\n    if (token) {\n        const payload = await verifyToken(token);\n        if (payload?.shopId) {\n            userShopId = payload.shopId as string;\n        }\n    }\n\n    const { page, status, paymentMethod, search, timePeriod, sortBy, shopId } = searchParams;\n\n    const appliedShopId = userShopId || shopId;\n\n    const [{ invoices, totalPages, currentPage, statistics, error }, shops] = await Promise.all([\n        fetchInvoicesData({\n            pageParam: page ? parseInt(page, 10) : 1,\n            status: status,\n            paymentMethod: paymentMethod,\n            searchQueryParam: search,\n            timePeriod: timePeriod,\n            sortByParam: sortBy,\n            shopId: appliedShopId\n        }),\n        prisma.shop.findMany({\n            select: {\n                id: true,\n                name: true,\n                location: true\n            }\n        })\n    ]);\n\n    if (error) {\n        return (\n            <div className=\"container mx-auto px-4 py-8\">\n                <p className=\"text-red-500 text-center\">{error}. Please try refreshing the page.</p>\n            </div>\n        );\n    }\n\n    return (\n        <InvoiceClientWrapper\n            initialInvoices={invoices}\n            initialTotalPages={totalPages}\n            initialCurrentPage={currentPage}\n            initialStatistics={{\n                totalOutstanding: statistics.totalOutstanding,\n                paidThisMonth: statistics.paidThisMonth,\n                overdueCount: statistics.overdueCount,\n                totalCreditSales: statistics.creditSales,\n                totalNonCreditSales: statistics.nonCreditSales\n            }}\n            shops={shops}\n        />\n    );\n} "],
      names: ["InvoicesList", "ITEMS_PER_PAGE", "fetchInvoicesData", "pageParam", "status", "paymentMethod", "timePeriod", "searchQueryParam", "sortByParam", "shopId", "page", "parseInt", "skip", "take", "whereClause", "OR", "invoiceNumber", "contains", "mode", "customer", "name", "now", "Date", "startDate", "getFullYear", "getMonth", "getDate", "getTime", "quarterStart", "Math", "floor", "createdAt", "gte", "orderBy", "total", "dueDate", "invoicesFromDB", "totalInvoicesCount", "totalOutstandingResult", "paidThisMonthResult", "overdueCountResult", "creditSalesResult", "nonCreditSalesResult", "Promise", "all", "prisma", "invoice", "findMany", "where", "select", "id", "customerId", "totalProfit", "profitMargin", "updatedAt", "invoiceDate", "notes", "shop", "location", "_count", "items", "count", "aggregate", "_sum", "notIn", "customerType", "invoiceIds", "map", "inv", "paymentsGrouped", "length", "payment", "groupBy", "by", "invoiceId", "in", "receipt", "isNot", "amount", "paidMap", "Map", "forEach", "p", "set", "formattedInvoices", "createdDate", "displayDueDate", "toISOString", "split", "tempDueDate", "setDate", "totalPaid", "get", "dueAmount", "max", "toString", "customerName", "itemCount", "date", "invoices", "totalPages", "ceil", "currentPage", "statistics", "totalOutstanding", "paidThisMonth", "overdueCount", "creditSales", "nonCreditSales", "error", "console", "searchParams", "cookieStore", "cookies", "token", "value", "userShopId", "payload", "verifyToken", "search", "sortBy", "appliedShopId", "shops", "div", "className", "InvoiceClientWrapper", "initialInvoices", "initialTotalPages", "initialCurrentPage", "initialStatistics", "totalCreditSales", "totalNonCreditSales"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4ff07ad5263ab0a0d5ef77bde3cd3123328921a3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rr8jh1b45 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rr8jh1b45();
cov_rr8jh1b45().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_rr8jh1b45().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_rr8jh1b45().f[0]++;
    cov_rr8jh1b45().s[2]++;
    return InvoicesList;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_rr8jh1b45().s[3]++, require("react/jsx-runtime"));
const _prisma =
/* istanbul ignore next */
(cov_rr8jh1b45().s[4]++, require("../../../lib/prisma"));
const _InvoiceClientWrapper =
/* istanbul ignore next */
(/*#__PURE__*/cov_rr8jh1b45().s[5]++, _interop_require_default(require("./InvoiceClientWrapper")));
const _headers =
/* istanbul ignore next */
(cov_rr8jh1b45().s[6]++, require("next/headers"));
const _auth =
/* istanbul ignore next */
(cov_rr8jh1b45().s[7]++, require("../../../lib/auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_rr8jh1b45().f[1]++;
  cov_rr8jh1b45().s[8]++;
  return /* istanbul ignore next */(cov_rr8jh1b45().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[0][1]++, {
    default: obj
  });
}
const ITEMS_PER_PAGE =
/* istanbul ignore next */
(cov_rr8jh1b45().s[9]++, 15);
async function fetchInvoicesData({
  pageParam =
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[2][0]++, 1),
  status,
  paymentMethod,
  timePeriod,
  searchQueryParam,
  sortByParam,
  shopId
}) {
  /* istanbul ignore next */
  cov_rr8jh1b45().f[2]++;
  const page =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[10]++, typeof pageParam === "string" ?
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[3][0]++, parseInt(pageParam, 10)) :
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[3][1]++, pageParam));
  const skip =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[11]++, (page - 1) * ITEMS_PER_PAGE);
  const take =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[12]++, ITEMS_PER_PAGE);
  const whereClause =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[13]++, {
    ...(
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[4][0]++, status) &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[4][1]++, status !== "all") &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[4][2]++, {
      status
    })),
    ...(
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[5][0]++, paymentMethod) &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[5][1]++, paymentMethod !== "all") &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[5][2]++, {
      paymentMethod
    })),
    ...(
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[6][0]++, shopId) &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[6][1]++, shopId !== "all") &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[6][2]++, {
      shopId
    })),
    ...(
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[7][0]++, searchQueryParam) &&
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[7][1]++, {
      OR: [{
        invoiceNumber: {
          contains: searchQueryParam,
          mode: "insensitive"
        }
      }, {
        customer: {
          name: {
            contains: searchQueryParam,
            mode: "insensitive"
          }
        }
      }]
    }))
  });
  /* istanbul ignore next */
  cov_rr8jh1b45().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[9][0]++, timePeriod) &&
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[9][1]++, timePeriod !== "all")) {
    /* istanbul ignore next */
    cov_rr8jh1b45().b[8][0]++;
    const now =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[15]++, new Date());
    let startDate;
    /* istanbul ignore next */
    cov_rr8jh1b45().s[16]++;
    switch (timePeriod) {
      case "today":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][0]++;
        cov_rr8jh1b45().s[17]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        /* istanbul ignore next */
        cov_rr8jh1b45().s[18]++;
        break;
      case "week":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][1]++;
        cov_rr8jh1b45().s[19]++;
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[20]++;
        break;
      case "month":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][2]++;
        cov_rr8jh1b45().s[21]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[22]++;
        break;
      case "quarter":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][3]++;
        const quarterStart =
        /* istanbul ignore next */
        (cov_rr8jh1b45().s[23]++, Math.floor(now.getMonth() / 3) * 3);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[24]++;
        startDate = new Date(now.getFullYear(), quarterStart, 1);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[25]++;
        break;
      case "year":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][4]++;
        cov_rr8jh1b45().s[26]++;
        startDate = new Date(now.getFullYear(), 0, 1);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[27]++;
        break;
      default:
        /* istanbul ignore next */
        cov_rr8jh1b45().b[10][5]++;
        cov_rr8jh1b45().s[28]++;
        startDate = new Date(0);
    }
    /* istanbul ignore next */
    cov_rr8jh1b45().s[29]++;
    whereClause.createdAt = {
      gte: startDate
    };
  } else
  /* istanbul ignore next */
  {
    cov_rr8jh1b45().b[8][1]++;
  }
  let orderBy =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[30]++, {
    createdAt: "desc"
  });
  /* istanbul ignore next */
  cov_rr8jh1b45().s[31]++;
  if (sortByParam) {
    /* istanbul ignore next */
    cov_rr8jh1b45().b[11][0]++;
    cov_rr8jh1b45().s[32]++;
    switch (sortByParam) {
      case "oldest":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][0]++;
        cov_rr8jh1b45().s[33]++;
        orderBy = {
          createdAt: "asc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[34]++;
        break;
      case "amount-high":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][1]++;
        cov_rr8jh1b45().s[35]++;
        orderBy = {
          total: "desc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[36]++;
        break;
      case "amount-low":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][2]++;
        cov_rr8jh1b45().s[37]++;
        orderBy = {
          total: "asc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[38]++;
        break;
      case "customer":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][3]++;
        cov_rr8jh1b45().s[39]++;
        orderBy = {
          customer: {
            name: "asc"
          }
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[40]++;
        break;
      case "due-date":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][4]++;
        cov_rr8jh1b45().s[41]++;
        orderBy = {
          dueDate: "asc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[42]++;
        break;
      case "due-date-desc":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][5]++;
        cov_rr8jh1b45().s[43]++;
        orderBy = {
          dueDate: "desc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[44]++;
        break;
      case "newest":
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][6]++;
      default:
        /* istanbul ignore next */
        cov_rr8jh1b45().b[12][7]++;
        cov_rr8jh1b45().s[45]++;
        orderBy = {
          createdAt: "desc"
        };
        /* istanbul ignore next */
        cov_rr8jh1b45().s[46]++;
        break;
    }
  } else
  /* istanbul ignore next */
  {
    cov_rr8jh1b45().b[11][1]++;
  }
  cov_rr8jh1b45().s[47]++;
  try {
    const [invoicesFromDB, totalInvoicesCount, totalOutstandingResult, paidThisMonthResult, overdueCountResult, creditSalesResult, nonCreditSalesResult] =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[48]++, await Promise.all([_prisma.prisma.invoice.findMany({
      where: whereClause,
      select: {
        id: true,
        invoiceNumber: true,
        customerId: true,
        total: true,
        totalProfit: true,
        profitMargin: true,
        status: true,
        paymentMethod: true,
        createdAt: true,
        updatedAt: true,
        invoiceDate: true,
        dueDate: true,
        notes: true,
        shopId: true,
        customer: true,
        shop: {
          select: {
            id: true,
            name: true,
            location: true
          }
        },
        _count: {
          select: {
            items: true
          }
        }
      },
      orderBy: orderBy,
      skip: (page - 1) * ITEMS_PER_PAGE,
      take: ITEMS_PER_PAGE
    }), _prisma.prisma.invoice.count({
      where: whereClause
    }), _prisma.prisma.invoice.aggregate({
      _sum: {
        total: true
      },
      where: {
        ...whereClause,
        status: {
          notIn: ["paid", "cancelled", "void"]
        }
      }
    }), _prisma.prisma.invoice.aggregate({
      _sum: {
        total: true
      },
      where: {
        ...whereClause,
        status: "paid",
        updatedAt: {
          gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
        }
      }
    }), _prisma.prisma.invoice.count({
      where: {
        ...whereClause,
        status: "overdue"
      }
    }), _prisma.prisma.invoice.aggregate({
      _sum: {
        total: true
      },
      where: {
        ...whereClause,
        customer: {
          customerType: "wholesale"
        }
      }
    }), _prisma.prisma.invoice.aggregate({
      _sum: {
        total: true
      },
      where: {
        ...whereClause,
        customer: {
          customerType: "retail"
        }
      }
    })]));
    // Fetch totalPaid per invoice via payment groupBy (only receipts counted)
    const invoiceIds =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[49]++, invoicesFromDB.map(inv => {
      /* istanbul ignore next */
      cov_rr8jh1b45().f[3]++;
      cov_rr8jh1b45().s[50]++;
      return inv.id;
    }));
    const paymentsGrouped =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[51]++, invoiceIds.length > 0 ?
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[13][0]++, await _prisma.prisma.payment.groupBy({
      by: ["invoiceId"],
      where: {
        invoiceId: {
          in: invoiceIds
        },
        receipt: {
          isNot: null
        }
      },
      _sum: {
        amount: true
      }
    })) :
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[13][1]++, []));
    const paidMap =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[52]++, new Map());
    /* istanbul ignore next */
    cov_rr8jh1b45().s[53]++;
    paymentsGrouped.forEach(p => {
      /* istanbul ignore next */
      cov_rr8jh1b45().f[4]++;
      cov_rr8jh1b45().s[54]++;
      paidMap.set(p.invoiceId,
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[14][0]++, p._sum.amount) ??
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[14][1]++, 0));
    });
    const formattedInvoices =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[55]++, invoicesFromDB.map(inv => {
      /* istanbul ignore next */
      cov_rr8jh1b45().f[5]++;
      const createdDate =
      /* istanbul ignore next */
      (cov_rr8jh1b45().s[56]++, new Date(inv.createdAt));
      let displayDueDate =
      /* istanbul ignore next */
      (cov_rr8jh1b45().s[57]++, inv.dueDate ?
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[15][0]++, new Date(inv.dueDate).toISOString().split("T")[0]) :
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[15][1]++, ""));
      /* istanbul ignore next */
      cov_rr8jh1b45().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[17][0]++, !displayDueDate) &&
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[17][1]++, inv.invoiceDate)) {
        /* istanbul ignore next */
        cov_rr8jh1b45().b[16][0]++;
        const tempDueDate =
        /* istanbul ignore next */
        (cov_rr8jh1b45().s[59]++, new Date(inv.invoiceDate));
        /* istanbul ignore next */
        cov_rr8jh1b45().s[60]++;
        tempDueDate.setDate(tempDueDate.getDate() + 30);
        /* istanbul ignore next */
        cov_rr8jh1b45().s[61]++;
        displayDueDate = tempDueDate.toISOString().split("T")[0];
      } else
      /* istanbul ignore next */
      {
        cov_rr8jh1b45().b[16][1]++;
      }
      const totalPaid =
      /* istanbul ignore next */
      (cov_rr8jh1b45().s[62]++,
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[18][0]++, paidMap.get(inv.id)) ||
      /* istanbul ignore next */
      (cov_rr8jh1b45().b[18][1]++, 0));
      const dueAmount =
      /* istanbul ignore next */
      (cov_rr8jh1b45().s[63]++, Math.max(0, inv.total - totalPaid));
      /* istanbul ignore next */
      cov_rr8jh1b45().s[64]++;
      return {
        ...inv,
        id: inv.id.toString(),
        customerName:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[19][0]++, inv.customer?.name) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[19][1]++, "Unknown Customer"),
        itemCount:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[20][0]++, inv._count?.items) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[20][1]++, 0),
        date: createdDate.toISOString().split("T")[0],
        dueDate: displayDueDate,
        totalProfit:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[21][0]++, inv.totalProfit) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[21][1]++, 0),
        profitMargin:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[22][0]++, inv.profitMargin) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[22][1]++, 0),
        totalPaid,
        dueAmount
      };
    }));
    /* istanbul ignore next */
    cov_rr8jh1b45().s[65]++;
    return {
      invoices: formattedInvoices,
      totalPages: Math.ceil(totalInvoicesCount / ITEMS_PER_PAGE),
      currentPage: page,
      statistics: {
        totalOutstanding:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[23][0]++, totalOutstandingResult._sum.total) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[23][1]++, 0),
        paidThisMonth:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[24][0]++, paidThisMonthResult._sum.total) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[24][1]++, 0),
        overdueCount: overdueCountResult,
        creditSales:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[25][0]++, creditSalesResult._sum.total) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[25][1]++, 0),
        nonCreditSales:
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[26][0]++, nonCreditSalesResult._sum.total) ||
        /* istanbul ignore next */
        (cov_rr8jh1b45().b[26][1]++, 0)
      },
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_rr8jh1b45().s[66]++;
    console.error("Error fetching invoices data:", error);
    /* istanbul ignore next */
    cov_rr8jh1b45().s[67]++;
    return {
      invoices: [],
      totalPages: 0,
      currentPage: 1,
      statistics: {
        totalOutstanding: 0,
        paidThisMonth: 0,
        overdueCount: 0,
        creditSales: 0,
        nonCreditSales: 0
      },
      error: "Failed to fetch invoices"
    };
  }
}
async function InvoicesList({
  searchParams
}) {
  /* istanbul ignore next */
  cov_rr8jh1b45().f[6]++;
  const cookieStore =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[68]++, await (0, _headers.cookies)());
  const token =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[69]++, cookieStore.get("accessToken")?.value);
  let userShopId;
  /* istanbul ignore next */
  cov_rr8jh1b45().s[70]++;
  if (token) {
    /* istanbul ignore next */
    cov_rr8jh1b45().b[27][0]++;
    const payload =
    /* istanbul ignore next */
    (cov_rr8jh1b45().s[71]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_rr8jh1b45().s[72]++;
    if (payload?.shopId) {
      /* istanbul ignore next */
      cov_rr8jh1b45().b[28][0]++;
      cov_rr8jh1b45().s[73]++;
      userShopId = payload.shopId;
    } else
    /* istanbul ignore next */
    {
      cov_rr8jh1b45().b[28][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_rr8jh1b45().b[27][1]++;
  }
  const {
    page,
    status,
    paymentMethod,
    search,
    timePeriod,
    sortBy,
    shopId
  } =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[74]++, searchParams);
  const appliedShopId =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[75]++,
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[29][0]++, userShopId) ||
  /* istanbul ignore next */
  (cov_rr8jh1b45().b[29][1]++, shopId));
  const [{
    invoices,
    totalPages,
    currentPage,
    statistics,
    error
  }, shops] =
  /* istanbul ignore next */
  (cov_rr8jh1b45().s[76]++, await Promise.all([fetchInvoicesData({
    pageParam: page ?
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[30][0]++, parseInt(page, 10)) :
    /* istanbul ignore next */
    (cov_rr8jh1b45().b[30][1]++, 1),
    status: status,
    paymentMethod: paymentMethod,
    searchQueryParam: search,
    timePeriod: timePeriod,
    sortByParam: sortBy,
    shopId: appliedShopId
  }), _prisma.prisma.shop.findMany({
    select: {
      id: true,
      name: true,
      location: true
    }
  })]));
  /* istanbul ignore next */
  cov_rr8jh1b45().s[77]++;
  if (error) {
    /* istanbul ignore next */
    cov_rr8jh1b45().b[31][0]++;
    cov_rr8jh1b45().s[78]++;
    return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "container mx-auto px-4 py-8",
      children: /*#__PURE__*/(0, _jsxruntime.jsxs)("p", {
        className: "text-red-500 text-center",
        children: [error, ". Please try refreshing the page."]
      })
    });
  } else
  /* istanbul ignore next */
  {
    cov_rr8jh1b45().b[31][1]++;
  }
  cov_rr8jh1b45().s[79]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)(_InvoiceClientWrapper.default, {
    initialInvoices: invoices,
    initialTotalPages: totalPages,
    initialCurrentPage: currentPage,
    initialStatistics: {
      totalOutstanding: statistics.totalOutstanding,
      paidThisMonth: statistics.paidThisMonth,
      overdueCount: statistics.overdueCount,
      totalCreditSales: statistics.creditSales,
      totalNonCreditSales: statistics.nonCreditSales
    },
    shops: shops
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,