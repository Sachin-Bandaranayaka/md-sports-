{"version":3,"names":["ChatMessage","message","cov_2cakosrv3","f","isUser","s","role","formatContent","content","b","formattedContent","sections","split","length","result","i","formatSection","text","formatted","numberedListPattern","replace","match","items","filter","Boolean","map","item","trim","join","bulletListPattern","paragraphs","p","includes","_jsxruntime","jsx","className","_cn","cn","dangerouslySetInnerHTML","__html"],"sources":["/Users/sachin/Documents/md-sports-/src/components/chatbot/ChatMessage.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils/cn';\nimport { ChatMessage as ChatMessageType } from '@/services/chatbotService';\n\ninterface ChatMessageProps {\n    message: ChatMessageType;\n}\n\nexport function ChatMessage({ message }: ChatMessageProps) {\n    const isUser = message.role === 'user';\n\n    // Function to format the message content with markdown-like styling\n    const formatContent = (content: string) => {\n        if (isUser) return content; // Don't format user messages\n\n        // Process content for formatting\n        let formattedContent = content;\n\n        // Find sections separated by ### headers\n        const sections = formattedContent.split(/###\\s+([^#\\n]+)/);\n        if (sections.length > 1) {\n            let result = '';\n            for (let i = 0; i < sections.length; i++) {\n                if (i % 2 === 0) {\n                    // Even indexes are content between headers\n                    if (sections[i]) {\n                        result += `<div>${formatSection(sections[i])}</div>`;\n                    }\n                } else {\n                    // Odd indexes are headers\n                    result += `<h3 class=\"font-bold text-base mt-3 mb-2\">${sections[i]}</h3>`;\n                }\n            }\n            return result;\n        }\n\n        return formatSection(formattedContent);\n    };\n\n    // Helper function to format a section of content\n    const formatSection = (text: string) => {\n        let formatted = text;\n\n        // Extract numbered lists (1. Item, 2. Item, etc.)\n        const numberedListPattern = /(\\d+\\.\\s+[^\\n]+\\n?)+/g;\n        formatted = formatted.replace(numberedListPattern, (match) => {\n            const items = match.split(/\\d+\\.\\s+/).filter(Boolean);\n            return `<ol class=\"list-decimal pl-5 my-2\">${items.map(item =>\n                `<li>${item.trim()}</li>`).join('')}</ol>`;\n        });\n\n        // Extract bullet lists (• Item, * Item)\n        const bulletListPattern = /((?:\\*\\s+|\\•\\s+)[^\\n]+\\n?)+/g;\n        formatted = formatted.replace(bulletListPattern, (match) => {\n            const items = match.split(/(?:\\*\\s+|\\•\\s+)/).filter(Boolean);\n            return `<ul class=\"list-disc pl-5 my-2\">${items.map(item =>\n                `<li>${item.trim()}</li>`).join('')}</ul>`;\n        });\n\n        // Handle bold text with ** markers\n        formatted = formatted.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n\n        // Handle paragraphs\n        const paragraphs = formatted.split(/\\n\\n+/);\n        if (paragraphs.length > 1) {\n            return paragraphs.map(p => {\n                if (p.trim() && !p.includes('<ol') && !p.includes('<ul')) {\n                    return `<p class=\"my-2\">${p.trim()}</p>`;\n                }\n                return p;\n            }).join('');\n        }\n\n        // If no paragraphs were found, and it's not a list, wrap in a paragraph\n        if (!formatted.includes('<ol') && !formatted.includes('<ul')) {\n            formatted = `<p>${formatted}</p>`;\n        }\n\n        return formatted;\n    };\n\n    return (\n        <div\n            className={cn(\n                'flex w-full mb-4',\n                isUser ? 'justify-end' : 'justify-start'\n            )}\n        >\n            <div\n                className={cn(\n                    'max-w-[80%] rounded-lg px-4 py-2',\n                    isUser\n                        ? 'bg-primary text-white rounded-br-none'\n                        : 'bg-gray-100 text-black rounded-bl-none'\n                )}\n            >\n                {isUser ? (\n                    <p className=\"text-sm\">{message.content}</p>\n                ) : (\n                    <div\n                        className=\"text-sm prose prose-sm max-w-none\"\n                        dangerouslySetInnerHTML={{ __html: formatContent(message.content) }}\n                    />\n                )}\n            </div>\n        </div>\n    );\n} "],"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","ignoreList":[]}