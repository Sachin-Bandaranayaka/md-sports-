{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/context/QueryProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\ninterface QueryProviderProps {\n  children: React.ReactNode;\n}\n\nexport function QueryProvider({ children }: QueryProviderProps) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // Stale time: how long data is considered fresh\n            staleTime: 1000 * 60 * 5, // 5 minutes\n            // Cache time: how long data stays in cache after component unmounts\n            gcTime: 1000 * 60 * 10, // 10 minutes\n            // Retry failed requests\n            retry: (failureCount, error: any) => {\n              // Don't retry on 4xx errors\n              if (error?.status >= 400 && error?.status < 500) {\n                return false;\n              }\n              // Retry up to 3 times for other errors\n              return failureCount < 3;\n            },\n            // Refetch on window focus for critical data\n            refetchOnWindowFocus: false,\n            // Refetch on reconnect\n            refetchOnReconnect: true,\n          },\n          mutations: {\n            // Retry failed mutations\n            retry: 1,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {process.env.NODE_ENV === 'development' && (\n        <ReactQueryDevtools initialIsOpen={false} />\n      )}\n    </QueryClientProvider>\n  );\n}\n\n// Query keys for consistent cache management\nexport const queryKeys = {\n  // Inventory\n  inventory: ['inventory'] as const,\n  inventoryList: (filters?: any) => ['inventory', 'list', filters] as const,\n  inventoryItem: (id: string) => ['inventory', 'item', id] as const,\n\n  // Products\n  products: ['products'] as const,\n  productsList: (filters?: any) => ['products', 'list', filters] as const,\n  product: (id: string) => ['products', 'item', id] as const,\n\n  // Suppliers\n  suppliers: ['suppliers'] as const,\n  suppliersList: (filters?: any) => ['suppliers', 'list', filters] as const,\n  supplier: (id: string) => ['suppliers', 'item', id] as const,\n\n  // Customers\n  customers: ['customers'] as const,\n  customersList: (filters?: any) => ['customers', 'list', filters] as const,\n  customer: (id: string) => ['customers', 'item', id] as const,\n\n  // Invoices\n  invoices: ['invoices'] as const,\n  invoicesList: (filters?: any) => ['invoices', 'list', filters] as const,\n  invoice: (id: string) => ['invoices', 'item', id] as const,\n\n  // Purchase Invoices\n  purchaseInvoices: ['purchase-invoices'] as const,\n  purchaseInvoicesList: (filters?: any) => ['purchase-invoices', 'list', filters] as const,\n  purchaseInvoice: (id: string) => ['purchase-invoices', 'item', id] as const,\n\n  // Categories\n  categories: ['categories'] as const,\n  categoriesList: (filters?: any) => ['categories', 'list', filters] as const,\n\n  // Shops\n  shops: ['shops'] as const,\n  shopsList: (filters?: any) => ['shops', 'list', filters] as const,\n  shop: (id: string) => ['shops', 'item', id] as const,\n\n  // Dashboard\n  dashboard: ['dashboard'] as const,\n  dashboardMetrics: ['dashboard', 'metrics'] as const,\n} as const;"],"names":["QueryProvider","queryKeys","children","queryClient","useState","QueryClient","defaultOptions","queries","staleTime","gcTime","retry","failureCount","error","status","refetchOnWindowFocus","refetchOnReconnect","mutations","QueryClientProvider","client","process","env","NODE_ENV","ReactQueryDevtools","initialIsOpen","inventory","inventoryList","filters","inventoryItem","id","products","productsList","product","suppliers","suppliersList","supplier","customers","customersList","customer","invoices","invoicesList","invoice","purchaseInvoices","purchaseInvoicesList","purchaseInvoice","categories","categoriesList","shops","shopsList","shop","dashboard","dashboardMetrics"],"mappings":"AAAA;;;;;;;;;;;;IAUgBA,aAAa;eAAbA;;IA2CHC,SAAS;eAATA;;;;+DAnDmB;4BACiB;oCACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM5B,SAASD,cAAc,EAAEE,QAAQ,EAAsB;IAC5D,MAAM,CAACC,YAAY,GAAGC,IAAAA,eAAQ,EAC5B,IACE,IAAIC,uBAAW,CAAC;YACdC,gBAAgB;gBACdC,SAAS;oBACP,gDAAgD;oBAChDC,WAAW,OAAO,KAAK;oBACvB,oEAAoE;oBACpEC,QAAQ,OAAO,KAAK;oBACpB,wBAAwB;oBACxBC,OAAO,CAACC,cAAcC;wBACpB,4BAA4B;wBAC5B,IAAIA,OAAOC,UAAU,OAAOD,OAAOC,SAAS,KAAK;4BAC/C,OAAO;wBACT;wBACA,uCAAuC;wBACvC,OAAOF,eAAe;oBACxB;oBACA,4CAA4C;oBAC5CG,sBAAsB;oBACtB,uBAAuB;oBACvBC,oBAAoB;gBACtB;gBACAC,WAAW;oBACT,yBAAyB;oBACzBN,OAAO;gBACT;YACF;QACF;IAGJ,qBACE,sBAACO,+BAAmB;QAACC,QAAQf;;YAC1BD;YACAiB,QAAQC,GAAG,CAACC,QAAQ,KAAK,+BACxB,qBAACC,sCAAkB;gBAACC,eAAe;;;;AAI3C;AAGO,MAAMtB,YAAY;IACvB,YAAY;IACZuB,WAAW;QAAC;KAAY;IACxBC,eAAe,CAACC,UAAkB;YAAC;YAAa;YAAQA;SAAQ;IAChEC,eAAe,CAACC,KAAe;YAAC;YAAa;YAAQA;SAAG;IAExD,WAAW;IACXC,UAAU;QAAC;KAAW;IACtBC,cAAc,CAACJ,UAAkB;YAAC;YAAY;YAAQA;SAAQ;IAC9DK,SAAS,CAACH,KAAe;YAAC;YAAY;YAAQA;SAAG;IAEjD,YAAY;IACZI,WAAW;QAAC;KAAY;IACxBC,eAAe,CAACP,UAAkB;YAAC;YAAa;YAAQA;SAAQ;IAChEQ,UAAU,CAACN,KAAe;YAAC;YAAa;YAAQA;SAAG;IAEnD,YAAY;IACZO,WAAW;QAAC;KAAY;IACxBC,eAAe,CAACV,UAAkB;YAAC;YAAa;YAAQA;SAAQ;IAChEW,UAAU,CAACT,KAAe;YAAC;YAAa;YAAQA;SAAG;IAEnD,WAAW;IACXU,UAAU;QAAC;KAAW;IACtBC,cAAc,CAACb,UAAkB;YAAC;YAAY;YAAQA;SAAQ;IAC9Dc,SAAS,CAACZ,KAAe;YAAC;YAAY;YAAQA;SAAG;IAEjD,oBAAoB;IACpBa,kBAAkB;QAAC;KAAoB;IACvCC,sBAAsB,CAAChB,UAAkB;YAAC;YAAqB;YAAQA;SAAQ;IAC/EiB,iBAAiB,CAACf,KAAe;YAAC;YAAqB;YAAQA;SAAG;IAElE,aAAa;IACbgB,YAAY;QAAC;KAAa;IAC1BC,gBAAgB,CAACnB,UAAkB;YAAC;YAAc;YAAQA;SAAQ;IAElE,QAAQ;IACRoB,OAAO;QAAC;KAAQ;IAChBC,WAAW,CAACrB,UAAkB;YAAC;YAAS;YAAQA;SAAQ;IACxDsB,MAAM,CAACpB,KAAe;YAAC;YAAS;YAAQA;SAAG;IAE3C,YAAY;IACZqB,WAAW;QAAC;KAAY;IACxBC,kBAAkB;QAAC;QAAa;KAAU;AAC5C"}