{"version":3,"names":["POST","req","params","cov_hg7xun5ii","f","permissionError","s","_middleware","requirePermission","b","userId","parseInt","id","isNaN","_server","NextResponse","json","success","message","status","newPassword","generateTemporaryPassword","hashedPassword","_bcryptjs","default","hash","updatedUser","_prisma","user","update","where","data","password","error","console","length","charset","Math","floor","random","i","split","sort","join"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/users/[id]/reset-password/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport bcrypt from 'bcryptjs';\nimport prisma from '@/lib/prisma';\n\n// POST: Reset user password\nexport async function POST(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        // Parse the ID as a number\n        const userId = parseInt(params.id);\n\n        if (isNaN(userId)) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid user ID' },\n                { status: 400 }\n            );\n        }\n\n        // Generate a new temporary password\n        const newPassword = generateTemporaryPassword();\n        const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n        // Update user password using Prisma\n        const updatedUser = await prisma.user.update({\n            where: { id: userId },\n            data: { password: hashedPassword }\n        });\n\n        if (!updatedUser) {\n            return NextResponse.json(\n                { success: false, message: 'User not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: 'Password reset successfully',\n            newPassword: newPassword // In production, this should be sent via email instead\n        });\n    } catch (error) {\n        console.error('Error resetting password:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to reset password' },\n            { status: 500 }\n        );\n    }\n}\n\n// Generate a temporary password\nfunction generateTemporaryPassword(): string {\n    const length = 12;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n\n    // Ensure at least one of each type\n    password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];\n    password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];\n    password += '0123456789'[Math.floor(Math.random() * 10)];\n    password += '!@#$%^&*'[Math.floor(Math.random() * 8)];\n\n    // Fill the rest randomly\n    for (let i = password.length; i < length; i++) {\n        password += charset[Math.floor(Math.random() * charset.length)];\n    }\n\n    // Shuffle the password\n    return password.split('').sort(() => Math.random() - 0.5).join('');\n}"],"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","ignoreList":[]}