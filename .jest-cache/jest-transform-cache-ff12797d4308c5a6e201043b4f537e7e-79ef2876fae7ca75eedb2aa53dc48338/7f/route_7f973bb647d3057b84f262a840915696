a68f7589ae7150f9b53c151f688efc3c
"use strict";

/* istanbul ignore next */
function cov_1vlzy1434f() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts";
  var hash = "b483cc8d34c85eef32d49b9c16d781b26bb0f718";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "9": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 49
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "12": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "13": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "15": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "18": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 81,
          column: 98
        }
      },
      "19": {
        start: {
          line: 52,
          column: 32
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "20": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "21": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 28
        }
      },
      "22": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "23": {
        start: {
          line: 72,
          column: 67
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "24": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "25": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "26": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "27": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 56
        }
      },
      "28": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "29": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "30": {
        start: {
          line: 104,
          column: 19
        },
        end: {
          line: 104,
          column: 38
        }
      },
      "31": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "32": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "33": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 113,
          column: 44
        }
      },
      "34": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 51
        }
      },
      "35": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "36": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "37": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "38": {
        start: {
          line: 130,
          column: 29
        },
        end: {
          line: 130,
          column: 31
        }
      },
      "39": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 81
        }
      },
      "40": {
        start: {
          line: 131,
          column: 44
        },
        end: {
          line: 131,
          column: 81
        }
      },
      "41": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 78
        }
      },
      "42": {
        start: {
          line: 132,
          column: 43
        },
        end: {
          line: 132,
          column: 78
        }
      },
      "43": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 98
        }
      },
      "44": {
        start: {
          line: 133,
          column: 47
        },
        end: {
          line: 133,
          column: 98
        }
      },
      "45": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 110
        }
      },
      "46": {
        start: {
          line: 134,
          column: 51
        },
        end: {
          line: 134,
          column: 110
        }
      },
      "47": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 106
        }
      },
      "48": {
        start: {
          line: 135,
          column: 49
        },
        end: {
          line: 135,
          column: 106
        }
      },
      "49": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 96
        }
      },
      "50": {
        start: {
          line: 136,
          column: 51
        },
        end: {
          line: 136,
          column: 96
        }
      },
      "51": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 141
        }
      },
      "52": {
        start: {
          line: 137,
          column: 50
        },
        end: {
          line: 137,
          column: 141
        }
      },
      "53": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "54": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 26
        }
      },
      "55": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "56": {
        start: {
          line: 148,
          column: 29
        },
        end: {
          line: 148,
          column: 32
        }
      },
      "57": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "58": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 153,
          column: 18
        }
      },
      "59": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "60": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "61": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "62": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 92
        }
      },
      "63": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 57
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 46
        }
      },
      "65": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "66": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "67": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 49
        }
      },
      "68": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 48
        }
      },
      "69": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "70": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 56
        }
      },
      "71": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "72": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 331,
          column: 5
        }
      },
      "73": {
        start: {
          line: 200,
          column: 19
        },
        end: {
          line: 200,
          column: 38
        }
      },
      "74": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "75": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "76": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "77": {
        start: {
          line: 211,
          column: 36
        },
        end: {
          line: 215,
          column: 14
        }
      },
      "78": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "79": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 222,
          column: 19
        }
      },
      "80": {
        start: {
          line: 225,
          column: 35
        },
        end: {
          line: 225,
          column: 37
        }
      },
      "81": {
        start: {
          line: 227,
          column: 46
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "82": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "83": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 93
        }
      },
      "84": {
        start: {
          line: 236,
          column: 43
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "85": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "86": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 87
        }
      },
      "87": {
        start: {
          line: 245,
          column: 40
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "88": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "89": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 80
        }
      },
      "90": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 266,
          column: 13
        }
      },
      "91": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 265,
          column: 19
        }
      },
      "92": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "93": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 274,
          column: 19
        }
      },
      "94": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 280,
          column: 19
        }
      },
      "95": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 71
        }
      },
      "96": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 61
        }
      },
      "97": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 50
        }
      },
      "98": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 51
        }
      },
      "99": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 55
        }
      },
      "100": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 53
        }
      },
      "101": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 52
        }
      },
      "102": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "103": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 319,
          column: 13
        }
      },
      "104": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 318,
          column: 17
        }
      },
      "105": {
        start: {
          line: 301,
          column: 43
        },
        end: {
          line: 301,
          column: 67
        }
      },
      "106": {
        start: {
          line: 303,
          column: 42
        },
        end: {
          line: 303,
          column: 77
        }
      },
      "107": {
        start: {
          line: 304,
          column: 20
        },
        end: {
          line: 310,
          column: 21
        }
      },
      "108": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 305,
          column: 89
        }
      },
      "109": {
        start: {
          line: 306,
          column: 27
        },
        end: {
          line: 310,
          column: 21
        }
      },
      "110": {
        start: {
          line: 307,
          column: 24
        },
        end: {
          line: 307,
          column: 86
        }
      },
      "111": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 310,
          column: 21
        }
      },
      "112": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 94
        }
      },
      "113": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 317,
          column: 23
        }
      },
      "114": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 24
        }
      },
      "115": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 56
        }
      },
      "116": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 330,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 33
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 28
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 18
          }
        },
        loc: {
          start: {
            line: 38,
            column: 36
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 50,
            column: 53
          },
          end: {
            line: 50,
            column: 54
          }
        },
        loc: {
          start: {
            line: 50,
            column: 63
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 50
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 72,
            column: 58
          },
          end: {
            line: 72,
            column: 59
          }
        },
        loc: {
          start: {
            line: 72,
            column: 67
          },
          end: {
            line: 79,
            column: 21
          }
        },
        line: 72
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 18
          }
        },
        loc: {
          start: {
            line: 102,
            column: 36
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 102
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 146,
            column: 42
          },
          end: {
            line: 146,
            column: 43
          }
        },
        loc: {
          start: {
            line: 146,
            column: 49
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 146
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 197,
            column: 15
          },
          end: {
            line: 197,
            column: 21
          }
        },
        loc: {
          start: {
            line: 197,
            column: 39
          },
          end: {
            line: 332,
            column: 1
          }
        },
        line: 197
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 47
          }
        },
        loc: {
          start: {
            line: 268,
            column: 58
          },
          end: {
            line: 281,
            column: 13
          }
        },
        line: 268
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 44
          },
          end: {
            line: 78,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 44
          },
          end: {
            line: 78,
            column: 65
          }
        }, {
          start: {
            line: 78,
            column: 69
          },
          end: {
            line: 78,
            column: 70
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "4": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "6": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 131,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 131,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "7": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 132,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 132,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 133,
            column: 98
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 133,
            column: 98
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 70
          },
          end: {
            line: 133,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 70
          },
          end: {
            line: 133,
            column: 89
          }
        }, {
          start: {
            line: 133,
            column: 93
          },
          end: {
            line: 133,
            column: 97
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 134,
            column: 110
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 134,
            column: 110
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 78
          },
          end: {
            line: 134,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 78
          },
          end: {
            line: 134,
            column: 101
          }
        }, {
          start: {
            line: 134,
            column: 105
          },
          end: {
            line: 134,
            column: 109
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 106
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 106
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 136,
            column: 96
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 136,
            column: 96
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "14": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 137,
            column: 141
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 137,
            column: 141
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 76
          },
          end: {
            line: 137,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 101
          },
          end: {
            line: 137,
            column: 133
          }
        }, {
          start: {
            line: 137,
            column: 136
          },
          end: {
            line: 137,
            column: 140
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 160,
            column: 32
          },
          end: {
            line: 160,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 41
          },
          end: {
            line: 160,
            column: 57
          }
        }, {
          start: {
            line: 160,
            column: 60
          },
          end: {
            line: 160,
            column: 64
          }
        }],
        line: 160
      },
      "19": {
        loc: {
          start: {
            line: 191,
            column: 19
          },
          end: {
            line: 191,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 44
          },
          end: {
            line: 191,
            column: 57
          }
        }, {
          start: {
            line: 191,
            column: 60
          },
          end: {
            line: 191,
            column: 73
          }
        }],
        line: 191
      },
      "20": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "23": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "24": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "25": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "26": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 319,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "27": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "28": {
        loc: {
          start: {
            line: 301,
            column: 43
          },
          end: {
            line: 301,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 43
          },
          end: {
            line: 301,
            column: 61
          }
        }, {
          start: {
            line: 301,
            column: 65
          },
          end: {
            line: 301,
            column: 67
          }
        }],
        line: 301
      },
      "29": {
        loc: {
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 310,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 310,
            column: 21
          }
        }, {
          start: {
            line: 306,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        }],
        line: 304
      },
      "30": {
        loc: {
          start: {
            line: 306,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        }, {
          start: {
            line: 308,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        }],
        line: 306
      },
      "31": {
        loc: {
          start: {
            line: 308,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 27
          },
          end: {
            line: 310,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "32": {
        loc: {
          start: {
            line: 327,
            column: 19
          },
          end: {
            line: 327,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 327,
            column: 44
          },
          end: {
            line: 327,
            column: 57
          }
        }, {
          start: {
            line: 327,
            column: 60
          },
          end: {
            line: 327,
            column: 73
          }
        }],
        line: 327
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nimport { cacheService } from '@/lib/cache';\n\n// Default fallback for a single product\nconst getDefaultProduct = (id: number) => ({\n    id,\n    name: 'Sample Product',\n    sku: `SKU-${id}`,\n    description: 'Product description not available',\n    price: 1000,\n    weightedAverageCost: 800,\n    category_name: 'General',\n    inventory: []\n});\n\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        const product = await safeQuery(\n            async () => {\n                // Get product with its category\n                const productData = await prisma.product.findUnique({\n                    where: { id },\n                    include: {\n                        category: true,\n                        inventoryItems: {\n                            include: {\n                                shop: true\n                            }\n                        }\n                    }\n                });\n\n                if (!productData) {\n                    return null;\n                }\n\n                // Format the product data\n                return {\n                    ...productData,\n                    category_name: productData.category?.name,\n                    inventory: productData.inventoryItems.map(item => ({\n                        id: item.id,\n                        quantity: item.quantity,\n                        shop_id: item.shopId,\n                        shop_name: item.shop.name,\n                        shop_location: item.shop.location,\n                        shop_specific_cost: item.shopSpecificCost || 0\n                    }))\n                };\n            },\n            getDefaultProduct(parseInt(params.id)),\n            `Failed to fetch product with ID ${params.id}`\n        );\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${params.id} not found`\n            }, { status: 404 });\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: product\n        });\n    } catch (error) {\n        console.error(`Error fetching product:`, error);\n        return NextResponse.json({\n            success: true,\n            data: getDefaultProduct(parseInt(params.id))\n        });\n    }\n}\n\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n        if (isNaN(id)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const productData = await req.json();\n        const userId = req.headers.get('x-user-id'); // Assuming you pass userId in headers\n\n        // Fetch existing product first to compare changes for audit log\n        const existingProduct = await prisma.product.findUnique({\n            where: { id }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json({ success: false, message: `Product with ID ${id} not found` }, { status: 404 });\n        }\n\n        // Prepare data for update, only including fields present in productData\n        const dataToUpdate: Prisma.ProductUpdateInput = {};\n        if (productData.name !== undefined) dataToUpdate.name = productData.name;\n        if (productData.sku !== undefined) dataToUpdate.sku = productData.sku;\n        if (productData.barcode !== undefined) dataToUpdate.barcode = productData.barcode || null;\n        if (productData.description !== undefined) dataToUpdate.description = productData.description || null;\n        if (productData.basePrice !== undefined) dataToUpdate.weightedAverageCost = productData.basePrice; // Assuming basePrice maps to WAC\n        if (productData.retailPrice !== undefined) dataToUpdate.price = productData.retailPrice;\n        if (productData.categoryId !== undefined) dataToUpdate.categoryId = productData.categoryId ? parseInt(productData.categoryId) : null;\n\n        const updatedProduct = await prisma.product.update({\n            where: { id },\n            data: dataToUpdate\n        });\n\n        // Audit Log Generation\n        const changes: Record<string, { old: any, new: any }> = {};\n        (Object.keys(dataToUpdate) as Array<keyof typeof dataToUpdate>).forEach(key => {\n            // Type assertion for existingProduct keys\n            const typedKey = key as keyof typeof existingProduct;\n            if (existingProduct[typedKey] !== updatedProduct[typedKey]) {\n                changes[typedKey] = {\n                    old: existingProduct[typedKey],\n                    new: updatedProduct[typedKey]\n                };\n            }\n        });\n\n        if (Object.keys(changes).length > 0) {\n            try {\n                await prisma.auditLog.create({\n                    data: {\n                        userId: userId ? parseInt(userId) : null,\n                        action: 'UPDATE_PRODUCT',\n                        entity: 'Product',\n                        entityId: id,\n                        details: changes\n                    }\n                });\n            } catch (auditError) {\n                console.error('Failed to create audit log for product update:', auditError);\n                // Do not fail the main operation if audit logging fails\n            }\n        }\n\n        // Invalidate inventory cache\n        await cacheService.invalidateInventory();\n\n        // Revalidate Next.js cached pages\n        revalidateTag('products');\n        revalidateTag('inventory');\n        revalidateTag(`product-${id}`);\n        revalidatePath('/inventory');\n        revalidatePath('/products');\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product updated successfully',\n            data: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        try {\n            // Check if product exists first\n            const existingProduct = await prisma.product.findUnique({\n                where: { id }\n            });\n\n            if (!existingProduct) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Product with ID ${id} not found`\n                }, { status: 404 });\n            }\n\n            // Check for related records that prevent deletion\n            const relatedRecords = [];\n            \n            // Check if product is referenced in purchase invoices\n            const purchaseInvoiceItemsCount = await prisma.purchaseInvoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (purchaseInvoiceItemsCount > 0) {\n                relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);\n            }\n\n            // Check if product is referenced in sales invoices\n            const salesInvoiceItemsCount = await prisma.invoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (salesInvoiceItemsCount > 0) {\n                relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);\n            }\n\n            // Check if product is referenced in quotations\n            const quotationItemsCount = await prisma.quotationItem.count({\n                where: { productId: id }\n            });\n            \n            if (quotationItemsCount > 0) {\n                relatedRecords.push(`${quotationItemsCount} quotation item(s)`);\n            }\n\n            // If any related records exist, prevent deletion\n            if (relatedRecords.length > 0) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Cannot delete product \"${existingProduct.name}\" because it is referenced in: ${relatedRecords.join(', ')}. Please remove these references first.`,\n                    relatedRecords: {\n                        purchaseInvoiceItems: purchaseInvoiceItemsCount,\n                        salesInvoiceItems: salesInvoiceItemsCount,\n                        quotationItems: quotationItemsCount\n                    }\n                }, { status: 409 });\n            }\n\n            // Use a transaction to delete inventory items and then the product\n            await prisma.$transaction(async (tx) => {\n                // Delete all inventory items associated with this product\n                await tx.inventoryItem.deleteMany({\n                    where: { productId: id }\n                });\n\n                // Then, delete the product itself\n                await tx.product.delete({\n                    where: { id }\n                });\n            });\n\n            // Invalidate product cache\n            await cacheService.invalidatePattern('products:*');\n            await cacheService.invalidateInventory();\n\n            // Revalidate Next.js cached pages\n            revalidateTag('products');\n            revalidateTag('inventory');\n            revalidateTag(`product-${id}`);\n            revalidatePath('/inventory');\n            revalidatePath('/products');\n\n            // Real-time updates now handled by polling system\n\n            return NextResponse.json({\n                success: true,\n                message: 'Product deleted successfully'\n            });\n        } catch (error) {\n            // Handle foreign key constraint violations\n            if (error instanceof Prisma.PrismaClientKnownRequestError) {\n                if (error.code === 'P2003') {\n                    // Foreign key constraint violation\n                    const constraintName = error.meta?.target as string || '';\n\n                    // Determine which relation is causing the constraint violation\n                    let relationMessage = 'it is referenced in other records';\n\n                    if (constraintName.includes('PurchaseInvoiceItem')) {\n                        relationMessage = 'it is referenced in purchase invoice records';\n                    } else if (constraintName.includes('SalesInvoiceItem')) {\n                        relationMessage = 'it is referenced in sales invoice records';\n                    } else if (constraintName.includes('InventoryTransaction')) {\n                        relationMessage = 'it is referenced in inventory transaction records';\n                    }\n\n                    return NextResponse.json({\n                        success: false,\n                        message: `Cannot delete this product because ${relationMessage}.`,\n                        error: 'FOREIGN_KEY_CONSTRAINT'\n                    }, { status: 409 });\n                }\n            }\n\n            throw error; // Re-throw for the outer catch block\n        }\n    } catch (error) {\n        console.error(`Error deleting product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "getDefaultProduct", "id", "name", "sku", "description", "price", "weightedAverageCost", "category_name", "inventory", "req", "params", "parseInt", "isNaN", "NextResponse", "json", "success", "message", "status", "product", "safeQuery", "productData", "prisma", "findUnique", "where", "include", "category", "inventoryItems", "shop", "map", "item", "quantity", "shop_id", "shopId", "shop_name", "shop_location", "location", "shop_specific_cost", "shopSpecificCost", "data", "error", "console", "userId", "headers", "get", "existingProduct", "dataToUpdate", "undefined", "barcode", "basePrice", "retailPrice", "categoryId", "updatedProduct", "update", "changes", "Object", "keys", "forEach", "key", "typedKey", "old", "new", "length", "auditLog", "create", "action", "entity", "entityId", "details", "auditError", "cacheService", "invalidateInventory", "revalidateTag", "revalidatePath", "Error", "String", "relatedRecords", "purchaseInvoiceItemsCount", "purchaseInvoiceItem", "count", "productId", "push", "salesInvoiceItemsCount", "invoiceItem", "quotationItemsCount", "quotationItem", "join", "purchaseInvoiceItems", "salesInvoiceItems", "quotationItems", "$transaction", "tx", "inventoryItem", "deleteMany", "delete", "invalidatePattern", "Prisma", "PrismaClientKnownRequestError", "code", "constraintName", "meta", "target", "relationMessage", "includes"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b483cc8d34c85eef32d49b9c16d781b26bb0f718"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vlzy1434f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vlzy1434f();
cov_1vlzy1434f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[0]++;
  cov_1vlzy1434f().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1vlzy1434f().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[1]++;
    cov_1vlzy1434f().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[2]++;
    cov_1vlzy1434f().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_1vlzy1434f().f[3]++;
    cov_1vlzy1434f().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1vlzy1434f().s[7]++, require("next/server"));
const _cache =
/* istanbul ignore next */
(cov_1vlzy1434f().s[8]++, require("next/cache"));
const _prisma =
/* istanbul ignore next */
(cov_1vlzy1434f().s[9]++, require("../../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_1vlzy1434f().s[10]++, require("@prisma/client"));
const _cache1 =
/* istanbul ignore next */
(cov_1vlzy1434f().s[11]++, require("../../../../lib/cache"));
// Default fallback for a single product
/* istanbul ignore next */
cov_1vlzy1434f().s[12]++;
const getDefaultProduct = id => {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[4]++;
  cov_1vlzy1434f().s[13]++;
  return {
    id,
    name: "Sample Product",
    sku: `SKU-${id}`,
    description: "Product description not available",
    price: 1000,
    weightedAverageCost: 800,
    category_name: "General",
    inventory: []
  };
};
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[5]++;
  cov_1vlzy1434f().s[14]++;
  try {
    // Ensure params.id is properly awaited in Next.js 14+
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[15]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[16]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[0][0]++;
      cov_1vlzy1434f().s[17]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[0][1]++;
    }
    const product =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[18]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_1vlzy1434f().f[6]++;
      // Get product with its category
      const productData =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[19]++, await _prisma.prisma.product.findUnique({
        where: {
          id
        },
        include: {
          category: true,
          inventoryItems: {
            include: {
              shop: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[20]++;
      if (!productData) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[1][0]++;
        cov_1vlzy1434f().s[21]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[1][1]++;
      }
      // Format the product data
      cov_1vlzy1434f().s[22]++;
      return {
        ...productData,
        category_name: productData.category?.name,
        inventory: productData.inventoryItems.map(item => {
          /* istanbul ignore next */
          cov_1vlzy1434f().f[7]++;
          cov_1vlzy1434f().s[23]++;
          return {
            id: item.id,
            quantity: item.quantity,
            shop_id: item.shopId,
            shop_name: item.shop.name,
            shop_location: item.shop.location,
            shop_specific_cost:
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[2][0]++, item.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[2][1]++, 0)
          };
        })
      };
    }, getDefaultProduct(parseInt(params.id)), `Failed to fetch product with ID ${params.id}`));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[24]++;
    if (!product) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[3][0]++;
      cov_1vlzy1434f().s[25]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${params.id} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[3][1]++;
    }
    cov_1vlzy1434f().s[26]++;
    return _server.NextResponse.json({
      success: true,
      data: product
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[27]++;
    console.error(`Error fetching product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[28]++;
    return _server.NextResponse.json({
      success: true,
      data: getDefaultProduct(parseInt(params.id))
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[8]++;
  cov_1vlzy1434f().s[29]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[30]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[31]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[4][0]++;
      cov_1vlzy1434f().s[32]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[4][1]++;
    }
    const productData =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[33]++, await req.json());
    const userId =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[34]++, req.headers.get("x-user-id")); // Assuming you pass userId in headers
    // Fetch existing product first to compare changes for audit log
    const existingProduct =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[35]++, await _prisma.prisma.product.findUnique({
      where: {
        id
      }
    }));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[36]++;
    if (!existingProduct) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[5][0]++;
      cov_1vlzy1434f().s[37]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${id} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[5][1]++;
    }
    // Prepare data for update, only including fields present in productData
    const dataToUpdate =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[38]++, {});
    /* istanbul ignore next */
    cov_1vlzy1434f().s[39]++;
    if (productData.name !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[6][0]++;
      cov_1vlzy1434f().s[40]++;
      dataToUpdate.name = productData.name;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[6][1]++;
    }
    cov_1vlzy1434f().s[41]++;
    if (productData.sku !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[7][0]++;
      cov_1vlzy1434f().s[42]++;
      dataToUpdate.sku = productData.sku;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[7][1]++;
    }
    cov_1vlzy1434f().s[43]++;
    if (productData.barcode !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[8][0]++;
      cov_1vlzy1434f().s[44]++;
      dataToUpdate.barcode =
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[9][0]++, productData.barcode) ||
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[9][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[8][1]++;
    }
    cov_1vlzy1434f().s[45]++;
    if (productData.description !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[10][0]++;
      cov_1vlzy1434f().s[46]++;
      dataToUpdate.description =
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[11][0]++, productData.description) ||
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[11][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[10][1]++;
    }
    cov_1vlzy1434f().s[47]++;
    if (productData.basePrice !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[12][0]++;
      cov_1vlzy1434f().s[48]++;
      dataToUpdate.weightedAverageCost = productData.basePrice;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[12][1]++;
    } // Assuming basePrice maps to WAC
    cov_1vlzy1434f().s[49]++;
    if (productData.retailPrice !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[13][0]++;
      cov_1vlzy1434f().s[50]++;
      dataToUpdate.price = productData.retailPrice;
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[13][1]++;
    }
    cov_1vlzy1434f().s[51]++;
    if (productData.categoryId !== undefined) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[14][0]++;
      cov_1vlzy1434f().s[52]++;
      dataToUpdate.categoryId = productData.categoryId ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[15][0]++, parseInt(productData.categoryId)) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[15][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[14][1]++;
    }
    const updatedProduct =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[53]++, await _prisma.prisma.product.update({
      where: {
        id
      },
      data: dataToUpdate
    }));
    // Audit Log Generation
    const changes =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[54]++, {});
    /* istanbul ignore next */
    cov_1vlzy1434f().s[55]++;
    Object.keys(dataToUpdate).forEach(key => {
      /* istanbul ignore next */
      cov_1vlzy1434f().f[9]++;
      // Type assertion for existingProduct keys
      const typedKey =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[56]++, key);
      /* istanbul ignore next */
      cov_1vlzy1434f().s[57]++;
      if (existingProduct[typedKey] !== updatedProduct[typedKey]) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[16][0]++;
        cov_1vlzy1434f().s[58]++;
        changes[typedKey] = {
          old: existingProduct[typedKey],
          new: updatedProduct[typedKey]
        };
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[16][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1vlzy1434f().s[59]++;
    if (Object.keys(changes).length > 0) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[17][0]++;
      cov_1vlzy1434f().s[60]++;
      try {
        /* istanbul ignore next */
        cov_1vlzy1434f().s[61]++;
        await _prisma.prisma.auditLog.create({
          data: {
            userId: userId ?
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[18][0]++, parseInt(userId)) :
            /* istanbul ignore next */
            (cov_1vlzy1434f().b[18][1]++, null),
            action: "UPDATE_PRODUCT",
            entity: "Product",
            entityId: id,
            details: changes
          }
        });
      } catch (auditError) {
        /* istanbul ignore next */
        cov_1vlzy1434f().s[62]++;
        console.error("Failed to create audit log for product update:", auditError);
        // Do not fail the main operation if audit logging fails
      }
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[17][1]++;
    }
    // Invalidate inventory cache
    cov_1vlzy1434f().s[63]++;
    await _cache1.cacheService.invalidateInventory();
    // Revalidate Next.js cached pages
    /* istanbul ignore next */
    cov_1vlzy1434f().s[64]++;
    (0, _cache.revalidateTag)("products");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[65]++;
    (0, _cache.revalidateTag)("inventory");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[66]++;
    (0, _cache.revalidateTag)(`product-${id}`);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[67]++;
    (0, _cache.revalidatePath)("/inventory");
    /* istanbul ignore next */
    cov_1vlzy1434f().s[68]++;
    (0, _cache.revalidatePath)("/products");
    // Real-time updates now handled by polling system
    /* istanbul ignore next */
    cov_1vlzy1434f().s[69]++;
    return _server.NextResponse.json({
      success: true,
      message: "Product updated successfully",
      data: updatedProduct
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[70]++;
    console.error(`Error updating product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[71]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error updating product",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[19][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_1vlzy1434f().f[10]++;
  cov_1vlzy1434f().s[72]++;
  try {
    // Ensure params.id is properly awaited in Next.js 14+
    const id =
    /* istanbul ignore next */
    (cov_1vlzy1434f().s[73]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_1vlzy1434f().s[74]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1vlzy1434f().b[20][0]++;
      cov_1vlzy1434f().s[75]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid product ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vlzy1434f().b[20][1]++;
    }
    cov_1vlzy1434f().s[76]++;
    try {
      // Check if product exists first
      const existingProduct =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[77]++, await _prisma.prisma.product.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[78]++;
      if (!existingProduct) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[21][0]++;
        cov_1vlzy1434f().s[79]++;
        return _server.NextResponse.json({
          success: false,
          message: `Product with ID ${id} not found`
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[21][1]++;
      }
      // Check for related records that prevent deletion
      const relatedRecords =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[80]++, []);
      // Check if product is referenced in purchase invoices
      const purchaseInvoiceItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[81]++, await _prisma.prisma.purchaseInvoiceItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[82]++;
      if (purchaseInvoiceItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[22][0]++;
        cov_1vlzy1434f().s[83]++;
        relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[22][1]++;
      }
      // Check if product is referenced in sales invoices
      const salesInvoiceItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[84]++, await _prisma.prisma.invoiceItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[85]++;
      if (salesInvoiceItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[23][0]++;
        cov_1vlzy1434f().s[86]++;
        relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[23][1]++;
      }
      // Check if product is referenced in quotations
      const quotationItemsCount =
      /* istanbul ignore next */
      (cov_1vlzy1434f().s[87]++, await _prisma.prisma.quotationItem.count({
        where: {
          productId: id
        }
      }));
      /* istanbul ignore next */
      cov_1vlzy1434f().s[88]++;
      if (quotationItemsCount > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[24][0]++;
        cov_1vlzy1434f().s[89]++;
        relatedRecords.push(`${quotationItemsCount} quotation item(s)`);
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[24][1]++;
      }
      // If any related records exist, prevent deletion
      cov_1vlzy1434f().s[90]++;
      if (relatedRecords.length > 0) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[25][0]++;
        cov_1vlzy1434f().s[91]++;
        return _server.NextResponse.json({
          success: false,
          message: `Cannot delete product "${existingProduct.name}" because it is referenced in: ${relatedRecords.join(", ")}. Please remove these references first.`,
          relatedRecords: {
            purchaseInvoiceItems: purchaseInvoiceItemsCount,
            salesInvoiceItems: salesInvoiceItemsCount,
            quotationItems: quotationItemsCount
          }
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[25][1]++;
      }
      // Use a transaction to delete inventory items and then the product
      cov_1vlzy1434f().s[92]++;
      await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_1vlzy1434f().f[11]++;
        cov_1vlzy1434f().s[93]++;
        // Delete all inventory items associated with this product
        await tx.inventoryItem.deleteMany({
          where: {
            productId: id
          }
        });
        // Then, delete the product itself
        /* istanbul ignore next */
        cov_1vlzy1434f().s[94]++;
        await tx.product.delete({
          where: {
            id
          }
        });
      });
      // Invalidate product cache
      /* istanbul ignore next */
      cov_1vlzy1434f().s[95]++;
      await _cache1.cacheService.invalidatePattern("products:*");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[96]++;
      await _cache1.cacheService.invalidateInventory();
      // Revalidate Next.js cached pages
      /* istanbul ignore next */
      cov_1vlzy1434f().s[97]++;
      (0, _cache.revalidateTag)("products");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[98]++;
      (0, _cache.revalidateTag)("inventory");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[99]++;
      (0, _cache.revalidateTag)(`product-${id}`);
      /* istanbul ignore next */
      cov_1vlzy1434f().s[100]++;
      (0, _cache.revalidatePath)("/inventory");
      /* istanbul ignore next */
      cov_1vlzy1434f().s[101]++;
      (0, _cache.revalidatePath)("/products");
      // Real-time updates now handled by polling system
      /* istanbul ignore next */
      cov_1vlzy1434f().s[102]++;
      return _server.NextResponse.json({
        success: true,
        message: "Product deleted successfully"
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1vlzy1434f().s[103]++;
      // Handle foreign key constraint violations
      if (error instanceof _client.Prisma.PrismaClientKnownRequestError) {
        /* istanbul ignore next */
        cov_1vlzy1434f().b[26][0]++;
        cov_1vlzy1434f().s[104]++;
        if (error.code === "P2003") {
          /* istanbul ignore next */
          cov_1vlzy1434f().b[27][0]++;
          // Foreign key constraint violation
          const constraintName =
          /* istanbul ignore next */
          (cov_1vlzy1434f().s[105]++,
          /* istanbul ignore next */
          (cov_1vlzy1434f().b[28][0]++, error.meta?.target) ||
          /* istanbul ignore next */
          (cov_1vlzy1434f().b[28][1]++, ""));
          // Determine which relation is causing the constraint violation
          let relationMessage =
          /* istanbul ignore next */
          (cov_1vlzy1434f().s[106]++, "it is referenced in other records");
          /* istanbul ignore next */
          cov_1vlzy1434f().s[107]++;
          if (constraintName.includes("PurchaseInvoiceItem")) {
            /* istanbul ignore next */
            cov_1vlzy1434f().b[29][0]++;
            cov_1vlzy1434f().s[108]++;
            relationMessage = "it is referenced in purchase invoice records";
          } else {
            /* istanbul ignore next */
            cov_1vlzy1434f().b[29][1]++;
            cov_1vlzy1434f().s[109]++;
            if (constraintName.includes("SalesInvoiceItem")) {
              /* istanbul ignore next */
              cov_1vlzy1434f().b[30][0]++;
              cov_1vlzy1434f().s[110]++;
              relationMessage = "it is referenced in sales invoice records";
            } else {
              /* istanbul ignore next */
              cov_1vlzy1434f().b[30][1]++;
              cov_1vlzy1434f().s[111]++;
              if (constraintName.includes("InventoryTransaction")) {
                /* istanbul ignore next */
                cov_1vlzy1434f().b[31][0]++;
                cov_1vlzy1434f().s[112]++;
                relationMessage = "it is referenced in inventory transaction records";
              } else
              /* istanbul ignore next */
              {
                cov_1vlzy1434f().b[31][1]++;
              }
            }
          }
          /* istanbul ignore next */
          cov_1vlzy1434f().s[113]++;
          return _server.NextResponse.json({
            success: false,
            message: `Cannot delete this product because ${relationMessage}.`,
            error: "FOREIGN_KEY_CONSTRAINT"
          }, {
            status: 409
          });
        } else
        /* istanbul ignore next */
        {
          cov_1vlzy1434f().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1vlzy1434f().b[26][1]++;
      }
      cov_1vlzy1434f().s[114]++;
      throw error; // Re-throw for the outer catch block
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1vlzy1434f().s[115]++;
    console.error(`Error deleting product:`, error);
    /* istanbul ignore next */
    cov_1vlzy1434f().s[116]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error deleting product",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[32][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vlzy1434f().b[32][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,