{"version":3,"names":["DELETE","cov_1vlzy1434f","f","s","GET","PUT","getDefaultProduct","id","name","sku","description","price","weightedAverageCost","category_name","inventory","req","params","parseInt","isNaN","b","_server","NextResponse","json","success","message","status","product","_prisma","safeQuery","productData","prisma","findUnique","where","include","category","inventoryItems","shop","map","item","quantity","shop_id","shopId","shop_name","shop_location","location","shop_specific_cost","shopSpecificCost","data","error","console","userId","headers","get","existingProduct","dataToUpdate","undefined","barcode","basePrice","retailPrice","categoryId","updatedProduct","update","changes","Object","keys","forEach","key","typedKey","old","new","length","auditLog","create","action","entity","entityId","details","auditError","_cache1","cacheService","invalidateInventory","_cache","revalidateTag","revalidatePath","Error","String","relatedRecords","purchaseInvoiceItemsCount","purchaseInvoiceItem","count","productId","push","salesInvoiceItemsCount","invoiceItem","quotationItemsCount","quotationItem","join","purchaseInvoiceItems","salesInvoiceItems","quotationItems","$transaction","tx","inventoryItem","deleteMany","delete","invalidatePattern","_client","Prisma","PrismaClientKnownRequestError","code","constraintName","meta","target","relationMessage","includes"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/products/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nimport { cacheService } from '@/lib/cache';\n\n// Default fallback for a single product\nconst getDefaultProduct = (id: number) => ({\n    id,\n    name: 'Sample Product',\n    sku: `SKU-${id}`,\n    description: 'Product description not available',\n    price: 1000,\n    weightedAverageCost: 800,\n    category_name: 'General',\n    inventory: []\n});\n\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        const product = await safeQuery(\n            async () => {\n                // Get product with its category\n                const productData = await prisma.product.findUnique({\n                    where: { id },\n                    include: {\n                        category: true,\n                        inventoryItems: {\n                            include: {\n                                shop: true\n                            }\n                        }\n                    }\n                });\n\n                if (!productData) {\n                    return null;\n                }\n\n                // Format the product data\n                return {\n                    ...productData,\n                    category_name: productData.category?.name,\n                    inventory: productData.inventoryItems.map(item => ({\n                        id: item.id,\n                        quantity: item.quantity,\n                        shop_id: item.shopId,\n                        shop_name: item.shop.name,\n                        shop_location: item.shop.location,\n                        shop_specific_cost: item.shopSpecificCost || 0\n                    }))\n                };\n            },\n            getDefaultProduct(parseInt(params.id)),\n            `Failed to fetch product with ID ${params.id}`\n        );\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${params.id} not found`\n            }, { status: 404 });\n        }\n\n        return NextResponse.json({\n            success: true,\n            data: product\n        });\n    } catch (error) {\n        console.error(`Error fetching product:`, error);\n        return NextResponse.json({\n            success: true,\n            data: getDefaultProduct(parseInt(params.id))\n        });\n    }\n}\n\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n        if (isNaN(id)) {\n            return NextResponse.json({ success: false, message: 'Invalid product ID' }, { status: 400 });\n        }\n\n        const productData = await req.json();\n        const userId = req.headers.get('x-user-id'); // Assuming you pass userId in headers\n\n        // Fetch existing product first to compare changes for audit log\n        const existingProduct = await prisma.product.findUnique({\n            where: { id }\n        });\n\n        if (!existingProduct) {\n            return NextResponse.json({ success: false, message: `Product with ID ${id} not found` }, { status: 404 });\n        }\n\n        // Prepare data for update, only including fields present in productData\n        const dataToUpdate: Prisma.ProductUpdateInput = {};\n        if (productData.name !== undefined) dataToUpdate.name = productData.name;\n        if (productData.sku !== undefined) dataToUpdate.sku = productData.sku;\n        if (productData.barcode !== undefined) dataToUpdate.barcode = productData.barcode || null;\n        if (productData.description !== undefined) dataToUpdate.description = productData.description || null;\n        if (productData.basePrice !== undefined) dataToUpdate.weightedAverageCost = productData.basePrice; // Assuming basePrice maps to WAC\n        if (productData.retailPrice !== undefined) dataToUpdate.price = productData.retailPrice;\n        if (productData.categoryId !== undefined) dataToUpdate.categoryId = productData.categoryId ? parseInt(productData.categoryId) : null;\n\n        const updatedProduct = await prisma.product.update({\n            where: { id },\n            data: dataToUpdate\n        });\n\n        // Audit Log Generation\n        const changes: Record<string, { old: any, new: any }> = {};\n        (Object.keys(dataToUpdate) as Array<keyof typeof dataToUpdate>).forEach(key => {\n            // Type assertion for existingProduct keys\n            const typedKey = key as keyof typeof existingProduct;\n            if (existingProduct[typedKey] !== updatedProduct[typedKey]) {\n                changes[typedKey] = {\n                    old: existingProduct[typedKey],\n                    new: updatedProduct[typedKey]\n                };\n            }\n        });\n\n        if (Object.keys(changes).length > 0) {\n            try {\n                await prisma.auditLog.create({\n                    data: {\n                        userId: userId ? parseInt(userId) : null,\n                        action: 'UPDATE_PRODUCT',\n                        entity: 'Product',\n                        entityId: id,\n                        details: changes\n                    }\n                });\n            } catch (auditError) {\n                console.error('Failed to create audit log for product update:', auditError);\n                // Do not fail the main operation if audit logging fails\n            }\n        }\n\n        // Invalidate inventory cache\n        await cacheService.invalidateInventory();\n\n        // Revalidate Next.js cached pages\n        revalidateTag('products');\n        revalidateTag('inventory');\n        revalidateTag(`product-${id}`);\n        revalidatePath('/inventory');\n        revalidatePath('/products');\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Product updated successfully',\n            data: updatedProduct\n        });\n    } catch (error) {\n        console.error(`Error updating product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error updating product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    try {\n        // Ensure params.id is properly awaited in Next.js 14+\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid product ID'\n            }, { status: 400 });\n        }\n\n        try {\n            // Check if product exists first\n            const existingProduct = await prisma.product.findUnique({\n                where: { id }\n            });\n\n            if (!existingProduct) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Product with ID ${id} not found`\n                }, { status: 404 });\n            }\n\n            // Check for related records that prevent deletion\n            const relatedRecords = [];\n            \n            // Check if product is referenced in purchase invoices\n            const purchaseInvoiceItemsCount = await prisma.purchaseInvoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (purchaseInvoiceItemsCount > 0) {\n                relatedRecords.push(`${purchaseInvoiceItemsCount} purchase invoice item(s)`);\n            }\n\n            // Check if product is referenced in sales invoices\n            const salesInvoiceItemsCount = await prisma.invoiceItem.count({\n                where: { productId: id }\n            });\n            \n            if (salesInvoiceItemsCount > 0) {\n                relatedRecords.push(`${salesInvoiceItemsCount} sales invoice item(s)`);\n            }\n\n            // Check if product is referenced in quotations\n            const quotationItemsCount = await prisma.quotationItem.count({\n                where: { productId: id }\n            });\n            \n            if (quotationItemsCount > 0) {\n                relatedRecords.push(`${quotationItemsCount} quotation item(s)`);\n            }\n\n            // If any related records exist, prevent deletion\n            if (relatedRecords.length > 0) {\n                return NextResponse.json({\n                    success: false,\n                    message: `Cannot delete product \"${existingProduct.name}\" because it is referenced in: ${relatedRecords.join(', ')}. Please remove these references first.`,\n                    relatedRecords: {\n                        purchaseInvoiceItems: purchaseInvoiceItemsCount,\n                        salesInvoiceItems: salesInvoiceItemsCount,\n                        quotationItems: quotationItemsCount\n                    }\n                }, { status: 409 });\n            }\n\n            // Use a transaction to delete inventory items and then the product\n            await prisma.$transaction(async (tx) => {\n                // Delete all inventory items associated with this product\n                await tx.inventoryItem.deleteMany({\n                    where: { productId: id }\n                });\n\n                // Then, delete the product itself\n                await tx.product.delete({\n                    where: { id }\n                });\n            });\n\n            // Invalidate product cache\n            await cacheService.invalidatePattern('products:*');\n            await cacheService.invalidateInventory();\n\n            // Revalidate Next.js cached pages\n            revalidateTag('products');\n            revalidateTag('inventory');\n            revalidateTag(`product-${id}`);\n            revalidatePath('/inventory');\n            revalidatePath('/products');\n\n            // Real-time updates now handled by polling system\n\n            return NextResponse.json({\n                success: true,\n                message: 'Product deleted successfully'\n            });\n        } catch (error) {\n            // Handle foreign key constraint violations\n            if (error instanceof Prisma.PrismaClientKnownRequestError) {\n                if (error.code === 'P2003') {\n                    // Foreign key constraint violation\n                    const constraintName = error.meta?.target as string || '';\n\n                    // Determine which relation is causing the constraint violation\n                    let relationMessage = 'it is referenced in other records';\n\n                    if (constraintName.includes('PurchaseInvoiceItem')) {\n                        relationMessage = 'it is referenced in purchase invoice records';\n                    } else if (constraintName.includes('SalesInvoiceItem')) {\n                        relationMessage = 'it is referenced in sales invoice records';\n                    } else if (constraintName.includes('InventoryTransaction')) {\n                        relationMessage = 'it is referenced in inventory transaction records';\n                    }\n\n                    return NextResponse.json({\n                        success: false,\n                        message: `Cannot delete this product because ${relationMessage}.`,\n                        error: 'FOREIGN_KEY_CONSTRAINT'\n                    }, { status: 409 });\n                }\n            }\n\n            throw error; // Re-throw for the outer catch block\n        }\n    } catch (error) {\n        console.error(`Error deleting product:`, error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error deleting product',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}