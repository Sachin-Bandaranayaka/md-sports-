{"version":3,"names":["GET","cov_vn4mgc0gq","f","s","POST","req","permissionError","_middleware","requirePermission","b","users","_prisma","default","user","findMany","select","id","name","email","phone","isActive","roleId","shopId","roleName","permissions","createdAt","updatedAt","role","shop","_server","NextResponse","json","success","error","console","message","status","userData","log","password","length","shopExists","findUnique","where","hashedPassword","_bcryptjs","hash","includes","adminRole","shopStaffRole","userData_final","create","data"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport bcrypt from 'bcryptjs';\n\n// GET: List all users\nexport async function GET(req: NextRequest) {\n    // Check for 'user:manage' permission\n    const permissionError = await requirePermission('user:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                phone: true,\n                isActive: true,\n                roleId: true,\n                shopId: true,\n                roleName: true,\n                permissions: true,\n                createdAt: true,\n                updatedAt: true,\n                role: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                },\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        return NextResponse.json({\n            success: true,\n            users\n        });\n    } catch (error) {\n        console.error('Error fetching users:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch users' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create a new user\nexport async function POST(req: NextRequest) {\n    // Temporarily bypass permission check for adding users\n    // const permissionError = await requirePermission('user:manage')(req);\n    // if (permissionError) {\n    //     return permissionError;\n    // }\n\n    try {\n        const userData = await req.json();\n\n        console.log('Received user data:', userData); // Log the incoming data\n\n        // Validation examples\n        if (!userData.name) {\n            return NextResponse.json(\n                { success: false, message: 'Name is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.email) {\n            return NextResponse.json(\n                { success: false, message: 'Email is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.password || userData.password.length < 8) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 8 characters' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.shop || userData.shop === '' || userData.shop === 'undefined') {\n            return NextResponse.json(\n                { success: false, message: 'Shop assignment is required' },\n                { status: 400 }\n            );\n        }\n\n        if (!userData.permissions || userData.permissions.length === 0) {\n            return NextResponse.json(\n                { success: false, message: 'At least one permission is required' },\n                { status: 400 }\n            );\n        }\n\n        // Validate shop ID (keep as string since it's a cuid)\n        const shopId = userData.shop;\n        \n        // Verify the shop exists in the database\n        const shopExists = await prisma.shop.findUnique({\n            where: { id: shopId }\n        });\n        \n        if (!shopExists) {\n            return NextResponse.json(\n                { success: false, message: 'Invalid shop ID provided - shop does not exist' },\n                { status: 400 }\n            );\n        }\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(userData.password, 12);\n\n        // Determine role based on permissions\n        let roleId = null;\n        let roleName = null;\n        \n        // Check if user has admin permissions\n        if (userData.permissions.includes('admin:all')) {\n            const adminRole = await prisma.role.findUnique({\n                where: { name: 'Admin' }\n            });\n            if (adminRole) {\n                roleId = adminRole.id;\n                roleName = 'Admin';\n            }\n        }\n        // Check if user has shop staff permissions\n        else if (userData.permissions.includes('shop:assigned_only')) {\n            const shopStaffRole = await prisma.role.findUnique({\n                where: { name: 'Shop Staff' }\n            });\n            if (shopStaffRole) {\n                roleId = shopStaffRole.id;\n                roleName = 'Shop Staff';\n            }\n        }\n\n        // Prepare user data\n        const userData_final = {\n            name: userData.name,\n            email: userData.email,\n            password: hashedPassword,\n            roleId: roleId,\n            roleName: roleName,\n            shopId: shopId,\n            permissions: userData.permissions || [],\n            isActive: true\n        };\n\n        console.log('Final user data to be saved:', userData_final); // Log the final data\n\n        // Create the user\n        const user = await prisma.user.create({\n            data: userData_final,\n            select: {\n                id: true,\n                name: true,\n                email: true,\n                shopId: true,\n                permissions: true,\n                createdAt: true,\n                shop: {\n                    select: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n\n        // Return success response\n        return NextResponse.json({\n            success: true,\n            message: 'User created successfully',\n            data: user\n        });\n    } catch (error) {\n        console.error('Error creating user:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to create user' },\n            { status: 500 }\n        );\n    }\n}"],"mappingssBA,GAAG,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAHH,GAAA;;EAkDAI,IAAI,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAJC,IAAA;;;;;iCAxDoB;;;uEACvB;;;iCACe;;;uEACf;;;;;;;;;;;;;;;AAGZ,eAAeJ,IAAIK,GAAgB;EAAA;EAAAJ,aAAA,GAAAC,CAAA;EACtC;EACA,MAAMI,eAAA;EAAA;EAAA,CAAAL,aAAA,GAAAE,CAAA,QAAkB,MAAM,IAAAI,WAAA,CAAAC,iBAAiB,EAAC,eAAeH,GAAA;EAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC/D,IAAIG,eAAA,EAAiB;IAAA;IAAAL,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAE,CAAA;IACjB,OAAOG,eAAA;EACX;EAAA;EAAA;IAAAL,aAAA,GAAAQ,CAAA;EAAA;EAAAR,aAAA,GAAAE,CAAA;EAEA,IAAI;IACA,MAAMO,KAAA;IAAA;IAAA,CAAAT,aAAA,GAAAE,CAAA,QAAQ,MAAMQ,OAAA,CAAAC,OAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;MACrCC,MAAA,EAAQ;QACJC,EAAA,EAAI;QACJC,IAAA,EAAM;QACNC,KAAA,EAAO;QACPC,KAAA,EAAO;QACPC,QAAA,EAAU;QACVC,MAAA,EAAQ;QACRC,MAAA,EAAQ;QACRC,QAAA,EAAU;QACVC,WAAA,EAAa;QACbC,SAAA,EAAW;QACXC,SAAA,EAAW;QACXC,IAAA,EAAM;UACFZ,MAAA,EAAQ;YACJC,EAAA,EAAI;YACJC,IAAA,EAAM;UACV;QACJ;QACAW,IAAA,EAAM;UACFb,MAAA,EAAQ;YACJC,EAAA,EAAI;YACJC,IAAA,EAAM;UACV;QACJ;MACJ;IACJ;IAAA;IAAAhB,aAAA,GAAAE,CAAA;IAEA,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTtB;IACJ;EACJ,EAAE,OAAOuB,KAAA,EAAO;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACZ+B,OAAA,CAAQD,KAAK,CAAC,yBAAyBA,KAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACvC,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEC,OAAA,EAAS;MAAOG,OAAA,EAAS;IAAwB,GACnD;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ;AAGO,eAAehC,KAAKC,GAAgB;EAAA;EAAAJ,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACvC;EACA;EACA;EACA;EACA;EAEA,IAAI;IACA,MAAMkC,QAAA;IAAA;IAAA,CAAApC,aAAA,GAAAE,CAAA,QAAW,MAAME,GAAA,CAAI0B,IAAI;IAAA;IAAA9B,aAAA,GAAAE,CAAA;IAE/B+B,OAAA,CAAQI,GAAG,CAAC,uBAAuBD,QAAA,GAAW;IAE9C;IAAA;IAAApC,aAAA,GAAAE,CAAA;IACA,IAAI,CAACkC,QAAA,CAASpB,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MAChB,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAAmB,GAC9C;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACkC,QAAA,CAASnB,KAAK,EAAE;MAAA;MAAAjB,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MACjB,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAAoB,GAC/C;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,aAAA,GAAAQ,CAAA,WAAC4B,QAAA,CAASE,QAAQ;IAAA;IAAA,CAAAtC,aAAA,GAAAQ,CAAA,UAAI4B,QAAA,CAASE,QAAQ,CAACC,MAAM,GAAG,IAAG;MAAA;MAAAvC,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MACpD,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAAyC,GACpE;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,aAAA,GAAAQ,CAAA,WAAC4B,QAAA,CAAST,IAAI;IAAA;IAAA,CAAA3B,aAAA,GAAAQ,CAAA,UAAI4B,QAAA,CAAST,IAAI,KAAK;IAAA;IAAA,CAAA3B,aAAA,GAAAQ,CAAA,UAAM4B,QAAA,CAAST,IAAI,KAAK,cAAa;MAAA;MAAA3B,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MACzE,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAA8B,GACzD;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,aAAA,GAAAQ,CAAA,YAAC4B,QAAA,CAASb,WAAW;IAAA;IAAA,CAAAvB,aAAA,GAAAQ,CAAA,WAAI4B,QAAA,CAASb,WAAW,CAACgB,MAAM,KAAK,IAAG;MAAA;MAAAvC,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MAC5D,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAAsC,GACjE;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAMa,MAAA;IAAA;IAAA,CAAArB,aAAA,GAAAE,CAAA,QAASkC,QAAA,CAAST,IAAI;IAE5B;IACA,MAAMa,UAAA;IAAA;IAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAa,MAAMQ,OAAA,CAAAC,OAAM,CAACgB,IAAI,CAACc,UAAU,CAAC;MAC5CC,KAAA,EAAO;QAAE3B,EAAA,EAAIM;MAAO;IACxB;IAAA;IAAArB,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACsC,UAAA,EAAY;MAAA;MAAAxC,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MACb,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;QAAEC,OAAA,EAAS;QAAOG,OAAA,EAAS;MAAiD,GAC5E;QAAEC,MAAA,EAAQ;MAAI;IAEtB;IAAA;IAAA;MAAAnC,aAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAMmC,cAAA;IAAA;IAAA,CAAA3C,aAAA,GAAAE,CAAA,QAAiB,MAAM0C,SAAA,CAAAjC,OAAM,CAACkC,IAAI,CAACT,QAAA,CAASE,QAAQ,EAAE;IAE5D;IACA,IAAIlB,MAAA;IAAA;IAAA,CAAApB,aAAA,GAAAE,CAAA,QAAS;IACb,IAAIoB,QAAA;IAAA;IAAA,CAAAtB,aAAA,GAAAE,CAAA,QAAW;IAEf;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACA,IAAIkC,QAAA,CAASb,WAAW,CAACuB,QAAQ,CAAC,cAAc;MAAA;MAAA9C,aAAA,GAAAQ,CAAA;MAC5C,MAAMuC,SAAA;MAAA;MAAA,CAAA/C,aAAA,GAAAE,CAAA,QAAY,MAAMQ,OAAA,CAAAC,OAAM,CAACe,IAAI,CAACe,UAAU,CAAC;QAC3CC,KAAA,EAAO;UAAE1B,IAAA,EAAM;QAAQ;MAC3B;MAAA;MAAAhB,aAAA,GAAAE,CAAA;MACA,IAAI6C,SAAA,EAAW;QAAA;QAAA/C,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAE,CAAA;QACXkB,MAAA,GAAS2B,SAAA,CAAUhC,EAAE;QAAA;QAAAf,aAAA,GAAAE,CAAA;QACrBoB,QAAA,GAAW;MACf;MAAA;MAAA;QAAAtB,aAAA,GAAAQ,CAAA;MAAA;IACJ,OAEK;MAAA;MAAAR,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MAAA,IAAIkC,QAAA,CAASb,WAAW,CAACuB,QAAQ,CAAC,uBAAuB;QAAA;QAAA9C,aAAA,GAAAQ,CAAA;QAC1D,MAAMwC,aAAA;QAAA;QAAA,CAAAhD,aAAA,GAAAE,CAAA,QAAgB,MAAMQ,OAAA,CAAAC,OAAM,CAACe,IAAI,CAACe,UAAU,CAAC;UAC/CC,KAAA,EAAO;YAAE1B,IAAA,EAAM;UAAa;QAChC;QAAA;QAAAhB,aAAA,GAAAE,CAAA;QACA,IAAI8C,aAAA,EAAe;UAAA;UAAAhD,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAE,CAAA;UACfkB,MAAA,GAAS4B,aAAA,CAAcjC,EAAE;UAAA;UAAAf,aAAA,GAAAE,CAAA;UACzBoB,QAAA,GAAW;QACf;QAAA;QAAA;UAAAtB,aAAA,GAAAQ,CAAA;QAAA;MACJ;MAAA;MAAA;QAAAR,aAAA,GAAAQ,CAAA;MAAA;IAAA;IAEA;IACA,MAAMyC,cAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAiB;MACnBc,IAAA,EAAMoB,QAAA,CAASpB,IAAI;MACnBC,KAAA,EAAOmB,QAAA,CAASnB,KAAK;MACrBqB,QAAA,EAAUK,cAAA;MACVvB,MAAA,EAAQA,MAAA;MACRE,QAAA,EAAUA,QAAA;MACVD,MAAA,EAAQA,MAAA;MACRE,WAAA;MAAa;MAAA,CAAAvB,aAAA,GAAAQ,CAAA,WAAA4B,QAAA,CAASb,WAAW;MAAA;MAAA,CAAAvB,aAAA,GAAAQ,CAAA,WAAI,EAAE;MACvCW,QAAA,EAAU;IACd;IAAA;IAAAnB,aAAA,GAAAE,CAAA;IAEA+B,OAAA,CAAQI,GAAG,CAAC,gCAAgCY,cAAA,GAAiB;IAE7D;IACA,MAAMrC,IAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAO,MAAMQ,OAAA,CAAAC,OAAM,CAACC,IAAI,CAACsC,MAAM,CAAC;MAClCC,IAAA,EAAMF,cAAA;MACNnC,MAAA,EAAQ;QACJC,EAAA,EAAI;QACJC,IAAA,EAAM;QACNC,KAAA,EAAO;QACPI,MAAA,EAAQ;QACRE,WAAA,EAAa;QACbC,SAAA,EAAW;QACXG,IAAA,EAAM;UACFb,MAAA,EAAQ;YACJC,EAAA,EAAI;YACJC,IAAA,EAAM;UACV;QACJ;MACJ;IACJ;IAEA;IAAA;IAAAhB,aAAA,GAAAE,CAAA;IACA,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACrBC,OAAA,EAAS;MACTG,OAAA,EAAS;MACTiB,IAAA,EAAMvC;IACV;EACJ,EAAE,OAAOoB,KAAA,EAAO;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACZ+B,OAAA,CAAQD,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACtC,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MAAEC,OAAA,EAAS;MAAOG,OAAA,EAAS;IAAwB,GACnD;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}