{"version":3,"names":["GET","request","cov_1cezgysfgx","f","s","url","URL","shopIdsParam","searchParams","get","startDate","endDate","b","_server","NextResponse","json","success","message","status","shopIds","split","map","id","parseInt","startDateTime","Date","setDate","getDate","endDateTime","shops","_prisma","default","shop","findMany","where","in","include","inventoryItems","length","inventoryByShop","Promise","all","items","inventoryItem","shopId","product","totalItems","totalQuantity","reduce","sum","item","quantity","comparisonData","inventoryData","find","name","location","is_active","metrics","inventoryCount","totalProducts","sales","revenue","averageTicketSize","customerCount","data","timeRange","error","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/shops/compare/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET: Compare multiple shops\nexport async function GET(request: NextRequest) {\n    try {\n        // Get query parameters\n        const url = new URL(request.url);\n        const shopIdsParam = url.searchParams.get('shopIds');\n        const startDate = url.searchParams.get('startDate');\n        const endDate = url.searchParams.get('endDate');\n\n        if (!shopIdsParam) {\n            return NextResponse.json({\n                success: false,\n                message: 'Shop IDs are required for comparison'\n            }, { status: 400 });\n        }\n\n        // Parse shop IDs\n        const shopIds = shopIdsParam.split(',').map(id => parseInt(id));\n\n        // Parse dates\n        const startDateTime = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 30));\n        const endDateTime = endDate ? new Date(endDate) : new Date();\n\n        // Get shops data\n        const shops = await prisma.shop.findMany({\n            where: {\n                id: {\n                    in: shopIds\n                }\n            },\n            include: {\n                inventoryItems: true\n            }\n        });\n\n        if (shops.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'No shops found with the provided IDs'\n            }, { status: 404 });\n        }\n\n        // Get inventory data\n        const inventoryByShop = await Promise.all(\n            shops.map(async (shop) => {\n                const items = await prisma.inventoryItem.findMany({\n                    where: {\n                        shopId: shop.id\n                    },\n                    include: {\n                        product: true\n                    }\n                });\n\n                return {\n                    shopId: shop.id,\n                    totalItems: items.length,\n                    totalQuantity: items.reduce((sum, item) => sum + item.quantity, 0)\n                };\n            })\n        );\n\n        // Prepare comparison data\n        const comparisonData = shops.map(shop => {\n            const inventoryData = inventoryByShop.find(item => item.shopId === shop.id);\n\n            return {\n                id: shop.id,\n                name: shop.name,\n                location: shop.location,\n                is_active: shop.is_active,\n                metrics: {\n                    inventoryCount: inventoryData?.totalQuantity || 0,\n                    totalProducts: shop.inventoryItems.length,\n                    sales: 0, // To be calculated with real data\n                    revenue: 0, // To be calculated with real data\n                    averageTicketSize: 0, // To be calculated with real data\n                    customerCount: 0, // To be calculated with real data\n                }\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                shops: comparisonData,\n                timeRange: {\n                    startDate: startDateTime,\n                    endDate: endDateTime\n                }\n            }\n        });\n    } catch (error) {\n        console.error('Error comparing shops:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to compare shops' },\n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}