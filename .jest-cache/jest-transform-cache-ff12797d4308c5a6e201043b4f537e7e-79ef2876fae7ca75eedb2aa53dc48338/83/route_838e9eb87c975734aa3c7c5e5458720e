82fb7c1f9147ca09fae93298df93725a
"use strict";

/* istanbul ignore next */
function cov_1cezgysfgx() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/shops/compare/route.ts";
  var hash = "8cd780a663b2407754d251e077ab2078f6cd3145";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/shops/compare/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 89
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "7": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "8": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 60
        }
      },
      "9": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "10": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "12": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "13": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 71
        }
      },
      "14": {
        start: {
          line: 34,
          column: 58
        },
        end: {
          line: 34,
          column: 70
        }
      },
      "15": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 36,
          column: 119
        }
      },
      "16": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 37,
          column: 68
        }
      },
      "17": {
        start: {
          line: 39,
          column: 22
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "20": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "21": {
        start: {
          line: 59,
          column: 26
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "22": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 14
        }
      },
      "23": {
        start: {
          line: 70,
          column: 57
        },
        end: {
          line: 70,
          column: 76
        }
      },
      "24": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 90,
          column: 10
        }
      },
      "25": {
        start: {
          line: 75,
          column: 34
        },
        end: {
          line: 75,
          column: 87
        }
      },
      "26": {
        start: {
          line: 75,
          column: 63
        },
        end: {
          line: 75,
          column: 86
        }
      },
      "27": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 89,
          column: 14
        }
      },
      "28": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "29": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 55
        }
      },
      "30": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 52
          },
          end: {
            line: 34,
            column: 53
          }
        },
        loc: {
          start: {
            line: 34,
            column: 58
          },
          end: {
            line: 34,
            column: 70
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 60
          },
          end: {
            line: 58,
            column: 61
          }
        },
        loc: {
          start: {
            line: 58,
            column: 74
          },
          end: {
            line: 72,
            column: 9
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 70,
            column: 44
          },
          end: {
            line: 70,
            column: 45
          }
        },
        loc: {
          start: {
            line: 70,
            column: 57
          },
          end: {
            line: 70,
            column: 76
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 74,
            column: 42
          }
        },
        loc: {
          start: {
            line: 74,
            column: 49
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 75,
            column: 55
          },
          end: {
            line: 75,
            column: 56
          }
        },
        loc: {
          start: {
            line: 75,
            column: 63
          },
          end: {
            line: 75,
            column: 86
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 38
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 14
          }
        }, {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 32
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 30
          },
          end: {
            line: 36,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 42
          },
          end: {
            line: 36,
            column: 61
          }
        }, {
          start: {
            line: 36,
            column: 64
          },
          end: {
            line: 36,
            column: 119
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 28
          },
          end: {
            line: 37,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 55
          }
        }, {
          start: {
            line: 37,
            column: 58
          },
          end: {
            line: 37,
            column: 68
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 82,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 36
          },
          end: {
            line: 82,
            column: 64
          }
        }, {
          start: {
            line: 82,
            column: 68
          },
          end: {
            line: 82,
            column: 69
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/shops/compare/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// GET: Compare multiple shops\nexport async function GET(request: NextRequest) {\n    try {\n        // Get query parameters\n        const url = new URL(request.url);\n        const shopIdsParam = url.searchParams.get('shopIds');\n        const startDate = url.searchParams.get('startDate');\n        const endDate = url.searchParams.get('endDate');\n\n        if (!shopIdsParam) {\n            return NextResponse.json({\n                success: false,\n                message: 'Shop IDs are required for comparison'\n            }, { status: 400 });\n        }\n\n        // Parse shop IDs\n        const shopIds = shopIdsParam.split(',').map(id => parseInt(id));\n\n        // Parse dates\n        const startDateTime = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 30));\n        const endDateTime = endDate ? new Date(endDate) : new Date();\n\n        // Get shops data\n        const shops = await prisma.shop.findMany({\n            where: {\n                id: {\n                    in: shopIds\n                }\n            },\n            include: {\n                inventoryItems: true\n            }\n        });\n\n        if (shops.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: 'No shops found with the provided IDs'\n            }, { status: 404 });\n        }\n\n        // Get inventory data\n        const inventoryByShop = await Promise.all(\n            shops.map(async (shop) => {\n                const items = await prisma.inventoryItem.findMany({\n                    where: {\n                        shopId: shop.id\n                    },\n                    include: {\n                        product: true\n                    }\n                });\n\n                return {\n                    shopId: shop.id,\n                    totalItems: items.length,\n                    totalQuantity: items.reduce((sum, item) => sum + item.quantity, 0)\n                };\n            })\n        );\n\n        // Prepare comparison data\n        const comparisonData = shops.map(shop => {\n            const inventoryData = inventoryByShop.find(item => item.shopId === shop.id);\n\n            return {\n                id: shop.id,\n                name: shop.name,\n                location: shop.location,\n                is_active: shop.is_active,\n                metrics: {\n                    inventoryCount: inventoryData?.totalQuantity || 0,\n                    totalProducts: shop.inventoryItems.length,\n                    sales: 0, // To be calculated with real data\n                    revenue: 0, // To be calculated with real data\n                    averageTicketSize: 0, // To be calculated with real data\n                    customerCount: 0, // To be calculated with real data\n                }\n            };\n        });\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                shops: comparisonData,\n                timeRange: {\n                    startDate: startDateTime,\n                    endDate: endDateTime\n                }\n            }\n        });\n    } catch (error) {\n        console.error('Error comparing shops:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to compare shops' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "request", "url", "URL", "shopIdsParam", "searchParams", "get", "startDate", "endDate", "NextResponse", "json", "success", "message", "status", "shopIds", "split", "map", "id", "parseInt", "startDateTime", "Date", "setDate", "getDate", "endDateTime", "shops", "prisma", "shop", "findMany", "where", "in", "include", "inventoryItems", "length", "inventoryByShop", "Promise", "all", "items", "inventoryItem", "shopId", "product", "totalItems", "totalQuantity", "reduce", "sum", "item", "quantity", "comparisonData", "inventoryData", "find", "name", "location", "is_active", "metrics", "inventoryCount", "totalProducts", "sales", "revenue", "averageTicketSize", "customerCount", "data", "timeRange", "error", "console"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;+DACvB;;;;;;AAGZ,eAAeA,IAAIC,OAAoB;IAC1C,IAAI;QACA,uBAAuB;QACvB,MAAMC,MAAM,IAAIC,IAAIF,QAAQC,GAAG;QAC/B,MAAME,eAAeF,IAAIG,YAAY,CAACC,GAAG,CAAC;QAC1C,MAAMC,YAAYL,IAAIG,YAAY,CAACC,GAAG,CAAC;QACvC,MAAME,UAAUN,IAAIG,YAAY,CAACC,GAAG,CAAC;QAErC,IAAI,CAACF,cAAc;YACf,OAAOK,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;YACb,GAAG;gBAAEC,QAAQ;YAAI;QACrB;QAEA,iBAAiB;QACjB,MAAMC,UAAUV,aAAaW,KAAK,CAAC,KAAKC,GAAG,CAACC,CAAAA,KAAMC,SAASD;QAE3D,cAAc;QACd,MAAME,gBAAgBZ,YAAY,IAAIa,KAAKb,aAAa,IAAIa,KAAK,IAAIA,OAAOC,OAAO,CAAC,IAAID,OAAOE,OAAO,KAAK;QAC3G,MAAMC,cAAcf,UAAU,IAAIY,KAAKZ,WAAW,IAAIY;QAEtD,iBAAiB;QACjB,MAAMI,QAAQ,MAAMC,eAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;YACrCC,OAAO;gBACHX,IAAI;oBACAY,IAAIf;gBACR;YACJ;YACAgB,SAAS;gBACLC,gBAAgB;YACpB;QACJ;QAEA,IAAIP,MAAMQ,MAAM,KAAK,GAAG;YACpB,OAAOvB,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;YACb,GAAG;gBAAEC,QAAQ;YAAI;QACrB;QAEA,qBAAqB;QACrB,MAAMoB,kBAAkB,MAAMC,QAAQC,GAAG,CACrCX,MAAMR,GAAG,CAAC,OAAOU;YACb,MAAMU,QAAQ,MAAMX,eAAM,CAACY,aAAa,CAACV,QAAQ,CAAC;gBAC9CC,OAAO;oBACHU,QAAQZ,KAAKT,EAAE;gBACnB;gBACAa,SAAS;oBACLS,SAAS;gBACb;YACJ;YAEA,OAAO;gBACHD,QAAQZ,KAAKT,EAAE;gBACfuB,YAAYJ,MAAMJ,MAAM;gBACxBS,eAAeL,MAAMM,MAAM,CAAC,CAACC,KAAKC,OAASD,MAAMC,KAAKC,QAAQ,EAAE;YACpE;QACJ;QAGJ,0BAA0B;QAC1B,MAAMC,iBAAiBtB,MAAMR,GAAG,CAACU,CAAAA;YAC7B,MAAMqB,gBAAgBd,gBAAgBe,IAAI,CAACJ,CAAAA,OAAQA,KAAKN,MAAM,KAAKZ,KAAKT,EAAE;YAE1E,OAAO;gBACHA,IAAIS,KAAKT,EAAE;gBACXgC,MAAMvB,KAAKuB,IAAI;gBACfC,UAAUxB,KAAKwB,QAAQ;gBACvBC,WAAWzB,KAAKyB,SAAS;gBACzBC,SAAS;oBACLC,gBAAgBN,eAAeN,iBAAiB;oBAChDa,eAAe5B,KAAKK,cAAc,CAACC,MAAM;oBACzCuB,OAAO;oBACPC,SAAS;oBACTC,mBAAmB;oBACnBC,eAAe;gBACnB;YACJ;QACJ;QAEA,OAAOjD,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTgD,MAAM;gBACFnC,OAAOsB;gBACPc,WAAW;oBACPrD,WAAWY;oBACXX,SAASe;gBACb;YACJ;QACJ;IACJ,EAAE,OAAOsC,OAAO;QACZC,QAAQD,KAAK,CAAC,0BAA0BA;QACxC,OAAOpD,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOC,SAAS;QAA0B,GACrD;YAAEC,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cd780a663b2407754d251e077ab2078f6cd3145"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1cezgysfgx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1cezgysfgx();
cov_1cezgysfgx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1cezgysfgx().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1cezgysfgx().f[0]++;
    cov_1cezgysfgx().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1cezgysfgx().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_1cezgysfgx().s[4]++, _interop_require_default(require("../../../../lib/prisma")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1cezgysfgx().f[1]++;
  cov_1cezgysfgx().s[5]++;
  return /* istanbul ignore next */(cov_1cezgysfgx().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1cezgysfgx().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1cezgysfgx().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1cezgysfgx().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_1cezgysfgx().f[2]++;
  cov_1cezgysfgx().s[6]++;
  try {
    // Get query parameters
    const url =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[7]++, new URL(request.url));
    const shopIdsParam =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[8]++, url.searchParams.get("shopIds"));
    const startDate =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[9]++, url.searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[10]++, url.searchParams.get("endDate"));
    /* istanbul ignore next */
    cov_1cezgysfgx().s[11]++;
    if (!shopIdsParam) {
      /* istanbul ignore next */
      cov_1cezgysfgx().b[2][0]++;
      cov_1cezgysfgx().s[12]++;
      return _server.NextResponse.json({
        success: false,
        message: "Shop IDs are required for comparison"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1cezgysfgx().b[2][1]++;
    }
    // Parse shop IDs
    const shopIds =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[13]++, shopIdsParam.split(",").map(id => {
      /* istanbul ignore next */
      cov_1cezgysfgx().f[3]++;
      cov_1cezgysfgx().s[14]++;
      return parseInt(id);
    }));
    // Parse dates
    const startDateTime =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[15]++, startDate ?
    /* istanbul ignore next */
    (cov_1cezgysfgx().b[3][0]++, new Date(startDate)) :
    /* istanbul ignore next */
    (cov_1cezgysfgx().b[3][1]++, new Date(new Date().setDate(new Date().getDate() - 30))));
    const endDateTime =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[16]++, endDate ?
    /* istanbul ignore next */
    (cov_1cezgysfgx().b[4][0]++, new Date(endDate)) :
    /* istanbul ignore next */
    (cov_1cezgysfgx().b[4][1]++, new Date()));
    // Get shops data
    const shops =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[17]++, await _prisma.default.shop.findMany({
      where: {
        id: {
          in: shopIds
        }
      },
      include: {
        inventoryItems: true
      }
    }));
    /* istanbul ignore next */
    cov_1cezgysfgx().s[18]++;
    if (shops.length === 0) {
      /* istanbul ignore next */
      cov_1cezgysfgx().b[5][0]++;
      cov_1cezgysfgx().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: "No shops found with the provided IDs"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1cezgysfgx().b[5][1]++;
    }
    // Get inventory data
    const inventoryByShop =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[20]++, await Promise.all(shops.map(async shop => {
      /* istanbul ignore next */
      cov_1cezgysfgx().f[4]++;
      const items =
      /* istanbul ignore next */
      (cov_1cezgysfgx().s[21]++, await _prisma.default.inventoryItem.findMany({
        where: {
          shopId: shop.id
        },
        include: {
          product: true
        }
      }));
      /* istanbul ignore next */
      cov_1cezgysfgx().s[22]++;
      return {
        shopId: shop.id,
        totalItems: items.length,
        totalQuantity: items.reduce((sum, item) => {
          /* istanbul ignore next */
          cov_1cezgysfgx().f[5]++;
          cov_1cezgysfgx().s[23]++;
          return sum + item.quantity;
        }, 0)
      };
    })));
    // Prepare comparison data
    const comparisonData =
    /* istanbul ignore next */
    (cov_1cezgysfgx().s[24]++, shops.map(shop => {
      /* istanbul ignore next */
      cov_1cezgysfgx().f[6]++;
      const inventoryData =
      /* istanbul ignore next */
      (cov_1cezgysfgx().s[25]++, inventoryByShop.find(item => {
        /* istanbul ignore next */
        cov_1cezgysfgx().f[7]++;
        cov_1cezgysfgx().s[26]++;
        return item.shopId === shop.id;
      }));
      /* istanbul ignore next */
      cov_1cezgysfgx().s[27]++;
      return {
        id: shop.id,
        name: shop.name,
        location: shop.location,
        is_active: shop.is_active,
        metrics: {
          inventoryCount:
          /* istanbul ignore next */
          (cov_1cezgysfgx().b[6][0]++, inventoryData?.totalQuantity) ||
          /* istanbul ignore next */
          (cov_1cezgysfgx().b[6][1]++, 0),
          totalProducts: shop.inventoryItems.length,
          sales: 0,
          revenue: 0,
          averageTicketSize: 0,
          customerCount: 0
        }
      };
    }));
    /* istanbul ignore next */
    cov_1cezgysfgx().s[28]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        shops: comparisonData,
        timeRange: {
          startDate: startDateTime,
          endDate: endDateTime
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1cezgysfgx().s[29]++;
    console.error("Error comparing shops:", error);
    /* istanbul ignore next */
    cov_1cezgysfgx().s[30]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to compare shops"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJyZXF1ZXN0IiwiY292XzFjZXpneXNmZ3giLCJmIiwicyIsInVybCIsIlVSTCIsInNob3BJZHNQYXJhbSIsInNlYXJjaFBhcmFtcyIsImdldCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsInN0YXR1cyIsInNob3BJZHMiLCJzcGxpdCIsIm1hcCIsImlkIiwicGFyc2VJbnQiLCJzdGFydERhdGVUaW1lIiwiRGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwiZW5kRGF0ZVRpbWUiLCJzaG9wcyIsIl9wcmlzbWEiLCJkZWZhdWx0Iiwic2hvcCIsImZpbmRNYW55Iiwid2hlcmUiLCJpbiIsImluY2x1ZGUiLCJpbnZlbnRvcnlJdGVtcyIsImxlbmd0aCIsImludmVudG9yeUJ5U2hvcCIsIlByb21pc2UiLCJhbGwiLCJpdGVtcyIsImludmVudG9yeUl0ZW0iLCJzaG9wSWQiLCJwcm9kdWN0IiwidG90YWxJdGVtcyIsInRvdGFsUXVhbnRpdHkiLCJyZWR1Y2UiLCJzdW0iLCJpdGVtIiwicXVhbnRpdHkiLCJjb21wYXJpc29uRGF0YSIsImludmVudG9yeURhdGEiLCJmaW5kIiwibmFtZSIsImxvY2F0aW9uIiwiaXNfYWN0aXZlIiwibWV0cmljcyIsImludmVudG9yeUNvdW50IiwidG90YWxQcm9kdWN0cyIsInNhbGVzIiwicmV2ZW51ZSIsImF2ZXJhZ2VUaWNrZXRTaXplIiwiY3VzdG9tZXJDb3VudCIsImRhdGEiLCJ0aW1lUmFuZ2UiLCJlcnJvciIsImNvbnNvbGUiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL3Nob3BzL2NvbXBhcmUvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCBwcmlzbWEgZnJvbSAnQC9saWIvcHJpc21hJztcblxuLy8gR0VUOiBDb21wYXJlIG11bHRpcGxlIHNob3BzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gR2V0IHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGNvbnN0IHNob3BJZHNQYXJhbSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzaG9wSWRzJyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzdGFydERhdGUnKTtcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdlbmREYXRlJyk7XG5cbiAgICAgICAgaWYgKCFzaG9wSWRzUGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Nob3AgSURzIGFyZSByZXF1aXJlZCBmb3IgY29tcGFyaXNvbidcbiAgICAgICAgICAgIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYXJzZSBzaG9wIElEc1xuICAgICAgICBjb25zdCBzaG9wSWRzID0gc2hvcElkc1BhcmFtLnNwbGl0KCcsJykubWFwKGlkID0+IHBhcnNlSW50KGlkKSk7XG5cbiAgICAgICAgLy8gUGFyc2UgZGF0ZXNcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlVGltZSA9IHN0YXJ0RGF0ZSA/IG5ldyBEYXRlKHN0YXJ0RGF0ZSkgOiBuZXcgRGF0ZShuZXcgRGF0ZSgpLnNldERhdGUobmV3IERhdGUoKS5nZXREYXRlKCkgLSAzMCkpO1xuICAgICAgICBjb25zdCBlbmREYXRlVGltZSA9IGVuZERhdGUgPyBuZXcgRGF0ZShlbmREYXRlKSA6IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgLy8gR2V0IHNob3BzIGRhdGFcbiAgICAgICAgY29uc3Qgc2hvcHMgPSBhd2FpdCBwcmlzbWEuc2hvcC5maW5kTWFueSh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgICAgICAgIGluOiBzaG9wSWRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgICBpbnZlbnRvcnlJdGVtczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2hvcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdObyBzaG9wcyBmb3VuZCB3aXRoIHRoZSBwcm92aWRlZCBJRHMnXG4gICAgICAgICAgICB9LCB7IHN0YXR1czogNDA0IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGludmVudG9yeSBkYXRhXG4gICAgICAgIGNvbnN0IGludmVudG9yeUJ5U2hvcCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgc2hvcHMubWFwKGFzeW5jIChzaG9wKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBwcmlzbWEuaW52ZW50b3J5SXRlbS5maW5kTWFueSh7XG4gICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG9wSWQ6IHNob3AuaWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzaG9wSWQ6IHNob3AuaWQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbXM6IGl0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxRdWFudGl0eTogaXRlbXMucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0ucXVhbnRpdHksIDApXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gUHJlcGFyZSBjb21wYXJpc29uIGRhdGFcbiAgICAgICAgY29uc3QgY29tcGFyaXNvbkRhdGEgPSBzaG9wcy5tYXAoc2hvcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnZlbnRvcnlEYXRhID0gaW52ZW50b3J5QnlTaG9wLmZpbmQoaXRlbSA9PiBpdGVtLnNob3BJZCA9PT0gc2hvcC5pZCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IHNob3AuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogc2hvcC5uYW1lLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBzaG9wLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIGlzX2FjdGl2ZTogc2hvcC5pc19hY3RpdmUsXG4gICAgICAgICAgICAgICAgbWV0cmljczoge1xuICAgICAgICAgICAgICAgICAgICBpbnZlbnRvcnlDb3VudDogaW52ZW50b3J5RGF0YT8udG90YWxRdWFudGl0eSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbFByb2R1Y3RzOiBzaG9wLmludmVudG9yeUl0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgc2FsZXM6IDAsIC8vIFRvIGJlIGNhbGN1bGF0ZWQgd2l0aCByZWFsIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgcmV2ZW51ZTogMCwgLy8gVG8gYmUgY2FsY3VsYXRlZCB3aXRoIHJlYWwgZGF0YVxuICAgICAgICAgICAgICAgICAgICBhdmVyYWdlVGlja2V0U2l6ZTogMCwgLy8gVG8gYmUgY2FsY3VsYXRlZCB3aXRoIHJlYWwgZGF0YVxuICAgICAgICAgICAgICAgICAgICBjdXN0b21lckNvdW50OiAwLCAvLyBUbyBiZSBjYWxjdWxhdGVkIHdpdGggcmVhbCBkYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgc2hvcHM6IGNvbXBhcmlzb25EYXRhLFxuICAgICAgICAgICAgICAgIHRpbWVSYW5nZToge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZVRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVUaW1lXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb21wYXJpbmcgc2hvcHM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnRmFpbGVkIHRvIGNvbXBhcmUgc2hvcHMnIH0sXG4gICAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgKTtcbiAgICB9XG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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