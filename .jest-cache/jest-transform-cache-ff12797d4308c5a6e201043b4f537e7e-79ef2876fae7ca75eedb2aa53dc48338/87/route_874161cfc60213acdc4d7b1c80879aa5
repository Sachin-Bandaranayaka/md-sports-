29c94e10f1b2e34f3103980de918a159
"use strict";

/* istanbul ignore next */
function cov_2l17pxdpj8() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/purchases/optimized/route.ts";
  var hash = "ab3467d4ee5a2841896e41b3e9b0aaa26f5f065f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/purchases/optimized/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 20
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "10": {
        start: {
          line: 27,
          column: 13
        },
        end: {
          line: 27,
          column: 37
        }
      },
      "11": {
        start: {
          line: 28,
          column: 15
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "12": {
        start: {
          line: 29,
          column: 30
        },
        end: {
          line: 29,
          column: 78
        }
      },
      "13": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "14": {
        start: {
          line: 36,
          column: 18
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "15": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 86,
          column: 1
        }
      },
      "16": {
        start: {
          line: 43,
          column: 63
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "17": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 26
        }
      },
      "18": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "20": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "21": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "22": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 54
        }
      },
      "24": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "26": {
        start: {
          line: 76,
          column: 11
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "27": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "28": {
        start: {
          line: 80,
          column: 11
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "29": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "30": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 23
        }
      },
      "31": {
        start: {
          line: 88,
          column: 33
        },
        end: {
          line: 129,
          column: 1
        }
      },
      "32": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "33": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "34": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "35": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "36": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 367,
          column: 5
        }
      },
      "37": {
        start: {
          line: 133,
          column: 22
        },
        end: {
          line: 135,
          column: 10
        }
      },
      "38": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "39": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "40": {
        start: {
          line: 143,
          column: 33
        },
        end: {
          line: 143,
          column: 53
        }
      },
      "41": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "42": {
        start: {
          line: 145,
          column: 23
        },
        end: {
          line: 145,
          column: 49
        }
      },
      "43": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "44": {
        start: {
          line: 147,
          column: 26
        },
        end: {
          line: 147,
          column: 55
        }
      },
      "45": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 148,
          column: 51
        }
      },
      "46": {
        start: {
          line: 149,
          column: 21
        },
        end: {
          line: 149,
          column: 62
        }
      },
      "47": {
        start: {
          line: 150,
          column: 22
        },
        end: {
          line: 150,
          column: 80
        }
      },
      "48": {
        start: {
          line: 151,
          column: 29
        },
        end: {
          line: 151,
          column: 72
        }
      },
      "49": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 152,
          column: 65
        }
      },
      "50": {
        start: {
          line: 153,
          column: 26
        },
        end: {
          line: 153,
          column: 66
        }
      },
      "51": {
        start: {
          line: 154,
          column: 34
        },
        end: {
          line: 154,
          column: 76
        }
      },
      "52": {
        start: {
          line: 155,
          column: 21
        },
        end: {
          line: 155,
          column: 39
        }
      },
      "53": {
        start: {
          line: 157,
          column: 25
        },
        end: {
          line: 168,
          column: 12
        }
      },
      "54": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "55": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "56": {
        start: {
          line: 172,
          column: 31
        },
        end: {
          line: 172,
          column: 70
        }
      },
      "57": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "58": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 61
        }
      },
      "59": {
        start: {
          line: 177,
          column: 56
        },
        end: {
          line: 205,
          column: 18
        }
      },
      "60": {
        start: {
          line: 206,
          column: 36
        },
        end: {
          line: 209,
          column: 30
        }
      },
      "61": {
        start: {
          line: 207,
          column: 49
        },
        end: {
          line: 207,
          column: 66
        }
      },
      "62": {
        start: {
          line: 208,
          column: 48
        },
        end: {
          line: 208,
          column: 56
        }
      },
      "63": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 99
        }
      },
      "64": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 62
        }
      },
      "65": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "66": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "67": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 217,
          column: 70
        }
      },
      "68": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "69": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 61
        }
      },
      "70": {
        start: {
          line: 221,
          column: 36
        },
        end: {
          line: 227,
          column: 18
        }
      },
      "71": {
        start: {
          line: 228,
          column: 64
        },
        end: {
          line: 247,
          column: 18
        }
      },
      "72": {
        start: {
          line: 248,
          column: 30
        },
        end: {
          line: 255,
          column: 17
        }
      },
      "73": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 252,
          column: 62
        }
      },
      "74": {
        start: {
          line: 253,
          column: 24
        },
        end: {
          line: 253,
          column: 35
        }
      },
      "75": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 80
        }
      },
      "76": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "77": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "78": {
        start: {
          line: 262,
          column: 32
        },
        end: {
          line: 268,
          column: 14
        }
      },
      "79": {
        start: {
          line: 269,
          column: 30
        },
        end: {
          line: 275,
          column: 14
        }
      },
      "80": {
        start: {
          line: 277,
          column: 31
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "81": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 294,
          column: 18
        }
      },
      "82": {
        start: {
          line: 286,
          column: 54
        },
        end: {
          line: 294,
          column: 17
        }
      },
      "83": {
        start: {
          line: 295,
          column: 31
        },
        end: {
          line: 298,
          column: 77
        }
      },
      "84": {
        start: {
          line: 298,
          column: 25
        },
        end: {
          line: 298,
          column: 65
        }
      },
      "85": {
        start: {
          line: 298,
          column: 42
        },
        end: {
          line: 298,
          column: 54
        }
      },
      "86": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "87": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 358,
          column: 11
        }
      },
      "88": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 66
        }
      },
      "89": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "90": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 57
        }
      },
      "91": {
        start: {
          line: 312,
          column: 32
        },
        end: {
          line: 318,
          column: 14
        }
      },
      "92": {
        start: {
          line: 320,
          column: 44
        },
        end: {
          line: 338,
          column: 14
        }
      },
      "93": {
        start: {
          line: 339,
          column: 31
        },
        end: {
          line: 339,
          column: 60
        }
      },
      "94": {
        start: {
          line: 340,
          column: 29
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "95": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 78
        }
      },
      "96": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 55
        }
      },
      "97": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 66
        }
      },
      "98": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 366,
          column: 11
        }
      },
      "99": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 475,
          column: 5
        }
      },
      "100": {
        start: {
          line: 371,
          column: 22
        },
        end: {
          line: 373,
          column: 10
        }
      },
      "101": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "102": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "103": {
        start: {
          line: 381,
          column: 21
        },
        end: {
          line: 381,
          column: 41
        }
      },
      "104": {
        start: {
          line: 382,
          column: 85
        },
        end: {
          line: 382,
          column: 89
        }
      },
      "105": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "106": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 389,
          column: 15
        }
      },
      "107": {
        start: {
          line: 392,
          column: 28
        },
        end: {
          line: 394,
          column: 13
        }
      },
      "108": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 56
        }
      },
      "109": {
        start: {
          line: 396,
          column: 23
        },
        end: {
          line: 453,
          column: 10
        }
      },
      "110": {
        start: {
          line: 398,
          column: 36
        },
        end: {
          line: 436,
          column: 14
        }
      },
      "111": {
        start: {
          line: 407,
          column: 51
        },
        end: {
          line: 412,
          column: 29
        }
      },
      "112": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 451,
          column: 13
        }
      },
      "113": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 450,
          column: 17
        }
      },
      "114": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 449,
          column: 23
        }
      },
      "115": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 35
        }
      },
      "116": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 459,
          column: 11
        }
      },
      "117": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 466,
          column: 11
        }
      },
      "118": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 65
        }
      },
      "119": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "120": {
        start: {
          line: 478,
          column: 4
        },
        end: {
          line: 629,
          column: 5
        }
      },
      "121": {
        start: {
          line: 479,
          column: 22
        },
        end: {
          line: 481,
          column: 10
        }
      },
      "122": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "123": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 487,
          column: 15
        }
      },
      "124": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 489,
          column: 40
        }
      },
      "125": {
        start: {
          line: 490,
          column: 19
        },
        end: {
          line: 490,
          column: 48
        }
      },
      "126": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 497,
          column: 9
        }
      },
      "127": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 496,
          column: 15
        }
      },
      "128": {
        start: {
          line: 498,
          column: 21
        },
        end: {
          line: 498,
          column: 41
        }
      },
      "129": {
        start: {
          line: 499,
          column: 74
        },
        end: {
          line: 499,
          column: 78
        }
      },
      "130": {
        start: {
          line: 501,
          column: 28
        },
        end: {
          line: 503,
          column: 25
        }
      },
      "131": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 56
        }
      },
      "132": {
        start: {
          line: 504,
          column: 23
        },
        end: {
          line: 609,
          column: 10
        }
      },
      "133": {
        start: {
          line: 506,
          column: 35
        },
        end: {
          line: 513,
          column: 14
        }
      },
      "134": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "135": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 62
        }
      },
      "136": {
        start: {
          line: 518,
          column: 35
        },
        end: {
          line: 574,
          column: 14
        }
      },
      "137": {
        start: {
          line: 544,
          column: 55
        },
        end: {
          line: 549,
          column: 33
        }
      },
      "138": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 607,
          column: 13
        }
      },
      "139": {
        start: {
          line: 577,
          column: 39
        },
        end: {
          line: 577,
          column: 68
        }
      },
      "140": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 606,
          column: 17
        }
      },
      "141": {
        start: {
          line: 580,
          column: 20
        },
        end: {
          line: 591,
          column: 21
        }
      },
      "142": {
        start: {
          line: 581,
          column: 24
        },
        end: {
          line: 590,
          column: 27
        }
      },
      "143": {
        start: {
          line: 592,
          column: 23
        },
        end: {
          line: 606,
          column: 17
        }
      },
      "144": {
        start: {
          line: 594,
          column: 20
        },
        end: {
          line: 605,
          column: 21
        }
      },
      "145": {
        start: {
          line: 595,
          column: 24
        },
        end: {
          line: 604,
          column: 27
        }
      },
      "146": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 608,
          column: 34
        }
      },
      "147": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 615,
          column: 11
        }
      },
      "148": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 620,
          column: 11
        }
      },
      "149": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 622,
          column: 65
        }
      },
      "150": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 628,
          column: 11
        }
      },
      "151": {
        start: {
          line: 632,
          column: 4
        },
        end: {
          line: 706,
          column: 5
        }
      },
      "152": {
        start: {
          line: 633,
          column: 22
        },
        end: {
          line: 635,
          column: 10
        }
      },
      "153": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 642,
          column: 9
        }
      },
      "154": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 641,
          column: 15
        }
      },
      "155": {
        start: {
          line: 643,
          column: 20
        },
        end: {
          line: 643,
          column: 40
        }
      },
      "156": {
        start: {
          line: 644,
          column: 19
        },
        end: {
          line: 644,
          column: 48
        }
      },
      "157": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 651,
          column: 9
        }
      },
      "158": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 650,
          column: 15
        }
      },
      "159": {
        start: {
          line: 652,
          column: 23
        },
        end: {
          line: 687,
          column: 10
        }
      },
      "160": {
        start: {
          line: 654,
          column: 28
        },
        end: {
          line: 661,
          column: 14
        }
      },
      "161": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 664,
          column: 13
        }
      },
      "162": {
        start: {
          line: 663,
          column: 16
        },
        end: {
          line: 663,
          column: 62
        }
      },
      "163": {
        start: {
          line: 666,
          column: 12
        },
        end: {
          line: 679,
          column: 13
        }
      },
      "164": {
        start: {
          line: 667,
          column: 16
        },
        end: {
          line: 678,
          column: 17
        }
      },
      "165": {
        start: {
          line: 668,
          column: 20
        },
        end: {
          line: 677,
          column: 23
        }
      },
      "166": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 685,
          column: 15
        }
      },
      "167": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 27
        }
      },
      "168": {
        start: {
          line: 689,
          column: 8
        },
        end: {
          line: 693,
          column: 11
        }
      },
      "169": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 697,
          column: 11
        }
      },
      "170": {
        start: {
          line: 699,
          column: 8
        },
        end: {
          line: 699,
          column: 65
        }
      },
      "171": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 705,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 11
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 10
          }
        },
        loc: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 33
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 42,
            column: 32
          },
          end: {
            line: 42,
            column: 33
          }
        },
        loc: {
          start: {
            line: 42,
            column: 42
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 42
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 88,
            column: 34
          }
        },
        loc: {
          start: {
            line: 88,
            column: 57
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 88
      },
      "8": {
        name: "GET",
        decl: {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 130,
            column: 18
          }
        },
        loc: {
          start: {
            line: 130,
            column: 28
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 130
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 171,
            column: 75
          },
          end: {
            line: 171,
            column: 76
          }
        },
        loc: {
          start: {
            line: 171,
            column: 85
          },
          end: {
            line: 212,
            column: 13
          }
        },
        line: 171
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 207,
            column: 42
          },
          end: {
            line: 207,
            column: 43
          }
        },
        loc: {
          start: {
            line: 207,
            column: 49
          },
          end: {
            line: 207,
            column: 66
          }
        },
        line: 207
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 208,
            column: 42
          }
        },
        loc: {
          start: {
            line: 208,
            column: 48
          },
          end: {
            line: 208,
            column: 56
          }
        },
        line: 208
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 216,
            column: 75
          },
          end: {
            line: 216,
            column: 76
          }
        },
        loc: {
          start: {
            line: 216,
            column: 85
          },
          end: {
            line: 258,
            column: 13
          }
        },
        line: 216
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 251,
            column: 57
          },
          end: {
            line: 251,
            column: 58
          }
        },
        loc: {
          start: {
            line: 251,
            column: 70
          },
          end: {
            line: 254,
            column: 21
          }
        },
        line: 251
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 286,
            column: 42
          },
          end: {
            line: 286,
            column: 43
          }
        },
        loc: {
          start: {
            line: 286,
            column: 54
          },
          end: {
            line: 294,
            column: 17
          }
        },
        line: 286
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 298,
            column: 18
          },
          end: {
            line: 298,
            column: 19
          }
        },
        loc: {
          start: {
            line: 298,
            column: 25
          },
          end: {
            line: 298,
            column: 65
          }
        },
        line: 298
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 298,
            column: 33
          },
          end: {
            line: 298,
            column: 34
          }
        },
        loc: {
          start: {
            line: 298,
            column: 42
          },
          end: {
            line: 298,
            column: 54
          }
        },
        line: 298
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 307,
            column: 71
          },
          end: {
            line: 307,
            column: 72
          }
        },
        loc: {
          start: {
            line: 307,
            column: 81
          },
          end: {
            line: 358,
            column: 9
          }
        },
        line: 307
      },
      "18": {
        name: "POST",
        decl: {
          start: {
            line: 369,
            column: 15
          },
          end: {
            line: 369,
            column: 19
          }
        },
        loc: {
          start: {
            line: 369,
            column: 29
          },
          end: {
            line: 476,
            column: 1
          }
        },
        line: 369
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 392,
            column: 41
          },
          end: {
            line: 392,
            column: 42
          }
        },
        loc: {
          start: {
            line: 392,
            column: 54
          },
          end: {
            line: 394,
            column: 9
          }
        },
        line: 392
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 396,
            column: 58
          },
          end: {
            line: 396,
            column: 59
          }
        },
        loc: {
          start: {
            line: 396,
            column: 70
          },
          end: {
            line: 453,
            column: 9
          }
        },
        line: 396
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 407,
            column: 42
          },
          end: {
            line: 407,
            column: 43
          }
        },
        loc: {
          start: {
            line: 407,
            column: 51
          },
          end: {
            line: 412,
            column: 29
          }
        },
        line: 407
      },
      "22": {
        name: "PUT",
        decl: {
          start: {
            line: 477,
            column: 15
          },
          end: {
            line: 477,
            column: 18
          }
        },
        loc: {
          start: {
            line: 477,
            column: 28
          },
          end: {
            line: 630,
            column: 1
          }
        },
        line: 477
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 501,
            column: 49
          },
          end: {
            line: 501,
            column: 50
          }
        },
        loc: {
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 503,
            column: 9
          }
        },
        line: 501
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 504,
            column: 58
          },
          end: {
            line: 504,
            column: 59
          }
        },
        loc: {
          start: {
            line: 504,
            column: 70
          },
          end: {
            line: 609,
            column: 9
          }
        },
        line: 504
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 544,
            column: 46
          },
          end: {
            line: 544,
            column: 47
          }
        },
        loc: {
          start: {
            line: 544,
            column: 55
          },
          end: {
            line: 549,
            column: 33
          }
        },
        line: 544
      },
      "26": {
        name: "DELETE",
        decl: {
          start: {
            line: 631,
            column: 15
          },
          end: {
            line: 631,
            column: 21
          }
        },
        loc: {
          start: {
            line: 631,
            column: 31
          },
          end: {
            line: 707,
            column: 1
          }
        },
        line: 631
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 652,
            column: 58
          },
          end: {
            line: 652,
            column: 59
          }
        },
        loc: {
          start: {
            line: 652,
            column: 70
          },
          end: {
            line: 687,
            column: 9
          }
        },
        line: 652
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 38
          }
        }, {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 33,
            column: 5
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 14
          }
        }, {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 32
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 17
          }
        }, {
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 71,
            column: 28
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 34
          },
          end: {
            line: 88,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 88,
            column: 49
          },
          end: {
            line: 88,
            column: 54
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "11": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 144,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 144,
            column: 49
          }
        }, {
          start: {
            line: 144,
            column: 53
          },
          end: {
            line: 144,
            column: 55
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 54
          }
        }, {
          start: {
            line: 149,
            column: 58
          },
          end: {
            line: 149,
            column: 61
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 150,
            column: 40
          },
          end: {
            line: 150,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 40
          },
          end: {
            line: 150,
            column: 65
          }
        }, {
          start: {
            line: 150,
            column: 69
          },
          end: {
            line: 150,
            column: 73
          }
        }],
        line: 150
      },
      "15": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "16": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 29
          }
        }, {
          start: {
            line: 170,
            column: 33
          },
          end: {
            line: 170,
            column: 39
          }
        }],
        line: 170
      },
      "17": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "18": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "19": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "20": {
        loc: {
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 250,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 250,
            column: 61
          }
        }, {
          start: {
            line: 250,
            column: 65
          },
          end: {
            line: 250,
            column: 66
          }
        }],
        line: 250
      },
      "21": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "22": {
        loc: {
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 288,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 288,
            column: 43
          }
        }, {
          start: {
            line: 288,
            column: 47
          },
          end: {
            line: 288,
            column: 52
          }
        }],
        line: 288
      },
      "23": {
        loc: {
          start: {
            line: 290,
            column: 20
          },
          end: {
            line: 290,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 20
          },
          end: {
            line: 290,
            column: 52
          }
        }, {
          start: {
            line: 290,
            column: 56
          },
          end: {
            line: 290,
            column: 59
          }
        }],
        line: 290
      },
      "24": {
        loc: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 53
          }
        }, {
          start: {
            line: 292,
            column: 57
          },
          end: {
            line: 292,
            column: 60
          }
        }],
        line: 292
      },
      "25": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "26": {
        loc: {
          start: {
            line: 363,
            column: 21
          },
          end: {
            line: 363,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 62
          },
          end: {
            line: 363,
            column: 75
          }
        }, {
          start: {
            line: 363,
            column: 78
          },
          end: {
            line: 363,
            column: 100
          }
        }],
        line: 363
      },
      "27": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "28": {
        loc: {
          start: {
            line: 382,
            column: 63
          },
          end: {
            line: 382,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 382,
            column: 72
          },
          end: {
            line: 382,
            column: 80
          }
        }],
        line: 382
      },
      "29": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "30": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 384,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 384,
            column: 26
          }
        }, {
          start: {
            line: 384,
            column: 30
          },
          end: {
            line: 384,
            column: 41
          }
        }, {
          start: {
            line: 384,
            column: 45
          },
          end: {
            line: 384,
            column: 50
          }
        }, {
          start: {
            line: 384,
            column: 54
          },
          end: {
            line: 384,
            column: 60
          }
        }, {
          start: {
            line: 384,
            column: 64
          },
          end: {
            line: 384,
            column: 85
          }
        }, {
          start: {
            line: 384,
            column: 89
          },
          end: {
            line: 384,
            column: 107
          }
        }],
        line: 384
      },
      "31": {
        loc: {
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "32": {
        loc: {
          start: {
            line: 471,
            column: 21
          },
          end: {
            line: 471,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 62
          },
          end: {
            line: 471,
            column: 75
          }
        }, {
          start: {
            line: 471,
            column: 78
          },
          end: {
            line: 471,
            column: 100
          }
        }],
        line: 471
      },
      "33": {
        loc: {
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "34": {
        loc: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 497,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 497,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "35": {
        loc: {
          start: {
            line: 501,
            column: 28
          },
          end: {
            line: 503,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 501,
            column: 36
          },
          end: {
            line: 503,
            column: 13
          }
        }, {
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 503,
            column: 25
          }
        }],
        line: 501
      },
      "36": {
        loc: {
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "37": {
        loc: {
          start: {
            line: 523,
            column: 23
          },
          end: {
            line: 525,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 23
          },
          end: {
            line: 523,
            column: 36
          }
        }, {
          start: {
            line: 523,
            column: 40
          },
          end: {
            line: 525,
            column: 21
          }
        }],
        line: 523
      },
      "38": {
        loc: {
          start: {
            line: 526,
            column: 23
          },
          end: {
            line: 528,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 526,
            column: 23
          },
          end: {
            line: 526,
            column: 33
          }
        }, {
          start: {
            line: 526,
            column: 37
          },
          end: {
            line: 528,
            column: 21
          }
        }],
        line: 526
      },
      "39": {
        loc: {
          start: {
            line: 529,
            column: 23
          },
          end: {
            line: 531,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 23
          },
          end: {
            line: 529,
            column: 27
          }
        }, {
          start: {
            line: 529,
            column: 31
          },
          end: {
            line: 531,
            column: 21
          }
        }],
        line: 529
      },
      "40": {
        loc: {
          start: {
            line: 532,
            column: 23
          },
          end: {
            line: 534,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 23
          },
          end: {
            line: 532,
            column: 48
          }
        }, {
          start: {
            line: 532,
            column: 52
          },
          end: {
            line: 534,
            column: 21
          }
        }],
        line: 532
      },
      "41": {
        loc: {
          start: {
            line: 535,
            column: 23
          },
          end: {
            line: 537,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 535,
            column: 23
          },
          end: {
            line: 535,
            column: 29
          }
        }, {
          start: {
            line: 535,
            column: 33
          },
          end: {
            line: 537,
            column: 21
          }
        }],
        line: 535
      },
      "42": {
        loc: {
          start: {
            line: 538,
            column: 23
          },
          end: {
            line: 540,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 538,
            column: 23
          },
          end: {
            line: 538,
            column: 42
          }
        }, {
          start: {
            line: 538,
            column: 46
          },
          end: {
            line: 540,
            column: 21
          }
        }],
        line: 538
      },
      "43": {
        loc: {
          start: {
            line: 541,
            column: 23
          },
          end: {
            line: 551,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 23
          },
          end: {
            line: 541,
            column: 28
          }
        }, {
          start: {
            line: 541,
            column: 32
          },
          end: {
            line: 551,
            column: 21
          }
        }],
        line: 541
      },
      "44": {
        loc: {
          start: {
            line: 576,
            column: 12
          },
          end: {
            line: 607,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 576,
            column: 12
          },
          end: {
            line: 607,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 576
      },
      "45": {
        loc: {
          start: {
            line: 576,
            column: 16
          },
          end: {
            line: 576,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 16
          },
          end: {
            line: 576,
            column: 22
          }
        }, {
          start: {
            line: 576,
            column: 26
          },
          end: {
            line: 576,
            column: 58
          }
        }],
        line: 576
      },
      "46": {
        loc: {
          start: {
            line: 577,
            column: 39
          },
          end: {
            line: 577,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 577,
            column: 39
          },
          end: {
            line: 577,
            column: 44
          }
        }, {
          start: {
            line: 577,
            column: 48
          },
          end: {
            line: 577,
            column: 68
          }
        }],
        line: 577
      },
      "47": {
        loc: {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 606,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 606,
            column: 17
          }
        }, {
          start: {
            line: 592,
            column: 23
          },
          end: {
            line: 606,
            column: 17
          }
        }],
        line: 578
      },
      "48": {
        loc: {
          start: {
            line: 578,
            column: 20
          },
          end: {
            line: 578,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 20
          },
          end: {
            line: 578,
            column: 37
          }
        }, {
          start: {
            line: 578,
            column: 41
          },
          end: {
            line: 578,
            column: 73
          }
        }],
        line: 578
      },
      "49": {
        loc: {
          start: {
            line: 592,
            column: 23
          },
          end: {
            line: 606,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 23
          },
          end: {
            line: 606,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "50": {
        loc: {
          start: {
            line: 592,
            column: 27
          },
          end: {
            line: 592,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 592,
            column: 27
          },
          end: {
            line: 592,
            column: 44
          }
        }, {
          start: {
            line: 592,
            column: 48
          },
          end: {
            line: 592,
            column: 80
          }
        }],
        line: 592
      },
      "51": {
        loc: {
          start: {
            line: 625,
            column: 21
          },
          end: {
            line: 625,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 625,
            column: 62
          },
          end: {
            line: 625,
            column: 75
          }
        }, {
          start: {
            line: 625,
            column: 78
          },
          end: {
            line: 625,
            column: 100
          }
        }],
        line: 625
      },
      "52": {
        loc: {
          start: {
            line: 636,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 636,
            column: 8
          },
          end: {
            line: 642,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 636
      },
      "53": {
        loc: {
          start: {
            line: 645,
            column: 8
          },
          end: {
            line: 651,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 645,
            column: 8
          },
          end: {
            line: 651,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 645
      },
      "54": {
        loc: {
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 664,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 664,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "55": {
        loc: {
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 679,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 679,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 666
      },
      "56": {
        loc: {
          start: {
            line: 702,
            column: 21
          },
          end: {
            line: 702,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 702,
            column: 62
          },
          end: {
            line: 702,
            column: 75
          }
        }, {
          start: {
            line: 702,
            column: 78
          },
          end: {
            line: 702,
            column: 100
          }
        }],
        line: 702
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0, 0],
      "30": [0, 0, 0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/purchases/optimized/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { getToken } from 'next-auth/jwt';\nimport { cacheService } from '@/lib/cache';\nimport { deduplicateRequest } from '@/lib/request-deduplication';\n\n// Cache configuration\nconst CACHE_TTL = {\n  LIST: 120, // 2 minutes for list queries\n  STATS: 300, // 5 minutes for statistics\n  SEARCH_SUGGESTIONS: 600, // 10 minutes for search suggestions\n};\n\n// Database query optimization helpers\nconst getOptimizedWhereClause = (params: {\n  search?: string;\n  status?: string;\n  supplierId?: string;\n  startDate?: string;\n  endDate?: string;\n}) => {\n  const { search, status, supplierId, startDate, endDate } = params;\n  const whereClause: any = {};\n\n  // Optimized search with indexed fields\n  if (search) {\n    whereClause.OR = [\n      {\n        invoiceNumber: {\n          contains: search,\n          mode: 'insensitive'\n        }\n      },\n      {\n        supplier: {\n          name: {\n            contains: search,\n            mode: 'insensitive'\n          }\n        }\n      }\n    ];\n  }\n\n  if (status) {\n    whereClause.status = status;\n  }\n\n  if (supplierId) {\n    whereClause.supplierId = parseInt(supplierId);\n  }\n\n  // Optimized date range queries\n  if (startDate && endDate) {\n    whereClause.date = {\n      gte: new Date(startDate),\n      lte: new Date(endDate)\n    };\n  } else if (startDate) {\n    whereClause.date = {\n      gte: new Date(startDate)\n    };\n  } else if (endDate) {\n    whereClause.date = {\n      lte: new Date(endDate)\n    };\n  }\n\n  return whereClause;\n};\n\n// Optimized select fields to reduce data transfer\nconst getOptimizedSelectFields = (includeItems = false) => {\n  const baseSelect = {\n    id: true,\n    invoiceNumber: true,\n    date: true,\n    totalAmount: true,\n    status: true,\n    supplierId: true,\n    createdAt: true,\n    updatedAt: true,\n    supplier: {\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        phone: true\n      }\n    }\n  };\n\n  if (includeItems) {\n    return {\n      ...baseSelect,\n      items: {\n        select: {\n          id: true,\n          quantity: true,\n          unitPrice: true,\n          totalPrice: true,\n          productId: true,\n          product: {\n            select: {\n              id: true,\n              name: true,\n              sku: true\n            }\n          }\n        }\n      }\n    };\n  }\n\n  return baseSelect;\n};\n\n// GET /api/purchases/optimized - Optimized purchase invoices endpoint\nexport async function GET(request: NextRequest) {\n  try {\n    // Authentication check\n    const token = await getToken({ req: request });\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const search = searchParams.get('search') || '';\n    const status = searchParams.get('status');\n    const supplierId = searchParams.get('supplierId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100); // Cap at 100\n    const includeItems = searchParams.get('includeItems') === 'true';\n    const export_data = searchParams.get('export') === 'true';\n    const statsOnly = searchParams.get('statsOnly') === 'true';\n    const searchSuggestions = searchParams.get('suggestions') === 'true';\n\n    const skip = (page - 1) * limit;\n\n    // Generate cache key\n    const cacheKey = `purchases-optimized-${JSON.stringify({\n      search, status, supplierId, startDate, endDate, page, limit, includeItems, statsOnly, searchSuggestions\n    })}`;\n\n    // Handle search suggestions\n    if (searchSuggestions && search) {\n      return deduplicateRequest(cacheKey, async () => {\n        const cached = await cacheService.get(cacheKey);\n        if (cached) {\n          return NextResponse.json(cached);\n        }\n\n        // Get unique invoice numbers and supplier names that match the search\n        const [invoiceNumbers, supplierNames] = await Promise.all([\n          prisma.purchaseInvoice.findMany({\n            where: {\n              invoiceNumber: {\n                contains: search,\n                mode: 'insensitive'\n              }\n            },\n            select: { invoiceNumber: true },\n            distinct: ['invoiceNumber'],\n            take: 5\n          }),\n          prisma.supplier.findMany({\n            where: {\n              name: {\n                contains: search,\n                mode: 'insensitive'\n              }\n            },\n            select: { name: true },\n            take: 5\n          })\n        ]);\n\n        const suggestions = [\n          ...invoiceNumbers.map(inv => inv.invoiceNumber),\n          ...supplierNames.map(sup => sup.name)\n        ].slice(0, 10);\n\n        await cacheService.set(cacheKey, suggestions, CACHE_TTL.SEARCH_SUGGESTIONS);\n        return NextResponse.json(suggestions);\n      });\n    }\n\n    // Handle statistics only\n    if (statsOnly) {\n      return deduplicateRequest(cacheKey, async () => {\n        const cached = await cacheService.get(cacheKey);\n        if (cached) {\n          return NextResponse.json(cached);\n        }\n\n        const whereClause = getOptimizedWhereClause({ search, status, supplierId, startDate, endDate });\n\n        const [totalCount, totalAmount, statusCounts] = await Promise.all([\n          prisma.purchaseInvoice.count({ where: whereClause }),\n          prisma.purchaseInvoice.aggregate({\n            where: whereClause,\n            _sum: { totalAmount: true }\n          }),\n          prisma.purchaseInvoice.groupBy({\n            by: ['status'],\n            where: whereClause,\n            _count: { status: true }\n          })\n        ]);\n\n        const stats = {\n          totalCount,\n          totalAmount: totalAmount._sum.totalAmount || 0,\n          statusBreakdown: statusCounts.reduce((acc, item) => {\n            acc[item.status] = item._count.status;\n            return acc;\n          }, {} as Record<string, number>)\n        };\n\n        await cacheService.set(cacheKey, stats, CACHE_TTL.STATS);\n        return NextResponse.json(stats);\n      });\n    }\n\n    // Handle export\n    if (export_data) {\n      const whereClause = getOptimizedWhereClause({ search, status, supplierId, startDate, endDate });\n\n      const purchases = await prisma.purchaseInvoice.findMany({\n        where: whereClause,\n        select: getOptimizedSelectFields(true),\n        orderBy: { date: 'desc' }\n      });\n\n      // Convert to CSV\n      const csvHeaders = [\n        'Invoice Number',\n        'Supplier',\n        'Date',\n        'Total Amount',\n        'Status',\n        'Items Count',\n        'Created At'\n      ];\n\n      const csvRows = purchases.map(purchase => [\n        purchase.invoiceNumber,\n        purchase.supplier?.name || 'N/A',\n        new Date(purchase.date).toLocaleDateString(),\n        purchase.totalAmount?.toString() || '0',\n        purchase.status,\n        purchase.items?.length.toString() || '0',\n        new Date(purchase.createdAt).toLocaleDateString()\n      ]);\n\n      const csvContent = [csvHeaders, ...csvRows]\n        .map(row => row.map(field => `\"${field}\"`).join(','))\n        .join('\\n');\n\n      return new NextResponse(csvContent, {\n        headers: {\n          'Content-Type': 'text/csv',\n          'Content-Disposition': `attachment; filename=\"purchase-invoices-${new Date().toISOString().split('T')[0]}.csv\"`\n        }\n      });\n    }\n\n    // Main list query with caching and deduplication\n    return deduplicateRequest(cacheKey, async () => {\n      const cached = await cacheService.get(cacheKey);\n      if (cached) {\n        return NextResponse.json(cached);\n      }\n\n      const whereClause = getOptimizedWhereClause({ search, status, supplierId, startDate, endDate });\n\n      // Use transaction for consistency and performance\n      const [purchases, totalCount] = await prisma.$transaction([\n        prisma.purchaseInvoice.findMany({\n          where: whereClause,\n          select: getOptimizedSelectFields(includeItems),\n          orderBy: [\n            { date: 'desc' },\n            { createdAt: 'desc' }\n          ],\n          skip,\n          take: limit\n        }),\n        prisma.purchaseInvoice.count({ where: whereClause })\n      ]);\n\n      const totalPages = Math.ceil(totalCount / limit);\n\n      const response = {\n        data: purchases,\n        pagination: {\n          page,\n          limit,\n          total: totalCount,\n          totalPages,\n          hasNextPage: page < totalPages,\n          hasPreviousPage: page > 1\n        },\n        meta: {\n          cached: false,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n      // Cache the response\n      await cacheService.set(cacheKey, response, CACHE_TTL.LIST);\n\n      return NextResponse.json(response);\n    });\n\n  } catch (error) {\n    console.error('Error in optimized purchases API:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/purchases/optimized - Create purchase invoice with optimizations\nexport async function POST(request: NextRequest) {\n  try {\n    const token = await getToken({ req: request });\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const {\n      invoiceNumber,\n      supplierId,\n      date,\n      items,\n      notes,\n      status = 'unpaid'\n    } = body;\n\n    // Validation\n    if (!invoiceNumber || !supplierId || !date || !items || !Array.isArray(items) || items.length === 0) {\n      return NextResponse.json(\n        { error: 'Missing required fields: invoiceNumber, supplierId, date, items' },\n        { status: 400 }\n      );\n    }\n\n    // Calculate total amount\n    const totalAmount = items.reduce((sum: number, item: any) => {\n      return sum + (item.quantity * item.unitPrice);\n    }, 0);\n\n    // Use transaction for data consistency\n    const result = await prisma.$transaction(async (tx) => {\n      // Create the purchase invoice\n      const purchaseInvoice = await tx.purchaseInvoice.create({\n        data: {\n          invoiceNumber,\n          supplierId: parseInt(supplierId),\n          date: new Date(date),\n          totalAmount,\n          status,\n          notes,\n          items: {\n            create: items.map((item: any) => ({\n              productId: item.productId,\n              quantity: item.quantity,\n              unitPrice: item.unitPrice,\n              totalPrice: item.quantity * item.unitPrice\n            }))\n          }\n        },\n        include: {\n          supplier: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              phone: true\n            }\n          },\n          items: {\n            include: {\n              product: {\n                select: {\n                  id: true,\n                  name: true,\n                  sku: true\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // Update inventory levels if status is paid\n      if (status === 'paid') {\n        for (const item of items) {\n          await tx.inventory.updateMany({\n            where: {\n              productId: item.productId\n            },\n            data: {\n              quantity: {\n                increment: item.quantity\n              }\n            }\n          });\n        }\n      }\n\n      return purchaseInvoice;\n    });\n\n    // Clear related caches\n    await Promise.all([\n      cacheService.clear('purchases-optimized'),\n      cacheService.clear('purchase-stats'),\n      cacheService.clear('inventory')\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: 'Purchase invoice created successfully'\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Error creating purchase invoice:', error);\n    return NextResponse.json(\n      {\n        error: 'Failed to create purchase invoice',\n        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/purchases/optimized/[id] - Update purchase invoice\nexport async function PUT(request: NextRequest) {\n  try {\n    const token = await getToken({ req: request });\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const url = new URL(request.url);\n    const id = url.pathname.split('/').pop();\n\n    if (!id) {\n      return NextResponse.json({ error: 'Invoice ID is required' }, { status: 400 });\n    }\n\n    const body = await request.json();\n    const {\n      invoiceNumber,\n      supplierId,\n      date,\n      items,\n      notes,\n      status\n    } = body;\n\n    // Calculate total amount if items are provided\n    const totalAmount = items ? items.reduce((sum: number, item: any) => {\n      return sum + (item.quantity * item.unitPrice);\n    }, 0) : undefined;\n\n    const result = await prisma.$transaction(async (tx) => {\n      // Get current invoice for comparison\n      const currentInvoice = await tx.purchaseInvoice.findUnique({\n        where: { id: parseInt(id) },\n        include: { items: true }\n      });\n\n      if (!currentInvoice) {\n        throw new Error('Purchase invoice not found');\n      }\n\n      // Update the purchase invoice\n      const updatedInvoice = await tx.purchaseInvoice.update({\n        where: { id: parseInt(id) },\n        data: {\n          ...(invoiceNumber && { invoiceNumber }),\n          ...(supplierId && { supplierId: parseInt(supplierId) }),\n          ...(date && { date: new Date(date) }),\n          ...(totalAmount !== undefined && { totalAmount }),\n          ...(status && { status }),\n          ...(notes !== undefined && { notes }),\n          ...(items && {\n            items: {\n              deleteMany: {},\n              create: items.map((item: any) => ({\n                productId: item.productId,\n                quantity: item.quantity,\n                unitPrice: item.unitPrice,\n                totalPrice: item.quantity * item.unitPrice\n              }))\n            }\n          })\n        },\n        include: {\n          supplier: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              phone: true\n            }\n          },\n          items: {\n            include: {\n              product: {\n                select: {\n                  id: true,\n                  name: true,\n                  sku: true\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // Handle inventory updates if status changed to/from paid\n      if (status && status !== currentInvoice.status) {\n        const itemsToProcess = items || currentInvoice.items;\n\n        if (status === 'paid' && currentInvoice.status !== 'paid') {\n          // Add to inventory\n          for (const item of itemsToProcess) {\n            await tx.inventory.updateMany({\n              where: { productId: item.productId },\n              data: {\n                quantity: { increment: item.quantity }\n              }\n            });\n          }\n        } else if (status !== 'paid' && currentInvoice.status === 'paid') {\n          // Remove from inventory\n          for (const item of itemsToProcess) {\n            await tx.inventory.updateMany({\n              where: { productId: item.productId },\n              data: {\n                quantity: { decrement: item.quantity }\n              }\n            });\n          }\n        }\n      }\n\n      return updatedInvoice;\n    });\n\n    // Clear related caches\n    await Promise.all([\n      cacheService.clear('purchases-optimized'),\n      cacheService.clear('purchase-stats'),\n      cacheService.clear('inventory')\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      message: 'Purchase invoice updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Error updating purchase invoice:', error);\n    return NextResponse.json(\n      {\n        error: 'Failed to update purchase invoice',\n        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/purchases/optimized/[id] - Delete purchase invoice\nexport async function DELETE(request: NextRequest) {\n  try {\n    const token = await getToken({ req: request });\n    if (!token) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const url = new URL(request.url);\n    const id = url.pathname.split('/').pop();\n\n    if (!id) {\n      return NextResponse.json({ error: 'Invoice ID is required' }, { status: 400 });\n    }\n\n    const result = await prisma.$transaction(async (tx) => {\n      // Get invoice details before deletion\n      const invoice = await tx.purchaseInvoice.findUnique({\n        where: { id: parseInt(id) },\n        include: { items: true }\n      });\n\n      if (!invoice) {\n        throw new Error('Purchase invoice not found');\n      }\n\n      // If invoice was paid, adjust inventory\n      if (invoice.status === 'paid') {\n        for (const item of invoice.items) {\n          await tx.inventory.updateMany({\n            where: { productId: item.productId },\n            data: {\n              quantity: { decrement: item.quantity }\n            }\n          });\n        }\n      }\n\n      // Delete the invoice (items will be deleted due to cascade)\n      await tx.purchaseInvoice.delete({\n        where: { id: parseInt(id) }\n      });\n\n      return invoice;\n    });\n\n    // Clear related caches\n    await Promise.all([\n      cacheService.clear('purchases-optimized'),\n      cacheService.clear('purchase-stats'),\n      cacheService.clear('inventory')\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Purchase invoice deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Error deleting purchase invoice:', error);\n    return NextResponse.json(\n      {\n        error: 'Failed to delete purchase invoice',\n        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n      },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "POST", "PUT", "CACHE_TTL", "LIST", "STATS", "SEARCH_SUGGESTIONS", "getOptimizedWhereClause", "params", "search", "status", "supplierId", "startDate", "endDate", "whereClause", "OR", "invoiceNumber", "contains", "mode", "supplier", "name", "parseInt", "date", "gte", "Date", "lte", "getOptimizedSelectFields", "includeItems", "baseSelect", "id", "totalAmount", "createdAt", "updatedAt", "select", "email", "phone", "items", "quantity", "unitPrice", "totalPrice", "productId", "product", "sku", "request", "token", "getToken", "req", "NextResponse", "json", "error", "searchParams", "URL", "url", "get", "page", "limit", "Math", "min", "export_data", "statsOnly", "searchSuggestions", "skip", "cacheKey", "JSON", "stringify", "deduplicateRequest", "cached", "cacheService", "invoiceNumbers", "supplierNames", "Promise", "all", "prisma", "purchaseInvoice", "findMany", "where", "distinct", "take", "suggestions", "map", "inv", "sup", "slice", "set", "totalCount", "statusCounts", "count", "aggregate", "_sum", "groupBy", "by", "_count", "stats", "statusBreakdown", "reduce", "acc", "item", "purchases", "orderBy", "csvHeaders", "csvRows", "purchase", "toLocaleDateString", "toString", "length", "csvContent", "row", "field", "join", "headers", "toISOString", "split", "$transaction", "totalPages", "ceil", "response", "data", "pagination", "total", "hasNextPage", "hasPreviousPage", "meta", "timestamp", "console", "message", "process", "env", "NODE_ENV", "body", "notes", "Array", "isArray", "sum", "result", "tx", "create", "include", "inventory", "updateMany", "increment", "clear", "success", "pathname", "pop", "undefined", "currentInvoice", "findUnique", "Error", "updatedInvoice", "update", "deleteMany", "itemsToProcess", "decrement", "invoice", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ab3467d4ee5a2841896e41b3e9b0aaa26f5f065f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l17pxdpj8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l17pxdpj8();
cov_2l17pxdpj8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[0]++;
  cov_2l17pxdpj8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2l17pxdpj8().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2l17pxdpj8().f[1]++;
    cov_2l17pxdpj8().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2l17pxdpj8().f[2]++;
    cov_2l17pxdpj8().s[5]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2l17pxdpj8().f[3]++;
    cov_2l17pxdpj8().s[6]++;
    return POST;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_2l17pxdpj8().f[4]++;
    cov_2l17pxdpj8().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2l17pxdpj8().s[8]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_2l17pxdpj8().s[9]++, _interop_require_default(require("../../../../lib/prisma")));
const _jwt =
/* istanbul ignore next */
(cov_2l17pxdpj8().s[10]++, require("next-auth/jwt"));
const _cache =
/* istanbul ignore next */
(cov_2l17pxdpj8().s[11]++, require("../../../../lib/cache"));
const _requestdeduplication =
/* istanbul ignore next */
(cov_2l17pxdpj8().s[12]++, require("../../../../lib/request-deduplication"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[5]++;
  cov_2l17pxdpj8().s[13]++;
  return /* istanbul ignore next */(cov_2l17pxdpj8().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2l17pxdpj8().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2l17pxdpj8().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2l17pxdpj8().b[0][1]++, {
    default: obj
  });
}
// Cache configuration
const CACHE_TTL =
/* istanbul ignore next */
(cov_2l17pxdpj8().s[14]++, {
  LIST: 120,
  STATS: 300,
  SEARCH_SUGGESTIONS: 600
});
// Database query optimization helpers
/* istanbul ignore next */
cov_2l17pxdpj8().s[15]++;
const getOptimizedWhereClause = params => {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[6]++;
  const {
    search,
    status,
    supplierId,
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_2l17pxdpj8().s[16]++, params);
  const whereClause =
  /* istanbul ignore next */
  (cov_2l17pxdpj8().s[17]++, {});
  // Optimized search with indexed fields
  /* istanbul ignore next */
  cov_2l17pxdpj8().s[18]++;
  if (search) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[2][0]++;
    cov_2l17pxdpj8().s[19]++;
    whereClause.OR = [{
      invoiceNumber: {
        contains: search,
        mode: "insensitive"
      }
    }, {
      supplier: {
        name: {
          contains: search,
          mode: "insensitive"
        }
      }
    }];
  } else
  /* istanbul ignore next */
  {
    cov_2l17pxdpj8().b[2][1]++;
  }
  cov_2l17pxdpj8().s[20]++;
  if (status) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[3][0]++;
    cov_2l17pxdpj8().s[21]++;
    whereClause.status = status;
  } else
  /* istanbul ignore next */
  {
    cov_2l17pxdpj8().b[3][1]++;
  }
  cov_2l17pxdpj8().s[22]++;
  if (supplierId) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[4][0]++;
    cov_2l17pxdpj8().s[23]++;
    whereClause.supplierId = parseInt(supplierId);
  } else
  /* istanbul ignore next */
  {
    cov_2l17pxdpj8().b[4][1]++;
  }
  // Optimized date range queries
  cov_2l17pxdpj8().s[24]++;
  if (
  /* istanbul ignore next */
  (cov_2l17pxdpj8().b[6][0]++, startDate) &&
  /* istanbul ignore next */
  (cov_2l17pxdpj8().b[6][1]++, endDate)) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[5][0]++;
    cov_2l17pxdpj8().s[25]++;
    whereClause.date = {
      gte: new Date(startDate),
      lte: new Date(endDate)
    };
  } else {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[5][1]++;
    cov_2l17pxdpj8().s[26]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[7][0]++;
      cov_2l17pxdpj8().s[27]++;
      whereClause.date = {
        gte: new Date(startDate)
      };
    } else {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[7][1]++;
      cov_2l17pxdpj8().s[28]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[8][0]++;
        cov_2l17pxdpj8().s[29]++;
        whereClause.date = {
          lte: new Date(endDate)
        };
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[8][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2l17pxdpj8().s[30]++;
  return whereClause;
};
// Optimized select fields to reduce data transfer
/* istanbul ignore next */
cov_2l17pxdpj8().s[31]++;
const getOptimizedSelectFields = (includeItems =
/* istanbul ignore next */
(cov_2l17pxdpj8().b[9][0]++, false)) => {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[7]++;
  const baseSelect =
  /* istanbul ignore next */
  (cov_2l17pxdpj8().s[32]++, {
    id: true,
    invoiceNumber: true,
    date: true,
    totalAmount: true,
    status: true,
    supplierId: true,
    createdAt: true,
    updatedAt: true,
    supplier: {
      select: {
        id: true,
        name: true,
        email: true,
        phone: true
      }
    }
  });
  /* istanbul ignore next */
  cov_2l17pxdpj8().s[33]++;
  if (includeItems) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().b[10][0]++;
    cov_2l17pxdpj8().s[34]++;
    return {
      ...baseSelect,
      items: {
        select: {
          id: true,
          quantity: true,
          unitPrice: true,
          totalPrice: true,
          productId: true,
          product: {
            select: {
              id: true,
              name: true,
              sku: true
            }
          }
        }
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_2l17pxdpj8().b[10][1]++;
  }
  cov_2l17pxdpj8().s[35]++;
  return baseSelect;
};
async function GET(request) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[8]++;
  cov_2l17pxdpj8().s[36]++;
  try {
    // Authentication check
    const token =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[37]++, await (0, _jwt.getToken)({
      req: request
    }));
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[38]++;
    if (!token) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[11][0]++;
      cov_2l17pxdpj8().s[39]++;
      return _server.NextResponse.json({
        error: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[11][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[40]++, new URL(request.url));
    const search =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[41]++,
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[12][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[12][1]++, ""));
    const status =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[42]++, searchParams.get("status"));
    const supplierId =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[43]++, searchParams.get("supplierId"));
    const startDate =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[44]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[45]++, searchParams.get("endDate"));
    const page =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[46]++, parseInt(
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[13][0]++, searchParams.get("page")) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[13][1]++, "1")));
    const limit =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[47]++, Math.min(parseInt(
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[14][0]++, searchParams.get("limit")) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[14][1]++, "20")), 100)); // Cap at 100
    const includeItems =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[48]++, searchParams.get("includeItems") === "true");
    const export_data =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[49]++, searchParams.get("export") === "true");
    const statsOnly =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[50]++, searchParams.get("statsOnly") === "true");
    const searchSuggestions =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[51]++, searchParams.get("suggestions") === "true");
    const skip =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[52]++, (page - 1) * limit);
    // Generate cache key
    const cacheKey =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[53]++, `purchases-optimized-${JSON.stringify({
      search,
      status,
      supplierId,
      startDate,
      endDate,
      page,
      limit,
      includeItems,
      statsOnly,
      searchSuggestions
    })}`);
    // Handle search suggestions
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[16][0]++, searchSuggestions) &&
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[16][1]++, search)) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[15][0]++;
      cov_2l17pxdpj8().s[55]++;
      return (0, _requestdeduplication.deduplicateRequest)(cacheKey, async () => {
        /* istanbul ignore next */
        cov_2l17pxdpj8().f[9]++;
        const cached =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[56]++, await _cache.cacheService.get(cacheKey));
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[57]++;
        if (cached) {
          /* istanbul ignore next */
          cov_2l17pxdpj8().b[17][0]++;
          cov_2l17pxdpj8().s[58]++;
          return _server.NextResponse.json(cached);
        } else
        /* istanbul ignore next */
        {
          cov_2l17pxdpj8().b[17][1]++;
        }
        // Get unique invoice numbers and supplier names that match the search
        const [invoiceNumbers, supplierNames] =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[59]++, await Promise.all([_prisma.default.purchaseInvoice.findMany({
          where: {
            invoiceNumber: {
              contains: search,
              mode: "insensitive"
            }
          },
          select: {
            invoiceNumber: true
          },
          distinct: ["invoiceNumber"],
          take: 5
        }), _prisma.default.supplier.findMany({
          where: {
            name: {
              contains: search,
              mode: "insensitive"
            }
          },
          select: {
            name: true
          },
          take: 5
        })]));
        const suggestions =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[60]++, [...invoiceNumbers.map(inv => {
          /* istanbul ignore next */
          cov_2l17pxdpj8().f[10]++;
          cov_2l17pxdpj8().s[61]++;
          return inv.invoiceNumber;
        }), ...supplierNames.map(sup => {
          /* istanbul ignore next */
          cov_2l17pxdpj8().f[11]++;
          cov_2l17pxdpj8().s[62]++;
          return sup.name;
        })].slice(0, 10));
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[63]++;
        await _cache.cacheService.set(cacheKey, suggestions, CACHE_TTL.SEARCH_SUGGESTIONS);
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[64]++;
        return _server.NextResponse.json(suggestions);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[15][1]++;
    }
    // Handle statistics only
    cov_2l17pxdpj8().s[65]++;
    if (statsOnly) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[18][0]++;
      cov_2l17pxdpj8().s[66]++;
      return (0, _requestdeduplication.deduplicateRequest)(cacheKey, async () => {
        /* istanbul ignore next */
        cov_2l17pxdpj8().f[12]++;
        const cached =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[67]++, await _cache.cacheService.get(cacheKey));
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[68]++;
        if (cached) {
          /* istanbul ignore next */
          cov_2l17pxdpj8().b[19][0]++;
          cov_2l17pxdpj8().s[69]++;
          return _server.NextResponse.json(cached);
        } else
        /* istanbul ignore next */
        {
          cov_2l17pxdpj8().b[19][1]++;
        }
        const whereClause =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[70]++, getOptimizedWhereClause({
          search,
          status,
          supplierId,
          startDate,
          endDate
        }));
        const [totalCount, totalAmount, statusCounts] =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[71]++, await Promise.all([_prisma.default.purchaseInvoice.count({
          where: whereClause
        }), _prisma.default.purchaseInvoice.aggregate({
          where: whereClause,
          _sum: {
            totalAmount: true
          }
        }), _prisma.default.purchaseInvoice.groupBy({
          by: ["status"],
          where: whereClause,
          _count: {
            status: true
          }
        })]));
        const stats =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[72]++, {
          totalCount,
          totalAmount:
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[20][0]++, totalAmount._sum.totalAmount) ||
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[20][1]++, 0),
          statusBreakdown: statusCounts.reduce((acc, item) => {
            /* istanbul ignore next */
            cov_2l17pxdpj8().f[13]++;
            cov_2l17pxdpj8().s[73]++;
            acc[item.status] = item._count.status;
            /* istanbul ignore next */
            cov_2l17pxdpj8().s[74]++;
            return acc;
          }, {})
        });
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[75]++;
        await _cache.cacheService.set(cacheKey, stats, CACHE_TTL.STATS);
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[76]++;
        return _server.NextResponse.json(stats);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[18][1]++;
    }
    // Handle export
    cov_2l17pxdpj8().s[77]++;
    if (export_data) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[21][0]++;
      const whereClause =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[78]++, getOptimizedWhereClause({
        search,
        status,
        supplierId,
        startDate,
        endDate
      }));
      const purchases =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[79]++, await _prisma.default.purchaseInvoice.findMany({
        where: whereClause,
        select: getOptimizedSelectFields(true),
        orderBy: {
          date: "desc"
        }
      }));
      // Convert to CSV
      const csvHeaders =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[80]++, ["Invoice Number", "Supplier", "Date", "Total Amount", "Status", "Items Count", "Created At"]);
      const csvRows =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[81]++, purchases.map(purchase => {
        /* istanbul ignore next */
        cov_2l17pxdpj8().f[14]++;
        cov_2l17pxdpj8().s[82]++;
        return [purchase.invoiceNumber,
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[22][0]++, purchase.supplier?.name) ||
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[22][1]++, "N/A"), new Date(purchase.date).toLocaleDateString(),
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[23][0]++, purchase.totalAmount?.toString()) ||
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[23][1]++, "0"), purchase.status,
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[24][0]++, purchase.items?.length.toString()) ||
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[24][1]++, "0"), new Date(purchase.createdAt).toLocaleDateString()];
      }));
      const csvContent =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[83]++, [csvHeaders, ...csvRows].map(row => {
        /* istanbul ignore next */
        cov_2l17pxdpj8().f[15]++;
        cov_2l17pxdpj8().s[84]++;
        return row.map(field => {
          /* istanbul ignore next */
          cov_2l17pxdpj8().f[16]++;
          cov_2l17pxdpj8().s[85]++;
          return `"${field}"`;
        }).join(",");
      }).join("\n"));
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[86]++;
      return new _server.NextResponse(csvContent, {
        headers: {
          "Content-Type": "text/csv",
          "Content-Disposition": `attachment; filename="purchase-invoices-${new Date().toISOString().split("T")[0]}.csv"`
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[21][1]++;
    }
    // Main list query with caching and deduplication
    cov_2l17pxdpj8().s[87]++;
    return (0, _requestdeduplication.deduplicateRequest)(cacheKey, async () => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[17]++;
      const cached =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[88]++, await _cache.cacheService.get(cacheKey));
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[89]++;
      if (cached) {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[25][0]++;
        cov_2l17pxdpj8().s[90]++;
        return _server.NextResponse.json(cached);
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[25][1]++;
      }
      const whereClause =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[91]++, getOptimizedWhereClause({
        search,
        status,
        supplierId,
        startDate,
        endDate
      }));
      // Use transaction for consistency and performance
      const [purchases, totalCount] =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[92]++, await _prisma.default.$transaction([_prisma.default.purchaseInvoice.findMany({
        where: whereClause,
        select: getOptimizedSelectFields(includeItems),
        orderBy: [{
          date: "desc"
        }, {
          createdAt: "desc"
        }],
        skip,
        take: limit
      }), _prisma.default.purchaseInvoice.count({
        where: whereClause
      })]));
      const totalPages =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[93]++, Math.ceil(totalCount / limit));
      const response =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[94]++, {
        data: purchases,
        pagination: {
          page,
          limit,
          total: totalCount,
          totalPages,
          hasNextPage: page < totalPages,
          hasPreviousPage: page > 1
        },
        meta: {
          cached: false,
          timestamp: new Date().toISOString()
        }
      });
      // Cache the response
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[95]++;
      await _cache.cacheService.set(cacheKey, response, CACHE_TTL.LIST);
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[96]++;
      return _server.NextResponse.json(response);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[97]++;
    console.error("Error in optimized purchases API:", error);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[98]++;
    return _server.NextResponse.json({
      error: "Internal server error",
      message: process.env.NODE_ENV === "development" ?
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[26][1]++, "Something went wrong")
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[18]++;
  cov_2l17pxdpj8().s[99]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[100]++, await (0, _jwt.getToken)({
      req: request
    }));
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[101]++;
    if (!token) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[27][0]++;
      cov_2l17pxdpj8().s[102]++;
      return _server.NextResponse.json({
        error: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[27][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[103]++, await request.json());
    const {
      invoiceNumber,
      supplierId,
      date,
      items,
      notes,
      status =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[28][0]++, "unpaid")
    } =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[104]++, body);
    // Validation
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][0]++, !invoiceNumber) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][1]++, !supplierId) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][2]++, !date) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][3]++, !items) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][4]++, !Array.isArray(items)) ||
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[30][5]++, items.length === 0)) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[29][0]++;
      cov_2l17pxdpj8().s[106]++;
      return _server.NextResponse.json({
        error: "Missing required fields: invoiceNumber, supplierId, date, items"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[29][1]++;
    }
    // Calculate total amount
    const totalAmount =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[107]++, items.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[19]++;
      cov_2l17pxdpj8().s[108]++;
      return sum + item.quantity * item.unitPrice;
    }, 0));
    // Use transaction for data consistency
    const result =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[109]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[20]++;
      // Create the purchase invoice
      const purchaseInvoice =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[110]++, await tx.purchaseInvoice.create({
        data: {
          invoiceNumber,
          supplierId: parseInt(supplierId),
          date: new Date(date),
          totalAmount,
          status,
          notes,
          items: {
            create: items.map(item => {
              /* istanbul ignore next */
              cov_2l17pxdpj8().f[21]++;
              cov_2l17pxdpj8().s[111]++;
              return {
                productId: item.productId,
                quantity: item.quantity,
                unitPrice: item.unitPrice,
                totalPrice: item.quantity * item.unitPrice
              };
            })
          }
        },
        include: {
          supplier: {
            select: {
              id: true,
              name: true,
              email: true,
              phone: true
            }
          },
          items: {
            include: {
              product: {
                select: {
                  id: true,
                  name: true,
                  sku: true
                }
              }
            }
          }
        }
      }));
      // Update inventory levels if status is paid
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[112]++;
      if (status === "paid") {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[31][0]++;
        cov_2l17pxdpj8().s[113]++;
        for (const item of items) {
          /* istanbul ignore next */
          cov_2l17pxdpj8().s[114]++;
          await tx.inventory.updateMany({
            where: {
              productId: item.productId
            },
            data: {
              quantity: {
                increment: item.quantity
              }
            }
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[31][1]++;
      }
      cov_2l17pxdpj8().s[115]++;
      return purchaseInvoice;
    }));
    // Clear related caches
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[116]++;
    await Promise.all([_cache.cacheService.clear("purchases-optimized"), _cache.cacheService.clear("purchase-stats"), _cache.cacheService.clear("inventory")]);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[117]++;
    return _server.NextResponse.json({
      success: true,
      data: result,
      message: "Purchase invoice created successfully"
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[118]++;
    console.error("Error creating purchase invoice:", error);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[119]++;
    return _server.NextResponse.json({
      error: "Failed to create purchase invoice",
      message: process.env.NODE_ENV === "development" ?
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[32][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[32][1]++, "Something went wrong")
    }, {
      status: 500
    });
  }
}
async function PUT(request) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[22]++;
  cov_2l17pxdpj8().s[120]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[121]++, await (0, _jwt.getToken)({
      req: request
    }));
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[122]++;
    if (!token) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[33][0]++;
      cov_2l17pxdpj8().s[123]++;
      return _server.NextResponse.json({
        error: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[33][1]++;
    }
    const url =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[124]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[125]++, url.pathname.split("/").pop());
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[126]++;
    if (!id) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[34][0]++;
      cov_2l17pxdpj8().s[127]++;
      return _server.NextResponse.json({
        error: "Invoice ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[34][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[128]++, await request.json());
    const {
      invoiceNumber,
      supplierId,
      date,
      items,
      notes,
      status
    } =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[129]++, body);
    // Calculate total amount if items are provided
    const totalAmount =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[130]++, items ?
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[35][0]++, items.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[23]++;
      cov_2l17pxdpj8().s[131]++;
      return sum + item.quantity * item.unitPrice;
    }, 0)) :
    /* istanbul ignore next */
    (cov_2l17pxdpj8().b[35][1]++, undefined));
    const result =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[132]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[24]++;
      // Get current invoice for comparison
      const currentInvoice =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[133]++, await tx.purchaseInvoice.findUnique({
        where: {
          id: parseInt(id)
        },
        include: {
          items: true
        }
      }));
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[134]++;
      if (!currentInvoice) {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[36][0]++;
        cov_2l17pxdpj8().s[135]++;
        throw new Error("Purchase invoice not found");
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[36][1]++;
      }
      // Update the purchase invoice
      const updatedInvoice =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[136]++, await tx.purchaseInvoice.update({
        where: {
          id: parseInt(id)
        },
        data: {
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[37][0]++, invoiceNumber) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[37][1]++, {
            invoiceNumber
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[38][0]++, supplierId) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[38][1]++, {
            supplierId: parseInt(supplierId)
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[39][0]++, date) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[39][1]++, {
            date: new Date(date)
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[40][0]++, totalAmount !== undefined) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[40][1]++, {
            totalAmount
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[41][0]++, status) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[41][1]++, {
            status
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[42][0]++, notes !== undefined) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[42][1]++, {
            notes
          })),
          ...(
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[43][0]++, items) &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[43][1]++, {
            items: {
              deleteMany: {},
              create: items.map(item => {
                /* istanbul ignore next */
                cov_2l17pxdpj8().f[25]++;
                cov_2l17pxdpj8().s[137]++;
                return {
                  productId: item.productId,
                  quantity: item.quantity,
                  unitPrice: item.unitPrice,
                  totalPrice: item.quantity * item.unitPrice
                };
              })
            }
          }))
        },
        include: {
          supplier: {
            select: {
              id: true,
              name: true,
              email: true,
              phone: true
            }
          },
          items: {
            include: {
              product: {
                select: {
                  id: true,
                  name: true,
                  sku: true
                }
              }
            }
          }
        }
      }));
      // Handle inventory updates if status changed to/from paid
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[138]++;
      if (
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[45][0]++, status) &&
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[45][1]++, status !== currentInvoice.status)) {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[44][0]++;
        const itemsToProcess =
        /* istanbul ignore next */
        (cov_2l17pxdpj8().s[139]++,
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[46][0]++, items) ||
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[46][1]++, currentInvoice.items));
        /* istanbul ignore next */
        cov_2l17pxdpj8().s[140]++;
        if (
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[48][0]++, status === "paid") &&
        /* istanbul ignore next */
        (cov_2l17pxdpj8().b[48][1]++, currentInvoice.status !== "paid")) {
          /* istanbul ignore next */
          cov_2l17pxdpj8().b[47][0]++;
          cov_2l17pxdpj8().s[141]++;
          // Add to inventory
          for (const item of itemsToProcess) {
            /* istanbul ignore next */
            cov_2l17pxdpj8().s[142]++;
            await tx.inventory.updateMany({
              where: {
                productId: item.productId
              },
              data: {
                quantity: {
                  increment: item.quantity
                }
              }
            });
          }
        } else {
          /* istanbul ignore next */
          cov_2l17pxdpj8().b[47][1]++;
          cov_2l17pxdpj8().s[143]++;
          if (
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[50][0]++, status !== "paid") &&
          /* istanbul ignore next */
          (cov_2l17pxdpj8().b[50][1]++, currentInvoice.status === "paid")) {
            /* istanbul ignore next */
            cov_2l17pxdpj8().b[49][0]++;
            cov_2l17pxdpj8().s[144]++;
            // Remove from inventory
            for (const item of itemsToProcess) {
              /* istanbul ignore next */
              cov_2l17pxdpj8().s[145]++;
              await tx.inventory.updateMany({
                where: {
                  productId: item.productId
                },
                data: {
                  quantity: {
                    decrement: item.quantity
                  }
                }
              });
            }
          } else
          /* istanbul ignore next */
          {
            cov_2l17pxdpj8().b[49][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[44][1]++;
      }
      cov_2l17pxdpj8().s[146]++;
      return updatedInvoice;
    }));
    // Clear related caches
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[147]++;
    await Promise.all([_cache.cacheService.clear("purchases-optimized"), _cache.cacheService.clear("purchase-stats"), _cache.cacheService.clear("inventory")]);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[148]++;
    return _server.NextResponse.json({
      success: true,
      data: result,
      message: "Purchase invoice updated successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[149]++;
    console.error("Error updating purchase invoice:", error);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[150]++;
    return _server.NextResponse.json({
      error: "Failed to update purchase invoice",
      message: process.env.NODE_ENV === "development" ?
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[51][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[51][1]++, "Something went wrong")
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_2l17pxdpj8().f[26]++;
  cov_2l17pxdpj8().s[151]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[152]++, await (0, _jwt.getToken)({
      req: request
    }));
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[153]++;
    if (!token) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[52][0]++;
      cov_2l17pxdpj8().s[154]++;
      return _server.NextResponse.json({
        error: "Unauthorized"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[52][1]++;
    }
    const url =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[155]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[156]++, url.pathname.split("/").pop());
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[157]++;
    if (!id) {
      /* istanbul ignore next */
      cov_2l17pxdpj8().b[53][0]++;
      cov_2l17pxdpj8().s[158]++;
      return _server.NextResponse.json({
        error: "Invoice ID is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2l17pxdpj8().b[53][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2l17pxdpj8().s[159]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2l17pxdpj8().f[27]++;
      // Get invoice details before deletion
      const invoice =
      /* istanbul ignore next */
      (cov_2l17pxdpj8().s[160]++, await tx.purchaseInvoice.findUnique({
        where: {
          id: parseInt(id)
        },
        include: {
          items: true
        }
      }));
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[161]++;
      if (!invoice) {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[54][0]++;
        cov_2l17pxdpj8().s[162]++;
        throw new Error("Purchase invoice not found");
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[54][1]++;
      }
      // If invoice was paid, adjust inventory
      cov_2l17pxdpj8().s[163]++;
      if (invoice.status === "paid") {
        /* istanbul ignore next */
        cov_2l17pxdpj8().b[55][0]++;
        cov_2l17pxdpj8().s[164]++;
        for (const item of invoice.items) {
          /* istanbul ignore next */
          cov_2l17pxdpj8().s[165]++;
          await tx.inventory.updateMany({
            where: {
              productId: item.productId
            },
            data: {
              quantity: {
                decrement: item.quantity
              }
            }
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_2l17pxdpj8().b[55][1]++;
      }
      // Delete the invoice (items will be deleted due to cascade)
      cov_2l17pxdpj8().s[166]++;
      await tx.purchaseInvoice.delete({
        where: {
          id: parseInt(id)
        }
      });
      /* istanbul ignore next */
      cov_2l17pxdpj8().s[167]++;
      return invoice;
    }));
    // Clear related caches
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[168]++;
    await Promise.all([_cache.cacheService.clear("purchases-optimized"), _cache.cacheService.clear("purchase-stats"), _cache.cacheService.clear("inventory")]);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[169]++;
    return _server.NextResponse.json({
      success: true,
      message: "Purchase invoice deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[170]++;
    console.error("Error deleting purchase invoice:", error);
    /* istanbul ignore next */
    cov_2l17pxdpj8().s[171]++;
    return _server.NextResponse.json({
      error: "Failed to delete purchase invoice",
      message: process.env.NODE_ENV === "development" ?
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[56][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2l17pxdpj8().b[56][1]++, "Something went wrong")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,