{"version":3,"names":["DELETE","cov_2mp5pubv8y","f","s","GET","POST","req","searchParams","URL","url","key","get","b","console","log","setting","_prisma","prisma","systemSettings","findUnique","where","_server","NextResponse","json","success","message","status","value","length","permissionError","_middleware","requirePermission","settings","findMany","error","data","description","undefined","existingSetting","update","create","delete"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: Retrieve all system settings or a specific setting by key\nexport async function GET(req: NextRequest) {\n    try {\n        const { searchParams } = new URL(req.url);\n        const key = searchParams.get('key');\n\n        // If key is provided, return just that setting (no permission check for specific key)\n        if (key) {\n            console.log(`Fetching specific setting: ${key}`);\n            const setting = await prisma.systemSettings.findUnique({\n                where: { key }\n            });\n\n            if (!setting) {\n                console.log(`Setting not found: ${key}`);\n                return NextResponse.json({\n                    success: false,\n                    message: 'Setting not found'\n                }, { status: 404 });\n            }\n\n            console.log(`Setting found: ${key}, value length: ${setting.value?.length || 0}`);\n            return NextResponse.json({\n                success: true,\n                setting\n            });\n        }\n\n        // If fetching all settings, require permission\n        const permissionError = await requirePermission('settings:manage')(req);\n        if (permissionError) {\n            return permissionError;\n        }\n\n        // Otherwise return all settings\n        console.log('Fetching all settings');\n        const settings = await prisma.systemSettings.findMany();\n        console.log(`Found ${settings.length} settings`);\n\n        return NextResponse.json({\n            success: true,\n            settings\n        });\n    } catch (error) {\n        console.error('Error fetching settings:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch settings' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create or update system settings\nexport async function POST(req: NextRequest) {\n    // Check for 'settings:manage' permission\n    const permissionError = await requirePermission('settings:manage')(req);\n    if (permissionError) {\n        console.error('Permission denied for settings:manage');\n        return permissionError;\n    }\n\n    try {\n        const data = await req.json();\n        const { key, value, description } = data;\n\n        // Validate input\n        if (!key || value === undefined) {\n            return NextResponse.json(\n                { success: false, message: 'Key and value are required' },\n                { status: 400 }\n            );\n        }\n\n        console.log(`Saving setting: ${key}, value length: ${value?.length || 0}`);\n\n        // Check if setting exists\n        const existingSetting = await prisma.systemSettings.findUnique({\n            where: { key }\n        });\n\n        let setting;\n        if (existingSetting) {\n            // Update existing setting\n            setting = await prisma.systemSettings.update({\n                where: { key },\n                data: {\n                    value,\n                    description: description || existingSetting.description\n                }\n            });\n            console.log(`Updated setting: ${key}`);\n        } else {\n            // Create new setting\n            setting = await prisma.systemSettings.create({\n                data: {\n                    key,\n                    value,\n                    description\n                }\n            });\n            console.log(`Created new setting: ${key}`);\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: existingSetting ? 'Setting updated successfully' : 'Setting created successfully',\n            setting\n        });\n    } catch (error) {\n        console.error('Error saving setting:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to save setting' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete a system setting\nexport async function DELETE(req: NextRequest) {\n    // Check for 'settings:manage' permission\n    const permissionError = await requirePermission('settings:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const { searchParams } = new URL(req.url);\n        const key = searchParams.get('key');\n\n        if (!key) {\n            return NextResponse.json(\n                { success: false, message: 'Key parameter is required' },\n                { status: 400 }\n            );\n        }\n\n        await prisma.systemSettings.delete({\n            where: { key }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Setting deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting setting:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete setting' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}