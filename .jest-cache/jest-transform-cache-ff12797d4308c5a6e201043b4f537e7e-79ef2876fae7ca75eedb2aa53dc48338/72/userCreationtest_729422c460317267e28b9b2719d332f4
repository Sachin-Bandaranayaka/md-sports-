a494620e2aeeedae1ca619bdab4f70ad
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _globals = require("@jest/globals");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _crypto = require("crypto");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
const mockPrisma = {
    user: {
        create: _globals.jest.fn(),
        findUnique: _globals.jest.fn()
    },
    shop: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn()
    },
    permission: {
        upsert: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn()
    },
    role: {
        upsert: _globals.jest.fn()
    }
};
const mockRouter = {
    push: _globals.jest.fn(),
    replace: _globals.jest.fn(),
    back: _globals.jest.fn()
};
const mockUseAuth = {
    user: {
        id: 1,
        name: "Admin User",
        email: "admin@test.com",
        permissions: [
            "user:manage",
            "admin:all"
        ]
    },
    isAuthenticated: true,
    hasPermission: _globals.jest.fn().mockReturnValue(true)
};
// Mock modules
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
_globals.jest.mock("next/navigation", ()=>({
        useRouter: ()=>mockRouter,
        useParams: ()=>({
                id: "1"
            })
    }));
_globals.jest.mock("@/hooks/useAuth", ()=>({
        useAuth: ()=>mockUseAuth
    }));
_globals.jest.mock("bcryptjs", ()=>({
        hash: _globals.jest.fn()
    }));
_globals.jest.mock("crypto", ()=>({
        randomUUID: _globals.jest.fn()
    }));
// Mock fetch globally
global.fetch = _globals.jest.fn();
// Mock component for testing form logic
const MockUserCreationForm = ({ onSubmit })=>{
    const [formData, setFormData] = React.useState({
        name: "",
        email: "",
        password: "",
        confirmPassword: "",
        shop: "",
        permissions: [],
        allowedAccounts: []
    });
    const handleSubmit = (e)=>{
        e.preventDefault();
        onSubmit(formData);
    };
    const handleChange = (e)=>{
        const { name, value } = e.target;
        setFormData((prev)=>({
                ...prev,
                [name]: value
            }));
    };
    const handlePermissionChange = (permissionId)=>{
        setFormData((prev)=>({
                ...prev,
                permissions: prev.permissions.includes(permissionId) ? prev.permissions.filter((id)=>id !== permissionId) : [
                    ...prev.permissions,
                    permissionId
                ]
            }));
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        "data-testid": "user-creation-form",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "name-input",
                name: "name",
                value: formData.name,
                onChange: handleChange,
                placeholder: "Full Name"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "email-input",
                name: "email",
                type: "email",
                value: formData.email,
                onChange: handleChange,
                placeholder: "Email"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "password-input",
                name: "password",
                type: "password",
                value: formData.password,
                onChange: handleChange,
                placeholder: "Password"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                "data-testid": "confirm-password-input",
                name: "confirmPassword",
                type: "password",
                value: formData.confirmPassword,
                onChange: handleChange,
                placeholder: "Confirm Password"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                "data-testid": "shop-select",
                name: "shop",
                value: formData.shop,
                onChange: handleChange,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "",
                        children: "Select Shop"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "shop-1",
                        children: "Main Store"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "shop-2",
                        children: "Warehouse"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "permissions-section",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "checkbox",
                                "data-testid": "permission-admin-all",
                                onChange: ()=>handlePermissionChange("admin:all")
                            }),
                            "Admin All"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "checkbox",
                                "data-testid": "permission-shop-staff",
                                onChange: ()=>handlePermissionChange("shop:assigned_only")
                            }),
                            "Shop Staff"
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                "data-testid": "submit-button",
                children: "Create User"
            })
        ]
    });
};
describe("User Creation Process", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        global.fetch.mockClear();
    });
    describe("User Creation Form", ()=>{
        test("should render all form fields correctly", ()=>{
            const mockOnSubmit = _globals.jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockUserCreationForm, {
                onSubmit: mockOnSubmit
            }));
            expect(_react.screen.getByTestId("user-creation-form")).toBeInTheDocument();
            expect(_react.screen.getByTestId("name-input")).toBeInTheDocument();
            expect(_react.screen.getByTestId("email-input")).toBeInTheDocument();
            expect(_react.screen.getByTestId("password-input")).toBeInTheDocument();
            expect(_react.screen.getByTestId("confirm-password-input")).toBeInTheDocument();
            expect(_react.screen.getByTestId("shop-select")).toBeInTheDocument();
            expect(_react.screen.getByTestId("permissions-section")).toBeInTheDocument();
            expect(_react.screen.getByTestId("submit-button")).toBeInTheDocument();
        });
        test("should handle form input changes", async ()=>{
            const mockOnSubmit = _globals.jest.fn();
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockUserCreationForm, {
                onSubmit: mockOnSubmit
            }));
            await user.type(_react.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react.screen.getByTestId("password-input"), "password123");
            await user.type(_react.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react.screen.getByTestId("shop-select"), "shop-1");
            expect(_react.screen.getByTestId("name-input")).toHaveValue("John Doe");
            expect(_react.screen.getByTestId("email-input")).toHaveValue("john@example.com");
            expect(_react.screen.getByTestId("password-input")).toHaveValue("password123");
            expect(_react.screen.getByTestId("confirm-password-input")).toHaveValue("password123");
            expect(_react.screen.getByTestId("shop-select")).toHaveValue("shop-1");
        });
        test("should handle permission selection", async ()=>{
            const mockOnSubmit = _globals.jest.fn();
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockUserCreationForm, {
                onSubmit: mockOnSubmit
            }));
            await user.click(_react.screen.getByTestId("permission-admin-all"));
            await user.click(_react.screen.getByTestId("permission-shop-staff"));
            expect(_react.screen.getByTestId("permission-admin-all")).toBeChecked();
            expect(_react.screen.getByTestId("permission-shop-staff")).toBeChecked();
        });
        test("should submit form with correct data", async ()=>{
            const mockOnSubmit = _globals.jest.fn();
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockUserCreationForm, {
                onSubmit: mockOnSubmit
            }));
            await user.type(_react.screen.getByTestId("name-input"), "John Doe");
            await user.type(_react.screen.getByTestId("email-input"), "john@example.com");
            await user.type(_react.screen.getByTestId("password-input"), "password123");
            await user.type(_react.screen.getByTestId("confirm-password-input"), "password123");
            await user.selectOptions(_react.screen.getByTestId("shop-select"), "shop-1");
            await user.click(_react.screen.getByTestId("permission-admin-all"));
            await user.click(_react.screen.getByTestId("submit-button"));
            expect(mockOnSubmit).toHaveBeenCalledWith({
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                confirmPassword: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ],
                allowedAccounts: []
            });
        });
    });
    describe("Form Validation Logic", ()=>{
        test("should validate required fields", ()=>{
            const validateUserData = (data)=>{
                const errors = [];
                if (!data.name) errors.push("Name is required");
                if (!data.email) errors.push("Email is required");
                if (!data.password) errors.push("Password is required");
                if (!data.shop) errors.push("Shop assignment is required");
                if (!data.permissions || data.permissions.length === 0) {
                    errors.push("At least one permission is required");
                }
                return errors;
            };
            const invalidData = {
                name: "",
                email: "",
                password: "",
                shop: "",
                permissions: []
            };
            const errors = validateUserData(invalidData);
            expect(errors).toContain("Name is required");
            expect(errors).toContain("Email is required");
            expect(errors).toContain("Password is required");
            expect(errors).toContain("Shop assignment is required");
            expect(errors).toContain("At least one permission is required");
        });
        test("should validate password requirements", ()=>{
            const validatePassword = (password)=>{
                const errors = [];
                if (password.length < 8) {
                    errors.push("Password must be at least 8 characters");
                }
                return errors;
            };
            expect(validatePassword("123")).toContain("Password must be at least 8 characters");
            expect(validatePassword("password123")).toHaveLength(0);
        });
        test("should validate password confirmation", ()=>{
            const validatePasswordConfirmation = (password, confirmPassword)=>{
                return password === confirmPassword;
            };
            expect(validatePasswordConfirmation("password123", "password123")).toBe(true);
            expect(validatePasswordConfirmation("password123", "different")).toBe(false);
        });
        test("should validate email format", ()=>{
            const validateEmail = (email)=>{
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email);
            };
            expect(validateEmail("valid@example.com")).toBe(true);
            expect(validateEmail("invalid-email")).toBe(false);
            expect(validateEmail("invalid@")).toBe(false);
        });
    });
    describe("API Integration", ()=>{
        test("should call user creation API with correct data", async ()=>{
            const mockResponse = {
                success: true,
                message: "User created successfully",
                data: {
                    id: "user-123",
                    name: "John Doe",
                    email: "john@example.com"
                }
            };
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ],
                allowedAccounts: []
            };
            const response = await fetch("/api/users", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer dev-token"
                },
                body: JSON.stringify(userData)
            });
            const result = await response.json();
            expect(global.fetch).toHaveBeenCalledWith("/api/users", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer dev-token"
                },
                body: JSON.stringify(userData)
            });
            expect(result.success).toBe(true);
            expect(result.data.name).toBe("John Doe");
        });
        test("should handle API errors gracefully", async ()=>{
            const mockErrorResponse = {
                success: false,
                message: "Email already exists"
            };
            global.fetch.mockResolvedValueOnce({
                ok: false,
                status: 400,
                json: async ()=>mockErrorResponse
            });
            const userData = {
                name: "John Doe",
                email: "existing@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ]
            };
            const response = await fetch("/api/users", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer dev-token"
                },
                body: JSON.stringify(userData)
            });
            const result = await response.json();
            expect(result.success).toBe(false);
            expect(result.message).toBe("Email already exists");
        });
    });
    describe("User Creation API Endpoint", ()=>{
        // Mock the API route handler logic
        const createUserHandler = async (userData)=>{
            // Validation
            if (!userData.name) {
                return {
                    success: false,
                    message: "Name is required",
                    status: 400
                };
            }
            if (!userData.email) {
                return {
                    success: false,
                    message: "Email is required",
                    status: 400
                };
            }
            if (!userData.password || userData.password.length < 8) {
                return {
                    success: false,
                    message: "Password must be at least 8 characters",
                    status: 400
                };
            }
            if (!userData.shop) {
                return {
                    success: false,
                    message: "Shop assignment is required",
                    status: 400
                };
            }
            if (!userData.permissions || userData.permissions.length === 0) {
                return {
                    success: false,
                    message: "At least one permission is required",
                    status: 400
                };
            }
            // Mock shop validation
            mockPrisma.shop.findUnique.mockResolvedValue({
                id: userData.shop,
                name: "Test Shop"
            });
            // Mock password hashing
            _bcryptjs.default.hash.mockResolvedValue("hashed-password");
            // Mock UUID generation
            _crypto.randomUUID.mockReturnValue("user-123");
            // Mock user creation
            const createdUser = {
                id: "user-123",
                name: userData.name,
                email: userData.email,
                shopId: userData.shop,
                permissions: userData.permissions,
                createdAt: new Date(),
                shop: {
                    id: userData.shop,
                    name: "Test Shop"
                }
            };
            mockPrisma.user.create.mockResolvedValue(createdUser);
            return {
                success: true,
                message: "User created successfully",
                data: createdUser,
                status: 200
            };
        };
        test("should create user successfully with valid data", async ()=>{
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ],
                allowedAccounts: []
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(true);
            expect(result.message).toBe("User created successfully");
            expect(result.data.name).toBe("John Doe");
            expect(result.data.email).toBe("john@example.com");
            expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "shop-1"
                }
            });
            expect(_bcryptjs.default.hash).toHaveBeenCalledWith("password123", 12);
            expect(mockPrisma.user.create).toHaveBeenCalled();
        });
        test("should reject user creation with missing name", async ()=>{
            const userData = {
                name: "",
                email: "john@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ]
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(false);
            expect(result.message).toBe("Name is required");
            expect(result.status).toBe(400);
        });
        test("should reject user creation with missing email", async ()=>{
            const userData = {
                name: "John Doe",
                email: "",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ]
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(false);
            expect(result.message).toBe("Email is required");
            expect(result.status).toBe(400);
        });
        test("should reject user creation with weak password", async ()=>{
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ]
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(false);
            expect(result.message).toBe("Password must be at least 8 characters");
            expect(result.status).toBe(400);
        });
        test("should reject user creation without shop assignment", async ()=>{
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                shop: "",
                permissions: [
                    "admin:all"
                ]
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(false);
            expect(result.message).toBe("Shop assignment is required");
            expect(result.status).toBe(400);
        });
        test("should reject user creation without permissions", async ()=>{
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: []
            };
            const result = await createUserHandler(userData);
            expect(result.success).toBe(false);
            expect(result.message).toBe("At least one permission is required");
            expect(result.status).toBe(400);
        });
        test("should handle database errors gracefully", async ()=>{
            const userData = {
                name: "John Doe",
                email: "john@example.com",
                password: "password123",
                shop: "shop-1",
                permissions: [
                    "admin:all"
                ]
            };
            mockPrisma.shop.findUnique.mockRejectedValue(new Error("Database connection failed"));
            try {
                await createUserHandler(userData);
            } catch (error) {
                expect(error).toBeInstanceOf(Error);
            }
        });
    });
    describe("Role Assignment Logic", ()=>{
        test("should assign Admin role for admin permissions", ()=>{
            const determineRole = (permissions)=>{
                if (permissions.includes("admin:all") || permissions.includes("ALL")) {
                    return {
                        roleId: "admin-role-id",
                        roleName: "Admin"
                    };
                }
                if (permissions.includes("shop:assigned_only")) {
                    return {
                        roleId: "shop-staff-role-id",
                        roleName: "Shop Staff"
                    };
                }
                return {
                    roleId: null,
                    roleName: null
                };
            };
            const adminRole = determineRole([
                "admin:all"
            ]);
            expect(adminRole.roleName).toBe("Admin");
            expect(adminRole.roleId).toBe("admin-role-id");
            const shopStaffRole = determineRole([
                "shop:assigned_only"
            ]);
            expect(shopStaffRole.roleName).toBe("Shop Staff");
            expect(shopStaffRole.roleId).toBe("shop-staff-role-id");
        });
    });
    describe("Permission Processing", ()=>{
        test("should process shop:assigned_only permission correctly", async ()=>{
            const processPermissions = async (permissions)=>{
                if (permissions.includes("shop:assigned_only")) {
                    // Mock permission upsert
                    mockPrisma.permission.upsert.mockResolvedValue({
                        id: "perm-123",
                        name: "shop:assigned_only",
                        description: "Restricts user access to only their assigned shop"
                    });
                    const shopAssignedPermission = await mockPrisma.permission.upsert({
                        where: {
                            name: "shop:assigned_only"
                        },
                        update: {},
                        create: {
                            name: "shop:assigned_only",
                            description: "Restricts user access to only their assigned shop"
                        }
                    });
                    return permissions.map((p)=>p === "shop:assigned_only" ? shopAssignedPermission.id : p);
                }
                return permissions;
            };
            const processedPermissions = await processPermissions([
                "shop:assigned_only",
                "sales:view"
            ]);
            expect(mockPrisma.permission.upsert).toHaveBeenCalledWith({
                where: {
                    name: "shop:assigned_only"
                },
                update: {},
                create: {
                    name: "shop:assigned_only",
                    description: "Restricts user access to only their assigned shop"
                }
            });
            expect(processedPermissions).toEqual([
                "perm-123",
                "sales:view"
            ]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,