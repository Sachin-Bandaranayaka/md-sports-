022db28db31fd45288dc479e338abb32
"use strict";

/* istanbul ignore next */
function cov_160ik5gwij() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/db-init/route.ts";
  var hash = "e1c32c771fe2ea27cc45db77be4110bf6dc9f4dc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/db-init/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 19
          },
          end: {
            line: 26,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 44
          },
          end: {
            line: 26,
            column: 57
          }
        }, {
          start: {
            line: 26,
            column: 60
          },
          end: {
            line: 26,
            column: 73
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/db-init/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\nexport async function POST(request: Request) {\n    try {\n        // With Prisma, we don't need to manually sync the database\n        // as Prisma handles migrations through prisma migrate\n        // This endpoint could be used for other initialization tasks\n\n        return NextResponse.json({\n            success: true,\n            message: 'Database connection verified successfully.',\n        });\n    } catch (error) {\n        console.error('Error connecting to database:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error connecting to database',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n} "],
      names: ["POST", "request", "NextResponse", "json", "success", "message", "error", "console", "Error", "String", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;AAGtB,eAAeA,KAAKC,OAAgB;IACvC,IAAI;QACA,2DAA2D;QAC3D,sDAAsD;QACtD,6DAA6D;QAE7D,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;QACb;IACJ,EAAE,OAAOC,OAAO;QACZC,QAAQD,KAAK,CAAC,iCAAiCA;QAC/C,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTC,OAAOA,iBAAiBE,QAAQF,MAAMD,OAAO,GAAGI,OAAOH;QAC3D,GAAG;YAAEI,QAAQ;QAAI;IACrB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e1c32c771fe2ea27cc45db77be4110bf6dc9f4dc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_160ik5gwij = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_160ik5gwij();
cov_160ik5gwij().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_160ik5gwij().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_160ik5gwij().f[0]++;
    cov_160ik5gwij().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_160ik5gwij().s[3]++, require("next/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_160ik5gwij().f[1]++;
  cov_160ik5gwij().s[4]++;
  try {
    /* istanbul ignore next */
    cov_160ik5gwij().s[5]++;
    // With Prisma, we don't need to manually sync the database
    // as Prisma handles migrations through prisma migrate
    // This endpoint could be used for other initialization tasks
    return _server.NextResponse.json({
      success: true,
      message: "Database connection verified successfully."
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_160ik5gwij().s[6]++;
    console.error("Error connecting to database:", error);
    /* istanbul ignore next */
    cov_160ik5gwij().s[7]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error connecting to database",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_160ik5gwij().b[0][0]++, error.message) :
      /* istanbul ignore next */
      (cov_160ik5gwij().b[0][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTYwaWs1Z3dpaiIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJyZXF1ZXN0IiwiZiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsImIiLCJTdHJpbmciLCJzdGF0dXMiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL2RiLWluaXQvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHByaXNtYSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gV2l0aCBQcmlzbWEsIHdlIGRvbid0IG5lZWQgdG8gbWFudWFsbHkgc3luYyB0aGUgZGF0YWJhc2VcbiAgICAgICAgLy8gYXMgUHJpc21hIGhhbmRsZXMgbWlncmF0aW9ucyB0aHJvdWdoIHByaXNtYSBtaWdyYXRlXG4gICAgICAgIC8vIFRoaXMgZW5kcG9pbnQgY291bGQgYmUgdXNlZCBmb3Igb3RoZXIgaW5pdGlhbGl6YXRpb24gdGFza3NcblxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdEYXRhYmFzZSBjb25uZWN0aW9uIHZlcmlmaWVkIHN1Y2Nlc3NmdWxseS4nLFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb25uZWN0aW5nIHRvIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGNvbm5lY3RpbmcgdG8gZGF0YWJhc2UnLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICAgIH1cbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFPUTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUpjOzs7Ozs7V0FBQUMsSUFBQTs7Ozs7a0NBSE87QUFHdEIsZUFBZUEsS0FBS0MsT0FBZ0I7RUFBQTtFQUFBSixjQUFBLEdBQUFLLENBQUE7RUFBQUwsY0FBQSxHQUFBRSxDQUFBO0VBQ3ZDLElBQUk7SUFBQTtJQUFBRixjQUFBLEdBQUFFLENBQUE7SUFDQTtJQUNBO0lBQ0E7SUFFQSxPQUFPSSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQ3JCQyxPQUFBLEVBQVM7TUFDVEMsT0FBQSxFQUFTO0lBQ2I7RUFDSixFQUFFLE9BQU9DLEtBQUEsRUFBTztJQUFBO0lBQUFYLGNBQUEsR0FBQUUsQ0FBQTtJQUNaVSxPQUFBLENBQVFELEtBQUssQ0FBQyxpQ0FBaUNBLEtBQUE7SUFBQTtJQUFBWCxjQUFBLEdBQUFFLENBQUE7SUFDL0MsT0FBT0ksT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztNQUNyQkMsT0FBQSxFQUFTO01BQ1RDLE9BQUEsRUFBUztNQUNUQyxLQUFBLEVBQU9BLEtBQUEsWUFBaUJFLEtBQUE7TUFBQTtNQUFBLENBQUFiLGNBQUEsR0FBQWMsQ0FBQSxVQUFRSCxLQUFBLENBQU1ELE9BQU87TUFBQTtNQUFBLENBQUFWLGNBQUEsR0FBQWMsQ0FBQSxVQUFHQyxNQUFBLENBQU9KLEtBQUE7SUFDM0QsR0FBRztNQUFFSyxNQUFBLEVBQVE7SUFBSTtFQUNyQjtBQUNKIiwiaWdub3JlTGlzdCI6W119