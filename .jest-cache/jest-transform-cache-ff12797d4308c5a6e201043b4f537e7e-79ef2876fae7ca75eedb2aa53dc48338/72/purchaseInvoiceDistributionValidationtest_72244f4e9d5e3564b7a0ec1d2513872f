63bfa5e55033996812f9b905554604b7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _server = require("next/server");
// Mock globals for Next.js compatibility in Node.js test environment
if (typeof Request === "undefined") {
    global.Request = class MockRequest {
        constructor(url, init){
            this.url = url;
            this.method = init?.method || "GET";
            this.headers = new Map();
        }
        json() {
            return Promise.resolve({});
        }
    };
}
if (typeof Response === "undefined") {
    global.Response = class MockResponse {
        constructor(body, init){
            this.status = init?.status || 200;
            this.headers = new Map();
        }
        json() {
            return Promise.resolve({});
        }
    };
}
// Mock Prisma
const mockPrisma = {
    purchaseInvoice: {
        create: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        update: _globals.jest.fn()
    },
    purchaseInvoiceItem: {
        create: _globals.jest.fn(),
        createMany: _globals.jest.fn()
    },
    product: {
        findUnique: _globals.jest.fn(),
        update: _globals.jest.fn()
    },
    inventoryItem: {
        findMany: _globals.jest.fn(),
        findFirst: _globals.jest.fn(),
        update: _globals.jest.fn(),
        create: _globals.jest.fn()
    },
    $transaction: _globals.jest.fn()
};
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
_globals.jest.mock("@/lib/cache-enhanced", ()=>({
        cacheService: {
            invalidateInventory: _globals.jest.fn(),
            del: _globals.jest.fn(),
            invalidatePattern: _globals.jest.fn()
        }
    }));
// Import the API handler (we'll mock the actual implementation)
const createPurchaseInvoiceAPI = async (request)=>{
    const body = await request.json();
    const { items, distributions, totalAmount, supplierId, ...rest } = body;
    // Validation logic from the actual API
    if (!items || !Array.isArray(items) || items.length === 0) {
        return {
            success: false,
            message: "At least one purchase item is required",
            status: 400
        };
    }
    if (!distributions || !Array.isArray(distributions) || distributions.length !== items.length) {
        return {
            success: false,
            message: "Distribution for each item is required",
            status: 400
        };
    }
    for(let i = 0; i < items.length; i++){
        const item = items[i];
        const dist = distributions[i];
        if (!dist || typeof dist !== "object" || Object.keys(dist).length === 0) {
            return {
                success: false,
                message: `Distribution for product ${item.productId} is missing`,
                status: 400
            };
        }
        let totalDistributed = 0;
        for (const qty of Object.values(dist)){
            const num = Number(qty);
            if (isNaN(num) || num < 0) {
                return {
                    success: false,
                    message: `Invalid distributed quantity for product ${item.productId}`,
                    status: 400
                };
            }
            totalDistributed += num;
        }
        if (totalDistributed !== item.quantity) {
            return {
                success: false,
                message: `Distributed quantity (${totalDistributed}) does not match purchased quantity (${item.quantity}) for product ${item.productId}`,
                status: 400
            };
        }
    }
    // If validation passes, simulate successful creation
    const mockInvoice = {
        id: 1,
        invoiceNumber: body.invoiceNumber || "PI-TEST-001",
        supplierId: parseInt(supplierId),
        total: totalAmount || 0,
        status: body.status || "pending_approval",
        createdAt: new Date(),
        updatedAt: new Date()
    };
    return {
        success: true,
        data: mockInvoice,
        status: 201
    };
};
(0, _globals.describe)("Purchase Invoice API - Distribution Validation Integration", ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        mockPrisma.$transaction.mockImplementation(async (callback)=>{
            return await callback(mockPrisma);
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("POST /api/purchases - Distribution Validation", ()=>{
        (0, _globals.it)("should reject request with no items", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [],
                distributions: []
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("At least one purchase item is required");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should reject request with missing distributions", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [] // Missing distributions
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distribution for each item is required");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should reject request with empty distribution objects", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {} // Empty distribution object
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distribution for product 1 is missing");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should reject request with invalid distribution quantities", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": -5
                    } // Negative quantity
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Invalid distributed quantity for product 1");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should reject request with mismatched distribution quantities", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": 5,
                        "shop2": 3
                    } // Total: 8, but required: 10
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distributed quantity (8) does not match purchased quantity (10) for product 1");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should reject request with over-distributed quantities", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": 7,
                        "shop2": 5
                    } // Total: 12, but required: 10
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distributed quantity (12) does not match purchased quantity (10) for product 1");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should accept valid request with proper distributions", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": 6,
                        "shop2": 4
                    } // Total: 10, matches required
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.data).toMatchObject({
                id: 1,
                supplierId: 1,
                total: 1000
            });
            (0, _globals.expect)(result.status).toBe(201);
        });
        (0, _globals.it)("should handle multiple items with valid distributions", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1500,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    },
                    {
                        productId: 2,
                        quantity: 5,
                        price: 200
                    }
                ],
                distributions: [
                    {
                        "shop1": 6,
                        "shop2": 4
                    },
                    {
                        "shop1": 5
                    } // Item 2: Total 5
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.data).toMatchObject({
                id: 1,
                supplierId: 1,
                total: 1500
            });
            (0, _globals.expect)(result.status).toBe(201);
        });
        (0, _globals.it)("should handle string quantities in distributions", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": "6",
                        "shop2": "4"
                    } // String values that convert to numbers
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.status).toBe(201);
        });
        (0, _globals.it)("should reject NaN distribution quantities", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": "invalid",
                        "shop2": 4
                    } // Invalid string that becomes NaN
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Invalid distributed quantity for product 1");
            (0, _globals.expect)(result.status).toBe(400);
        });
    });
    (0, _globals.describe)("Edge Cases", ()=>{
        (0, _globals.it)("should handle zero quantity items", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 0,
                items: [
                    {
                        productId: 1,
                        quantity: 0,
                        price: 100
                    }
                ],
                distributions: [
                    {
                        "shop1": 0
                    } // Zero distribution for zero quantity
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.status).toBe(201);
        });
        (0, _globals.it)("should validate each item individually", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1500,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    },
                    {
                        productId: 2,
                        quantity: 5,
                        price: 200
                    } // Invalid distribution
                ],
                distributions: [
                    {
                        "shop1": 6,
                        "shop2": 4
                    },
                    {
                        "shop1": 3
                    } // Invalid: Total 3, but required 5
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distributed quantity (3) does not match purchased quantity (5) for product 2");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should handle complex distribution across multiple shops", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 20,
                        price: 50
                    }
                ],
                distributions: [
                    {
                        "shop1": 8,
                        "shop2": 5,
                        "shop3": 4,
                        "shop4": 3
                    } // Total: 20
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.status).toBe(201);
        });
    });
    (0, _globals.describe)("Error Handling", ()=>{
        (0, _globals.it)("should handle malformed distribution objects", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    }
                ],
                distributions: [
                    null // null distribution
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distribution for product 1 is missing");
            (0, _globals.expect)(result.status).toBe(400);
        });
        (0, _globals.it)("should handle mismatched array lengths", async ()=>{
            const requestData = {
                supplierId: "1",
                totalAmount: 1000,
                items: [
                    {
                        productId: 1,
                        quantity: 10,
                        price: 100
                    },
                    {
                        productId: 2,
                        quantity: 5,
                        price: 200
                    }
                ],
                distributions: [
                    {
                        "shop1": 10
                    } // Only one distribution for two items
                ]
            };
            const request = new _server.NextRequest("http://localhost/api/purchases", {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            const result = await createPurchaseInvoiceAPI(request);
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.message).toBe("Distribution for each item is required");
            (0, _globals.expect)(result.status).toBe(400);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,