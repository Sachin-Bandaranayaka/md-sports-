{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/purchaseInvoiceDistributionValidation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\n\n// Mock globals for Next.js compatibility in Node.js test environment\nif (typeof Request === 'undefined') {\n  global.Request = class MockRequest {\n    url: string;\n    method: string;\n    headers: Map<string, string>;\n    constructor(url: string, init?: any) {\n      this.url = url;\n      this.method = init?.method || 'GET';\n      this.headers = new Map();\n    }\n    json() { return Promise.resolve({}); }\n  } as any;\n}\n\nif (typeof Response === 'undefined') {\n  global.Response = class MockResponse {\n    status: number;\n    headers: Map<string, string>;\n    constructor(body?: any, init?: any) {\n      this.status = init?.status || 200;\n      this.headers = new Map();\n    }\n    json() { return Promise.resolve({}); }\n  } as any;\n}\n\nimport { NextRequest } from 'next/server';\n\n// Mock Prisma\nconst mockPrisma = {\n  purchaseInvoice: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    update: jest.fn(),\n  },\n  purchaseInvoiceItem: {\n    create: jest.fn(),\n    createMany: jest.fn(),\n  },\n  product: {\n    findUnique: jest.fn(),\n    update: jest.fn(),\n  },\n  inventoryItem: {\n    findMany: jest.fn(),\n    findFirst: jest.fn(),\n    update: jest.fn(),\n    create: jest.fn(),\n  },\n  $transaction: jest.fn(),\n};\n\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('@/lib/cache-enhanced', () => ({\n  cacheService: {\n    invalidateInventory: jest.fn(),\n    del: jest.fn(),\n    invalidatePattern: jest.fn(),\n  },\n}));\n\n// Import the API handler (we'll mock the actual implementation)\nconst createPurchaseInvoiceAPI = async (request: NextRequest) => {\n  const body = await request.json();\n  const { items, distributions, totalAmount, supplierId, ...rest } = body;\n\n  // Validation logic from the actual API\n  if (!items || !Array.isArray(items) || items.length === 0) {\n    return { success: false, message: 'At least one purchase item is required', status: 400 };\n  }\n\n  if (!distributions || !Array.isArray(distributions) || distributions.length !== items.length) {\n    return { success: false, message: 'Distribution for each item is required', status: 400 };\n  }\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const dist = distributions[i];\n\n    if (!dist || typeof dist !== 'object' || Object.keys(dist).length === 0) {\n      return { \n        success: false, \n        message: `Distribution for product ${item.productId} is missing`, \n        status: 400 \n      };\n    }\n\n    let totalDistributed = 0;\n    for (const qty of Object.values(dist)) {\n      const num = Number(qty);\n      if (isNaN(num) || num < 0) {\n        return { \n          success: false, \n          message: `Invalid distributed quantity for product ${item.productId}`, \n          status: 400 \n        };\n      }\n      totalDistributed += num;\n    }\n\n    if (totalDistributed !== item.quantity) {\n      return { \n        success: false, \n        message: `Distributed quantity (${totalDistributed}) does not match purchased quantity (${item.quantity}) for product ${item.productId}`, \n        status: 400 \n      };\n    }\n  }\n\n  // If validation passes, simulate successful creation\n  const mockInvoice = {\n    id: 1,\n    invoiceNumber: body.invoiceNumber || 'PI-TEST-001',\n    supplierId: parseInt(supplierId),\n    total: totalAmount || 0,\n    status: body.status || 'pending_approval',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  return { \n    success: true, \n    data: mockInvoice, \n    status: 201 \n  };\n};\n\ndescribe('Purchase Invoice API - Distribution Validation Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockPrisma.$transaction.mockImplementation(async (callback: any) => {\n      return await callback(mockPrisma);\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('POST /api/purchases - Distribution Validation', () => {\n    it('should reject request with no items', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [],\n        distributions: []\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('At least one purchase item is required');\n      expect(result.status).toBe(400);\n    });\n\n    it('should reject request with missing distributions', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [] // Missing distributions\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distribution for each item is required');\n      expect(result.status).toBe(400);\n    });\n\n    it('should reject request with empty distribution objects', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          {} // Empty distribution object\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distribution for product 1 is missing');\n      expect(result.status).toBe(400);\n    });\n\n    it('should reject request with invalid distribution quantities', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': -5 } // Negative quantity\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid distributed quantity for product 1');\n      expect(result.status).toBe(400);\n    });\n\n    it('should reject request with mismatched distribution quantities', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': 5, 'shop2': 3 } // Total: 8, but required: 10\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distributed quantity (8) does not match purchased quantity (10) for product 1');\n      expect(result.status).toBe(400);\n    });\n\n    it('should reject request with over-distributed quantities', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': 7, 'shop2': 5 } // Total: 12, but required: 10\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distributed quantity (12) does not match purchased quantity (10) for product 1');\n      expect(result.status).toBe(400);\n    });\n\n    it('should accept valid request with proper distributions', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': 6, 'shop2': 4 } // Total: 10, matches required\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toMatchObject({\n        id: 1,\n        supplierId: 1,\n        total: 1000\n      });\n      expect(result.status).toBe(201);\n    });\n\n    it('should handle multiple items with valid distributions', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1500,\n        items: [\n          { productId: 1, quantity: 10, price: 100 },\n          { productId: 2, quantity: 5, price: 200 }\n        ],\n        distributions: [\n          { 'shop1': 6, 'shop2': 4 },  // Item 1: Total 10\n          { 'shop1': 5 }               // Item 2: Total 5\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toMatchObject({\n        id: 1,\n        supplierId: 1,\n        total: 1500\n      });\n      expect(result.status).toBe(201);\n    });\n\n    it('should handle string quantities in distributions', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': '6', 'shop2': '4' } // String values that convert to numbers\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(true);\n      expect(result.status).toBe(201);\n    });\n\n    it('should reject NaN distribution quantities', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': 'invalid', 'shop2': 4 } // Invalid string that becomes NaN\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Invalid distributed quantity for product 1');\n      expect(result.status).toBe(400);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle zero quantity items', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 0,\n        items: [\n          { productId: 1, quantity: 0, price: 100 }\n        ],\n        distributions: [\n          { 'shop1': 0 } // Zero distribution for zero quantity\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(true);\n      expect(result.status).toBe(201);\n    });\n\n    it('should validate each item individually', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1500,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }, // Valid\n          { productId: 2, quantity: 5, price: 200 }   // Invalid distribution\n        ],\n        distributions: [\n          { 'shop1': 6, 'shop2': 4 },  // Valid: Total 10\n          { 'shop1': 3 }               // Invalid: Total 3, but required 5\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distributed quantity (3) does not match purchased quantity (5) for product 2');\n      expect(result.status).toBe(400);\n    });\n\n    it('should handle complex distribution across multiple shops', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 20, price: 50 }\n        ],\n        distributions: [\n          { \n            'shop1': 8, \n            'shop2': 5, \n            'shop3': 4, \n            'shop4': 3 \n          } // Total: 20\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(true);\n      expect(result.status).toBe(201);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle malformed distribution objects', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 }\n        ],\n        distributions: [\n          null // null distribution\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distribution for product 1 is missing');\n      expect(result.status).toBe(400);\n    });\n\n    it('should handle mismatched array lengths', async () => {\n      const requestData = {\n        supplierId: '1',\n        totalAmount: 1000,\n        items: [\n          { productId: 1, quantity: 10, price: 100 },\n          { productId: 2, quantity: 5, price: 200 }\n        ],\n        distributions: [\n          { 'shop1': 10 } // Only one distribution for two items\n        ]\n      };\n\n      const request = new NextRequest('http://localhost/api/purchases', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const result = await createPurchaseInvoiceAPI(request);\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Distribution for each item is required');\n      expect(result.status).toBe(400);\n    });\n  });\n}); "],"names":["Request","global","MockRequest","constructor","url","init","method","headers","Map","json","Promise","resolve","Response","MockResponse","body","status","mockPrisma","purchaseInvoice","create","jest","fn","findUnique","update","purchaseInvoiceItem","createMany","product","inventoryItem","findMany","findFirst","$transaction","mock","__esModule","default","cacheService","invalidateInventory","del","invalidatePattern","createPurchaseInvoiceAPI","request","items","distributions","totalAmount","supplierId","rest","Array","isArray","length","success","message","i","item","dist","Object","keys","productId","totalDistributed","qty","values","num","Number","isNaN","quantity","mockInvoice","id","invoiceNumber","parseInt","total","createdAt","Date","updatedAt","data","describe","beforeEach","clearAllMocks","mockImplementation","callback","afterEach","resetAllMocks","it","requestData","NextRequest","JSON","stringify","result","expect","toBe","price","toMatchObject"],"mappings":";;;;yBAAkE;wBA6BtC;AA3B5B,qEAAqE;AACrE,IAAI,OAAOA,YAAY,aAAa;IAClCC,OAAOD,OAAO,GAAG,MAAME;QAIrBC,YAAYC,GAAW,EAAEC,IAAU,CAAE;YACnC,IAAI,CAACD,GAAG,GAAGA;YACX,IAAI,CAACE,MAAM,GAAGD,MAAMC,UAAU;YAC9B,IAAI,CAACC,OAAO,GAAG,IAAIC;QACrB;QACAC,OAAO;YAAE,OAAOC,QAAQC,OAAO,CAAC,CAAC;QAAI;IACvC;AACF;AAEA,IAAI,OAAOC,aAAa,aAAa;IACnCX,OAAOW,QAAQ,GAAG,MAAMC;QAGtBV,YAAYW,IAAU,EAAET,IAAU,CAAE;YAClC,IAAI,CAACU,MAAM,GAAGV,MAAMU,UAAU;YAC9B,IAAI,CAACR,OAAO,GAAG,IAAIC;QACrB;QACAC,OAAO;YAAE,OAAOC,QAAQC,OAAO,CAAC,CAAC;QAAI;IACvC;AACF;AAIA,cAAc;AACd,MAAMK,aAAa;IACjBC,iBAAiB;QACfC,QAAQC,aAAI,CAACC,EAAE;QACfC,YAAYF,aAAI,CAACC,EAAE;QACnBE,QAAQH,aAAI,CAACC,EAAE;IACjB;IACAG,qBAAqB;QACnBL,QAAQC,aAAI,CAACC,EAAE;QACfI,YAAYL,aAAI,CAACC,EAAE;IACrB;IACAK,SAAS;QACPJ,YAAYF,aAAI,CAACC,EAAE;QACnBE,QAAQH,aAAI,CAACC,EAAE;IACjB;IACAM,eAAe;QACbC,UAAUR,aAAI,CAACC,EAAE;QACjBQ,WAAWT,aAAI,CAACC,EAAE;QAClBE,QAAQH,aAAI,CAACC,EAAE;QACfF,QAAQC,aAAI,CAACC,EAAE;IACjB;IACAS,cAAcV,aAAI,CAACC,EAAE;AACvB;AAEAD,aAAI,CAACW,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,YAAY;QACZC,SAAShB;IACX,CAAA;AAEAG,aAAI,CAACW,IAAI,CAAC,wBAAwB,IAAO,CAAA;QACvCG,cAAc;YACZC,qBAAqBf,aAAI,CAACC,EAAE;YAC5Be,KAAKhB,aAAI,CAACC,EAAE;YACZgB,mBAAmBjB,aAAI,CAACC,EAAE;QAC5B;IACF,CAAA;AAEA,gEAAgE;AAChE,MAAMiB,2BAA2B,OAAOC;IACtC,MAAMxB,OAAO,MAAMwB,QAAQ7B,IAAI;IAC/B,MAAM,EAAE8B,KAAK,EAAEC,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAE,GAAGC,MAAM,GAAG7B;IAEnE,uCAAuC;IACvC,IAAI,CAACyB,SAAS,CAACK,MAAMC,OAAO,CAACN,UAAUA,MAAMO,MAAM,KAAK,GAAG;QACzD,OAAO;YAAEC,SAAS;YAAOC,SAAS;YAA0CjC,QAAQ;QAAI;IAC1F;IAEA,IAAI,CAACyB,iBAAiB,CAACI,MAAMC,OAAO,CAACL,kBAAkBA,cAAcM,MAAM,KAAKP,MAAMO,MAAM,EAAE;QAC5F,OAAO;YAAEC,SAAS;YAAOC,SAAS;YAA0CjC,QAAQ;QAAI;IAC1F;IAEA,IAAK,IAAIkC,IAAI,GAAGA,IAAIV,MAAMO,MAAM,EAAEG,IAAK;QACrC,MAAMC,OAAOX,KAAK,CAACU,EAAE;QACrB,MAAME,OAAOX,aAAa,CAACS,EAAE;QAE7B,IAAI,CAACE,QAAQ,OAAOA,SAAS,YAAYC,OAAOC,IAAI,CAACF,MAAML,MAAM,KAAK,GAAG;YACvE,OAAO;gBACLC,SAAS;gBACTC,SAAS,CAAC,yBAAyB,EAAEE,KAAKI,SAAS,CAAC,WAAW,CAAC;gBAChEvC,QAAQ;YACV;QACF;QAEA,IAAIwC,mBAAmB;QACvB,KAAK,MAAMC,OAAOJ,OAAOK,MAAM,CAACN,MAAO;YACrC,MAAMO,MAAMC,OAAOH;YACnB,IAAII,MAAMF,QAAQA,MAAM,GAAG;gBACzB,OAAO;oBACLX,SAAS;oBACTC,SAAS,CAAC,yCAAyC,EAAEE,KAAKI,SAAS,CAAC,CAAC;oBACrEvC,QAAQ;gBACV;YACF;YACAwC,oBAAoBG;QACtB;QAEA,IAAIH,qBAAqBL,KAAKW,QAAQ,EAAE;YACtC,OAAO;gBACLd,SAAS;gBACTC,SAAS,CAAC,sBAAsB,EAAEO,iBAAiB,qCAAqC,EAAEL,KAAKW,QAAQ,CAAC,cAAc,EAAEX,KAAKI,SAAS,CAAC,CAAC;gBACxIvC,QAAQ;YACV;QACF;IACF;IAEA,qDAAqD;IACrD,MAAM+C,cAAc;QAClBC,IAAI;QACJC,eAAelD,KAAKkD,aAAa,IAAI;QACrCtB,YAAYuB,SAASvB;QACrBwB,OAAOzB,eAAe;QACtB1B,QAAQD,KAAKC,MAAM,IAAI;QACvBoD,WAAW,IAAIC;QACfC,WAAW,IAAID;IACjB;IAEA,OAAO;QACLrB,SAAS;QACTuB,MAAMR;QACN/C,QAAQ;IACV;AACF;AAEAwD,IAAAA,iBAAQ,EAAC,8DAA8D;IACrEC,IAAAA,mBAAU,EAAC;QACTrD,aAAI,CAACsD,aAAa;QAClBzD,WAAWa,YAAY,CAAC6C,kBAAkB,CAAC,OAAOC;YAChD,OAAO,MAAMA,SAAS3D;QACxB;IACF;IAEA4D,IAAAA,kBAAS,EAAC;QACRzD,aAAI,CAAC0D,aAAa;IACpB;IAEAN,IAAAA,iBAAQ,EAAC,iDAAiD;QACxDO,IAAAA,WAAE,EAAC,uCAAuC;YACxC,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO,EAAE;gBACTC,eAAe,EAAE;YACnB;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,oDAAoD;YACrD,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe,EAAE,CAAC,wBAAwB;YAC5C;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,yDAAyD;YAC1D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb,CAAC,EAAE,4BAA4B;iBAChC;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,8DAA8D;YAC/D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS,CAAC;oBAAE,EAAE,oBAAoB;iBACrC;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,iEAAiE;YAClE,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAG,SAAS;oBAAE,EAAE,6BAA6B;iBACzD;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,0DAA0D;YAC3D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAG,SAAS;oBAAE,EAAE,8BAA8B;iBAC1D;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,yDAAyD;YAC1D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAG,SAAS;oBAAE,EAAE,8BAA8B;iBAC1D;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOb,IAAI,EAAEiB,aAAa,CAAC;gBAChCxB,IAAI;gBACJrB,YAAY;gBACZwB,OAAO;YACT;YACAkB,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,yDAAyD;YAC1D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;oBACzC;wBAAEhC,WAAW;wBAAGO,UAAU;wBAAGyB,OAAO;oBAAI;iBACzC;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAG,SAAS;oBAAE;oBACzB;wBAAE,SAAS;oBAAE,EAAgB,kBAAkB;iBAChD;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOb,IAAI,EAAEiB,aAAa,CAAC;gBAChCxB,IAAI;gBACJrB,YAAY;gBACZwB,OAAO;YACT;YACAkB,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,oDAAoD;YACrD,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAK,SAAS;oBAAI,EAAE,wCAAwC;iBACxE;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,6CAA6C;YAC9C,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAW,SAAS;oBAAE,EAAE,kCAAkC;iBACtE;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;IACF;IAEAd,IAAAA,iBAAQ,EAAC,cAAc;QACrBO,IAAAA,WAAE,EAAC,qCAAqC;YACtC,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAGyB,OAAO;oBAAI;iBACzC;gBACD9C,eAAe;oBACb;wBAAE,SAAS;oBAAE,EAAE,sCAAsC;iBACtD;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,0CAA0C;YAC3C,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;oBACzC;wBAAEhC,WAAW;wBAAGO,UAAU;wBAAGyB,OAAO;oBAAI,EAAI,uBAAuB;iBACpE;gBACD9C,eAAe;oBACb;wBAAE,SAAS;wBAAG,SAAS;oBAAE;oBACzB;wBAAE,SAAS;oBAAE,EAAgB,mCAAmC;iBACjE;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,4DAA4D;YAC7D,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAG;iBACzC;gBACD9C,eAAe;oBACb;wBACE,SAAS;wBACT,SAAS;wBACT,SAAS;wBACT,SAAS;oBACX,EAAE,YAAY;iBACf;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;IACF;IAEAd,IAAAA,iBAAQ,EAAC,kBAAkB;QACzBO,IAAAA,WAAE,EAAC,gDAAgD;YACjD,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;iBAC1C;gBACD9C,eAAe;oBACb,KAAK,oBAAoB;iBAC1B;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;QAEAP,IAAAA,WAAE,EAAC,0CAA0C;YAC3C,MAAMC,cAAc;gBAClBrC,YAAY;gBACZD,aAAa;gBACbF,OAAO;oBACL;wBAAEe,WAAW;wBAAGO,UAAU;wBAAIyB,OAAO;oBAAI;oBACzC;wBAAEhC,WAAW;wBAAGO,UAAU;wBAAGyB,OAAO;oBAAI;iBACzC;gBACD9C,eAAe;oBACb;wBAAE,SAAS;oBAAG,EAAE,sCAAsC;iBACvD;YACH;YAEA,MAAMF,UAAU,IAAI0C,mBAAW,CAAC,kCAAkC;gBAChE1E,QAAQ;gBACRQ,MAAMmE,KAAKC,SAAS,CAACH;gBACrBxE,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;YAEA,MAAM4E,SAAS,MAAM9C,yBAAyBC;YAE9C8C,IAAAA,eAAM,EAACD,OAAOpC,OAAO,EAAEsC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOnC,OAAO,EAAEqC,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACD,OAAOpE,MAAM,EAAEsE,IAAI,CAAC;QAC7B;IACF;AACF"}