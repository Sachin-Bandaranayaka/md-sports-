3ea13800e4b933f9457a95161bcd2ac6
"use strict";

/* istanbul ignore next */
function cov_kgjk3j5um() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/invoices/super-optimized/route.ts";
  var hash = "39eb23b6a127e467b7d9515f44f7779bc471a50a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/invoices/super-optimized/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "6": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "7": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "8": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "9": {
        start: {
          line: 18,
          column: 29
        },
        end: {
          line: 189,
          column: 2
        }
      },
      "10": {
        start: {
          line: 19,
          column: 73
        },
        end: {
          line: 19,
          column: 80
        }
      },
      "11": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "12": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "13": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 64
        }
      },
      "14": {
        start: {
          line: 23,
          column: 36
        },
        end: {
          line: 23,
          column: 64
        }
      },
      "15": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 92
        }
      },
      "16": {
        start: {
          line: 24,
          column: 50
        },
        end: {
          line: 24,
          column: 92
        }
      },
      "17": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "18": {
        start: {
          line: 25,
          column: 36
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "19": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "20": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "21": {
        start: {
          line: 45,
          column: 18
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "22": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 18
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "26": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 18
        }
      },
      "27": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "28": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 18
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "30": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 18
        }
      },
      "31": {
        start: {
          line: 73,
          column: 45
        },
        end: {
          line: 154,
          column: 6
        }
      },
      "32": {
        start: {
          line: 156,
          column: 21
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "33": {
        start: {
          line: 156,
          column: 45
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "34": {
        start: {
          line: 168,
          column: 54
        },
        end: {
          line: 168,
          column: 68
        }
      },
      "35": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 180,
          column: 6
        }
      },
      "36": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "37": {
        start: {
          line: 193,
          column: 27
        },
        end: {
          line: 193,
          column: 90
        }
      },
      "38": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "39": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "40": {
        start: {
          line: 202,
          column: 29
        },
        end: {
          line: 202,
          column: 57
        }
      },
      "41": {
        start: {
          line: 203,
          column: 24
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "42": {
        start: {
          line: 212,
          column: 21
        },
        end: {
          line: 212,
          column: 56
        }
      },
      "43": {
        start: {
          line: 214,
          column: 25
        },
        end: {
          line: 219,
          column: 10
        }
      },
      "44": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 106
        }
      },
      "45": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 53
        }
      },
      "46": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "47": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 68
        }
      },
      "48": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 56
          },
          end: {
            line: 18,
            column: 57
          }
        },
        loc: {
          start: {
            line: 18,
            column: 73
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 156,
            column: 37
          },
          end: {
            line: 156,
            column: 38
          }
        },
        loc: {
          start: {
            line: 156,
            column: 45
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 156
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 168,
            column: 44
          },
          end: {
            line: 168,
            column: 45
          }
        },
        loc: {
          start: {
            line: 168,
            column: 54
          },
          end: {
            line: 168,
            column: 68
          }
        },
        line: 168
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 190,
            column: 15
          },
          end: {
            line: 190,
            column: 18
          }
        },
        loc: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 190
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 34
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 92
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 92
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 21
          }
        }, {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 48
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 14
          }
        }, {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 34
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 53,
            column: 18
          }
        }, {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 58,
            column: 18
          }
        }, {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 63,
            column: 18
          }
        }, {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 70,
            column: 18
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 26
          },
          end: {
            line: 160,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 26
          },
          end: {
            line: 160,
            column: 44
          }
        }, {
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 160,
            column: 57
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 165,
            column: 21
          },
          end: {
            line: 165,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 21
          },
          end: {
            line: 165,
            column: 47
          }
        }, {
          start: {
            line: 165,
            column: 51
          },
          end: {
            line: 165,
            column: 55
          }
        }],
        line: 165
      },
      "10": {
        loc: {
          start: {
            line: 166,
            column: 22
          },
          end: {
            line: 166,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 22
          },
          end: {
            line: 166,
            column: 36
          }
        }, {
          start: {
            line: 166,
            column: 40
          },
          end: {
            line: 166,
            column: 44
          }
        }],
        line: 166
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 72
          }
        }, {
          start: {
            line: 168,
            column: 76
          },
          end: {
            line: 168,
            column: 77
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 175,
            column: 30
          },
          end: {
            line: 175,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 30
          },
          end: {
            line: 175,
            column: 49
          }
        }, {
          start: {
            line: 175,
            column: 53
          },
          end: {
            line: 175,
            column: 54
          }
        }],
        line: 175
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 27
          },
          end: {
            line: 176,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 27
          },
          end: {
            line: 176,
            column: 46
          }
        }, {
          start: {
            line: 176,
            column: 50
          },
          end: {
            line: 176,
            column: 51
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "15": {
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 204,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 204,
            column: 51
          }
        }, {
          start: {
            line: 204,
            column: 55
          },
          end: {
            line: 204,
            column: 58
          }
        }],
        line: 204
      },
      "16": {
        loc: {
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 205,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 205,
            column: 46
          }
        }, {
          start: {
            line: 205,
            column: 50
          },
          end: {
            line: 205,
            column: 59
          }
        }],
        line: 205
      },
      "17": {
        loc: {
          start: {
            line: 206,
            column: 27
          },
          end: {
            line: 206,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 27
          },
          end: {
            line: 206,
            column: 60
          }
        }, {
          start: {
            line: 206,
            column: 64
          },
          end: {
            line: 206,
            column: 73
          }
        }],
        line: 206
      },
      "18": {
        loc: {
          start: {
            line: 207,
            column: 25
          },
          end: {
            line: 207,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 25
          },
          end: {
            line: 207,
            column: 51
          }
        }, {
          start: {
            line: 207,
            column: 55
          },
          end: {
            line: 207,
            column: 64
          }
        }],
        line: 207
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 208,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 208,
            column: 46
          }
        }, {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 208,
            column: 59
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 209,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 209,
            column: 46
          }
        }, {
          start: {
            line: 209,
            column: 50
          },
          end: {
            line: 209,
            column: 59
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/invoices/super-optimized/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { Prisma } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\nimport { unstable_cache } from 'next/cache';\n\nconst ITEMS_PER_PAGE = 20;\nconst CACHE_TTL = 300; // 5 minutes\n\n// Minimal interface for optimized data transfer\ninterface OptimizedInvoiceResponse {\n    id: string;\n    invoiceNumber: string;\n    customerId: number | null;\n    customerName: string;\n    total: number;\n    status: string;\n    paymentMethod: string | null;\n    createdAt: string;\n    dueDate: string | null;\n    shopName: string | null;\n    itemCount: number;\n    totalPaid: number;\n}\n\n// Ultra-optimized database query with caching\nconst getOptimizedInvoices = unstable_cache(\n    async (filters: {\n        page: number;\n        status?: string;\n        paymentMethod?: string;\n        searchQuery?: string;\n        sortBy?: string;\n        shopId?: string;\n    }) => {\n        const { page, status, paymentMethod, searchQuery, sortBy, shopId } = filters;\n        const skip = (page - 1) * ITEMS_PER_PAGE;\n\n        // Build minimal where clause\n        const whereClause: Prisma.InvoiceWhereInput = {};\n        \n        if (status && status !== 'all') whereClause.status = status;\n        if (paymentMethod && paymentMethod !== 'all') whereClause.paymentMethod = paymentMethod;\n        if (shopId && shopId !== 'all') whereClause.shopId = shopId;\n        \n        if (searchQuery) {\n            whereClause.OR = [\n                { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n            ];\n        }\n\n        // Optimized order by\n        let orderBy: Prisma.InvoiceOrderByWithRelationInput = { createdAt: 'desc' };\n        switch (sortBy) {\n            case 'oldest': orderBy = { createdAt: 'asc' }; break;\n            case 'amount-high': orderBy = { total: 'desc' }; break;\n            case 'amount-low': orderBy = { total: 'asc' }; break;\n            case 'customer': orderBy = { customer: { name: 'asc' } }; break;\n        }\n\n        // Single optimized query with minimal data\n        const [invoicesRaw, totalCount, stats] = await Promise.all([\n            prisma.invoice.findMany({\n                where: whereClause,\n                select: {\n                    id: true,\n                    invoiceNumber: true,\n                    customerId: true,\n                    total: true,\n                    status: true,\n                    paymentMethod: true,\n                    createdAt: true,\n                    dueDate: true,\n                    customer: {\n                        select: { name: true }\n                    },\n                    shop: {\n                        select: { name: true }\n                    },\n                    _count: {\n                        select: { items: true }\n                    },\n                    payments: {\n                        select: { amount: true },\n                        where: { receipt: { isNot: null } }\n                    }\n                },\n                orderBy,\n                skip,\n                take: ITEMS_PER_PAGE,\n            }),\n\n            prisma.invoice.count({ where: whereClause }),\n\n            // Simplified stats query\n            prisma.$transaction([\n                prisma.invoice.aggregate({\n                    _sum: { total: true },\n                    where: { ...whereClause, status: { notIn: ['paid', 'cancelled', 'void'] } }\n                }),\n                prisma.invoice.aggregate({\n                    _sum: { total: true },\n                    where: {\n                        ...whereClause,\n                        status: 'paid',\n                        updatedAt: { gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1) }\n                    }\n                }),\n                prisma.invoice.count({\n                    where: { ...whereClause, status: 'overdue' }\n                })\n            ])\n        ]);\n\n        // Transform efficiently\n        const invoices: OptimizedInvoiceResponse[] = invoicesRaw.map(inv => ({\n            id: inv.id.toString(),\n            invoiceNumber: inv.invoiceNumber,\n            customerId: inv.customerId,\n            customerName: inv.customer?.name || 'Unknown',\n            total: inv.total,\n            status: inv.status,\n            paymentMethod: inv.paymentMethod,\n            createdAt: inv.createdAt.toISOString(),\n            dueDate: inv.dueDate?.toISOString() || null,\n            shopName: inv.shop?.name || null,\n            itemCount: inv._count.items,\n            totalPaid: inv.payments?.reduce((sum, p) => sum + p.amount, 0) || 0\n        }));\n\n        return {\n            invoices,\n            totalPages: Math.ceil(totalCount / ITEMS_PER_PAGE),\n            currentPage: page,\n            statistics: {\n                totalOutstanding: stats[0]._sum.total || 0,\n                paidThisMonth: stats[1]._sum.total || 0,\n                overdueCount: stats[2],\n                totalInvoices: totalCount\n            }\n        };\n    },\n    ['super-optimized-invoices-api'],\n    { \n        revalidate: CACHE_TTL,\n        tags: ['invoices', 'super-optimized']\n    }\n);\n\nexport async function GET(request: NextRequest) {\n    try {\n        // Validate token\n        const authResult = await validateTokenPermission(request, 'sales:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Parse query parameters\n        const searchParams = request.nextUrl.searchParams;\n        const filters = {\n            page: parseInt(searchParams.get('page') || '1', 10),\n            status: searchParams.get('status') || undefined,\n            paymentMethod: searchParams.get('paymentMethod') || undefined,\n            searchQuery: searchParams.get('search') || undefined,\n            sortBy: searchParams.get('sortBy') || undefined,\n            shopId: searchParams.get('shopId') || undefined,\n        };\n\n        // Get cached data\n        const data = await getOptimizedInvoices(filters);\n\n        // Set aggressive caching headers\n        const response = NextResponse.json({ \n            success: true, \n            data,\n            cached: true,\n            timestamp: new Date().toISOString()\n        });\n        \n        response.headers.set('Cache-Control', `public, s-maxage=${CACHE_TTL}, stale-while-revalidate=60`);\n        response.headers.set('X-Cache', 'OPTIMIZED');\n        \n        return response;\n\n    } catch (error) {\n        console.error('Super-optimized invoices API error:', error);\n        return NextResponse.json(\n            { \n                success: false, \n                error: 'Failed to fetch invoices',\n                timestamp: new Date().toISOString()\n            }, \n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "ITEMS_PER_PAGE", "CACHE_TTL", "getOptimizedInvoices", "unstable_cache", "filters", "page", "status", "paymentMethod", "searchQuery", "sortBy", "shopId", "skip", "whereClause", "OR", "invoiceNumber", "contains", "mode", "customer", "name", "orderBy", "createdAt", "total", "invoicesRaw", "totalCount", "stats", "Promise", "all", "prisma", "invoice", "findMany", "where", "select", "id", "customerId", "dueDate", "shop", "_count", "items", "payments", "amount", "receipt", "isNot", "take", "count", "$transaction", "aggregate", "_sum", "notIn", "updatedAt", "gte", "Date", "getFullYear", "getMonth", "invoices", "map", "inv", "toString", "customerName", "toISOString", "shopName", "itemCount", "totalPaid", "reduce", "sum", "p", "totalPages", "Math", "ceil", "currentPage", "statistics", "totalOutstanding", "paidThisMonth", "overdueCount", "totalInvoices", "revalidate", "tags", "request", "authResult", "validateTokenPermission", "isValid", "NextResponse", "json", "error", "message", "searchParams", "nextUrl", "parseInt", "get", "undefined", "data", "response", "success", "cached", "timestamp", "headers", "set", "console"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "39eb23b6a127e467b7d9515f44f7779bc471a50a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kgjk3j5um = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kgjk3j5um();
cov_kgjk3j5um().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_kgjk3j5um().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_kgjk3j5um().f[0]++;
    cov_kgjk3j5um().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_kgjk3j5um().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_kgjk3j5um().s[4]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_kgjk3j5um().s[5]++, require("../../../../lib/auth"));
const _cache =
/* istanbul ignore next */
(cov_kgjk3j5um().s[6]++, require("next/cache"));
const ITEMS_PER_PAGE =
/* istanbul ignore next */
(cov_kgjk3j5um().s[7]++, 20);
const CACHE_TTL =
/* istanbul ignore next */
(cov_kgjk3j5um().s[8]++, 300); // 5 minutes
// Ultra-optimized database query with caching
const getOptimizedInvoices =
/* istanbul ignore next */
(cov_kgjk3j5um().s[9]++, (0, _cache.unstable_cache)(async filters => {
  /* istanbul ignore next */
  cov_kgjk3j5um().f[1]++;
  const {
    page,
    status,
    paymentMethod,
    searchQuery,
    sortBy,
    shopId
  } =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[10]++, filters);
  const skip =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[11]++, (page - 1) * ITEMS_PER_PAGE);
  // Build minimal where clause
  const whereClause =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[12]++, {});
  /* istanbul ignore next */
  cov_kgjk3j5um().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[1][0]++, status) &&
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[1][1]++, status !== "all")) {
    /* istanbul ignore next */
    cov_kgjk3j5um().b[0][0]++;
    cov_kgjk3j5um().s[14]++;
    whereClause.status = status;
  } else
  /* istanbul ignore next */
  {
    cov_kgjk3j5um().b[0][1]++;
  }
  cov_kgjk3j5um().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[3][0]++, paymentMethod) &&
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[3][1]++, paymentMethod !== "all")) {
    /* istanbul ignore next */
    cov_kgjk3j5um().b[2][0]++;
    cov_kgjk3j5um().s[16]++;
    whereClause.paymentMethod = paymentMethod;
  } else
  /* istanbul ignore next */
  {
    cov_kgjk3j5um().b[2][1]++;
  }
  cov_kgjk3j5um().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[5][0]++, shopId) &&
  /* istanbul ignore next */
  (cov_kgjk3j5um().b[5][1]++, shopId !== "all")) {
    /* istanbul ignore next */
    cov_kgjk3j5um().b[4][0]++;
    cov_kgjk3j5um().s[18]++;
    whereClause.shopId = shopId;
  } else
  /* istanbul ignore next */
  {
    cov_kgjk3j5um().b[4][1]++;
  }
  cov_kgjk3j5um().s[19]++;
  if (searchQuery) {
    /* istanbul ignore next */
    cov_kgjk3j5um().b[6][0]++;
    cov_kgjk3j5um().s[20]++;
    whereClause.OR = [{
      invoiceNumber: {
        contains: searchQuery,
        mode: "insensitive"
      }
    }, {
      customer: {
        name: {
          contains: searchQuery,
          mode: "insensitive"
        }
      }
    }];
  } else
  /* istanbul ignore next */
  {
    cov_kgjk3j5um().b[6][1]++;
  }
  // Optimized order by
  let orderBy =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[21]++, {
    createdAt: "desc"
  });
  /* istanbul ignore next */
  cov_kgjk3j5um().s[22]++;
  switch (sortBy) {
    case "oldest":
      /* istanbul ignore next */
      cov_kgjk3j5um().b[7][0]++;
      cov_kgjk3j5um().s[23]++;
      orderBy = {
        createdAt: "asc"
      };
      /* istanbul ignore next */
      cov_kgjk3j5um().s[24]++;
      break;
    case "amount-high":
      /* istanbul ignore next */
      cov_kgjk3j5um().b[7][1]++;
      cov_kgjk3j5um().s[25]++;
      orderBy = {
        total: "desc"
      };
      /* istanbul ignore next */
      cov_kgjk3j5um().s[26]++;
      break;
    case "amount-low":
      /* istanbul ignore next */
      cov_kgjk3j5um().b[7][2]++;
      cov_kgjk3j5um().s[27]++;
      orderBy = {
        total: "asc"
      };
      /* istanbul ignore next */
      cov_kgjk3j5um().s[28]++;
      break;
    case "customer":
      /* istanbul ignore next */
      cov_kgjk3j5um().b[7][3]++;
      cov_kgjk3j5um().s[29]++;
      orderBy = {
        customer: {
          name: "asc"
        }
      };
      /* istanbul ignore next */
      cov_kgjk3j5um().s[30]++;
      break;
  }
  // Single optimized query with minimal data
  const [invoicesRaw, totalCount, stats] =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[31]++, await Promise.all([_prisma.prisma.invoice.findMany({
    where: whereClause,
    select: {
      id: true,
      invoiceNumber: true,
      customerId: true,
      total: true,
      status: true,
      paymentMethod: true,
      createdAt: true,
      dueDate: true,
      customer: {
        select: {
          name: true
        }
      },
      shop: {
        select: {
          name: true
        }
      },
      _count: {
        select: {
          items: true
        }
      },
      payments: {
        select: {
          amount: true
        },
        where: {
          receipt: {
            isNot: null
          }
        }
      }
    },
    orderBy,
    skip,
    take: ITEMS_PER_PAGE
  }), _prisma.prisma.invoice.count({
    where: whereClause
  }),
  // Simplified stats query
  _prisma.prisma.$transaction([_prisma.prisma.invoice.aggregate({
    _sum: {
      total: true
    },
    where: {
      ...whereClause,
      status: {
        notIn: ["paid", "cancelled", "void"]
      }
    }
  }), _prisma.prisma.invoice.aggregate({
    _sum: {
      total: true
    },
    where: {
      ...whereClause,
      status: "paid",
      updatedAt: {
        gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
      }
    }
  }), _prisma.prisma.invoice.count({
    where: {
      ...whereClause,
      status: "overdue"
    }
  })])]));
  // Transform efficiently
  const invoices =
  /* istanbul ignore next */
  (cov_kgjk3j5um().s[32]++, invoicesRaw.map(inv => {
    /* istanbul ignore next */
    cov_kgjk3j5um().f[2]++;
    cov_kgjk3j5um().s[33]++;
    return {
      id: inv.id.toString(),
      invoiceNumber: inv.invoiceNumber,
      customerId: inv.customerId,
      customerName:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[8][0]++, inv.customer?.name) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[8][1]++, "Unknown"),
      total: inv.total,
      status: inv.status,
      paymentMethod: inv.paymentMethod,
      createdAt: inv.createdAt.toISOString(),
      dueDate:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[9][0]++, inv.dueDate?.toISOString()) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[9][1]++, null),
      shopName:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[10][0]++, inv.shop?.name) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[10][1]++, null),
      itemCount: inv._count.items,
      totalPaid:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[11][0]++, inv.payments?.reduce((sum, p) => {
        /* istanbul ignore next */
        cov_kgjk3j5um().f[3]++;
        cov_kgjk3j5um().s[34]++;
        return sum + p.amount;
      }, 0)) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[11][1]++, 0)
    };
  }));
  /* istanbul ignore next */
  cov_kgjk3j5um().s[35]++;
  return {
    invoices,
    totalPages: Math.ceil(totalCount / ITEMS_PER_PAGE),
    currentPage: page,
    statistics: {
      totalOutstanding:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[12][0]++, stats[0]._sum.total) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[12][1]++, 0),
      paidThisMonth:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[13][0]++, stats[1]._sum.total) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[13][1]++, 0),
      overdueCount: stats[2],
      totalInvoices: totalCount
    }
  };
}, ["super-optimized-invoices-api"], {
  revalidate: CACHE_TTL,
  tags: ["invoices", "super-optimized"]
}));
async function GET(request) {
  /* istanbul ignore next */
  cov_kgjk3j5um().f[4]++;
  cov_kgjk3j5um().s[36]++;
  try {
    // Validate token
    const authResult =
    /* istanbul ignore next */
    (cov_kgjk3j5um().s[37]++, await (0, _auth.validateTokenPermission)(request, "sales:view"));
    /* istanbul ignore next */
    cov_kgjk3j5um().s[38]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_kgjk3j5um().b[14][0]++;
      cov_kgjk3j5um().s[39]++;
      return _server.NextResponse.json({
        error: authResult.message
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_kgjk3j5um().b[14][1]++;
    }
    // Parse query parameters
    const searchParams =
    /* istanbul ignore next */
    (cov_kgjk3j5um().s[40]++, request.nextUrl.searchParams);
    const filters =
    /* istanbul ignore next */
    (cov_kgjk3j5um().s[41]++, {
      page: parseInt(
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[15][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[15][1]++, "1"), 10),
      status:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[16][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[16][1]++, undefined),
      paymentMethod:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[17][0]++, searchParams.get("paymentMethod")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[17][1]++, undefined),
      searchQuery:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[18][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[18][1]++, undefined),
      sortBy:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[19][0]++, searchParams.get("sortBy")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[19][1]++, undefined),
      shopId:
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[20][0]++, searchParams.get("shopId")) ||
      /* istanbul ignore next */
      (cov_kgjk3j5um().b[20][1]++, undefined)
    });
    // Get cached data
    const data =
    /* istanbul ignore next */
    (cov_kgjk3j5um().s[42]++, await getOptimizedInvoices(filters));
    // Set aggressive caching headers
    const response =
    /* istanbul ignore next */
    (cov_kgjk3j5um().s[43]++, _server.NextResponse.json({
      success: true,
      data,
      cached: true,
      timestamp: new Date().toISOString()
    }));
    /* istanbul ignore next */
    cov_kgjk3j5um().s[44]++;
    response.headers.set("Cache-Control", `public, s-maxage=${CACHE_TTL}, stale-while-revalidate=60`);
    /* istanbul ignore next */
    cov_kgjk3j5um().s[45]++;
    response.headers.set("X-Cache", "OPTIMIZED");
    /* istanbul ignore next */
    cov_kgjk3j5um().s[46]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_kgjk3j5um().s[47]++;
    console.error("Super-optimized invoices API error:", error);
    /* istanbul ignore next */
    cov_kgjk3j5um().s[48]++;
    return _server.NextResponse.json({
      success: false,
      error: "Failed to fetch invoices",
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,