{"version":3,"names":["cov_kgjk3j5um","actualCoverage","s","GET","ITEMS_PER_PAGE","CACHE_TTL","getOptimizedInvoices","_cache","unstable_cache","filters","f","page","status","paymentMethod","searchQuery","sortBy","shopId","skip","whereClause","b","OR","invoiceNumber","contains","mode","customer","name","orderBy","createdAt","total","invoicesRaw","totalCount","stats","Promise","all","_prisma","prisma","invoice","findMany","where","select","id","customerId","dueDate","shop","_count","items","payments","amount","receipt","isNot","take","count","$transaction","aggregate","_sum","notIn","updatedAt","gte","Date","getFullYear","getMonth","invoices","map","inv","toString","customerName","toISOString","shopName","itemCount","totalPaid","reduce","sum","p","totalPages","Math","ceil","currentPage","statistics","totalOutstanding","paidThisMonth","overdueCount","totalInvoices","revalidate","tags","request","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","searchParams","nextUrl","parseInt","get","undefined","data","response","success","cached","timestamp","headers","set","console"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/invoices/super-optimized/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { Prisma } from '@prisma/client';\nimport { prisma } from '@/lib/prisma';\nimport { validateTokenPermission } from '@/lib/auth';\nimport { unstable_cache } from 'next/cache';\n\nconst ITEMS_PER_PAGE = 20;\nconst CACHE_TTL = 300; // 5 minutes\n\n// Minimal interface for optimized data transfer\ninterface OptimizedInvoiceResponse {\n    id: string;\n    invoiceNumber: string;\n    customerId: number | null;\n    customerName: string;\n    total: number;\n    status: string;\n    paymentMethod: string | null;\n    createdAt: string;\n    dueDate: string | null;\n    shopName: string | null;\n    itemCount: number;\n    totalPaid: number;\n}\n\n// Ultra-optimized database query with caching\nconst getOptimizedInvoices = unstable_cache(\n    async (filters: {\n        page: number;\n        status?: string;\n        paymentMethod?: string;\n        searchQuery?: string;\n        sortBy?: string;\n        shopId?: string;\n    }) => {\n        const { page, status, paymentMethod, searchQuery, sortBy, shopId } = filters;\n        const skip = (page - 1) * ITEMS_PER_PAGE;\n\n        // Build minimal where clause\n        const whereClause: Prisma.InvoiceWhereInput = {};\n        \n        if (status && status !== 'all') whereClause.status = status;\n        if (paymentMethod && paymentMethod !== 'all') whereClause.paymentMethod = paymentMethod;\n        if (shopId && shopId !== 'all') whereClause.shopId = shopId;\n        \n        if (searchQuery) {\n            whereClause.OR = [\n                { invoiceNumber: { contains: searchQuery, mode: 'insensitive' } },\n                { customer: { name: { contains: searchQuery, mode: 'insensitive' } } },\n            ];\n        }\n\n        // Optimized order by\n        let orderBy: Prisma.InvoiceOrderByWithRelationInput = { createdAt: 'desc' };\n        switch (sortBy) {\n            case 'oldest': orderBy = { createdAt: 'asc' }; break;\n            case 'amount-high': orderBy = { total: 'desc' }; break;\n            case 'amount-low': orderBy = { total: 'asc' }; break;\n            case 'customer': orderBy = { customer: { name: 'asc' } }; break;\n        }\n\n        // Single optimized query with minimal data\n        const [invoicesRaw, totalCount, stats] = await Promise.all([\n            prisma.invoice.findMany({\n                where: whereClause,\n                select: {\n                    id: true,\n                    invoiceNumber: true,\n                    customerId: true,\n                    total: true,\n                    status: true,\n                    paymentMethod: true,\n                    createdAt: true,\n                    dueDate: true,\n                    customer: {\n                        select: { name: true }\n                    },\n                    shop: {\n                        select: { name: true }\n                    },\n                    _count: {\n                        select: { items: true }\n                    },\n                    payments: {\n                        select: { amount: true },\n                        where: { receipt: { isNot: null } }\n                    }\n                },\n                orderBy,\n                skip,\n                take: ITEMS_PER_PAGE,\n            }),\n\n            prisma.invoice.count({ where: whereClause }),\n\n            // Simplified stats query\n            prisma.$transaction([\n                prisma.invoice.aggregate({\n                    _sum: { total: true },\n                    where: { ...whereClause, status: { notIn: ['paid', 'cancelled', 'void'] } }\n                }),\n                prisma.invoice.aggregate({\n                    _sum: { total: true },\n                    where: {\n                        ...whereClause,\n                        status: 'paid',\n                        updatedAt: { gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1) }\n                    }\n                }),\n                prisma.invoice.count({\n                    where: { ...whereClause, status: 'overdue' }\n                })\n            ])\n        ]);\n\n        // Transform efficiently\n        const invoices: OptimizedInvoiceResponse[] = invoicesRaw.map(inv => ({\n            id: inv.id.toString(),\n            invoiceNumber: inv.invoiceNumber,\n            customerId: inv.customerId,\n            customerName: inv.customer?.name || 'Unknown',\n            total: inv.total,\n            status: inv.status,\n            paymentMethod: inv.paymentMethod,\n            createdAt: inv.createdAt.toISOString(),\n            dueDate: inv.dueDate?.toISOString() || null,\n            shopName: inv.shop?.name || null,\n            itemCount: inv._count.items,\n            totalPaid: inv.payments?.reduce((sum, p) => sum + p.amount, 0) || 0\n        }));\n\n        return {\n            invoices,\n            totalPages: Math.ceil(totalCount / ITEMS_PER_PAGE),\n            currentPage: page,\n            statistics: {\n                totalOutstanding: stats[0]._sum.total || 0,\n                paidThisMonth: stats[1]._sum.total || 0,\n                overdueCount: stats[2],\n                totalInvoices: totalCount\n            }\n        };\n    },\n    ['super-optimized-invoices-api'],\n    { \n        revalidate: CACHE_TTL,\n        tags: ['invoices', 'super-optimized']\n    }\n);\n\nexport async function GET(request: NextRequest) {\n    try {\n        // Validate token\n        const authResult = await validateTokenPermission(request, 'sales:view');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Parse query parameters\n        const searchParams = request.nextUrl.searchParams;\n        const filters = {\n            page: parseInt(searchParams.get('page') || '1', 10),\n            status: searchParams.get('status') || undefined,\n            paymentMethod: searchParams.get('paymentMethod') || undefined,\n            searchQuery: searchParams.get('search') || undefined,\n            sortBy: searchParams.get('sortBy') || undefined,\n            shopId: searchParams.get('shopId') || undefined,\n        };\n\n        // Get cached data\n        const data = await getOptimizedInvoices(filters);\n\n        // Set aggressive caching headers\n        const response = NextResponse.json({ \n            success: true, \n            data,\n            cached: true,\n            timestamp: new Date().toISOString()\n        });\n        \n        response.headers.set('Cache-Control', `public, s-maxage=${CACHE_TTL}, stale-while-revalidate=60`);\n        response.headers.set('X-Cache', 'OPTIMIZED');\n        \n        return response;\n\n    } catch (error) {\n        console.error('Super-optimized invoices API error:', error);\n        return NextResponse.json(\n            { \n                success: false, \n                error: 'Failed to fetch invoices',\n                timestamp: new Date().toISOString()\n            }, \n            { status: 500 }\n        );\n    }\n} "],"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","ignoreList":[]}