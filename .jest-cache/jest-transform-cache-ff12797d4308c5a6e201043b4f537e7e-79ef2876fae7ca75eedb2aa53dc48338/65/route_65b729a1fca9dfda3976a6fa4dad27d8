cdf9639f1325964d918df346002e5bea
"use strict";

/* istanbul ignore next */
function cov_18ou1cfcnl() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts";
  var hash = "a4738a2ff24cb471a9d0545160e6ad858f847787";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 49
        }
      },
      "9": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 45
        }
      },
      "10": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 63
        }
      },
      "11": {
        start: {
          line: 24,
          column: 36
        },
        end: {
          line: 24,
          column: 89
        }
      },
      "12": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "13": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 61,
          column: 1
        }
      },
      "14": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 85
        }
      },
      "15": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 86
        }
      },
      "16": {
        start: {
          line: 66,
          column: 28
        },
        end: {
          line: 66,
          column: 91
        }
      },
      "17": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "18": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 87
        }
      },
      "19": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 45
        }
      },
      "20": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 31
        }
      },
      "21": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "22": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "23": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 49
        }
      },
      "24": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "25": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 78
        }
      },
      "26": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "27": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "28": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 53
        }
      },
      "29": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 148,
          column: 27
        }
      },
      "30": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 143,
          column: 75
        }
      },
      "31": {
        start: {
          line: 95,
          column: 31
        },
        end: {
          line: 130,
          column: 18
        }
      },
      "32": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 142,
          column: 24
        }
      },
      "33": {
        start: {
          line: 132,
          column: 47
        },
        end: {
          line: 142,
          column: 21
        }
      },
      "34": {
        start: {
          line: 141,
          column: 80
        },
        end: {
          line: 141,
          column: 99
        }
      },
      "35": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "36": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 72
        }
      },
      "37": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 74
        }
      },
      "38": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 78
        }
      },
      "39": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 46
        }
      },
      "40": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 49
        }
      },
      "41": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 58
        }
      },
      "42": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 44
        }
      },
      "43": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "44": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 168,
          column: 91
        }
      },
      "45": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 95
        }
      },
      "46": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "47": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 91
        }
      },
      "48": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 31
        }
      },
      "49": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "50": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 37
        }
      },
      "51": {
        start: {
          line: 179,
          column: 59
        },
        end: {
          line: 179,
          column: 63
        }
      },
      "52": {
        start: {
          line: 180,
          column: 34
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "53": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 105
        }
      },
      "54": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 59
        }
      },
      "55": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "56": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 49
        }
      },
      "57": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "58": {
        start: {
          line: 196,
          column: 22
        },
        end: {
          line: 196,
          column: 46
        }
      },
      "59": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 64
        }
      },
      "60": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "61": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 49
        }
      },
      "62": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "63": {
        start: {
          line: 207,
          column: 23
        },
        end: {
          line: 207,
          column: 47
        }
      },
      "64": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 62
        }
      },
      "65": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "66": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 53
        }
      },
      "67": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "68": {
        start: {
          line: 219,
          column: 23
        },
        end: {
          line: 244,
          column: 55
        }
      },
      "69": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "70": {
        start: {
          line: 223,
          column: 36
        },
        end: {
          line: 237,
          column: 18
        }
      },
      "71": {
        start: {
          line: 231,
          column: 55
        },
        end: {
          line: 234,
          column: 33
        }
      },
      "72": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 35
        }
      },
      "73": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 28
        }
      },
      "74": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "75": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 57
        }
      },
      "76": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "77": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 73
        }
      },
      "78": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 28
        }
      },
      "79": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "80": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 57
        }
      },
      "81": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "82": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 51
        }
      },
      "83": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 18
          }
        },
        loc: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 62
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 75
          },
          end: {
            line: 93,
            column: 76
          }
        },
        loc: {
          start: {
            line: 93,
            column: 85
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 93
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 94,
            column: 59
          },
          end: {
            line: 94,
            column: 60
          }
        },
        loc: {
          start: {
            line: 94,
            column: 69
          },
          end: {
            line: 143,
            column: 13
          }
        },
        line: 94
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 132,
            column: 34
          },
          end: {
            line: 132,
            column: 35
          }
        },
        loc: {
          start: {
            line: 132,
            column: 47
          },
          end: {
            line: 142,
            column: 21
          }
        },
        line: 132
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 141,
            column: 67
          },
          end: {
            line: 141,
            column: 68
          }
        },
        loc: {
          start: {
            line: 141,
            column: 80
          },
          end: {
            line: 141,
            column: 99
          }
        },
        line: 141
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 167,
            column: 19
          }
        },
        loc: {
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 167
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 219,
            column: 52
          },
          end: {
            line: 219,
            column: 53
          }
        },
        loc: {
          start: {
            line: 219,
            column: 62
          },
          end: {
            line: 244,
            column: 9
          }
        },
        line: 219
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 221,
            column: 63
          },
          end: {
            line: 221,
            column: 64
          }
        },
        loc: {
          start: {
            line: 221,
            column: 75
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 221
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 47
          }
        },
        loc: {
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 234,
            column: 33
          }
        },
        line: 231
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 51
          }
        }, {
          start: {
            line: 77,
            column: 55
          },
          end: {
            line: 77,
            column: 58
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 78,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 78,
            column: 53
          }
        }, {
          start: {
            line: 78,
            column: 57
          },
          end: {
            line: 78,
            column: 61
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 46
          }
        }, {
          start: {
            line: 79,
            column: 50
          },
          end: {
            line: 79,
            column: 59
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 26
          },
          end: {
            line: 80,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 61
          },
          end: {
            line: 80,
            column: 103
          }
        }, {
          start: {
            line: 80,
            column: 106
          },
          end: {
            line: 80,
            column: 115
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 31
          },
          end: {
            line: 81,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 71
          },
          end: {
            line: 81,
            column: 118
          }
        }, {
          start: {
            line: 81,
            column: 121
          },
          end: {
            line: 81,
            column: 130
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 82,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 82,
            column: 46
          }
        }, {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 82,
            column: 59
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 52
          }
        }, {
          start: {
            line: 83,
            column: 56
          },
          end: {
            line: 83,
            column: 65
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 84,
            column: 21
          },
          end: {
            line: 84,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 21
          },
          end: {
            line: 84,
            column: 48
          }
        }, {
          start: {
            line: 84,
            column: 52
          },
          end: {
            line: 84,
            column: 61
          }
        }],
        line: 84
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 161,
            column: 19
          },
          end: {
            line: 161,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 57
          }
        }, {
          start: {
            line: 161,
            column: 60
          },
          end: {
            line: 161,
            column: 73
          }
        }],
        line: 161
      },
      "11": {
        loc: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "12": {
        loc: {
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 36
          }
        }, {
          start: {
            line: 181,
            column: 40
          },
          end: {
            line: 181,
            column: 41
          }
        }],
        line: 181
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 23
          }
        }, {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 60
          }
        }],
        line: 187
      },
      "15": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "16": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 25
          }
        }, {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 46
          }
        }],
        line: 198
      },
      "17": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "18": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 25
          }
        }, {
          start: {
            line: 210,
            column: 29
          },
          end: {
            line: 210,
            column: 47
          }
        }, {
          start: {
            line: 210,
            column: 51
          },
          end: {
            line: 210,
            column: 57
          }
        }, {
          start: {
            line: 210,
            column: 61
          },
          end: {
            line: 210,
            column: 74
          }
        }],
        line: 210
      },
      "19": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "20": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "21": {
        loc: {
          start: {
            line: 272,
            column: 19
          },
          end: {
            line: 272,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 44
          },
          end: {
            line: 272,
            column: 57
          }
        }, {
          start: {
            line: 272,
            column: 60
          },
          end: {
            line: 272,
            column: 73
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { verifyToken } from '@/lib/auth';\nimport { transferCacheService } from '@/lib/transferCache';\nimport { trackTransferOperation } from '@/lib/transferPerformanceMonitor';\nimport { deduplicateRequest } from '@/lib/request-deduplication';\n\n// Default fallback data for transfers\nconst defaultTransfersData = [\n    { id: 1, status: 'pending', created_at: '2025-05-20T10:00:00Z', completed_at: null, source_shop_name: 'Colombo Shop', destination_shop_name: 'Kandy Shop', initiated_by: 'System User', item_count: 5, total_items: 25 },\n    { id: 2, status: 'completed', created_at: '2025-05-19T09:30:00Z', completed_at: '2025-05-19T16:00:00Z', source_shop_name: 'Galle Shop', destination_shop_name: 'Colombo Shop', initiated_by: 'System User', item_count: 3, total_items: 15 },\n    { id: 3, status: 'cancelled', created_at: '2025-05-18T14:00:00Z', completed_at: null, source_shop_name: 'Kandy Shop', destination_shop_name: 'Jaffna Shop', initiated_by: 'System User', item_count: 2, total_items: 10 }\n];\n\n// GET: Fetch all inventory transfers\nexport async function GET(req: NextRequest) {\n    const operation = trackTransferOperation('list');\n\n    console.log('GET /api/inventory/transfers - Checking permission: inventory:view');\n    // Check for inventory:view permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        console.error('Permission denied for inventory:view:', permissionError.status);\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    try {\n        console.log('Executing query to fetch transfers...');\n\n        // Generate cache key based on request parameters\n        const { searchParams } = new URL(req.url);\n        const cacheKey = transferCacheService.generateTransferCacheKey('transfers:list', {\n            page: parseInt(searchParams.get('page') || '1'),\n            limit: parseInt(searchParams.get('limit') || '10'),\n            status: searchParams.get('status') || undefined,\n            sourceShopId: searchParams.get('sourceShopId') ? parseInt(searchParams.get('sourceShopId')!) : undefined,\n            destinationShopId: searchParams.get('destinationShopId') ? parseInt(searchParams.get('destinationShopId')!) : undefined,\n            search: searchParams.get('search') || undefined,\n            startDate: searchParams.get('startDate') || undefined,\n            endDate: searchParams.get('endDate') || undefined\n        });\n\n        // Try to get from cache first\n        const cached = await transferCacheService.get(cacheKey);\n        if (cached) {\n            operation.end(true, undefined, true);\n            return NextResponse.json(cached);\n        }\n\n        // Use request deduplication for identical requests\n        const result = await deduplicateRequest(\n            async () => {\n                const transfers = await safeQuery(\n                    async () => {\n                        const result = await prisma.inventoryTransfer.findMany({\n                            select: {\n                                id: true,\n                                status: true,\n                                createdAt: true,\n                                updatedAt: true,\n                                notes: true,\n                                fromShop: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                toShop: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                fromUser: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                },\n                                transferItems: {\n                                    select: {\n                                        id: true,\n                                        quantity: true\n                                    }\n                                }\n                            },\n                            orderBy: {\n                                createdAt: 'desc'\n                            }\n                        });\n\n                        // Format the data to match the expected format from the SQL query\n                        return result.map(transfer => ({\n                            id: transfer.id,\n                            status: transfer.status,\n                            created_at: transfer.createdAt.toISOString(),\n                            completed_at: null, // This field doesn't exist in Prisma schema, could be added later\n                            source_shop_name: transfer.fromShop.name,\n                            destination_shop_name: transfer.toShop.name,\n                            initiated_by: transfer.fromUser.name,\n                            item_count: transfer.transferItems.length,\n                            total_items: transfer.transferItems.reduce((sum, item) => sum + item.quantity, 0)\n                        }));\n                    },\n                    defaultTransfersData,\n                    'Failed to fetch inventory transfers'\n                );\n\n                return {\n                    success: true,\n                    data: transfers\n                };\n            },\n            cacheKey,\n            'GET'\n        );\n\n        // Cache the result\n        await transferCacheService.set(cacheKey, result);\n\n        console.log('Query executed successfully. Results:', result.data);\n        console.log(`Retrieved ${result.data.length} transfers successfully`);\n        operation.end(true, undefined, false);\n        return NextResponse.json(result);\n    } catch (error) {\n        console.error('Error fetching transfers:', error);\n        operation.end(false, 'fetch_error');\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching transfers',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}\n\n// POST: Create a new inventory transfer\nexport async function POST(req: NextRequest) {\n    console.log('POST /api/inventory/transfers - Checking permission: inventory:transfer');\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        console.error('Permission denied for inventory:transfer:', permissionError.status);\n        return permissionError;\n    }\n\n    // Create operation with metadata first\n    let operation: any;\n    \n    try {\n        const body = await req.json();\n        const { sourceShopId, destinationShopId, items } = body;\n\n        const operationMetadata = {\n            itemCount: items?.length || 0,\n            shopCount: 2 // source + destination\n        };\n        operation = trackTransferOperation('create', operationMetadata);\n\n        // Get user ID from authorization token\n        const authHeader = req.headers.get('authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            operation.end(false, 'unauthorized');\n            return NextResponse.json({\n                success: false,\n                message: 'Authentication required'\n            }, { status: 401 });\n        }\n\n        const token = authHeader.split(' ')[1];\n        const decodedToken = await verifyToken(token);\n\n        if (!decodedToken || !decodedToken.sub) {\n            operation.end(false, 'unauthorized');\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid token: signature verification failed'\n            }, { status: 401 });\n        }\n\n        const userId = Number(decodedToken.sub);\n        console.log('Creating transfer for user ID:', userId);\n\n        // Validate request data\n        if (!sourceShopId || !destinationShopId || !items || !items.length) {\n            operation.end(false, 'validation_error');\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        const result = await safeQuery(\n            async () => {\n                // Create transfer and items in a transaction\n                const transfer = await prisma.$transaction(\n                    async (tx) => {\n                        // Create the transfer record\n                        const newTransfer = await tx.inventoryTransfer.create({\n                            data: {\n                                fromShopId: sourceShopId,\n                                toShopId: destinationShopId,\n                                fromUserId: userId,\n                                toUserId: userId, // Using the same user for both as we don't have separate users in the UI yet\n                                status: 'pending',\n                                transferItems: {\n                                    create: items.map(item => ({\n                                        productId: parseInt(item.productId),\n                                        quantity: parseInt(item.quantity)\n                                    }))\n                                }\n                            }\n                        });\n\n                        return newTransfer;\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n\n                return transfer;\n            },\n            null,\n            'Failed to create inventory transfer'\n        );\n\n        if (!result) {\n            throw new Error('Failed to create transfer');\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(result.id, [sourceShopId, destinationShopId]);\n\n        console.log('Transfer created successfully with ID:', result.id);\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Inventory transfer created successfully',\n            data: {\n                id: result.id\n            }\n        }, { status: 201 });\n    } catch (error) {\n        console.error('Error creating transfer:', error);\n        if (operation) {\n            operation.end(false, 'creation_error');\n        }\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating transfer',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],
      names: ["GET", "POST", "defaultTransfersData", "id", "status", "created_at", "completed_at", "source_shop_name", "destination_shop_name", "initiated_by", "item_count", "total_items", "req", "operation", "trackTransferOperation", "console", "log", "permissionError", "requirePermission", "error", "end", "searchParams", "URL", "url", "cacheKey", "transferCacheService", "generateTransferCacheKey", "page", "parseInt", "get", "limit", "undefined", "sourceShopId", "destinationShopId", "search", "startDate", "endDate", "cached", "NextResponse", "json", "result", "deduplicateRequest", "transfers", "safeQuery", "prisma", "inventoryTransfer", "findMany", "select", "createdAt", "updatedAt", "notes", "fromShop", "name", "toShop", "fromUser", "transferItems", "quantity", "orderBy", "map", "transfer", "toISOString", "length", "reduce", "sum", "item", "success", "data", "set", "message", "Error", "String", "body", "items", "operationMetadata", "itemCount", "shopCount", "authHeader", "headers", "startsWith", "token", "split", "decodedToken", "verifyToken", "sub", "userId", "Number", "$transaction", "tx", "newTransfer", "create", "fromShopId", "toShopId", "fromUserId", "toUserId", "productId", "timeout", "invalidateTransferCache"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a4738a2ff24cb471a9d0545160e6ad858f847787"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18ou1cfcnl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18ou1cfcnl();
cov_18ou1cfcnl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[0]++;
  cov_18ou1cfcnl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_18ou1cfcnl().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_18ou1cfcnl().f[1]++;
    cov_18ou1cfcnl().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_18ou1cfcnl().f[2]++;
    cov_18ou1cfcnl().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[6]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[7]++, require("../../../../lib/utils/middleware"));
const _prisma =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[8]++, require("../../../../lib/prisma"));
const _auth =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[9]++, require("../../../../lib/auth"));
const _transferCache =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[10]++, require("../../../../lib/transferCache"));
const _transferPerformanceMonitor =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[11]++, require("../../../../lib/transferPerformanceMonitor"));
const _requestdeduplication =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[12]++, require("../../../../lib/request-deduplication"));
// Default fallback data for transfers
const defaultTransfersData =
/* istanbul ignore next */
(cov_18ou1cfcnl().s[13]++, [{
  id: 1,
  status: "pending",
  created_at: "2025-05-20T10:00:00Z",
  completed_at: null,
  source_shop_name: "Colombo Shop",
  destination_shop_name: "Kandy Shop",
  initiated_by: "System User",
  item_count: 5,
  total_items: 25
}, {
  id: 2,
  status: "completed",
  created_at: "2025-05-19T09:30:00Z",
  completed_at: "2025-05-19T16:00:00Z",
  source_shop_name: "Galle Shop",
  destination_shop_name: "Colombo Shop",
  initiated_by: "System User",
  item_count: 3,
  total_items: 15
}, {
  id: 3,
  status: "cancelled",
  created_at: "2025-05-18T14:00:00Z",
  completed_at: null,
  source_shop_name: "Kandy Shop",
  destination_shop_name: "Jaffna Shop",
  initiated_by: "System User",
  item_count: 2,
  total_items: 10
}]);
async function GET(req) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[3]++;
  const operation =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[14]++, (0, _transferPerformanceMonitor.trackTransferOperation)("list"));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[15]++;
  console.log("GET /api/inventory/transfers - Checking permission: inventory:view");
  // Check for inventory:view permission
  const permissionError =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[16]++, await (0, _middleware.requirePermission)("inventory:view")(req));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[17]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[0][0]++;
    cov_18ou1cfcnl().s[18]++;
    console.error("Permission denied for inventory:view:", permissionError.status);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[19]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[20]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[0][1]++;
  }
  cov_18ou1cfcnl().s[21]++;
  try {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[22]++;
    console.log("Executing query to fetch transfers...");
    // Generate cache key based on request parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[23]++, new URL(req.url));
    const cacheKey =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[24]++, _transferCache.transferCacheService.generateTransferCacheKey("transfers:list", {
      page: parseInt(
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[1][0]++, searchParams.get("page")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[1][1]++, "1")),
      limit: parseInt(
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[2][0]++, searchParams.get("limit")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[2][1]++, "10")),
      status:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[3][0]++, searchParams.get("status")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[3][1]++, undefined),
      sourceShopId: searchParams.get("sourceShopId") ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[4][0]++, parseInt(searchParams.get("sourceShopId"))) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[4][1]++, undefined),
      destinationShopId: searchParams.get("destinationShopId") ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[5][0]++, parseInt(searchParams.get("destinationShopId"))) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[5][1]++, undefined),
      search:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[6][0]++, searchParams.get("search")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[6][1]++, undefined),
      startDate:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[7][0]++, searchParams.get("startDate")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[7][1]++, undefined),
      endDate:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[8][0]++, searchParams.get("endDate")) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[8][1]++, undefined)
    }));
    // Try to get from cache first
    const cached =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[25]++, await _transferCache.transferCacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[26]++;
    if (cached) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[9][0]++;
      cov_18ou1cfcnl().s[27]++;
      operation.end(true, undefined, true);
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[28]++;
      return _server.NextResponse.json(cached);
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[9][1]++;
    }
    // Use request deduplication for identical requests
    const result =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[29]++, await (0, _requestdeduplication.deduplicateRequest)(async () => {
      /* istanbul ignore next */
      cov_18ou1cfcnl().f[4]++;
      const transfers =
      /* istanbul ignore next */
      (cov_18ou1cfcnl().s[30]++, await (0, _prisma.safeQuery)(async () => {
        /* istanbul ignore next */
        cov_18ou1cfcnl().f[5]++;
        const result =
        /* istanbul ignore next */
        (cov_18ou1cfcnl().s[31]++, await _prisma.prisma.inventoryTransfer.findMany({
          select: {
            id: true,
            status: true,
            createdAt: true,
            updatedAt: true,
            notes: true,
            fromShop: {
              select: {
                id: true,
                name: true
              }
            },
            toShop: {
              select: {
                id: true,
                name: true
              }
            },
            fromUser: {
              select: {
                id: true,
                name: true
              }
            },
            transferItems: {
              select: {
                id: true,
                quantity: true
              }
            }
          },
          orderBy: {
            createdAt: "desc"
          }
        }));
        // Format the data to match the expected format from the SQL query
        /* istanbul ignore next */
        cov_18ou1cfcnl().s[32]++;
        return result.map(transfer => {
          /* istanbul ignore next */
          cov_18ou1cfcnl().f[6]++;
          cov_18ou1cfcnl().s[33]++;
          return {
            id: transfer.id,
            status: transfer.status,
            created_at: transfer.createdAt.toISOString(),
            completed_at: null,
            source_shop_name: transfer.fromShop.name,
            destination_shop_name: transfer.toShop.name,
            initiated_by: transfer.fromUser.name,
            item_count: transfer.transferItems.length,
            total_items: transfer.transferItems.reduce((sum, item) => {
              /* istanbul ignore next */
              cov_18ou1cfcnl().f[7]++;
              cov_18ou1cfcnl().s[34]++;
              return sum + item.quantity;
            }, 0)
          };
        });
      }, defaultTransfersData, "Failed to fetch inventory transfers"));
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[35]++;
      return {
        success: true,
        data: transfers
      };
    }, cacheKey, "GET"));
    // Cache the result
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[36]++;
    await _transferCache.transferCacheService.set(cacheKey, result);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[37]++;
    console.log("Query executed successfully. Results:", result.data);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[38]++;
    console.log(`Retrieved ${result.data.length} transfers successfully`);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[39]++;
    operation.end(true, undefined, false);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[40]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[41]++;
    console.error("Error fetching transfers:", error);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[42]++;
    operation.end(false, "fetch_error");
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[43]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching transfers",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[10][1]++, String(error))
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_18ou1cfcnl().f[8]++;
  cov_18ou1cfcnl().s[44]++;
  console.log("POST /api/inventory/transfers - Checking permission: inventory:transfer");
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_18ou1cfcnl().s[45]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[46]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().b[11][0]++;
    cov_18ou1cfcnl().s[47]++;
    console.error("Permission denied for inventory:transfer:", permissionError.status);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[48]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_18ou1cfcnl().b[11][1]++;
  }
  // Create operation with metadata first
  let operation;
  /* istanbul ignore next */
  cov_18ou1cfcnl().s[49]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[50]++, await req.json());
    const {
      sourceShopId,
      destinationShopId,
      items
    } =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[51]++, body);
    const operationMetadata =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[52]++, {
      itemCount:
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[12][0]++, items?.length) ||
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[12][1]++, 0),
      shopCount: 2 // source + destination
    });
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[53]++;
    operation = (0, _transferPerformanceMonitor.trackTransferOperation)("create", operationMetadata);
    // Get user ID from authorization token
    const authHeader =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[54]++, req.headers.get("authorization"));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[14][0]++, !authHeader) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[14][1]++, !authHeader.startsWith("Bearer "))) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[13][0]++;
      cov_18ou1cfcnl().s[56]++;
      operation.end(false, "unauthorized");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[57]++;
      return _server.NextResponse.json({
        success: false,
        message: "Authentication required"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[13][1]++;
    }
    const token =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[58]++, authHeader.split(" ")[1]);
    const decodedToken =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[59]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[16][0]++, !decodedToken) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[16][1]++, !decodedToken.sub)) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[15][0]++;
      cov_18ou1cfcnl().s[61]++;
      operation.end(false, "unauthorized");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[62]++;
      return _server.NextResponse.json({
        success: false,
        message: "Invalid token: signature verification failed"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[15][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[63]++, Number(decodedToken.sub));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[64]++;
    console.log("Creating transfer for user ID:", userId);
    // Validate request data
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[18][0]++, !sourceShopId) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[18][1]++, !destinationShopId) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[18][2]++, !items) ||
    /* istanbul ignore next */
    (cov_18ou1cfcnl().b[18][3]++, !items.length)) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[17][0]++;
      cov_18ou1cfcnl().s[66]++;
      operation.end(false, "validation_error");
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[67]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[17][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_18ou1cfcnl().s[68]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_18ou1cfcnl().f[9]++;
      // Create transfer and items in a transaction
      const transfer =
      /* istanbul ignore next */
      (cov_18ou1cfcnl().s[69]++, await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_18ou1cfcnl().f[10]++;
        // Create the transfer record
        const newTransfer =
        /* istanbul ignore next */
        (cov_18ou1cfcnl().s[70]++, await tx.inventoryTransfer.create({
          data: {
            fromShopId: sourceShopId,
            toShopId: destinationShopId,
            fromUserId: userId,
            toUserId: userId,
            status: "pending",
            transferItems: {
              create: items.map(item => {
                /* istanbul ignore next */
                cov_18ou1cfcnl().f[11]++;
                cov_18ou1cfcnl().s[71]++;
                return {
                  productId: parseInt(item.productId),
                  quantity: parseInt(item.quantity)
                };
              })
            }
          }
        }));
        /* istanbul ignore next */
        cov_18ou1cfcnl().s[72]++;
        return newTransfer;
      }, {
        timeout: 30000
      } // 30-second timeout
      ));
      /* istanbul ignore next */
      cov_18ou1cfcnl().s[73]++;
      return transfer;
    }, null, "Failed to create inventory transfer"));
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[74]++;
    if (!result) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[19][0]++;
      cov_18ou1cfcnl().s[75]++;
      throw new Error("Failed to create transfer");
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[19][1]++;
    }
    // Invalidate relevant caches
    cov_18ou1cfcnl().s[76]++;
    await _transferCache.transferCacheService.invalidateTransferCache(result.id, [sourceShopId, destinationShopId]);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[77]++;
    console.log("Transfer created successfully with ID:", result.id);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[78]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[79]++;
    return _server.NextResponse.json({
      success: true,
      message: "Inventory transfer created successfully",
      data: {
        id: result.id
      }
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[80]++;
    console.error("Error creating transfer:", error);
    /* istanbul ignore next */
    cov_18ou1cfcnl().s[81]++;
    if (operation) {
      /* istanbul ignore next */
      cov_18ou1cfcnl().b[20][0]++;
      cov_18ou1cfcnl().s[82]++;
      operation.end(false, "creation_error");
    } else
    /* istanbul ignore next */
    {
      cov_18ou1cfcnl().b[20][1]++;
    }
    cov_18ou1cfcnl().s[83]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating transfer",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[21][0]++, error.message) :
      /* istanbul ignore next */
      (cov_18ou1cfcnl().b[21][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,