5c6f026c7dd978e16760b8eefd192d07
"use strict";

/* istanbul ignore next */
function cov_icik2zlkt() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/reports/sales/route.ts";
  var hash = "c176fd9fc536484434fae9b28067e9bd17978514";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/reports/sales/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "7": {
        start: {
          line: 16,
          column: 32
        },
        end: {
          line: 16,
          column: 78
        }
      },
      "8": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 98
        }
      },
      "9": {
        start: {
          line: 18,
          column: 26
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "10": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "11": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "12": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "13": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 57,
            column: 28
          },
          end: {
            line: 57,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 28
          },
          end: {
            line: 57,
            column: 48
          }
        }, {
          start: {
            line: 57,
            column: 52
          },
          end: {
            line: 57,
            column: 53
          }
        }],
        line: 57
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 58,
            column: 53
          }
        }, {
          start: {
            line: 58,
            column: 57
          },
          end: {
            line: 58,
            column: 58
          }
        }],
        line: 58
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/reports/sales/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma'; // Assuming you have prisma configured\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const salesData = await prisma.invoice.aggregate({\n            _sum: {\n                total: true,\n            },\n            _count: {\n                id: true,\n            },\n            where: {\n                createdAt: {\n                    gte: firstDayOfMonth,\n                    lte: lastDayOfMonth,\n                },\n                status: 'paid',\n            },\n        });\n\n        const invoices = await prisma.invoice.findMany({\n            where: {\n                createdAt: {\n                    gte: firstDayOfMonth,\n                    lte: lastDayOfMonth,\n                },\n                status: 'paid',\n            },\n            include: {\n                customer: true,\n                shop: true,\n                items: {\n                    include: {\n                        product: true,\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            summary: {\n                totalSales: salesData._sum.total || 0,\n                numberOfInvoices: salesData._count.id || 0,\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n            },\n            details: invoices, // For \"View\" action and CSV export\n        });\n\n    } catch (error) {\n        console.error('Error fetching monthly sales report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch monthly sales report' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "request", "now", "Date", "firstDayOfMonth", "getFullYear", "getMonth", "lastDayOfMonth", "salesData", "prisma", "invoice", "aggregate", "_sum", "total", "_count", "id", "where", "createdAt", "gte", "lte", "status", "invoices", "findMany", "include", "customer", "shop", "items", "product", "orderBy", "NextResponse", "json", "success", "summary", "totalSales", "numberOfInvoices", "month", "toLocaleString", "year", "details", "error", "console", "message"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;wBACN;AAEhB,eAAeA,IAAIC,OAAgB;IACtC,IAAI;QACA,MAAMC,MAAM,IAAIC;QAChB,MAAMC,kBAAkB,IAAID,KAAKD,IAAIG,WAAW,IAAIH,IAAII,QAAQ,IAAI;QACpE,MAAMC,iBAAiB,IAAIJ,KAAKD,IAAIG,WAAW,IAAIH,IAAII,QAAQ,KAAK,GAAG,GAAG,IAAI,IAAI,IAAI;QAEtF,MAAME,YAAY,MAAMC,cAAM,CAACC,OAAO,CAACC,SAAS,CAAC;YAC7CC,MAAM;gBACFC,OAAO;YACX;YACAC,QAAQ;gBACJC,IAAI;YACR;YACAC,OAAO;gBACHC,WAAW;oBACPC,KAAKd;oBACLe,KAAKZ;gBACT;gBACAa,QAAQ;YACZ;QACJ;QAEA,MAAMC,WAAW,MAAMZ,cAAM,CAACC,OAAO,CAACY,QAAQ,CAAC;YAC3CN,OAAO;gBACHC,WAAW;oBACPC,KAAKd;oBACLe,KAAKZ;gBACT;gBACAa,QAAQ;YACZ;YACAG,SAAS;gBACLC,UAAU;gBACVC,MAAM;gBACNC,OAAO;oBACHH,SAAS;wBACLI,SAAS;oBACb;gBACJ;YACJ;YACAC,SAAS;gBACLX,WAAW;YACf;QACJ;QAEA,OAAOY,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;gBACLC,YAAYzB,UAAUI,IAAI,CAACC,KAAK,IAAI;gBACpCqB,kBAAkB1B,UAAUM,MAAM,CAACC,EAAE,IAAI;gBACzCoB,OAAOjC,IAAIkC,cAAc,CAAC,WAAW;oBAAED,OAAO;gBAAO;gBACrDE,MAAMnC,IAAIG,WAAW;YACzB;YACAiC,SAASjB;QACb;IAEJ,EAAE,OAAOkB,OAAO;QACZC,QAAQD,KAAK,CAAC,wCAAwCA;QACtD,OAAOV,oBAAY,CAACC,IAAI,CACpB;YAAEC,SAAS;YAAOU,SAAS;QAAuC,GAClE;YAAErB,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c176fd9fc536484434fae9b28067e9bd17978514"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_icik2zlkt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_icik2zlkt();
cov_icik2zlkt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_icik2zlkt().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_icik2zlkt().f[0]++;
    cov_icik2zlkt().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_icik2zlkt().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_icik2zlkt().s[4]++, require("../../../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_icik2zlkt().f[1]++;
  cov_icik2zlkt().s[5]++;
  try {
    const now =
    /* istanbul ignore next */
    (cov_icik2zlkt().s[6]++, new Date());
    const firstDayOfMonth =
    /* istanbul ignore next */
    (cov_icik2zlkt().s[7]++, new Date(now.getFullYear(), now.getMonth(), 1));
    const lastDayOfMonth =
    /* istanbul ignore next */
    (cov_icik2zlkt().s[8]++, new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999));
    const salesData =
    /* istanbul ignore next */
    (cov_icik2zlkt().s[9]++, await _prisma.prisma.invoice.aggregate({
      _sum: {
        total: true
      },
      _count: {
        id: true
      },
      where: {
        createdAt: {
          gte: firstDayOfMonth,
          lte: lastDayOfMonth
        },
        status: "paid"
      }
    }));
    const invoices =
    /* istanbul ignore next */
    (cov_icik2zlkt().s[10]++, await _prisma.prisma.invoice.findMany({
      where: {
        createdAt: {
          gte: firstDayOfMonth,
          lte: lastDayOfMonth
        },
        status: "paid"
      },
      include: {
        customer: true,
        shop: true,
        items: {
          include: {
            product: true
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_icik2zlkt().s[11]++;
    return _server.NextResponse.json({
      success: true,
      summary: {
        totalSales:
        /* istanbul ignore next */
        (cov_icik2zlkt().b[0][0]++, salesData._sum.total) ||
        /* istanbul ignore next */
        (cov_icik2zlkt().b[0][1]++, 0),
        numberOfInvoices:
        /* istanbul ignore next */
        (cov_icik2zlkt().b[1][0]++, salesData._count.id) ||
        /* istanbul ignore next */
        (cov_icik2zlkt().b[1][1]++, 0),
        month: now.toLocaleString("default", {
          month: "long"
        }),
        year: now.getFullYear()
      },
      details: invoices
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_icik2zlkt().s[12]++;
    console.error("Error fetching monthly sales report:", error);
    /* istanbul ignore next */
    cov_icik2zlkt().s[13]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch monthly sales report"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaWNpazJ6bGt0IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwicmVxdWVzdCIsImYiLCJub3ciLCJEYXRlIiwiZmlyc3REYXlPZk1vbnRoIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImxhc3REYXlPZk1vbnRoIiwic2FsZXNEYXRhIiwiX3ByaXNtYSIsInByaXNtYSIsImludm9pY2UiLCJhZ2dyZWdhdGUiLCJfc3VtIiwidG90YWwiLCJfY291bnQiLCJpZCIsIndoZXJlIiwiY3JlYXRlZEF0IiwiZ3RlIiwibHRlIiwic3RhdHVzIiwiaW52b2ljZXMiLCJmaW5kTWFueSIsImluY2x1ZGUiLCJjdXN0b21lciIsInNob3AiLCJpdGVtcyIsInByb2R1Y3QiLCJvcmRlckJ5IiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJzdWNjZXNzIiwic3VtbWFyeSIsInRvdGFsU2FsZXMiLCJiIiwibnVtYmVyT2ZJbnZvaWNlcyIsIm1vbnRoIiwidG9Mb2NhbGVTdHJpbmciLCJ5ZWFyIiwiZGV0YWlscyIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL3JlcG9ydHMvc2FsZXMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJzsgLy8gQXNzdW1pbmcgeW91IGhhdmUgcHJpc21hIGNvbmZpZ3VyZWRcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZmlyc3REYXlPZk1vbnRoID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKTtcbiAgICAgICAgY29uc3QgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCkgKyAxLCAwLCAyMywgNTksIDU5LCA5OTkpO1xuXG4gICAgICAgIGNvbnN0IHNhbGVzRGF0YSA9IGF3YWl0IHByaXNtYS5pbnZvaWNlLmFnZ3JlZ2F0ZSh7XG4gICAgICAgICAgICBfc3VtOiB7XG4gICAgICAgICAgICAgICAgdG90YWw6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZ3RlOiBmaXJzdERheU9mTW9udGgsXG4gICAgICAgICAgICAgICAgICAgIGx0ZTogbGFzdERheU9mTW9udGgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdwYWlkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGludm9pY2VzID0gYXdhaXQgcHJpc21hLmludm9pY2UuZmluZE1hbnkoe1xuICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZ3RlOiBmaXJzdERheU9mTW9udGgsXG4gICAgICAgICAgICAgICAgICAgIGx0ZTogbGFzdERheU9mTW9udGgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdwYWlkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgY3VzdG9tZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6ICdkZXNjJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgc3VtbWFyeToge1xuICAgICAgICAgICAgICAgIHRvdGFsU2FsZXM6IHNhbGVzRGF0YS5fc3VtLnRvdGFsIHx8IDAsXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZJbnZvaWNlczogc2FsZXNEYXRhLl9jb3VudC5pZCB8fCAwLFxuICAgICAgICAgICAgICAgIG1vbnRoOiBub3cudG9Mb2NhbGVTdHJpbmcoJ2RlZmF1bHQnLCB7IG1vbnRoOiAnbG9uZycgfSksXG4gICAgICAgICAgICAgICAgeWVhcjogbm93LmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGV0YWlsczogaW52b2ljZXMsIC8vIEZvciBcIlZpZXdcIiBhY3Rpb24gYW5kIENTViBleHBvcnRcbiAgICAgICAgfSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtb250aGx5IHNhbGVzIHJlcG9ydDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICAgIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggbW9udGhseSBzYWxlcyByZXBvcnQnIH0sXG4gICAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgKTtcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTVE7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTtBQUFBQSxhQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFIYzs7Ozs7O1dBQUFDLEdBQUE7Ozs7O2lDQUhPOzs7aUNBQ047QUFFaEIsZUFBZUEsSUFBSUMsT0FBZ0I7RUFBQTtFQUFBSixhQUFBLEdBQUFLLENBQUE7RUFBQUwsYUFBQSxHQUFBRSxDQUFBO0VBQ3RDLElBQUk7SUFDQSxNQUFNSSxHQUFBO0lBQUE7SUFBQSxDQUFBTixhQUFBLEdBQUFFLENBQUEsT0FBTSxJQUFJSyxJQUFBO0lBQ2hCLE1BQU1DLGVBQUE7SUFBQTtJQUFBLENBQUFSLGFBQUEsR0FBQUUsQ0FBQSxPQUFrQixJQUFJSyxJQUFBLENBQUtELEdBQUEsQ0FBSUcsV0FBVyxJQUFJSCxHQUFBLENBQUlJLFFBQVEsSUFBSTtJQUNwRSxNQUFNQyxjQUFBO0lBQUE7SUFBQSxDQUFBWCxhQUFBLEdBQUFFLENBQUEsT0FBaUIsSUFBSUssSUFBQSxDQUFLRCxHQUFBLENBQUlHLFdBQVcsSUFBSUgsR0FBQSxDQUFJSSxRQUFRLEtBQUssR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJO0lBRXRGLE1BQU1FLFNBQUE7SUFBQTtJQUFBLENBQUFaLGFBQUEsR0FBQUUsQ0FBQSxPQUFZLE1BQU1XLE9BQUEsQ0FBQUMsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsQ0FBQztNQUM3Q0MsSUFBQSxFQUFNO1FBQ0ZDLEtBQUEsRUFBTztNQUNYO01BQ0FDLE1BQUEsRUFBUTtRQUNKQyxFQUFBLEVBQUk7TUFDUjtNQUNBQyxLQUFBLEVBQU87UUFDSEMsU0FBQSxFQUFXO1VBQ1BDLEdBQUEsRUFBS2YsZUFBQTtVQUNMZ0IsR0FBQSxFQUFLYjtRQUNUO1FBQ0FjLE1BQUEsRUFBUTtNQUNaO0lBQ0o7SUFFQSxNQUFNQyxRQUFBO0lBQUE7SUFBQSxDQUFBMUIsYUFBQSxHQUFBRSxDQUFBLFFBQVcsTUFBTVcsT0FBQSxDQUFBQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ1ksUUFBUSxDQUFDO01BQzNDTixLQUFBLEVBQU87UUFDSEMsU0FBQSxFQUFXO1VBQ1BDLEdBQUEsRUFBS2YsZUFBQTtVQUNMZ0IsR0FBQSxFQUFLYjtRQUNUO1FBQ0FjLE1BQUEsRUFBUTtNQUNaO01BQ0FHLE9BQUEsRUFBUztRQUNMQyxRQUFBLEVBQVU7UUFDVkMsSUFBQSxFQUFNO1FBQ05DLEtBQUEsRUFBTztVQUNISCxPQUFBLEVBQVM7WUFDTEksT0FBQSxFQUFTO1VBQ2I7UUFDSjtNQUNKO01BQ0FDLE9BQUEsRUFBUztRQUNMWCxTQUFBLEVBQVc7TUFDZjtJQUNKO0lBQUE7SUFBQXRCLGFBQUEsR0FBQUUsQ0FBQTtJQUVBLE9BQU9nQyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQ3JCQyxPQUFBLEVBQVM7TUFDVEMsT0FBQSxFQUFTO1FBQ0xDLFVBQUE7UUFBWTtRQUFBLENBQUF2QyxhQUFBLEdBQUF3QyxDQUFBLFVBQUE1QixTQUFBLENBQVVLLElBQUksQ0FBQ0MsS0FBSztRQUFBO1FBQUEsQ0FBQWxCLGFBQUEsR0FBQXdDLENBQUEsVUFBSTtRQUNwQ0MsZ0JBQUE7UUFBa0I7UUFBQSxDQUFBekMsYUFBQSxHQUFBd0MsQ0FBQSxVQUFBNUIsU0FBQSxDQUFVTyxNQUFNLENBQUNDLEVBQUU7UUFBQTtRQUFBLENBQUFwQixhQUFBLEdBQUF3QyxDQUFBLFVBQUk7UUFDekNFLEtBQUEsRUFBT3BDLEdBQUEsQ0FBSXFDLGNBQWMsQ0FBQyxXQUFXO1VBQUVELEtBQUEsRUFBTztRQUFPO1FBQ3JERSxJQUFBLEVBQU10QyxHQUFBLENBQUlHLFdBQVc7TUFDekI7TUFDQW9DLE9BQUEsRUFBU25CO0lBQ2I7RUFFSixFQUFFLE9BQU9vQixLQUFBLEVBQU87SUFBQTtJQUFBOUMsYUFBQSxHQUFBRSxDQUFBO0lBQ1o2QyxPQUFBLENBQVFELEtBQUssQ0FBQyx3Q0FBd0NBLEtBQUE7SUFBQTtJQUFBOUMsYUFBQSxHQUFBRSxDQUFBO0lBQ3RELE9BQU9nQyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUNwQjtNQUFFQyxPQUFBLEVBQVM7TUFBT1csT0FBQSxFQUFTO0lBQXVDLEdBQ2xFO01BQUV2QixNQUFBLEVBQVE7SUFBSTtFQUV0QjtBQUNKIiwiaWdub3JlTGlzdCI6W119