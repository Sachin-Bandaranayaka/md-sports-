{"version":3,"names":["cov_icik2zlkt","actualCoverage","s","GET","request","f","now","Date","firstDayOfMonth","getFullYear","getMonth","lastDayOfMonth","salesData","_prisma","prisma","invoice","aggregate","_sum","total","_count","id","where","createdAt","gte","lte","status","invoices","findMany","include","customer","shop","items","product","orderBy","_server","NextResponse","json","success","summary","totalSales","b","numberOfInvoices","month","toLocaleString","year","details","error","console","message"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/reports/sales/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma'; // Assuming you have prisma configured\n\nexport async function GET(request: Request) {\n    try {\n        const now = new Date();\n        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n        const salesData = await prisma.invoice.aggregate({\n            _sum: {\n                total: true,\n            },\n            _count: {\n                id: true,\n            },\n            where: {\n                createdAt: {\n                    gte: firstDayOfMonth,\n                    lte: lastDayOfMonth,\n                },\n                status: 'paid',\n            },\n        });\n\n        const invoices = await prisma.invoice.findMany({\n            where: {\n                createdAt: {\n                    gte: firstDayOfMonth,\n                    lte: lastDayOfMonth,\n                },\n                status: 'paid',\n            },\n            include: {\n                customer: true,\n                shop: true,\n                items: {\n                    include: {\n                        product: true,\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n\n        return NextResponse.json({\n            success: true,\n            summary: {\n                totalSales: salesData._sum.total || 0,\n                numberOfInvoices: salesData._count.id || 0,\n                month: now.toLocaleString('default', { month: 'long' }),\n                year: now.getFullYear(),\n            },\n            details: invoices, // For \"View\" action and CSV export\n        });\n\n    } catch (error) {\n        console.error('Error fetching monthly sales report:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch monthly sales report' },\n            { status: 500 }\n        );\n    }\n}"],"mappings":"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","ignoreList":[]}