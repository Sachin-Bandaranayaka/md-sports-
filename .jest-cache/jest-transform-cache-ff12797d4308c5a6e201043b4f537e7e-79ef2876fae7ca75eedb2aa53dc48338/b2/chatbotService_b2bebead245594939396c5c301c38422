8591dab315f84488d0e751159b53f254
"use strict";

/* istanbul ignore next */
function cov_29uoksfmpq() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/chatbotService.ts";
  var hash = "a9cef13faa248744baf552fa0a4dc581f0344d7e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/chatbotService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 71
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 25
        }
      },
      "7": {
        start: {
          line: 22,
          column: 18
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "8": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 67
        }
      },
      "10": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 24,
          column: 67
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 21
        }
      },
      "12": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 147,
          column: 1
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 70
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 109
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "17": {
        start: {
          line: 35,
          column: 39
        },
        end: {
          line: 35,
          column: 85
        }
      },
      "18": {
        start: {
          line: 36,
          column: 35
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "19": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 89
        }
      },
      "20": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 41,
          column: 17
        }
      },
      "21": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 113
        }
      },
      "22": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 124
        }
      },
      "23": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 106
        }
      },
      "24": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 140
        }
      },
      "25": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 173
        }
      },
      "26": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 52
        }
      },
      "27": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "28": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 103
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 105
        }
      },
      "30": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 107
        }
      },
      "31": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 63,
          column: 14
        }
      },
      "32": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 94
        }
      },
      "33": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 33
        }
      },
      "34": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 114
        }
      },
      "35": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "36": {
        start: {
          line: 69,
          column: 35
        },
        end: {
          line: 69,
          column: 40
        }
      },
      "37": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 144
        }
      },
      "38": {
        start: {
          line: 71,
          column: 42
        },
        end: {
          line: 71,
          column: 91
        }
      },
      "39": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "40": {
        start: {
          line: 73,
          column: 41
        },
        end: {
          line: 73,
          column: 65
        }
      },
      "41": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "42": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 112
        }
      },
      "43": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "44": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 196
        }
      },
      "45": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 122
        }
      },
      "46": {
        start: {
          line: 81,
          column: 23
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "47": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 147
        }
      },
      "48": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 100
        }
      },
      "49": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 100
        }
      },
      "50": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 53
        }
      },
      "51": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 101
        }
      },
      "52": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 103
        }
      },
      "53": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "54": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "55": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 115,
          column: 52
        }
      },
      "56": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "57": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 123,
          column: 38
        }
      },
      "58": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "59": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 128,
          column: 18
        }
      },
      "60": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "61": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 134,
          column: 18
        }
      },
      "62": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "63": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 74
        }
      },
      "64": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 33
          }
        },
        loc: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "getCookie",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        loc: {
          start: {
            line: 30,
            column: 37
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        loc: {
          start: {
            line: 113,
            column: 36
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 113
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 35
          },
          end: {
            line: 13,
            column: 38
          }
        }, {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 15,
            column: 5
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 13,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 13,
            column: 14
          }
        }, {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 32
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 39
          }
        }, {
          start: {
            line: 38,
            column: 43
          },
          end: {
            line: 38,
            column: 61
          }
        }, {
          start: {
            line: 38,
            column: 65
          },
          end: {
            line: 38,
            column: 93
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 89
          },
          end: {
            line: 44,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 89
          },
          end: {
            line: 44,
            column: 115
          }
        }, {
          start: {
            line: 44,
            column: 119
          },
          end: {
            line: 44,
            column: 138
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 67
          }
        }, {
          start: {
            line: 45,
            column: 71
          },
          end: {
            line: 45,
            column: 90
          }
        }, {
          start: {
            line: 45,
            column: 94
          },
          end: {
            line: 45,
            column: 171
          }
        }],
        line: 45
      },
      "8": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "9": {
        loc: {
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 52,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 80
          },
          end: {
            line: 52,
            column: 87
          }
        }, {
          start: {
            line: 52,
            column: 90
          },
          end: {
            line: 52,
            column: 101
          }
        }],
        line: 52
      },
      "10": {
        loc: {
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 61,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 59,
            column: 32
          }
        }, {
          start: {
            line: 59,
            column: 36
          },
          end: {
            line: 61,
            column: 21
          }
        }],
        line: 59
      },
      "11": {
        loc: {
          start: {
            line: 67,
            column: 69
          },
          end: {
            line: 67,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 90
          },
          end: {
            line: 67,
            column: 104
          }
        }, {
          start: {
            line: 67,
            column: 107
          },
          end: {
            line: 67,
            column: 112
          }
        }],
        line: 67
      },
      "12": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "13": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 85,
            column: 17
          }
        }],
        line: 72
      },
      "14": {
        loc: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 80,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 80,
            column: 21
          }
        }, {
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 80,
            column: 21
          }
        }],
        line: 74
      },
      "15": {
        loc: {
          start: {
            line: 74,
            column: 24
          },
          end: {
            line: 74,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 24
          },
          end: {
            line: 74,
            column: 36
          }
        }, {
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 74,
            column: 59
          }
        }, {
          start: {
            line: 74,
            column: 63
          },
          end: {
            line: 74,
            column: 83
          }
        }],
        line: 74
      },
      "16": {
        loc: {
          start: {
            line: 75,
            column: 46
          },
          end: {
            line: 75,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 46
          },
          end: {
            line: 75,
            column: 64
          }
        }, {
          start: {
            line: 75,
            column: 68
          },
          end: {
            line: 75,
            column: 88
          }
        }, {
          start: {
            line: 75,
            column: 92
          },
          end: {
            line: 75,
            column: 111
          }
        }],
        line: 75
      },
      "17": {
        loc: {
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 80,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 80,
            column: 21
          }
        }, {
          start: {
            line: 78,
            column: 27
          },
          end: {
            line: 80,
            column: 21
          }
        }],
        line: 76
      },
      "18": {
        loc: {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 85,
            column: 17
          }
        }],
        line: 81
      },
      "19": {
        loc: {
          start: {
            line: 91,
            column: 28
          },
          end: {
            line: 91,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 28
          },
          end: {
            line: 91,
            column: 41
          }
        }, {
          start: {
            line: 91,
            column: 45
          },
          end: {
            line: 91,
            column: 101
          }
        }],
        line: 91
      },
      "20": {
        loc: {
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 120,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 32
          }
        }, {
          start: {
            line: 118,
            column: 36
          },
          end: {
            line: 120,
            column: 21
          }
        }],
        line: 118
      },
      "21": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "22": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 124,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 124,
            column: 29
          }
        }, {
          start: {
            line: 124,
            column: 33
          },
          end: {
            line: 124,
            column: 45
          }
        }],
        line: 124
      },
      "23": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/chatbotService.ts"],
      sourcesContent: ["import axios, { AxiosError } from 'axios';\n\nexport interface ChatMessage {\n    role: 'user' | 'assistant' | 'system';\n    content: string;\n}\n\nexport interface ChatResponse {\n    role: string;\n    content: string;\n}\n\n// Helper function to get a cookie by name\nfunction getCookie(name: string): string | undefined {\n    if (typeof document === 'undefined') {\n        return undefined; // Cookies are not available in non-browser environments\n    }\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop()?.split(';').shift();\n    return undefined;\n}\n\nexport const chatbotService = {\n    /**\n     * Send a message to the chatbot API\n     */\n    async sendMessage(messages: ChatMessage[]): Promise<ChatResponse> {\n        console.log('[ChatbotService] Attempting to send message...');\n        try {\n            console.log('[ChatbotService] Step 1: Checking API key configuration via /api/test-settings...');\n            try {\n                const configResponse = await axios.get('/api/test-settings');\n                const configData = configResponse.data;\n                console.log('[ChatbotService] /api/test-settings response:', configData);\n\n                if (!configData.success || configData.isEmpty || configData.valueLength === 0) {\n                    console.error('[ChatbotService] API key not configured per /api/test-settings.', configData);\n                    throw new Error('Deepseek API key is not configured. Please set it in the AI Assistant settings page.');\n                }\n                console.log('[ChatbotService] API key seems configured according to /api/test-settings.');\n            } catch (configError: any) {\n                console.error('[ChatbotService] Error during /api/test-settings check:', configError.response?.data || configError.message);\n                throw new Error(configError.response?.data?.message || configError.message || 'Failed to verify API key configuration. Please check AI Assistant settings.');\n            }\n\n            // Get CSRF token from cookie\n            const csrfToken = getCookie('csrfToken');\n            if (!csrfToken) {\n                console.warn('[ChatbotService] CSRF token cookie not found. POST request might fail.');\n            }\n            console.log(`[ChatbotService] CSRF Token from cookie: ${csrfToken ? 'found' : 'not found'}`);\n\n            console.log('[ChatbotService] Step 2: API key configured, proceeding to POST /api/chatbot...');\n            const response = await axios.post('/api/chatbot',\n                { messages },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...(csrfToken && { 'X-CSRF-Token': csrfToken }), // Include CSRF token if found\n                    }\n                }\n            );\n            console.log('[ChatbotService] Successfully received response from /api/chatbot.');\n            return response.data;\n\n        } catch (error: any) {\n            console.error('[ChatbotService] Error sending message:', error.isAxiosError ? error.toJSON() : error);\n\n            if (axios.isAxiosError(error)) {\n                const axiosError = error as AxiosError<{ error?: string, message?: string }>;\n                console.error('[ChatbotService] Axios error details. Status:', axiosError.response?.status, 'Data:', axiosError.response?.data);\n\n                let serviceErrorMessage = 'Failed to communicate with the chatbot service.';\n\n                if (axiosError.response) {\n                    const responseData = axiosError.response.data;\n                    if (responseData && (responseData.error || responseData.message)) {\n                        serviceErrorMessage = responseData.error || responseData.message || serviceErrorMessage;\n                    } else if (axiosError.response.status === 403) {\n                        serviceErrorMessage = 'Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.';\n                    } else {\n                        serviceErrorMessage = `Chatbot service request failed with status ${axiosError.response.status}.`;\n                    }\n                } else if (axiosError.request) {\n                    serviceErrorMessage = 'No response received from the chatbot service. Please check your network connection and server status.';\n                } else {\n                    serviceErrorMessage = `Error setting up chatbot request: ${axiosError.message}`;\n                }\n                console.error('[ChatbotService] Throwing error with message:', serviceErrorMessage);\n                throw new Error(serviceErrorMessage);\n            }\n\n            // Fallback for non-Axios errors or errors from the initial config check that weren't AxiosErrors\n            console.error('[ChatbotService] Non-Axios error, throwing original or generic message.');\n            throw new Error(error.message || 'An unexpected error occurred with the chatbot service.');\n        }\n    },\n\n    /**\n     * Get business-specific information for the chatbot\n     * This function can be expanded to fetch real data from your database\n     */\n    async getBusinessInfo(): Promise<Record<string, any>> {\n        // This could be expanded to fetch real data from your database\n        return {\n            businessName: 'MS Sports',\n            inventoryCount: 'Over 1,000 items',\n            topSellingProducts: ['Sports Shoes', 'Jerseys', 'Training Equipment'],\n            customerCount: 'Over 500 registered customers',\n            supplierCount: '50+ active suppliers',\n            // Add more business-specific information\n        };\n    },\n\n    /**\n     * Check if the chatbot is properly configured\n     */\n    async checkConfiguration(): Promise<{ isConfigured: boolean; message?: string }> {\n        try {\n            const csrfToken = getCookie('csrfToken');\n            const response = await axios.get('/api/test-settings', {\n                headers: {\n                    ...(csrfToken && { 'X-CSRF-Token': csrfToken }),\n                }\n            });\n            const data = response.data;\n\n            if (!data.success || !data.exists) {\n                return {\n                    isConfigured: false,\n                    message: 'API key setting not found in database'\n                };\n            }\n\n            if (data.isEmpty) {\n                return {\n                    isConfigured: false,\n                    message: 'API key is empty. Please configure it in settings.'\n                };\n            }\n\n            return { isConfigured: true };\n        } catch (error) {\n            console.error('Error checking chatbot configuration:', error);\n            return {\n                isConfigured: false,\n                message: 'Failed to check configuration. Please try again.'\n            };\n        }\n    }\n}; "],
      names: ["chatbotService", "getCookie", "name", "document", "undefined", "value", "cookie", "parts", "split", "length", "pop", "shift", "sendMessage", "messages", "console", "log", "configResponse", "axios", "get", "configData", "data", "success", "isEmpty", "valueLength", "error", "Error", "configError", "response", "message", "csrfToken", "warn", "post", "headers", "isAxiosError", "toJSON", "axiosError", "status", "serviceErrorMessage", "responseData", "request", "getBusinessInfo", "businessName", "inventoryCount", "topSellingProducts", "customerCount", "supplierCount", "checkConfiguration", "exists", "isConfigured"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a9cef13faa248744baf552fa0a4dc581f0344d7e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29uoksfmpq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29uoksfmpq();
cov_29uoksfmpq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29uoksfmpq().s[1]++;
Object.defineProperty(exports, "chatbotService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_29uoksfmpq().f[0]++;
    cov_29uoksfmpq().s[2]++;
    return chatbotService;
  }
});
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_29uoksfmpq().s[3]++, _interop_require_default(require("axios")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_29uoksfmpq().f[1]++;
  cov_29uoksfmpq().s[4]++;
  return /* istanbul ignore next */(cov_29uoksfmpq().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_29uoksfmpq().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_29uoksfmpq().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_29uoksfmpq().b[0][1]++, {
    default: obj
  });
}
// Helper function to get a cookie by name
function getCookie(name) {
  /* istanbul ignore next */
  cov_29uoksfmpq().f[2]++;
  cov_29uoksfmpq().s[5]++;
  if (typeof document === "undefined") {
    /* istanbul ignore next */
    cov_29uoksfmpq().b[2][0]++;
    cov_29uoksfmpq().s[6]++;
    return undefined; // Cookies are not available in non-browser environments
  } else
  /* istanbul ignore next */
  {
    cov_29uoksfmpq().b[2][1]++;
  }
  const value =
  /* istanbul ignore next */
  (cov_29uoksfmpq().s[7]++, `; ${document.cookie}`);
  const parts =
  /* istanbul ignore next */
  (cov_29uoksfmpq().s[8]++, value.split(`; ${name}=`));
  /* istanbul ignore next */
  cov_29uoksfmpq().s[9]++;
  if (parts.length === 2) {
    /* istanbul ignore next */
    cov_29uoksfmpq().b[3][0]++;
    cov_29uoksfmpq().s[10]++;
    return parts.pop()?.split(";").shift();
  } else
  /* istanbul ignore next */
  {
    cov_29uoksfmpq().b[3][1]++;
  }
  cov_29uoksfmpq().s[11]++;
  return undefined;
}
const chatbotService =
/* istanbul ignore next */
(cov_29uoksfmpq().s[12]++, {
  /**
   * Send a message to the chatbot API
   */
  async sendMessage(messages) {
    /* istanbul ignore next */
    cov_29uoksfmpq().f[3]++;
    cov_29uoksfmpq().s[13]++;
    console.log("[ChatbotService] Attempting to send message...");
    /* istanbul ignore next */
    cov_29uoksfmpq().s[14]++;
    try {
      /* istanbul ignore next */
      cov_29uoksfmpq().s[15]++;
      console.log("[ChatbotService] Step 1: Checking API key configuration via /api/test-settings...");
      /* istanbul ignore next */
      cov_29uoksfmpq().s[16]++;
      try {
        const configResponse =
        /* istanbul ignore next */
        (cov_29uoksfmpq().s[17]++, await _axios.default.get("/api/test-settings"));
        const configData =
        /* istanbul ignore next */
        (cov_29uoksfmpq().s[18]++, configResponse.data);
        /* istanbul ignore next */
        cov_29uoksfmpq().s[19]++;
        console.log("[ChatbotService] /api/test-settings response:", configData);
        /* istanbul ignore next */
        cov_29uoksfmpq().s[20]++;
        if (
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[5][0]++, !configData.success) ||
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[5][1]++, configData.isEmpty) ||
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[5][2]++, configData.valueLength === 0)) {
          /* istanbul ignore next */
          cov_29uoksfmpq().b[4][0]++;
          cov_29uoksfmpq().s[21]++;
          console.error("[ChatbotService] API key not configured per /api/test-settings.", configData);
          /* istanbul ignore next */
          cov_29uoksfmpq().s[22]++;
          throw new Error("Deepseek API key is not configured. Please set it in the AI Assistant settings page.");
        } else
        /* istanbul ignore next */
        {
          cov_29uoksfmpq().b[4][1]++;
        }
        cov_29uoksfmpq().s[23]++;
        console.log("[ChatbotService] API key seems configured according to /api/test-settings.");
      } catch (configError) {
        /* istanbul ignore next */
        cov_29uoksfmpq().s[24]++;
        console.error("[ChatbotService] Error during /api/test-settings check:",
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[6][0]++, configError.response?.data) ||
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[6][1]++, configError.message));
        /* istanbul ignore next */
        cov_29uoksfmpq().s[25]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[7][0]++, configError.response?.data?.message) ||
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[7][1]++, configError.message) ||
        /* istanbul ignore next */
        (cov_29uoksfmpq().b[7][2]++, "Failed to verify API key configuration. Please check AI Assistant settings."));
      }
      // Get CSRF token from cookie
      const csrfToken =
      /* istanbul ignore next */
      (cov_29uoksfmpq().s[26]++, getCookie("csrfToken"));
      /* istanbul ignore next */
      cov_29uoksfmpq().s[27]++;
      if (!csrfToken) {
        /* istanbul ignore next */
        cov_29uoksfmpq().b[8][0]++;
        cov_29uoksfmpq().s[28]++;
        console.warn("[ChatbotService] CSRF token cookie not found. POST request might fail.");
      } else
      /* istanbul ignore next */
      {
        cov_29uoksfmpq().b[8][1]++;
      }
      cov_29uoksfmpq().s[29]++;
      console.log(`[ChatbotService] CSRF Token from cookie: ${csrfToken ?
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[9][0]++, "found") :
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[9][1]++, "not found")}`);
      /* istanbul ignore next */
      cov_29uoksfmpq().s[30]++;
      console.log("[ChatbotService] Step 2: API key configured, proceeding to POST /api/chatbot...");
      const response =
      /* istanbul ignore next */
      (cov_29uoksfmpq().s[31]++, await _axios.default.post("/api/chatbot", {
        messages
      }, {
        headers: {
          "Content-Type": "application/json",
          ...(
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[10][0]++, csrfToken) &&
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[10][1]++, {
            "X-CSRF-Token": csrfToken
          }))
        }
      }));
      /* istanbul ignore next */
      cov_29uoksfmpq().s[32]++;
      console.log("[ChatbotService] Successfully received response from /api/chatbot.");
      /* istanbul ignore next */
      cov_29uoksfmpq().s[33]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_29uoksfmpq().s[34]++;
      console.error("[ChatbotService] Error sending message:", error.isAxiosError ?
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[11][0]++, error.toJSON()) :
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[11][1]++, error));
      /* istanbul ignore next */
      cov_29uoksfmpq().s[35]++;
      if (_axios.default.isAxiosError(error)) {
        /* istanbul ignore next */
        cov_29uoksfmpq().b[12][0]++;
        const axiosError =
        /* istanbul ignore next */
        (cov_29uoksfmpq().s[36]++, error);
        /* istanbul ignore next */
        cov_29uoksfmpq().s[37]++;
        console.error("[ChatbotService] Axios error details. Status:", axiosError.response?.status, "Data:", axiosError.response?.data);
        let serviceErrorMessage =
        /* istanbul ignore next */
        (cov_29uoksfmpq().s[38]++, "Failed to communicate with the chatbot service.");
        /* istanbul ignore next */
        cov_29uoksfmpq().s[39]++;
        if (axiosError.response) {
          /* istanbul ignore next */
          cov_29uoksfmpq().b[13][0]++;
          const responseData =
          /* istanbul ignore next */
          (cov_29uoksfmpq().s[40]++, axiosError.response.data);
          /* istanbul ignore next */
          cov_29uoksfmpq().s[41]++;
          if (
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[15][0]++, responseData) && (
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[15][1]++, responseData.error) ||
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[15][2]++, responseData.message))) {
            /* istanbul ignore next */
            cov_29uoksfmpq().b[14][0]++;
            cov_29uoksfmpq().s[42]++;
            serviceErrorMessage =
            /* istanbul ignore next */
            (cov_29uoksfmpq().b[16][0]++, responseData.error) ||
            /* istanbul ignore next */
            (cov_29uoksfmpq().b[16][1]++, responseData.message) ||
            /* istanbul ignore next */
            (cov_29uoksfmpq().b[16][2]++, serviceErrorMessage);
          } else {
            /* istanbul ignore next */
            cov_29uoksfmpq().b[14][1]++;
            cov_29uoksfmpq().s[43]++;
            if (axiosError.response.status === 403) {
              /* istanbul ignore next */
              cov_29uoksfmpq().b[17][0]++;
              cov_29uoksfmpq().s[44]++;
              serviceErrorMessage = "Access to the chatbot service was denied (403). Please check API key and configuration in AI Assistant settings, or a CSRF token issue might exist.";
            } else {
              /* istanbul ignore next */
              cov_29uoksfmpq().b[17][1]++;
              cov_29uoksfmpq().s[45]++;
              serviceErrorMessage = `Chatbot service request failed with status ${axiosError.response.status}.`;
            }
          }
        } else {
          /* istanbul ignore next */
          cov_29uoksfmpq().b[13][1]++;
          cov_29uoksfmpq().s[46]++;
          if (axiosError.request) {
            /* istanbul ignore next */
            cov_29uoksfmpq().b[18][0]++;
            cov_29uoksfmpq().s[47]++;
            serviceErrorMessage = "No response received from the chatbot service. Please check your network connection and server status.";
          } else {
            /* istanbul ignore next */
            cov_29uoksfmpq().b[18][1]++;
            cov_29uoksfmpq().s[48]++;
            serviceErrorMessage = `Error setting up chatbot request: ${axiosError.message}`;
          }
        }
        /* istanbul ignore next */
        cov_29uoksfmpq().s[49]++;
        console.error("[ChatbotService] Throwing error with message:", serviceErrorMessage);
        /* istanbul ignore next */
        cov_29uoksfmpq().s[50]++;
        throw new Error(serviceErrorMessage);
      } else
      /* istanbul ignore next */
      {
        cov_29uoksfmpq().b[12][1]++;
      }
      // Fallback for non-Axios errors or errors from the initial config check that weren't AxiosErrors
      cov_29uoksfmpq().s[51]++;
      console.error("[ChatbotService] Non-Axios error, throwing original or generic message.");
      /* istanbul ignore next */
      cov_29uoksfmpq().s[52]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[19][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[19][1]++, "An unexpected error occurred with the chatbot service."));
    }
  },
  /**
   * Get business-specific information for the chatbot
   * This function can be expanded to fetch real data from your database
   */
  async getBusinessInfo() {
    /* istanbul ignore next */
    cov_29uoksfmpq().f[4]++;
    cov_29uoksfmpq().s[53]++;
    // This could be expanded to fetch real data from your database
    return {
      businessName: "MS Sports",
      inventoryCount: "Over 1,000 items",
      topSellingProducts: ["Sports Shoes", "Jerseys", "Training Equipment"],
      customerCount: "Over 500 registered customers",
      supplierCount: "50+ active suppliers"
    };
  },
  /**
   * Check if the chatbot is properly configured
   */
  async checkConfiguration() {
    /* istanbul ignore next */
    cov_29uoksfmpq().f[5]++;
    cov_29uoksfmpq().s[54]++;
    try {
      const csrfToken =
      /* istanbul ignore next */
      (cov_29uoksfmpq().s[55]++, getCookie("csrfToken"));
      const response =
      /* istanbul ignore next */
      (cov_29uoksfmpq().s[56]++, await _axios.default.get("/api/test-settings", {
        headers: {
          ...(
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[20][0]++, csrfToken) &&
          /* istanbul ignore next */
          (cov_29uoksfmpq().b[20][1]++, {
            "X-CSRF-Token": csrfToken
          }))
        }
      }));
      const data =
      /* istanbul ignore next */
      (cov_29uoksfmpq().s[57]++, response.data);
      /* istanbul ignore next */
      cov_29uoksfmpq().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[22][0]++, !data.success) ||
      /* istanbul ignore next */
      (cov_29uoksfmpq().b[22][1]++, !data.exists)) {
        /* istanbul ignore next */
        cov_29uoksfmpq().b[21][0]++;
        cov_29uoksfmpq().s[59]++;
        return {
          isConfigured: false,
          message: "API key setting not found in database"
        };
      } else
      /* istanbul ignore next */
      {
        cov_29uoksfmpq().b[21][1]++;
      }
      cov_29uoksfmpq().s[60]++;
      if (data.isEmpty) {
        /* istanbul ignore next */
        cov_29uoksfmpq().b[23][0]++;
        cov_29uoksfmpq().s[61]++;
        return {
          isConfigured: false,
          message: "API key is empty. Please configure it in settings."
        };
      } else
      /* istanbul ignore next */
      {
        cov_29uoksfmpq().b[23][1]++;
      }
      cov_29uoksfmpq().s[62]++;
      return {
        isConfigured: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_29uoksfmpq().s[63]++;
      console.error("Error checking chatbot configuration:", error);
      /* istanbul ignore next */
      cov_29uoksfmpq().s[64]++;
      return {
        isConfigured: false,
        message: "Failed to check configuration. Please try again."
      };
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,